


NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: echien.F90

(    1) SUBROUTINE ECHIEN(CDNAMC,KTYPTR,LDMAP,&
(    2)  & KTRONC,KDGL,KNXLON,KNLOPA,PSINLA,&
(    3)  & KFLEV,PREF,PVALH,PVBH,KINF,&
(    4)  & PEPS,KULOUT)  
(    5) 
(    6) !**** *ECHIEN*  - CHeck Input ENvironment:   LAM case
(    7) 
(    8) !     Purpose.
(    9) !     --------
(   10) !           It controls coherence between defined geometry and ALADIN
(   11) !       file. In the case of inconsistency it calls ABOR1. This
(   12) !       routine could be also used in order to simply get full
(   13) !       information from the cadre.
(   14) 
(   15) !**   Interface.
(   16) !     ----------
(   17) !        *CALL* *ECHIEN(...)
(   18) 
(   19) !        Explicit arguments :
(   20) !        --------------------
(   21) !        Input (Output case is now done in *ERIEN*) :
(   22) !        ----------------------------
(   23) 
(   24) !        CDNAMC        ...   Name of the cadre
(   25) 
(   26) !        Determination of reference geometry:
(   27) 
(   28) !        KTYPTR        ...   Truncation NMSMAX
(   29) !        LDMAP         ...   .TRUE. : Map projection calculated by EGGPACK
(   30) !                      ...   .FALSE.: Biperiodic experiment file, EGGPACK






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 3

(   31) !                                     routine not called
(   32) !        KTRONC        ...   Truncation NSMAX
(   33) !        KDGL          ...   Number of latitudes without poles
(   34) !        KNXLON        ...   Max. number of longitudes at a parallel
(   35) !        KNLOPA        ...   Limited Area characteristics
(   36) !        PSINLA        ...   Horizontal geometry characteristics
(   37) !        KFLEV         ...   Number of vertical levels
(   38) !        PREF          ...   Reference pressure
(   39) !        PVALH         ...   "A" coefficients of vertical system
(   40) !        PVBH          ...   "B" coefficients of vertical system
(   41) 
(   42) !   -----------------------------------------------------------------
(   43) !        Input :
(   44) !        -------
(   45) 
(   46) !        PEPS          ...   Precision of the tests on real variables
(   47) !        KINF          ...   Key:
(   48) !                            -1 ==> Checks for climate file
(   49) !                            and call abort at "warning" mismatch.
(   50) !                            0 ==> Checks for all files 
(   51) !                            and call abort at "warning" mismatch.
(   52) !                            -2 ==> Checks for all files
(   53) !                            and call abort at "fatal" mismatch.
(   54) !                            1 ==> Simply gives back full information
(   55) !        KULOUT        ...   Output file unit
(   56) !   -----------------------------------------------------------------
(   57) 
(   58) !        Implicit arguments :
(   59) !        --------------------
(   60) !        YOMCST
(   61) 
(   62) !     Method.
(   63) !     -------
(   64) !        See documentation
(   65) 
(   66) !     Externals.
(   67) !     ----------
(   68) !        EGGX_N, some FA.. routines.
(   69) 
(   70) !     Reference.
(   71) !     ----------
(   72) !        ARPEGE/ALADIN Documentation.
(   73) !        Document 'Control of coherence between namelist and Arpege File'
(   74) !        by R. El Khatib
(   75) 
(   76) !     Author.
(   77) !     -------
(   78) !        Radmila Bubnova *GMAP/COMPAS - stage MICECO*
(   79) 
(   80) !     Remark.
(   81) !     -------
(   82) !******  This routine is a small christmas gift for our friend
(   83) !******  Ryad El Khatib **************************************
(   84) ! (hopefully without too many bugs)
(   85) 
(   86) !     Modifications.
(   87) !     --------------
(   88) !        Original : 91-12-10






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 4

(   89) !        Modification : 92-02-07  R El Khatib
(   90) !        Modification : 92-06-01  R El Khatib (option KINF=-1)
(   91) !        Modification : 92-06-21  R Bubnova   (LAM: ECHIEN * )
(   92) !        Modification : 94-07-20  R El Khatib (No test on truncation
(   93) !           if at least one of the two geometry is fully gridpoint)
(   94) !        Modification : 96-04-03  R El Khatib (Test on truncation only
(   95) !                       when both geometries are spectral)
(   96) !        Modification : 97-07-17  R El Khatib (Remove test on NSOTRP since
(   97) !          all actual four corners are controlled)                    
(   98) !        Modification : 97-07-22  R El Khatib (Deep cleanup+KINF=-2/-3)
(   99) !        Modification : 97-09-17  R El Khatib + J.-F. Estrade (Bugfix on 
(  100) !                                 arrays  dimensionnings)
(  101) !        Modified 98-08-10 by K. YESSAD: removal of LRPOLE option.
(  102) !          - removal of some obsolete comments about poles.
(  103) !        Modified 01-04-09 by M. Janousek: New geographic parameters
(  104) !        Modified 03-02-27 by S. Petitcol: Correct ZLONC for latlon domains
(  105) !        Modified 12-10-2002 by J. Masek : Bugfix for 2D model (LMAP=.F.).
(  106) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(  107) !        Modification : 17-Nov-2004 JD Gril (Mercator Rotated-Tilted)
(  108) !      R. El Khatib 27-Sep-2013 Boyd window in frame
(  109) !      R. El Khatib 01-Sep-2014 Ref point and Center of domain printed in
(  110) !        radians and degrees for an easier debugging of namelists
(  111) !      R. El Khatib 24-Mar-2017 Moved the KINF==1 case to a new routine (ERIEN) 
(  112) !                                and changed argument intents to IN wherever possible
(  113) !      R. El Khatib 21-Sep-2020 Enhance accuracy of check for VALH : normalize
(  114) !      by geometric mean of reference pressure
(  115) !      A. Mary 25-Oct-2021 : Ignore check 3.5: subtruncation not meaningful anymore
(  116) !     ------------------------------------------------------------------
(  117) 
(  118) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  119) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(  120) 
(  121) USE YOMCST_IFSAUX   , ONLY : XRPI , XRA
(  122) 
(  123) IMPLICIT NONE
(  124) 
(  125) !     ------------------------------------------------------------------
(  126) 
(  127) INTEGER(KIND=JPIM), PARAMETER :: JPXGEO=18
(  128) INTEGER(KIND=JPIM), PARAMETER :: JPXPAH=8
(  129) 
(  130) !     ------------------------------------------------------------------
(  131) 
(  132) INTEGER(KIND=JPIM),INTENT(IN)    :: KFLEV 
(  133) CHARACTER(LEN=16),INTENT(IN)     :: CDNAMC
(  134) INTEGER(KIND=JPIM),INTENT(IN)    :: KTYPTR 
(  135) LOGICAL           ,INTENT(IN)    :: LDMAP 
(  136) INTEGER(KIND=JPIM),INTENT(IN)    :: KTRONC 
(  137) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGL 
(  138) INTEGER(KIND=JPIM),INTENT(IN)    :: KNXLON 
(  139) INTEGER(KIND=JPIM),INTENT(IN)    :: KNLOPA(JPXPAH) 
(  140) REAL(KIND=JPRB)   ,INTENT(IN)    :: PSINLA(JPXGEO) 
(  141) REAL(KIND=JPRB)   ,INTENT(IN)    :: PREF 
(  142) REAL(KIND=JPRB)   ,INTENT(IN)    :: PVALH(0:KFLEV) 
(  143) REAL(KIND=JPRB)   ,INTENT(IN)    :: PVBH(0:KFLEV) 
(  144) INTEGER(KIND=JPIM),INTENT(IN)    :: KINF 
(  145) REAL(KIND=JPRB)   ,INTENT(IN)    :: PEPS 
(  146) INTEGER(KIND=JPIM),INTENT(IN)    :: KULOUT






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 5

(  147) 
(  148) !     ------------------------------------------------------------------
(  149) 
(  150) INTEGER(KIND=JPIM), ALLOCATABLE :: INLOPA(:),INOZPA(:)
(  151) REAL(KIND=JPRB), ALLOCATABLE :: ZVALH(:),ZVBH(:)
(  152) REAL(KIND=JPRB), ALLOCATABLE :: ZSINLA(:)
(  153) 
(  154) ! Work files for EGGX only
(  155) REAL(KIND=JPRB), ALLOCATABLE :: ZGELAM(:,:), ZGELAT(:,:), ZGM(:,:),&
(  156)  & ZGENORX(:,:),ZGENORY(:,:)  
(  157) 
(  158) INTEGER(KIND=JPIM) :: IERR, IERRA, II, INIVER, INLATI, INXLON, ITRONC, &
(  159)  & ITYPTR, JFLEV, JL, JLEV, IROTEQ, ISOTRP, IGIVO, IMAXLEV, IMAXGL, & 
(  160)  & IMAXLON, IMAXTRUNC , IBWX, IBWY
(  161) 
(  162) LOGICAL :: LLMAP, LLGARD
(  163) 
(  164) REAL(KIND=JPRB) :: Z2PI, ZCLOPO, ZCODIL, ZDIFF, ZREF, ZSLAPO, ZSLOPO, ZEPS
(  165) REAL(KIND=JPRB) :: ZRPK, ZLON0, ZLAT0, ZLONC, ZLATC, ZDELX, ZDELY, ZELX, ZELY
(  166) REAL(KIND=JPRB) :: ZEXWN,ZEYWN, ZLON1, ZLAT1, ZLON2, ZLAT2
(  167) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  168) 
(  169) !     ------------------------------------------------------------------
(  170) 
(  171) #include "eggx_n.h"
(  172) 
(  173) #include "abor1.intfb.h"
(  174) 
(  175) !     ------------------------------------------------------------------
(  176) 
(  177) IF (LHOOK) CALL DR_HOOK('ECHIEN',0,ZHOOK_HANDLE)
(  178) 
(  179) !     ------------------------------------------------------------------
(  180) 
(  181) !*       0.    Get software limits
(  182) !              -------------------
(  183) 
(  184) CALL FALIMU(IMAXLEV,IMAXTRUNC,IMAXGL,IMAXLON)
(  185) ALLOCATE(INLOPA(IMAXGL))
(  186) ALLOCATE(INOZPA(IMAXGL))
(  187) ALLOCATE(ZSINLA(IMAXGL))
(  188) ALLOCATE(ZVALH(0:IMAXLEV))
(  189) ALLOCATE(ZVBH(0:IMAXLEV))
(  190) 
(  191) !*       1.    Read file characteristics
(  192) !              -------------------------
(  193) 
(  194) WRITE(KULOUT,*) ' HAF, HAF : CADRE : ',CDNAMC
(  195) LLGARD=.FALSE.
(  196) CALL FACIES(CDNAMC,ITYPTR,ZSLAPO,ZCLOPO,ZSLOPO,ZCODIL,ITRONC,&
(  197)  & INLATI,INXLON,INLOPA,INOZPA,ZSINLA,INIVER,ZREF,ZVALH,&
(  198)  & ZVBH,LLGARD)  
(  199) 
(  200) IF (KINF == 1) THEN
(  201)   IF (INIVER > KFLEV) THEN
(  202)     CALL ABOR1('ECHIEN : MAX. NUMBER OF LEVEL IN MODEL TOO SMALL !')
(  203)   ENDIF
(  204) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 6

(  205) 
(  206) !     ------------------------------------------------------------------
(  207) 
(  208) !*       2.    Preliminary test
(  209) !              ----------------
(  210) 
(  211) IF(ITYPTR > 0) THEN
(  212)   WRITE(KULOUT,*) 'YOU ARE USING A FILE ARPEGE ',&
(  213)    & 'WHILE THE MODEL EXPECTS A FILE ALADIN'  
(  214)   CALL ABOR1('ECHIEN: ABOR1 CALLED 2')
(  215) ELSE
(  216)   ITYPTR = - ITYPTR
(  217)   LLMAP=ZCODIL >= 0.0_JPRB
(  218) ENDIF
(  219) 
(  220) Z2PI = 2.0_JPRB*XRPI
(  221) 
(  222) IF(ZSINLA(1) >= 0.0_JPRB) THEN
(  223)   ! Echien smells the old EGGX (i.e. the old format of the cadre)
(  224)   WRITE(KULOUT,*) ' the cadre >>',CDNAMC,'<< has the old EGGX format'
(  225)   WRITE(KULOUT,*) ' => consistency check of the geometry in the cadre&
(  226)    & will be more forgiving'
(  227) 
(  228)   ZEPS=PEPS*1000._JPRB
(  229) 
(  230)   ZRPK=ZSINLA(10)
(  231)   ZLON0=ZSINLA(8)
(  232)   ZLAT0=ZSINLA(9)
(  233)   ZLON1=ZSINLA(4)
(  234)   ZLAT1=ZSINLA(5)
(  235)   ZLON2=ZSINLA(6)
(  236)   ZLAT2=ZSINLA(7)
(  237)   ZELX=ZSINLA(13)
(  238)   ZELY=ZSINLA(14)
(  239)   ZDELX=ZSINLA(15)
(  240)   ZDELY=ZSINLA(16)
(  241)   ZEXWN=ZSINLA(17)
(  242)   ZEYWN=ZSINLA(18)
(  243)   ZLONC=ZSINLA(2)
(  244)   ZLATC=ZSINLA(3)
(  245) 
(  246)   IF (ZRPK < 0.0_JPRB) THEN
(  247)     ! latlon case :
(  248)     IF (ZLON1 <= ZLON2) THEN 
(  249)       ZLONC=MOD(0.5_JPRB*(ZLON1+ZLON2),Z2PI)
(  250)     ELSE
(  251)       ZLONC=MOD(0.5_JPRB*(ZLON1-Z2PI+ZLON2),Z2PI)
(  252)     ENDIF
(  253)     ZLATC=0.5_JPRB*(ZLAT1+ZLAT2)
(  254)     ZDELX=ZSINLA(15)
(  255)     ZDELY=ZSINLA(16)
(  256)   ELSEIF(LLMAP) THEN
(  257)     ! projection
(  258)     ALLOCATE(ZGELAM(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  259)     ALLOCATE(ZGELAT(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  260)     ALLOCATE(ZGM(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  261)     ALLOCATE(ZGENORX(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  262)     ALLOCATE(ZGENORY(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 7

(  263)     IROTEQ=INT(ZSINLA(1))
(  264)     ISOTRP=INT(ZSINLA(11))
(  265)     IGIVO=INT(ZSINLA(12))
(  266) 
(  267)     WRITE(KULOUT,*) 'Call EGGX_N by ECHIEN'
(  268) 
(  269)     CALL EGGX_N(XRPI,XRA,IROTEQ,ZSINLA(2),ZSINLA(3),ZSLAPO,&
(  270)      & ZSINLA(4),ZSINLA(5),ZSINLA(6),ZSINLA(7),ZLON0,ZLAT0,&
(  271)      & ZSINLA(10),KULOUT,ISOTRP,IGIVO,&
(  272)      & ZGELAM,ZGELAT,ZGM,ZGENORX,ZGENORY,&
(  273)      & INLOPA(3),INLOPA(4),INLOPA(5),INLOPA(6),&
(  274)      & INLOPA(3),INLOPA(4),INLOPA(5),INLOPA(6),&
(  275)      & ZDELX,ZDELY,ZLONC,ZLATC)  
(  276)     DEALLOCATE(ZGELAM)
(  277)     DEALLOCATE(ZGELAT)
(  278)     DEALLOCATE(ZGM)
(  279)     DEALLOCATE(ZGENORX)
(  280)     DEALLOCATE(ZGENORY)
(  281)     ZSINLA(1)=REAL(IROTEQ,JPRB)
(  282)     ZSINLA(11)=REAL(ISOTRP,JPRB)
(  283)     ZSINLA(12)=REAL(IGIVO,JPRB)
(  284)   ENDIF
(  285) 
(  286) ELSE
(  287) 
(  288)   ZEPS=PEPS
(  289) 
(  290)   ZRPK =ZSINLA(2)
(  291)   ZLON0=ZSINLA(3)
(  292)   ZLAT0=ZSINLA(4)
(  293)   ZLONC=ZSINLA(5)
(  294)   ZLATC=ZSINLA(6)
(  295)   ZDELX=ZSINLA(7)
(  296)   ZDELY=ZSINLA(8)
(  297)   ZELX =ZSINLA(9)
(  298)   ZELY =ZSINLA(10)
(  299)   ZEXWN=ZSINLA(11)
(  300)   ZEYWN=ZSINLA(12)
(  301)   ZLON1=ZSINLA(13)
(  302)   ZLAT1=ZSINLA(14)
(  303)   ZLON2=ZSINLA(15)
(  304)   ZLAT2=ZSINLA(16)
(  305)   IBWX=INT(ZSINLA(17))
(  306)   IBWY=INT(ZSINLA(18))
(  307) 
(  308) ENDIF
(  309) 
(  310) IF((KINF == 0).OR.(KINF == -1).OR.(KINF == -2).OR.(KINF == -3)) THEN
(  311) 
(  312) !*       3.    Checklist
(  313) !              ---------
(  314) 
(  315)   IERR=0
(  316) 
(  317) !*      3.1  Spectral dimensions
(  318) 
(  319)   IF(INLOPA(2) == 1.AND.KNLOPA(2) == 1) THEN
(  320)     IF(ITRONC /= KTRONC) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 8

(  321)       WRITE(KULOUT,*) ' TRUNCATION NSMAX MISMATCH : '&
(  322)        & ,'FILE = ',ITRONC, ' ; ARGUMENT = ',KTRONC  
(  323)       IERR=1
(  324)     ENDIF
(  325)     IF(ITYPTR /= KTYPTR) THEN
(  326)       WRITE(KULOUT,*) ' TRUNCATION NMSMAX MISMATCH : '&
(  327)        & ,'FILE = ',ITYPTR, ' ; ARGUMENT = ',KTYPTR  
(  328)       IERR=1
(  329)     ENDIF
(  330)   ENDIF
(  331)   IF ((INLOPA(2) /= 0.AND.KNLOPA(2) /= 0).OR.&
(  332)      & (.NOT.LLMAP.AND..NOT.LDMAP)) THEN  
(  333)     IF(INXLON /= KNXLON) THEN
(  334)       WRITE(KULOUT,*) ' NUMBER OF LONGITUDES MISMATCH : '&
(  335)        & ,'FILE = ',INXLON, ' ; ARGUMENT = ',KNXLON  
(  336)       IERR=1
(  337)     ENDIF
(  338)     IF(INLATI /= KDGL) THEN
(  339)       WRITE(KULOUT,*) ' NUMBER OF LATITUDES MISMATCH : '&
(  340)        & ,'FILE = ',INLATI, ' ; ARGUMENT = ',KDGL  
(  341)       IERR=1
(  342)     ENDIF
(  343)   ENDIF
(  344) 
(  345) !*      3.3  Horizontal geometry
(  346) 
(  347)   IF((LDMAP.AND..NOT.LLMAP).OR.(LLMAP.AND..NOT.LDMAP)) THEN
(  348) 
(  349)     WRITE(KULOUT,*) ' HORIZONTAL REPRESENTATION LMAP MISMATCH : '&
(  350)      & ,'FILE = ',LLMAP, ' ; ARGUMENT = ',LDMAP  
(  351)     IERR=1
(  352) 
(  353)   ELSEIF(LLMAP.AND.LDMAP) THEN
(  354) 
(  355)     IF((ZRPK >= 0.0_JPRB .AND. PSINLA(2) < 0.0_JPRB) .OR.&
(  356)        & (ZRPK < 0.0_JPRB .AND. PSINLA(2) >= 0.0_JPRB)) THEN  
(  357)       WRITE(KULOUT,*) ' PROJECTION TYPE MISMATCH : '&
(  358)        & ,'FILE = ',ZRPK, ' ; ARGUMENT = ',PSINLA(2)  
(  359)       IERR=1
(  360)     ENDIF
(  361) 
(  362)     ZDIFF=ABS(MOD(ZLON0-PSINLA(3),Z2PI))
(  363)     IF(ZDIFF > ZEPS.AND.(Z2PI-ZDIFF) > ZEPS) THEN
(  364)       WRITE(KULOUT,*) ' REFERENCE LONGITUDE MISMATCH : '&
(  365)        & ,'FILE = ',ZLON0,' (',ZLON0*180._JPRB/XRPI,' DEGREES)', &
(  366)        & ' ; ARGUMENT = ',PSINLA(3),' (',PSINLA(3)*180._JPRB/XRPI,' DEGREES)'
(  367)       IERR=1
(  368)     ENDIF
(  369) 
(  370)     IF(ABS(ZLAT0-PSINLA(4)) > ZEPS) THEN
(  371)       WRITE(KULOUT,*) ' REFERENCE LATITUDE MISMATCH : '&
(  372)        & ,'FILE = ',ZLAT0,' (',ZLAT0*180._JPRB/XRPI,' DEGREES)', &
(  373)        & ' ; ARGUMENT = ',PSINLA(4),' (',PSINLA(4)*180._JPRB/XRPI,' DEGREES)'  
(  374)       IERR=1
(  375)     ENDIF
(  376) 
(  377)     ZDIFF=ABS(MOD(ZLONC-PSINLA(5),Z2PI))
(  378)     IF(ZDIFF > ZEPS.AND.(Z2PI-ZDIFF) > ZEPS) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 9

(  379)       WRITE(KULOUT,*) ' DOMAIN CENTRE LONGITUDE MISMATCH : '&
(  380)        & ,'FILE = ',ZLONC,' (',ZLONC*180._JPRB/XRPI,' DEGREES)', & 
(  381)        & ' ; ARGUMENT = ',PSINLA(5),' (',PSINLA(5)*180._JPRB/XRPI,' DEGREES)'  
(  382)       IERR=1
(  383)     ENDIF
(  384) 
(  385)     IF(ABS(ZLATC-PSINLA(6)) > ZEPS) THEN
(  386)       WRITE(KULOUT,*) ' DOMAIN CENTRE LATITUDE MISMATCH : '&
(  387)        & ,'FILE = ',ZLATC,' (',ZLATC*180._JPRB/XRPI,' DEGREES)', & 
(  388)        & ' ; ARGUMENT = ',PSINLA(6),' (',PSINLA(6)*180._JPRB/XRPI,' DEGREES)'  
(  389)       IERR=1
(  390)     ENDIF
(  391) 
(  392)     IF(ABS(ZDELX-PSINLA(7)) > ZEPS*10000.) THEN
(  393)       WRITE(KULOUT,*) ' RESOLUTION IN X MISMATCH : '&
(  394)        & ,'FILE = ',ZDELX, ' ; ARGUMENT = ',PSINLA(7)  
(  395)       IERR=1
(  396)     ENDIF
(  397) 
(  398)     IF(ABS(ZDELY-PSINLA(8)) > ZEPS*10000.) THEN
(  399)       WRITE(KULOUT,*) ' RESOLUTION IN Y MISMATCH : '&
(  400)        & ,'FILE = ',ZDELY, ' ; ARGUMENT = ',PSINLA(8)  
(  401)       IERR=1
(  402)     ENDIF
(  403) 
(  404)     IF(INLOPA(2) == 0) THEN
(  405)       IF(KNLOPA(2) /= 0) THEN
(  406)         ! Abort when extension zone in argument is NOT null
(  407)         IF ((KNLOPA(4)-KNLOPA(3)+1 /= KNXLON).OR.&
(  408)          & (KNLOPA(6)-KNLOPA(5)+1 /= KDGL)) THEN  
(  409)           IF(KINF == 0.OR.KINF == -1) THEN
(  410)             WRITE(KULOUT,*) 'HORIZONTAL DOMAIN INDICATOR (NDOM) ',&
(  411)              & 'MISMATCH : ',&
(  412)              & 'FILE = ',INLOPA(2), ' (C+I) ; ARGUMENT = ',KNLOPA(2),&
(  413)              & ' (C+I+E)'  
(  414)             WRITE(KULOUT,*) ' PROPER INITIALIZATION OF (E) '&
(  415)              & ,'IS EXPECTED IN THE CALLING SUBROUTINE'  
(  416)             IF(KINF == 0) THEN
(  417)               II=-2
(  418)             ELSE
(  419)               II=-3
(  420)             ENDIF
(  421)             WRITE(KULOUT,*) ' WHEN THIS IS OK, SET KINF=',II,&
(  422)              & ' IN THE CALLING SUBROUTINE TO ANIHILATE THIS ABORT'  
(  423)             IERR=1
(  424)           ENDIF
(  425)         ENDIF
(  426)       ENDIF
(  427)     ELSE
(  428)       IF(KNLOPA(2) == 0) THEN
(  429)         ! Warning when extension zone in file is NOT null
(  430)         IF ((INLOPA(4)-INLOPA(3)+1 /= INXLON).OR.&
(  431)          & (INLOPA(6)-INLOPA(5)+1 /= INLATI)) THEN  
(  432)           IF(KINF == 0.OR.KINF == -1) THEN
(  433)             WRITE(KULOUT,*) 'HORIZONTAL DOMAIN INDICATOR (NDOM) ',&
(  434)              & 'MISMATCH : ',&
(  435)              & 'FILE = ',INLOPA(2), ' (C+I+E) ; ARGUMENT = ',&
(  436)              & KNLOPA(2),' (C+I)'  






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 10

(  437)             WRITE(KULOUT,*) ' PROPER INITIALIZATION OF (E) '&
(  438)              & ,'IS EXPECTED IN THE CALLING SUBROUTINE'  
(  439)             IF(KINF == 0) THEN
(  440)               II=-2
(  441)             ELSE
(  442)               II=-3
(  443)             ENDIF
(  444)             WRITE(KULOUT,*) ' WHEN THIS IS OK, SET KINF=',II,&
(  445)              & ' IN THE CALLING SUBROUTINE TO ANIHILATE THIS ABORT'  
(  446)             IERR=1
(  447)           ENDIF
(  448)         ENDIF
(  449)       ELSEIF(INLOPA(2) == 1.AND.KNLOPA(2) == -1) THEN
(  450)         WRITE(KULOUT,*) ' CAUTION : FILE CONTAINS SPECTRALLY ','FITTED DATA'
(  451)       ELSEIF(INLOPA(2) == -1.AND.KNLOPA(2) == 1) THEN
(  452)         WRITE(KULOUT,*) ' CAUTION : FILE CONTAINS UNFITTED DATA'
(  453)       ENDIF
(  454)     ENDIF
(  455) 
(  456)     IF(INLOPA(3) /= KNLOPA(3)) THEN
(  457)       WRITE(KULOUT,*) ' START INDEX FOR C+I IN X DIRECTION '&
(  458)        & ,'(NDLUNG) MISMATCH : '&
(  459)        & ,' FILE = ',INLOPA(3), ' ; ARGUMENT = ',KNLOPA(3)  
(  460)       IERR=1
(  461)     ENDIF
(  462) 
(  463)     IF(INLOPA(4) /= KNLOPA(4)) THEN
(  464)       WRITE(KULOUT,*) ' END INDEX FOR C+I IN X DIRECTION '&
(  465)        & ,'(NDLUXG) MISMATCH : '&
(  466)        & ,' FILE = ',INLOPA(4), ' ; ARGUMENT = ',KNLOPA(4)  
(  467)       IERR=1
(  468)     ENDIF
(  469) 
(  470)     IF(INLOPA(5) /= KNLOPA(5)) THEN
(  471)       WRITE(KULOUT,*) ' START INDEX FOR C+I IN Y DIRECTION '&
(  472)        & ,'(NDGUNG) MISMATCH : '&
(  473)        & ,' FILE = ',INLOPA(5), ' ; ARGUMENT = ',KNLOPA(5)  
(  474)       IERR=1
(  475)     ENDIF
(  476) 
(  477)     IF(INLOPA(6) /= KNLOPA(6)) THEN
(  478)       WRITE(KULOUT,*) ' END INDEX FOR C+I IN Y DIRECTION '&
(  479)        & ,'(NDGUXG) MISMATCH : '&
(  480)        & ,' FILE = ',INLOPA(6), ' ; ARGUMENT = ',KNLOPA(6)  
(  481)       IERR=1
(  482)     ENDIF
(  483) 
(  484)     IF(INLOPA(7) /= KNLOPA(7)) THEN
(  485)       WRITE(KULOUT,*) 'CAUTION : LENGTH OF I ZONE IN X DIRECTION '&
(  486)        & ,'(NBZONL) MISMATCH : '&
(  487)        & ,' FILE = ',INLOPA(7), ' ; ARGUMENT = ',KNLOPA(7)  
(  488)     ENDIF
(  489) 
(  490)     IF(INLOPA(8) /= KNLOPA(8)) THEN
(  491)       WRITE(KULOUT,*) 'CAUTION : LENGTH OF I ZONE IN Y DIRECTION '&
(  492)        & ,'(NBZONG) MISMATCH : '&
(  493)        & ,' FILE = ',INLOPA(8), ' ; ARGUMENT = ',KNLOPA(8)  
(  494)     ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 11

(  495) 
(  496)     IF (KINF == 0 .AND. ZSINLA(1) < 0.0_JPRB) THEN
(  497)       IF(IBWX < INT(PSINLA(17))) THEN
(  498)         WRITE(KULOUT,*) ' PORTION OF SCIENTIFIC E-ZONE LYING INSIDE C+I (X AXIS) TOO BIG : '&
(  499)          & ,' FILE = ',IBWX, ' ; ARGUMENT = ',REAL(PSINLA(17),KIND=JPRB)
(  500)         IERR=1
(  501)       ENDIF
(  502)       IF(IBWY < INT(PSINLA(18))) THEN
(  503)         WRITE(KULOUT,*) ' PORTION OF SCIENTIFIC E-ZONE LYING INSIDE C+I (Y AXIS) TOO BIG : '&
(  504)          & ,' FILE = ',IBWY, ' ; ARGUMENT = ',REAL(PSINLA(18),KIND=JPRB)
(  505)         IERR=1
(  506)       ENDIF
(  507)     ENDIF
(  508) 
(  509)   ELSE
(  510) 
(  511)     IF(ABS(ZELX-PSINLA(9)) > ZEPS) THEN
(  512)       WRITE(KULOUT,*) ' WAVE LENGTH IN X DIRECTION  MISMATCH : '&
(  513)        & ,'FILE = ',ZELX, ' ; ARGUMENT = ',PSINLA(9)  
(  514)       IERR=1
(  515)     ENDIF
(  516) 
(  517)     IF(ABS(ZELY-PSINLA(10)) > ZEPS) THEN
(  518)       WRITE(KULOUT,*) ' WAVE LENGTH IN Y DIRECTION  MISMATCH : '&
(  519)        & ,'FILE = ',ZELY, ' ; ARGUMENT = ',PSINLA(10)  
(  520)       IERR=1
(  521)     ENDIF
(  522) 
(  523)   ENDIF
(  524) 
(  525) !*      3.4  Vertical levels
(  526) 
(  527)   IF (KINF == 0.OR.KINF == -2) THEN
(  528)     IF(INIVER /= KFLEV) THEN
(  529)       WRITE(KULOUT,*) ' NUMBER OF LEVELS MISMATCH : '&
(  530)        & ,'FILE = ',INIVER, ' ; ARGUMENT = ',KFLEV  
(  531)       IERR=1
(  532)     ELSE
(  533)       IERRA=0
(  534)       DO JFLEV = 0,KFLEV
(  535)         IF(ABS(ZVALH(JFLEV)*ZREF-PVALH(JFLEV)*PREF)/SQRT(ZREF*PREF) > PEPS) THEN
(  536)           WRITE(KULOUT,*) ' VERTICAL FUNCTION *A* MISMATCH ON ',&
(  537)            & 'LEVEL ',JFLEV,' : ',&
(  538)            & 'FILE = ',ZVALH(JFLEV), ' ; ARGUMENT = ',PVALH(JFLEV)  
(  539)           IERRA=1
(  540)           IERR=1
(  541)         ENDIF
(  542)         IF(ABS(ZVBH(JFLEV)-PVBH(JFLEV)) > PEPS) THEN
(  543)           WRITE(KULOUT,*) ' VERTICAL FUNCTION *B* MISMATCH ON ',&
(  544)            & 'LEVEL ',JFLEV,' : ',&
(  545)            & 'FILE = ',ZVBH(JFLEV), ' ; ARGUMENT = ',PVBH(JFLEV)  
(  546)           IERR=1
(  547)         ENDIF
(  548)       ENDDO
(  549)       IF (IERRA /= 0) THEN
(  550)         WRITE(KULOUT,*) ' REFERENCE PRESSURE : ',&
(  551)          & 'FILE = ',ZREF, ' ; ARGUMENT = ',PREF  
(  552)       ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 12

(  553)     ENDIF
(  554)   ENDIF
(  555) 
(  556) !*      3.5  Packing characteristics (fatal ???)
(  557) 
(  558)   IF(INLOPA(1) /= KNLOPA(1) .AND. (LLMAP .OR. LDMAP) ) THEN
(  559)     WRITE(KULOUT,*) ' PACKING PARAMETER MISMATCH : '&
(  560)      & ,'FILE = ',INLOPA(1), ' ; ARGUMENT = ',KNLOPA(1)  
(  561)     WRITE(KULOUT,*) 'ECHIEN: CHECK 3.5 ignored'
(  562)     !IERR=1
(  563)   ENDIF
(  564) 
(  565)   IF(IERR /= 0) THEN
(  566)     CALL ABOR1('ECHIEN: ABOR1 CALLED 3.5')
(  567)   ENDIF
(  568) 
(  569) !     ------------------------------------------------------------------
(  570) 
(  571) !*       4.    Bring back information on file
(  572) !              ------------------------------
(  573) 
(  574) ELSEIF(KINF == 1) THEN
(  575) 
(  576)   WRITE(KULOUT,*) 'ECHIEN ERROR : ECHIEN(..., KINF=1,...) HAS BEEN REPLACED BY ERIEN(...)'
(  577)   CALL ABOR1('ECHIEN: ABOR1 CALLED 4.1')
(  578) 
(  579) ELSE
(  580)   WRITE(KULOUT,*) 'INTERNAL ERROR : KINF = ',KINF
(  581)   CALL ABOR1('ECHIEN: ABOR1 CALLED 4.2')
(  582) ENDIF
(  583) 
(  584) DEALLOCATE(INLOPA)
(  585) DEALLOCATE(INOZPA)
(  586) DEALLOCATE(ZSINLA)
(  587) DEALLOCATE(ZVALH)
(  588) DEALLOCATE(ZVBH)
(  589) 
(  590) !     ------------------------------------------------------------------
(  591) 
(  592) IF (LHOOK) CALL DR_HOOK('ECHIEN',1,ZHOOK_HANDLE)
(  593) END SUBROUTINE ECHIEN























NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 13

(    1) # 1 "echien.F90"
(    1) SUBROUTINE ECHIEN(CDNAMC,KTYPTR,LDMAP,&
(    2)  & KTRONC,KDGL,KNXLON,KNLOPA,PSINLA,&
(    3)  & KFLEV,PREF,PVALH,PVBH,KINF,&
(    4)  & PEPS,KULOUT)  
(    5) # 6 "echien.F90"
(    6) !**** *ECHIEN*  - CHeck Input ENvironment:   LAM case
(    7) # 8 "echien.F90"
(    8) !     Purpose.
(    9) !     --------
(   10) !           It controls coherence between defined geometry and ALADIN
(   11) !       file. In the case of inconsistency it calls ABOR1. This
(   12) !       routine could be also used in order to simply get full
(   13) !       information from the cadre.
(   14) # 15 "echien.F90"
(   15) !**   Interface.
(   16) !     ----------
(   17) !        *CALL* *ECHIEN(...)
(   18) # 19 "echien.F90"
(   19) !        Explicit arguments :
(   20) !        --------------------
(   21) !        Input (Output case is now done in *ERIEN*) :
(   22) !        ----------------------------
(   23) # 24 "echien.F90"
(   24) !        CDNAMC        ...   Name of the cadre
(   25) # 26 "echien.F90"
(   26) !        Determination of reference geometry:
(   27) # 28 "echien.F90"
(   28) !        KTYPTR        ...   Truncation NMSMAX
(   29) !        LDMAP         ...   .TRUE. : Map projection calculated by EGGPACK
(   30) !                      ...   .FALSE.: Biperiodic experiment file, EGGPACK
(   31) !                                     routine not called
(   32) !        KTRONC        ...   Truncation NSMAX
(   33) !        KDGL          ...   Number of latitudes without poles
(   34) !        KNXLON        ...   Max. number of longitudes at a parallel
(   35) !        KNLOPA        ...   Limited Area characteristics
(   36) !        PSINLA        ...   Horizontal geometry characteristics
(   37) !        KFLEV         ...   Number of vertical levels
(   38) !        PREF          ...   Reference pressure
(   39) !        PVALH         ...   "A" coefficients of vertical system
(   40) !        PVBH          ...   "B" coefficients of vertical system
(   41) # 42 "echien.F90"
(   42) !   -----------------------------------------------------------------
(   43) !        Input :
(   44) !        -------
(   45) # 46 "echien.F90"
(   46) !        PEPS          ...   Precision of the tests on real variables
(   47) !        KINF          ...   Key:
(   48) !                            -1 ==> Checks for climate file
(   49) !                            and call abort at "warning" mismatch.
(   50) !                            0 ==> Checks for all files 
(   51) !                            and call abort at "warning" mismatch.
(   52) !                            -2 ==> Checks for all files
(   53) !                            and call abort at "fatal" mismatch.
(   54) !                            1 ==> Simply gives back full information
(   55) !        KULOUT        ...   Output file unit
(   56) !   -----------------------------------------------------------------
(   57) # 58 "echien.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 14

(   58) !        Implicit arguments :
(   59) !        --------------------
(   60) !        YOMCST
(   61) # 62 "echien.F90"
(   62) !     Method.
(   63) !     -------
(   64) !        See documentation
(   65) # 66 "echien.F90"
(   66) !     Externals.
(   67) !     ----------
(   68) !        EGGX_N, some FA.. routines.
(   69) # 70 "echien.F90"
(   70) !     Reference.
(   71) !     ----------
(   72) !        ARPEGE/ALADIN Documentation.
(   73) !        Document 'Control of coherence between namelist and Arpege File'
(   74) !        by R. El Khatib
(   75) # 76 "echien.F90"
(   76) !     Author.
(   77) !     -------
(   78) !        Radmila Bubnova *GMAP/COMPAS - stage MICECO*
(   79) # 80 "echien.F90"
(   80) !     Remark.
(   81) !     -------
(   82) !******  This routine is a small christmas gift for our friend
(   83) !******  Ryad El Khatib **************************************
(   84) ! (hopefully without too many bugs)
(   85) # 86 "echien.F90"
(   86) !     Modifications.
(   87) !     --------------
(   88) !        Original : 91-12-10
(   89) !        Modification : 92-02-07  R El Khatib
(   90) !        Modification : 92-06-01  R El Khatib (option KINF=-1)
(   91) !        Modification : 92-06-21  R Bubnova   (LAM: ECHIEN * )
(   92) !        Modification : 94-07-20  R El Khatib (No test on truncation
(   93) !           if at least one of the two geometry is fully gridpoint)
(   94) !        Modification : 96-04-03  R El Khatib (Test on truncation only
(   95) !                       when both geometries are spectral)
(   96) !        Modification : 97-07-17  R El Khatib (Remove test on NSOTRP since
(   97) !          all actual four corners are controlled)                    
(   98) !        Modification : 97-07-22  R El Khatib (Deep cleanup+KINF=-2/-3)
(   99) !        Modification : 97-09-17  R El Khatib + J.-F. Estrade (Bugfix on 
(  100) !                                 arrays  dimensionnings)
(  101) !        Modified 98-08-10 by K. YESSAD: removal of LRPOLE option.
(  102) !          - removal of some obsolete comments about poles.
(  103) !        Modified 01-04-09 by M. Janousek: New geographic parameters
(  104) !        Modified 03-02-27 by S. Petitcol: Correct ZLONC for latlon domains
(  105) !        Modified 12-10-2002 by J. Masek : Bugfix for 2D model (LMAP=.F.).
(  106) !        M.Hamrud      01-Oct-2003 CY28 Cleaning
(  107) !        Modification : 17-Nov-2004 JD Gril (Mercator Rotated-Tilted)
(  108) !      R. El Khatib 27-Sep-2013 Boyd window in frame
(  109) !      R. El Khatib 01-Sep-2014 Ref point and Center of domain printed in
(  110) !        radians and degrees for an easier debugging of namelists
(  111) !      R. El Khatib 24-Mar-2017 Moved the KINF==1 case to a new routine (ERIEN) 
(  112) !                                and changed argument intents to IN wherever possible
(  113) !      R. El Khatib 21-Sep-2020 Enhance accuracy of check for VALH : normalize
(  114) !      by geometric mean of reference pressure
(  115) !      A. Mary 25-Oct-2021 : Ignore check 3.5: subtruncation not meaningful anymore






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 15

(  116) !     ------------------------------------------------------------------
(  117) # 118 "echien.F90"
(  118) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(  119) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(  120) # 121 "echien.F90"
(  121) USE YOMCST_IFSAUX   , ONLY : XRPI , XRA
(  122) # 123 "echien.F90"
(  123) IMPLICIT NONE
(  124) # 125 "echien.F90"
(  125) !     ------------------------------------------------------------------
(  126) # 127 "echien.F90"
(  127) INTEGER(KIND=JPIM), PARAMETER :: JPXGEO=18
(  128) INTEGER(KIND=JPIM), PARAMETER :: JPXPAH=8
(  129) # 130 "echien.F90"
(  130) !     ------------------------------------------------------------------
(  131) # 132 "echien.F90"
(  132) INTEGER(KIND=JPIM),INTENT(IN)    :: KFLEV 
(  133) CHARACTER(LEN=16),INTENT(IN)     :: CDNAMC
(  134) INTEGER(KIND=JPIM),INTENT(IN)    :: KTYPTR 
(  135) LOGICAL           ,INTENT(IN)    :: LDMAP 
(  136) INTEGER(KIND=JPIM),INTENT(IN)    :: KTRONC 
(  137) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGL 
(  138) INTEGER(KIND=JPIM),INTENT(IN)    :: KNXLON 
(  139) INTEGER(KIND=JPIM),INTENT(IN)    :: KNLOPA(JPXPAH) 
(  140) REAL(KIND=JPRB)   ,INTENT(IN)    :: PSINLA(JPXGEO) 
(  141) REAL(KIND=JPRB)   ,INTENT(IN)    :: PREF 
(  142) REAL(KIND=JPRB)   ,INTENT(IN)    :: PVALH(0:KFLEV) 
(  143) REAL(KIND=JPRB)   ,INTENT(IN)    :: PVBH(0:KFLEV) 
(  144) INTEGER(KIND=JPIM),INTENT(IN)    :: KINF 
(  145) REAL(KIND=JPRB)   ,INTENT(IN)    :: PEPS 
(  146) INTEGER(KIND=JPIM),INTENT(IN)    :: KULOUT
(  147) # 148 "echien.F90"
(  148) !     ------------------------------------------------------------------
(  149) # 150 "echien.F90"
(  150) INTEGER(KIND=JPIM), ALLOCATABLE :: INLOPA(:),INOZPA(:)
(  151) REAL(KIND=JPRB), ALLOCATABLE :: ZVALH(:),ZVBH(:)
(  152) REAL(KIND=JPRB), ALLOCATABLE :: ZSINLA(:)
(  153) # 154 "echien.F90"
(  154) ! Work files for EGGX only
(  155) REAL(KIND=JPRB), ALLOCATABLE :: ZGELAM(:,:), ZGELAT(:,:), ZGM(:,:),&
(  156)  & ZGENORX(:,:),ZGENORY(:,:)  
(  157) # 158 "echien.F90"
(  158) INTEGER(KIND=JPIM) :: IERR, IERRA, II, INIVER, INLATI, INXLON, ITRONC, &
(  159)  & ITYPTR, JFLEV, JL, JLEV, IROTEQ, ISOTRP, IGIVO, IMAXLEV, IMAXGL, & 
(  160)  & IMAXLON, IMAXTRUNC , IBWX, IBWY
(  161) # 162 "echien.F90"
(  162) LOGICAL :: LLMAP, LLGARD
(  163) # 164 "echien.F90"
(  164) REAL(KIND=JPRB) :: Z2PI, ZCLOPO, ZCODIL, ZDIFF, ZREF, ZSLAPO, ZSLOPO, ZEPS
(  165) REAL(KIND=JPRB) :: ZRPK, ZLON0, ZLAT0, ZLONC, ZLATC, ZDELX, ZDELY, ZELX, ZELY
(  166) REAL(KIND=JPRB) :: ZEXWN,ZEYWN, ZLON1, ZLAT1, ZLON2, ZLAT2
(  167) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(  168) # 169 "echien.F90"
(  169) !     ------------------------------------------------------------------
(  170) # 171 "echien.F90"
(  171) # 1 ".D[61]/eggx_n.h"
(    1) INTERFACE
(    2) SUBROUTINE EGGX_N(PI,PRA,KROTEQ,PLONR,PLATR,PBETA,PLON1,PLAT1,PLON2,PLAT2,&






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 16

(    3)      & PLON0,PLAT0,PRPK,KULOUT,KSOTRP,KGIVO,&
(    4)      & PGELAM,PGELAT,PGM,PGNORX,PGNORY,KDLSA,&
(    5)      & KDLSUR,KDGSA,KDGEN,KDLUN,KDLUX,KDGUN,KDGUX,&
(    6)      & PDELX,PDELY,PLONC,PLATC)  
(    7) !     ------------------------------------------------------------------
(    8) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(    9) !     ------------------------------------------------------------------
(   10) IMPLICIT NONE
(   11) INTEGER(KIND=JPIM),INTENT(INOUT) :: KROTEQ
(   12) INTEGER(KIND=JPIM),INTENT(IN)    :: KULOUT
(   13) INTEGER(KIND=JPIM),INTENT(INOUT) :: KSOTRP
(   14) INTEGER(KIND=JPIM),INTENT(INOUT) :: KGIVO
(   15) INTEGER(KIND=JPIM),INTENT(IN)    :: KDLSA
(   16) INTEGER(KIND=JPIM),INTENT(IN)    :: KDLSUR
(   17) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGSA
(   18) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGEN
(   19) INTEGER(KIND=JPIM),INTENT(IN)    :: KDLUN
(   20) INTEGER(KIND=JPIM),INTENT(IN)    :: KDLUX
(   21) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGUN
(   22) INTEGER(KIND=JPIM),INTENT(IN)    :: KDGUX
(   23) REAL(KIND=JPRB)   ,INTENT(IN)    :: PI 
(   24) REAL(KIND=JPRB)   ,INTENT(IN)    :: PRA 
(   25) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLONR 
(   26) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLATR 
(   27) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PBETA 
(   28) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLON1 
(   29) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLAT1 
(   30) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLON2 
(   31) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLAT2 
(   32) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLON0 
(   33) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLAT0 
(   34) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PRPK 
(   35) REAL(KIND=JPRB)   ,INTENT(OUT)   :: PGELAM(KDLSA:KDLSUR,KDGSA:KDGEN) 
(   36) REAL(KIND=JPRB)   ,INTENT(OUT)   :: PGELAT(KDLSA:KDLSUR,KDGSA:KDGEN) 
(   37) REAL(KIND=JPRB)   ,INTENT(OUT)   :: PGM(KDLSA:KDLSUR,KDGSA:KDGEN) 
(   38) REAL(KIND=JPRB)   ,INTENT(OUT)   :: PGNORX(KDLSA:KDLSUR,KDGSA:KDGEN) 
(   39) REAL(KIND=JPRB)   ,INTENT(OUT)   :: PGNORY(KDLSA:KDLSUR,KDGSA:KDGEN) 
(   40) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PDELX 
(   41) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PDELY 
(   42) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLONC 
(   43) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PLATC 
(   44) !     ------------------------------------------------------------------
(   45) END SUBROUTINE EGGX_N
(   46) END INTERFACE
(   47) # 172 "echien.F90"
(  172) # 173 "echien.F90"
(  173) # 1 ".D[61]/abor1.intfb.h"
(    1) INTERFACE
(    2) # 3 ".D[61]/abor1.intfb.h"
(    3) SUBROUTINE ABOR1(CDTEXT)
(    4) CHARACTER(LEN=*), INTENT(IN) :: CDTEXT
(    5) END SUBROUTINE ABOR1
(    6) # 7 ".D[61]/abor1.intfb.h"
(    7) SUBROUTINE ABOR1FL(CDFILE, KLINENUM, CDTEXT)
(    8) USE PARKIND1  ,ONLY : JPIM
(    9) CHARACTER(LEN=*), INTENT(IN) :: CDFILE,CDTEXT
(   10) INTEGER(KIND=JPIM), INTENT(IN) :: KLINENUM
(   11) END SUBROUTINE ABOR1FL






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 17

(   12) # 13 ".D[61]/abor1.intfb.h"
(   13) SUBROUTINE ABOR1_EXCEPTION_HANDLER()
(   14) END SUBROUTINE ABOR1_EXCEPTION_HANDLER
(   15) # 16 ".D[61]/abor1.intfb.h"
(   16) END INTERFACE
(   17) # 174 "echien.F90"
(  174) # 175 "echien.F90"
(  175) !     ------------------------------------------------------------------
(  176) # 177 "echien.F90"
(  177) IF (LHOOK) CALL DR_HOOK('ECHIEN',0,ZHOOK_HANDLE)
(  178) # 179 "echien.F90"
(  179) !     ------------------------------------------------------------------
(  180) # 181 "echien.F90"
(  181) !*       0.    Get software limits
(  182) !              -------------------
(  183) # 184 "echien.F90"
(  184) CALL FALIMU(IMAXLEV,IMAXTRUNC,IMAXGL,IMAXLON)
(  185) ALLOCATE(INLOPA(IMAXGL))
(  186) ALLOCATE(INOZPA(IMAXGL))
(  187) ALLOCATE(ZSINLA(IMAXGL))
(  188) ALLOCATE(ZVALH(0:IMAXLEV))
(  189) ALLOCATE(ZVBH(0:IMAXLEV))
(  190) # 191 "echien.F90"
(  191) !*       1.    Read file characteristics
(  192) !              -------------------------
(  193) # 194 "echien.F90"
(  194) WRITE(KULOUT,*) ' HAF, HAF : CADRE : ',CDNAMC
(  195) LLGARD=.FALSE.
(  196) CALL FACIES(CDNAMC,ITYPTR,ZSLAPO,ZCLOPO,ZSLOPO,ZCODIL,ITRONC,&
(  197)  & INLATI,INXLON,INLOPA,INOZPA,ZSINLA,INIVER,ZREF,ZVALH,&
(  198)  & ZVBH,LLGARD)  
(  199) # 200 "echien.F90"
(  200) IF (KINF == 1) THEN
(  201)   IF (INIVER > KFLEV) THEN
(  202)     CALL ABOR1('ECHIEN : MAX. NUMBER OF LEVEL IN MODEL TOO SMALL !')
(  203)   ENDIF
(  204) ENDIF
(  205) # 206 "echien.F90"
(  206) !     ------------------------------------------------------------------
(  207) # 208 "echien.F90"
(  208) !*       2.    Preliminary test
(  209) !              ----------------
(  210) # 211 "echien.F90"
(  211) IF(ITYPTR > 0) THEN
(  212)   WRITE(KULOUT,*) 'YOU ARE USING A FILE ARPEGE ',&
(  213)    & 'WHILE THE MODEL EXPECTS A FILE ALADIN'  
(  214)   CALL ABOR1('ECHIEN: ABOR1 CALLED 2')
(  215) ELSE
(  216)   ITYPTR = - ITYPTR
(  217)   LLMAP=ZCODIL >= 0.0_JPRB
(  218) ENDIF
(  219) # 220 "echien.F90"
(  220) Z2PI = 2.0_JPRB*XRPI
(  221) # 222 "echien.F90"
(  222) IF(ZSINLA(1) >= 0.0_JPRB) THEN
(  223)   ! Echien smells the old EGGX (i.e. the old format of the cadre)
(  224)   WRITE(KULOUT,*) ' the cadre >>',CDNAMC,'<< has the old EGGX format'
(  225)   WRITE(KULOUT,*) ' => consistency check of the geometry in the cadre&






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 18

(  226)    & will be more forgiving'
(  227) # 228 "echien.F90"
(  228)   ZEPS=PEPS*1000._JPRB
(  229) # 230 "echien.F90"
(  230)   ZRPK=ZSINLA(10)
(  231)   ZLON0=ZSINLA(8)
(  232)   ZLAT0=ZSINLA(9)
(  233)   ZLON1=ZSINLA(4)
(  234)   ZLAT1=ZSINLA(5)
(  235)   ZLON2=ZSINLA(6)
(  236)   ZLAT2=ZSINLA(7)
(  237)   ZELX=ZSINLA(13)
(  238)   ZELY=ZSINLA(14)
(  239)   ZDELX=ZSINLA(15)
(  240)   ZDELY=ZSINLA(16)
(  241)   ZEXWN=ZSINLA(17)
(  242)   ZEYWN=ZSINLA(18)
(  243)   ZLONC=ZSINLA(2)
(  244)   ZLATC=ZSINLA(3)
(  245) # 246 "echien.F90"
(  246)   IF (ZRPK < 0.0_JPRB) THEN
(  247)     ! latlon case :
(  248)     IF (ZLON1 <= ZLON2) THEN 
(  249)       ZLONC=MOD(0.5_JPRB*(ZLON1+ZLON2),Z2PI)
(  250)     ELSE
(  251)       ZLONC=MOD(0.5_JPRB*(ZLON1-Z2PI+ZLON2),Z2PI)
(  252)     ENDIF
(  253)     ZLATC=0.5_JPRB*(ZLAT1+ZLAT2)
(  254)     ZDELX=ZSINLA(15)
(  255)     ZDELY=ZSINLA(16)
(  256)   ELSEIF(LLMAP) THEN
(  257)     ! projection
(  258)     ALLOCATE(ZGELAM(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  259)     ALLOCATE(ZGELAT(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  260)     ALLOCATE(ZGM(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  261)     ALLOCATE(ZGENORX(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  262)     ALLOCATE(ZGENORY(INLOPA(3):INLOPA(4),INLOPA(5):INLOPA(6)))
(  263)     IROTEQ=INT(ZSINLA(1))
(  264)     ISOTRP=INT(ZSINLA(11))
(  265)     IGIVO=INT(ZSINLA(12))
(  266) # 267 "echien.F90"
(  267)     WRITE(KULOUT,*) 'Call EGGX_N by ECHIEN'
(  268) # 269 "echien.F90"
(  269)     CALL EGGX_N(XRPI,XRA,IROTEQ,ZSINLA(2),ZSINLA(3),ZSLAPO,&
(  270)      & ZSINLA(4),ZSINLA(5),ZSINLA(6),ZSINLA(7),ZLON0,ZLAT0,&
(  271)      & ZSINLA(10),KULOUT,ISOTRP,IGIVO,&
(  272)      & ZGELAM,ZGELAT,ZGM,ZGENORX,ZGENORY,&
(  273)      & INLOPA(3),INLOPA(4),INLOPA(5),INLOPA(6),&
(  274)      & INLOPA(3),INLOPA(4),INLOPA(5),INLOPA(6),&
(  275)      & ZDELX,ZDELY,ZLONC,ZLATC)  
(  276)     DEALLOCATE(ZGELAM)
(  277)     DEALLOCATE(ZGELAT)
(  278)     DEALLOCATE(ZGM)
(  279)     DEALLOCATE(ZGENORX)
(  280)     DEALLOCATE(ZGENORY)
(  281)     ZSINLA(1)=REAL(IROTEQ,JPRB)
(  282)     ZSINLA(11)=REAL(ISOTRP,JPRB)
(  283)     ZSINLA(12)=REAL(IGIVO,JPRB)






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 19

(  284)   ENDIF
(  285) # 286 "echien.F90"
(  286) ELSE
(  287) # 288 "echien.F90"
(  288)   ZEPS=PEPS
(  289) # 290 "echien.F90"
(  290)   ZRPK =ZSINLA(2)
(  291)   ZLON0=ZSINLA(3)
(  292)   ZLAT0=ZSINLA(4)
(  293)   ZLONC=ZSINLA(5)
(  294)   ZLATC=ZSINLA(6)
(  295)   ZDELX=ZSINLA(7)
(  296)   ZDELY=ZSINLA(8)
(  297)   ZELX =ZSINLA(9)
(  298)   ZELY =ZSINLA(10)
(  299)   ZEXWN=ZSINLA(11)
(  300)   ZEYWN=ZSINLA(12)
(  301)   ZLON1=ZSINLA(13)
(  302)   ZLAT1=ZSINLA(14)
(  303)   ZLON2=ZSINLA(15)
(  304)   ZLAT2=ZSINLA(16)
(  305)   IBWX=INT(ZSINLA(17))
(  306)   IBWY=INT(ZSINLA(18))
(  307) # 308 "echien.F90"
(  308) ENDIF
(  309) # 310 "echien.F90"
(  310) IF((KINF == 0).OR.(KINF == -1).OR.(KINF == -2).OR.(KINF == -3)) THEN
(  311) # 312 "echien.F90"
(  312) !*       3.    Checklist
(  313) !              ---------
(  314) # 315 "echien.F90"
(  315)   IERR=0
(  316) # 317 "echien.F90"
(  317) !*      3.1  Spectral dimensions
(  318) # 319 "echien.F90"
(  319)   IF(INLOPA(2) == 1.AND.KNLOPA(2) == 1) THEN
(  320)     IF(ITRONC /= KTRONC) THEN
(  321)       WRITE(KULOUT,*) ' TRUNCATION NSMAX MISMATCH : '&
(  322)        & ,'FILE = ',ITRONC, ' ; ARGUMENT = ',KTRONC  
(  323)       IERR=1
(  324)     ENDIF
(  325)     IF(ITYPTR /= KTYPTR) THEN
(  326)       WRITE(KULOUT,*) ' TRUNCATION NMSMAX MISMATCH : '&
(  327)        & ,'FILE = ',ITYPTR, ' ; ARGUMENT = ',KTYPTR  
(  328)       IERR=1
(  329)     ENDIF
(  330)   ENDIF
(  331)   IF ((INLOPA(2) /= 0.AND.KNLOPA(2) /= 0).OR.&
(  332)      & (.NOT.LLMAP.AND..NOT.LDMAP)) THEN  
(  333)     IF(INXLON /= KNXLON) THEN
(  334)       WRITE(KULOUT,*) ' NUMBER OF LONGITUDES MISMATCH : '&
(  335)        & ,'FILE = ',INXLON, ' ; ARGUMENT = ',KNXLON  
(  336)       IERR=1
(  337)     ENDIF
(  338)     IF(INLATI /= KDGL) THEN
(  339)       WRITE(KULOUT,*) ' NUMBER OF LATITUDES MISMATCH : '&
(  340)        & ,'FILE = ',INLATI, ' ; ARGUMENT = ',KDGL  
(  341)       IERR=1






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 20

(  342)     ENDIF
(  343)   ENDIF
(  344) # 345 "echien.F90"
(  345) !*      3.3  Horizontal geometry
(  346) # 347 "echien.F90"
(  347)   IF((LDMAP.AND..NOT.LLMAP).OR.(LLMAP.AND..NOT.LDMAP)) THEN
(  348) # 349 "echien.F90"
(  349)     WRITE(KULOUT,*) ' HORIZONTAL REPRESENTATION LMAP MISMATCH : '&
(  350)      & ,'FILE = ',LLMAP, ' ; ARGUMENT = ',LDMAP  
(  351)     IERR=1
(  352) # 353 "echien.F90"
(  353)   ELSEIF(LLMAP.AND.LDMAP) THEN
(  354) # 355 "echien.F90"
(  355)     IF((ZRPK >= 0.0_JPRB .AND. PSINLA(2) < 0.0_JPRB) .OR.&
(  356)        & (ZRPK < 0.0_JPRB .AND. PSINLA(2) >= 0.0_JPRB)) THEN  
(  357)       WRITE(KULOUT,*) ' PROJECTION TYPE MISMATCH : '&
(  358)        & ,'FILE = ',ZRPK, ' ; ARGUMENT = ',PSINLA(2)  
(  359)       IERR=1
(  360)     ENDIF
(  361) # 362 "echien.F90"
(  362)     ZDIFF=ABS(MOD(ZLON0-PSINLA(3),Z2PI))
(  363)     IF(ZDIFF > ZEPS.AND.(Z2PI-ZDIFF) > ZEPS) THEN
(  364)       WRITE(KULOUT,*) ' REFERENCE LONGITUDE MISMATCH : '&
(  365)        & ,'FILE = ',ZLON0,' (',ZLON0*180._JPRB/XRPI,' DEGREES)', &
(  366)        & ' ; ARGUMENT = ',PSINLA(3),' (',PSINLA(3)*180._JPRB/XRPI,' DEGREES)'
(  367)       IERR=1
(  368)     ENDIF
(  369) # 370 "echien.F90"
(  370)     IF(ABS(ZLAT0-PSINLA(4)) > ZEPS) THEN
(  371)       WRITE(KULOUT,*) ' REFERENCE LATITUDE MISMATCH : '&
(  372)        & ,'FILE = ',ZLAT0,' (',ZLAT0*180._JPRB/XRPI,' DEGREES)', &
(  373)        & ' ; ARGUMENT = ',PSINLA(4),' (',PSINLA(4)*180._JPRB/XRPI,' DEGREES)'  
(  374)       IERR=1
(  375)     ENDIF
(  376) # 377 "echien.F90"
(  377)     ZDIFF=ABS(MOD(ZLONC-PSINLA(5),Z2PI))
(  378)     IF(ZDIFF > ZEPS.AND.(Z2PI-ZDIFF) > ZEPS) THEN
(  379)       WRITE(KULOUT,*) ' DOMAIN CENTRE LONGITUDE MISMATCH : '&
(  380)        & ,'FILE = ',ZLONC,' (',ZLONC*180._JPRB/XRPI,' DEGREES)', & 
(  381)        & ' ; ARGUMENT = ',PSINLA(5),' (',PSINLA(5)*180._JPRB/XRPI,' DEGREES)'  
(  382)       IERR=1
(  383)     ENDIF
(  384) # 385 "echien.F90"
(  385)     IF(ABS(ZLATC-PSINLA(6)) > ZEPS) THEN
(  386)       WRITE(KULOUT,*) ' DOMAIN CENTRE LATITUDE MISMATCH : '&
(  387)        & ,'FILE = ',ZLATC,' (',ZLATC*180._JPRB/XRPI,' DEGREES)', & 
(  388)        & ' ; ARGUMENT = ',PSINLA(6),' (',PSINLA(6)*180._JPRB/XRPI,' DEGREES)'  
(  389)       IERR=1
(  390)     ENDIF
(  391) # 392 "echien.F90"
(  392)     IF(ABS(ZDELX-PSINLA(7)) > ZEPS*10000.) THEN
(  393)       WRITE(KULOUT,*) ' RESOLUTION IN X MISMATCH : '&
(  394)        & ,'FILE = ',ZDELX, ' ; ARGUMENT = ',PSINLA(7)  
(  395)       IERR=1
(  396)     ENDIF
(  397) # 398 "echien.F90"
(  398)     IF(ABS(ZDELY-PSINLA(8)) > ZEPS*10000.) THEN
(  399)       WRITE(KULOUT,*) ' RESOLUTION IN Y MISMATCH : '&






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 21

(  400)        & ,'FILE = ',ZDELY, ' ; ARGUMENT = ',PSINLA(8)  
(  401)       IERR=1
(  402)     ENDIF
(  403) # 404 "echien.F90"
(  404)     IF(INLOPA(2) == 0) THEN
(  405)       IF(KNLOPA(2) /= 0) THEN
(  406)         ! Abort when extension zone in argument is NOT null
(  407)         IF ((KNLOPA(4)-KNLOPA(3)+1 /= KNXLON).OR.&
(  408)          & (KNLOPA(6)-KNLOPA(5)+1 /= KDGL)) THEN  
(  409)           IF(KINF == 0.OR.KINF == -1) THEN
(  410)             WRITE(KULOUT,*) 'HORIZONTAL DOMAIN INDICATOR (NDOM) ',&
(  411)              & 'MISMATCH : ',&
(  412)              & 'FILE = ',INLOPA(2), ' (C+I) ; ARGUMENT = ',KNLOPA(2),&
(  413)              & ' (C+I+E)'  
(  414)             WRITE(KULOUT,*) ' PROPER INITIALIZATION OF (E) '&
(  415)              & ,'IS EXPECTED IN THE CALLING SUBROUTINE'  
(  416)             IF(KINF == 0) THEN
(  417)               II=-2
(  418)             ELSE
(  419)               II=-3
(  420)             ENDIF
(  421)             WRITE(KULOUT,*) ' WHEN THIS IS OK, SET KINF=',II,&
(  422)              & ' IN THE CALLING SUBROUTINE TO ANIHILATE THIS ABORT'  
(  423)             IERR=1
(  424)           ENDIF
(  425)         ENDIF
(  426)       ENDIF
(  427)     ELSE
(  428)       IF(KNLOPA(2) == 0) THEN
(  429)         ! Warning when extension zone in file is NOT null
(  430)         IF ((INLOPA(4)-INLOPA(3)+1 /= INXLON).OR.&
(  431)          & (INLOPA(6)-INLOPA(5)+1 /= INLATI)) THEN  
(  432)           IF(KINF == 0.OR.KINF == -1) THEN
(  433)             WRITE(KULOUT,*) 'HORIZONTAL DOMAIN INDICATOR (NDOM) ',&
(  434)              & 'MISMATCH : ',&
(  435)              & 'FILE = ',INLOPA(2), ' (C+I+E) ; ARGUMENT = ',&
(  436)              & KNLOPA(2),' (C+I)'  
(  437)             WRITE(KULOUT,*) ' PROPER INITIALIZATION OF (E) '&
(  438)              & ,'IS EXPECTED IN THE CALLING SUBROUTINE'  
(  439)             IF(KINF == 0) THEN
(  440)               II=-2
(  441)             ELSE
(  442)               II=-3
(  443)             ENDIF
(  444)             WRITE(KULOUT,*) ' WHEN THIS IS OK, SET KINF=',II,&
(  445)              & ' IN THE CALLING SUBROUTINE TO ANIHILATE THIS ABORT'  
(  446)             IERR=1
(  447)           ENDIF
(  448)         ENDIF
(  449)       ELSEIF(INLOPA(2) == 1.AND.KNLOPA(2) == -1) THEN
(  450)         WRITE(KULOUT,*) ' CAUTION : FILE CONTAINS SPECTRALLY ','FITTED DATA'
(  451)       ELSEIF(INLOPA(2) == -1.AND.KNLOPA(2) == 1) THEN
(  452)         WRITE(KULOUT,*) ' CAUTION : FILE CONTAINS UNFITTED DATA'
(  453)       ENDIF
(  454)     ENDIF
(  455) # 456 "echien.F90"
(  456)     IF(INLOPA(3) /= KNLOPA(3)) THEN
(  457)       WRITE(KULOUT,*) ' START INDEX FOR C+I IN X DIRECTION '&






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 22

(  458)        & ,'(NDLUNG) MISMATCH : '&
(  459)        & ,' FILE = ',INLOPA(3), ' ; ARGUMENT = ',KNLOPA(3)  
(  460)       IERR=1
(  461)     ENDIF
(  462) # 463 "echien.F90"
(  463)     IF(INLOPA(4) /= KNLOPA(4)) THEN
(  464)       WRITE(KULOUT,*) ' END INDEX FOR C+I IN X DIRECTION '&
(  465)        & ,'(NDLUXG) MISMATCH : '&
(  466)        & ,' FILE = ',INLOPA(4), ' ; ARGUMENT = ',KNLOPA(4)  
(  467)       IERR=1
(  468)     ENDIF
(  469) # 470 "echien.F90"
(  470)     IF(INLOPA(5) /= KNLOPA(5)) THEN
(  471)       WRITE(KULOUT,*) ' START INDEX FOR C+I IN Y DIRECTION '&
(  472)        & ,'(NDGUNG) MISMATCH : '&
(  473)        & ,' FILE = ',INLOPA(5), ' ; ARGUMENT = ',KNLOPA(5)  
(  474)       IERR=1
(  475)     ENDIF
(  476) # 477 "echien.F90"
(  477)     IF(INLOPA(6) /= KNLOPA(6)) THEN
(  478)       WRITE(KULOUT,*) ' END INDEX FOR C+I IN Y DIRECTION '&
(  479)        & ,'(NDGUXG) MISMATCH : '&
(  480)        & ,' FILE = ',INLOPA(6), ' ; ARGUMENT = ',KNLOPA(6)  
(  481)       IERR=1
(  482)     ENDIF
(  483) # 484 "echien.F90"
(  484)     IF(INLOPA(7) /= KNLOPA(7)) THEN
(  485)       WRITE(KULOUT,*) 'CAUTION : LENGTH OF I ZONE IN X DIRECTION '&
(  486)        & ,'(NBZONL) MISMATCH : '&
(  487)        & ,' FILE = ',INLOPA(7), ' ; ARGUMENT = ',KNLOPA(7)  
(  488)     ENDIF
(  489) # 490 "echien.F90"
(  490)     IF(INLOPA(8) /= KNLOPA(8)) THEN
(  491)       WRITE(KULOUT,*) 'CAUTION : LENGTH OF I ZONE IN Y DIRECTION '&
(  492)        & ,'(NBZONG) MISMATCH : '&
(  493)        & ,' FILE = ',INLOPA(8), ' ; ARGUMENT = ',KNLOPA(8)  
(  494)     ENDIF
(  495) # 496 "echien.F90"
(  496)     IF (KINF == 0 .AND. ZSINLA(1) < 0.0_JPRB) THEN
(  497)       IF(IBWX < INT(PSINLA(17))) THEN
(  498)         WRITE(KULOUT,*) ' PORTION OF SCIENTIFIC E-ZONE LYING INSIDE C+I (X AXIS) TOO BIG : '&
(  499)          & ,' FILE = ',IBWX, ' ; ARGUMENT = ',REAL(PSINLA(17),KIND=JPRB)
(  500)         IERR=1
(  501)       ENDIF
(  502)       IF(IBWY < INT(PSINLA(18))) THEN
(  503)         WRITE(KULOUT,*) ' PORTION OF SCIENTIFIC E-ZONE LYING INSIDE C+I (Y AXIS) TOO BIG : '&
(  504)          & ,' FILE = ',IBWY, ' ; ARGUMENT = ',REAL(PSINLA(18),KIND=JPRB)
(  505)         IERR=1
(  506)       ENDIF
(  507)     ENDIF
(  508) # 509 "echien.F90"
(  509)   ELSE
(  510) # 511 "echien.F90"
(  511)     IF(ABS(ZELX-PSINLA(9)) > ZEPS) THEN
(  512)       WRITE(KULOUT,*) ' WAVE LENGTH IN X DIRECTION  MISMATCH : '&
(  513)        & ,'FILE = ',ZELX, ' ; ARGUMENT = ',PSINLA(9)  
(  514)       IERR=1
(  515)     ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 23

(  516) # 517 "echien.F90"
(  517)     IF(ABS(ZELY-PSINLA(10)) > ZEPS) THEN
(  518)       WRITE(KULOUT,*) ' WAVE LENGTH IN Y DIRECTION  MISMATCH : '&
(  519)        & ,'FILE = ',ZELY, ' ; ARGUMENT = ',PSINLA(10)  
(  520)       IERR=1
(  521)     ENDIF
(  522) # 523 "echien.F90"
(  523)   ENDIF
(  524) # 525 "echien.F90"
(  525) !*      3.4  Vertical levels
(  526) # 527 "echien.F90"
(  527)   IF (KINF == 0.OR.KINF == -2) THEN
(  528)     IF(INIVER /= KFLEV) THEN
(  529)       WRITE(KULOUT,*) ' NUMBER OF LEVELS MISMATCH : '&
(  530)        & ,'FILE = ',INIVER, ' ; ARGUMENT = ',KFLEV  
(  531)       IERR=1
(  532)     ELSE
(  533)       IERRA=0
(  534)       DO JFLEV = 0,KFLEV
(  535)         IF(ABS(ZVALH(JFLEV)*ZREF-PVALH(JFLEV)*PREF)/SQRT(ZREF*PREF) > PEPS) THEN
(  536)           WRITE(KULOUT,*) ' VERTICAL FUNCTION *A* MISMATCH ON ',&
(  537)            & 'LEVEL ',JFLEV,' : ',&
(  538)            & 'FILE = ',ZVALH(JFLEV), ' ; ARGUMENT = ',PVALH(JFLEV)  
(  539)           IERRA=1
(  540)           IERR=1
(  541)         ENDIF
(  542)         IF(ABS(ZVBH(JFLEV)-PVBH(JFLEV)) > PEPS) THEN
(  543)           WRITE(KULOUT,*) ' VERTICAL FUNCTION *B* MISMATCH ON ',&
(  544)            & 'LEVEL ',JFLEV,' : ',&
(  545)            & 'FILE = ',ZVBH(JFLEV), ' ; ARGUMENT = ',PVBH(JFLEV)  
(  546)           IERR=1
(  547)         ENDIF
(  548)       ENDDO
(  549)       IF (IERRA /= 0) THEN
(  550)         WRITE(KULOUT,*) ' REFERENCE PRESSURE : ',&
(  551)          & 'FILE = ',ZREF, ' ; ARGUMENT = ',PREF  
(  552)       ENDIF
(  553)     ENDIF
(  554)   ENDIF
(  555) # 556 "echien.F90"
(  556) !*      3.5  Packing characteristics (fatal ???)
(  557) # 558 "echien.F90"
(  558)   IF(INLOPA(1) /= KNLOPA(1) .AND. (LLMAP .OR. LDMAP) ) THEN
(  559)     WRITE(KULOUT,*) ' PACKING PARAMETER MISMATCH : '&
(  560)      & ,'FILE = ',INLOPA(1), ' ; ARGUMENT = ',KNLOPA(1)  
(  561)     WRITE(KULOUT,*) 'ECHIEN: CHECK 3.5 ignored'
(  562)     !IERR=1
(  563)   ENDIF
(  564) # 565 "echien.F90"
(  565)   IF(IERR /= 0) THEN
(  566)     CALL ABOR1('ECHIEN: ABOR1 CALLED 3.5')
(  567)   ENDIF
(  568) # 569 "echien.F90"
(  569) !     ------------------------------------------------------------------
(  570) # 571 "echien.F90"
(  571) !*       4.    Bring back information on file
(  572) !              ------------------------------
(  573) # 574 "echien.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:39:10      page 24

(  574) ELSEIF(KINF == 1) THEN
(  575) # 576 "echien.F90"
(  576)   WRITE(KULOUT,*) 'ECHIEN ERROR : ECHIEN(..., KINF=1,...) HAS BEEN REPLACED BY ERIEN(...)'
(  577)   CALL ABOR1('ECHIEN: ABOR1 CALLED 4.1')
(  578) # 579 "echien.F90"
(  579) ELSE
(  580)   WRITE(KULOUT,*) 'INTERNAL ERROR : KINF = ',KINF
(  581)   CALL ABOR1('ECHIEN: ABOR1 CALLED 4.2')
(  582) ENDIF
(  583) # 584 "echien.F90"
(  584) DEALLOCATE(INLOPA)
(  585) DEALLOCATE(INOZPA)
(  586) DEALLOCATE(ZSINLA)
(  587) DEALLOCATE(ZVALH)
(  588) DEALLOCATE(ZVBH)
(  589) # 590 "echien.F90"
(  590) !     ------------------------------------------------------------------
(  591) # 592 "echien.F90"
(  592) IF (LHOOK) CALL DR_HOOK('ECHIEN',1,ZHOOK_HANDLE)
(  593) END SUBROUTINE ECHIEN
