


NVFORTRAN (Version     23.1)          02/24/2023  13:34:40      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:34:40      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: getmemvals.F90

(    1) SUBROUTINE GETMEMVALS(N, KEY, KVAL)
(    2) USE PARKIND1  ,ONLY : JPIM     ,JPRB     ,JPIB
(    3) IMPLICIT NONE
(    4) INTEGER(KIND=JPIM), INTENT(IN) :: N, KEY(N)
(    5) INTEGER(KIND=JPIB), INTENT(OUT):: KVAL(N)
(    6) !--------------------------------- key ----------------------------------------------
(    7) INTEGER(KIND=JPIB), EXTERNAL :: GETHWM    !  1  High Water Mark for HEAP-alloc
(    8) INTEGER(KIND=JPIB), EXTERNAL :: GETMAXRSS !  2  Maximum resident memory so far
(    9) INTEGER(KIND=JPIB), EXTERNAL :: GETCURHEAP!  3  Instantaneous allocation from ALLOCATE/malloc
(   10) INTEGER(KIND=JPIB), EXTERNAL :: GETSTK    !  4  Instantaneous stack usage
(   11) INTEGER(KIND=JPIB), EXTERNAL :: GETMAXSTK !  5  Maximum stack usage so far
(   12) INTEGER(KIND=JPIB), EXTERNAL :: GETPAG    !  6  I/O caused by paging
(   13) ! -- add more as required (all 64-bit integers upon return, though) --
(   14) 
(   15) INTEGER(KIND=JPIM) J
(   16) 
(   17) DO J=1,N
(   18)   IF (KEY(J) == 1) THEN
(   19)     KVAL(J) = GETHWM()
(   20)   ELSE IF (KEY(J) == 2) THEN
(   21)     KVAL(J) = GETMAXRSS()
(   22)   ELSE IF (KEY(J) == 3) THEN
(   23)     KVAL(J) = GETCURHEAP()
(   24)   ELSE IF (KEY(J) == 4) THEN
(   25)     KVAL(J) = GETSTK()
(   26)   ELSE IF (KEY(J) == 5) THEN
(   27)     KVAL(J) = GETMAXSTK()
(   28)   ELSE IF (KEY(J) == 6) THEN
(   29)     KVAL(J) = GETPAG()
(   30)   ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:34:40      page 3

(   31) ENDDO
(   32) 
(   33) END SUBROUTINE GETMEMVALS





























































NVFORTRAN (Version     23.1)          02/24/2023  13:34:40      page 4

(    1) # 1 "getmemvals.F90"
(    1) SUBROUTINE GETMEMVALS(N, KEY, KVAL)
(    2) USE PARKIND1  ,ONLY : JPIM     ,JPRB     ,JPIB
(    3) IMPLICIT NONE
(    4) INTEGER(KIND=JPIM), INTENT(IN) :: N, KEY(N)
(    5) INTEGER(KIND=JPIB), INTENT(OUT):: KVAL(N)
(    6) !--------------------------------- key ----------------------------------------------
(    7) INTEGER(KIND=JPIB), EXTERNAL :: GETHWM    !  1  High Water Mark for HEAP-alloc
(    8) INTEGER(KIND=JPIB), EXTERNAL :: GETMAXRSS !  2  Maximum resident memory so far
(    9) INTEGER(KIND=JPIB), EXTERNAL :: GETCURHEAP!  3  Instantaneous allocation from ALLOCATE/malloc
(   10) INTEGER(KIND=JPIB), EXTERNAL :: GETSTK    !  4  Instantaneous stack usage
(   11) INTEGER(KIND=JPIB), EXTERNAL :: GETMAXSTK !  5  Maximum stack usage so far
(   12) INTEGER(KIND=JPIB), EXTERNAL :: GETPAG    !  6  I/O caused by paging
(   13) ! -- add more as required (all 64-bit integers upon return, though) --
(   14) # 15 "getmemvals.F90"
(   15) INTEGER(KIND=JPIM) J
(   16) # 17 "getmemvals.F90"
(   17) DO J=1,N
(   18)   IF (KEY(J) == 1) THEN
(   19)     KVAL(J) = GETHWM()
(   20)   ELSE IF (KEY(J) == 2) THEN
(   21)     KVAL(J) = GETMAXRSS()
(   22)   ELSE IF (KEY(J) == 3) THEN
(   23)     KVAL(J) = GETCURHEAP()
(   24)   ELSE IF (KEY(J) == 4) THEN
(   25)     KVAL(J) = GETSTK()
(   26)   ELSE IF (KEY(J) == 5) THEN
(   27)     KVAL(J) = GETMAXSTK()
(   28)   ELSE IF (KEY(J) == 6) THEN
(   29)     KVAL(J) = GETPAG()
(   30)   ENDIF
(   31) ENDDO
(   32) # 33 "getmemvals.F90"
(   33) END SUBROUTINE GETMEMVALS
