


NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: eggdir.F90

(    1) SUBROUTINE EGGDIR (PRPI, PRA, PDELX, PDELY, KPROF,&
(    2)  & KBEG, KEND, KULOUT, PGX, PGY)  
(    3) !****
(    4) !---------------------------------------------------------------------
(    5) 
(    6) !     GEOGRAPHY OF GRID-POINTS, ROTATION/PROJECTION FROM GEOGRAPHICAL
(    7) !     SPHERE TO ARPEGE-ALADIN
(    8) !     --------------------------------------------------------------------
(    9) 
(   10) !       ---------------------------------------------------
(   11) !     PURPOSE
(   12) !     -------
(   13) !      KNOWING THE PRECISE GEOGRAPHICAL TRANSFORMATION FROM
(   14) !      ARGUMENTS AND COMMON /YEMGGCM/, COMPUTES THE LOCATION
(   15) !      OF THE GEOGRAPHICAL POINTS GIVEN IN INPUT ON
(   16) !      ON THE ARPEGE-ALADIN GRID
(   17) 
(   18) !      MUST BE USED IN CONNECTION WITH SUBROUTINE EGGX
(   19) !      AFTER IT HAS INITIALIZED /YEMGGCM/
(   20) 
(   21) !     INPUT PARAMETERS
(   22) !     ----------------
(   23) !      PRPI : PI (3.14ETC)
(   24) !      PRA  : A, RADIUS OF PLANET
(   25) !      PDELX, PDELY : GRID SIZE IN M IF PROJECTION, OR IN RADIANS
(   26) !      KPROF : SIZE OF (1D) ARRAYS
(   27) !      KBEG, KEND : BEGINNING AND END POINTS OF CALCULATIONS
(   28) !      KULOUT : LOGICAL UNIT OF LISTING
(   29) !      PGX(KPROF) : INPUT: TRUE GEOGRAPHICAL LONGITUDE IN RADIANS
(   30) !                          (SEE EGGX FOR CONVENTIONS)






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 3

(   31) !      PGY(KPROF) : INPUT : TRUE GEOGRAPHICAL LATITUDE IN RADIANS
(   32) 
(   33) !            IN SHORT, THE OUTPUT IS SUITABLE FOR USE IN EGGRVS
(   34) 
(   35) !     IMPLICIT INPUT
(   36) !     --------------
(   37) !      COMMON /YEMGGCM/ MUST HAVE BEEN INITIALIZED
(   38) 
(   39) !     OUTPUT PARAMETERS
(   40) !     -----------------
(   41) !      PGX (KPROF):
(   42) !                   OUTPUT: X LOCATION OF POINTS, DISTANCE UNDER PROJECTION,
(   43) !                            RELATIVE ROTATED LONGITUDE UNDER ROTATION,
(   44) !                            ALWAYS DEFINED AS (JLON-KDLUN)*PDELX
(   45) !      PGY (KPROF):
(   46) !                   OUTPUT : Y LOCATION OF POINTS, DISTANCE UNDER PROJECTION,
(   47) !                            RELATIVE ROTATED LATITUDE UNDER ROTATION,
(   48) !                            ALWAYS DEFINED AS (JLAT-KDGUN)*PDELY
(   49) !            UNDER ROTATION, THE POSITION OF THE ORIGIN (XLAT1R,XLON1U)
(   50) !            IS HANDLED BY THIS SUBROUTINE : ONLY RELATIVE LOCATION
(   51) !            ARE GIVEN ON OUTPUT.
(   52) 
(   53) !     WRITTEN BY
(   54) !     ---------- ALAIN JOLY
(   55) 
(   56) !      ORIGINAL NORTHERN HEMISPHERE VERSION : 10/5/92
(   57) !      SOUTHERN HEMISPHERE VERSION : 27/1/93
(   58) 
(   59) !-------------------------------------------------------------------
(   60) 
(   61) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   62) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   63) 
(   64) USE YEMGGCM  , ONLY : NYMGGI   ,NYMGGR   ,NYMGGWH  ,XLATR    ,&
(   65)  & XLONR    ,XGGPK    ,XLAT0R   ,XLON0U   ,XIPORE   ,&
(   66)  & XJPORE   ,XLON1R   ,XLON1U   ,XLAT1R   ,XLON2R   ,&
(   67)  & HSUD     ,XBETA  
(   68) 
(   69) !-------------------------------------------------------------------
(   70) 
(   71) IMPLICIT NONE
(   72) 
(   73) INTEGER(KIND=JPIM),INTENT(IN)    :: KPROF 
(   74) REAL(KIND=JPRB)   ,INTENT(IN)    :: PRPI 
(   75) REAL(KIND=JPRB)   ,INTENT(IN)    :: PRA 
(   76) REAL(KIND=JPRB)   ,INTENT(IN)    :: PDELX 
(   77) REAL(KIND=JPRB)   ,INTENT(IN)    :: PDELY 
(   78) INTEGER(KIND=JPIM),INTENT(IN)    :: KBEG 
(   79) INTEGER(KIND=JPIM),INTENT(IN)    :: KEND 
(   80) INTEGER(KIND=JPIM),INTENT(IN)    :: KULOUT 
(   81) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGX(KPROF) 
(   82) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGY(KPROF) 
(   83) 
(   84) !-------------------------------------------------------------------
(   85) 
(   86) INTEGER(KIND=JPIM) :: JJ
(   87) 
(   88) LOGICAL :: LLGWH






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 4

(   89) 
(   90) REAL(KIND=JPRB) :: Z2PI, Z2PIPK, ZCOBETA, ZCOS, ZCOSO, ZGAM,&
(   91)  & ZLAT, ZLIMIT, ZLON, ZPIS2, ZPIS4, ZRC, ZRR, &
(   92)  & ZSECAN, ZSECUR, ZSIBETA, ZSIN, ZSINO, ZXE, &
(   93)  & ZXP, ZYE, ZYP  
(   94) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   95) 
(   96) !-------------------------------------------------------------------
(   97) 
(   98) #include "abor1.intfb.h"
(   99) 
(  100) !-------------------------------------------------------------------
(  101) IF (LHOOK) CALL DR_HOOK('EGGDIR',0,ZHOOK_HANDLE)
(  102) !-------------------------------------------------------------------
(  103) 
(  104) ZRC=0.0_JPRB
(  105) 
(  106) IF ( NYMGGI /= 10 ) THEN
(  107)   WRITE (KULOUT,*) '*** EGGDIR *** UNINITIALISED MODULE '
(  108)   CALL ABOR1(' EGGDIR: NYMGGI /= 10 ')
(  109) ENDIF
(  110) 
(  111) IF ( HSUD < 0.0_JPRB ) THEN
(  112)   DO JJ = KBEG, KEND
(  113)     PGY(JJ) = ABS( PGY(JJ) )
(  114)   ENDDO
(  115) ENDIF
(  116) 
(  117) !     INITIALISE ROTATION ANGLE AND OTHER CONSTANTS
(  118) !     ---------------------------------------------
(  119) ZPIS2 = PRPI*0.5_JPRB
(  120) ZPIS4 = PRPI*0.25_JPRB
(  121) ZSECUR = 1.E-12_JPRB
(  122) ZSECAN = 1.E-05_JPRB
(  123) LLGWH = .FALSE.
(  124) IF ( NYMGGWH == 1 ) LLGWH = .TRUE.
(  125) !     CHECK LONGITUDES
(  126) DO JJ = KBEG, KEND
(  127)   IF ( PGX(JJ) < 0.0_JPRB ) THEN
(  128)     PGX(JJ) = PGX(JJ) + 2.0_JPRB*PRPI
(  129)   ENDIF
(  130) ENDDO
(  131) 
(  132) !*
(  133) !----------------------------------------------------------------------
(  134) !     1.- DIRECT ROTATION
(  135) !     --------------------
(  136) IF ( NYMGGR /= 0 ) THEN
(  137)   DO JJ = KBEG, KEND
(  138)     ZSIN = COS( XLATR )*SIN( PGY(JJ) ) -&
(  139)      & SIN( XLATR )*COS( PGY(JJ) )*COS( PGX(JJ)-XLONR )  
(  140)     ZLAT = ASIN( ZSIN )
(  141)     IF ( ABS(ZLAT) >= ZPIS2 ) THEN
(  142)       ZLON = 0.0_JPRB
(  143)     ELSE
(  144)       ZCOS = COS( ZLAT )
(  145)       ZCOSO = ( SIN( XLATR )*SIN( PGY(JJ) ) +&
(  146)        & COS( XLATR )*COS( PGY(JJ) )*COS( PGX(JJ)-XLONR ) )/ZCOS  






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 5

(  147)       ZCOSO = MIN(1.0_JPRB,MAX(-1.0_JPRB,ZCOSO))
(  148)       ZSINO = ( COS( PGY(JJ) )*SIN( PGX(JJ)-XLONR ) )/ZCOS
(  149)       ZSINO = MIN(1.0_JPRB,MAX(-1.0_JPRB,ZSINO))
(  150)       ZLON = ACOS( ZCOSO )
(  151)       IF ( ASIN( ZSINO ) < 0.0_JPRB ) ZLON = 2.0_JPRB*PRPI - ZLON
(  152)     ENDIF
(  153)     PGX(JJ) = ZLON
(  154)     PGY(JJ) = ZLAT
(  155)   ENDDO
(  156) ENDIF
(  157) 
(  158) !     CORRECTION OF POSITION IF DOMAIN ASTRIDE GREENWICH
(  159) !     --------------------------------------------------
(  160) IF ( LLGWH ) THEN
(  161)   DO JJ = KBEG, KEND
(  162)     ZLIMIT=0.5_JPRB*(XLON2R+XLON1R-ZPIS2)
(  163)     IF ( PGX(JJ) < XLON1R .AND. PGX(JJ) < ZLIMIT )&
(  164)      & PGX(JJ) = PGX(JJ) + 2.0_JPRB*PRPI  
(  165)   ENDDO
(  166) ENDIF
(  167) 
(  168) !     FINAL RESULT IN THE ABSENCE OF PROJECTION
(  169) !     -----------------------------------------
(  170) IF ( XGGPK < 0.0_JPRB ) THEN
(  171)   DO JJ = KBEG, KEND
(  172)     PGX(JJ) = PGX(JJ) - XLON1U
(  173)     PGY(JJ) = PGY(JJ) - XLAT1R
(  174)   ENDDO
(  175) ENDIF
(  176) 
(  177) !*
(  178) !------------------------------------------------------------------
(  179) !     2.- DIRECT STEREO-LAMBERT PROJECTION
(  180) !     ------------------------------------
(  181) IF ( XGGPK > 0.0_JPRB ) THEN
(  182)   IF ( XGGPK < 1.0_JPRB ) THEN
(  183)     ZRC = PRA*( COS( XLAT0R )**(1.0_JPRB-XGGPK) )*&
(  184)      & ( (1.0_JPRB+SIN( XLAT0R ))**XGGPK )/XGGPK  
(  185)     Z2PI = 2.0_JPRB*PRPI
(  186)     Z2PIPK = 2.0_JPRB*PRPI*XGGPK
(  187)     DO JJ = KBEG, KEND
(  188)       IF ( (PGX(JJ)-XLON0U)  >  Z2PIPK ) THEN
(  189)         PGX(JJ) = PGX(JJ) - Z2PI
(  190)       ENDIF
(  191)     ENDDO
(  192)   ELSEIF ( XGGPK == 1.0_JPRB ) THEN
(  193)     ZRC = PRA*( 1.0_JPRB + SIN( XLAT0R ) )
(  194)   ELSE
(  195)     WRITE (KULOUT,*) ' *** EGGDIR *** UNKNOWN PROJECTION '
(  196)   ENDIF
(  197)   ZXP = XIPORE*PDELX
(  198)   ZYP = XJPORE*PDELY
(  199) 
(  200)   DO JJ = KBEG, KEND
(  201)     ZRR = ZRC*( COS(PGY(JJ)) /&
(  202)      & ( 1.0_JPRB+ SQRT(1.0_JPRB-COS(PGY(JJ))**2 ))  )**XGGPK      
(  203)     ZGAM = XGGPK*( PGX(JJ)-XLON0U ) - XBETA
(  204)     PGX(JJ) = ZXP + ZRR*SIN( ZGAM )






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 6

(  205)     PGY(JJ) = ZYP - HSUD*ZRR*COS( ZGAM )
(  206)   ENDDO
(  207) ENDIF
(  208) 
(  209) !*
(  210) !----------------------------------------------------------------------
(  211) !     3.- DIRECT MERCATOR PROJECTION
(  212) !     ------------------------------
(  213) IF ( XGGPK == 0.0_JPRB ) THEN
(  214)   ZRC = PRA*COS( XLAT0R )
(  215)   ZXE = XIPORE*PDELX
(  216)   ZYE = XJPORE*PDELY
(  217)   ZSIBETA = SIN( XBETA )
(  218)   ZCOBETA = COS( XBETA )
(  219)   DO JJ = KBEG, KEND
(  220)     ZXP = ZXE + ZRC*( PGX(JJ)-XLON0U )
(  221)     ZYP = ZYE - ZRC*LOG( TAN(ZPIS4 - 0.5_JPRB*PGY(JJ)) )
(  222)     PGX(JJ) = ZXP*ZCOBETA + ZYP*ZSIBETA
(  223)     PGY(JJ) = -ZXP*ZSIBETA + ZYP*ZCOBETA
(  224)   ENDDO
(  225) ENDIF
(  226) 
(  227) !-------------------------------------------------------------------
(  228) IF (LHOOK) CALL DR_HOOK('EGGDIR',1,ZHOOK_HANDLE)
(  229) END SUBROUTINE EGGDIR







































NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 7

(    1) # 1 "eggdir.F90"
(    1) SUBROUTINE EGGDIR (PRPI, PRA, PDELX, PDELY, KPROF,&
(    2)  & KBEG, KEND, KULOUT, PGX, PGY)  
(    3) !****
(    4) !---------------------------------------------------------------------
(    5) # 6 "eggdir.F90"
(    6) !     GEOGRAPHY OF GRID-POINTS, ROTATION/PROJECTION FROM GEOGRAPHICAL
(    7) !     SPHERE TO ARPEGE-ALADIN
(    8) !     --------------------------------------------------------------------
(    9) # 10 "eggdir.F90"
(   10) !       ---------------------------------------------------
(   11) !     PURPOSE
(   12) !     -------
(   13) !      KNOWING THE PRECISE GEOGRAPHICAL TRANSFORMATION FROM
(   14) !      ARGUMENTS AND COMMON /YEMGGCM/, COMPUTES THE LOCATION
(   15) !      OF THE GEOGRAPHICAL POINTS GIVEN IN INPUT ON
(   16) !      ON THE ARPEGE-ALADIN GRID
(   17) # 18 "eggdir.F90"
(   18) !      MUST BE USED IN CONNECTION WITH SUBROUTINE EGGX
(   19) !      AFTER IT HAS INITIALIZED /YEMGGCM/
(   20) # 21 "eggdir.F90"
(   21) !     INPUT PARAMETERS
(   22) !     ----------------
(   23) !      PRPI : PI (3.14ETC)
(   24) !      PRA  : A, RADIUS OF PLANET
(   25) !      PDELX, PDELY : GRID SIZE IN M IF PROJECTION, OR IN RADIANS
(   26) !      KPROF : SIZE OF (1D) ARRAYS
(   27) !      KBEG, KEND : BEGINNING AND END POINTS OF CALCULATIONS
(   28) !      KULOUT : LOGICAL UNIT OF LISTING
(   29) !      PGX(KPROF) : INPUT: TRUE GEOGRAPHICAL LONGITUDE IN RADIANS
(   30) !                          (SEE EGGX FOR CONVENTIONS)
(   31) !      PGY(KPROF) : INPUT : TRUE GEOGRAPHICAL LATITUDE IN RADIANS
(   32) # 33 "eggdir.F90"
(   33) !            IN SHORT, THE OUTPUT IS SUITABLE FOR USE IN EGGRVS
(   34) # 35 "eggdir.F90"
(   35) !     IMPLICIT INPUT
(   36) !     --------------
(   37) !      COMMON /YEMGGCM/ MUST HAVE BEEN INITIALIZED
(   38) # 39 "eggdir.F90"
(   39) !     OUTPUT PARAMETERS
(   40) !     -----------------
(   41) !      PGX (KPROF):
(   42) !                   OUTPUT: X LOCATION OF POINTS, DISTANCE UNDER PROJECTION,
(   43) !                            RELATIVE ROTATED LONGITUDE UNDER ROTATION,
(   44) !                            ALWAYS DEFINED AS (JLON-KDLUN)*PDELX
(   45) !      PGY (KPROF):
(   46) !                   OUTPUT : Y LOCATION OF POINTS, DISTANCE UNDER PROJECTION,
(   47) !                            RELATIVE ROTATED LATITUDE UNDER ROTATION,
(   48) !                            ALWAYS DEFINED AS (JLAT-KDGUN)*PDELY
(   49) !            UNDER ROTATION, THE POSITION OF THE ORIGIN (XLAT1R,XLON1U)
(   50) !            IS HANDLED BY THIS SUBROUTINE : ONLY RELATIVE LOCATION
(   51) !            ARE GIVEN ON OUTPUT.
(   52) # 53 "eggdir.F90"
(   53) !     WRITTEN BY
(   54) !     ---------- ALAIN JOLY
(   55) # 56 "eggdir.F90"
(   56) !      ORIGINAL NORTHERN HEMISPHERE VERSION : 10/5/92
(   57) !      SOUTHERN HEMISPHERE VERSION : 27/1/93






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 8

(   58) # 59 "eggdir.F90"
(   59) !-------------------------------------------------------------------
(   60) # 61 "eggdir.F90"
(   61) USE PARKIND1  ,ONLY : JPIM     ,JPRB
(   62) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   63) # 64 "eggdir.F90"
(   64) USE YEMGGCM  , ONLY : NYMGGI   ,NYMGGR   ,NYMGGWH  ,XLATR    ,&
(   65)  & XLONR    ,XGGPK    ,XLAT0R   ,XLON0U   ,XIPORE   ,&
(   66)  & XJPORE   ,XLON1R   ,XLON1U   ,XLAT1R   ,XLON2R   ,&
(   67)  & HSUD     ,XBETA  
(   68) # 69 "eggdir.F90"
(   69) !-------------------------------------------------------------------
(   70) # 71 "eggdir.F90"
(   71) IMPLICIT NONE
(   72) # 73 "eggdir.F90"
(   73) INTEGER(KIND=JPIM),INTENT(IN)    :: KPROF 
(   74) REAL(KIND=JPRB)   ,INTENT(IN)    :: PRPI 
(   75) REAL(KIND=JPRB)   ,INTENT(IN)    :: PRA 
(   76) REAL(KIND=JPRB)   ,INTENT(IN)    :: PDELX 
(   77) REAL(KIND=JPRB)   ,INTENT(IN)    :: PDELY 
(   78) INTEGER(KIND=JPIM),INTENT(IN)    :: KBEG 
(   79) INTEGER(KIND=JPIM),INTENT(IN)    :: KEND 
(   80) INTEGER(KIND=JPIM),INTENT(IN)    :: KULOUT 
(   81) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGX(KPROF) 
(   82) REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGY(KPROF) 
(   83) # 84 "eggdir.F90"
(   84) !-------------------------------------------------------------------
(   85) # 86 "eggdir.F90"
(   86) INTEGER(KIND=JPIM) :: JJ
(   87) # 88 "eggdir.F90"
(   88) LOGICAL :: LLGWH
(   89) # 90 "eggdir.F90"
(   90) REAL(KIND=JPRB) :: Z2PI, Z2PIPK, ZCOBETA, ZCOS, ZCOSO, ZGAM,&
(   91)  & ZLAT, ZLIMIT, ZLON, ZPIS2, ZPIS4, ZRC, ZRR, &
(   92)  & ZSECAN, ZSECUR, ZSIBETA, ZSIN, ZSINO, ZXE, &
(   93)  & ZXP, ZYE, ZYP  
(   94) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   95) # 96 "eggdir.F90"
(   96) !-------------------------------------------------------------------
(   97) # 98 "eggdir.F90"
(   98) # 1 ".D[61]/abor1.intfb.h"
(    1) INTERFACE
(    2) # 3 ".D[61]/abor1.intfb.h"
(    3) SUBROUTINE ABOR1(CDTEXT)
(    4) CHARACTER(LEN=*), INTENT(IN) :: CDTEXT
(    5) END SUBROUTINE ABOR1
(    6) # 7 ".D[61]/abor1.intfb.h"
(    7) SUBROUTINE ABOR1FL(CDFILE, KLINENUM, CDTEXT)
(    8) USE PARKIND1  ,ONLY : JPIM
(    9) CHARACTER(LEN=*), INTENT(IN) :: CDFILE,CDTEXT
(   10) INTEGER(KIND=JPIM), INTENT(IN) :: KLINENUM
(   11) END SUBROUTINE ABOR1FL
(   12) # 13 ".D[61]/abor1.intfb.h"
(   13) SUBROUTINE ABOR1_EXCEPTION_HANDLER()
(   14) END SUBROUTINE ABOR1_EXCEPTION_HANDLER
(   15) # 16 ".D[61]/abor1.intfb.h"
(   16) END INTERFACE
(   17) # 99 "eggdir.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 9

(   99) # 100 "eggdir.F90"
(  100) !-------------------------------------------------------------------
(  101) IF (LHOOK) CALL DR_HOOK('EGGDIR',0,ZHOOK_HANDLE)
(  102) !-------------------------------------------------------------------
(  103) # 104 "eggdir.F90"
(  104) ZRC=0.0_JPRB
(  105) # 106 "eggdir.F90"
(  106) IF ( NYMGGI /= 10 ) THEN
(  107)   WRITE (KULOUT,*) '*** EGGDIR *** UNINITIALISED MODULE '
(  108)   CALL ABOR1(' EGGDIR: NYMGGI /= 10 ')
(  109) ENDIF
(  110) # 111 "eggdir.F90"
(  111) IF ( HSUD < 0.0_JPRB ) THEN
(  112)   DO JJ = KBEG, KEND
(  113)     PGY(JJ) = ABS( PGY(JJ) )
(  114)   ENDDO
(  115) ENDIF
(  116) # 117 "eggdir.F90"
(  117) !     INITIALISE ROTATION ANGLE AND OTHER CONSTANTS
(  118) !     ---------------------------------------------
(  119) ZPIS2 = PRPI*0.5_JPRB
(  120) ZPIS4 = PRPI*0.25_JPRB
(  121) ZSECUR = 1.E-12_JPRB
(  122) ZSECAN = 1.E-05_JPRB
(  123) LLGWH = .FALSE.
(  124) IF ( NYMGGWH == 1 ) LLGWH = .TRUE.
(  125) !     CHECK LONGITUDES
(  126) DO JJ = KBEG, KEND
(  127)   IF ( PGX(JJ) < 0.0_JPRB ) THEN
(  128)     PGX(JJ) = PGX(JJ) + 2.0_JPRB*PRPI
(  129)   ENDIF
(  130) ENDDO
(  131) # 132 "eggdir.F90"
(  132) !*
(  133) !----------------------------------------------------------------------
(  134) !     1.- DIRECT ROTATION
(  135) !     --------------------
(  136) IF ( NYMGGR /= 0 ) THEN
(  137)   DO JJ = KBEG, KEND
(  138)     ZSIN = COS( XLATR )*SIN( PGY(JJ) ) -&
(  139)      & SIN( XLATR )*COS( PGY(JJ) )*COS( PGX(JJ)-XLONR )  
(  140)     ZLAT = ASIN( ZSIN )
(  141)     IF ( ABS(ZLAT) >= ZPIS2 ) THEN
(  142)       ZLON = 0.0_JPRB
(  143)     ELSE
(  144)       ZCOS = COS( ZLAT )
(  145)       ZCOSO = ( SIN( XLATR )*SIN( PGY(JJ) ) +&
(  146)        & COS( XLATR )*COS( PGY(JJ) )*COS( PGX(JJ)-XLONR ) )/ZCOS  
(  147)       ZCOSO = MIN(1.0_JPRB,MAX(-1.0_JPRB,ZCOSO))
(  148)       ZSINO = ( COS( PGY(JJ) )*SIN( PGX(JJ)-XLONR ) )/ZCOS
(  149)       ZSINO = MIN(1.0_JPRB,MAX(-1.0_JPRB,ZSINO))
(  150)       ZLON = ACOS( ZCOSO )
(  151)       IF ( ASIN( ZSINO ) < 0.0_JPRB ) ZLON = 2.0_JPRB*PRPI - ZLON
(  152)     ENDIF
(  153)     PGX(JJ) = ZLON
(  154)     PGY(JJ) = ZLAT
(  155)   ENDDO
(  156) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 10

(  157) # 158 "eggdir.F90"
(  158) !     CORRECTION OF POSITION IF DOMAIN ASTRIDE GREENWICH
(  159) !     --------------------------------------------------
(  160) IF ( LLGWH ) THEN
(  161)   DO JJ = KBEG, KEND
(  162)     ZLIMIT=0.5_JPRB*(XLON2R+XLON1R-ZPIS2)
(  163)     IF ( PGX(JJ) < XLON1R .AND. PGX(JJ) < ZLIMIT )&
(  164)      & PGX(JJ) = PGX(JJ) + 2.0_JPRB*PRPI  
(  165)   ENDDO
(  166) ENDIF
(  167) # 168 "eggdir.F90"
(  168) !     FINAL RESULT IN THE ABSENCE OF PROJECTION
(  169) !     -----------------------------------------
(  170) IF ( XGGPK < 0.0_JPRB ) THEN
(  171)   DO JJ = KBEG, KEND
(  172)     PGX(JJ) = PGX(JJ) - XLON1U
(  173)     PGY(JJ) = PGY(JJ) - XLAT1R
(  174)   ENDDO
(  175) ENDIF
(  176) # 177 "eggdir.F90"
(  177) !*
(  178) !------------------------------------------------------------------
(  179) !     2.- DIRECT STEREO-LAMBERT PROJECTION
(  180) !     ------------------------------------
(  181) IF ( XGGPK > 0.0_JPRB ) THEN
(  182)   IF ( XGGPK < 1.0_JPRB ) THEN
(  183)     ZRC = PRA*( COS( XLAT0R )**(1.0_JPRB-XGGPK) )*&
(  184)      & ( (1.0_JPRB+SIN( XLAT0R ))**XGGPK )/XGGPK  
(  185)     Z2PI = 2.0_JPRB*PRPI
(  186)     Z2PIPK = 2.0_JPRB*PRPI*XGGPK
(  187)     DO JJ = KBEG, KEND
(  188)       IF ( (PGX(JJ)-XLON0U)  >  Z2PIPK ) THEN
(  189)         PGX(JJ) = PGX(JJ) - Z2PI
(  190)       ENDIF
(  191)     ENDDO
(  192)   ELSEIF ( XGGPK == 1.0_JPRB ) THEN
(  193)     ZRC = PRA*( 1.0_JPRB + SIN( XLAT0R ) )
(  194)   ELSE
(  195)     WRITE (KULOUT,*) ' *** EGGDIR *** UNKNOWN PROJECTION '
(  196)   ENDIF
(  197)   ZXP = XIPORE*PDELX
(  198)   ZYP = XJPORE*PDELY
(  199) # 200 "eggdir.F90"
(  200)   DO JJ = KBEG, KEND
(  201)     ZRR = ZRC*( COS(PGY(JJ)) /&
(  202)      & ( 1.0_JPRB+ SQRT(1.0_JPRB-COS(PGY(JJ))**2 ))  )**XGGPK      
(  203)     ZGAM = XGGPK*( PGX(JJ)-XLON0U ) - XBETA
(  204)     PGX(JJ) = ZXP + ZRR*SIN( ZGAM )
(  205)     PGY(JJ) = ZYP - HSUD*ZRR*COS( ZGAM )
(  206)   ENDDO
(  207) ENDIF
(  208) # 209 "eggdir.F90"
(  209) !*
(  210) !----------------------------------------------------------------------
(  211) !     3.- DIRECT MERCATOR PROJECTION
(  212) !     ------------------------------
(  213) IF ( XGGPK == 0.0_JPRB ) THEN
(  214)   ZRC = PRA*COS( XLAT0R )






NVFORTRAN (Version     23.1)          02/24/2023  13:39:28      page 11

(  215)   ZXE = XIPORE*PDELX
(  216)   ZYE = XJPORE*PDELY
(  217)   ZSIBETA = SIN( XBETA )
(  218)   ZCOBETA = COS( XBETA )
(  219)   DO JJ = KBEG, KEND
(  220)     ZXP = ZXE + ZRC*( PGX(JJ)-XLON0U )
(  221)     ZYP = ZYE - ZRC*LOG( TAN(ZPIS4 - 0.5_JPRB*PGY(JJ)) )
(  222)     PGX(JJ) = ZXP*ZCOBETA + ZYP*ZSIBETA
(  223)     PGY(JJ) = -ZXP*ZSIBETA + ZYP*ZCOBETA
(  224)   ENDDO
(  225) ENDIF
(  226) # 227 "eggdir.F90"
(  227) !-------------------------------------------------------------------
(  228) IF (LHOOK) CALL DR_HOOK('EGGDIR',1,ZHOOK_HANDLE)
(  229) END SUBROUTINE EGGDIR
