


NVFORTRAN (Version     23.1)          02/24/2023  13:33:54      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:33:54      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: ec_rank_reorder.F90

(    1) SUBROUTINE EC_RANK_REORDER(KCOMM, KNEWCOMM)
(    2) USE PARKIND1 ,ONLY : JPIM
(    3) USE MPL_MPIF ,ONLY : MPI_INTEGER4, MPI_COMM_WORLD
(    4) 
(    5) IMPLICIT NONE
(    6) 
(    7) INTEGER(KIND=JPIM), INTENT(IN)  :: KCOMM
(    8) INTEGER(KIND=JPIM), INTENT(OUT) :: KNEWCOMM
(    9) INTEGER(KIND=JPIM) :: INEWCOMM, IME, INPES, IRET, ISTAT, IGRP, IGRPWORLD, JROC, INPES_WORLD
(   10) CHARACTER(LEN=512) :: CL_RANK_REORDER_FILE
(   11) INTEGER(KIND=JPIM), ALLOCATABLE :: IRANK(:)
(   12) 
(   13) CALL MPI_COMM_RANK(KCOMM,IME,IRET)
(   14) 
(   15) IF (IME == 0) THEN ! Only the master task reads
(   16)    CALL EC_GETENV('EC_RANK_REORDER',CL_RANK_REORDER_FILE) ! check if the file is specified via env. variable "EC_RANK_REORDE
(   17)    IF (CL_RANK_REORDER_FILE == ' ') THEN ! no; then check the file "EC_RANK_REORDER" itself in the current directory
(   18)       CL_RANK_REORDER_FILE = 'EC_RANK_REORDER'
(   19)    ENDIF
(   20)    OPEN(111,FILE=trim(CL_RANK_REORDER_FILE),IOSTAT=ISTAT,ACTION='READ',FORM='FORMATTED')
(   21)    IF (ISTAT == 0) THEN ! The file exists & can be accessible
(   22)       CALL MPI_COMM_SIZE(KCOMM, INPES, IRET)
(   23)       ALLOCATE(IRANK(0:INPES-1))
(   24)       READ(111,*,IOSTAT=ISTAT) IRANK ! reordered ranks
(   25)       CLOSE(111)
(   26)       IF (ISTAT == 0) THEN
(   27) 1000     format(1x,a,:,i0,a,i0,a,i0)
(   28)          WRITE(*,1000) 'EC_RANK_REORDER: FILE='//trim(CL_RANK_REORDER_FILE)
(   29)          WRITE(*,1000) 'EC_RANK_REORDER: COMM=',KCOMM,' : NPROCS=',INPES
(   30)          CALL MPI_COMM_SIZE(MPI_COMM_WORLD, INPES_WORLD, IRET)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:54      page 3

(   31)          WRITE(*,1000) 'EC_RANK_REORDER: MPI_COMM_WORLD=',MPI_COMM_WORLD,' : NPROCS=',INPES_WORLD
(   32)          DO JROC=0,INPES-1
(   33)             WRITE(*,1000) 'EC_RANK_REORDER: IRANK(',JROC,') => ',IRANK(JROC)
(   34)          ENDDO
(   35)       ELSE
(   36)          WRITE(0,*) 'EC_RANK_REORDER: Error in reading rank ids from file "'//trim(CL_RANK_REORDER_FILE)//'"'
(   37)          INPES = -1
(   38)       ENDIF
(   39)    ELSE
(   40)       INPES = 0
(   41)    ENDIF
(   42) ENDIF
(   43) 
(   44) CALL MPI_BCAST(INPES,1,MPI_INTEGER4,0,KCOMM,IRET)
(   45) 
(   46) IF (INPES > 0) THEN
(   47)    IF (IME > 0) ALLOCATE(IRANK(0:INPES-1))
(   48)    CALL MPI_BCAST(IRANK,INPES,MPI_INTEGER4,0,KCOMM,IRET)
(   49)    CALL MPI_COMM_GROUP(KCOMM,IGRPWORLD,IRET)
(   50)    CALL MPI_GROUP_INCL(IGRPWORLD,INPES,IRANK,IGRP,IRET)
(   51)    CALL MPI_COMM_CREATE(KCOMM,IGRP,KNEWCOMM,IRET)
(   52)    IF (IME == 0) THEN
(   53)       CALL MPI_COMM_SIZE(KNEWCOMM, INPES, IRET)
(   54)       WRITE(*,1000) 'EC_RANK_REORDER: NEWCOMM=',KNEWCOMM,' : NPROCS=',INPES
(   55)    ENDIF
(   56) ELSE IF (INPES == 0) THEN ! No need for rank reordering detected
(   57)    KNEWCOMM = KCOMM
(   58) ELSE ! Abort
(   59)    CALL MPI_ABORT(KCOMM,INPES,IRET)
(   60) ENDIF
(   61) 
(   62) IF (ALLOCATED(IRANK)) DEALLOCATE(IRANK)
(   63)  
(   64) END SUBROUTINE EC_RANK_REORDER






























NVFORTRAN (Version     23.1)          02/24/2023  13:33:54      page 4

(    1) # 1 "ec_rank_reorder.F90"
(    1) SUBROUTINE EC_RANK_REORDER(KCOMM, KNEWCOMM)
(    2) USE PARKIND1 ,ONLY : JPIM
(    3) USE MPL_MPIF ,ONLY : MPI_INTEGER4, MPI_COMM_WORLD
(    4) # 5 "ec_rank_reorder.F90"
(    5) IMPLICIT NONE
(    6) # 7 "ec_rank_reorder.F90"
(    7) INTEGER(KIND=JPIM), INTENT(IN)  :: KCOMM
(    8) INTEGER(KIND=JPIM), INTENT(OUT) :: KNEWCOMM
(    9) INTEGER(KIND=JPIM) :: INEWCOMM, IME, INPES, IRET, ISTAT, IGRP, IGRPWORLD, JROC, INPES_WORLD
(   10) CHARACTER(LEN=512) :: CL_RANK_REORDER_FILE
(   11) INTEGER(KIND=JPIM), ALLOCATABLE :: IRANK(:)
(   12) # 13 "ec_rank_reorder.F90"
(   13) CALL MPI_COMM_RANK(KCOMM,IME,IRET)
(   14) # 15 "ec_rank_reorder.F90"
(   15) IF (IME == 0) THEN ! Only the master task reads
(   16)    CALL EC_GETENV('EC_RANK_REORDER',CL_RANK_REORDER_FILE) ! check if the file is specified via env. variable "EC_RANK_REORDER"
(   17)    IF (CL_RANK_REORDER_FILE == ' ') THEN ! no; then check the file "EC_RANK_REORDER" itself in the current directory
(   18)       CL_RANK_REORDER_FILE = 'EC_RANK_REORDER'
(   19)    ENDIF
(   20)    OPEN(111,FILE=trim(CL_RANK_REORDER_FILE),IOSTAT=ISTAT,ACTION='READ',FORM='FORMATTED')
(   21)    IF (ISTAT == 0) THEN ! The file exists & can be accessible
(   22)       CALL MPI_COMM_SIZE(KCOMM, INPES, IRET)
(   23)       ALLOCATE(IRANK(0:INPES-1))
(   24)       READ(111,*,IOSTAT=ISTAT) IRANK ! reordered ranks
(   25)       CLOSE(111)
(   26)       IF (ISTAT == 0) THEN
(   27) 1000     format(1x,a,:,i0,a,i0,a,i0)
(   28)          WRITE(*,1000) 'EC_RANK_REORDER: FILE='//trim(CL_RANK_REORDER_FILE)
(   29)          WRITE(*,1000) 'EC_RANK_REORDER: COMM=',KCOMM,' : NPROCS=',INPES
(   30)          CALL MPI_COMM_SIZE(MPI_COMM_WORLD, INPES_WORLD, IRET)
(   31)          WRITE(*,1000) 'EC_RANK_REORDER: MPI_COMM_WORLD=',MPI_COMM_WORLD,' : NPROCS=',INPES_WORLD
(   32)          DO JROC=0,INPES-1
(   33)             WRITE(*,1000) 'EC_RANK_REORDER: IRANK(',JROC,') => ',IRANK(JROC)
(   34)          ENDDO
(   35)       ELSE
(   36)          WRITE(0,*) 'EC_RANK_REORDER: Error in reading rank ids from file "'//trim(CL_RANK_REORDER_FILE)//'"'
(   37)          INPES = -1
(   38)       ENDIF
(   39)    ELSE
(   40)       INPES = 0
(   41)    ENDIF
(   42) ENDIF
(   43) # 44 "ec_rank_reorder.F90"
(   44) CALL MPI_BCAST(INPES,1,MPI_INTEGER4,0,KCOMM,IRET)
(   45) # 46 "ec_rank_reorder.F90"
(   46) IF (INPES > 0) THEN
(   47)    IF (IME > 0) ALLOCATE(IRANK(0:INPES-1))
(   48)    CALL MPI_BCAST(IRANK,INPES,MPI_INTEGER4,0,KCOMM,IRET)
(   49)    CALL MPI_COMM_GROUP(KCOMM,IGRPWORLD,IRET)
(   50)    CALL MPI_GROUP_INCL(IGRPWORLD,INPES,IRANK,IGRP,IRET)
(   51)    CALL MPI_COMM_CREATE(KCOMM,IGRP,KNEWCOMM,IRET)
(   52)    IF (IME == 0) THEN
(   53)       CALL MPI_COMM_SIZE(KNEWCOMM, INPES, IRET)
(   54)       WRITE(*,1000) 'EC_RANK_REORDER: NEWCOMM=',KNEWCOMM,' : NPROCS=',INPES
(   55)    ENDIF
(   56) ELSE IF (INPES == 0) THEN ! No need for rank reordering detected
(   57)    KNEWCOMM = KCOMM






NVFORTRAN (Version     23.1)          02/24/2023  13:33:54      page 5

(   58) ELSE ! Abort
(   59)    CALL MPI_ABORT(KCOMM,INPES,IRET)
(   60) ENDIF
(   61) # 62 "ec_rank_reorder.F90"
(   62) IF (ALLOCATED(IRANK)) DEALLOCATE(IRANK)
(   63)  
(   64) END SUBROUTINE EC_RANK_REORDER
