


NVFORTRAN (Version     23.1)          02/24/2023  13:39:20      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:39:20      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: cma_flperr.F90

(    1) SUBROUTINE cma_flperr( &
(    2)  & io, onlyinv, maxdump, mode, &
(    3)  & name, filename, &
(    4)  & d, nd, &
(    5)  & flag, nf, &
(    6)  & woff,  &
(    7)  & inf, itiny, inan) 
(    8) 
(    9) USE PARKIND1  ,ONLY : JPIM     ,JPRD
(   10) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   11) 
(   12) #ifdef NAG
(   13) use f90_unix_io, only: flush
(   14) #endif
(   15) 
(   16) implicit none
(   17) INTEGER(KIND=JPIM), intent(in) :: io, nd, nf, onlyinv, maxdump
(   18) INTEGER(KIND=JPIM), intent(in) :: flag(nf)
(   19) REAL(KIND=JPRD),    intent(in) :: d(nd)
(   20) INTEGER(KIND=JPIM), intent(in) :: woff, inf, itiny, inan, mode
(   21) character(len=*), intent(in) :: name, filename
(   22) character(len=3) ::  star
(   23) character(len=20) ::  cmode
(   24) INTEGER(KIND=JPIM) :: j, jj, iflag
(   25) INTEGER(KIND=JPIM) :: itmp(3)
(   26) REAL(KIND=JPRD) :: ZHOOK_HANDLE
(   27) 
(   28) IF (LHOOK) CALL DR_HOOK('CMA_FLPERR',0,ZHOOK_HANDLE)
(   29) cmode = 'processing'
(   30) if (mode == 1) then






NVFORTRAN (Version     23.1)          02/24/2023  13:39:20      page 3

(   31)   cmode = 'reading'
(   32) else
(   33)   cmode = 'writing'
(   34) endif
(   35) 
(   36) write(io,'(1x,a)') &
(   37)  & 'CMA_FLPERR: Invalid floating point value(s)'// &
(   38)  & ' detected while '//trim(cmode) 
(   39) write(io,'(1x,a)')  &
(   40)  & '            file="'//trim(filename)//'" ;' 
(   41) write(io,'(1x,a)')  &
(   42)  & '            routine="'//trim(name)//'"' 
(   43) write(io,*)'Approximate word offset (unpacked) : ',woff
(   44) 
(   45) if (io /= 0) then
(   46)   write( 0,'(1x,a)') &
(   47)    & 'CMA_FLPERR: Invalid floating point value(s)'// &
(   48)    & ' detected while '//trim(cmode) 
(   49)   write( 0,'(1x,a)')  &
(   50)    & '            file="'//trim(filename)//'" ;' 
(   51)   write( 0,'(1x,a)')  &
(   52)    & '            routine="'//trim(name)//'"' 
(   53)   write( 0,*)'Approximate word offset (unpacked) : ',woff
(   54) endif
(   55) 
(   56) write(io,*)'There are ',inf,' infinite values (Inf)'
(   57) write(io,*)'          ',itiny,' too tiny numbers'
(   58) write(io,*)'          ',inan,' Not-a-Numbers (NaN)'
(   59) 
(   60) if (onlyinv > 0) then
(   61)   if (nf >= nd) then
(   62)     jj = 1
(   63)     j = 1
(   64)     do while (j <= nd .and. jj <= maxdump)
(   65)       if (flag(j) > 0) then
(   66)         write(star,'("<",i1,">")') flag(j)
(   67)         write(io,'(i4,1x,a3,2x,"0x",z16.16,2x,g20.12)') &
(   68)          & j,star,d(j),d(j) 
(   69)         jj = jj + 1
(   70)       endif
(   71)       j = j + 1
(   72)     enddo
(   73)   else
(   74)     jj = 1
(   75)     j = 1
(   76)     do while (j <= nd .and. jj <= maxdump)
(   77)       call cma_flpcheck(d(j),1,iflag,1, &
(   78)        & itmp(1),itmp(2),itmp(3)) 
(   79)       if (iflag > 0) then
(   80)         write(io,'(i4,6x,"0x",z16.16,2x,g20.12)') &
(   81)          & j,d(j),d(j) 
(   82)         jj = jj + 1
(   83)       endif
(   84)       j = j + 1
(   85)     enddo
(   86)   endif
(   87) else
(   88)   if (nf >= nd) then






NVFORTRAN (Version     23.1)          02/24/2023  13:39:20      page 4

(   89)     do j=1,maxdump
(   90)       star = ' '
(   91)       if (flag(j) > 0) write(star,'("<",i1,">")') flag(j)
(   92)       write(io,'(i4,1x,a3,2x,"0x",z16.16,2x,g20.12)') &
(   93)        & j,star,d(j),d(j) 
(   94)     enddo
(   95)   else
(   96)     do j=1,maxdump
(   97)       write(io,'(i4,6x,"0x",z16.16,2x,g20.12)') &
(   98)        & j,d(j),d(j) 
(   99)     enddo
(  100)   endif
(  101) endif
(  102) 
(  103) write(io,*)'CMA_FLPERR: End of dump.'
(  104) 
(  105) #if defined(VPP) || defined(FUJITSU) || defined(SGI) || defined(RS6K)
(  106) call errtra()
(  107) #endif
(  108) 
(  109) call flush(io)
(  110) IF (LHOOK) CALL DR_HOOK('CMA_FLPERR',1,ZHOOK_HANDLE)
(  111) END SUBROUTINE cma_flperr









































NVFORTRAN (Version     23.1)          02/24/2023  13:39:20      page 5

(    1) # 1 "cma_flperr.F90"
(    1) SUBROUTINE cma_flperr( &
(    2)  & io, onlyinv, maxdump, mode, &
(    3)  & name, filename, &
(    4)  & d, nd, &
(    5)  & flag, nf, &
(    6)  & woff,  &
(    7)  & inf, itiny, inan) 
(    8) # 9 "cma_flperr.F90"
(    9) USE PARKIND1  ,ONLY : JPIM     ,JPRD
(   10) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(   11) # 16 "cma_flperr.F90"
(   16) implicit none
(   17) INTEGER(KIND=JPIM), intent(in) :: io, nd, nf, onlyinv, maxdump
(   18) INTEGER(KIND=JPIM), intent(in) :: flag(nf)
(   19) REAL(KIND=JPRD),    intent(in) :: d(nd)
(   20) INTEGER(KIND=JPIM), intent(in) :: woff, inf, itiny, inan, mode
(   21) character(len=*), intent(in) :: name, filename
(   22) character(len=3) ::  star
(   23) character(len=20) ::  cmode
(   24) INTEGER(KIND=JPIM) :: j, jj, iflag
(   25) INTEGER(KIND=JPIM) :: itmp(3)
(   26) REAL(KIND=JPRD) :: ZHOOK_HANDLE
(   27) # 28 "cma_flperr.F90"
(   28) IF (LHOOK) CALL DR_HOOK('CMA_FLPERR',0,ZHOOK_HANDLE)
(   29) cmode = 'processing'
(   30) if (mode == 1) then
(   31)   cmode = 'reading'
(   32) else
(   33)   cmode = 'writing'
(   34) endif
(   35) # 36 "cma_flperr.F90"
(   36) write(io,'(1x,a)') &
(   37)  & 'CMA_FLPERR: Invalid floating point value(s)'// &
(   38)  & ' detected while '//trim(cmode) 
(   39) write(io,'(1x,a)')  &
(   40)  & '            file="'//trim(filename)//'" ;' 
(   41) write(io,'(1x,a)')  &
(   42)  & '            routine="'//trim(name)//'"' 
(   43) write(io,*)'Approximate word offset (unpacked) : ',woff
(   44) # 45 "cma_flperr.F90"
(   45) if (io /= 0) then
(   46)   write( 0,'(1x,a)') &
(   47)    & 'CMA_FLPERR: Invalid floating point value(s)'// &
(   48)    & ' detected while '//trim(cmode) 
(   49)   write( 0,'(1x,a)')  &
(   50)    & '            file="'//trim(filename)//'" ;' 
(   51)   write( 0,'(1x,a)')  &
(   52)    & '            routine="'//trim(name)//'"' 
(   53)   write( 0,*)'Approximate word offset (unpacked) : ',woff
(   54) endif
(   55) # 56 "cma_flperr.F90"
(   56) write(io,*)'There are ',inf,' infinite values (Inf)'
(   57) write(io,*)'          ',itiny,' too tiny numbers'
(   58) write(io,*)'          ',inan,' Not-a-Numbers (NaN)'
(   59) # 60 "cma_flperr.F90"
(   60) if (onlyinv > 0) then
(   61)   if (nf >= nd) then






NVFORTRAN (Version     23.1)          02/24/2023  13:39:20      page 6

(   62)     jj = 1
(   63)     j = 1
(   64)     do while (j <= nd .and. jj <= maxdump)
(   65)       if (flag(j) > 0) then
(   66)         write(star,'("<",i1,">")') flag(j)
(   67)         write(io,'(i4,1x,a3,2x,"0x",z16.16,2x,g20.12)') &
(   68)          & j,star,d(j),d(j) 
(   69)         jj = jj + 1
(   70)       endif
(   71)       j = j + 1
(   72)     enddo
(   73)   else
(   74)     jj = 1
(   75)     j = 1
(   76)     do while (j <= nd .and. jj <= maxdump)
(   77)       call cma_flpcheck(d(j),1,iflag,1, &
(   78)        & itmp(1),itmp(2),itmp(3)) 
(   79)       if (iflag > 0) then
(   80)         write(io,'(i4,6x,"0x",z16.16,2x,g20.12)') &
(   81)          & j,d(j),d(j) 
(   82)         jj = jj + 1
(   83)       endif
(   84)       j = j + 1
(   85)     enddo
(   86)   endif
(   87) else
(   88)   if (nf >= nd) then
(   89)     do j=1,maxdump
(   90)       star = ' '
(   91)       if (flag(j) > 0) write(star,'("<",i1,">")') flag(j)
(   92)       write(io,'(i4,1x,a3,2x,"0x",z16.16,2x,g20.12)') &
(   93)        & j,star,d(j),d(j) 
(   94)     enddo
(   95)   else
(   96)     do j=1,maxdump
(   97)       write(io,'(i4,6x,"0x",z16.16,2x,g20.12)') &
(   98)        & j,d(j),d(j) 
(   99)     enddo
(  100)   endif
(  101) endif
(  102) # 103 "cma_flperr.F90"
(  103) write(io,*)'CMA_FLPERR: End of dump.'
(  104) # 109 "cma_flperr.F90"
(  109) call flush(io)
(  110) IF (LHOOK) CALL DR_HOOK('CMA_FLPERR',1,ZHOOK_HANDLE)
(  111) END SUBROUTINE cma_flperr
