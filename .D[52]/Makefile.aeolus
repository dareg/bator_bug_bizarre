#----------------------------------------------------------------------------#
# makefile for the BUFR_file_handling  module for the ADM L2B processor      #
#                                                                            #
# Written by:  Jos de Kloe / David Tan / Michael Rohn                        #
# created:     22-Jun-2005                                                   #
#                                                                            #
# Modifications:                                                             #
# 12-Mar-2012 J. de Kloe  disable bufr_l2b*F90 code for now until we have    #
#                         an updated L2B BUFR template                       #
# 23-Mar-2012 J. de Kloe  move compilation of verify_bufr_interface.c into a #
#                         subdirectory called verify, to solve some config   #
#                         file include trouble at ecgate.                    #
# 05-Feb-2014 J. de Kloe  rename bufr_ to bufrdc_                            #
# 25-Feb-2014 J. de Kloe  add some flags to suppress warnings                #
# 20-Mar-2014 J. de Kloe  add thinlayer dependency and rename                #
#                         L2BC_bufr2ee to L2B_bufr2ee                        #
# 31-Mar-2014 J. de Kloe  remove obsolete files                              #
# 03-Aug-2015 J. de Kloe  check if verify dir exists before cleaning it      #
# 15-Jun-2017 J. de Kloe  disable compilation of L1B bufr converter          #
# 07-Aug-2017 J. de Kloe  add adm_bufr_descr_codes dependency to bufrwrapper #
# 14-May-2018 J. de Kloe  add L2B_bufr2ascii tool                            #
# 11-Mar-2019 J. de Kloe  little bug-fix in object dependencies for linking  #
#                         the L2B_bufr2ascii executable                      #
#                                                                            #
#----------------------------------------------------------------------------#

#-------------------------------------------#
# BUFR variables
include ../Systemsettings
BUFR_LIB=$(BUFR_INSTALL_DIR)/libbufr.a
#-------------------------------------------#

# General settings and compiler options
include  ../Makeoptions

# include a little file defining which support objects to use
include ../support/Objects.txt

# include a little file defining which DataStructures objects to use
include ../DataStructures/Objects.txt

# include the ee_cfi library in case we wish to use it
# this defines the LIBS_DIR and LIBS variables
include ../library_definition

# include a little file defining which xml objects to use
# this file defines the switch: XMLSETTING
# and the library switches: XML_LIBS_DIR and XML_LIBS
# and the needed objects: XML_OBJECTS
include ../xml_module/Objects.txt

# include a little file defining L1B file handling to use
include ../L1B_file_handling/Objects.txt

# include a little file defining L2BC file handling to use
include ../L2BC_file_handling/Objects.txt

# Definition of the objects for DirectBinaryIO module
include ../DirectBinaryIO/Objects.txt

# Definition of the objects for KVT_module
include ../KVT_module/Objects.txt

# Definition of the objects for ThinLayer module
include ../ThinLayer/Objects.txt

# include the dependency to the support and other modules 
# in the compiler options
MYF90FLAGS  = $(MODINCFLAG)$(DEP_SUPPORT) \
              $(MODINCFLAG)$(DEP_DATASTRUCTURES) \
              $(MODINCFLAG)$(DEP_XML) \
              $(MODINCFLAG)$(DEP_L2BC_FILE_HANDLING) \
              $(MODINCFLAG)$(DEP_KVT_MODULE) \
              $(MODINCFLAG)$(DEP_DIRECTBINARYIO) \
              $(MODINCFLAG)$(DEP_THINLAYER) \
              ${CPPDEF}$(XMLSETTING)
#              $(MODINCFLAG)$(DEP_L1B_FILE_HANDLING) \

MYLINKFLAGS = $(MYF90FLAGS)

# executables to be made by this script
# todo: renumber them
EXECUTABLE4 = TestBufrWrapper
EXECUTABLE5 = L2B_ee2bufr
EXECUTABLE6 = L2B_bufr2ascii

# objects needed by the executables
DEP_OBJECTS = $(OBJECTS_SUPPORT) \
              $(OBJECTS_DATASTRUCTURES) \
              $(OBJECTS_XML) \
              $(OBJECTS_L2BC_FILE_HANDLING) \
              $(OBJECTS_KVT_MODULE) \
              $(OBJECTS_DIRECTBINARYIO)
OBJECTS4    = bufrwrapper.o $(OBJECTS_SUPPORT) \
              $(OBJECTS_DIRECTBINARYIO) \
              adm_bufr_descr_codes.o \
              verify_bufr_interface.o
OBJECTS5    = bufrwrapper.o \
              adm_bufr_descr_codes.o \
              verify_bufr_interface.o \
              bufr_ee_code_tables.o \
              $(OBJECTS_THINLAYER) \
              $(DEP_OBJECTS)
OBJECTS6    = bufrwrapper.o \
              adm_bufr_descr_codes.o \
              bufr_ee_code_tables.o \
              verify_bufr_interface.o \
              $(DEP_OBJECTS)

# make all test programs when make is used without options
all: $(EXECUTABLE4) $(EXECUTABLE5) $(EXECUTABLE6)

# link the fourth executable
$(EXECUTABLE4): $(EXECUTABLE4).o $(OBJECTS4) $(BUFR_LIB)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE4) \
                $(EXECUTABLE4).o $(OBJECTS4) \
                $(LIBS_DIR) $(LIBS) -L$(BUFR_INSTALL_DIR) -lbufr

# link the fifth executable
$(EXECUTABLE5): $(EXECUTABLE5).o $(OBJECTS5) $(BUFR_LIB)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE5) \
                $(EXECUTABLE5).o $(OBJECTS5) \
                $(LIBS_DIR) $(LIBS) -L$(BUFR_INSTALL_DIR) -lbufr

# link the sixth executable
$(EXECUTABLE6): $(EXECUTABLE6).o $(OBJECTS6) $(BUFR_LIB)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE6) \
                $(EXECUTABLE6).o $(OBJECTS6) \
                $(LIBS_DIR) $(LIBS) -L$(BUFR_INSTALL_DIR) -lbufr

# make all needed object files
$(EXECUTABLE4).o: $(EXECUTABLE4).F90 $(OBJECTS4)

$(EXECUTABLE5).o: $(EXECUTABLE5).F90 $(OBJECTS5)

$(EXECUTABLE6).o: $(EXECUTABLE6).F90 $(OBJECTS6)

bufr_ee_code_tables.o: bufr_ee_code_tables.F90

bufrwrapper.o: bufrwrapper.F90 $(DEP_OBJECTS) verify_bufr_interface.o \
               adm_bufr_descr_codes.o

adm_bufr_descr_codes.o: adm_bufr_descr_codes.F90 $(OBJECTS_SUPPORT)

# Note:
# It seems necessary to build this c-subroutine one directory level up
# because it needs include files like these:
# ../config/config.$(ARCH)$(CNAME)$(R64)$(A64)
# ../options/options_$(ARCH)
# which in turn also include using relative paths, i.e. 
# ../config/fortran_underscore$(UNDERSCORE)
#
# The only other option seems to pollute our root directory with
# symlinks to these internal BUFR library config and options directories,
# which would be highly confusing to ourselves (so that seems not a good
# idea at all ...)
#
verify_bufr_interface.o: verify_bufr_interface.c $(BUFR_LIB)
	@-mkdir -p verify
	@-ln -fs ${BUFR_INSTALL_DIR}/bufrdc_${BUFR_VERSION}/config
	@-ln -fs ${BUFR_INSTALL_DIR}/bufrdc_${BUFR_VERSION}/options
	@-cd verify; ln -fs ../verify_bufr_interface.c
	@-cd verify; ln -fs ../Makefile.verify_bufr_interface
	@-cd verify; $(MAKE) -f Makefile.verify_bufr_interface
	@-ln -fs verify/verify_bufr_interface.o verify_bufr_interface.o

# make the modules holding the data structures, if needed
$(OBJECTS_DATASTRUCTURES):
	cd $(DEP_DATASTRUCTURES); $(MAKE) -f Makefile.aeolus

# make the support modules. if needed
$(OBJECTS_SUPPORT):
	cd $(DEP_SUPPORT); $(MAKE) -f Makefile.aeolus

$(OBJECTS_XML):
	cd $(DEP_XML); $(MAKE) -f Makefile.aeolus

$(OBJECTS_L2BC_FILE_HANDLING):
	cd $(DEP_L2BC_FILE_HANDLING); $(MAKE) -f Makefile.aeolus

$(OBJECTS_KVT_MODULE):
	cd $(DEP_KVT_MODULE); $(MAKE) -f Makefile.aeolus

$(OBJECTS_DIRECTBINARYIO):
	cd $(DEP_DIRECTBINARYIO); $(MAKE) -f Makefile.aeolus

$(OBJECTS_THINLAYER):
	cd $(DEP_THINLAYER); $(MAKE) -f Makefile.aeolus

# make the BUFR library. if needed
$(BUFR_LIB):
	cd $(BUFR_INSTALL_DIR); $(MAKE) -f Makefile.aeolus

#--------------------------------------------------------------------
# some code to clean up and build again
#--------------------------------------------------------------------
.PHONY : again
again:
	$(MAKE) -f Makefile.aeolus clean; $(MAKE) -f Makefile.aeolus

#--------------------------------------------------------------------
# some code to clean up 
#--------------------------------------------------------------------
.PHONY : clean
clean:
	@$(RM) $(RMFLAGS)  *.mod
	@$(RM) $(RMFLAGS)  *.o
	@$(RM) $(RMFLAGS)  *~
	@$(RM) $(RMFLAGS)  config options
	@$(RM) $(RMFLAGS)  verify/*
	@-if [ -e verify ] ; then ( rmdir verify; ); fi
	@$(RM) $(RMFLAGS) $(EXECUTABLE4) $(EXECUTABLE5) $(EXECUTABLE6)
#	cd $(BUFR_INSTALL_DIR); $(MAKE) -f Makefile.aeolus clean

#--------------------------------------------------------------------
# some extra test targets for convenience of the developer
# and to allow testing if only this BUFR code is compiled
# without all the other L2BP code
#--------------------------------------------------------------------

#--------------------------------------------------------------------
# execute all available BUFR tests
#--------------------------------------------------------------------
#test: ../Test/TestMakeoptions
#	cd ../Test/BUFR_file_handling; make -f Makefile.aeolus
#
#../Test/TestMakeoptions:
#	@-cd ../Test; ./Set_TestMakeoptions

#--------------------------------------------------------------------
# clean all available test directories
#--------------------------------------------------------------------
cleantest:
	@-cd ../Test/BUFR_file_handling; make -f Makefile.aeolus clean
