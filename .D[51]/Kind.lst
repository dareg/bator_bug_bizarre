


NVFORTRAN (Version     23.1)          02/24/2023  13:31:14      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:31:14      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: Kind.F90

(    1) program kind_test
(    2) 
(    3) !!NOT use parkind1
(    4) 
(    5) implicit none
(    6) 
(    7) !----------------------------------------------------------------------------
(    8) !-- The following are taken from ifsaux/module/parkind1.F90
(    9) 
(   10) !
(   11) !     Integer Kinds
(   12) !     -------------
(   13) !
(   14) 
(   15) INTEGER, PARAMETER :: JPIT = SELECTED_INT_KIND(2)
(   16) INTEGER, PARAMETER :: JPIS = SELECTED_INT_KIND(4)
(   17) INTEGER, PARAMETER :: JPIM = SELECTED_INT_KIND(9)
(   18) INTEGER, PARAMETER :: JPIB = SELECTED_INT_KIND(12)
(   19) 
(   20) !Special integer type to be used for sensitive address calculations
(   21) !should be *8 for a machine with 8 byte addressing for optimum performance
(   22) #ifdef ADDRESS64
(   23) INTEGER, PARAMETER :: JPIA = JPIB
(   24) #else
(   25) INTEGER, PARAMETER :: JPIA = JPIM
(   26) #endif
(   27) 
(   28) !
(   29) !     Real Kinds
(   30) !     ----------






NVFORTRAN (Version     23.1)          02/24/2023  13:31:14      page 3

(   31) !
(   32) 
(   33) INTEGER, PARAMETER :: JPRT = SELECTED_REAL_KIND(2,1)
(   34) INTEGER, PARAMETER :: JPRS = SELECTED_REAL_KIND(4,2)
(   35) INTEGER, PARAMETER :: JPRM = SELECTED_REAL_KIND(6,37)
(   36) INTEGER, PARAMETER :: JPRD = SELECTED_REAL_KIND(13,300)
(   37) 
(   38) !----------------------------------------------------------------------------
(   39) 
(   40) integer i
(   41) integer(kind=JPIT) i_JPIT
(   42) integer(kind=JPIS) i_JPIS
(   43) integer(kind=JPIM) i_JPIM
(   44) integer(kind=JPIB) i_JPIB
(   45) 
(   46) real r
(   47) real(kind=JPRT) r_JPRT
(   48) real(kind=JPRS) r_JPRS
(   49) real(kind=JPRM) r_JPRM
(   50) real(kind=JPRD) r_JPRD
(   51) double precision d
(   52) 
(   53) print 1001,'bit_size(i     )=',bit_size(i)     , bit_size(i)/8,' (the default INTEGER)'
(   54) print 1000,'bit_size(i_JPIT)=',bit_size(i_JPIT), bit_size(i_JPIT)/8, JPIT
(   55) print 1000,'bit_size(i_JPIS)=',bit_size(i_JPIS), bit_size(i_JPIS)/8, JPIS
(   56) print 1000,'bit_size(i_JPIM)=',bit_size(i_JPIM), bit_size(i_JPIM)/8, JPIM
(   57) print 1000,'bit_size(i_JPIB)=',bit_size(i_JPIB), bit_size(i_JPIB)/8, JPIB
(   58) print 1002,'eps/huge(r     )=',epsilon(r),huge(r),' (the default REAL)'
(   59) print 1003,'eps/huge(r_JPRT)=',epsilon(r_JPRT),huge(r_JPRT),JPRT
(   60) print 1003,'eps/huge(r_JPRS)=',epsilon(r_JPRS),huge(r_JPRS),JPRS
(   61) print 1003,'eps/huge(r_JPRM)=',epsilon(r_JPRM),huge(r_JPRM),JPRM
(   62) print 1003,'eps/huge(r_JPRD)=',epsilon(r_JPRD),huge(r_JPRD),JPRD
(   63) print 1002,'eps/huge(d     )=',epsilon(d),huge(d),' (the default DOUBLE PRECISION)'
(   64) 
(   65) 1000 format(a,3i5)
(   66) 1001 format(a,2i5,a)
(   67) 1002 format(a,2g30.20,a)
(   68) 1003 format(a,2g30.20,i5)
(   69) 
(   70) end program kind_test
























NVFORTRAN (Version     23.1)          02/24/2023  13:31:14      page 4

(    1) # 1 "Kind.F90"
(    1) program kind_test
(    2) # 3 "Kind.F90"
(    3) !!NOT use parkind1
(    4) # 5 "Kind.F90"
(    5) implicit none
(    6) # 7 "Kind.F90"
(    7) !----------------------------------------------------------------------------
(    8) !-- The following are taken from ifsaux/module/parkind1.F90
(    9) # 10 "Kind.F90"
(   10) !
(   11) !     Integer Kinds
(   12) !     -------------
(   13) !
(   14) # 15 "Kind.F90"
(   15) INTEGER, PARAMETER :: JPIT = SELECTED_INT_KIND(2)
(   16) INTEGER, PARAMETER :: JPIS = SELECTED_INT_KIND(4)
(   17) INTEGER, PARAMETER :: JPIM = SELECTED_INT_KIND(9)
(   18) INTEGER, PARAMETER :: JPIB = SELECTED_INT_KIND(12)
(   19) # 20 "Kind.F90"
(   20) !Special integer type to be used for sensitive address calculations
(   21) !should be *8 for a machine with 8 byte addressing for optimum performance
(   22) # 23 "Kind.F90"
(   23) INTEGER, PARAMETER :: JPIA = JPIB
(   24) # 28 "Kind.F90"
(   28) !
(   29) !     Real Kinds
(   30) !     ----------
(   31) !
(   32) # 33 "Kind.F90"
(   33) INTEGER, PARAMETER :: JPRT = SELECTED_REAL_KIND(2,1)
(   34) INTEGER, PARAMETER :: JPRS = SELECTED_REAL_KIND(4,2)
(   35) INTEGER, PARAMETER :: JPRM = SELECTED_REAL_KIND(6,37)
(   36) INTEGER, PARAMETER :: JPRD = SELECTED_REAL_KIND(13,300)
(   37) # 38 "Kind.F90"
(   38) !----------------------------------------------------------------------------
(   39) # 40 "Kind.F90"
(   40) integer i
(   41) integer(kind=JPIT) i_JPIT
(   42) integer(kind=JPIS) i_JPIS
(   43) integer(kind=JPIM) i_JPIM
(   44) integer(kind=JPIB) i_JPIB
(   45) # 46 "Kind.F90"
(   46) real r
(   47) real(kind=JPRT) r_JPRT
(   48) real(kind=JPRS) r_JPRS
(   49) real(kind=JPRM) r_JPRM
(   50) real(kind=JPRD) r_JPRD
(   51) double precision d
(   52) # 53 "Kind.F90"
(   53) print 1001,'bit_size(i     )=',bit_size(i)     , bit_size(i)/8,' (the default INTEGER)'
(   54) print 1000,'bit_size(i_JPIT)=',bit_size(i_JPIT), bit_size(i_JPIT)/8, JPIT
(   55) print 1000,'bit_size(i_JPIS)=',bit_size(i_JPIS), bit_size(i_JPIS)/8, JPIS
(   56) print 1000,'bit_size(i_JPIM)=',bit_size(i_JPIM), bit_size(i_JPIM)/8, JPIM
(   57) print 1000,'bit_size(i_JPIB)=',bit_size(i_JPIB), bit_size(i_JPIB)/8, JPIB
(   58) print 1002,'eps/huge(r     )=',epsilon(r),huge(r),' (the default REAL)'
(   59) print 1003,'eps/huge(r_JPRT)=',epsilon(r_JPRT),huge(r_JPRT),JPRT
(   60) print 1003,'eps/huge(r_JPRS)=',epsilon(r_JPRS),huge(r_JPRS),JPRS






NVFORTRAN (Version     23.1)          02/24/2023  13:31:14      page 5

(   61) print 1003,'eps/huge(r_JPRM)=',epsilon(r_JPRM),huge(r_JPRM),JPRM
(   62) print 1003,'eps/huge(r_JPRD)=',epsilon(r_JPRD),huge(r_JPRD),JPRD
(   63) print 1002,'eps/huge(d     )=',epsilon(d),huge(d),' (the default DOUBLE PRECISION)'
(   64) # 65 "Kind.F90"
(   65) 1000 format(a,3i5)
(   66) 1001 format(a,2i5,a)
(   67) 1002 format(a,2g30.20,a)
(   68) 1003 format(a,2g30.20,i5)
(   69) # 70 "Kind.F90"
(   70) end program kind_test
