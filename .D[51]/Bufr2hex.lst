


NVFORTRAN (Version     23.1)          02/24/2023  13:31:47      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:31:47      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: Bufr2hex.F90

(    1)       PROGRAM bufr2hex
(    2)       implicit none
(    3)       integer, allocatable ::  msg(:)
(    4)       real,    allocatable :: rmsg(:)
(    5)       integer n, io, rc, j
(    6)       integer numargs, iargc
(    7)       character(len=256) filename, arg
(    8) 
(    9)       numargs = iargc()
(   10)       if (numargs /= 2) then
(   11)          write(0,*)'Usage: bufr2hex bufrfile bufsize'
(   12)          call exit(1)
(   13)       endif
(   14) 
(   15)       CALL getarg(1, arg)
(   16)       filename = trim(adjustl(arg))
(   17) 
(   18)       CALL getarg(2, arg)
(   19)       read(arg,*) n
(   20) 
(   21)       allocate(msg(n), rmsg(n))
(   22)       msg(:) = 0
(   23) 
(   24)       call pbopen(io,trim(filename),'r',rc)
(   25)       call pbread2(io, msg, n * 4, rc)
(   26)       call pbclose(io, rc)
(   27) 
(   28) !--real
(   29)       rmsg(:) = msg(:)
(   30) 






NVFORTRAN (Version     23.1)          02/24/2023  13:31:47      page 3

(   31)       open(1,file=trim(filename)//'.hex',status='new')
(   32) !--real
(   33)       write(1,'((z8.8))') (int(rmsg(j)),j=1,n)
(   34) !     write(1,'((z8.8))') msg(:)
(   35)       close(1)
(   36) 
(   37)       deallocate(msg, rmsg)
(   38)       END PROGRAM bufr2hex
(   39) 
(   40) 
(   41) 
(   42) 




















































NVFORTRAN (Version     23.1)          02/24/2023  13:31:47      page 4

(    1) # 1 "Bufr2hex.F90"
(    1)       PROGRAM bufr2hex
(    2)       implicit none
(    3)       integer, allocatable ::  msg(:)
(    4)       real,    allocatable :: rmsg(:)
(    5)       integer n, io, rc, j
(    6)       integer numargs, iargc
(    7)       character(len=256) filename, arg
(    8) # 9 "Bufr2hex.F90"
(    9)       numargs = iargc()
(   10)       if (numargs /= 2) then
(   11)          write(0,*)'Usage: bufr2hex bufrfile bufsize'
(   12)          call exit(1)
(   13)       endif
(   14) # 15 "Bufr2hex.F90"
(   15)       CALL getarg(1, arg)
(   16)       filename = trim(adjustl(arg))
(   17) # 18 "Bufr2hex.F90"
(   18)       CALL getarg(2, arg)
(   19)       read(arg,*) n
(   20) # 21 "Bufr2hex.F90"
(   21)       allocate(msg(n), rmsg(n))
(   22)       msg(:) = 0
(   23) # 24 "Bufr2hex.F90"
(   24)       call pbopen(io,trim(filename),'r',rc)
(   25)       call pbread2(io, msg, n * 4, rc)
(   26)       call pbclose(io, rc)
(   27) # 28 "Bufr2hex.F90"
(   28) !--real
(   29)       rmsg(:) = msg(:)
(   30) # 31 "Bufr2hex.F90"
(   31)       open(1,file=trim(filename)//'.hex',status='new')
(   32) !--real
(   33)       write(1,'((z8.8))') (int(rmsg(j)),j=1,n)
(   34) !     write(1,'((z8.8))') msg(:)
(   35)       close(1)
(   36) # 37 "Bufr2hex.F90"
(   37)       deallocate(msg, rmsg)
(   38)       END PROGRAM bufr2hex
