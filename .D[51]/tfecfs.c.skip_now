#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef unsigned char boolean;

#define MIN(a,b) ( (a) < (b) ? (a) : (b) )
#define MAX(a,b) ( (a) > (b) ? (a) : (b) )

#define STRDUP  strdup
#define strequ(s1,s2)     (strcmp(s1,s2) == 0)

#define  ALLOC(x,size)    \
 { int bytes = sizeof(*x) * (size); \
   bytes = MAX(bytes, 1); \
   x = valloc(bytes); \
   if (!x) { perror("valloc()"); exit(1); }

#define FREE(x) { if ((x)) {free((x)); (x) = NULL;} }

main(int argc, char *argv[])
{
  char *prefix = NULL;
  char *file = NULL;
  char *p = getenv("TFECFS_PREFIX");
  char *cmd = NULL;
  int flen;
  boolean to_ecfs, from_ecfs, is_gzip;

  if (p) prefix = STRDUP(p);
  /* fprintf(stderr,"prefix='%s'\n",prefix ? prefix : "<not defined>"); */

  p = strrchr(argv[0],'/');
  p = p ? (p+1) : argv[0];
  to_ecfs = strequ(p,"to_ecfs");
  from_ecfs = strequ(p,"from_ecfs");

  if (!to_ecfs && !from_ecfs) {
    fprintf(stderr,"Usage:   to_ecfs filename\n");
    fprintf(stderr,"  or   from_ecfs filename\n");
    exit(1);
  }

  if (argc != 2) {
    fprintf(stderr,"Usage: %s filename\n",argv[0]);
    exit(1);
  }

  file = STRDUP(argv[1]);
  /* fprintf(stderr,"file='%s'\n",file); */
  flen = strlen(file);

  is_gzip = 0;
  if (flen >= 3) {
    if (file[flen-3] == '.' &&
	file[flen-2] == 'g' &&
	file[flen-1] == 'z') {
      is_gzip = 1;
    }
  }

  cmd = malloc(flen + 40);

  if (from_ecfs) {
    sprintf(cmd,"%s < %s",is_gzip ? "gunzip -c" : "cat", file);
  }
  else {
    sprintf(cmd,"%s > %s",is_gzip ? "gzip -c" : "cat", file);
  }

  fprintf(stderr,"%s: %s\n",argv[0],cmd);
  system(cmd);

  exit(0);
}
