


NVFORTRAN (Version     23.1)          02/24/2023  13:33:59      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:33:59      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: cptime.F90

(    1) !RJ: make interfaceable; generalization
(    2) SUBROUTINE CPTIME(PVCP,PTCP)
(    3) USE PARKIND1, ONLY : JPRD, JPIM
(    4) IMPLICIT NONE
(    5) REAL(KIND=JPRD) :: PVCP
(    6) REAL(KIND=JPRD) :: PTCP
(    7) !
(    8) #if defined (NEWTIMER)
(    9) ! this routine should work better with OpenMP
(   10) ! But doesn't work on Cray - and in any case does not return 
(   11) ! CPU time for all threads combined 
(   12) INTEGER(KIND=JPIM),SAVE :: IFIRST=1
(   13) INTEGER(KIND=JPIM),SAVE :: KFIRST,KTPS
(   14) INTEGER(KIND=JPIM) :: KTICK
(   15) !     Usage of Fortran95 intrinsic function system_clock for ELAPSED time,
(   16) !     thus taking into account the parallelism if inside an open-mp region. REK
(   17) IF(IFIRST.EQ.1) THEN
(   18)   IFIRST=0
(   19)   CALL SYSTEM_CLOCK(KFIRST,KTPS)
(   20)   PVCP=0.0_JPRD
(   21)   PTCP=PVCP
(   22) ELSE
(   23)   CALL SYSTEM_CLOCK(KTICK)
(   24)   PVCP=REAL(KTICK-KFIRST,KIND=JPRD)/REAL(KTPS,KIND=JPRD)
(   25)   PTCP=PVCP
(   26) ENDIF
(   27) #else
(   28) INTEGER(KIND=JPIM),SAVE :: IFIRST=0
(   29) REAL(KIND=JPRD),SAVE :: ZFIRST
(   30) REAL(KIND=JPRD) :: ZSEC






NVFORTRAN (Version     23.1)          02/24/2023  13:33:59      page 3

(   31) !     Usage of Fortran95 intrinsic function for CPU timing.
(   32) IF(IFIRST.EQ.0) THEN
(   33)   IFIRST=1
(   34)   CALL CPU_TIME(ZFIRST)
(   35)   PVCP=0.0_JPRD
(   36)   PTCP=PVCP
(   37) ELSE
(   38)   CALL CPU_TIME(ZSEC)
(   39)   PVCP=ZSEC-ZFIRST
(   40)   PTCP=PVCP
(   41) ENDIF
(   42) #endif
(   43) !
(   44) RETURN
(   45) END SUBROUTINE CPTIME

















































NVFORTRAN (Version     23.1)          02/24/2023  13:33:59      page 4

(    1) # 1 "cptime.F90"
(    1) !RJ: make interfaceable; generalization
(    2) SUBROUTINE CPTIME(PVCP,PTCP)
(    3) USE PARKIND1, ONLY : JPRD, JPIM
(    4) IMPLICIT NONE
(    5) REAL(KIND=JPRD) :: PVCP
(    6) REAL(KIND=JPRD) :: PTCP
(    7) !
(    8) # 28 "cptime.F90"
(   28) INTEGER(KIND=JPIM),SAVE :: IFIRST=0
(   29) REAL(KIND=JPRD),SAVE :: ZFIRST
(   30) REAL(KIND=JPRD) :: ZSEC
(   31) !     Usage of Fortran95 intrinsic function for CPU timing.
(   32) IF(IFIRST.EQ.0) THEN
(   33)   IFIRST=1
(   34)   CALL CPU_TIME(ZFIRST)
(   35)   PVCP=0.0_JPRD
(   36)   PTCP=PVCP
(   37) ELSE
(   38)   CALL CPU_TIME(ZSEC)
(   39)   PVCP=ZSEC-ZFIRST
(   40)   PTCP=PVCP
(   41) ENDIF
(   42) # 43 "cptime.F90"
(   43) !
(   44) RETURN
(   45) END SUBROUTINE CPTIME
