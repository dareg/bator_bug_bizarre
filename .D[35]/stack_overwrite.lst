


NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: stack_overwrite.F90

(    1) MODULE STACK_OVERWRITE 
(    2) !----------------------------------------------------------------------------------
(    3) ! This module allows you to check whether an application thread is writing into 
(    4) ! the stack of its neighbouring thread
(    5) !   To use
(    6) !     Set N= parthds value in XLSMPOPTS environment variable
(    7) !     Set NN= to that area of stack which should not be used
(    8) !       <---thread 1----------> <-----thread 2-------> <---...
(    9) !       !======|===============|========|==============|====...
(   10) !       <--NN-->                <--NN--> 
(   11) !       <---------N-----------> <---------N---------->
(   12) !     Add "CALL STACK_OWRITE_SET" in first routine
(   13) !     Add "CALL STACK_OWRITE_CHK" to any routines called after stack may have been corrupted
(   14) !     Add "USE STACK_OVERWRITE" to all modified routines
(   15) !   Compile this routine and all modified routines
(   16) !   Link and run
(   17) !     Get "STACK_OWRITE_CHK: nt,ii,zstk=" if stack overwriten
(   18) !----------------------------------------------------------------------------------
(   19)   USE PARKIND1 , ONLY : JPIM
(   20)   SAVE
(   21)   INTEGER*8 :: STACK_OWRITE_BEG(16)         ! Change if max threads > 16
(   22)   INTEGER(KIND=JPIM) N,NN
(   23)   PARAMETER(N=25*1000*1000,NN=5*1000*1000)
(   24) 
(   25)   CONTAINS
(   26)   SUBROUTINE STACK_OWRITE_SET
(   27)   IMPLICIT NONE
(   28)   INTEGER(KIND=JPIM) N,NN,NT,MT,IER
(   29)   INTEGER(KIND=JPIM) OMP_GET_THREAD_NUM,OMP_GET_MAX_THREADS
(   30)   PARAMETER(N=25*1000*1000)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 3

(   31)   PARAMETER(NN=5*1000*1000)
(   32)   INCLUDE "mpif.h"
(   33)   INTEGER(KIND=JPIM) ZSTK(N)
(   34)   INTEGER(KIND=JPIM) II,ZOFF,NNN
(   35)   INTEGER*8 ZTMP
(   36)   NT=OMP_GET_THREAD_NUM()
(   37)   MT=OMP_GET_MAX_THREADS()
(   38)   ZSTK(1:NN)=9999
(   39)   IF(NT>0) THEN
(   40)     ZTMP=LOC(ZSTK(1))
(   41)     STACK_OWRITE_BEG(NT)=ZTMP
(   42)     ZOFF=(STACK_OWRITE_BEG(NT)-ZTMP)/4
(   43) !   write(0,*) "STACK_OWRITE_SET: nt,stack_owrite_beg,loc(zstk(1)),zoff=",nt,stack_owrite_beg(nt),loc(zstk(1)),zoff
(   44) !   do ii=1,2
(   45) !     if(zstk(zoff+ii).ne.9999) then
(   46) !       write(0,*) "STACK_OWRITE_SET: nt,ii,zstk=",nt,ii,zstk(zoff+ii)
(   47) !     endif
(   48) !   enddo
(   49) !-----deliberate overwrite of neighbouring stack---------
(   50)     NNN=N+NN/2
(   51)     WRITE(0,*) "mt,nnn=",MT,NNN
(   52)     IF(NT<MT-1) ZSTK(NNN)=0
(   53) !-----------------------------------
(   54)   ENDIF
(   55)   CALL STACK_OWRITE_DUM(ZSTK)
(   56)   END SUBROUTINE STACK_OWRITE_SET
(   57) 
(   58)   SUBROUTINE STACK_OWRITE_CHK
(   59)   IMPLICIT NONE
(   60)   INTEGER(KIND=JPIM) OMP_GET_THREAD_NUM
(   61)   INTEGER(KIND=JPIM) N,NN,NT,II
(   62)   INTEGER(KIND=JPIM) ZOFF
(   63)   PARAMETER(N=25*1000*1000)
(   64)   PARAMETER(NN=5*1000*1000)
(   65)   INTEGER(KIND=JPIM) ZSTK(N)
(   66)   INTEGER*8 ZTMP
(   67)   NT=OMP_GET_THREAD_NUM()
(   68)   IF(NT>0) THEN
(   69)     ZTMP=LOC(ZSTK(1))
(   70)     ZOFF=(STACK_OWRITE_BEG(NT)-ZTMP)/4
(   71) !   write(0,*) "STACK_OWRITE_CHK: nt,owrite_beg,loc(zstk(1)),zoff=",nt,stack_owrite_beg(nt),loc(zstk(1)),zoff
(   72) !   write(0,*) "STACK_OWRITE_CHK: nt,1,zstk=",nt,1,zstk(zoff+1)
(   73)     DO II=1,NN
(   74)       IF(ZSTK(ZOFF+II).NE.9999) THEN
(   75)         WRITE(0,*) "STACK_OWRITE_CHK: nt,ii,zstk=",NT,II,ZSTK(ZOFF+II)
(   76)       ENDIF
(   77)     ENDDO
(   78) !   write(0,*) "STACK_OWRITE_CHK: nt,NN,zstk=",nt,NN,zstk(zoff+NN)
(   79)   ENDIF
(   80)   END SUBROUTINE STACK_OWRITE_CHK
(   81)   
(   82)   SUBROUTINE STACK_OWRITE_DUM(IDUM)
(   83)   INTEGER(KIND=JPIM) IDUM(N)
(   84)   END SUBROUTINE STACK_OWRITE_DUM
(   85) 
(   86) END MODULE STACK_OVERWRITE








NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 4

(    1) # 1 "stack_overwrite.F90"
(    1) MODULE STACK_OVERWRITE 
(    2) !----------------------------------------------------------------------------------
(    3) ! This module allows you to check whether an application thread is writing into 
(    4) ! the stack of its neighbouring thread
(    5) !   To use
(    6) !     Set N= parthds value in XLSMPOPTS environment variable
(    7) !     Set NN= to that area of stack which should not be used
(    8) !       <---thread 1----------> <-----thread 2-------> <---...
(    9) !       !======|===============|========|==============|====...
(   10) !       <--NN-->                <--NN--> 
(   11) !       <---------N-----------> <---------N---------->
(   12) !     Add "CALL STACK_OWRITE_SET" in first routine
(   13) !     Add "CALL STACK_OWRITE_CHK" to any routines called after stack may have been corrupted
(   14) !     Add "USE STACK_OVERWRITE" to all modified routines
(   15) !   Compile this routine and all modified routines
(   16) !   Link and run
(   17) !     Get "STACK_OWRITE_CHK: nt,ii,zstk=" if stack overwriten
(   18) !----------------------------------------------------------------------------------
(   19)   USE PARKIND1 , ONLY : JPIM
(   20)   SAVE
(   21)   INTEGER*8 :: STACK_OWRITE_BEG(16)         ! Change if max threads > 16
(   22)   INTEGER(KIND=JPIM) N,NN
(   23)   PARAMETER(N=25*1000*1000,NN=5*1000*1000)
(   24) # 25 "stack_overwrite.F90"
(   25)   CONTAINS
(   26)   SUBROUTINE STACK_OWRITE_SET
(   27)   IMPLICIT NONE
(   28)   INTEGER(KIND=JPIM) N,NN,NT,MT,IER
(   29)   INTEGER(KIND=JPIM) OMP_GET_THREAD_NUM,OMP_GET_MAX_THREADS
(   30)   PARAMETER(N=25*1000*1000)
(   31)   PARAMETER(NN=5*1000*1000)
(   32)   INCLUDE "mpif.h"
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif.h
(    1)*! -*- fortran -*-
(    2)*!
(    3)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    4)*!                         University Research and Technology
(    5)*!                         Corporation.  All rights reserved.
(    6)*! Copyright (c) 2004-2005 The University of Tennessee and The University
(    7)*!                         of Tennessee Research Foundation.  All rights
(    8)*!                         reserved.
(    9)*! Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
(   10)*!                         University of Stuttgart.  All rights reserved.
(   11)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   12)*!                         All rights reserved.
(   13)*! Copyright (c) 2006-2014 Cisco Systems, Inc.  All rights reserved.
(   14)*! Copyright (c) 2017      Research Organization for Information Science
(   15)*!                         and Technology (RIST). All rights reserved.
(   16)*! $COPYRIGHT$
(   17)*!
(   18)*! Additional copyrights may follow
(   19)*!
(   20)*! $HEADER$
(   21)*!
(   22)*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
(   23)*! WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
(   24)*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 5

(   25)*!
(   26)*! Do ***not*** copy this file to the directory where your Fortran
(   27)*! fortran application is compiled unless it is absolutely necessary!  Most
(   28)*! modern Fortran compilers now support the -I command line flag, which
(   29)*! tells the compiler where to find .h files (specifically, this one).  For
(   30)*! example:
(   31)*!
(   32)*!      shell$ mpifort foo.f -o foo -I$OMPI_HOME/include
(   33)*!
(   34)*! will probably do the trick (assuming that you have set OMPI_HOME
(   35)*! properly).
(   36)*!
(   37)*! That being said, OMPI's "mpifort" wrapper compiler should
(   38)*! automatically include the -I option for you.  The following command
(   39)*! should be equivalent to the command listed above:
(   40)*!
(   41)*!      shell$ mpifort foo.f -o foo
(   42)*!
(   43)*! You should not copy this file to your local directory because it is
(   44)*! possible that this file will be changed between versions of Open MPI.
(   45)*! Indeed, this mpif.h is incompatible with the mpif.f of other
(   46)*! implementations of MPI.  Using this mpif.h with other implementations
(   47)*! of MPI, or with other versions of Open MPI will result in undefined
(   48)*! behavior (to include incorrect results, segmentation faults,
(   49)*! unexplainable "hanging" in your application, etc.).  Always use the
(   50)*! -I command line option instead (or let mpifort do it for you).
(   51)*!
(   52)*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
(   53)*! WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
(   54)*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
(   55)*
(   56)*      include 'mpif-config.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-config.h
(    1)*! -*- fortran -*-
(    2)*!
(    3)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    4)*!                         University Research and Technology
(    5)*!                         Corporation.  All rights reserved.
(    6)*! Copyright (c) 2004-2005 The University of Tennessee and The University
(    7)*!                         of Tennessee Research Foundation.  All rights
(    8)*!                         reserved.
(    9)*! Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
(   10)*!                         University of Stuttgart.  All rights reserved.
(   11)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   12)*!                         All rights reserved.
(   13)*! Copyright (c) 2006-2017 Cisco Systems, Inc.  All rights reserved
(   14)*! Copyright (c) 2013      Los Alamos National Security, LLC. All rights
(   15)*!                         reserved.
(   16)*! $COPYRIGHT$
(   17)*!
(   18)*! Additional copyrights may follow
(   19)*!
(   20)*! $HEADER$
(   21)*!
(   22)*
(   23)*!
(   24)*!     This file contains the output from configure that is relevant for
(   25)*!     Fortran applications and a few values that are necessary to






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 6

(   26)*!     compile the Fortran modules (e.g., MPI_STATUS_SIZE).
(   27)*!
(   28)*
(   29)*!
(   30)*!     OMPI version
(   31)*!     This file is generated from configure; do not edit it manually.
(   32)*!
(   33)*      integer OMPI_MAJOR_VERSION, OMPI_MINOR_VERSION
(   34)*      integer OMPI_RELEASE_VERSION
(   35)*      parameter (OMPI_MAJOR_VERSION=3)
(   36)*      parameter (OMPI_MINOR_VERSION=1)
(   37)*      parameter (OMPI_RELEASE_VERSION=5)
(   38)*!
(   39)*!     Kind parameters
(   40)*!
(   41)*      integer MPI_OFFSET_KIND, MPI_ADDRESS_KIND, MPI_INTEGER_KIND
(   42)*      integer MPI_COUNT_KIND
(   43)*      parameter (MPI_INTEGER_KIND=4)
(   44)*      parameter (MPI_ADDRESS_KIND=8)
(   45)*      parameter (MPI_OFFSET_KIND=8)
(   46)*      parameter (MPI_COUNT_KIND=8)
(   47)*!
(   48)*!     Miscellaneous constants
(   49)*!
(   50)*      integer MPI_STATUS_SIZE
(   51)*      parameter (MPI_STATUS_SIZE=6)
(   52)*!
(   53)*!     Configurable length constants
(   54)*!
(   55)*      integer MPI_MAX_PROCESSOR_NAME
(   56)*      integer MPI_MAX_ERROR_STRING
(   57)*      integer MPI_MAX_OBJECT_NAME
(   58)*      integer MPI_MAX_LIBRARY_VERSION_STRING
(   59)*      integer MPI_MAX_INFO_KEY
(   60)*      integer MPI_MAX_INFO_VAL
(   61)*      integer MPI_MAX_PORT_NAME
(   62)*      integer MPI_MAX_DATAREP_STRING
(   63)*      parameter (MPI_MAX_PROCESSOR_NAME=256-1)
(   64)*      parameter (MPI_MAX_ERROR_STRING=256-1)
(   65)*      parameter (MPI_MAX_OBJECT_NAME=64-1)
(   66)*      parameter (MPI_MAX_LIBRARY_VERSION_STRING=256-1)
(   67)*      parameter (MPI_MAX_INFO_KEY=36-1)
(   68)*      parameter (MPI_MAX_INFO_VAL=256-1)
(   69)*      parameter (MPI_MAX_PORT_NAME=1024-1)
(   70)*      parameter (MPI_MAX_DATAREP_STRING=128-1)
(   71)*
(   72)*!
(   73)*! MPI F08 conformance
(   74)*!
(   75)*      logical MPI_SUBARRAYS_SUPPORTED
(   76)*      logical MPI_ASYNC_PROTECTS_NONBLOCKING
(   77)*      ! Hard-coded for .false. for now
(   78)*      parameter (MPI_SUBARRAYS_SUPPORTED= .false.)
(   79)*      ! Hard-coded for .false. for now
(   80)*      parameter (MPI_ASYNC_PROTECTS_NONBLOCKING = .false.)
(   81)*
(   57)*      include 'mpif-constants.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-constants.h






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 7

(    1)*! -*- fortran -*-
(    2)*! WARNING! THIS IS A GENERATED FILE!!
(    3)*! ANY EDITS YOU PUT HERE WILL BE LOST!
(    4)*! ==> Instead, edit topdir/ompi/include/mpif-values.pl.
(    5)*
(    6)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    7)*!                         University Research and Technology
(    8)*!                         Corporation.  All rights reserved.
(    9)*! Copyright (c) 2004-2010 The University of Tennessee and The University
(   10)*!                         of Tennessee Research Foundation.  All rights
(   11)*!                         reserved.
(   12)*! Copyright (c) 2004-2007 High Performance Computing Center Stuttgart,
(   13)*!                         University of Stuttgart.  All rights reserved.
(   14)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   15)*!                         All rights reserved.
(   16)*! Copyright (c) 2006-2012 Cisco Systems, Inc.  All rights reserved.
(   17)*! Copyright (c) 2009      Oak Ridge National Labs.  All rights reserved.
(   18)*! Copyright (c) 2016      Research Organization for Information Science
(   19)*!                         and Technology (RIST). All rights reserved.
(   20)*! $COPYRIGHT$
(   21)*!
(   22)*! Additional copyrights may follow
(   23)*!
(   24)*! $HEADER$
(   25)*!
(   26)*
(   27)*        integer MPI_ANY_SOURCE
(   28)*        integer MPI_ANY_TAG
(   29)*        integer MPI_APPNUM
(   30)*        integer MPI_BSEND_OVERHEAD
(   31)*        integer MPI_CART
(   32)*        integer MPI_COMBINER_CONTIGUOUS
(   33)*        integer MPI_COMBINER_DARRAY
(   34)*        integer MPI_COMBINER_DUP
(   35)*        integer MPI_COMBINER_F90_COMPLEX
(   36)*        integer MPI_COMBINER_F90_INTEGER
(   37)*        integer MPI_COMBINER_F90_REAL
(   38)*        integer MPI_COMBINER_HINDEXED
(   39)*        integer MPI_COMBINER_HINDEXED_BLOCK
(   40)*        integer MPI_COMBINER_HINDEXED_INTEGER
(   41)*        integer MPI_COMBINER_HVECTOR
(   42)*        integer MPI_COMBINER_HVECTOR_INTEGER
(   43)*        integer MPI_COMBINER_INDEXED
(   44)*        integer MPI_COMBINER_INDEXED_BLOCK
(   45)*        integer MPI_COMBINER_NAMED
(   46)*        integer MPI_COMBINER_RESIZED
(   47)*        integer MPI_COMBINER_STRUCT
(   48)*        integer MPI_COMBINER_STRUCT_INTEGER
(   49)*        integer MPI_COMBINER_SUBARRAY
(   50)*        integer MPI_COMBINER_VECTOR
(   51)*        integer MPI_COMM_TYPE_SHARED
(   52)*        integer MPI_CONGRUENT
(   53)*        integer MPI_DISTRIBUTE_BLOCK
(   54)*        integer MPI_DISTRIBUTE_CYCLIC
(   55)*        integer MPI_DISTRIBUTE_DFLT_DARG
(   56)*        integer MPI_DISTRIBUTE_NONE
(   57)*        integer MPI_DIST_GRAPH
(   58)*        integer MPI_ERROR






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 8

(   59)*        integer MPI_ERR_ACCESS
(   60)*        integer MPI_ERR_AMODE
(   61)*        integer MPI_ERR_ARG
(   62)*        integer MPI_ERR_ASSERT
(   63)*        integer MPI_ERR_BAD_FILE
(   64)*        integer MPI_ERR_BASE
(   65)*        integer MPI_ERR_BUFFER
(   66)*        integer MPI_ERR_COMM
(   67)*        integer MPI_ERR_CONVERSION
(   68)*        integer MPI_ERR_COUNT
(   69)*        integer MPI_ERR_DIMS
(   70)*        integer MPI_ERR_DISP
(   71)*        integer MPI_ERR_DUP_DATAREP
(   72)*        integer MPI_ERR_FILE
(   73)*        integer MPI_ERR_FILE_EXISTS
(   74)*        integer MPI_ERR_FILE_IN_USE
(   75)*        integer MPI_ERR_GROUP
(   76)*        integer MPI_ERR_INFO
(   77)*        integer MPI_ERR_INFO_KEY
(   78)*        integer MPI_ERR_INFO_NOKEY
(   79)*        integer MPI_ERR_INFO_VALUE
(   80)*        integer MPI_ERR_INTERN
(   81)*        integer MPI_ERR_IN_STATUS
(   82)*        integer MPI_ERR_IO
(   83)*        integer MPI_ERR_KEYVAL
(   84)*        integer MPI_ERR_LASTCODE
(   85)*        integer MPI_ERR_LOCKTYPE
(   86)*        integer MPI_ERR_NAME
(   87)*        integer MPI_ERR_NOT_SAME
(   88)*        integer MPI_ERR_NO_MEM
(   89)*        integer MPI_ERR_NO_SPACE
(   90)*        integer MPI_ERR_NO_SUCH_FILE
(   91)*        integer MPI_ERR_OP
(   92)*        integer MPI_ERR_OTHER
(   93)*        integer MPI_ERR_PENDING
(   94)*        integer MPI_ERR_PORT
(   95)*        integer MPI_ERR_QUOTA
(   96)*        integer MPI_ERR_RANK
(   97)*        integer MPI_ERR_READ_ONLY
(   98)*        integer MPI_ERR_REQUEST
(   99)*        integer MPI_ERR_RMA_ATTACH
(  100)*        integer MPI_ERR_RMA_CONFLICT
(  101)*        integer MPI_ERR_RMA_FLAVOR
(  102)*        integer MPI_ERR_RMA_RANGE
(  103)*        integer MPI_ERR_RMA_SHARED
(  104)*        integer MPI_ERR_RMA_SYNC
(  105)*        integer MPI_ERR_ROOT
(  106)*        integer MPI_ERR_SERVICE
(  107)*        integer MPI_ERR_SIZE
(  108)*        integer MPI_ERR_SPAWN
(  109)*        integer MPI_ERR_TAG
(  110)*        integer MPI_ERR_TOPOLOGY
(  111)*        integer MPI_ERR_TRUNCATE
(  112)*        integer MPI_ERR_TYPE
(  113)*        integer MPI_ERR_UNKNOWN
(  114)*        integer MPI_ERR_UNSUPPORTED_DATAREP
(  115)*        integer MPI_ERR_UNSUPPORTED_OPERATION
(  116)*        integer MPI_ERR_WIN






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 9

(  117)*        integer MPI_GRAPH
(  118)*        integer MPI_HOST
(  119)*        integer MPI_IDENT
(  120)*        integer MPI_IO
(  121)*        integer MPI_KEYVAL_INVALID
(  122)*        integer MPI_LASTUSEDCODE
(  123)*        integer MPI_LOCK_EXCLUSIVE
(  124)*        integer MPI_LOCK_SHARED
(  125)*        integer MPI_MODE_NOCHECK
(  126)*        integer MPI_MODE_NOPRECEDE
(  127)*        integer MPI_MODE_NOPUT
(  128)*        integer MPI_MODE_NOSTORE
(  129)*        integer MPI_MODE_NOSUCCEED
(  130)*        integer MPI_ORDER_C
(  131)*        integer MPI_ORDER_FORTRAN
(  132)*        integer MPI_PROC_NULL
(  133)*        integer MPI_ROOT
(  134)*        integer MPI_SIMILAR
(  135)*        integer MPI_SOURCE
(  136)*        integer MPI_SUBVERSION
(  137)*        integer MPI_SUCCESS
(  138)*        integer MPI_TAG
(  139)*        integer MPI_TAG_UB
(  140)*        integer MPI_THREAD_FUNNELED
(  141)*        integer MPI_THREAD_MULTIPLE
(  142)*        integer MPI_THREAD_SERIALIZED
(  143)*        integer MPI_THREAD_SINGLE
(  144)*        integer MPI_TYPECLASS_COMPLEX
(  145)*        integer MPI_TYPECLASS_INTEGER
(  146)*        integer MPI_TYPECLASS_REAL
(  147)*        integer MPI_T_ERR_CANNOT_INIT
(  148)*        integer MPI_T_ERR_CVAR_SET_NEVER
(  149)*        integer MPI_T_ERR_CVAR_SET_NOT_NOW
(  150)*        integer MPI_T_ERR_INVALID
(  151)*        integer MPI_T_ERR_INVALID_HANDLE
(  152)*        integer MPI_T_ERR_INVALID_INDEX
(  153)*        integer MPI_T_ERR_INVALID_ITEM
(  154)*        integer MPI_T_ERR_INVALID_SESSION
(  155)*        integer MPI_T_ERR_MEMORY
(  156)*        integer MPI_T_ERR_NOT_INITIALIZED
(  157)*        integer MPI_T_ERR_OUT_OF_HANDLES
(  158)*        integer MPI_T_ERR_OUT_OF_SESSIONS
(  159)*        integer MPI_T_ERR_PVAR_NO_ATOMIC
(  160)*        integer MPI_T_ERR_PVAR_NO_STARTSTOP
(  161)*        integer MPI_T_ERR_PVAR_NO_WRITE
(  162)*        integer MPI_UNDEFINED
(  163)*        integer MPI_UNEQUAL
(  164)*        integer MPI_UNIVERSE_SIZE
(  165)*        integer MPI_VERSION
(  166)*        integer MPI_WIN_BASE
(  167)*        integer MPI_WIN_CREATE_FLAVOR
(  168)*        integer MPI_WIN_DISP_UNIT
(  169)*        integer MPI_WIN_FLAVOR_ALLOCATE
(  170)*        integer MPI_WIN_FLAVOR_CREATE
(  171)*        integer MPI_WIN_FLAVOR_DYNAMIC
(  172)*        integer MPI_WIN_FLAVOR_SHARED
(  173)*        integer MPI_WIN_MODEL
(  174)*        integer MPI_WIN_SEPARATE






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 10

(  175)*        integer MPI_WIN_SIZE
(  176)*        integer MPI_WIN_UNIFIED
(  177)*        integer MPI_WTIME_IS_GLOBAL
(  178)*        integer OMPI_COMM_TYPE_BOARD
(  179)*        integer OMPI_COMM_TYPE_CLUSTER
(  180)*        integer OMPI_COMM_TYPE_CORE
(  181)*        integer OMPI_COMM_TYPE_CU
(  182)*        integer OMPI_COMM_TYPE_HOST
(  183)*        integer OMPI_COMM_TYPE_HWTHREAD
(  184)*        integer OMPI_COMM_TYPE_L1CACHE
(  185)*        integer OMPI_COMM_TYPE_L2CACHE
(  186)*        integer OMPI_COMM_TYPE_L3CACHE
(  187)*        integer OMPI_COMM_TYPE_NODE
(  188)*        integer OMPI_COMM_TYPE_NUMA
(  189)*        integer OMPI_COMM_TYPE_SOCKET
(  190)*
(  191)*        parameter (MPI_ANY_SOURCE=-1)
(  192)*        parameter (MPI_ANY_TAG=-1)
(  193)*        parameter (MPI_APPNUM=4)
(  194)*        parameter (MPI_BSEND_OVERHEAD=128)
(  195)*        parameter (MPI_CART=1)
(  196)*        parameter (MPI_COMBINER_CONTIGUOUS=2)
(  197)*        parameter (MPI_COMBINER_DARRAY=13)
(  198)*        parameter (MPI_COMBINER_DUP=1)
(  199)*        parameter (MPI_COMBINER_F90_COMPLEX=15)
(  200)*        parameter (MPI_COMBINER_F90_INTEGER=16)
(  201)*        parameter (MPI_COMBINER_F90_REAL=14)
(  202)*        parameter (MPI_COMBINER_HINDEXED=8)
(  203)*        parameter (MPI_COMBINER_HINDEXED_BLOCK=18)
(  204)*        parameter (MPI_COMBINER_HINDEXED_INTEGER=7)
(  205)*        parameter (MPI_COMBINER_HVECTOR=5)
(  206)*        parameter (MPI_COMBINER_HVECTOR_INTEGER=4)
(  207)*        parameter (MPI_COMBINER_INDEXED=6)
(  208)*        parameter (MPI_COMBINER_INDEXED_BLOCK=9)
(  209)*        parameter (MPI_COMBINER_NAMED=0)
(  210)*        parameter (MPI_COMBINER_RESIZED=17)
(  211)*        parameter (MPI_COMBINER_STRUCT=11)
(  212)*        parameter (MPI_COMBINER_STRUCT_INTEGER=10)
(  213)*        parameter (MPI_COMBINER_SUBARRAY=12)
(  214)*        parameter (MPI_COMBINER_VECTOR=3)
(  215)*        parameter (MPI_COMM_TYPE_SHARED=0)
(  216)*        parameter (MPI_CONGRUENT=1)
(  217)*        parameter (MPI_DISTRIBUTE_BLOCK=0)
(  218)*        parameter (MPI_DISTRIBUTE_CYCLIC=1)
(  219)*        parameter (MPI_DISTRIBUTE_DFLT_DARG=-1)
(  220)*        parameter (MPI_DISTRIBUTE_NONE=2)
(  221)*        parameter (MPI_DIST_GRAPH=3)
(  222)*        parameter (MPI_ERROR=3)
(  223)*        parameter (MPI_ERR_ACCESS=20)
(  224)*        parameter (MPI_ERR_AMODE=21)
(  225)*        parameter (MPI_ERR_ARG=13)
(  226)*        parameter (MPI_ERR_ASSERT=22)
(  227)*        parameter (MPI_ERR_BAD_FILE=23)
(  228)*        parameter (MPI_ERR_BASE=24)
(  229)*        parameter (MPI_ERR_BUFFER=1)
(  230)*        parameter (MPI_ERR_COMM=5)
(  231)*        parameter (MPI_ERR_CONVERSION=25)
(  232)*        parameter (MPI_ERR_COUNT=2)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 11

(  233)*        parameter (MPI_ERR_DIMS=12)
(  234)*        parameter (MPI_ERR_DISP=26)
(  235)*        parameter (MPI_ERR_DUP_DATAREP=27)
(  236)*        parameter (MPI_ERR_FILE=30)
(  237)*        parameter (MPI_ERR_FILE_EXISTS=28)
(  238)*        parameter (MPI_ERR_FILE_IN_USE=29)
(  239)*        parameter (MPI_ERR_GROUP=9)
(  240)*        parameter (MPI_ERR_INFO=34)
(  241)*        parameter (MPI_ERR_INFO_KEY=31)
(  242)*        parameter (MPI_ERR_INFO_NOKEY=32)
(  243)*        parameter (MPI_ERR_INFO_VALUE=33)
(  244)*        parameter (MPI_ERR_INTERN=17)
(  245)*        parameter (MPI_ERR_IN_STATUS=18)
(  246)*        parameter (MPI_ERR_IO=35)
(  247)*        parameter (MPI_ERR_KEYVAL=36)
(  248)*        parameter (MPI_ERR_LASTCODE=92)
(  249)*        parameter (MPI_ERR_LOCKTYPE=37)
(  250)*        parameter (MPI_ERR_NAME=38)
(  251)*        parameter (MPI_ERR_NOT_SAME=40)
(  252)*        parameter (MPI_ERR_NO_MEM=39)
(  253)*        parameter (MPI_ERR_NO_SPACE=41)
(  254)*        parameter (MPI_ERR_NO_SUCH_FILE=42)
(  255)*        parameter (MPI_ERR_OP=10)
(  256)*        parameter (MPI_ERR_OTHER=16)
(  257)*        parameter (MPI_ERR_PENDING=19)
(  258)*        parameter (MPI_ERR_PORT=43)
(  259)*        parameter (MPI_ERR_QUOTA=44)
(  260)*        parameter (MPI_ERR_RANK=6)
(  261)*        parameter (MPI_ERR_READ_ONLY=45)
(  262)*        parameter (MPI_ERR_REQUEST=7)
(  263)*        parameter (MPI_ERR_RMA_ATTACH=69)
(  264)*        parameter (MPI_ERR_RMA_CONFLICT=46)
(  265)*        parameter (MPI_ERR_RMA_FLAVOR=70)
(  266)*        parameter (MPI_ERR_RMA_RANGE=68)
(  267)*        parameter (MPI_ERR_RMA_SHARED=71)
(  268)*        parameter (MPI_ERR_RMA_SYNC=47)
(  269)*        parameter (MPI_ERR_ROOT=8)
(  270)*        parameter (MPI_ERR_SERVICE=48)
(  271)*        parameter (MPI_ERR_SIZE=49)
(  272)*        parameter (MPI_ERR_SPAWN=50)
(  273)*        parameter (MPI_ERR_TAG=4)
(  274)*        parameter (MPI_ERR_TOPOLOGY=11)
(  275)*        parameter (MPI_ERR_TRUNCATE=15)
(  276)*        parameter (MPI_ERR_TYPE=3)
(  277)*        parameter (MPI_ERR_UNKNOWN=14)
(  278)*        parameter (MPI_ERR_UNSUPPORTED_DATAREP=51)
(  279)*        parameter (MPI_ERR_UNSUPPORTED_OPERATION=52)
(  280)*        parameter (MPI_ERR_WIN=53)
(  281)*        parameter (MPI_GRAPH=2)
(  282)*        parameter (MPI_HOST=1)
(  283)*        parameter (MPI_IDENT=0)
(  284)*        parameter (MPI_IO=2)
(  285)*        parameter (MPI_KEYVAL_INVALID=-1)
(  286)*        parameter (MPI_LASTUSEDCODE=5)
(  287)*        parameter (MPI_LOCK_EXCLUSIVE=1)
(  288)*        parameter (MPI_LOCK_SHARED=2)
(  289)*        parameter (MPI_MODE_NOCHECK=1)
(  290)*        parameter (MPI_MODE_NOPRECEDE=2)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 12

(  291)*        parameter (MPI_MODE_NOPUT=4)
(  292)*        parameter (MPI_MODE_NOSTORE=8)
(  293)*        parameter (MPI_MODE_NOSUCCEED=16)
(  294)*        parameter (MPI_ORDER_C=0)
(  295)*        parameter (MPI_ORDER_FORTRAN=1)
(  296)*        parameter (MPI_PROC_NULL=-2)
(  297)*        parameter (MPI_ROOT=-4)
(  298)*        parameter (MPI_SIMILAR=2)
(  299)*        parameter (MPI_SOURCE=1)
(  300)*        parameter (MPI_SUBVERSION=1)
(  301)*        parameter (MPI_SUCCESS=0)
(  302)*        parameter (MPI_TAG=2)
(  303)*        parameter (MPI_TAG_UB=0)
(  304)*        parameter (MPI_THREAD_FUNNELED=1)
(  305)*        parameter (MPI_THREAD_MULTIPLE=3)
(  306)*        parameter (MPI_THREAD_SERIALIZED=2)
(  307)*        parameter (MPI_THREAD_SINGLE=0)
(  308)*        parameter (MPI_TYPECLASS_COMPLEX=3)
(  309)*        parameter (MPI_TYPECLASS_INTEGER=1)
(  310)*        parameter (MPI_TYPECLASS_REAL=2)
(  311)*        parameter (MPI_T_ERR_CANNOT_INIT=56)
(  312)*        parameter (MPI_T_ERR_CVAR_SET_NEVER=64)
(  313)*        parameter (MPI_T_ERR_CVAR_SET_NOT_NOW=63)
(  314)*        parameter (MPI_T_ERR_INVALID=72)
(  315)*        parameter (MPI_T_ERR_INVALID_HANDLE=59)
(  316)*        parameter (MPI_T_ERR_INVALID_INDEX=57)
(  317)*        parameter (MPI_T_ERR_INVALID_ITEM=58)
(  318)*        parameter (MPI_T_ERR_INVALID_SESSION=62)
(  319)*        parameter (MPI_T_ERR_MEMORY=54)
(  320)*        parameter (MPI_T_ERR_NOT_INITIALIZED=55)
(  321)*        parameter (MPI_T_ERR_OUT_OF_HANDLES=60)
(  322)*        parameter (MPI_T_ERR_OUT_OF_SESSIONS=61)
(  323)*        parameter (MPI_T_ERR_PVAR_NO_ATOMIC=67)
(  324)*        parameter (MPI_T_ERR_PVAR_NO_STARTSTOP=65)
(  325)*        parameter (MPI_T_ERR_PVAR_NO_WRITE=66)
(  326)*        parameter (MPI_UNDEFINED=-32766)
(  327)*        parameter (MPI_UNEQUAL=3)
(  328)*        parameter (MPI_UNIVERSE_SIZE=6)
(  329)*        parameter (MPI_VERSION=3)
(  330)*        parameter (MPI_WIN_BASE=7)
(  331)*        parameter (MPI_WIN_CREATE_FLAVOR=10)
(  332)*        parameter (MPI_WIN_DISP_UNIT=9)
(  333)*        parameter (MPI_WIN_FLAVOR_ALLOCATE=2)
(  334)*        parameter (MPI_WIN_FLAVOR_CREATE=1)
(  335)*        parameter (MPI_WIN_FLAVOR_DYNAMIC=3)
(  336)*        parameter (MPI_WIN_FLAVOR_SHARED=4)
(  337)*        parameter (MPI_WIN_MODEL=11)
(  338)*        parameter (MPI_WIN_SEPARATE=1)
(  339)*        parameter (MPI_WIN_SIZE=8)
(  340)*        parameter (MPI_WIN_UNIFIED=0)
(  341)*        parameter (MPI_WTIME_IS_GLOBAL=3)
(  342)*        parameter (OMPI_COMM_TYPE_BOARD=8)
(  343)*        parameter (OMPI_COMM_TYPE_CLUSTER=11)
(  344)*        parameter (OMPI_COMM_TYPE_CORE=2)
(  345)*        parameter (OMPI_COMM_TYPE_CU=10)
(  346)*        parameter (OMPI_COMM_TYPE_HOST=9)
(  347)*        parameter (OMPI_COMM_TYPE_HWTHREAD=1)
(  348)*        parameter (OMPI_COMM_TYPE_L1CACHE=3)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 13

(  349)*        parameter (OMPI_COMM_TYPE_L2CACHE=4)
(  350)*        parameter (OMPI_COMM_TYPE_L3CACHE=5)
(  351)*        parameter (OMPI_COMM_TYPE_NODE=0)
(  352)*        parameter (OMPI_COMM_TYPE_NUMA=7)
(  353)*        parameter (OMPI_COMM_TYPE_SOCKET=6)
(   58)*      include 'mpif-handles.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-handles.h
(    1)*! -*- fortran -*-
(    2)*! WARNING! THIS IS A GENERATED FILE!!
(    3)*! ANY EDITS YOU PUT HERE WILL BE LOST!
(    4)*! ==> Instead, edit topdir/ompi/include/mpif-values.pl.
(    5)*
(    6)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    7)*!                         University Research and Technology
(    8)*!                         Corporation.  All rights reserved.
(    9)*! Copyright (c) 2004-2010 The University of Tennessee and The University
(   10)*!                         of Tennessee Research Foundation.  All rights
(   11)*!                         reserved.
(   12)*! Copyright (c) 2004-2007 High Performance Computing Center Stuttgart,
(   13)*!                         University of Stuttgart.  All rights reserved.
(   14)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   15)*!                         All rights reserved.
(   16)*! Copyright (c) 2006-2012 Cisco Systems, Inc.  All rights reserved.
(   17)*! Copyright (c) 2009      Oak Ridge National Labs.  All rights reserved.
(   18)*! Copyright (c) 2016      Research Organization for Information Science
(   19)*!                         and Technology (RIST). All rights reserved.
(   20)*! $COPYRIGHT$
(   21)*!
(   22)*! Additional copyrights may follow
(   23)*!
(   24)*! $HEADER$
(   25)*!
(   26)*
(   27)*        integer MPI_2COMPLEX
(   28)*        integer MPI_2DOUBLE_COMPLEX
(   29)*        integer MPI_2DOUBLE_PRECISION
(   30)*        integer MPI_2INT
(   31)*        integer MPI_2INTEGER
(   32)*        integer MPI_2REAL
(   33)*        integer MPI_AINT
(   34)*        integer MPI_BAND
(   35)*        integer MPI_BOR
(   36)*        integer MPI_BXOR
(   37)*        integer MPI_BYTE
(   38)*        integer MPI_CHAR
(   39)*        integer MPI_CHARACTER
(   40)*        integer MPI_COMM_NULL
(   41)*        integer MPI_COMM_SELF
(   42)*        integer MPI_COMM_WORLD
(   43)*        integer MPI_COMPLEX
(   44)*        integer MPI_COMPLEX16
(   45)*        integer MPI_COMPLEX32
(   46)*        integer MPI_COMPLEX8
(   47)*        integer MPI_COUNT
(   48)*        integer MPI_CXX_BOOL
(   49)*        integer MPI_CXX_COMPLEX
(   50)*        integer MPI_CXX_DOUBLE_COMPLEX
(   51)*        integer MPI_CXX_FLOAT_COMPLEX






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 14

(   52)*        integer MPI_CXX_LONG_DOUBLE_COMPLEX
(   53)*        integer MPI_C_BOOL
(   54)*        integer MPI_C_COMPLEX
(   55)*        integer MPI_C_DOUBLE_COMPLEX
(   56)*        integer MPI_C_FLOAT_COMPLEX
(   57)*        integer MPI_C_LONG_DOUBLE_COMPLEX
(   58)*        integer MPI_DATATYPE_NULL
(   59)*        integer MPI_DOUBLE
(   60)*        integer MPI_DOUBLE_COMPLEX
(   61)*        integer MPI_DOUBLE_INT
(   62)*        integer MPI_DOUBLE_PRECISION
(   63)*        integer MPI_ERRHANDLER_NULL
(   64)*        integer MPI_ERRORS_ARE_FATAL
(   65)*        integer MPI_ERRORS_RETURN
(   66)*        integer MPI_FLOAT
(   67)*        integer MPI_FLOAT_INT
(   68)*        integer MPI_GROUP_EMPTY
(   69)*        integer MPI_GROUP_NULL
(   70)*        integer MPI_INFO_ENV
(   71)*        integer MPI_INFO_NULL
(   72)*        integer MPI_INT
(   73)*        integer MPI_INT16_T
(   74)*        integer MPI_INT32_T
(   75)*        integer MPI_INT64_T
(   76)*        integer MPI_INT8_T
(   77)*        integer MPI_INTEGER
(   78)*        integer MPI_INTEGER1
(   79)*        integer MPI_INTEGER16
(   80)*        integer MPI_INTEGER2
(   81)*        integer MPI_INTEGER4
(   82)*        integer MPI_INTEGER8
(   83)*        integer MPI_LAND
(   84)*        integer MPI_LB
(   85)*        integer MPI_LOGICAL
(   86)*        integer MPI_LOGICAL1
(   87)*        integer MPI_LOGICAL2
(   88)*        integer MPI_LOGICAL4
(   89)*        integer MPI_LOGICAL8
(   90)*        integer MPI_LONG
(   91)*        integer MPI_LONG_DOUBLE
(   92)*        integer MPI_LONG_DOUBLE_INT
(   93)*        integer MPI_LONG_INT
(   94)*        integer MPI_LONG_LONG
(   95)*        integer MPI_LONG_LONG_INT
(   96)*        integer MPI_LOR
(   97)*        integer MPI_LXOR
(   98)*        integer MPI_MAX
(   99)*        integer MPI_MAXLOC
(  100)*        integer MPI_MESSAGE_NO_PROC
(  101)*        integer MPI_MESSAGE_NULL
(  102)*        integer MPI_MIN
(  103)*        integer MPI_MINLOC
(  104)*        integer MPI_NO_OP
(  105)*        integer MPI_OFFSET
(  106)*        integer MPI_OP_NULL
(  107)*        integer MPI_PACKED
(  108)*        integer MPI_PROD
(  109)*        integer MPI_REAL






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 15

(  110)*        integer MPI_REAL16
(  111)*        integer MPI_REAL2
(  112)*        integer MPI_REAL4
(  113)*        integer MPI_REAL8
(  114)*        integer MPI_REPLACE
(  115)*        integer MPI_REQUEST_NULL
(  116)*        integer MPI_SHORT
(  117)*        integer MPI_SHORT_INT
(  118)*        integer MPI_SIGNED_CHAR
(  119)*        integer MPI_SUM
(  120)*        integer MPI_UB
(  121)*        integer MPI_UINT16_T
(  122)*        integer MPI_UINT32_T
(  123)*        integer MPI_UINT64_T
(  124)*        integer MPI_UINT8_T
(  125)*        integer MPI_UNSIGNED
(  126)*        integer MPI_UNSIGNED_CHAR
(  127)*        integer MPI_UNSIGNED_LONG
(  128)*        integer MPI_UNSIGNED_LONG_LONG
(  129)*        integer MPI_UNSIGNED_SHORT
(  130)*        integer MPI_WCHAR
(  131)*        integer MPI_WIN_NULL
(  132)*
(  133)*        parameter (MPI_2COMPLEX=26)
(  134)*        parameter (MPI_2DOUBLE_COMPLEX=27)
(  135)*        parameter (MPI_2DOUBLE_PRECISION=24)
(  136)*        parameter (MPI_2INT=52)
(  137)*        parameter (MPI_2INTEGER=25)
(  138)*        parameter (MPI_2REAL=23)
(  139)*        parameter (MPI_AINT=66)
(  140)*        parameter (MPI_BAND=6)
(  141)*        parameter (MPI_BOR=8)
(  142)*        parameter (MPI_BXOR=10)
(  143)*        parameter (MPI_BYTE=1)
(  144)*        parameter (MPI_CHAR=34)
(  145)*        parameter (MPI_CHARACTER=5)
(  146)*        parameter (MPI_COMM_NULL=2)
(  147)*        parameter (MPI_COMM_SELF=1)
(  148)*        parameter (MPI_COMM_WORLD=0)
(  149)*        parameter (MPI_COMPLEX=18)
(  150)*        parameter (MPI_COMPLEX16=20)
(  151)*        parameter (MPI_COMPLEX32=21)
(  152)*        parameter (MPI_COMPLEX8=19)
(  153)*        parameter (MPI_COUNT=72)
(  154)*        parameter (MPI_CXX_BOOL=54)
(  155)*        parameter (MPI_CXX_COMPLEX=55)
(  156)*        parameter (MPI_CXX_DOUBLE_COMPLEX=56)
(  157)*        parameter (MPI_CXX_FLOAT_COMPLEX=55)
(  158)*        parameter (MPI_CXX_LONG_DOUBLE_COMPLEX=57)
(  159)*        parameter (MPI_C_BOOL=68)
(  160)*        parameter (MPI_C_COMPLEX=69)
(  161)*        parameter (MPI_C_DOUBLE_COMPLEX=70)
(  162)*        parameter (MPI_C_FLOAT_COMPLEX=69)
(  163)*        parameter (MPI_C_LONG_DOUBLE_COMPLEX=71)
(  164)*        parameter (MPI_DATATYPE_NULL=0)
(  165)*        parameter (MPI_DOUBLE=46)
(  166)*        parameter (MPI_DOUBLE_COMPLEX=22)
(  167)*        parameter (MPI_DOUBLE_INT=49)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 16

(  168)*        parameter (MPI_DOUBLE_PRECISION=17)
(  169)*        parameter (MPI_ERRHANDLER_NULL=0)
(  170)*        parameter (MPI_ERRORS_ARE_FATAL=1)
(  171)*        parameter (MPI_ERRORS_RETURN=2)
(  172)*        parameter (MPI_FLOAT=45)
(  173)*        parameter (MPI_FLOAT_INT=48)
(  174)*        parameter (MPI_GROUP_EMPTY=1)
(  175)*        parameter (MPI_GROUP_NULL=0)
(  176)*        parameter (MPI_INFO_ENV=1)
(  177)*        parameter (MPI_INFO_NULL=0)
(  178)*        parameter (MPI_INT=39)
(  179)*        parameter (MPI_INT16_T=60)
(  180)*        parameter (MPI_INT32_T=62)
(  181)*        parameter (MPI_INT64_T=64)
(  182)*        parameter (MPI_INT8_T=58)
(  183)*        parameter (MPI_INTEGER=7)
(  184)*        parameter (MPI_INTEGER1=8)
(  185)*        parameter (MPI_INTEGER16=12)
(  186)*        parameter (MPI_INTEGER2=9)
(  187)*        parameter (MPI_INTEGER4=10)
(  188)*        parameter (MPI_INTEGER8=11)
(  189)*        parameter (MPI_LAND=5)
(  190)*        parameter (MPI_LB=4)
(  191)*        parameter (MPI_LOGICAL=6)
(  192)*        parameter (MPI_LOGICAL1=29)
(  193)*        parameter (MPI_LOGICAL2=30)
(  194)*        parameter (MPI_LOGICAL4=31)
(  195)*        parameter (MPI_LOGICAL8=32)
(  196)*        parameter (MPI_LONG=41)
(  197)*        parameter (MPI_LONG_DOUBLE=47)
(  198)*        parameter (MPI_LONG_DOUBLE_INT=50)
(  199)*        parameter (MPI_LONG_INT=51)
(  200)*        parameter (MPI_LONG_LONG=43)
(  201)*        parameter (MPI_LONG_LONG_INT=43)
(  202)*        parameter (MPI_LOR=7)
(  203)*        parameter (MPI_LXOR=9)
(  204)*        parameter (MPI_MAX=1)
(  205)*        parameter (MPI_MAXLOC=11)
(  206)*        parameter (MPI_MESSAGE_NO_PROC=1)
(  207)*        parameter (MPI_MESSAGE_NULL=0)
(  208)*        parameter (MPI_MIN=2)
(  209)*        parameter (MPI_MINLOC=12)
(  210)*        parameter (MPI_NO_OP=14)
(  211)*        parameter (MPI_OFFSET=67)
(  212)*        parameter (MPI_OP_NULL=0)
(  213)*        parameter (MPI_PACKED=2)
(  214)*        parameter (MPI_PROD=4)
(  215)*        parameter (MPI_REAL=13)
(  216)*        parameter (MPI_REAL16=16)
(  217)*        parameter (MPI_REAL2=28)
(  218)*        parameter (MPI_REAL4=14)
(  219)*        parameter (MPI_REAL8=15)
(  220)*        parameter (MPI_REPLACE=13)
(  221)*        parameter (MPI_REQUEST_NULL=0)
(  222)*        parameter (MPI_SHORT=37)
(  223)*        parameter (MPI_SHORT_INT=53)
(  224)*        parameter (MPI_SIGNED_CHAR=36)
(  225)*        parameter (MPI_SUM=3)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 17

(  226)*        parameter (MPI_UB=3)
(  227)*        parameter (MPI_UINT16_T=61)
(  228)*        parameter (MPI_UINT32_T=63)
(  229)*        parameter (MPI_UINT64_T=65)
(  230)*        parameter (MPI_UINT8_T=59)
(  231)*        parameter (MPI_UNSIGNED=40)
(  232)*        parameter (MPI_UNSIGNED_CHAR=35)
(  233)*        parameter (MPI_UNSIGNED_LONG=42)
(  234)*        parameter (MPI_UNSIGNED_LONG_LONG=44)
(  235)*        parameter (MPI_UNSIGNED_SHORT=38)
(  236)*        parameter (MPI_WCHAR=33)
(  237)*        parameter (MPI_WIN_NULL=0)
(   59)*      include 'mpif-io-constants.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-io-constants.h
(    1)*! -*- fortran -*-
(    2)*! WARNING! THIS IS A GENERATED FILE!!
(    3)*! ANY EDITS YOU PUT HERE WILL BE LOST!
(    4)*! ==> Instead, edit topdir/ompi/include/mpif-values.pl.
(    5)*
(    6)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    7)*!                         University Research and Technology
(    8)*!                         Corporation.  All rights reserved.
(    9)*! Copyright (c) 2004-2010 The University of Tennessee and The University
(   10)*!                         of Tennessee Research Foundation.  All rights
(   11)*!                         reserved.
(   12)*! Copyright (c) 2004-2007 High Performance Computing Center Stuttgart,
(   13)*!                         University of Stuttgart.  All rights reserved.
(   14)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   15)*!                         All rights reserved.
(   16)*! Copyright (c) 2006-2012 Cisco Systems, Inc.  All rights reserved.
(   17)*! Copyright (c) 2009      Oak Ridge National Labs.  All rights reserved.
(   18)*! Copyright (c) 2016      Research Organization for Information Science
(   19)*!                         and Technology (RIST). All rights reserved.
(   20)*! $COPYRIGHT$
(   21)*!
(   22)*! Additional copyrights may follow
(   23)*!
(   24)*! $HEADER$
(   25)*!
(   26)*
(   27)*        integer MPI_MODE_APPEND
(   28)*        integer MPI_MODE_CREATE
(   29)*        integer MPI_MODE_DELETE_ON_CLOSE
(   30)*        integer MPI_MODE_EXCL
(   31)*        integer MPI_MODE_RDONLY
(   32)*        integer MPI_MODE_RDWR
(   33)*        integer MPI_MODE_SEQUENTIAL
(   34)*        integer MPI_MODE_UNIQUE_OPEN
(   35)*        integer MPI_MODE_WRONLY
(   36)*        integer MPI_SEEK_CUR
(   37)*        integer MPI_SEEK_END
(   38)*        integer MPI_SEEK_SET
(   39)*        integer(KIND=MPI_OFFSET_KIND) MPI_DISPLACEMENT_CURRENT
(   40)*
(   41)*        parameter (MPI_MODE_APPEND=128)
(   42)*        parameter (MPI_MODE_CREATE=1)
(   43)*        parameter (MPI_MODE_DELETE_ON_CLOSE=16)
(   44)*        parameter (MPI_MODE_EXCL=64)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 18

(   45)*        parameter (MPI_MODE_RDONLY=2)
(   46)*        parameter (MPI_MODE_RDWR=8)
(   47)*        parameter (MPI_MODE_SEQUENTIAL=256)
(   48)*        parameter (MPI_MODE_UNIQUE_OPEN=32)
(   49)*        parameter (MPI_MODE_WRONLY=4)
(   50)*        parameter (MPI_SEEK_CUR=602)
(   51)*        parameter (MPI_SEEK_END=604)
(   52)*        parameter (MPI_SEEK_SET=600)
(   53)*        parameter (MPI_DISPLACEMENT_CURRENT=-54278278)
(   60)*      include 'mpif-io-handles.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-io-handles.h
(    1)*! -*- fortran -*-
(    2)*! WARNING! THIS IS A GENERATED FILE!!
(    3)*! ANY EDITS YOU PUT HERE WILL BE LOST!
(    4)*! ==> Instead, edit topdir/ompi/include/mpif-values.pl.
(    5)*
(    6)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    7)*!                         University Research and Technology
(    8)*!                         Corporation.  All rights reserved.
(    9)*! Copyright (c) 2004-2010 The University of Tennessee and The University
(   10)*!                         of Tennessee Research Foundation.  All rights
(   11)*!                         reserved.
(   12)*! Copyright (c) 2004-2007 High Performance Computing Center Stuttgart,
(   13)*!                         University of Stuttgart.  All rights reserved.
(   14)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   15)*!                         All rights reserved.
(   16)*! Copyright (c) 2006-2012 Cisco Systems, Inc.  All rights reserved.
(   17)*! Copyright (c) 2009      Oak Ridge National Labs.  All rights reserved.
(   18)*! Copyright (c) 2016      Research Organization for Information Science
(   19)*!                         and Technology (RIST). All rights reserved.
(   20)*! $COPYRIGHT$
(   21)*!
(   22)*! Additional copyrights may follow
(   23)*!
(   24)*! $HEADER$
(   25)*!
(   26)*
(   27)*        integer MPI_FILE_NULL
(   28)*
(   29)*        parameter (MPI_FILE_NULL=0)
(   61)*      include 'mpif-externals.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-externals.h
(    1)*! -*- fortran -*-
(    2)*!
(    3)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    4)*!                         University Research and Technology
(    5)*!                         Corporation.  All rights reserved.
(    6)*! Copyright (c) 2004-2005 The University of Tennessee and The University
(    7)*!                         of Tennessee Research Foundation.  All rights
(    8)*!                         reserved.
(    9)*! Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
(   10)*!                         University of Stuttgart.  All rights reserved.
(   11)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   12)*!                         All rights reserved.
(   13)*! Copyright (c) 2006-2017 Cisco Systems, Inc.  All rights reserved
(   14)*! $COPYRIGHT$
(   15)*!
(   16)*! Additional copyrights may follow






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 19

(   17)*!
(   18)*! $HEADER$
(   19)*!
(   20)*
(   21)*!
(   22)*!     These "external" statements are specific to the MPI mpif.h
(   23)*!     interface (and are toxic to the MPI module interfaces),.
(   24)*!
(   25)*      external MPI_NULL_COPY_FN, MPI_NULL_DELETE_FN
(   26)*      external MPI_COMM_NULL_COPY_FN, MPI_COMM_NULL_DELETE_FN
(   27)*      external MPI_TYPE_NULL_COPY_FN, MPI_TYPE_NULL_DELETE_FN
(   28)*      external MPI_DUP_FN, MPI_COMM_DUP_FN, MPI_TYPE_DUP_FN
(   29)*      external MPI_WIN_NULL_COPY_FN
(   30)*      external MPI_WIN_NULL_DELETE_FN
(   31)*      external MPI_WIN_DUP_FN
(   32)*!     Note that MPI_CONVERSION_FN_NULL is a "constant" (it is only ever
(   33)*!     checked for comparison; it is never invoked), but it is passed as
(   34)*!     a function pointer (to MPI_REGISTER_DATAREP) and therefore must be
(   35)*!     the same size/type.  It is therefore external'ed here, and not
(   36)*!     defined with an integer value in mpif-common.h.
(   37)*      external MPI_CONVERSION_FN_NULL
(   38)*
(   39)*!
(   40)*!     double precision functions
(   41)*!
(   42)*      external MPI_WTIME, MPI_WTICK , PMPI_WTICK, PMPI_WTIME
(   43)*      double precision MPI_WTIME, MPI_WTICK , PMPI_WTICK, PMPI_WTIME
(   44)*!
(   45)*!     address integer functions
(   46)*!
(   47)*      external MPI_AINT_ADD, MPI_AINT_DIFF
(   48)*      integer(kind=MPI_ADDRESS_KIND) MPI_AINT_ADD, MPI_AINT_DIFF
(   62)*      include 'mpif-sentinels.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-sentinels.h
(    1)*! -*- fortran -*-
(    2)*!
(    3)*! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana
(    4)*!                         University Research and Technology
(    5)*!                         Corporation.  All rights reserved.
(    6)*! Copyright (c) 2004-2010 The University of Tennessee and The University
(    7)*!                         of Tennessee Research Foundation.  All rights
(    8)*!                         reserved.
(    9)*! Copyright (c) 2004-2007 High Performance Computing Center Stuttgart,
(   10)*!                         University of Stuttgart.  All rights reserved.
(   11)*! Copyright (c) 2004-2005 The Regents of the University of California.
(   12)*!                         All rights reserved.
(   13)*! Copyright (c) 2006-2012 Cisco Systems, Inc.  All rights reserved.
(   14)*! Copyright (c) 2009      Oak Ridge National Labs.  All rights reserved.
(   15)*! $COPYRIGHT$
(   16)*!
(   17)*! Additional copyrights may follow
(   18)*!
(   19)*! $HEADER$
(   20)*!
(   21)*
(   22)*!
(   23)*!     All of these types were chosen with care to match the types of
(   24)*!     their corresponding C variables.  Do not arbitrarily change






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 20

(   25)*!     their types without also updating:
(   26)*!
(   27)*!     - the "mpi" module bindings
(   28)*!     - the "mpi_f08" module bindings
(   29)*!     - ompi/mpi/fortran/base/gen-mpi-mangling.pl
(   30)*!
(   31)*
(   32)*!     MPI_BOTTOM is only used where choice buffers can be used (meaning
(   33)*!     that we already have overloaded F90 bindings for all available
(   34)*!     types), so any type is fine.
(   35)*      integer MPI_BOTTOM
(   36)*!     MPI_IN_PLACE has the same rationale as MPI_BOTTOM.
(   37)*      integer MPI_IN_PLACE
(   38)*!     Making MPI_ARGV_NULL be the same type as the parameter that is
(   39)*!     exepected in the F90 binding for MPI_COMM_SPAWN means that we
(   40)*!     don't need another interface for MPI_COMM_SPAWN.
(   41)*      character MPI_ARGV_NULL(1)
(   42)*!     Ditto for MPI_ARGVS_NULL / MPI_COMM_SPAWN_MULTIPLE.
(   43)*      character MPI_ARGVS_NULL(1, 1)
(   44)*!     MPI_ERRCODES_IGNORE has similar rationale to MPI_ARGV_NULL.  The
(   45)*!     F77 functions are all smart enough to check that the errcodes
(   46)*!     parameter is not ERRCODES_IGNORE before assigning values into it
(   47)*!     (hence, the fact that this is an array of only 1 element does not
(   48)*!     matter -- we'll never overrun it because we never assign values
(   49)*!     into it).
(   50)*      integer MPI_ERRCODES_IGNORE(1)
(   51)*!     MPI_STATUS_IGNORE has similar rationale to MPI_ERRCODES_IGNORE.
(   52)*      integer MPI_STATUS_IGNORE(MPI_STATUS_SIZE)
(   53)*!     Ditto for MPI_STATUSES_IGNORE
(   54)*      integer MPI_STATUSES_IGNORE(MPI_STATUS_SIZE, 1)
(   55)*!     Ditto for MPI_UNWEIGHTED
(   56)*      integer MPI_UNWEIGHTED(1)
(   57)*!     Ditto for MPI_WEIGHTS_EMPTY
(   58)*      integer MPI_WEIGHTS_EMPTY(1)
(   59)*
(   60)*      common/mpi_fortran_bottom/MPI_BOTTOM
(   61)*      common/mpi_fortran_in_place/MPI_IN_PLACE
(   62)*      common/mpi_fortran_argv_null/MPI_ARGV_NULL
(   63)*      common/mpi_fortran_argvs_null/MPI_ARGVS_NULL
(   64)*      common/mpi_fortran_errcodes_ignore/MPI_ERRCODES_IGNORE
(   65)*      common/mpi_fortran_status_ignore/MPI_STATUS_IGNORE
(   66)*      common/mpi_fortran_statuses_ignore/MPI_STATUSES_IGNORE
(   67)*      common/mpi_fortran_unweighted/MPI_UNWEIGHTED
(   68)*      common/mpi_fortran_weights_empty/MPI_WEIGHTS_EMPTY
(   63)*      include 'mpif-sizeof.h'
/opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include/mpif-sizeof.h
(    1)*! -*- f90 -*-
(    2)*! WARNING: This is a generated file!  Edits will be lost!
(    3)*!
(    4)*! Copyright (c) 2014 Cisco Systems, Inc.  All rights reserved.
(    5)*! $COPYRIGHT$
(    6)*!
(    7)*! This file was generated by gen-mpi-sizeof.pl for all the MPI_SIZEOF
(    8)*! interface possibilities for intrinsic types.  Once TS 29113 is
(    9)*! supported in all compilers, we can simply have *one* procedure for
(   10)*! each type and use dimension(..) to indicate scalars+all array ranks.
(   11)*! But until more compilers support this, we simply generate a
(   12)*! procedure for scalars and all possible ranks in an attempt to






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 21

(   13)*! support lots of Fortran compilers.
(   14)*
(   15)*      INTERFACE MPI_Sizeof
(   16)*
(   17)*      SUBROUTINE MPI_Sizeof_character_scalar(x, size, ierror)
(   18)*      CHARACTER::x
(   19)*        INTEGER, INTENT(OUT) :: size
(   20)*        INTEGER, INTENT(OUT) :: ierror
(   21)*      END SUBROUTINE MPI_Sizeof_character_scalar
(   22)*
(   23)*      SUBROUTINE MPI_Sizeof_character_r1(x, size, ierror)
(   24)*      CHARACTER, DIMENSION(*)::x
(   25)*        INTEGER, INTENT(OUT) :: size
(   26)*        INTEGER, INTENT(OUT) :: ierror
(   27)*      END SUBROUTINE MPI_Sizeof_character_r1
(   28)*
(   29)*      SUBROUTINE MPI_Sizeof_character_r2(x, size, ierror)
(   30)*      CHARACTER, DIMENSION(1,*)::x
(   31)*        INTEGER, INTENT(OUT) :: size
(   32)*        INTEGER, INTENT(OUT) :: ierror
(   33)*      END SUBROUTINE MPI_Sizeof_character_r2
(   34)*
(   35)*      SUBROUTINE MPI_Sizeof_character_r3(x, size, ierror)
(   36)*      CHARACTER, DIMENSION(1,1,*)::x
(   37)*        INTEGER, INTENT(OUT) :: size
(   38)*        INTEGER, INTENT(OUT) :: ierror
(   39)*      END SUBROUTINE MPI_Sizeof_character_r3
(   40)*
(   41)*      SUBROUTINE MPI_Sizeof_character_r4(x, size, ierror)
(   42)*      CHARACTER, DIMENSION(1,1,1,*)::x
(   43)*        INTEGER, INTENT(OUT) :: size
(   44)*        INTEGER, INTENT(OUT) :: ierror
(   45)*      END SUBROUTINE MPI_Sizeof_character_r4
(   46)*
(   47)*      SUBROUTINE MPI_Sizeof_character_r5(x, size, ierror)
(   48)*      CHARACTER, DIMENSION(1,1,1,1,*)::x
(   49)*        INTEGER, INTENT(OUT) :: size
(   50)*        INTEGER, INTENT(OUT) :: ierror
(   51)*      END SUBROUTINE MPI_Sizeof_character_r5
(   52)*
(   53)*      SUBROUTINE MPI_Sizeof_character_r6(x, size, ierror)
(   54)*      CHARACTER, DIMENSION(1,1,1,1,1,*)::x
(   55)*        INTEGER, INTENT(OUT) :: size
(   56)*        INTEGER, INTENT(OUT) :: ierror
(   57)*      END SUBROUTINE MPI_Sizeof_character_r6
(   58)*
(   59)*      SUBROUTINE MPI_Sizeof_character_r7(x, size, ierror)
(   60)*      CHARACTER, DIMENSION(1,1,1,1,1,1,*)::x
(   61)*        INTEGER, INTENT(OUT) :: size
(   62)*        INTEGER, INTENT(OUT) :: ierror
(   63)*      END SUBROUTINE MPI_Sizeof_character_r7
(   64)*
(   65)*      SUBROUTINE MPI_Sizeof_complex32_scalar(x, size, ierror)
(   66)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(   67)*      COMPLEX(REAL32)::x
(   68)*        INTEGER, INTENT(OUT) :: size
(   69)*        INTEGER, INTENT(OUT) :: ierror
(   70)*      END SUBROUTINE MPI_Sizeof_complex32_scalar






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 22

(   71)*
(   72)*      SUBROUTINE MPI_Sizeof_complex32_r1(x, size, ierror)
(   73)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(   74)*      COMPLEX(REAL32), DIMENSION(*)::x
(   75)*        INTEGER, INTENT(OUT) :: size
(   76)*        INTEGER, INTENT(OUT) :: ierror
(   77)*      END SUBROUTINE MPI_Sizeof_complex32_r1
(   78)*
(   79)*      SUBROUTINE MPI_Sizeof_complex32_r2(x, size, ierror)
(   80)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(   81)*      COMPLEX(REAL32), DIMENSION(1,*)::x
(   82)*        INTEGER, INTENT(OUT) :: size
(   83)*        INTEGER, INTENT(OUT) :: ierror
(   84)*      END SUBROUTINE MPI_Sizeof_complex32_r2
(   85)*
(   86)*      SUBROUTINE MPI_Sizeof_complex32_r3(x, size, ierror)
(   87)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(   88)*      COMPLEX(REAL32), DIMENSION(1,1,*)::x
(   89)*        INTEGER, INTENT(OUT) :: size
(   90)*        INTEGER, INTENT(OUT) :: ierror
(   91)*      END SUBROUTINE MPI_Sizeof_complex32_r3
(   92)*
(   93)*      SUBROUTINE MPI_Sizeof_complex32_r4(x, size, ierror)
(   94)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(   95)*      COMPLEX(REAL32), DIMENSION(1,1,1,*)::x
(   96)*        INTEGER, INTENT(OUT) :: size
(   97)*        INTEGER, INTENT(OUT) :: ierror
(   98)*      END SUBROUTINE MPI_Sizeof_complex32_r4
(   99)*
(  100)*      SUBROUTINE MPI_Sizeof_complex32_r5(x, size, ierror)
(  101)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  102)*      COMPLEX(REAL32), DIMENSION(1,1,1,1,*)::x
(  103)*        INTEGER, INTENT(OUT) :: size
(  104)*        INTEGER, INTENT(OUT) :: ierror
(  105)*      END SUBROUTINE MPI_Sizeof_complex32_r5
(  106)*
(  107)*      SUBROUTINE MPI_Sizeof_complex32_r6(x, size, ierror)
(  108)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  109)*      COMPLEX(REAL32), DIMENSION(1,1,1,1,1,*)::x
(  110)*        INTEGER, INTENT(OUT) :: size
(  111)*        INTEGER, INTENT(OUT) :: ierror
(  112)*      END SUBROUTINE MPI_Sizeof_complex32_r6
(  113)*
(  114)*      SUBROUTINE MPI_Sizeof_complex32_r7(x, size, ierror)
(  115)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  116)*      COMPLEX(REAL32), DIMENSION(1,1,1,1,1,1,*)::x
(  117)*        INTEGER, INTENT(OUT) :: size
(  118)*        INTEGER, INTENT(OUT) :: ierror
(  119)*      END SUBROUTINE MPI_Sizeof_complex32_r7
(  120)*
(  121)*      SUBROUTINE MPI_Sizeof_complex64_scalar(x, size, ierror)
(  122)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  123)*      COMPLEX(REAL64)::x
(  124)*        INTEGER, INTENT(OUT) :: size
(  125)*        INTEGER, INTENT(OUT) :: ierror
(  126)*      END SUBROUTINE MPI_Sizeof_complex64_scalar
(  127)*
(  128)*      SUBROUTINE MPI_Sizeof_complex64_r1(x, size, ierror)






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 23

(  129)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  130)*      COMPLEX(REAL64), DIMENSION(*)::x
(  131)*        INTEGER, INTENT(OUT) :: size
(  132)*        INTEGER, INTENT(OUT) :: ierror
(  133)*      END SUBROUTINE MPI_Sizeof_complex64_r1
(  134)*
(  135)*      SUBROUTINE MPI_Sizeof_complex64_r2(x, size, ierror)
(  136)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  137)*      COMPLEX(REAL64), DIMENSION(1,*)::x
(  138)*        INTEGER, INTENT(OUT) :: size
(  139)*        INTEGER, INTENT(OUT) :: ierror
(  140)*      END SUBROUTINE MPI_Sizeof_complex64_r2
(  141)*
(  142)*      SUBROUTINE MPI_Sizeof_complex64_r3(x, size, ierror)
(  143)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  144)*      COMPLEX(REAL64), DIMENSION(1,1,*)::x
(  145)*        INTEGER, INTENT(OUT) :: size
(  146)*        INTEGER, INTENT(OUT) :: ierror
(  147)*      END SUBROUTINE MPI_Sizeof_complex64_r3
(  148)*
(  149)*      SUBROUTINE MPI_Sizeof_complex64_r4(x, size, ierror)
(  150)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  151)*      COMPLEX(REAL64), DIMENSION(1,1,1,*)::x
(  152)*        INTEGER, INTENT(OUT) :: size
(  153)*        INTEGER, INTENT(OUT) :: ierror
(  154)*      END SUBROUTINE MPI_Sizeof_complex64_r4
(  155)*
(  156)*      SUBROUTINE MPI_Sizeof_complex64_r5(x, size, ierror)
(  157)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  158)*      COMPLEX(REAL64), DIMENSION(1,1,1,1,*)::x
(  159)*        INTEGER, INTENT(OUT) :: size
(  160)*        INTEGER, INTENT(OUT) :: ierror
(  161)*      END SUBROUTINE MPI_Sizeof_complex64_r5
(  162)*
(  163)*      SUBROUTINE MPI_Sizeof_complex64_r6(x, size, ierror)
(  164)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  165)*      COMPLEX(REAL64), DIMENSION(1,1,1,1,1,*)::x
(  166)*        INTEGER, INTENT(OUT) :: size
(  167)*        INTEGER, INTENT(OUT) :: ierror
(  168)*      END SUBROUTINE MPI_Sizeof_complex64_r6
(  169)*
(  170)*      SUBROUTINE MPI_Sizeof_complex64_r7(x, size, ierror)
(  171)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  172)*      COMPLEX(REAL64), DIMENSION(1,1,1,1,1,1,*)::x
(  173)*        INTEGER, INTENT(OUT) :: size
(  174)*        INTEGER, INTENT(OUT) :: ierror
(  175)*      END SUBROUTINE MPI_Sizeof_complex64_r7
(  176)*
(  177)*      SUBROUTINE MPI_Sizeof_int16_scalar(x, size, ierror)
(  178)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  179)*      INTEGER(INT16)::x
(  180)*        INTEGER, INTENT(OUT) :: size
(  181)*        INTEGER, INTENT(OUT) :: ierror
(  182)*      END SUBROUTINE MPI_Sizeof_int16_scalar
(  183)*
(  184)*      SUBROUTINE MPI_Sizeof_int16_r1(x, size, ierror)
(  185)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  186)*      INTEGER(INT16), DIMENSION(*)::x






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 24

(  187)*        INTEGER, INTENT(OUT) :: size
(  188)*        INTEGER, INTENT(OUT) :: ierror
(  189)*      END SUBROUTINE MPI_Sizeof_int16_r1
(  190)*
(  191)*      SUBROUTINE MPI_Sizeof_int16_r2(x, size, ierror)
(  192)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  193)*      INTEGER(INT16), DIMENSION(1,*)::x
(  194)*        INTEGER, INTENT(OUT) :: size
(  195)*        INTEGER, INTENT(OUT) :: ierror
(  196)*      END SUBROUTINE MPI_Sizeof_int16_r2
(  197)*
(  198)*      SUBROUTINE MPI_Sizeof_int16_r3(x, size, ierror)
(  199)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  200)*      INTEGER(INT16), DIMENSION(1,1,*)::x
(  201)*        INTEGER, INTENT(OUT) :: size
(  202)*        INTEGER, INTENT(OUT) :: ierror
(  203)*      END SUBROUTINE MPI_Sizeof_int16_r3
(  204)*
(  205)*      SUBROUTINE MPI_Sizeof_int16_r4(x, size, ierror)
(  206)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  207)*      INTEGER(INT16), DIMENSION(1,1,1,*)::x
(  208)*        INTEGER, INTENT(OUT) :: size
(  209)*        INTEGER, INTENT(OUT) :: ierror
(  210)*      END SUBROUTINE MPI_Sizeof_int16_r4
(  211)*
(  212)*      SUBROUTINE MPI_Sizeof_int16_r5(x, size, ierror)
(  213)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  214)*      INTEGER(INT16), DIMENSION(1,1,1,1,*)::x
(  215)*        INTEGER, INTENT(OUT) :: size
(  216)*        INTEGER, INTENT(OUT) :: ierror
(  217)*      END SUBROUTINE MPI_Sizeof_int16_r5
(  218)*
(  219)*      SUBROUTINE MPI_Sizeof_int16_r6(x, size, ierror)
(  220)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  221)*      INTEGER(INT16), DIMENSION(1,1,1,1,1,*)::x
(  222)*        INTEGER, INTENT(OUT) :: size
(  223)*        INTEGER, INTENT(OUT) :: ierror
(  224)*      END SUBROUTINE MPI_Sizeof_int16_r6
(  225)*
(  226)*      SUBROUTINE MPI_Sizeof_int16_r7(x, size, ierror)
(  227)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  228)*      INTEGER(INT16), DIMENSION(1,1,1,1,1,1,*)::x
(  229)*        INTEGER, INTENT(OUT) :: size
(  230)*        INTEGER, INTENT(OUT) :: ierror
(  231)*      END SUBROUTINE MPI_Sizeof_int16_r7
(  232)*
(  233)*      SUBROUTINE MPI_Sizeof_int32_scalar(x, size, ierror)
(  234)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  235)*      INTEGER(INT32)::x
(  236)*        INTEGER, INTENT(OUT) :: size
(  237)*        INTEGER, INTENT(OUT) :: ierror
(  238)*      END SUBROUTINE MPI_Sizeof_int32_scalar
(  239)*
(  240)*      SUBROUTINE MPI_Sizeof_int32_r1(x, size, ierror)
(  241)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  242)*      INTEGER(INT32), DIMENSION(*)::x
(  243)*        INTEGER, INTENT(OUT) :: size
(  244)*        INTEGER, INTENT(OUT) :: ierror






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 25

(  245)*      END SUBROUTINE MPI_Sizeof_int32_r1
(  246)*
(  247)*      SUBROUTINE MPI_Sizeof_int32_r2(x, size, ierror)
(  248)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  249)*      INTEGER(INT32), DIMENSION(1,*)::x
(  250)*        INTEGER, INTENT(OUT) :: size
(  251)*        INTEGER, INTENT(OUT) :: ierror
(  252)*      END SUBROUTINE MPI_Sizeof_int32_r2
(  253)*
(  254)*      SUBROUTINE MPI_Sizeof_int32_r3(x, size, ierror)
(  255)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  256)*      INTEGER(INT32), DIMENSION(1,1,*)::x
(  257)*        INTEGER, INTENT(OUT) :: size
(  258)*        INTEGER, INTENT(OUT) :: ierror
(  259)*      END SUBROUTINE MPI_Sizeof_int32_r3
(  260)*
(  261)*      SUBROUTINE MPI_Sizeof_int32_r4(x, size, ierror)
(  262)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  263)*      INTEGER(INT32), DIMENSION(1,1,1,*)::x
(  264)*        INTEGER, INTENT(OUT) :: size
(  265)*        INTEGER, INTENT(OUT) :: ierror
(  266)*      END SUBROUTINE MPI_Sizeof_int32_r4
(  267)*
(  268)*      SUBROUTINE MPI_Sizeof_int32_r5(x, size, ierror)
(  269)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  270)*      INTEGER(INT32), DIMENSION(1,1,1,1,*)::x
(  271)*        INTEGER, INTENT(OUT) :: size
(  272)*        INTEGER, INTENT(OUT) :: ierror
(  273)*      END SUBROUTINE MPI_Sizeof_int32_r5
(  274)*
(  275)*      SUBROUTINE MPI_Sizeof_int32_r6(x, size, ierror)
(  276)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  277)*      INTEGER(INT32), DIMENSION(1,1,1,1,1,*)::x
(  278)*        INTEGER, INTENT(OUT) :: size
(  279)*        INTEGER, INTENT(OUT) :: ierror
(  280)*      END SUBROUTINE MPI_Sizeof_int32_r6
(  281)*
(  282)*      SUBROUTINE MPI_Sizeof_int32_r7(x, size, ierror)
(  283)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  284)*      INTEGER(INT32), DIMENSION(1,1,1,1,1,1,*)::x
(  285)*        INTEGER, INTENT(OUT) :: size
(  286)*        INTEGER, INTENT(OUT) :: ierror
(  287)*      END SUBROUTINE MPI_Sizeof_int32_r7
(  288)*
(  289)*      SUBROUTINE MPI_Sizeof_int64_scalar(x, size, ierror)
(  290)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  291)*      INTEGER(INT64)::x
(  292)*        INTEGER, INTENT(OUT) :: size
(  293)*        INTEGER, INTENT(OUT) :: ierror
(  294)*      END SUBROUTINE MPI_Sizeof_int64_scalar
(  295)*
(  296)*      SUBROUTINE MPI_Sizeof_int64_r1(x, size, ierror)
(  297)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  298)*      INTEGER(INT64), DIMENSION(*)::x
(  299)*        INTEGER, INTENT(OUT) :: size
(  300)*        INTEGER, INTENT(OUT) :: ierror
(  301)*      END SUBROUTINE MPI_Sizeof_int64_r1
(  302)*






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 26

(  303)*      SUBROUTINE MPI_Sizeof_int64_r2(x, size, ierror)
(  304)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  305)*      INTEGER(INT64), DIMENSION(1,*)::x
(  306)*        INTEGER, INTENT(OUT) :: size
(  307)*        INTEGER, INTENT(OUT) :: ierror
(  308)*      END SUBROUTINE MPI_Sizeof_int64_r2
(  309)*
(  310)*      SUBROUTINE MPI_Sizeof_int64_r3(x, size, ierror)
(  311)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  312)*      INTEGER(INT64), DIMENSION(1,1,*)::x
(  313)*        INTEGER, INTENT(OUT) :: size
(  314)*        INTEGER, INTENT(OUT) :: ierror
(  315)*      END SUBROUTINE MPI_Sizeof_int64_r3
(  316)*
(  317)*      SUBROUTINE MPI_Sizeof_int64_r4(x, size, ierror)
(  318)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  319)*      INTEGER(INT64), DIMENSION(1,1,1,*)::x
(  320)*        INTEGER, INTENT(OUT) :: size
(  321)*        INTEGER, INTENT(OUT) :: ierror
(  322)*      END SUBROUTINE MPI_Sizeof_int64_r4
(  323)*
(  324)*      SUBROUTINE MPI_Sizeof_int64_r5(x, size, ierror)
(  325)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  326)*      INTEGER(INT64), DIMENSION(1,1,1,1,*)::x
(  327)*        INTEGER, INTENT(OUT) :: size
(  328)*        INTEGER, INTENT(OUT) :: ierror
(  329)*      END SUBROUTINE MPI_Sizeof_int64_r5
(  330)*
(  331)*      SUBROUTINE MPI_Sizeof_int64_r6(x, size, ierror)
(  332)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  333)*      INTEGER(INT64), DIMENSION(1,1,1,1,1,*)::x
(  334)*        INTEGER, INTENT(OUT) :: size
(  335)*        INTEGER, INTENT(OUT) :: ierror
(  336)*      END SUBROUTINE MPI_Sizeof_int64_r6
(  337)*
(  338)*      SUBROUTINE MPI_Sizeof_int64_r7(x, size, ierror)
(  339)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  340)*      INTEGER(INT64), DIMENSION(1,1,1,1,1,1,*)::x
(  341)*        INTEGER, INTENT(OUT) :: size
(  342)*        INTEGER, INTENT(OUT) :: ierror
(  343)*      END SUBROUTINE MPI_Sizeof_int64_r7
(  344)*
(  345)*      SUBROUTINE MPI_Sizeof_int8_scalar(x, size, ierror)
(  346)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  347)*      INTEGER(INT8)::x
(  348)*        INTEGER, INTENT(OUT) :: size
(  349)*        INTEGER, INTENT(OUT) :: ierror
(  350)*      END SUBROUTINE MPI_Sizeof_int8_scalar
(  351)*
(  352)*      SUBROUTINE MPI_Sizeof_int8_r1(x, size, ierror)
(  353)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  354)*      INTEGER(INT8), DIMENSION(*)::x
(  355)*        INTEGER, INTENT(OUT) :: size
(  356)*        INTEGER, INTENT(OUT) :: ierror
(  357)*      END SUBROUTINE MPI_Sizeof_int8_r1
(  358)*
(  359)*      SUBROUTINE MPI_Sizeof_int8_r2(x, size, ierror)
(  360)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 27

(  361)*      INTEGER(INT8), DIMENSION(1,*)::x
(  362)*        INTEGER, INTENT(OUT) :: size
(  363)*        INTEGER, INTENT(OUT) :: ierror
(  364)*      END SUBROUTINE MPI_Sizeof_int8_r2
(  365)*
(  366)*      SUBROUTINE MPI_Sizeof_int8_r3(x, size, ierror)
(  367)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  368)*      INTEGER(INT8), DIMENSION(1,1,*)::x
(  369)*        INTEGER, INTENT(OUT) :: size
(  370)*        INTEGER, INTENT(OUT) :: ierror
(  371)*      END SUBROUTINE MPI_Sizeof_int8_r3
(  372)*
(  373)*      SUBROUTINE MPI_Sizeof_int8_r4(x, size, ierror)
(  374)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  375)*      INTEGER(INT8), DIMENSION(1,1,1,*)::x
(  376)*        INTEGER, INTENT(OUT) :: size
(  377)*        INTEGER, INTENT(OUT) :: ierror
(  378)*      END SUBROUTINE MPI_Sizeof_int8_r4
(  379)*
(  380)*      SUBROUTINE MPI_Sizeof_int8_r5(x, size, ierror)
(  381)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  382)*      INTEGER(INT8), DIMENSION(1,1,1,1,*)::x
(  383)*        INTEGER, INTENT(OUT) :: size
(  384)*        INTEGER, INTENT(OUT) :: ierror
(  385)*      END SUBROUTINE MPI_Sizeof_int8_r5
(  386)*
(  387)*      SUBROUTINE MPI_Sizeof_int8_r6(x, size, ierror)
(  388)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  389)*      INTEGER(INT8), DIMENSION(1,1,1,1,1,*)::x
(  390)*        INTEGER, INTENT(OUT) :: size
(  391)*        INTEGER, INTENT(OUT) :: ierror
(  392)*      END SUBROUTINE MPI_Sizeof_int8_r6
(  393)*
(  394)*      SUBROUTINE MPI_Sizeof_int8_r7(x, size, ierror)
(  395)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  396)*      INTEGER(INT8), DIMENSION(1,1,1,1,1,1,*)::x
(  397)*        INTEGER, INTENT(OUT) :: size
(  398)*        INTEGER, INTENT(OUT) :: ierror
(  399)*      END SUBROUTINE MPI_Sizeof_int8_r7
(  400)*
(  401)*      SUBROUTINE MPI_Sizeof_logical_scalar(x, size, ierror)
(  402)*      LOGICAL::x
(  403)*        INTEGER, INTENT(OUT) :: size
(  404)*        INTEGER, INTENT(OUT) :: ierror
(  405)*      END SUBROUTINE MPI_Sizeof_logical_scalar
(  406)*
(  407)*      SUBROUTINE MPI_Sizeof_logical_r1(x, size, ierror)
(  408)*      LOGICAL, DIMENSION(*)::x
(  409)*        INTEGER, INTENT(OUT) :: size
(  410)*        INTEGER, INTENT(OUT) :: ierror
(  411)*      END SUBROUTINE MPI_Sizeof_logical_r1
(  412)*
(  413)*      SUBROUTINE MPI_Sizeof_logical_r2(x, size, ierror)
(  414)*      LOGICAL, DIMENSION(1,*)::x
(  415)*        INTEGER, INTENT(OUT) :: size
(  416)*        INTEGER, INTENT(OUT) :: ierror
(  417)*      END SUBROUTINE MPI_Sizeof_logical_r2
(  418)*






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 28

(  419)*      SUBROUTINE MPI_Sizeof_logical_r3(x, size, ierror)
(  420)*      LOGICAL, DIMENSION(1,1,*)::x
(  421)*        INTEGER, INTENT(OUT) :: size
(  422)*        INTEGER, INTENT(OUT) :: ierror
(  423)*      END SUBROUTINE MPI_Sizeof_logical_r3
(  424)*
(  425)*      SUBROUTINE MPI_Sizeof_logical_r4(x, size, ierror)
(  426)*      LOGICAL, DIMENSION(1,1,1,*)::x
(  427)*        INTEGER, INTENT(OUT) :: size
(  428)*        INTEGER, INTENT(OUT) :: ierror
(  429)*      END SUBROUTINE MPI_Sizeof_logical_r4
(  430)*
(  431)*      SUBROUTINE MPI_Sizeof_logical_r5(x, size, ierror)
(  432)*      LOGICAL, DIMENSION(1,1,1,1,*)::x
(  433)*        INTEGER, INTENT(OUT) :: size
(  434)*        INTEGER, INTENT(OUT) :: ierror
(  435)*      END SUBROUTINE MPI_Sizeof_logical_r5
(  436)*
(  437)*      SUBROUTINE MPI_Sizeof_logical_r6(x, size, ierror)
(  438)*      LOGICAL, DIMENSION(1,1,1,1,1,*)::x
(  439)*        INTEGER, INTENT(OUT) :: size
(  440)*        INTEGER, INTENT(OUT) :: ierror
(  441)*      END SUBROUTINE MPI_Sizeof_logical_r6
(  442)*
(  443)*      SUBROUTINE MPI_Sizeof_logical_r7(x, size, ierror)
(  444)*      LOGICAL, DIMENSION(1,1,1,1,1,1,*)::x
(  445)*        INTEGER, INTENT(OUT) :: size
(  446)*        INTEGER, INTENT(OUT) :: ierror
(  447)*      END SUBROUTINE MPI_Sizeof_logical_r7
(  448)*
(  449)*      SUBROUTINE MPI_Sizeof_real32_scalar(x, size, ierror)
(  450)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  451)*      REAL(REAL32)::x
(  452)*        INTEGER, INTENT(OUT) :: size
(  453)*        INTEGER, INTENT(OUT) :: ierror
(  454)*      END SUBROUTINE MPI_Sizeof_real32_scalar
(  455)*
(  456)*      SUBROUTINE MPI_Sizeof_real32_r1(x, size, ierror)
(  457)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  458)*      REAL(REAL32), DIMENSION(*)::x
(  459)*        INTEGER, INTENT(OUT) :: size
(  460)*        INTEGER, INTENT(OUT) :: ierror
(  461)*      END SUBROUTINE MPI_Sizeof_real32_r1
(  462)*
(  463)*      SUBROUTINE MPI_Sizeof_real32_r2(x, size, ierror)
(  464)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  465)*      REAL(REAL32), DIMENSION(1,*)::x
(  466)*        INTEGER, INTENT(OUT) :: size
(  467)*        INTEGER, INTENT(OUT) :: ierror
(  468)*      END SUBROUTINE MPI_Sizeof_real32_r2
(  469)*
(  470)*      SUBROUTINE MPI_Sizeof_real32_r3(x, size, ierror)
(  471)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  472)*      REAL(REAL32), DIMENSION(1,1,*)::x
(  473)*        INTEGER, INTENT(OUT) :: size
(  474)*        INTEGER, INTENT(OUT) :: ierror
(  475)*      END SUBROUTINE MPI_Sizeof_real32_r3
(  476)*






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 29

(  477)*      SUBROUTINE MPI_Sizeof_real32_r4(x, size, ierror)
(  478)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  479)*      REAL(REAL32), DIMENSION(1,1,1,*)::x
(  480)*        INTEGER, INTENT(OUT) :: size
(  481)*        INTEGER, INTENT(OUT) :: ierror
(  482)*      END SUBROUTINE MPI_Sizeof_real32_r4
(  483)*
(  484)*      SUBROUTINE MPI_Sizeof_real32_r5(x, size, ierror)
(  485)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  486)*      REAL(REAL32), DIMENSION(1,1,1,1,*)::x
(  487)*        INTEGER, INTENT(OUT) :: size
(  488)*        INTEGER, INTENT(OUT) :: ierror
(  489)*      END SUBROUTINE MPI_Sizeof_real32_r5
(  490)*
(  491)*      SUBROUTINE MPI_Sizeof_real32_r6(x, size, ierror)
(  492)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  493)*      REAL(REAL32), DIMENSION(1,1,1,1,1,*)::x
(  494)*        INTEGER, INTENT(OUT) :: size
(  495)*        INTEGER, INTENT(OUT) :: ierror
(  496)*      END SUBROUTINE MPI_Sizeof_real32_r6
(  497)*
(  498)*      SUBROUTINE MPI_Sizeof_real32_r7(x, size, ierror)
(  499)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  500)*      REAL(REAL32), DIMENSION(1,1,1,1,1,1,*)::x
(  501)*        INTEGER, INTENT(OUT) :: size
(  502)*        INTEGER, INTENT(OUT) :: ierror
(  503)*      END SUBROUTINE MPI_Sizeof_real32_r7
(  504)*
(  505)*      SUBROUTINE MPI_Sizeof_real64_scalar(x, size, ierror)
(  506)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  507)*      REAL(REAL64)::x
(  508)*        INTEGER, INTENT(OUT) :: size
(  509)*        INTEGER, INTENT(OUT) :: ierror
(  510)*      END SUBROUTINE MPI_Sizeof_real64_scalar
(  511)*
(  512)*      SUBROUTINE MPI_Sizeof_real64_r1(x, size, ierror)
(  513)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  514)*      REAL(REAL64), DIMENSION(*)::x
(  515)*        INTEGER, INTENT(OUT) :: size
(  516)*        INTEGER, INTENT(OUT) :: ierror
(  517)*      END SUBROUTINE MPI_Sizeof_real64_r1
(  518)*
(  519)*      SUBROUTINE MPI_Sizeof_real64_r2(x, size, ierror)
(  520)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  521)*      REAL(REAL64), DIMENSION(1,*)::x
(  522)*        INTEGER, INTENT(OUT) :: size
(  523)*        INTEGER, INTENT(OUT) :: ierror
(  524)*      END SUBROUTINE MPI_Sizeof_real64_r2
(  525)*
(  526)*      SUBROUTINE MPI_Sizeof_real64_r3(x, size, ierror)
(  527)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  528)*      REAL(REAL64), DIMENSION(1,1,*)::x
(  529)*        INTEGER, INTENT(OUT) :: size
(  530)*        INTEGER, INTENT(OUT) :: ierror
(  531)*      END SUBROUTINE MPI_Sizeof_real64_r3
(  532)*
(  533)*      SUBROUTINE MPI_Sizeof_real64_r4(x, size, ierror)
(  534)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 30

(  535)*      REAL(REAL64), DIMENSION(1,1,1,*)::x
(  536)*        INTEGER, INTENT(OUT) :: size
(  537)*        INTEGER, INTENT(OUT) :: ierror
(  538)*      END SUBROUTINE MPI_Sizeof_real64_r4
(  539)*
(  540)*      SUBROUTINE MPI_Sizeof_real64_r5(x, size, ierror)
(  541)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  542)*      REAL(REAL64), DIMENSION(1,1,1,1,*)::x
(  543)*        INTEGER, INTENT(OUT) :: size
(  544)*        INTEGER, INTENT(OUT) :: ierror
(  545)*      END SUBROUTINE MPI_Sizeof_real64_r5
(  546)*
(  547)*      SUBROUTINE MPI_Sizeof_real64_r6(x, size, ierror)
(  548)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  549)*      REAL(REAL64), DIMENSION(1,1,1,1,1,*)::x
(  550)*        INTEGER, INTENT(OUT) :: size
(  551)*        INTEGER, INTENT(OUT) :: ierror
(  552)*      END SUBROUTINE MPI_Sizeof_real64_r6
(  553)*
(  554)*      SUBROUTINE MPI_Sizeof_real64_r7(x, size, ierror)
(  555)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  556)*      REAL(REAL64), DIMENSION(1,1,1,1,1,1,*)::x
(  557)*        INTEGER, INTENT(OUT) :: size
(  558)*        INTEGER, INTENT(OUT) :: ierror
(  559)*      END SUBROUTINE MPI_Sizeof_real64_r7
(  560)*
(  561)*      END INTERFACE MPI_Sizeof
(  562)*
(  563)*      INTERFACE PMPI_Sizeof
(  564)*
(  565)*      SUBROUTINE PMPI_Sizeof_character_scalar(x, size, ierror)
(  566)*      CHARACTER::x
(  567)*        INTEGER, INTENT(OUT) :: size
(  568)*        INTEGER, INTENT(OUT) :: ierror
(  569)*      END SUBROUTINE PMPI_Sizeof_character_scalar
(  570)*
(  571)*      SUBROUTINE PMPI_Sizeof_character_r1(x, size, ierror)
(  572)*      CHARACTER, DIMENSION(*)::x
(  573)*        INTEGER, INTENT(OUT) :: size
(  574)*        INTEGER, INTENT(OUT) :: ierror
(  575)*      END SUBROUTINE PMPI_Sizeof_character_r1
(  576)*
(  577)*      SUBROUTINE PMPI_Sizeof_character_r2(x, size, ierror)
(  578)*      CHARACTER, DIMENSION(1,*)::x
(  579)*        INTEGER, INTENT(OUT) :: size
(  580)*        INTEGER, INTENT(OUT) :: ierror
(  581)*      END SUBROUTINE PMPI_Sizeof_character_r2
(  582)*
(  583)*      SUBROUTINE PMPI_Sizeof_character_r3(x, size, ierror)
(  584)*      CHARACTER, DIMENSION(1,1,*)::x
(  585)*        INTEGER, INTENT(OUT) :: size
(  586)*        INTEGER, INTENT(OUT) :: ierror
(  587)*      END SUBROUTINE PMPI_Sizeof_character_r3
(  588)*
(  589)*      SUBROUTINE PMPI_Sizeof_character_r4(x, size, ierror)
(  590)*      CHARACTER, DIMENSION(1,1,1,*)::x
(  591)*        INTEGER, INTENT(OUT) :: size
(  592)*        INTEGER, INTENT(OUT) :: ierror






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 31

(  593)*      END SUBROUTINE PMPI_Sizeof_character_r4
(  594)*
(  595)*      SUBROUTINE PMPI_Sizeof_character_r5(x, size, ierror)
(  596)*      CHARACTER, DIMENSION(1,1,1,1,*)::x
(  597)*        INTEGER, INTENT(OUT) :: size
(  598)*        INTEGER, INTENT(OUT) :: ierror
(  599)*      END SUBROUTINE PMPI_Sizeof_character_r5
(  600)*
(  601)*      SUBROUTINE PMPI_Sizeof_character_r6(x, size, ierror)
(  602)*      CHARACTER, DIMENSION(1,1,1,1,1,*)::x
(  603)*        INTEGER, INTENT(OUT) :: size
(  604)*        INTEGER, INTENT(OUT) :: ierror
(  605)*      END SUBROUTINE PMPI_Sizeof_character_r6
(  606)*
(  607)*      SUBROUTINE PMPI_Sizeof_character_r7(x, size, ierror)
(  608)*      CHARACTER, DIMENSION(1,1,1,1,1,1,*)::x
(  609)*        INTEGER, INTENT(OUT) :: size
(  610)*        INTEGER, INTENT(OUT) :: ierror
(  611)*      END SUBROUTINE PMPI_Sizeof_character_r7
(  612)*
(  613)*      SUBROUTINE PMPI_Sizeof_complex32_scalar(x, size, ierror)
(  614)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  615)*      COMPLEX(REAL32)::x
(  616)*        INTEGER, INTENT(OUT) :: size
(  617)*        INTEGER, INTENT(OUT) :: ierror
(  618)*      END SUBROUTINE PMPI_Sizeof_complex32_scalar
(  619)*
(  620)*      SUBROUTINE PMPI_Sizeof_complex32_r1(x, size, ierror)
(  621)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  622)*      COMPLEX(REAL32), DIMENSION(*)::x
(  623)*        INTEGER, INTENT(OUT) :: size
(  624)*        INTEGER, INTENT(OUT) :: ierror
(  625)*      END SUBROUTINE PMPI_Sizeof_complex32_r1
(  626)*
(  627)*      SUBROUTINE PMPI_Sizeof_complex32_r2(x, size, ierror)
(  628)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  629)*      COMPLEX(REAL32), DIMENSION(1,*)::x
(  630)*        INTEGER, INTENT(OUT) :: size
(  631)*        INTEGER, INTENT(OUT) :: ierror
(  632)*      END SUBROUTINE PMPI_Sizeof_complex32_r2
(  633)*
(  634)*      SUBROUTINE PMPI_Sizeof_complex32_r3(x, size, ierror)
(  635)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  636)*      COMPLEX(REAL32), DIMENSION(1,1,*)::x
(  637)*        INTEGER, INTENT(OUT) :: size
(  638)*        INTEGER, INTENT(OUT) :: ierror
(  639)*      END SUBROUTINE PMPI_Sizeof_complex32_r3
(  640)*
(  641)*      SUBROUTINE PMPI_Sizeof_complex32_r4(x, size, ierror)
(  642)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  643)*      COMPLEX(REAL32), DIMENSION(1,1,1,*)::x
(  644)*        INTEGER, INTENT(OUT) :: size
(  645)*        INTEGER, INTENT(OUT) :: ierror
(  646)*      END SUBROUTINE PMPI_Sizeof_complex32_r4
(  647)*
(  648)*      SUBROUTINE PMPI_Sizeof_complex32_r5(x, size, ierror)
(  649)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  650)*      COMPLEX(REAL32), DIMENSION(1,1,1,1,*)::x






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 32

(  651)*        INTEGER, INTENT(OUT) :: size
(  652)*        INTEGER, INTENT(OUT) :: ierror
(  653)*      END SUBROUTINE PMPI_Sizeof_complex32_r5
(  654)*
(  655)*      SUBROUTINE PMPI_Sizeof_complex32_r6(x, size, ierror)
(  656)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  657)*      COMPLEX(REAL32), DIMENSION(1,1,1,1,1,*)::x
(  658)*        INTEGER, INTENT(OUT) :: size
(  659)*        INTEGER, INTENT(OUT) :: ierror
(  660)*      END SUBROUTINE PMPI_Sizeof_complex32_r6
(  661)*
(  662)*      SUBROUTINE PMPI_Sizeof_complex32_r7(x, size, ierror)
(  663)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
(  664)*      COMPLEX(REAL32), DIMENSION(1,1,1,1,1,1,*)::x
(  665)*        INTEGER, INTENT(OUT) :: size
(  666)*        INTEGER, INTENT(OUT) :: ierror
(  667)*      END SUBROUTINE PMPI_Sizeof_complex32_r7
(  668)*
(  669)*      SUBROUTINE PMPI_Sizeof_complex64_scalar(x, size, ierror)
(  670)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  671)*      COMPLEX(REAL64)::x
(  672)*        INTEGER, INTENT(OUT) :: size
(  673)*        INTEGER, INTENT(OUT) :: ierror
(  674)*      END SUBROUTINE PMPI_Sizeof_complex64_scalar
(  675)*
(  676)*      SUBROUTINE PMPI_Sizeof_complex64_r1(x, size, ierror)
(  677)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  678)*      COMPLEX(REAL64), DIMENSION(*)::x
(  679)*        INTEGER, INTENT(OUT) :: size
(  680)*        INTEGER, INTENT(OUT) :: ierror
(  681)*      END SUBROUTINE PMPI_Sizeof_complex64_r1
(  682)*
(  683)*      SUBROUTINE PMPI_Sizeof_complex64_r2(x, size, ierror)
(  684)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  685)*      COMPLEX(REAL64), DIMENSION(1,*)::x
(  686)*        INTEGER, INTENT(OUT) :: size
(  687)*        INTEGER, INTENT(OUT) :: ierror
(  688)*      END SUBROUTINE PMPI_Sizeof_complex64_r2
(  689)*
(  690)*      SUBROUTINE PMPI_Sizeof_complex64_r3(x, size, ierror)
(  691)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  692)*      COMPLEX(REAL64), DIMENSION(1,1,*)::x
(  693)*        INTEGER, INTENT(OUT) :: size
(  694)*        INTEGER, INTENT(OUT) :: ierror
(  695)*      END SUBROUTINE PMPI_Sizeof_complex64_r3
(  696)*
(  697)*      SUBROUTINE PMPI_Sizeof_complex64_r4(x, size, ierror)
(  698)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  699)*      COMPLEX(REAL64), DIMENSION(1,1,1,*)::x
(  700)*        INTEGER, INTENT(OUT) :: size
(  701)*        INTEGER, INTENT(OUT) :: ierror
(  702)*      END SUBROUTINE PMPI_Sizeof_complex64_r4
(  703)*
(  704)*      SUBROUTINE PMPI_Sizeof_complex64_r5(x, size, ierror)
(  705)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  706)*      COMPLEX(REAL64), DIMENSION(1,1,1,1,*)::x
(  707)*        INTEGER, INTENT(OUT) :: size
(  708)*        INTEGER, INTENT(OUT) :: ierror






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 33

(  709)*      END SUBROUTINE PMPI_Sizeof_complex64_r5
(  710)*
(  711)*      SUBROUTINE PMPI_Sizeof_complex64_r6(x, size, ierror)
(  712)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  713)*      COMPLEX(REAL64), DIMENSION(1,1,1,1,1,*)::x
(  714)*        INTEGER, INTENT(OUT) :: size
(  715)*        INTEGER, INTENT(OUT) :: ierror
(  716)*      END SUBROUTINE PMPI_Sizeof_complex64_r6
(  717)*
(  718)*      SUBROUTINE PMPI_Sizeof_complex64_r7(x, size, ierror)
(  719)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
(  720)*      COMPLEX(REAL64), DIMENSION(1,1,1,1,1,1,*)::x
(  721)*        INTEGER, INTENT(OUT) :: size
(  722)*        INTEGER, INTENT(OUT) :: ierror
(  723)*      END SUBROUTINE PMPI_Sizeof_complex64_r7
(  724)*
(  725)*      SUBROUTINE PMPI_Sizeof_int16_scalar(x, size, ierror)
(  726)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  727)*      INTEGER(INT16)::x
(  728)*        INTEGER, INTENT(OUT) :: size
(  729)*        INTEGER, INTENT(OUT) :: ierror
(  730)*      END SUBROUTINE PMPI_Sizeof_int16_scalar
(  731)*
(  732)*      SUBROUTINE PMPI_Sizeof_int16_r1(x, size, ierror)
(  733)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  734)*      INTEGER(INT16), DIMENSION(*)::x
(  735)*        INTEGER, INTENT(OUT) :: size
(  736)*        INTEGER, INTENT(OUT) :: ierror
(  737)*      END SUBROUTINE PMPI_Sizeof_int16_r1
(  738)*
(  739)*      SUBROUTINE PMPI_Sizeof_int16_r2(x, size, ierror)
(  740)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  741)*      INTEGER(INT16), DIMENSION(1,*)::x
(  742)*        INTEGER, INTENT(OUT) :: size
(  743)*        INTEGER, INTENT(OUT) :: ierror
(  744)*      END SUBROUTINE PMPI_Sizeof_int16_r2
(  745)*
(  746)*      SUBROUTINE PMPI_Sizeof_int16_r3(x, size, ierror)
(  747)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  748)*      INTEGER(INT16), DIMENSION(1,1,*)::x
(  749)*        INTEGER, INTENT(OUT) :: size
(  750)*        INTEGER, INTENT(OUT) :: ierror
(  751)*      END SUBROUTINE PMPI_Sizeof_int16_r3
(  752)*
(  753)*      SUBROUTINE PMPI_Sizeof_int16_r4(x, size, ierror)
(  754)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  755)*      INTEGER(INT16), DIMENSION(1,1,1,*)::x
(  756)*        INTEGER, INTENT(OUT) :: size
(  757)*        INTEGER, INTENT(OUT) :: ierror
(  758)*      END SUBROUTINE PMPI_Sizeof_int16_r4
(  759)*
(  760)*      SUBROUTINE PMPI_Sizeof_int16_r5(x, size, ierror)
(  761)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  762)*      INTEGER(INT16), DIMENSION(1,1,1,1,*)::x
(  763)*        INTEGER, INTENT(OUT) :: size
(  764)*        INTEGER, INTENT(OUT) :: ierror
(  765)*      END SUBROUTINE PMPI_Sizeof_int16_r5
(  766)*






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 34

(  767)*      SUBROUTINE PMPI_Sizeof_int16_r6(x, size, ierror)
(  768)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  769)*      INTEGER(INT16), DIMENSION(1,1,1,1,1,*)::x
(  770)*        INTEGER, INTENT(OUT) :: size
(  771)*        INTEGER, INTENT(OUT) :: ierror
(  772)*      END SUBROUTINE PMPI_Sizeof_int16_r6
(  773)*
(  774)*      SUBROUTINE PMPI_Sizeof_int16_r7(x, size, ierror)
(  775)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT16
(  776)*      INTEGER(INT16), DIMENSION(1,1,1,1,1,1,*)::x
(  777)*        INTEGER, INTENT(OUT) :: size
(  778)*        INTEGER, INTENT(OUT) :: ierror
(  779)*      END SUBROUTINE PMPI_Sizeof_int16_r7
(  780)*
(  781)*      SUBROUTINE PMPI_Sizeof_int32_scalar(x, size, ierror)
(  782)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  783)*      INTEGER(INT32)::x
(  784)*        INTEGER, INTENT(OUT) :: size
(  785)*        INTEGER, INTENT(OUT) :: ierror
(  786)*      END SUBROUTINE PMPI_Sizeof_int32_scalar
(  787)*
(  788)*      SUBROUTINE PMPI_Sizeof_int32_r1(x, size, ierror)
(  789)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  790)*      INTEGER(INT32), DIMENSION(*)::x
(  791)*        INTEGER, INTENT(OUT) :: size
(  792)*        INTEGER, INTENT(OUT) :: ierror
(  793)*      END SUBROUTINE PMPI_Sizeof_int32_r1
(  794)*
(  795)*      SUBROUTINE PMPI_Sizeof_int32_r2(x, size, ierror)
(  796)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  797)*      INTEGER(INT32), DIMENSION(1,*)::x
(  798)*        INTEGER, INTENT(OUT) :: size
(  799)*        INTEGER, INTENT(OUT) :: ierror
(  800)*      END SUBROUTINE PMPI_Sizeof_int32_r2
(  801)*
(  802)*      SUBROUTINE PMPI_Sizeof_int32_r3(x, size, ierror)
(  803)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  804)*      INTEGER(INT32), DIMENSION(1,1,*)::x
(  805)*        INTEGER, INTENT(OUT) :: size
(  806)*        INTEGER, INTENT(OUT) :: ierror
(  807)*      END SUBROUTINE PMPI_Sizeof_int32_r3
(  808)*
(  809)*      SUBROUTINE PMPI_Sizeof_int32_r4(x, size, ierror)
(  810)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  811)*      INTEGER(INT32), DIMENSION(1,1,1,*)::x
(  812)*        INTEGER, INTENT(OUT) :: size
(  813)*        INTEGER, INTENT(OUT) :: ierror
(  814)*      END SUBROUTINE PMPI_Sizeof_int32_r4
(  815)*
(  816)*      SUBROUTINE PMPI_Sizeof_int32_r5(x, size, ierror)
(  817)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  818)*      INTEGER(INT32), DIMENSION(1,1,1,1,*)::x
(  819)*        INTEGER, INTENT(OUT) :: size
(  820)*        INTEGER, INTENT(OUT) :: ierror
(  821)*      END SUBROUTINE PMPI_Sizeof_int32_r5
(  822)*
(  823)*      SUBROUTINE PMPI_Sizeof_int32_r6(x, size, ierror)
(  824)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 35

(  825)*      INTEGER(INT32), DIMENSION(1,1,1,1,1,*)::x
(  826)*        INTEGER, INTENT(OUT) :: size
(  827)*        INTEGER, INTENT(OUT) :: ierror
(  828)*      END SUBROUTINE PMPI_Sizeof_int32_r6
(  829)*
(  830)*      SUBROUTINE PMPI_Sizeof_int32_r7(x, size, ierror)
(  831)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT32
(  832)*      INTEGER(INT32), DIMENSION(1,1,1,1,1,1,*)::x
(  833)*        INTEGER, INTENT(OUT) :: size
(  834)*        INTEGER, INTENT(OUT) :: ierror
(  835)*      END SUBROUTINE PMPI_Sizeof_int32_r7
(  836)*
(  837)*      SUBROUTINE PMPI_Sizeof_int64_scalar(x, size, ierror)
(  838)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  839)*      INTEGER(INT64)::x
(  840)*        INTEGER, INTENT(OUT) :: size
(  841)*        INTEGER, INTENT(OUT) :: ierror
(  842)*      END SUBROUTINE PMPI_Sizeof_int64_scalar
(  843)*
(  844)*      SUBROUTINE PMPI_Sizeof_int64_r1(x, size, ierror)
(  845)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  846)*      INTEGER(INT64), DIMENSION(*)::x
(  847)*        INTEGER, INTENT(OUT) :: size
(  848)*        INTEGER, INTENT(OUT) :: ierror
(  849)*      END SUBROUTINE PMPI_Sizeof_int64_r1
(  850)*
(  851)*      SUBROUTINE PMPI_Sizeof_int64_r2(x, size, ierror)
(  852)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  853)*      INTEGER(INT64), DIMENSION(1,*)::x
(  854)*        INTEGER, INTENT(OUT) :: size
(  855)*        INTEGER, INTENT(OUT) :: ierror
(  856)*      END SUBROUTINE PMPI_Sizeof_int64_r2
(  857)*
(  858)*      SUBROUTINE PMPI_Sizeof_int64_r3(x, size, ierror)
(  859)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  860)*      INTEGER(INT64), DIMENSION(1,1,*)::x
(  861)*        INTEGER, INTENT(OUT) :: size
(  862)*        INTEGER, INTENT(OUT) :: ierror
(  863)*      END SUBROUTINE PMPI_Sizeof_int64_r3
(  864)*
(  865)*      SUBROUTINE PMPI_Sizeof_int64_r4(x, size, ierror)
(  866)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  867)*      INTEGER(INT64), DIMENSION(1,1,1,*)::x
(  868)*        INTEGER, INTENT(OUT) :: size
(  869)*        INTEGER, INTENT(OUT) :: ierror
(  870)*      END SUBROUTINE PMPI_Sizeof_int64_r4
(  871)*
(  872)*      SUBROUTINE PMPI_Sizeof_int64_r5(x, size, ierror)
(  873)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  874)*      INTEGER(INT64), DIMENSION(1,1,1,1,*)::x
(  875)*        INTEGER, INTENT(OUT) :: size
(  876)*        INTEGER, INTENT(OUT) :: ierror
(  877)*      END SUBROUTINE PMPI_Sizeof_int64_r5
(  878)*
(  879)*      SUBROUTINE PMPI_Sizeof_int64_r6(x, size, ierror)
(  880)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  881)*      INTEGER(INT64), DIMENSION(1,1,1,1,1,*)::x
(  882)*        INTEGER, INTENT(OUT) :: size






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 36

(  883)*        INTEGER, INTENT(OUT) :: ierror
(  884)*      END SUBROUTINE PMPI_Sizeof_int64_r6
(  885)*
(  886)*      SUBROUTINE PMPI_Sizeof_int64_r7(x, size, ierror)
(  887)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT64
(  888)*      INTEGER(INT64), DIMENSION(1,1,1,1,1,1,*)::x
(  889)*        INTEGER, INTENT(OUT) :: size
(  890)*        INTEGER, INTENT(OUT) :: ierror
(  891)*      END SUBROUTINE PMPI_Sizeof_int64_r7
(  892)*
(  893)*      SUBROUTINE PMPI_Sizeof_int8_scalar(x, size, ierror)
(  894)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  895)*      INTEGER(INT8)::x
(  896)*        INTEGER, INTENT(OUT) :: size
(  897)*        INTEGER, INTENT(OUT) :: ierror
(  898)*      END SUBROUTINE PMPI_Sizeof_int8_scalar
(  899)*
(  900)*      SUBROUTINE PMPI_Sizeof_int8_r1(x, size, ierror)
(  901)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  902)*      INTEGER(INT8), DIMENSION(*)::x
(  903)*        INTEGER, INTENT(OUT) :: size
(  904)*        INTEGER, INTENT(OUT) :: ierror
(  905)*      END SUBROUTINE PMPI_Sizeof_int8_r1
(  906)*
(  907)*      SUBROUTINE PMPI_Sizeof_int8_r2(x, size, ierror)
(  908)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  909)*      INTEGER(INT8), DIMENSION(1,*)::x
(  910)*        INTEGER, INTENT(OUT) :: size
(  911)*        INTEGER, INTENT(OUT) :: ierror
(  912)*      END SUBROUTINE PMPI_Sizeof_int8_r2
(  913)*
(  914)*      SUBROUTINE PMPI_Sizeof_int8_r3(x, size, ierror)
(  915)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  916)*      INTEGER(INT8), DIMENSION(1,1,*)::x
(  917)*        INTEGER, INTENT(OUT) :: size
(  918)*        INTEGER, INTENT(OUT) :: ierror
(  919)*      END SUBROUTINE PMPI_Sizeof_int8_r3
(  920)*
(  921)*      SUBROUTINE PMPI_Sizeof_int8_r4(x, size, ierror)
(  922)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  923)*      INTEGER(INT8), DIMENSION(1,1,1,*)::x
(  924)*        INTEGER, INTENT(OUT) :: size
(  925)*        INTEGER, INTENT(OUT) :: ierror
(  926)*      END SUBROUTINE PMPI_Sizeof_int8_r4
(  927)*
(  928)*      SUBROUTINE PMPI_Sizeof_int8_r5(x, size, ierror)
(  929)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  930)*      INTEGER(INT8), DIMENSION(1,1,1,1,*)::x
(  931)*        INTEGER, INTENT(OUT) :: size
(  932)*        INTEGER, INTENT(OUT) :: ierror
(  933)*      END SUBROUTINE PMPI_Sizeof_int8_r5
(  934)*
(  935)*      SUBROUTINE PMPI_Sizeof_int8_r6(x, size, ierror)
(  936)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  937)*      INTEGER(INT8), DIMENSION(1,1,1,1,1,*)::x
(  938)*        INTEGER, INTENT(OUT) :: size
(  939)*        INTEGER, INTENT(OUT) :: ierror
(  940)*      END SUBROUTINE PMPI_Sizeof_int8_r6






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 37

(  941)*
(  942)*      SUBROUTINE PMPI_Sizeof_int8_r7(x, size, ierror)
(  943)*        USE, INTRINSIC :: iso_fortran_env, ONLY: INT8
(  944)*      INTEGER(INT8), DIMENSION(1,1,1,1,1,1,*)::x
(  945)*        INTEGER, INTENT(OUT) :: size
(  946)*        INTEGER, INTENT(OUT) :: ierror
(  947)*      END SUBROUTINE PMPI_Sizeof_int8_r7
(  948)*
(  949)*      SUBROUTINE PMPI_Sizeof_logical_scalar(x, size, ierror)
(  950)*      LOGICAL::x
(  951)*        INTEGER, INTENT(OUT) :: size
(  952)*        INTEGER, INTENT(OUT) :: ierror
(  953)*      END SUBROUTINE PMPI_Sizeof_logical_scalar
(  954)*
(  955)*      SUBROUTINE PMPI_Sizeof_logical_r1(x, size, ierror)
(  956)*      LOGICAL, DIMENSION(*)::x
(  957)*        INTEGER, INTENT(OUT) :: size
(  958)*        INTEGER, INTENT(OUT) :: ierror
(  959)*      END SUBROUTINE PMPI_Sizeof_logical_r1
(  960)*
(  961)*      SUBROUTINE PMPI_Sizeof_logical_r2(x, size, ierror)
(  962)*      LOGICAL, DIMENSION(1,*)::x
(  963)*        INTEGER, INTENT(OUT) :: size
(  964)*        INTEGER, INTENT(OUT) :: ierror
(  965)*      END SUBROUTINE PMPI_Sizeof_logical_r2
(  966)*
(  967)*      SUBROUTINE PMPI_Sizeof_logical_r3(x, size, ierror)
(  968)*      LOGICAL, DIMENSION(1,1,*)::x
(  969)*        INTEGER, INTENT(OUT) :: size
(  970)*        INTEGER, INTENT(OUT) :: ierror
(  971)*      END SUBROUTINE PMPI_Sizeof_logical_r3
(  972)*
(  973)*      SUBROUTINE PMPI_Sizeof_logical_r4(x, size, ierror)
(  974)*      LOGICAL, DIMENSION(1,1,1,*)::x
(  975)*        INTEGER, INTENT(OUT) :: size
(  976)*        INTEGER, INTENT(OUT) :: ierror
(  977)*      END SUBROUTINE PMPI_Sizeof_logical_r4
(  978)*
(  979)*      SUBROUTINE PMPI_Sizeof_logical_r5(x, size, ierror)
(  980)*      LOGICAL, DIMENSION(1,1,1,1,*)::x
(  981)*        INTEGER, INTENT(OUT) :: size
(  982)*        INTEGER, INTENT(OUT) :: ierror
(  983)*      END SUBROUTINE PMPI_Sizeof_logical_r5
(  984)*
(  985)*      SUBROUTINE PMPI_Sizeof_logical_r6(x, size, ierror)
(  986)*      LOGICAL, DIMENSION(1,1,1,1,1,*)::x
(  987)*        INTEGER, INTENT(OUT) :: size
(  988)*        INTEGER, INTENT(OUT) :: ierror
(  989)*      END SUBROUTINE PMPI_Sizeof_logical_r6
(  990)*
(  991)*      SUBROUTINE PMPI_Sizeof_logical_r7(x, size, ierror)
(  992)*      LOGICAL, DIMENSION(1,1,1,1,1,1,*)::x
(  993)*        INTEGER, INTENT(OUT) :: size
(  994)*        INTEGER, INTENT(OUT) :: ierror
(  995)*      END SUBROUTINE PMPI_Sizeof_logical_r7
(  996)*
(  997)*      SUBROUTINE PMPI_Sizeof_real32_scalar(x, size, ierror)
(  998)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 38

(  999)*      REAL(REAL32)::x
( 1000)*        INTEGER, INTENT(OUT) :: size
( 1001)*        INTEGER, INTENT(OUT) :: ierror
( 1002)*      END SUBROUTINE PMPI_Sizeof_real32_scalar
( 1003)*
( 1004)*      SUBROUTINE PMPI_Sizeof_real32_r1(x, size, ierror)
( 1005)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1006)*      REAL(REAL32), DIMENSION(*)::x
( 1007)*        INTEGER, INTENT(OUT) :: size
( 1008)*        INTEGER, INTENT(OUT) :: ierror
( 1009)*      END SUBROUTINE PMPI_Sizeof_real32_r1
( 1010)*
( 1011)*      SUBROUTINE PMPI_Sizeof_real32_r2(x, size, ierror)
( 1012)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1013)*      REAL(REAL32), DIMENSION(1,*)::x
( 1014)*        INTEGER, INTENT(OUT) :: size
( 1015)*        INTEGER, INTENT(OUT) :: ierror
( 1016)*      END SUBROUTINE PMPI_Sizeof_real32_r2
( 1017)*
( 1018)*      SUBROUTINE PMPI_Sizeof_real32_r3(x, size, ierror)
( 1019)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1020)*      REAL(REAL32), DIMENSION(1,1,*)::x
( 1021)*        INTEGER, INTENT(OUT) :: size
( 1022)*        INTEGER, INTENT(OUT) :: ierror
( 1023)*      END SUBROUTINE PMPI_Sizeof_real32_r3
( 1024)*
( 1025)*      SUBROUTINE PMPI_Sizeof_real32_r4(x, size, ierror)
( 1026)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1027)*      REAL(REAL32), DIMENSION(1,1,1,*)::x
( 1028)*        INTEGER, INTENT(OUT) :: size
( 1029)*        INTEGER, INTENT(OUT) :: ierror
( 1030)*      END SUBROUTINE PMPI_Sizeof_real32_r4
( 1031)*
( 1032)*      SUBROUTINE PMPI_Sizeof_real32_r5(x, size, ierror)
( 1033)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1034)*      REAL(REAL32), DIMENSION(1,1,1,1,*)::x
( 1035)*        INTEGER, INTENT(OUT) :: size
( 1036)*        INTEGER, INTENT(OUT) :: ierror
( 1037)*      END SUBROUTINE PMPI_Sizeof_real32_r5
( 1038)*
( 1039)*      SUBROUTINE PMPI_Sizeof_real32_r6(x, size, ierror)
( 1040)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1041)*      REAL(REAL32), DIMENSION(1,1,1,1,1,*)::x
( 1042)*        INTEGER, INTENT(OUT) :: size
( 1043)*        INTEGER, INTENT(OUT) :: ierror
( 1044)*      END SUBROUTINE PMPI_Sizeof_real32_r6
( 1045)*
( 1046)*      SUBROUTINE PMPI_Sizeof_real32_r7(x, size, ierror)
( 1047)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL32
( 1048)*      REAL(REAL32), DIMENSION(1,1,1,1,1,1,*)::x
( 1049)*        INTEGER, INTENT(OUT) :: size
( 1050)*        INTEGER, INTENT(OUT) :: ierror
( 1051)*      END SUBROUTINE PMPI_Sizeof_real32_r7
( 1052)*
( 1053)*      SUBROUTINE PMPI_Sizeof_real64_scalar(x, size, ierror)
( 1054)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1055)*      REAL(REAL64)::x
( 1056)*        INTEGER, INTENT(OUT) :: size






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 39

( 1057)*        INTEGER, INTENT(OUT) :: ierror
( 1058)*      END SUBROUTINE PMPI_Sizeof_real64_scalar
( 1059)*
( 1060)*      SUBROUTINE PMPI_Sizeof_real64_r1(x, size, ierror)
( 1061)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1062)*      REAL(REAL64), DIMENSION(*)::x
( 1063)*        INTEGER, INTENT(OUT) :: size
( 1064)*        INTEGER, INTENT(OUT) :: ierror
( 1065)*      END SUBROUTINE PMPI_Sizeof_real64_r1
( 1066)*
( 1067)*      SUBROUTINE PMPI_Sizeof_real64_r2(x, size, ierror)
( 1068)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1069)*      REAL(REAL64), DIMENSION(1,*)::x
( 1070)*        INTEGER, INTENT(OUT) :: size
( 1071)*        INTEGER, INTENT(OUT) :: ierror
( 1072)*      END SUBROUTINE PMPI_Sizeof_real64_r2
( 1073)*
( 1074)*      SUBROUTINE PMPI_Sizeof_real64_r3(x, size, ierror)
( 1075)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1076)*      REAL(REAL64), DIMENSION(1,1,*)::x
( 1077)*        INTEGER, INTENT(OUT) :: size
( 1078)*        INTEGER, INTENT(OUT) :: ierror
( 1079)*      END SUBROUTINE PMPI_Sizeof_real64_r3
( 1080)*
( 1081)*      SUBROUTINE PMPI_Sizeof_real64_r4(x, size, ierror)
( 1082)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1083)*      REAL(REAL64), DIMENSION(1,1,1,*)::x
( 1084)*        INTEGER, INTENT(OUT) :: size
( 1085)*        INTEGER, INTENT(OUT) :: ierror
( 1086)*      END SUBROUTINE PMPI_Sizeof_real64_r4
( 1087)*
( 1088)*      SUBROUTINE PMPI_Sizeof_real64_r5(x, size, ierror)
( 1089)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1090)*      REAL(REAL64), DIMENSION(1,1,1,1,*)::x
( 1091)*        INTEGER, INTENT(OUT) :: size
( 1092)*        INTEGER, INTENT(OUT) :: ierror
( 1093)*      END SUBROUTINE PMPI_Sizeof_real64_r5
( 1094)*
( 1095)*      SUBROUTINE PMPI_Sizeof_real64_r6(x, size, ierror)
( 1096)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1097)*      REAL(REAL64), DIMENSION(1,1,1,1,1,*)::x
( 1098)*        INTEGER, INTENT(OUT) :: size
( 1099)*        INTEGER, INTENT(OUT) :: ierror
( 1100)*      END SUBROUTINE PMPI_Sizeof_real64_r6
( 1101)*
( 1102)*      SUBROUTINE PMPI_Sizeof_real64_r7(x, size, ierror)
( 1103)*        USE, INTRINSIC :: iso_fortran_env, ONLY: REAL64
( 1104)*      REAL(REAL64), DIMENSION(1,1,1,1,1,1,*)::x
( 1105)*        INTEGER, INTENT(OUT) :: size
( 1106)*        INTEGER, INTENT(OUT) :: ierror
( 1107)*      END SUBROUTINE PMPI_Sizeof_real64_r7
( 1108)*
( 1109)*      END INTERFACE PMPI_Sizeof
( 1110)*
(   33)   INTEGER(KIND=JPIM) ZSTK(N)
(   34)   INTEGER(KIND=JPIM) II,ZOFF,NNN
(   35)   INTEGER*8 ZTMP
(   36)   NT=OMP_GET_THREAD_NUM()






NVFORTRAN (Version     23.1)          02/24/2023  13:33:17      page 40

(   37)   MT=OMP_GET_MAX_THREADS()
(   38)   ZSTK(1:NN)=9999
(   39)   IF(NT>0) THEN
(   40)     ZTMP=LOC(ZSTK(1))
(   41)     STACK_OWRITE_BEG(NT)=ZTMP
(   42)     ZOFF=(STACK_OWRITE_BEG(NT)-ZTMP)/4
(   43) !   write(0,*) "STACK_OWRITE_SET: nt,stack_owrite_beg,loc(zstk(1)),zoff=",nt,stack_owrite_beg(nt),loc(zstk(1)),zoff
(   44) !   do ii=1,2
(   45) !     if(zstk(zoff+ii).ne.9999) then
(   46) !       write(0,*) "STACK_OWRITE_SET: nt,ii,zstk=",nt,ii,zstk(zoff+ii)
(   47) !     endif
(   48) !   enddo
(   49) !-----deliberate overwrite of neighbouring stack---------
(   50)     NNN=N+NN/2
(   51)     WRITE(0,*) "mt,nnn=",MT,NNN
(   52)     IF(NT<MT-1) ZSTK(NNN)=0
(   53) !-----------------------------------
(   54)   ENDIF
(   55)   CALL STACK_OWRITE_DUM(ZSTK)
(   56)   END SUBROUTINE STACK_OWRITE_SET
(   57) # 58 "stack_overwrite.F90"
(   58)   SUBROUTINE STACK_OWRITE_CHK
(   59)   IMPLICIT NONE
(   60)   INTEGER(KIND=JPIM) OMP_GET_THREAD_NUM
(   61)   INTEGER(KIND=JPIM) N,NN,NT,II
(   62)   INTEGER(KIND=JPIM) ZOFF
(   63)   PARAMETER(N=25*1000*1000)
(   64)   PARAMETER(NN=5*1000*1000)
(   65)   INTEGER(KIND=JPIM) ZSTK(N)
(   66)   INTEGER*8 ZTMP
(   67)   NT=OMP_GET_THREAD_NUM()
(   68)   IF(NT>0) THEN
(   69)     ZTMP=LOC(ZSTK(1))
(   70)     ZOFF=(STACK_OWRITE_BEG(NT)-ZTMP)/4
(   71) !   write(0,*) "STACK_OWRITE_CHK: nt,owrite_beg,loc(zstk(1)),zoff=",nt,stack_owrite_beg(nt),loc(zstk(1)),zoff
(   72) !   write(0,*) "STACK_OWRITE_CHK: nt,1,zstk=",nt,1,zstk(zoff+1)
(   73)     DO II=1,NN
(   74)       IF(ZSTK(ZOFF+II).NE.9999) THEN
(   75)         WRITE(0,*) "STACK_OWRITE_CHK: nt,ii,zstk=",NT,II,ZSTK(ZOFF+II)
(   76)       ENDIF
(   77)     ENDDO
(   78) !   write(0,*) "STACK_OWRITE_CHK: nt,NN,zstk=",nt,NN,zstk(zoff+NN)
(   79)   ENDIF
(   80)   END SUBROUTINE STACK_OWRITE_CHK
(   81)   
(   82)   SUBROUTINE STACK_OWRITE_DUM(IDUM)
(   83)   INTEGER(KIND=JPIM) IDUM(N)
(   84)   END SUBROUTINE STACK_OWRITE_DUM
(   85) # 86 "stack_overwrite.F90"
(   86) END MODULE STACK_OVERWRITE
