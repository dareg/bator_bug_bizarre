


NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: n_compat.F90

(    1) 
(    2) 
(    3) 
(    4) 
(    5) 
(    6) !
(    7) !*****************************************************************************
(    8) !**
(    9) !  NAME
(   10) !
(   11) !      INTEGER FUNCTION NR_COMPAT_EC(value)
(   12) !      REAL                   value(2)
(   13) !      INTEGER FUNCTION ND_COMPAT_EC(value)
(   14) !      DOUBLE PRECISION   value(2)
(   15) !
(   16) !  DESCRIPTION
(   17) !
(   18) !      The actual name of the routine is given in the "#defines" above.
(   19) !      The user calls these functions to ensure that his compilation is
(   20) !      compatible with that of the library in which these functions reside.
(   21) !
(   22) !      Problems arise on systems that allow different precisions for REAL and
(   23) !      DOUBLE-PRECISION variables, according to what options are specified to
(   24) !      the Fortran compiler. These routines go some way to prevent this. See
(   25) !      the example below for more information.
(   26) !
(   27) !  PARAMETER
(   28) !
(   29) !      value - A 2-element array of type:
(   30) !                                        REAL             (for NR_COMPAT_EC)






NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 3

(   31) !                                        DOUBLE PRECISION (for ND_COMPAT_EC)
(   32) !
(   33) !              Both elements of this array must be set to the value 1.0.
(   34) !
(   35) !  RETURN VALUE
(   36) !
(   37) !      An INTEGER value greater than 0, is a good return. See the example.
(   38) !
(   39) !      <0 - The precision of REAL (or DOUBLE PRECISION) variables in the
(   40) !           calling routine is not compatible with the precision of these
(   41) !           variables when this routine was compiled (within the library).
(   42) !           The ABSOLUTE of the value returned is the number of bytes of
(   43) !           storage such a variable occupies in this routine. The values are:
(   44) !                           -4, -8, -16
(   45) !
(   46) !       0 - A mistake has been made when specifying the "value" array. This
(   47) !           usually means that a simple variable was passed, instead of a
(   48) !           2-element array, or that one or both of the array elements does
(   49) !           not contain the value 1.0.
(   50) !
(   51) !      >0 - The precision of REAL (or DOUBLE PRECISION) variables in the
(   52) !           calling routine is compatible with the precision of these
(   53) !           variables when this routine was compiled (within the library).
(   54) !           The actual value returned is the number of bytes of storage that
(   55) !           such a variable occupies. The values are:
(   56) !                           4, 8 or 16
(   57) !  EXAMPLE
(   58) !
(   59) !            REAL              x(2)
(   60) !            DOUBLE PRECISION  d(2)
(   61) !
(   62) !            DO 10 i = 1, 2
(   63) !            x(i) = 1.0
(   64) !        10  d(i) = 1.0
(   65) !
(   66) !      C  Check that ECLIB was compiled with the same precision for REALs and
(   67) !      C  DOUBLE PRECISION as we are being compiled.
(   68) !
(   69) !            nr = nr_compat_ec(x)
(   70) !            nd = nd_compat_ec(d)
(   71) !
(   72) !            IF (nr .LE. 0  .OR.  nd .LE. 0) THEN
(   73) !               CALL abort('Compilation incompatible with ECLIB')
(   74) !            ENDIF
(   75) !**
(   76) !*****************************************************************************
(   77) !
(   78) 
(   79)       FUNCTION NR_COMPAT_EC(VALUE)
(   80) 
(   81)       IMPLICIT NONE
(   82) 
(   83)       INTEGER :: NR_COMPAT_EC
(   84) 
(   85)       REAL(KIND=4) :: VALUE
(   86)       REAL(KIND=4) :: VAL
(   87)       INTEGER :: NVAL,   NVALUE
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 4

(   89)       VAL = 1.0_4
(   90) 
(   91)       NVAL   = STORAGE_SIZE(VAL)/8
(   92)       NVALUE = STORAGE_SIZE(VALUE)/8
(   93) 
(   94)       IF (NVAL   .EQ. 0) THEN
(   95)          PRINT *, 'ROUTINE: ', 'NR_COMPAT_EC',                          &
(   96)      &            ': INTERNAL ERROR'
(   97)          NR_COMPAT_EC = 0
(   98)          RETURN
(   99)       ENDIF
(  100) 
(  101)       IF (NVALUE .EQ. 0) THEN
(  102)          PRINT *, 'ROUTINE: ', 'NR_COMPAT_EC',                          &
(  103)      &            ': CALLED WITH WRONG PARAMETER'
(  104)          NR_COMPAT_EC = 0
(  105)          RETURN
(  106)       ENDIF
(  107) 
(  108)       IF (NVALUE .EQ. NVAL) THEN
(  109)          NR_COMPAT_EC = NVALUE
(  110)          RETURN
(  111)       ENDIF
(  112) 
(  113)       PRINT *, 'ROUTINE: ', 'NR_COMPAT_EC',                             &
(  114)      &         ': INCOMPATIBLE SINGLE PRECISION (',                     &
(  115)      &         nvalue, 'Bytes, should be ', nval, ')'
(  116) 
(  117)       NR_COMPAT_EC = -NVAL
(  118)       RETURN
(  119) 
(  120)       ENDFUNCTION NR_COMPAT_EC
(  121) !
(  122) !
(  123)       FUNCTION ND_COMPAT_EC(VALUE)
(  124) 
(  125)       IMPLICIT NONE
(  126) 
(  127)       INTEGER :: ND_COMPAT_EC
(  128)       REAL(KIND=8) :: VALUE
(  129)       REAL(KIND=8) :: VAL
(  130) 
(  131) 
(  132) 
(  133) 
(  134)       INTEGER :: NVAL,   NVALUE
(  135) 
(  136)       VAL = 1.0_8
(  137) 
(  138)       NVAL   = STORAGE_SIZE(VAL)/8
(  139)       NVALUE = STORAGE_SIZE(VALUE)/8
(  140) 
(  141)       IF (NVAL   .EQ. 0) THEN
(  142)          PRINT *, 'ROUTINE: ', 'ND_COMPAT_EC',                          &
(  143)      &            ': INTERNAL ERROR'
(  144)          ND_COMPAT_EC = 0
(  145)          RETURN
(  146)       ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 5

(  147) 
(  148)       IF (NVALUE .EQ. 0) THEN
(  149)          PRINT *, 'ROUTINE: ', 'ND_COMPAT_EC',                          &
(  150)      &            ': CALLED WITH WRONG PARAMETER'
(  151)          ND_COMPAT_EC = 0
(  152)          RETURN
(  153)       ENDIF
(  154) 
(  155)       IF (NVALUE .EQ. NVAL) THEN
(  156)          ND_COMPAT_EC = NVALUE
(  157)          RETURN
(  158)       ENDIF
(  159) 
(  160)       PRINT *, 'ROUTINE: ', 'ND_COMPAT_EC',                             &
(  161)      &         ': INCOMPATIBLE DOUBLE PRECISION (',                     &
(  162)      &         nvalue, 'Bytes, should be ', nval, ')'
(  163) 
(  164)       ND_COMPAT_EC = -NVAL
(  165)       ENDFUNCTION ND_COMPAT_EC













































NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 6

(    1) # 1 "n_compat.F90"
(    1) # 6 "n_compat.F90"
(    6) !
(    7) !*****************************************************************************
(    8) !**
(    9) !  NAME
(   10) !
(   11) !      INTEGER FUNCTION NR_COMPAT_EC(value)
(   12) !      REAL                   value(2)
(   13) !      INTEGER FUNCTION ND_COMPAT_EC(value)
(   14) !      DOUBLE PRECISION   value(2)
(   15) !
(   16) !  DESCRIPTION
(   17) !
(   18) !      The actual name of the routine is given in the "#defines" above.
(   19) !      The user calls these functions to ensure that his compilation is
(   20) !      compatible with that of the library in which these functions reside.
(   21) !
(   22) !      Problems arise on systems that allow different precisions for REAL and
(   23) !      DOUBLE-PRECISION variables, according to what options are specified to
(   24) !      the Fortran compiler. These routines go some way to prevent this. See
(   25) !      the example below for more information.
(   26) !
(   27) !  PARAMETER
(   28) !
(   29) !      value - A 2-element array of type:
(   30) !                                        REAL             (for NR_COMPAT_EC)
(   31) !                                        DOUBLE PRECISION (for ND_COMPAT_EC)
(   32) !
(   33) !              Both elements of this array must be set to the value 1.0.
(   34) !
(   35) !  RETURN VALUE
(   36) !
(   37) !      An INTEGER value greater than 0, is a good return. See the example.
(   38) !
(   39) !      <0 - The precision of REAL (or DOUBLE PRECISION) variables in the
(   40) !           calling routine is not compatible with the precision of these
(   41) !           variables when this routine was compiled (within the library).
(   42) !           The ABSOLUTE of the value returned is the number of bytes of
(   43) !           storage such a variable occupies in this routine. The values are:
(   44) !                           -4, -8, -16
(   45) !
(   46) !       0 - A mistake has been made when specifying the "value" array. This
(   47) !           usually means that a simple variable was passed, instead of a
(   48) !           2-element array, or that one or both of the array elements does
(   49) !           not contain the value 1.0.
(   50) !
(   51) !      >0 - The precision of REAL (or DOUBLE PRECISION) variables in the
(   52) !           calling routine is compatible with the precision of these
(   53) !           variables when this routine was compiled (within the library).
(   54) !           The actual value returned is the number of bytes of storage that
(   55) !           such a variable occupies. The values are:
(   56) !                           4, 8 or 16
(   57) !  EXAMPLE
(   58) !
(   59) !            REAL              x(2)
(   60) !            DOUBLE PRECISION  d(2)
(   61) !






NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 7

(   62) !            DO 10 i = 1, 2
(   63) !            x(i) = 1.0
(   64) !        10  d(i) = 1.0
(   65) !
(   66) !      C  Check that ECLIB was compiled with the same precision for REALs and
(   67) !      C  DOUBLE PRECISION as we are being compiled.
(   68) !
(   69) !            nr = nr_compat_ec(x)
(   70) !            nd = nd_compat_ec(d)
(   71) !
(   72) !            IF (nr .LE. 0  .OR.  nd .LE. 0) THEN
(   73) !               CALL abort('Compilation incompatible with ECLIB')
(   74) !            ENDIF
(   75) !**
(   76) !*****************************************************************************
(   77) !
(   78) # 79 "n_compat.F90"
(   79)       FUNCTION NR_COMPAT_EC(VALUE)
(   80) # 81 "n_compat.F90"
(   81)       IMPLICIT NONE
(   82) # 83 "n_compat.F90"
(   83)       INTEGER :: NR_COMPAT_EC
(   84) # 85 "n_compat.F90"
(   85)       REAL(KIND=4) :: VALUE
(   86)       REAL(KIND=4) :: VAL
(   87)       INTEGER :: NVAL,   NVALUE
(   88) # 89 "n_compat.F90"
(   89)       VAL = 1.0_4
(   90) # 91 "n_compat.F90"
(   91)       NVAL   = STORAGE_SIZE(VAL)/8
(   92)       NVALUE = STORAGE_SIZE(VALUE)/8
(   93) # 94 "n_compat.F90"
(   94)       IF (NVAL   .EQ. 0) THEN
(   95)          PRINT *, 'ROUTINE: ', 'NR_COMPAT_EC',                          &
(   96)      &            ': INTERNAL ERROR'
(   97)          NR_COMPAT_EC = 0
(   98)          RETURN
(   99)       ENDIF
(  100) # 101 "n_compat.F90"
(  101)       IF (NVALUE .EQ. 0) THEN
(  102)          PRINT *, 'ROUTINE: ', 'NR_COMPAT_EC',                          &
(  103)      &            ': CALLED WITH WRONG PARAMETER'
(  104)          NR_COMPAT_EC = 0
(  105)          RETURN
(  106)       ENDIF
(  107) # 108 "n_compat.F90"
(  108)       IF (NVALUE .EQ. NVAL) THEN
(  109)          NR_COMPAT_EC = NVALUE
(  110)          RETURN
(  111)       ENDIF
(  112) # 113 "n_compat.F90"
(  113)       PRINT *, 'ROUTINE: ', 'NR_COMPAT_EC',                             &
(  114)      &         ': INCOMPATIBLE SINGLE PRECISION (',                     &
(  115)      &         nvalue, 'Bytes, should be ', nval, ')'
(  116) # 117 "n_compat.F90"
(  117)       NR_COMPAT_EC = -NVAL
(  118)       RETURN
(  119) # 120 "n_compat.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:30:39      page 8

(  120)       ENDFUNCTION NR_COMPAT_EC
(  121) !
(  122) !
(  123)       FUNCTION ND_COMPAT_EC(VALUE)
(  124) # 125 "n_compat.F90"
(  125)       IMPLICIT NONE
(  126) # 127 "n_compat.F90"
(  127)       INTEGER :: ND_COMPAT_EC
(  128)       REAL(KIND=8) :: VALUE
(  129)       REAL(KIND=8) :: VAL
(  130) # 134 "n_compat.F90"
(  134)       INTEGER :: NVAL,   NVALUE
(  135) # 136 "n_compat.F90"
(  136)       VAL = 1.0_8
(  137) # 138 "n_compat.F90"
(  138)       NVAL   = STORAGE_SIZE(VAL)/8
(  139)       NVALUE = STORAGE_SIZE(VALUE)/8
(  140) # 141 "n_compat.F90"
(  141)       IF (NVAL   .EQ. 0) THEN
(  142)          PRINT *, 'ROUTINE: ', 'ND_COMPAT_EC',                          &
(  143)      &            ': INTERNAL ERROR'
(  144)          ND_COMPAT_EC = 0
(  145)          RETURN
(  146)       ENDIF
(  147) # 148 "n_compat.F90"
(  148)       IF (NVALUE .EQ. 0) THEN
(  149)          PRINT *, 'ROUTINE: ', 'ND_COMPAT_EC',                          &
(  150)      &            ': CALLED WITH WRONG PARAMETER'
(  151)          ND_COMPAT_EC = 0
(  152)          RETURN
(  153)       ENDIF
(  154) # 155 "n_compat.F90"
(  155)       IF (NVALUE .EQ. NVAL) THEN
(  156)          ND_COMPAT_EC = NVALUE
(  157)          RETURN
(  158)       ENDIF
(  159) # 160 "n_compat.F90"
(  160)       PRINT *, 'ROUTINE: ', 'ND_COMPAT_EC',                             &
(  161)      &         ': INCOMPATIBLE DOUBLE PRECISION (',                     &
(  162)      &         nvalue, 'Bytes, should be ', nval, ')'
(  163) # 164 "n_compat.F90"
(  164)       ND_COMPAT_EC = -NVAL
(  165)       ENDFUNCTION ND_COMPAT_EC
