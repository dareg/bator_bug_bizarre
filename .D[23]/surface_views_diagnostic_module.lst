


NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: surface_views_diagnostic_module.F90

(    1) 
(    2) MODULE SURFACE_VIEWS_DIAGNOSTIC_MODULE
(    3)   ! The SURFACE_VIEWS type contains namespaced access to groups of
(    4)   ! array pointers according to individual surface variable groups.
(    5)   !
(    6)   !
(    7)   ! Variable naming conventions
(    8)   ! ---------------------------
(    9)   ! The top-level type `SURFACE_VIEWS_TYPE` holds multiple group
(   10)   ! types, each prefixed with `GSP_` for prognostic and `GSD_` for
(   11)   ! diagnostic variable groups.
(   12)   !
(   13)   ! Each group type holds a list of array views (pointers to
(   14)   ! sub-sections of the gobal array), each prefixed with `P` to
(   15)   ! indicate a thread-local view pointer. The backend storage for each
(   16)   ! of these view pointers is provided by `FIELD_2D/FIELD_3D` objects,
(   17)   ! a reference to which is also stored on the group types and
(   18)   ! prefixed with `F_`.
(   19) 
(   20) USE PARKIND1, ONLY: JPIM, JPRB
(   21) USE FIELD_MODULE, ONLY: FIELD_2D, FIELD_3D, FIELD_4D, FIELD_2D_PTR, &
(   22)  &                      FIELD_3D_PTR, FIELD_2D_VIEW, FIELD_3D_VIEW
(   23) ! Using global imports here, since fypp notation breaks cmake's dependency analysis
(   24) USE SURFACE_VARIABLES_MOD
(   25) 
(   26) IMPLICIT NONE
(   27) 
(   28) TYPE SURFACE_VIEW_GROUP_VARSF
(   29)   REAL(KIND=JPRB), POINTER :: PZ0F(:)   ! gravity * surface roughness length
(   30) !>REAL(KIND=JPRB)          :: PZ0F (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 3

(   31)   REAL(KIND=JPRB), POINTER :: PALBF(:)   ! surface shortwave albedo
(   32) !>REAL(KIND=JPRB)          :: PALBF (YDCPG_OPTS%KLON)
(   33)   REAL(KIND=JPRB), POINTER :: PEMISF(:)   ! surface longwave emissivity
(   34) !>REAL(KIND=JPRB)          :: PEMISF (YDCPG_OPTS%KLON)
(   35)   REAL(KIND=JPRB), POINTER :: PGETRL(:)   ! standard deviation of orography
(   36) !>REAL(KIND=JPRB)          :: PGETRL (YDCPG_OPTS%KLON)
(   37)   REAL(KIND=JPRB), POINTER :: PLSM(:)   ! land-sea mask
(   38) !>REAL(KIND=JPRB)          :: PLSM (YDCPG_OPTS%KLON)
(   39)   REAL(KIND=JPRB), POINTER :: PVEG(:)   ! vegetation cover
(   40) !>REAL(KIND=JPRB)          :: PVEG (YDCPG_OPTS%KLON)
(   41)   REAL(KIND=JPRB), POINTER :: PVRLAN(:)   ! anisotropy of the sub-grid scale orography
(   42) !>REAL(KIND=JPRB)          :: PVRLAN (YDCPG_OPTS%KLON)
(   43)   REAL(KIND=JPRB), POINTER :: PVRLDI(:)   ! angle of the direction of orography with the x axis
(   44) !>REAL(KIND=JPRB)          :: PVRLDI (YDCPG_OPTS%KLON)
(   45)   REAL(KIND=JPRB), POINTER :: PSIG(:)   ! characteristic orographic slope
(   46) !>REAL(KIND=JPRB)          :: PSIG (YDCPG_OPTS%KLON)
(   47)   REAL(KIND=JPRB), POINTER :: PALBSF(:)   ! soil shortwave albedo
(   48) !>REAL(KIND=JPRB)          :: PALBSF (YDCPG_OPTS%KLON)
(   49)   REAL(KIND=JPRB), POINTER :: PLAN(:)   ! fraction of land
(   50) !>REAL(KIND=JPRB)          :: PLAN (YDCPG_OPTS%KLON)
(   51)   REAL(KIND=JPRB), POINTER :: PSST(:)   ! (open) sea surface temperature
(   52) !>REAL(KIND=JPRB)          :: PSST (YDCPG_OPTS%KLON)
(   53)   REAL(KIND=JPRB), POINTER :: PSSS(:)   ! sea surface salinity
(   54) !>REAL(KIND=JPRB)          :: PSSS (YDCPG_OPTS%KLON)
(   55)   REAL(KIND=JPRB), POINTER :: PLZ0H(:)   ! logarithm of roughness length for heat
(   56) !>REAL(KIND=JPRB)          :: PLZ0H (YDCPG_OPTS%KLON)
(   57)   REAL(KIND=JPRB), POINTER :: PCVL(:)   ! low vegetation cover
(   58) !>REAL(KIND=JPRB)          :: PCVL (YDCPG_OPTS%KLON)
(   59)   REAL(KIND=JPRB), POINTER :: PCVH(:)   ! high vegetation cover
(   60) !>REAL(KIND=JPRB)          :: PCVH (YDCPG_OPTS%KLON)
(   61)   REAL(KIND=JPRB), POINTER :: PTVL(:)   ! low vegetation type
(   62) !>REAL(KIND=JPRB)          :: PTVL (YDCPG_OPTS%KLON)
(   63)   REAL(KIND=JPRB), POINTER :: PTVH(:)   ! high vegetation type
(   64) !>REAL(KIND=JPRB)          :: PTVH (YDCPG_OPTS%KLON)
(   65)   REAL(KIND=JPRB), POINTER :: PLAIL(:)   ! low vegetation LAI
(   66) !>REAL(KIND=JPRB)          :: PLAIL (YDCPG_OPTS%KLON)
(   67)   REAL(KIND=JPRB), POINTER :: PLAIH(:)   ! high vegetation LAI
(   68) !>REAL(KIND=JPRB)          :: PLAIH (YDCPG_OPTS%KLON)
(   69)   REAL(KIND=JPRB), POINTER :: PSOTY(:)   ! soil type
(   70) !>REAL(KIND=JPRB)          :: PSOTY (YDCPG_OPTS%KLON)
(   71)   REAL(KIND=JPRB), POINTER :: PCLK(:)   ! lake cover
(   72) !>REAL(KIND=JPRB)          :: PCLK (YDCPG_OPTS%KLON)
(   73)   REAL(KIND=JPRB), POINTER :: PDL(:)   ! lake depth
(   74) !>REAL(KIND=JPRB)          :: PDL (YDCPG_OPTS%KLON)
(   75)   REAL(KIND=JPRB), POINTER :: PCI(:)   ! sea ice fraction
(   76) !>REAL(KIND=JPRB)          :: PCI (YDCPG_OPTS%KLON)
(   77)   REAL(KIND=JPRB), POINTER :: PUCUR(:)   ! U-component of the ocean current
(   78) !>REAL(KIND=JPRB)          :: PUCUR (YDCPG_OPTS%KLON)
(   79)   REAL(KIND=JPRB), POINTER :: PVCUR(:)   ! V-component of the ocean current
(   80) !>REAL(KIND=JPRB)          :: PVCUR (YDCPG_OPTS%KLON)
(   81)   REAL(KIND=JPRB), POINTER :: PZ0RLF(:)   ! gravity * vegetation roughness length
(   82) !>REAL(KIND=JPRB)          :: PZ0RLF (YDCPG_OPTS%KLON)
(   83)   REAL(KIND=JPRB), POINTER :: PCO2O(:)   ! oceanic CO2 flux
(   84) !>REAL(KIND=JPRB)          :: PCO2O (YDCPG_OPTS%KLON)
(   85)   REAL(KIND=JPRB), POINTER :: PCO2B(:)   ! biosphere CO2 flux
(   86) !>REAL(KIND=JPRB)          :: PCO2B (YDCPG_OPTS%KLON)
(   87)   REAL(KIND=JPRB), POINTER :: PCO2A(:)   ! anthropogenic CO2 flux
(   88) !>REAL(KIND=JPRB)          :: PCO2A (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 4

(   89)   REAL(KIND=JPRB), POINTER :: PCO2F(:)   ! CO2 fire emissions
(   90) !>REAL(KIND=JPRB)          :: PCO2F (YDCPG_OPTS%KLON)
(   91)   REAL(KIND=JPRB), POINTER :: PCGPP(:)   ! GPP bias correction factor
(   92) !>REAL(KIND=JPRB)          :: PCGPP (YDCPG_OPTS%KLON)
(   93)   REAL(KIND=JPRB), POINTER :: PCREC(:)   ! REC bias correction factor
(   94) !>REAL(KIND=JPRB)          :: PCREC (YDCPG_OPTS%KLON)
(   95)   REAL(KIND=JPRB), POINTER :: PCH4AG(:)   ! CH4 surface fluxes - aggregated field
(   96) !>REAL(KIND=JPRB)          :: PCH4AG (YDCPG_OPTS%KLON)
(   97)   REAL(KIND=JPRB), POINTER :: PCH4F(:)   ! CH4 fire emissions
(   98) !>REAL(KIND=JPRB)          :: PCH4F (YDCPG_OPTS%KLON)
(   99)   REAL(KIND=JPRB), POINTER :: PSDFOR(:)   ! SD filtered orography
(  100) !>REAL(KIND=JPRB)          :: PSDFOR (YDCPG_OPTS%KLON)
(  101)   REAL(KIND=JPRB), POINTER :: PALUVP(:)   ! MODIS-derived parallel albedo for shortwave radiation
(  102) !>REAL(KIND=JPRB)          :: PALUVP (YDCPG_OPTS%KLON)
(  103)   REAL(KIND=JPRB), POINTER :: PALUVD(:)   ! MODIS-derived diffuse albedo for shortwave radiation
(  104) !>REAL(KIND=JPRB)          :: PALUVD (YDCPG_OPTS%KLON)
(  105)   REAL(KIND=JPRB), POINTER :: PALNIP(:)   ! MODIS-derived parallel albedo for longwave radiation
(  106) !>REAL(KIND=JPRB)          :: PALNIP (YDCPG_OPTS%KLON)
(  107)   REAL(KIND=JPRB), POINTER :: PALNID(:)   ! MODIS-derived diffuse albedo for longwave radiation
(  108) !>REAL(KIND=JPRB)          :: PALNID (YDCPG_OPTS%KLON)
(  109)   REAL(KIND=JPRB), POINTER :: PFP1(:)   ! surface orography in the 2nd part of FULLPOS-927
(  110) !>REAL(KIND=JPRB)          :: PFP1 (YDCPG_OPTS%KLON)
(  111)   REAL(KIND=JPRB), POINTER :: PBCBF(:)   ! black carbon biogenic
(  112) !>REAL(KIND=JPRB)          :: PBCBF (YDCPG_OPTS%KLON)
(  113)   REAL(KIND=JPRB), POINTER :: PBCFF(:)   ! black carbon fossil fuel
(  114) !>REAL(KIND=JPRB)          :: PBCFF (YDCPG_OPTS%KLON)
(  115)   REAL(KIND=JPRB), POINTER :: PBCGF(:)   ! black carbon GFED
(  116) !>REAL(KIND=JPRB)          :: PBCGF (YDCPG_OPTS%KLON)
(  117)   REAL(KIND=JPRB), POINTER :: POMBF(:)   ! organic matter biogenic
(  118) !>REAL(KIND=JPRB)          :: POMBF (YDCPG_OPTS%KLON)
(  119)   REAL(KIND=JPRB), POINTER :: POMFF(:)   ! organic matter fossil fuel
(  120) !>REAL(KIND=JPRB)          :: POMFF (YDCPG_OPTS%KLON)
(  121)   REAL(KIND=JPRB), POINTER :: POMGF(:)   ! organic matter GFED
(  122) !>REAL(KIND=JPRB)          :: POMGF (YDCPG_OPTS%KLON)
(  123)   REAL(KIND=JPRB), POINTER :: PINJF(:)   ! height of maximum injection for biomass burning emissions
(  124) !>REAL(KIND=JPRB)          :: PINJF (YDCPG_OPTS%KLON)
(  125)   REAL(KIND=JPRB), POINTER :: PSO2L(:)   ! sulphate low-level
(  126) !>REAL(KIND=JPRB)          :: PSO2L (YDCPG_OPTS%KLON)
(  127)   REAL(KIND=JPRB), POINTER :: PSO2H(:)   ! sulphate higher-level
(  128) !>REAL(KIND=JPRB)          :: PSO2H (YDCPG_OPTS%KLON)
(  129)   REAL(KIND=JPRB), POINTER :: PSO2DD(:)   ! sulphate dry dep velocity
(  130) !>REAL(KIND=JPRB)          :: PSO2DD (YDCPG_OPTS%KLON)
(  131)   REAL(KIND=JPRB), POINTER :: PSOGF(:)   ! sulphate GFED
(  132) !>REAL(KIND=JPRB)          :: PSOGF (YDCPG_OPTS%KLON)
(  133)   REAL(KIND=JPRB), POINTER :: PSOA(:)   ! secondary organic
(  134) !>REAL(KIND=JPRB)          :: PSOA (YDCPG_OPTS%KLON)
(  135)   REAL(KIND=JPRB), POINTER :: PVOLC(:)   ! volcanic continuous
(  136) !>REAL(KIND=JPRB)          :: PVOLC (YDCPG_OPTS%KLON)
(  137)   REAL(KIND=JPRB), POINTER :: PVOLE(:)   ! volcanic explosive
(  138) !>REAL(KIND=JPRB)          :: PVOLE (YDCPG_OPTS%KLON)
(  139)   REAL(KIND=JPRB), POINTER :: PDMSO(:)   ! oceanic DMS
(  140) !>REAL(KIND=JPRB)          :: PDMSO (YDCPG_OPTS%KLON)
(  141)   REAL(KIND=JPRB), POINTER :: PSOACO(:)   ! SOA from CO
(  142) !>REAL(KIND=JPRB)          :: PSOACO (YDCPG_OPTS%KLON)
(  143)   REAL(KIND=JPRB), POINTER :: PURBF(:)   ! Urban fraction
(  144) !>REAL(KIND=JPRB)          :: PURBF (YDCPG_OPTS%KLON)
(  145)   REAL(KIND=JPRB), POINTER :: PVOLCALTI(:)   ! Altitude of volcanoes
(  146) !>REAL(KIND=JPRB)          :: PVOLCALTI (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 5

(  147)   REAL(KIND=JPRB), POINTER :: PFCA1(:)   ! Fraction of calcite over dust 1st bin
(  148) !>REAL(KIND=JPRB)          :: PFCA1 (YDCPG_OPTS%KLON)
(  149)   REAL(KIND=JPRB), POINTER :: PFCA2(:)   ! Fraction of calcite over dust 2nd bin
(  150) !>REAL(KIND=JPRB)          :: PFCA2 (YDCPG_OPTS%KLON)
(  151)   REAL(KIND=JPRB), POINTER :: PAERDEP(:)   ! dust emission potential
(  152) !>REAL(KIND=JPRB)          :: PAERDEP (YDCPG_OPTS%KLON)
(  153)   REAL(KIND=JPRB), POINTER :: PAERLTS(:)   ! dust lifting threshold speed
(  154) !>REAL(KIND=JPRB)          :: PAERLTS (YDCPG_OPTS%KLON)
(  155)   REAL(KIND=JPRB), POINTER :: PAERSCC(:)   ! dust soil clay content
(  156) !>REAL(KIND=JPRB)          :: PAERSCC (YDCPG_OPTS%KLON)
(  157)   REAL(KIND=JPRB), POINTER :: PDSF(:)   ! dust source function
(  158) !>REAL(KIND=JPRB)          :: PDSF (YDCPG_OPTS%KLON)
(  159)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PCHEMFLX   ! chemistry emissions input
(  160)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PCHEMFLXO   ! total chemistry flux (emissions + deposition)
(  161)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PCHEMDV   ! chemistry deposition velocity
(  162)   REAL(KIND=JPRB), POINTER :: PNUDM(:)   ! nudging mask
(  163) !>REAL(KIND=JPRB)          :: PNUDM (YDCPG_OPTS%KLON)
(  164)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  165) 
(  166)   TYPE(SURFACE_VARIABLE_GROUP_VARSF), POINTER :: VARIABLE_GROUP
(  167)   TYPE(FIELD_2D), POINTER :: F_Z0F=>NULL()
(  168)   TYPE(FIELD_2D), POINTER :: F_ALBF=>NULL()
(  169)   TYPE(FIELD_2D), POINTER :: F_EMISF=>NULL()
(  170)   TYPE(FIELD_2D), POINTER :: F_GETRL=>NULL()
(  171)   TYPE(FIELD_2D), POINTER :: F_LSM=>NULL()
(  172)   TYPE(FIELD_2D), POINTER :: F_VEG=>NULL()
(  173)   TYPE(FIELD_2D), POINTER :: F_VRLAN=>NULL()
(  174)   TYPE(FIELD_2D), POINTER :: F_VRLDI=>NULL()
(  175)   TYPE(FIELD_2D), POINTER :: F_SIG=>NULL()
(  176)   TYPE(FIELD_2D), POINTER :: F_ALBSF=>NULL()
(  177)   TYPE(FIELD_2D), POINTER :: F_LAN=>NULL()
(  178)   TYPE(FIELD_2D), POINTER :: F_SST=>NULL()
(  179)   TYPE(FIELD_2D), POINTER :: F_SSS=>NULL()
(  180)   TYPE(FIELD_2D), POINTER :: F_LZ0H=>NULL()
(  181)   TYPE(FIELD_2D), POINTER :: F_CVL=>NULL()
(  182)   TYPE(FIELD_2D), POINTER :: F_CVH=>NULL()
(  183)   TYPE(FIELD_2D), POINTER :: F_TVL=>NULL()
(  184)   TYPE(FIELD_2D), POINTER :: F_TVH=>NULL()
(  185)   TYPE(FIELD_2D), POINTER :: F_LAIL=>NULL()
(  186)   TYPE(FIELD_2D), POINTER :: F_LAIH=>NULL()
(  187)   TYPE(FIELD_2D), POINTER :: F_SOTY=>NULL()
(  188)   TYPE(FIELD_2D), POINTER :: F_CLK=>NULL()
(  189)   TYPE(FIELD_2D), POINTER :: F_DL=>NULL()
(  190)   TYPE(FIELD_2D), POINTER :: F_CI=>NULL()
(  191)   TYPE(FIELD_2D), POINTER :: F_UCUR=>NULL()
(  192)   TYPE(FIELD_2D), POINTER :: F_VCUR=>NULL()
(  193)   TYPE(FIELD_2D), POINTER :: F_Z0RLF=>NULL()
(  194)   TYPE(FIELD_2D), POINTER :: F_CO2O=>NULL()
(  195)   TYPE(FIELD_2D), POINTER :: F_CO2B=>NULL()
(  196)   TYPE(FIELD_2D), POINTER :: F_CO2A=>NULL()
(  197)   TYPE(FIELD_2D), POINTER :: F_CO2F=>NULL()
(  198)   TYPE(FIELD_2D), POINTER :: F_CGPP=>NULL()
(  199)   TYPE(FIELD_2D), POINTER :: F_CREC=>NULL()
(  200)   TYPE(FIELD_2D), POINTER :: F_CH4AG=>NULL()
(  201)   TYPE(FIELD_2D), POINTER :: F_CH4F=>NULL()
(  202)   TYPE(FIELD_2D), POINTER :: F_SDFOR=>NULL()
(  203)   TYPE(FIELD_2D), POINTER :: F_ALUVP=>NULL()
(  204)   TYPE(FIELD_2D), POINTER :: F_ALUVD=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 6

(  205)   TYPE(FIELD_2D), POINTER :: F_ALNIP=>NULL()
(  206)   TYPE(FIELD_2D), POINTER :: F_ALNID=>NULL()
(  207)   TYPE(FIELD_2D), POINTER :: F_FP1=>NULL()
(  208)   TYPE(FIELD_2D), POINTER :: F_BCBF=>NULL()
(  209)   TYPE(FIELD_2D), POINTER :: F_BCFF=>NULL()
(  210)   TYPE(FIELD_2D), POINTER :: F_BCGF=>NULL()
(  211)   TYPE(FIELD_2D), POINTER :: F_OMBF=>NULL()
(  212)   TYPE(FIELD_2D), POINTER :: F_OMFF=>NULL()
(  213)   TYPE(FIELD_2D), POINTER :: F_OMGF=>NULL()
(  214)   TYPE(FIELD_2D), POINTER :: F_INJF=>NULL()
(  215)   TYPE(FIELD_2D), POINTER :: F_SO2L=>NULL()
(  216)   TYPE(FIELD_2D), POINTER :: F_SO2H=>NULL()
(  217)   TYPE(FIELD_2D), POINTER :: F_SO2DD=>NULL()
(  218)   TYPE(FIELD_2D), POINTER :: F_SOGF=>NULL()
(  219)   TYPE(FIELD_2D), POINTER :: F_SOA=>NULL()
(  220)   TYPE(FIELD_2D), POINTER :: F_VOLC=>NULL()
(  221)   TYPE(FIELD_2D), POINTER :: F_VOLE=>NULL()
(  222)   TYPE(FIELD_2D), POINTER :: F_DMSO=>NULL()
(  223)   TYPE(FIELD_2D), POINTER :: F_SOACO=>NULL()
(  224)   TYPE(FIELD_2D), POINTER :: F_URBF=>NULL()
(  225)   TYPE(FIELD_2D), POINTER :: F_VOLCALTI=>NULL()
(  226)   TYPE(FIELD_2D), POINTER :: F_FCA1=>NULL()
(  227)   TYPE(FIELD_2D), POINTER :: F_FCA2=>NULL()
(  228)   TYPE(FIELD_2D), POINTER :: F_AERDEP=>NULL()
(  229)   TYPE(FIELD_2D), POINTER :: F_AERLTS=>NULL()
(  230)   TYPE(FIELD_2D), POINTER :: F_AERSCC=>NULL()
(  231)   TYPE(FIELD_2D), POINTER :: F_DSF=>NULL()
(  232)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_CHEMFLX
(  233)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_CHEMFLXO
(  234)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_CHEMDV
(  235)   TYPE(FIELD_2D), POINTER :: F_NUDM=>NULL()
(  236)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  237) 
(  238) CONTAINS
(  239)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VARSF_INIT
(  240)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VARSF_UPDATE_VIEW
(  241) END TYPE SURFACE_VIEW_GROUP_VARSF
(  242) 
(  243) TYPE SURFACE_VIEW_GROUP_VCLIH
(  244)   REAL(KIND=JPRB), POINTER :: PTCCH(:)   ! total convective cloudiness
(  245) !>REAL(KIND=JPRB)          :: PTCCH (YDCPG_OPTS%KLON)
(  246)   REAL(KIND=JPRB), POINTER :: PSCCH(:)   ! convective cloud summit
(  247) !>REAL(KIND=JPRB)          :: PSCCH (YDCPG_OPTS%KLON)
(  248)   REAL(KIND=JPRB), POINTER :: PBCCH(:)   ! convective cloud base
(  249) !>REAL(KIND=JPRB)          :: PBCCH (YDCPG_OPTS%KLON)
(  250)   REAL(KIND=JPRB), POINTER :: PPBLH(:)   ! PBL height
(  251) !>REAL(KIND=JPRB)          :: PPBLH (YDCPG_OPTS%KLON)
(  252)   REAL(KIND=JPRB), POINTER :: PSPSH(:)   ! variable for prognostic convection scheme (ALARO)
(  253) !>REAL(KIND=JPRB)          :: PSPSH (YDCPG_OPTS%KLON)
(  254)   REAL(KIND=JPRB), POINTER :: PQSH(:)   ! surface moisture historic variable (used by TOUCANS)
(  255) !>REAL(KIND=JPRB)          :: PQSH (YDCPG_OPTS%KLON)
(  256)   REAL(KIND=JPRB), POINTER :: PPCL(:)   ! 
(  257) !>REAL(KIND=JPRB)          :: PPCL (YDCPG_OPTS%KLON)
(  258)   REAL(KIND=JPRB), POINTER :: PPSL(:)   ! 
(  259) !>REAL(KIND=JPRB)          :: PPSL (YDCPG_OPTS%KLON)
(  260)   REAL(KIND=JPRB), POINTER :: PPCN(:)   ! 
(  261) !>REAL(KIND=JPRB)          :: PPCN (YDCPG_OPTS%KLON)
(  262)   REAL(KIND=JPRB), POINTER :: PPSN(:)   ! 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 7

(  263) !>REAL(KIND=JPRB)          :: PPSN (YDCPG_OPTS%KLON)
(  264)   REAL(KIND=JPRB), POINTER :: PEVA(:)   ! 
(  265) !>REAL(KIND=JPRB)          :: PEVA (YDCPG_OPTS%KLON)
(  266)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  267) 
(  268)   TYPE(SURFACE_VARIABLE_GROUP_VCLIH), POINTER :: VARIABLE_GROUP
(  269)   TYPE(FIELD_2D), POINTER :: F_TCCH=>NULL()
(  270)   TYPE(FIELD_2D), POINTER :: F_SCCH=>NULL()
(  271)   TYPE(FIELD_2D), POINTER :: F_BCCH=>NULL()
(  272)   TYPE(FIELD_2D), POINTER :: F_PBLH=>NULL()
(  273)   TYPE(FIELD_2D), POINTER :: F_SPSH=>NULL()
(  274)   TYPE(FIELD_2D), POINTER :: F_QSH=>NULL()
(  275)   TYPE(FIELD_2D), POINTER :: F_PCL=>NULL()
(  276)   TYPE(FIELD_2D), POINTER :: F_PSL=>NULL()
(  277)   TYPE(FIELD_2D), POINTER :: F_PCN=>NULL()
(  278)   TYPE(FIELD_2D), POINTER :: F_PSN=>NULL()
(  279)   TYPE(FIELD_2D), POINTER :: F_EVA=>NULL()
(  280)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  281) 
(  282) CONTAINS
(  283)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIH_INIT
(  284)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIH_UPDATE_VIEW
(  285) END TYPE SURFACE_VIEW_GROUP_VCLIH
(  286) 
(  287) TYPE SURFACE_VIEW_GROUP_VCLIK
(  288)   REAL(KIND=JPRB), POINTER :: PUDGRO(:)   ! ud top position (accsu)
(  289) !>REAL(KIND=JPRB)          :: PUDGRO (YDCPG_OPTS%KLON)
(  290)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  291) 
(  292)   TYPE(SURFACE_VARIABLE_GROUP_VCLIK), POINTER :: VARIABLE_GROUP
(  293)   TYPE(FIELD_2D), POINTER :: F_UDGRO=>NULL()
(  294)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  295) 
(  296) CONTAINS
(  297)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIK_INIT
(  298)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIK_UPDATE_VIEW
(  299) END TYPE SURFACE_VIEW_GROUP_VCLIK
(  300) 
(  301) TYPE SURFACE_VIEW_GROUP_VCLIP
(  302)   REAL(KIND=JPRB), POINTER :: PTPC(:)   ! climatological deep layer temperature
(  303) !>REAL(KIND=JPRB)          :: PTPC (YDCPG_OPTS%KLON)
(  304)   REAL(KIND=JPRB), POINTER :: PWPC(:)   ! climatological deep layer moisture
(  305) !>REAL(KIND=JPRB)          :: PWPC (YDCPG_OPTS%KLON)
(  306)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  307) 
(  308)   TYPE(SURFACE_VARIABLE_GROUP_VCLIP), POINTER :: VARIABLE_GROUP
(  309)   TYPE(FIELD_2D), POINTER :: F_TPC=>NULL()
(  310)   TYPE(FIELD_2D), POINTER :: F_WPC=>NULL()
(  311)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  312) 
(  313) CONTAINS
(  314)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIP_INIT
(  315)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIP_UPDATE_VIEW
(  316) END TYPE SURFACE_VIEW_GROUP_VCLIP
(  317) 
(  318) TYPE SURFACE_VIEW_GROUP_VCLIV
(  319)   REAL(KIND=JPRB), POINTER :: PARG(:)   ! silt percentage within soil
(  320) !>REAL(KIND=JPRB)          :: PARG (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 8

(  321)   REAL(KIND=JPRB), POINTER :: PSAB(:)   ! percentage of sand within the soil
(  322) !>REAL(KIND=JPRB)          :: PSAB (YDCPG_OPTS%KLON)
(  323)   REAL(KIND=JPRB), POINTER :: PD2(:)   ! soil depth
(  324) !>REAL(KIND=JPRB)          :: PD2 (YDCPG_OPTS%KLON)
(  325)   REAL(KIND=JPRB), POINTER :: PIVEG(:)   ! type of vegetation
(  326) !>REAL(KIND=JPRB)          :: PIVEG (YDCPG_OPTS%KLON)
(  327)   REAL(KIND=JPRB), POINTER :: PRSMIN(:)   ! stomatal minimum resistance
(  328) !>REAL(KIND=JPRB)          :: PRSMIN (YDCPG_OPTS%KLON)
(  329)   REAL(KIND=JPRB), POINTER :: PLAI(:)   ! leaf area index
(  330) !>REAL(KIND=JPRB)          :: PLAI (YDCPG_OPTS%KLON)
(  331)   REAL(KIND=JPRB), POINTER :: PHV(:)   ! resistance to evapotranspiration
(  332) !>REAL(KIND=JPRB)          :: PHV (YDCPG_OPTS%KLON)
(  333)   REAL(KIND=JPRB), POINTER :: PZ0H(:)   ! gravity * roughness length for heat
(  334) !>REAL(KIND=JPRB)          :: PZ0H (YDCPG_OPTS%KLON)
(  335)   REAL(KIND=JPRB), POINTER :: PALS(:)   ! albedo of bare ground
(  336) !>REAL(KIND=JPRB)          :: PALS (YDCPG_OPTS%KLON)
(  337)   REAL(KIND=JPRB), POINTER :: PALV(:)   ! albedo of vegetation
(  338) !>REAL(KIND=JPRB)          :: PALV (YDCPG_OPTS%KLON)
(  339)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  340) 
(  341)   TYPE(SURFACE_VARIABLE_GROUP_VCLIV), POINTER :: VARIABLE_GROUP
(  342)   TYPE(FIELD_2D), POINTER :: F_ARG=>NULL()
(  343)   TYPE(FIELD_2D), POINTER :: F_SAB=>NULL()
(  344)   TYPE(FIELD_2D), POINTER :: F_D2=>NULL()
(  345)   TYPE(FIELD_2D), POINTER :: F_IVEG=>NULL()
(  346)   TYPE(FIELD_2D), POINTER :: F_RSMIN=>NULL()
(  347)   TYPE(FIELD_2D), POINTER :: F_LAI=>NULL()
(  348)   TYPE(FIELD_2D), POINTER :: F_HV=>NULL()
(  349)   TYPE(FIELD_2D), POINTER :: F_Z0H=>NULL()
(  350)   TYPE(FIELD_2D), POINTER :: F_ALS=>NULL()
(  351)   TYPE(FIELD_2D), POINTER :: F_ALV=>NULL()
(  352)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  353) 
(  354) CONTAINS
(  355)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIV_INIT
(  356)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIV_UPDATE_VIEW
(  357) END TYPE SURFACE_VIEW_GROUP_VCLIV
(  358) 
(  359) TYPE SURFACE_VIEW_GROUP_VCLIA
(  360)   REAL(KIND=JPRB), POINTER :: PSEA(:)   ! aerosol sea
(  361) !>REAL(KIND=JPRB)          :: PSEA (YDCPG_OPTS%KLON)
(  362)   REAL(KIND=JPRB), POINTER :: PLAN(:)   ! aerosol land
(  363) !>REAL(KIND=JPRB)          :: PLAN (YDCPG_OPTS%KLON)
(  364)   REAL(KIND=JPRB), POINTER :: PSOO(:)   ! aerosol soot
(  365) !>REAL(KIND=JPRB)          :: PSOO (YDCPG_OPTS%KLON)
(  366)   REAL(KIND=JPRB), POINTER :: PDES(:)   ! aerosol desert
(  367) !>REAL(KIND=JPRB)          :: PDES (YDCPG_OPTS%KLON)
(  368)   REAL(KIND=JPRB), POINTER :: PSUL(:)   ! aerosol sulfate
(  369) !>REAL(KIND=JPRB)          :: PSUL (YDCPG_OPTS%KLON)
(  370)   REAL(KIND=JPRB), POINTER :: PVOL(:)   ! aerosol volcano
(  371) !>REAL(KIND=JPRB)          :: PVOL (YDCPG_OPTS%KLON)
(  372)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  373) 
(  374)   TYPE(SURFACE_VARIABLE_GROUP_VCLIA), POINTER :: VARIABLE_GROUP
(  375)   TYPE(FIELD_2D), POINTER :: F_SEA=>NULL()
(  376)   TYPE(FIELD_2D), POINTER :: F_LAN=>NULL()
(  377)   TYPE(FIELD_2D), POINTER :: F_SOO=>NULL()
(  378)   TYPE(FIELD_2D), POINTER :: F_DES=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 9

(  379)   TYPE(FIELD_2D), POINTER :: F_SUL=>NULL()
(  380)   TYPE(FIELD_2D), POINTER :: F_VOL=>NULL()
(  381)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  382) 
(  383) CONTAINS
(  384)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIA_INIT
(  385)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIA_UPDATE_VIEW
(  386) END TYPE SURFACE_VIEW_GROUP_VCLIA
(  387) 
(  388) TYPE SURFACE_VIEW_GROUP_VCLIN
(  389)   REAL(KIND=JPRB), POINTER :: PTOP(:)   ! index of convective cloud top
(  390) !>REAL(KIND=JPRB)          :: PTOP (YDCPG_OPTS%KLON)
(  391)   REAL(KIND=JPRB), POINTER :: PBAS(:)   ! index of convective cloud base
(  392) !>REAL(KIND=JPRB)          :: PBAS (YDCPG_OPTS%KLON)
(  393)   REAL(KIND=JPRB), POINTER :: PACPR(:)   ! averaged convective precipitaion rate
(  394) !>REAL(KIND=JPRB)          :: PACPR (YDCPG_OPTS%KLON)
(  395)   REAL(KIND=JPRB), POINTER :: PACCPR(:)   ! accumulated total precipitaion for assimilation
(  396) !>REAL(KIND=JPRB)          :: PACCPR (YDCPG_OPTS%KLON)
(  397)   REAL(KIND=JPRB), POINTER :: PACCPR5(:)   ! accumulated total precipitaion for assimilation (trajectory)
(  398) !>REAL(KIND=JPRB)          :: PACCPR5 (YDCPG_OPTS%KLON)
(  399)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  400) 
(  401)   TYPE(SURFACE_VARIABLE_GROUP_VCLIN), POINTER :: VARIABLE_GROUP
(  402)   TYPE(FIELD_2D), POINTER :: F_TOP=>NULL()
(  403)   TYPE(FIELD_2D), POINTER :: F_BAS=>NULL()
(  404)   TYPE(FIELD_2D), POINTER :: F_ACPR=>NULL()
(  405)   TYPE(FIELD_2D), POINTER :: F_ACCPR=>NULL()
(  406)   TYPE(FIELD_2D), POINTER :: F_ACCPR5=>NULL()
(  407)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  408) 
(  409) CONTAINS
(  410)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIN_INIT
(  411)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIN_UPDATE_VIEW
(  412) END TYPE SURFACE_VIEW_GROUP_VCLIN
(  413) 
(  414) TYPE SURFACE_VIEW_GROUP_VDIAGO2
(  415)   REAL(KIND=JPRB), POINTER :: POCDEP(:)   ! bottom layer depth
(  416) !>REAL(KIND=JPRB)          :: POCDEP (YDCPG_OPTS%KLON)
(  417)   REAL(KIND=JPRB), POINTER :: PUSTRC(:)   ! taux clim.
(  418) !>REAL(KIND=JPRB)          :: PUSTRC (YDCPG_OPTS%KLON)
(  419)   REAL(KIND=JPRB), POINTER :: PVSTRC(:)   ! tauy clim.
(  420) !>REAL(KIND=JPRB)          :: PVSTRC (YDCPG_OPTS%KLON)
(  421)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  422) 
(  423)   TYPE(SURFACE_VARIABLE_GROUP_VDIAGO2), POINTER :: VARIABLE_GROUP
(  424)   TYPE(FIELD_2D), POINTER :: F_OCDEP=>NULL()
(  425)   TYPE(FIELD_2D), POINTER :: F_USTRC=>NULL()
(  426)   TYPE(FIELD_2D), POINTER :: F_VSTRC=>NULL()
(  427)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  428) 
(  429) CONTAINS
(  430)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VDIAGO2_INIT
(  431)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VDIAGO2_UPDATE_VIEW
(  432) END TYPE SURFACE_VIEW_GROUP_VDIAGO2
(  433) 
(  434) TYPE SURFACE_VIEW_GROUP_VDIAGO3
(  435)   REAL(KIND=JPRB), POINTER :: PDIFM(:,:)   ! viscosity
(  436) !>REAL(KIND=JPRB)          :: PDIFM (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 10

(  437)   REAL(KIND=JPRB), POINTER :: PDIFT(:,:)   ! diff. coef. of temp
(  438) !>REAL(KIND=JPRB)          :: PDIFT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  439)   REAL(KIND=JPRB), POINTER :: PDIFS(:,:)   ! diff. coef. of salinity
(  440) !>REAL(KIND=JPRB)          :: PDIFS (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  441)   REAL(KIND=JPRB), POINTER :: PADVT(:,:)   ! correction term for temp.
(  442) !>REAL(KIND=JPRB)          :: PADVT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  443)   REAL(KIND=JPRB), POINTER :: PADVS(:,:)   ! correction term for sal.
(  444) !>REAL(KIND=JPRB)          :: PADVS (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  445)   REAL(KIND=JPRB), POINTER :: PTRI0(:,:)   ! coef. for solving matrix.
(  446) !>REAL(KIND=JPRB)          :: PTRI0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  447)   REAL(KIND=JPRB), POINTER :: PTRI1(:,:)   ! coef. for solving matrix.
(  448) !>REAL(KIND=JPRB)          :: PTRI1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  449)   REAL(KIND=JPRB), POINTER :: PSWDK(:,:)   ! radiation term
(  450) !>REAL(KIND=JPRB)          :: PSWDK (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  451)   REAL(KIND=JPRB), POINTER :: PZO(:,:)   ! depth of layer
(  452) !>REAL(KIND=JPRB)          :: PZO (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  453)   REAL(KIND=JPRB), POINTER :: PHO(:,:)   ! depth of interface layer
(  454) !>REAL(KIND=JPRB)          :: PHO (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  455)   REAL(KIND=JPRB), POINTER :: PDO(:,:)   ! layer thickness
(  456) !>REAL(KIND=JPRB)          :: PDO (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  457)   REAL(KIND=JPRB), POINTER :: PHO_INV(:,:)   ! 1 / YHO
(  458) !>REAL(KIND=JPRB)          :: PHO_INV (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  459)   REAL(KIND=JPRB), POINTER :: PUOC(:,:)   ! U velocity clim.
(  460) !>REAL(KIND=JPRB)          :: PUOC (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  461)   REAL(KIND=JPRB), POINTER :: PVOC(:,:)   ! V velocity clim.
(  462) !>REAL(KIND=JPRB)          :: PVOC (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  463)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  464) 
(  465)   TYPE(SURFACE_VARIABLE_GROUP_VDIAGO3), POINTER :: VARIABLE_GROUP
(  466)   TYPE(FIELD_3D), POINTER :: F_DIFM=>NULL()
(  467)   TYPE(FIELD_3D), POINTER :: F_DIFT=>NULL()
(  468)   TYPE(FIELD_3D), POINTER :: F_DIFS=>NULL()
(  469)   TYPE(FIELD_3D), POINTER :: F_ADVT=>NULL()
(  470)   TYPE(FIELD_3D), POINTER :: F_ADVS=>NULL()
(  471)   TYPE(FIELD_3D), POINTER :: F_TRI0=>NULL()
(  472)   TYPE(FIELD_3D), POINTER :: F_TRI1=>NULL()
(  473)   TYPE(FIELD_3D), POINTER :: F_SWDK=>NULL()
(  474)   TYPE(FIELD_3D), POINTER :: F_ZO=>NULL()
(  475)   TYPE(FIELD_3D), POINTER :: F_HO=>NULL()
(  476)   TYPE(FIELD_3D), POINTER :: F_DO=>NULL()
(  477)   TYPE(FIELD_3D), POINTER :: F_HO_INV=>NULL()
(  478)   TYPE(FIELD_3D), POINTER :: F_UOC=>NULL()
(  479)   TYPE(FIELD_3D), POINTER :: F_VOC=>NULL()
(  480)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  481) 
(  482) CONTAINS
(  483)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VDIAGO3_INIT
(  484)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VDIAGO3_UPDATE_VIEW
(  485) END TYPE SURFACE_VIEW_GROUP_VDIAGO3
(  486) 
(  487) TYPE SURFACE_VIEW_GROUP_VDIAG
(  488)   REAL(KIND=JPRB), POINTER :: PLSP(:)   ! Large scale precipitation
(  489) !>REAL(KIND=JPRB)          :: PLSP (YDCPG_OPTS%KLON)
(  490)   REAL(KIND=JPRB), POINTER :: PCP(:)   ! Convective precipitation
(  491) !>REAL(KIND=JPRB)          :: PCP (YDCPG_OPTS%KLON)
(  492)   REAL(KIND=JPRB), POINTER :: PSF(:)   ! Snowfall
(  493) !>REAL(KIND=JPRB)          :: PSF (YDCPG_OPTS%KLON)
(  494)   REAL(KIND=JPRB), POINTER :: PFZRA(:)   ! Freezing rain






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 11

(  495) !>REAL(KIND=JPRB)          :: PFZRA (YDCPG_OPTS%KLON)
(  496)   REAL(KIND=JPRB), POINTER :: PBLD(:)   ! Boundary layer dissipation
(  497) !>REAL(KIND=JPRB)          :: PBLD (YDCPG_OPTS%KLON)
(  498)   REAL(KIND=JPRB), POINTER :: PSSHF(:)   ! Surface sensible heat flux
(  499) !>REAL(KIND=JPRB)          :: PSSHF (YDCPG_OPTS%KLON)
(  500)   REAL(KIND=JPRB), POINTER :: PSLHF(:)   ! Surface latent heat flux
(  501) !>REAL(KIND=JPRB)          :: PSLHF (YDCPG_OPTS%KLON)
(  502)   REAL(KIND=JPRB), POINTER :: PNEE(:)   ! Surface net ecosystem exchange of CO2
(  503) !>REAL(KIND=JPRB)          :: PNEE (YDCPG_OPTS%KLON)
(  504)   REAL(KIND=JPRB), POINTER :: PGPP(:)   ! Surface gross primary production of CO2
(  505) !>REAL(KIND=JPRB)          :: PGPP (YDCPG_OPTS%KLON)
(  506)   REAL(KIND=JPRB), POINTER :: PREC(:)   ! Surface ecosystem respiration of CO2
(  507) !>REAL(KIND=JPRB)          :: PREC (YDCPG_OPTS%KLON)
(  508)   REAL(KIND=JPRB), POINTER :: PMSL(:)   ! Mean sea level pressure
(  509) !>REAL(KIND=JPRB)          :: PMSL (YDCPG_OPTS%KLON)
(  510)   REAL(KIND=JPRB), POINTER :: PSP(:)   ! Surface pressure
(  511) !>REAL(KIND=JPRB)          :: PSP (YDCPG_OPTS%KLON)
(  512)   REAL(KIND=JPRB), POINTER :: PTCC(:)   ! Total cloud cover
(  513) !>REAL(KIND=JPRB)          :: PTCC (YDCPG_OPTS%KLON)
(  514)   REAL(KIND=JPRB), POINTER :: P10U(:)   ! U-wind at 10 m
(  515) !>REAL(KIND=JPRB)          :: P10U (YDCPG_OPTS%KLON)
(  516)   REAL(KIND=JPRB), POINTER :: P10V(:)   ! V-wind at 10 m
(  517) !>REAL(KIND=JPRB)          :: P10V (YDCPG_OPTS%KLON)
(  518)   REAL(KIND=JPRB), POINTER :: P2T(:)   ! Temperature at 2 m
(  519) !>REAL(KIND=JPRB)          :: P2T (YDCPG_OPTS%KLON)
(  520)   REAL(KIND=JPRB), POINTER :: P2D(:)   ! Dewpoint temperature at 2 m
(  521) !>REAL(KIND=JPRB)          :: P2D (YDCPG_OPTS%KLON)
(  522)   REAL(KIND=JPRB), POINTER :: P2Q(:)   ! Specific humidity at 2 m
(  523) !>REAL(KIND=JPRB)          :: P2Q (YDCPG_OPTS%KLON)
(  524)   REAL(KIND=JPRB), POINTER :: PSSR(:)   ! Surface solar radiation
(  525) !>REAL(KIND=JPRB)          :: PSSR (YDCPG_OPTS%KLON)
(  526)   REAL(KIND=JPRB), POINTER :: PSTR(:)   ! Surface thermal radiation
(  527) !>REAL(KIND=JPRB)          :: PSTR (YDCPG_OPTS%KLON)
(  528)   REAL(KIND=JPRB), POINTER :: PTSR(:)   ! Top solar radiation
(  529) !>REAL(KIND=JPRB)          :: PTSR (YDCPG_OPTS%KLON)
(  530)   REAL(KIND=JPRB), POINTER :: PTTR(:)   ! Top thermal radiation
(  531) !>REAL(KIND=JPRB)          :: PTTR (YDCPG_OPTS%KLON)
(  532)   REAL(KIND=JPRB), POINTER :: PEWSS(:)   ! Instantaneous surface U-wind stress
(  533) !>REAL(KIND=JPRB)          :: PEWSS (YDCPG_OPTS%KLON)
(  534)   REAL(KIND=JPRB), POINTER :: PNSSS(:)   ! Instantaneous surface V-wind stress
(  535) !>REAL(KIND=JPRB)          :: PNSSS (YDCPG_OPTS%KLON)
(  536)   REAL(KIND=JPRB), POINTER :: PE(:)   ! Water evaporation
(  537) !>REAL(KIND=JPRB)          :: PE (YDCPG_OPTS%KLON)
(  538)   REAL(KIND=JPRB), POINTER :: PPEV(:)   ! Potential evaporation
(  539) !>REAL(KIND=JPRB)          :: PPEV (YDCPG_OPTS%KLON)
(  540)   REAL(KIND=JPRB), POINTER :: PCCC(:)   ! Convective cloud cover
(  541) !>REAL(KIND=JPRB)          :: PCCC (YDCPG_OPTS%KLON)
(  542)   REAL(KIND=JPRB), POINTER :: PLCC(:)   ! Low cloud cover
(  543) !>REAL(KIND=JPRB)          :: PLCC (YDCPG_OPTS%KLON)
(  544)   REAL(KIND=JPRB), POINTER :: PMCC(:)   ! Medium cloud cover
(  545) !>REAL(KIND=JPRB)          :: PMCC (YDCPG_OPTS%KLON)
(  546)   REAL(KIND=JPRB), POINTER :: PHCC(:)   ! High cloud cover
(  547) !>REAL(KIND=JPRB)          :: PHCC (YDCPG_OPTS%KLON)
(  548)   REAL(KIND=JPRB), POINTER :: PLGWS(:)   ! Zonal gravity wave stress
(  549) !>REAL(KIND=JPRB)          :: PLGWS (YDCPG_OPTS%KLON)
(  550)   REAL(KIND=JPRB), POINTER :: PMGWS(:)   ! Meridian gravity wave stress
(  551) !>REAL(KIND=JPRB)          :: PMGWS (YDCPG_OPTS%KLON)
(  552)   REAL(KIND=JPRB), POINTER :: PGWD(:)   ! Gravity wave dissipation






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 12

(  553) !>REAL(KIND=JPRB)          :: PGWD (YDCPG_OPTS%KLON)
(  554)   REAL(KIND=JPRB), POINTER :: PMX2T(:)   ! Maximum temperature at 2 m
(  555) !>REAL(KIND=JPRB)          :: PMX2T (YDCPG_OPTS%KLON)
(  556)   REAL(KIND=JPRB), POINTER :: PMN2T(:)   ! Minimum temperature at 2 m
(  557) !>REAL(KIND=JPRB)          :: PMN2T (YDCPG_OPTS%KLON)
(  558)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMX2T6   ! Bins for maximum temperature at 2 m since last 6 hours
(  559)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMN2T6   ! Bins for minimum temperature at 2 m since last 6 hours
(  560)   REAL(KIND=JPRB), POINTER :: PRO(:)   ! Runoff (total)
(  561) !>REAL(KIND=JPRB)          :: PRO (YDCPG_OPTS%KLON)
(  562)   REAL(KIND=JPRB), POINTER :: PSRO(:)   ! Runoff surface
(  563) !>REAL(KIND=JPRB)          :: PSRO (YDCPG_OPTS%KLON)
(  564)   REAL(KIND=JPRB), POINTER :: PSSRO(:)   ! Runoff sub-surface
(  565) !>REAL(KIND=JPRB)          :: PSSRO (YDCPG_OPTS%KLON)
(  566)   REAL(KIND=JPRB), POINTER :: PALB(:)   ! (surface shortwave) albedo
(  567) !>REAL(KIND=JPRB)          :: PALB (YDCPG_OPTS%KLON)
(  568)   REAL(KIND=JPRB), POINTER :: PIEWSS(:)   ! Instantaneous surface zonal component of stress
(  569) !>REAL(KIND=JPRB)          :: PIEWSS (YDCPG_OPTS%KLON)
(  570)   REAL(KIND=JPRB), POINTER :: PINSSS(:)   ! Instantaneous surface meridian component of stress
(  571) !>REAL(KIND=JPRB)          :: PINSSS (YDCPG_OPTS%KLON)
(  572)   REAL(KIND=JPRB), POINTER :: PISSHF(:)   ! Instantaneous surface heat flux
(  573) !>REAL(KIND=JPRB)          :: PISSHF (YDCPG_OPTS%KLON)
(  574)   REAL(KIND=JPRB), POINTER :: PIE(:)   ! Instantaneous surface moisture flux
(  575) !>REAL(KIND=JPRB)          :: PIE (YDCPG_OPTS%KLON)
(  576)   REAL(KIND=JPRB), POINTER :: PINEE(:)   ! Instantaneous net ecosystem exchange of CO2
(  577) !>REAL(KIND=JPRB)          :: PINEE (YDCPG_OPTS%KLON)
(  578)   REAL(KIND=JPRB), POINTER :: PIGPP(:)   ! Instantaneous gross primary production of CO2
(  579) !>REAL(KIND=JPRB)          :: PIGPP (YDCPG_OPTS%KLON)
(  580)   REAL(KIND=JPRB), POINTER :: PIREC(:)   ! Instantaneous ecosystem respiration of CO2
(  581) !>REAL(KIND=JPRB)          :: PIREC (YDCPG_OPTS%KLON)
(  582)   REAL(KIND=JPRB), POINTER :: PCSF(:)   ! Convective snow fall
(  583) !>REAL(KIND=JPRB)          :: PCSF (YDCPG_OPTS%KLON)
(  584)   REAL(KIND=JPRB), POINTER :: PLSSF(:)   ! Large scale snowfall
(  585) !>REAL(KIND=JPRB)          :: PLSSF (YDCPG_OPTS%KLON)
(  586)   REAL(KIND=JPRB), POINTER :: PMXTPR(:)   ! Max precip rate since last post-processing
(  587) !>REAL(KIND=JPRB)          :: PMXTPR (YDCPG_OPTS%KLON)
(  588)   REAL(KIND=JPRB), POINTER :: PMNTPR(:)   ! Min precip rate since last post-processing
(  589) !>REAL(KIND=JPRB)          :: PMNTPR (YDCPG_OPTS%KLON)
(  590)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMXTPR6   ! Max precip rate in last 6 hours
(  591)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMNTPR6   ! Min precip rate in last 6 hours
(  592)   REAL(KIND=JPRB), POINTER :: PTPR(:)   ! Total precipitation rate
(  593) !>REAL(KIND=JPRB)          :: PTPR (YDCPG_OPTS%KLON)
(  594)   REAL(KIND=JPRB), POINTER :: PLSRR(:)   ! Large scale rain rate
(  595) !>REAL(KIND=JPRB)          :: PLSRR (YDCPG_OPTS%KLON)
(  596)   REAL(KIND=JPRB), POINTER :: PCRR(:)   ! Convective rain rate
(  597) !>REAL(KIND=JPRB)          :: PCRR (YDCPG_OPTS%KLON)
(  598)   REAL(KIND=JPRB), POINTER :: PLSSFR(:)   ! Large scale snowfall rate
(  599) !>REAL(KIND=JPRB)          :: PLSSFR (YDCPG_OPTS%KLON)
(  600)   REAL(KIND=JPRB), POINTER :: PCSFR(:)   ! Convective snowfall rate
(  601) !>REAL(KIND=JPRB)          :: PCSFR (YDCPG_OPTS%KLON)
(  602)   REAL(KIND=JPRB), POINTER :: PPTYPE(:)   ! Precipitation type
(  603) !>REAL(KIND=JPRB)          :: PPTYPE (YDCPG_OPTS%KLON)
(  604)   REAL(KIND=JPRB), POINTER :: PILSPF(:)   ! Large-scale precipitation fraction (inst.)
(  605) !>REAL(KIND=JPRB)          :: PILSPF (YDCPG_OPTS%KLON)
(  606)   REAL(KIND=JPRB), POINTER :: PZ0F(:)   ! Gravity * surface roughness length
(  607) !>REAL(KIND=JPRB)          :: PZ0F (YDCPG_OPTS%KLON)
(  608)   REAL(KIND=JPRB), POINTER :: PLZ0H(:)   ! Logarithm of z0 times heat flux
(  609) !>REAL(KIND=JPRB)          :: PLZ0H (YDCPG_OPTS%KLON)
(  610)   REAL(KIND=JPRB), POINTER :: PVIWVE(:)   ! Vertical integral of eastward water vapour flux






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 13

(  611) !>REAL(KIND=JPRB)          :: PVIWVE (YDCPG_OPTS%KLON)
(  612)   REAL(KIND=JPRB), POINTER :: PVIWVN(:)   ! Vertical integral of northward water vapour flux
(  613) !>REAL(KIND=JPRB)          :: PVIWVN (YDCPG_OPTS%KLON)
(  614)   REAL(KIND=JPRB), POINTER :: PTCW(:)   ! Total water content in a vertical column
(  615) !>REAL(KIND=JPRB)          :: PTCW (YDCPG_OPTS%KLON)
(  616)   REAL(KIND=JPRB), POINTER :: PTCWV(:)   ! Total water vapor content in a vertical column
(  617) !>REAL(KIND=JPRB)          :: PTCWV (YDCPG_OPTS%KLON)
(  618)   REAL(KIND=JPRB), POINTER :: PTCLW(:)   ! Total liquid water content in a vertical column
(  619) !>REAL(KIND=JPRB)          :: PTCLW (YDCPG_OPTS%KLON)
(  620)   REAL(KIND=JPRB), POINTER :: PTCIW(:)   ! Total ice water content in a vertical column
(  621) !>REAL(KIND=JPRB)          :: PTCIW (YDCPG_OPTS%KLON)
(  622)   REAL(KIND=JPRB), POINTER :: PTCRW(:)   ! Total rain water content in a vertical column
(  623) !>REAL(KIND=JPRB)          :: PTCRW (YDCPG_OPTS%KLON)
(  624)   REAL(KIND=JPRB), POINTER :: PTCSW(:)   ! Total snow water content in a vertical column
(  625) !>REAL(KIND=JPRB)          :: PTCSW (YDCPG_OPTS%KLON)
(  626)   REAL(KIND=JPRB), POINTER :: PTCSLW(:)   ! Total supercooled liquid water content in a vertical column
(  627) !>REAL(KIND=JPRB)          :: PTCSLW (YDCPG_OPTS%KLON)
(  628)   REAL(KIND=JPRB), POINTER :: PSSRD(:)   ! Downward surface solar radiation
(  629) !>REAL(KIND=JPRB)          :: PSSRD (YDCPG_OPTS%KLON)
(  630)   REAL(KIND=JPRB), POINTER :: PSTRD(:)   ! Downward surface thermic radiation
(  631) !>REAL(KIND=JPRB)          :: PSTRD (YDCPG_OPTS%KLON)
(  632)   REAL(KIND=JPRB), POINTER :: PSSRDC(:)   ! Clear-sky downward surface solar radiation
(  633) !>REAL(KIND=JPRB)          :: PSSRDC (YDCPG_OPTS%KLON)
(  634)   REAL(KIND=JPRB), POINTER :: PSTRDC(:)   ! Claer-sky downward surface thermal radiation
(  635) !>REAL(KIND=JPRB)          :: PSTRDC (YDCPG_OPTS%KLON)
(  636)   REAL(KIND=JPRB), POINTER :: PBLH(:)   ! Height of boundary layer
(  637) !>REAL(KIND=JPRB)          :: PBLH (YDCPG_OPTS%KLON)
(  638)   REAL(KIND=JPRB), POINTER :: PSUND(:)   ! Sunshine duration
(  639) !>REAL(KIND=JPRB)          :: PSUND (YDCPG_OPTS%KLON)
(  640)   REAL(KIND=JPRB), POINTER :: PSPAR(:)   ! Surface downward PARadiation
(  641) !>REAL(KIND=JPRB)          :: PSPAR (YDCPG_OPTS%KLON)
(  642)   REAL(KIND=JPRB), POINTER :: PSUVB(:)   ! Surface downward UV-B radiation
(  643) !>REAL(KIND=JPRB)          :: PSUVB (YDCPG_OPTS%KLON)
(  644)   REAL(KIND=JPRB), POINTER :: PSFDIR(:)   ! Surface total sky direct downward SW radiation
(  645) !>REAL(KIND=JPRB)          :: PSFDIR (YDCPG_OPTS%KLON)
(  646)   REAL(KIND=JPRB), POINTER :: PSCDIR(:)   ! Surface clear-sky direct downward SW radiation
(  647) !>REAL(KIND=JPRB)          :: PSCDIR (YDCPG_OPTS%KLON)
(  648)   REAL(KIND=JPRB), POINTER :: PSDSRP(:)   ! Surface total-sky direct beam downward SW radiation
(  649) !>REAL(KIND=JPRB)          :: PSDSRP (YDCPG_OPTS%KLON)
(  650)   REAL(KIND=JPRB), POINTER :: PCAPE(:)   ! Conv.avail.potential energy (CAPE)
(  651) !>REAL(KIND=JPRB)          :: PCAPE (YDCPG_OPTS%KLON)
(  652)   REAL(KIND=JPRB), POINTER :: PCAPES(:)   ! CAPE-Shear
(  653) !>REAL(KIND=JPRB)          :: PCAPES (YDCPG_OPTS%KLON)
(  654)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMXCAP6   ! Bins for maximum CAPE in last 6 hours
(  655)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMXCAPS6   ! Bins for maximum CAPE-Shear in last 6 hours
(  656)   REAL(KIND=JPRB), POINTER :: PTSRC(:)   ! Top solar radiation clear sky
(  657) !>REAL(KIND=JPRB)          :: PTSRC (YDCPG_OPTS%KLON)
(  658)   REAL(KIND=JPRB), POINTER :: PTTRC(:)   ! Top thermal radiation clear sky
(  659) !>REAL(KIND=JPRB)          :: PTTRC (YDCPG_OPTS%KLON)
(  660)   REAL(KIND=JPRB), POINTER :: PSSRC(:)   ! Surface solar radiation clear sky
(  661) !>REAL(KIND=JPRB)          :: PSSRC (YDCPG_OPTS%KLON)
(  662)   REAL(KIND=JPRB), POINTER :: PSTRC(:)   ! Surface thermal radiation clear sky
(  663) !>REAL(KIND=JPRB)          :: PSTRC (YDCPG_OPTS%KLON)
(  664)   REAL(KIND=JPRB), POINTER :: PES(:)   ! Evaporation of snow
(  665) !>REAL(KIND=JPRB)          :: PES (YDCPG_OPTS%KLON)
(  666)   REAL(KIND=JPRB), POINTER :: PSMLT(:)   ! Snow melt
(  667) !>REAL(KIND=JPRB)          :: PSMLT (YDCPG_OPTS%KLON)
(  668)   REAL(KIND=JPRB), POINTER :: P10FG(:)   ! Wind gust at 10 m (max since previous pp)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 14

(  669) !>REAL(KIND=JPRB)          :: P10FG (YDCPG_OPTS%KLON)
(  670)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: P10FG6   ! Bins for wind gust at 10 m (max since last 6 hours)
(  671)   REAL(KIND=JPRB), POINTER :: P10FGCV(:)   ! convective wind gust at 10m for current time level (m/s)
(  672) !>REAL(KIND=JPRB)          :: P10FGCV (YDCPG_OPTS%KLON)
(  673)   REAL(KIND=JPRB), POINTER :: PI10FG(:)   ! Wind gust at 10 m ("instantaneous")
(  674) !>REAL(KIND=JPRB)          :: PI10FG (YDCPG_OPTS%KLON)
(  675)   REAL(KIND=JPRB), POINTER :: PLSPF(:)   ! Large scale precipitation fraction
(  676) !>REAL(KIND=JPRB)          :: PLSPF (YDCPG_OPTS%KLON)
(  677)   REAL(KIND=JPRB), POINTER :: PTCO3(:)   ! Total ozone content in a vertical column
(  678) !>REAL(KIND=JPRB)          :: PTCO3 (YDCPG_OPTS%KLON)
(  679)   REAL(KIND=JPRB), POINTER :: PVIMD(:)   ! Vertically integrated mass divergence
(  680) !>REAL(KIND=JPRB)          :: PVIMD (YDCPG_OPTS%KLON)
(  681)   REAL(KIND=JPRB), POINTER :: PSPARC(:)   ! Surface clear-sky parallel radiation
(  682) !>REAL(KIND=JPRB)          :: PSPARC (YDCPG_OPTS%KLON)
(  683)   REAL(KIND=JPRB), POINTER :: PSTINC(:)   ! Top of atmosphere incident solar radiation
(  684) !>REAL(KIND=JPRB)          :: PSTINC (YDCPG_OPTS%KLON)
(  685)   REAL(KIND=JPRB), POINTER :: PCBASE(:)   ! Cloud base level
(  686) !>REAL(KIND=JPRB)          :: PCBASE (YDCPG_OPTS%KLON)
(  687)   REAL(KIND=JPRB), POINTER :: P0DEGL(:)   ! Zero deg. level
(  688) !>REAL(KIND=JPRB)          :: P0DEGL (YDCPG_OPTS%KLON)
(  689)   REAL(KIND=JPRB), POINTER :: PVISIH(:)   ! Horizontal visibility
(  690) !>REAL(KIND=JPRB)          :: PVISIH (YDCPG_OPTS%KLON)
(  691)   REAL(KIND=JPRB), POINTER :: PCIN(:)   ! CIN
(  692) !>REAL(KIND=JPRB)          :: PCIN (YDCPG_OPTS%KLON)
(  693)   REAL(KIND=JPRB), POINTER :: PKINDEX(:)   ! Convective K-Index
(  694) !>REAL(KIND=JPRB)          :: PKINDEX (YDCPG_OPTS%KLON)
(  695)   REAL(KIND=JPRB), POINTER :: PTTINDEX(:)   ! Convective TT-Index
(  696) !>REAL(KIND=JPRB)          :: PTTINDEX (YDCPG_OPTS%KLON)
(  697)   REAL(KIND=JPRB), POINTER :: PCBASEA(:)   ! Cloud base aviation
(  698) !>REAL(KIND=JPRB)          :: PCBASEA (YDCPG_OPTS%KLON)
(  699)   REAL(KIND=JPRB), POINTER :: PCTOPC(:)   ! Cloud top convective
(  700) !>REAL(KIND=JPRB)          :: PCTOPC (YDCPG_OPTS%KLON)
(  701)   REAL(KIND=JPRB), POINTER :: PZTWETB0(:)   ! Height of 0 deg wet bulb temperature
(  702) !>REAL(KIND=JPRB)          :: PZTWETB0 (YDCPG_OPTS%KLON)
(  703)   REAL(KIND=JPRB), POINTER :: PZTWETB1(:)   ! Height of 1 deg wet bulb temperature
(  704) !>REAL(KIND=JPRB)          :: PZTWETB1 (YDCPG_OPTS%KLON)
(  705)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PTCGHG   ! Total column greenhouse gases
(  706)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PTCCHEM   ! Total column chemistry
(  707)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:,:) :: PAERODIAG   ! Per-aerosol-type diagnostics
(  708)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:,:) :: PAERO_WVL_DIAG   ! Per-wavelength aerosol optical diagnostics
(  709)   REAL(KIND=JPRB), POINTER :: P100U(:)   ! 100m zonal wind
(  710) !>REAL(KIND=JPRB)          :: P100U (YDCPG_OPTS%KLON)
(  711)   REAL(KIND=JPRB), POINTER :: P100V(:)   ! 100m meridional wind
(  712) !>REAL(KIND=JPRB)          :: P100V (YDCPG_OPTS%KLON)
(  713)   REAL(KIND=JPRB), POINTER :: P200U(:)   ! 200m zonal wind
(  714) !>REAL(KIND=JPRB)          :: P200U (YDCPG_OPTS%KLON)
(  715)   REAL(KIND=JPRB), POINTER :: P200V(:)   ! 200m meridional wind
(  716) !>REAL(KIND=JPRB)          :: P200V (YDCPG_OPTS%KLON)
(  717)   REAL(KIND=JPRB), POINTER :: PZUST(:)   ! Friction velocity
(  718) !>REAL(KIND=JPRB)          :: PZUST (YDCPG_OPTS%KLON)
(  719)   REAL(KIND=JPRB), POINTER :: P10NU(:)   ! 10m zonal neutral wind
(  720) !>REAL(KIND=JPRB)          :: P10NU (YDCPG_OPTS%KLON)
(  721)   REAL(KIND=JPRB), POINTER :: P10NV(:)   ! 10m meridional neutral wind
(  722) !>REAL(KIND=JPRB)          :: P10NV (YDCPG_OPTS%KLON)
(  723)   REAL(KIND=JPRB), POINTER :: PDNDZN(:)   ! Minimum vertical refractivity gradient
(  724) !>REAL(KIND=JPRB)          :: PDNDZN (YDCPG_OPTS%KLON)
(  725)   REAL(KIND=JPRB), POINTER :: PDNDZA(:)   ! Mean vertical refractivity gradient
(  726) !>REAL(KIND=JPRB)          :: PDNDZA (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 15

(  727)   REAL(KIND=JPRB), POINTER :: PDCTB(:)   ! Duct base height
(  728) !>REAL(KIND=JPRB)          :: PDCTB (YDCPG_OPTS%KLON)
(  729)   REAL(KIND=JPRB), POINTER :: PTPLB(:)   ! Trapping layer base height
(  730) !>REAL(KIND=JPRB)          :: PTPLB (YDCPG_OPTS%KLON)
(  731)   REAL(KIND=JPRB), POINTER :: PTPLT(:)   ! Trapping layer top height
(  732) !>REAL(KIND=JPRB)          :: PTPLT (YDCPG_OPTS%KLON)
(  733)   REAL(KIND=JPRB), POINTER :: PODSS(:)   ! optical depth sea salt aerosols
(  734) !>REAL(KIND=JPRB)          :: PODSS (YDCPG_OPTS%KLON)
(  735)   REAL(KIND=JPRB), POINTER :: PODDU(:)   ! optical depth dust aerosols
(  736) !>REAL(KIND=JPRB)          :: PODDU (YDCPG_OPTS%KLON)
(  737)   REAL(KIND=JPRB), POINTER :: PODOM(:)   ! optical depth organic m. aerosols
(  738) !>REAL(KIND=JPRB)          :: PODOM (YDCPG_OPTS%KLON)
(  739)   REAL(KIND=JPRB), POINTER :: PODBC(:)   ! optical depth black C aerosols
(  740) !>REAL(KIND=JPRB)          :: PODBC (YDCPG_OPTS%KLON)
(  741)   REAL(KIND=JPRB), POINTER :: PODSU(:)   ! optical depth sulphate aerosols
(  742) !>REAL(KIND=JPRB)          :: PODSU (YDCPG_OPTS%KLON)
(  743)   REAL(KIND=JPRB), POINTER :: PODNI(:)   ! optical depth nitrate aerosols
(  744) !>REAL(KIND=JPRB)          :: PODNI (YDCPG_OPTS%KLON)
(  745)   REAL(KIND=JPRB), POINTER :: PODAM(:)   ! optical depth ammonium aerosols
(  746) !>REAL(KIND=JPRB)          :: PODAM (YDCPG_OPTS%KLON)
(  747)   REAL(KIND=JPRB), POINTER :: PODSOA(:)   ! optical depth secondary organic aerosols
(  748) !>REAL(KIND=JPRB)          :: PODSOA (YDCPG_OPTS%KLON)
(  749)   REAL(KIND=JPRB), POINTER :: PODVFA(:)   ! optical depth volcanic flying ash
(  750) !>REAL(KIND=JPRB)          :: PODVFA (YDCPG_OPTS%KLON)
(  751)   REAL(KIND=JPRB), POINTER :: PODVSU(:)   ! optical depth volcanic sulphate aerosols
(  752) !>REAL(KIND=JPRB)          :: PODVSU (YDCPG_OPTS%KLON)
(  753)   REAL(KIND=JPRB), POINTER :: PODTOACC(:)   ! optical depth total aerosol accumulated
(  754) !>REAL(KIND=JPRB)          :: PODTOACC (YDCPG_OPTS%KLON)
(  755)   REAL(KIND=JPRB), POINTER :: PAEPM1(:)   ! particulate matter le 1 um
(  756) !>REAL(KIND=JPRB)          :: PAEPM1 (YDCPG_OPTS%KLON)
(  757)   REAL(KIND=JPRB), POINTER :: PAEPM25(:)   ! particulate matter le 2.5um
(  758) !>REAL(KIND=JPRB)          :: PAEPM25 (YDCPG_OPTS%KLON)
(  759)   REAL(KIND=JPRB), POINTER :: PAEPM10(:)   ! particulate matter le 10 um
(  760) !>REAL(KIND=JPRB)          :: PAEPM10 (YDCPG_OPTS%KLON)
(  761)   REAL(KIND=JPRB), POINTER :: PUVBED(:)   ! UV biologically effective dose
(  762) !>REAL(KIND=JPRB)          :: PUVBED (YDCPG_OPTS%KLON)
(  763)   REAL(KIND=JPRB), POINTER :: PUVBEDCS(:)   ! UV biologically effective dose clear sky
(  764) !>REAL(KIND=JPRB)          :: PUVBEDCS (YDCPG_OPTS%KLON)
(  765)   REAL(KIND=JPRB), POINTER :: PLITOTI(:)   ! instantaneous total lightning flash density
(  766) !>REAL(KIND=JPRB)          :: PLITOTI (YDCPG_OPTS%KLON)
(  767)   REAL(KIND=JPRB), POINTER :: PLICGI(:)   ! instantaneous cloud-to-ground lightning flash density
(  768) !>REAL(KIND=JPRB)          :: PLICGI (YDCPG_OPTS%KLON)
(  769)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PLITOTA6   ! Bins for averaged total lightning over last 6 hours
(  770)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PLICGA6   ! Bins for averaged cloud-to-ground lightning over last 6 hour
(  771)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  772) 
(  773)   TYPE(SURFACE_VARIABLE_GROUP_VDIAG), POINTER :: VARIABLE_GROUP
(  774)   TYPE(FIELD_2D), POINTER :: F_LSP=>NULL()
(  775)   TYPE(FIELD_2D), POINTER :: F_CP=>NULL()
(  776)   TYPE(FIELD_2D), POINTER :: F_SF=>NULL()
(  777)   TYPE(FIELD_2D), POINTER :: F_FZRA=>NULL()
(  778)   TYPE(FIELD_2D), POINTER :: F_BLD=>NULL()
(  779)   TYPE(FIELD_2D), POINTER :: F_SSHF=>NULL()
(  780)   TYPE(FIELD_2D), POINTER :: F_SLHF=>NULL()
(  781)   TYPE(FIELD_2D), POINTER :: F_NEE=>NULL()
(  782)   TYPE(FIELD_2D), POINTER :: F_GPP=>NULL()
(  783)   TYPE(FIELD_2D), POINTER :: F_REC=>NULL()
(  784)   TYPE(FIELD_2D), POINTER :: F_MSL=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 16

(  785)   TYPE(FIELD_2D), POINTER :: F_SP=>NULL()
(  786)   TYPE(FIELD_2D), POINTER :: F_TCC=>NULL()
(  787)   TYPE(FIELD_2D), POINTER :: F_10U=>NULL()
(  788)   TYPE(FIELD_2D), POINTER :: F_10V=>NULL()
(  789)   TYPE(FIELD_2D), POINTER :: F_2T=>NULL()
(  790)   TYPE(FIELD_2D), POINTER :: F_2D=>NULL()
(  791)   TYPE(FIELD_2D), POINTER :: F_2Q=>NULL()
(  792)   TYPE(FIELD_2D), POINTER :: F_SSR=>NULL()
(  793)   TYPE(FIELD_2D), POINTER :: F_STR=>NULL()
(  794)   TYPE(FIELD_2D), POINTER :: F_TSR=>NULL()
(  795)   TYPE(FIELD_2D), POINTER :: F_TTR=>NULL()
(  796)   TYPE(FIELD_2D), POINTER :: F_EWSS=>NULL()
(  797)   TYPE(FIELD_2D), POINTER :: F_NSSS=>NULL()
(  798)   TYPE(FIELD_2D), POINTER :: F_E=>NULL()
(  799)   TYPE(FIELD_2D), POINTER :: F_PEV=>NULL()
(  800)   TYPE(FIELD_2D), POINTER :: F_CCC=>NULL()
(  801)   TYPE(FIELD_2D), POINTER :: F_LCC=>NULL()
(  802)   TYPE(FIELD_2D), POINTER :: F_MCC=>NULL()
(  803)   TYPE(FIELD_2D), POINTER :: F_HCC=>NULL()
(  804)   TYPE(FIELD_2D), POINTER :: F_LGWS=>NULL()
(  805)   TYPE(FIELD_2D), POINTER :: F_MGWS=>NULL()
(  806)   TYPE(FIELD_2D), POINTER :: F_GWD=>NULL()
(  807)   TYPE(FIELD_2D), POINTER :: F_MX2T=>NULL()
(  808)   TYPE(FIELD_2D), POINTER :: F_MN2T=>NULL()
(  809)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MX2T6
(  810)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MN2T6
(  811)   TYPE(FIELD_2D), POINTER :: F_RO=>NULL()
(  812)   TYPE(FIELD_2D), POINTER :: F_SRO=>NULL()
(  813)   TYPE(FIELD_2D), POINTER :: F_SSRO=>NULL()
(  814)   TYPE(FIELD_2D), POINTER :: F_ALB=>NULL()
(  815)   TYPE(FIELD_2D), POINTER :: F_IEWSS=>NULL()
(  816)   TYPE(FIELD_2D), POINTER :: F_INSSS=>NULL()
(  817)   TYPE(FIELD_2D), POINTER :: F_ISSHF=>NULL()
(  818)   TYPE(FIELD_2D), POINTER :: F_IE=>NULL()
(  819)   TYPE(FIELD_2D), POINTER :: F_INEE=>NULL()
(  820)   TYPE(FIELD_2D), POINTER :: F_IGPP=>NULL()
(  821)   TYPE(FIELD_2D), POINTER :: F_IREC=>NULL()
(  822)   TYPE(FIELD_2D), POINTER :: F_CSF=>NULL()
(  823)   TYPE(FIELD_2D), POINTER :: F_LSSF=>NULL()
(  824)   TYPE(FIELD_2D), POINTER :: F_MXTPR=>NULL()
(  825)   TYPE(FIELD_2D), POINTER :: F_MNTPR=>NULL()
(  826)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MXTPR6
(  827)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MNTPR6
(  828)   TYPE(FIELD_2D), POINTER :: F_TPR=>NULL()
(  829)   TYPE(FIELD_2D), POINTER :: F_LSRR=>NULL()
(  830)   TYPE(FIELD_2D), POINTER :: F_CRR=>NULL()
(  831)   TYPE(FIELD_2D), POINTER :: F_LSSFR=>NULL()
(  832)   TYPE(FIELD_2D), POINTER :: F_CSFR=>NULL()
(  833)   TYPE(FIELD_2D), POINTER :: F_PTYPE=>NULL()
(  834)   TYPE(FIELD_2D), POINTER :: F_ILSPF=>NULL()
(  835)   TYPE(FIELD_2D), POINTER :: F_Z0F=>NULL()
(  836)   TYPE(FIELD_2D), POINTER :: F_LZ0H=>NULL()
(  837)   TYPE(FIELD_2D), POINTER :: F_VIWVE=>NULL()
(  838)   TYPE(FIELD_2D), POINTER :: F_VIWVN=>NULL()
(  839)   TYPE(FIELD_2D), POINTER :: F_TCW=>NULL()
(  840)   TYPE(FIELD_2D), POINTER :: F_TCWV=>NULL()
(  841)   TYPE(FIELD_2D), POINTER :: F_TCLW=>NULL()
(  842)   TYPE(FIELD_2D), POINTER :: F_TCIW=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 17

(  843)   TYPE(FIELD_2D), POINTER :: F_TCRW=>NULL()
(  844)   TYPE(FIELD_2D), POINTER :: F_TCSW=>NULL()
(  845)   TYPE(FIELD_2D), POINTER :: F_TCSLW=>NULL()
(  846)   TYPE(FIELD_2D), POINTER :: F_SSRD=>NULL()
(  847)   TYPE(FIELD_2D), POINTER :: F_STRD=>NULL()
(  848)   TYPE(FIELD_2D), POINTER :: F_SSRDC=>NULL()
(  849)   TYPE(FIELD_2D), POINTER :: F_STRDC=>NULL()
(  850)   TYPE(FIELD_2D), POINTER :: F_BLH=>NULL()
(  851)   TYPE(FIELD_2D), POINTER :: F_SUND=>NULL()
(  852)   TYPE(FIELD_2D), POINTER :: F_SPAR=>NULL()
(  853)   TYPE(FIELD_2D), POINTER :: F_SUVB=>NULL()
(  854)   TYPE(FIELD_2D), POINTER :: F_SFDIR=>NULL()
(  855)   TYPE(FIELD_2D), POINTER :: F_SCDIR=>NULL()
(  856)   TYPE(FIELD_2D), POINTER :: F_SDSRP=>NULL()
(  857)   TYPE(FIELD_2D), POINTER :: F_CAPE=>NULL()
(  858)   TYPE(FIELD_2D), POINTER :: F_CAPES=>NULL()
(  859)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MXCAP6
(  860)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MXCAPS6
(  861)   TYPE(FIELD_2D), POINTER :: F_TSRC=>NULL()
(  862)   TYPE(FIELD_2D), POINTER :: F_TTRC=>NULL()
(  863)   TYPE(FIELD_2D), POINTER :: F_SSRC=>NULL()
(  864)   TYPE(FIELD_2D), POINTER :: F_STRC=>NULL()
(  865)   TYPE(FIELD_2D), POINTER :: F_ES=>NULL()
(  866)   TYPE(FIELD_2D), POINTER :: F_SMLT=>NULL()
(  867)   TYPE(FIELD_2D), POINTER :: F_10FG=>NULL()
(  868)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_10FG6
(  869)   TYPE(FIELD_2D), POINTER :: F_10FGCV=>NULL()
(  870)   TYPE(FIELD_2D), POINTER :: F_I10FG=>NULL()
(  871)   TYPE(FIELD_2D), POINTER :: F_LSPF=>NULL()
(  872)   TYPE(FIELD_2D), POINTER :: F_TCO3=>NULL()
(  873)   TYPE(FIELD_2D), POINTER :: F_VIMD=>NULL()
(  874)   TYPE(FIELD_2D), POINTER :: F_SPARC=>NULL()
(  875)   TYPE(FIELD_2D), POINTER :: F_STINC=>NULL()
(  876)   TYPE(FIELD_2D), POINTER :: F_CBASE=>NULL()
(  877)   TYPE(FIELD_2D), POINTER :: F_0DEGL=>NULL()
(  878)   TYPE(FIELD_2D), POINTER :: F_VISIH=>NULL()
(  879)   TYPE(FIELD_2D), POINTER :: F_CIN=>NULL()
(  880)   TYPE(FIELD_2D), POINTER :: F_KINDEX=>NULL()
(  881)   TYPE(FIELD_2D), POINTER :: F_TTINDEX=>NULL()
(  882)   TYPE(FIELD_2D), POINTER :: F_CBASEA=>NULL()
(  883)   TYPE(FIELD_2D), POINTER :: F_CTOPC=>NULL()
(  884)   TYPE(FIELD_2D), POINTER :: F_ZTWETB0=>NULL()
(  885)   TYPE(FIELD_2D), POINTER :: F_ZTWETB1=>NULL()
(  886)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_TCGHG
(  887)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_TCCHEM
(  888)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:,:) :: F_AERODIAG
(  889)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:,:) :: F_AERO_WVL_DIAG
(  890)   TYPE(FIELD_2D), POINTER :: F_100U=>NULL()
(  891)   TYPE(FIELD_2D), POINTER :: F_100V=>NULL()
(  892)   TYPE(FIELD_2D), POINTER :: F_200U=>NULL()
(  893)   TYPE(FIELD_2D), POINTER :: F_200V=>NULL()
(  894)   TYPE(FIELD_2D), POINTER :: F_ZUST=>NULL()
(  895)   TYPE(FIELD_2D), POINTER :: F_10NU=>NULL()
(  896)   TYPE(FIELD_2D), POINTER :: F_10NV=>NULL()
(  897)   TYPE(FIELD_2D), POINTER :: F_DNDZN=>NULL()
(  898)   TYPE(FIELD_2D), POINTER :: F_DNDZA=>NULL()
(  899)   TYPE(FIELD_2D), POINTER :: F_DCTB=>NULL()
(  900)   TYPE(FIELD_2D), POINTER :: F_TPLB=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 18

(  901)   TYPE(FIELD_2D), POINTER :: F_TPLT=>NULL()
(  902)   TYPE(FIELD_2D), POINTER :: F_ODSS=>NULL()
(  903)   TYPE(FIELD_2D), POINTER :: F_ODDU=>NULL()
(  904)   TYPE(FIELD_2D), POINTER :: F_ODOM=>NULL()
(  905)   TYPE(FIELD_2D), POINTER :: F_ODBC=>NULL()
(  906)   TYPE(FIELD_2D), POINTER :: F_ODSU=>NULL()
(  907)   TYPE(FIELD_2D), POINTER :: F_ODNI=>NULL()
(  908)   TYPE(FIELD_2D), POINTER :: F_ODAM=>NULL()
(  909)   TYPE(FIELD_2D), POINTER :: F_ODSOA=>NULL()
(  910)   TYPE(FIELD_2D), POINTER :: F_ODVFA=>NULL()
(  911)   TYPE(FIELD_2D), POINTER :: F_ODVSU=>NULL()
(  912)   TYPE(FIELD_2D), POINTER :: F_ODTOACC=>NULL()
(  913)   TYPE(FIELD_2D), POINTER :: F_AEPM1=>NULL()
(  914)   TYPE(FIELD_2D), POINTER :: F_AEPM25=>NULL()
(  915)   TYPE(FIELD_2D), POINTER :: F_AEPM10=>NULL()
(  916)   TYPE(FIELD_2D), POINTER :: F_UVBED=>NULL()
(  917)   TYPE(FIELD_2D), POINTER :: F_UVBEDCS=>NULL()
(  918)   TYPE(FIELD_2D), POINTER :: F_LITOTI=>NULL()
(  919)   TYPE(FIELD_2D), POINTER :: F_LICGI=>NULL()
(  920)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_LITOTA6
(  921)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_LICGA6
(  922)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  923) 
(  924) CONTAINS
(  925)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VDIAG_INIT
(  926)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VDIAG_UPDATE_VIEW
(  927) END TYPE SURFACE_VIEW_GROUP_VDIAG
(  928) 
(  929) TYPE SURFACE_VIEW_GROUP_SATSIM
(  930)   REAL(KIND=JPRB), POINTER :: PCLBT(:,:)   ! Cloudy brightness temperature
(  931) !>REAL(KIND=JPRB)          :: PCLBT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_SMD%NLEVS)
(  932)   REAL(KIND=JPRB), POINTER :: PCSBT(:,:)   ! Clear-sky brightness temperature
(  933) !>REAL(KIND=JPRB)          :: PCSBT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_SMD%NLEVS)
(  934)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  935) 
(  936)   TYPE(SURFACE_VARIABLE_GROUP_SATSIM), POINTER :: VARIABLE_GROUP
(  937)   TYPE(FIELD_3D), POINTER :: F_CLBT=>NULL()
(  938)   TYPE(FIELD_3D), POINTER :: F_CSBT=>NULL()
(  939)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  940) 
(  941) CONTAINS
(  942)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SATSIM_INIT
(  943)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SATSIM_UPDATE_VIEW
(  944) END TYPE SURFACE_VIEW_GROUP_SATSIM
(  945) 
(  946) TYPE SURFACE_VIEW_GROUP_WAVES
(  947)   REAL(KIND=JPRB), POINTER :: PCHAR(:)   ! Charnock parameter as modified by the wave model.
(  948) !>REAL(KIND=JPRB)          :: PCHAR (YDCPG_OPTS%KLON)
(  949)   REAL(KIND=JPRB), POINTER :: PUSTOKES(:)   ! U-component of the surface Stokes drift.
(  950) !>REAL(KIND=JPRB)          :: PUSTOKES (YDCPG_OPTS%KLON)
(  951)   REAL(KIND=JPRB), POINTER :: PVSTOKES(:)   ! V-component of the surface Stokes drift.
(  952) !>REAL(KIND=JPRB)          :: PVSTOKES (YDCPG_OPTS%KLON)
(  953)   REAL(KIND=JPRB), POINTER :: PPHIOC(:)   ! Energy flux to ocean.
(  954) !>REAL(KIND=JPRB)          :: PPHIOC (YDCPG_OPTS%KLON)
(  955)   REAL(KIND=JPRB), POINTER :: PPHIAW(:)   ! Energy flux to ocean waves.
(  956) !>REAL(KIND=JPRB)          :: PPHIAW (YDCPG_OPTS%KLON)
(  957)   REAL(KIND=JPRB), POINTER :: PTAUOC(:)   ! Momentum flux to ocean.
(  958) !>REAL(KIND=JPRB)          :: PTAUOC (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 19

(  959)   REAL(KIND=JPRB), POINTER :: PEMEAN(:)   ! Wave variance.
(  960) !>REAL(KIND=JPRB)          :: PEMEAN (YDCPG_OPTS%KLON)
(  961)   REAL(KIND=JPRB), POINTER :: PFMEAN(:)   ! Wave mean frequency.
(  962) !>REAL(KIND=JPRB)          :: PFMEAN (YDCPG_OPTS%KLON)
(  963)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  964) 
(  965)   TYPE(SURFACE_VARIABLE_GROUP_WAVES), POINTER :: VARIABLE_GROUP
(  966)   TYPE(FIELD_2D), POINTER :: F_CHAR=>NULL()
(  967)   TYPE(FIELD_2D), POINTER :: F_USTOKES=>NULL()
(  968)   TYPE(FIELD_2D), POINTER :: F_VSTOKES=>NULL()
(  969)   TYPE(FIELD_2D), POINTER :: F_PHIOC=>NULL()
(  970)   TYPE(FIELD_2D), POINTER :: F_PHIAW=>NULL()
(  971)   TYPE(FIELD_2D), POINTER :: F_TAUOC=>NULL()
(  972)   TYPE(FIELD_2D), POINTER :: F_EMEAN=>NULL()
(  973)   TYPE(FIELD_2D), POINTER :: F_FMEAN=>NULL()
(  974)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  975) 
(  976) CONTAINS
(  977)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_WAVES_INIT
(  978)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_WAVES_UPDATE_VIEW
(  979) END TYPE SURFACE_VIEW_GROUP_WAVES
(  980) 
(  981) TYPE SURFACE_VIEW_GROUP_WAM
(  982)   REAL(KIND=JPRB), POINTER :: PU10N(:)   ! 10m neutral wind U-component passed to the wave model (WAM).
(  983) !>REAL(KIND=JPRB)          :: PU10N (YDCPG_OPTS%KLON)
(  984)   REAL(KIND=JPRB), POINTER :: PV10N(:)   ! 10m neutral wind V-component passed to the wave model (WAM).
(  985) !>REAL(KIND=JPRB)          :: PV10N (YDCPG_OPTS%KLON)
(  986)   REAL(KIND=JPRB), POINTER :: PRHO(:)   ! surface density passed to the wave model (WAM).
(  987) !>REAL(KIND=JPRB)          :: PRHO (YDCPG_OPTS%KLON)
(  988)   REAL(KIND=JPRB), POINTER :: PZIL(:)   ! ZI/L passed to the wave model (used for gustiness in WAM).
(  989) !>REAL(KIND=JPRB)          :: PZIL (YDCPG_OPTS%KLON)
(  990)   REAL(KIND=JPRB), POINTER :: PCIF(:)   ! Sea ice fraction passed to the wave model (WAM).
(  991) !>REAL(KIND=JPRB)          :: PCIF (YDCPG_OPTS%KLON)
(  992)   REAL(KIND=JPRB), POINTER :: PCLK(:)   ! Lake cover passed to the wave model (WAM).
(  993) !>REAL(KIND=JPRB)          :: PCLK (YDCPG_OPTS%KLON)
(  994)   REAL(KIND=JPRB), POINTER :: PUCURW(:)   ! Ocean current    U-component passed to the wave model (WAM).
(  995) !>REAL(KIND=JPRB)          :: PUCURW (YDCPG_OPTS%KLON)
(  996)   REAL(KIND=JPRB), POINTER :: PVCURW(:)   ! Ocean current    V-component passed to the wave model (WAM).
(  997) !>REAL(KIND=JPRB)          :: PVCURW (YDCPG_OPTS%KLON)
(  998)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  999) 
( 1000)   TYPE(SURFACE_VARIABLE_GROUP_WAM), POINTER :: VARIABLE_GROUP
( 1001)   TYPE(FIELD_2D), POINTER :: F_U10N=>NULL()
( 1002)   TYPE(FIELD_2D), POINTER :: F_V10N=>NULL()
( 1003)   TYPE(FIELD_2D), POINTER :: F_RHO=>NULL()
( 1004)   TYPE(FIELD_2D), POINTER :: F_ZIL=>NULL()
( 1005)   TYPE(FIELD_2D), POINTER :: F_CIF=>NULL()
( 1006)   TYPE(FIELD_2D), POINTER :: F_CLK=>NULL()
( 1007)   TYPE(FIELD_2D), POINTER :: F_UCURW=>NULL()
( 1008)   TYPE(FIELD_2D), POINTER :: F_VCURW=>NULL()
( 1009)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1010) 
( 1011) CONTAINS
( 1012)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_WAM_INIT
( 1013)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_WAM_UPDATE_VIEW
( 1014) END TYPE SURFACE_VIEW_GROUP_WAM
( 1015) 
( 1016) TYPE SURFACE_VIEW_GROUP_PRECFRAC






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 20

( 1017)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1018) 
( 1019)   TYPE(SURFACE_VARIABLE_GROUP_PRECFRAC), POINTER :: VARIABLE_GROUP
( 1020)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1021) 
( 1022) CONTAINS
( 1023)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_PRECFRAC_INIT
( 1024)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_PRECFRAC_UPDATE_VIEW
( 1025) END TYPE SURFACE_VIEW_GROUP_PRECFRAC
( 1026) 
( 1027) TYPE SURFACE_VIEW_GROUP_VEXTRA
( 1028)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1029) 
( 1030)   TYPE(SURFACE_VARIABLE_GROUP_VEXTRA), POINTER :: VARIABLE_GROUP
( 1031)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1032) 
( 1033) CONTAINS
( 1034)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VEXTRA_INIT
( 1035)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VEXTRA_UPDATE_VIEW
( 1036) END TYPE SURFACE_VIEW_GROUP_VEXTRA
( 1037) 
( 1038) TYPE SURFACE_VIEW_GROUP_VEXTRDI
( 1039)   REAL(KIND=JPRB), POINTER :: PXEDR(:,:)   ! Eddy diffusivity rate
( 1040) !>REAL(KIND=JPRB)          :: PXEDR (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_DID%NLEVS)
( 1041)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1042) 
( 1043)   TYPE(SURFACE_VARIABLE_GROUP_VEXTRDI), POINTER :: VARIABLE_GROUP
( 1044)   TYPE(FIELD_3D), POINTER :: F_XEDR=>NULL()
( 1045)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1046) 
( 1047) CONTAINS
( 1048)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VEXTRDI_INIT
( 1049)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VEXTRDI_UPDATE_VIEW
( 1050) END TYPE SURFACE_VIEW_GROUP_VEXTRDI
( 1051) 
( 1052) TYPE SURFACE_VIEW_GROUP_VPRECIP
( 1053)   REAL(KIND=JPRB), POINTER :: PPRECIP(:,:)   ! Diagnostic of precipitations type
( 1054) !>REAL(KIND=JPRB)          :: PPRECIP (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_XPD%NLEVS)
( 1055)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1056) 
( 1057)   TYPE(SURFACE_VARIABLE_GROUP_VPRECIP), POINTER :: VARIABLE_GROUP
( 1058)   TYPE(FIELD_3D), POINTER :: F_PRECIP=>NULL()
( 1059)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1060) 
( 1061) CONTAINS
( 1062)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VPRECIP_INIT
( 1063)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VPRECIP_UPDATE_VIEW
( 1064) END TYPE SURFACE_VIEW_GROUP_VPRECIP
( 1065) 
( 1066) TYPE SURFACE_VIEW_GROUP_VPRECIP2
( 1067)   REAL(KIND=JPRB), POINTER :: PPRECIP2(:,:)   ! Diagnostic of precipitations type
( 1068) !>REAL(KIND=JPRB)          :: PPRECIP2 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_XP2D%NLEVS)
( 1069)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1070) 
( 1071)   TYPE(SURFACE_VARIABLE_GROUP_VPRECIP2), POINTER :: VARIABLE_GROUP
( 1072)   TYPE(FIELD_3D), POINTER :: F_PRECIP2=>NULL()
( 1073)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1074) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 21

( 1075) CONTAINS
( 1076)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VPRECIP2_INIT
( 1077)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VPRECIP2_UPDATE_VIEW
( 1078) END TYPE SURFACE_VIEW_GROUP_VPRECIP2
( 1079) 
( 1080) TYPE SURFACE_VIEW_GROUP_VEXTR2
( 1081)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1082) 
( 1083)   TYPE(SURFACE_VARIABLE_GROUP_VEXTR2), POINTER :: VARIABLE_GROUP
( 1084)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1085) 
( 1086) CONTAINS
( 1087)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VEXTR2_INIT
( 1088)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VEXTR2_UPDATE_VIEW
( 1089) END TYPE SURFACE_VIEW_GROUP_VEXTR2
( 1090) 
( 1091) TYPE SURFACE_VIEW_GROUP_SFORC
( 1092)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1093) 
( 1094)   TYPE(SURFACE_VARIABLE_GROUP_SFORC), POINTER :: VARIABLE_GROUP
( 1095)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1096) 
( 1097) CONTAINS
( 1098)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SFORC_INIT
( 1099)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SFORC_UPDATE_VIEW
( 1100) END TYPE SURFACE_VIEW_GROUP_SFORC
( 1101) 
( 1102) TYPE SURFACE_VIEW_GROUP_SFLUX
( 1103)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1104) 
( 1105)   TYPE(SURFACE_VARIABLE_GROUP_SFLUX), POINTER :: VARIABLE_GROUP
( 1106)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1107) 
( 1108) CONTAINS
( 1109)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SFLUX_INIT
( 1110)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SFLUX_UPDATE_VIEW
( 1111) END TYPE SURFACE_VIEW_GROUP_SFLUX
( 1112) 
( 1113) TYPE SURFACE_VIEW_GROUP_VO3ABC
( 1114)   REAL(KIND=JPRB), POINTER :: PA(:)   ! A climatological ozone profile
( 1115) !>REAL(KIND=JPRB)          :: PA (YDCPG_OPTS%KLON)
( 1116)   REAL(KIND=JPRB), POINTER :: PB(:)   ! B climatological ozone profile
( 1117) !>REAL(KIND=JPRB)          :: PB (YDCPG_OPTS%KLON)
( 1118)   REAL(KIND=JPRB), POINTER :: PC(:)   ! C climatological ozone profile
( 1119) !>REAL(KIND=JPRB)          :: PC (YDCPG_OPTS%KLON)
( 1120)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1121) 
( 1122)   TYPE(SURFACE_VARIABLE_GROUP_VO3ABC), POINTER :: VARIABLE_GROUP
( 1123)   TYPE(FIELD_2D), POINTER :: F_A=>NULL()
( 1124)   TYPE(FIELD_2D), POINTER :: F_B=>NULL()
( 1125)   TYPE(FIELD_2D), POINTER :: F_C=>NULL()
( 1126)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1127) 
( 1128) CONTAINS
( 1129)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VO3ABC_INIT
( 1130)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VO3ABC_UPDATE_VIEW
( 1131) END TYPE SURFACE_VIEW_GROUP_VO3ABC
( 1132) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 22

( 1133) 
( 1134) CONTAINS
( 1135) 
( 1136)   SUBROUTINE SURFACE_VIEW_GROUP_VARSF_INIT(SELF, VARIABLE_GROUP)
( 1137)     ! Constructor of the array view type for a surface variable group
( 1138)     CLASS(SURFACE_VIEW_GROUP_VARSF) :: SELF
( 1139)     TYPE(SURFACE_VARIABLE_GROUP_VARSF), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1140)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1141) 
( 1142)     ! Create a view for the "T0" field only for diagnostic fields
( 1143)     SELF%F_Z0F => VARIABLE_GROUP%VZ0F%FT0
( 1144)     SELF%F_ALBF => VARIABLE_GROUP%VALBF%FT0
( 1145)     SELF%F_EMISF => VARIABLE_GROUP%VEMISF%FT0
( 1146)     SELF%F_GETRL => VARIABLE_GROUP%VGETRL%FT0
( 1147)     SELF%F_LSM => VARIABLE_GROUP%VLSM%FT0
( 1148)     SELF%F_VEG => VARIABLE_GROUP%VVEG%FT0
( 1149)     SELF%F_VRLAN => VARIABLE_GROUP%VVRLAN%FT0
( 1150)     SELF%F_VRLDI => VARIABLE_GROUP%VVRLDI%FT0
( 1151)     SELF%F_SIG => VARIABLE_GROUP%VSIG%FT0
( 1152)     SELF%F_ALBSF => VARIABLE_GROUP%VALBSF%FT0
( 1153)     SELF%F_LAN => VARIABLE_GROUP%VLAN%FT0
( 1154)     SELF%F_SST => VARIABLE_GROUP%VSST%FT0
( 1155)     SELF%F_SSS => VARIABLE_GROUP%VSSS%FT0
( 1156)     SELF%F_LZ0H => VARIABLE_GROUP%VLZ0H%FT0
( 1157)     SELF%F_CVL => VARIABLE_GROUP%VCVL%FT0
( 1158)     SELF%F_CVH => VARIABLE_GROUP%VCVH%FT0
( 1159)     SELF%F_TVL => VARIABLE_GROUP%VTVL%FT0
( 1160)     SELF%F_TVH => VARIABLE_GROUP%VTVH%FT0
( 1161)     SELF%F_LAIL => VARIABLE_GROUP%VLAIL%FT0
( 1162)     SELF%F_LAIH => VARIABLE_GROUP%VLAIH%FT0
( 1163)     SELF%F_SOTY => VARIABLE_GROUP%VSOTY%FT0
( 1164)     SELF%F_CLK => VARIABLE_GROUP%VCLK%FT0
( 1165)     SELF%F_DL => VARIABLE_GROUP%VDL%FT0
( 1166)     SELF%F_CI => VARIABLE_GROUP%VCI%FT0
( 1167)     SELF%F_UCUR => VARIABLE_GROUP%VUCUR%FT0
( 1168)     SELF%F_VCUR => VARIABLE_GROUP%VVCUR%FT0
( 1169)     SELF%F_Z0RLF => VARIABLE_GROUP%VZ0RLF%FT0
( 1170)     SELF%F_CO2O => VARIABLE_GROUP%VCO2O%FT0
( 1171)     SELF%F_CO2B => VARIABLE_GROUP%VCO2B%FT0
( 1172)     SELF%F_CO2A => VARIABLE_GROUP%VCO2A%FT0
( 1173)     SELF%F_CO2F => VARIABLE_GROUP%VCO2F%FT0
( 1174)     SELF%F_CGPP => VARIABLE_GROUP%VCGPP%FT0
( 1175)     SELF%F_CREC => VARIABLE_GROUP%VCREC%FT0
( 1176)     SELF%F_CH4AG => VARIABLE_GROUP%VCH4AG%FT0
( 1177)     SELF%F_CH4F => VARIABLE_GROUP%VCH4F%FT0
( 1178)     SELF%F_SDFOR => VARIABLE_GROUP%VSDFOR%FT0
( 1179)     SELF%F_ALUVP => VARIABLE_GROUP%VALUVP%FT0
( 1180)     SELF%F_ALUVD => VARIABLE_GROUP%VALUVD%FT0
( 1181)     SELF%F_ALNIP => VARIABLE_GROUP%VALNIP%FT0
( 1182)     SELF%F_ALNID => VARIABLE_GROUP%VALNID%FT0
( 1183)     SELF%F_FP1 => VARIABLE_GROUP%VFP1%FT0
( 1184)     SELF%F_BCBF => VARIABLE_GROUP%VBCBF%FT0
( 1185)     SELF%F_BCFF => VARIABLE_GROUP%VBCFF%FT0
( 1186)     SELF%F_BCGF => VARIABLE_GROUP%VBCGF%FT0
( 1187)     SELF%F_OMBF => VARIABLE_GROUP%VOMBF%FT0
( 1188)     SELF%F_OMFF => VARIABLE_GROUP%VOMFF%FT0
( 1189)     SELF%F_OMGF => VARIABLE_GROUP%VOMGF%FT0
( 1190)     SELF%F_INJF => VARIABLE_GROUP%VINJF%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 23

( 1191)     SELF%F_SO2L => VARIABLE_GROUP%VSO2L%FT0
( 1192)     SELF%F_SO2H => VARIABLE_GROUP%VSO2H%FT0
( 1193)     SELF%F_SO2DD => VARIABLE_GROUP%VSO2DD%FT0
( 1194)     SELF%F_SOGF => VARIABLE_GROUP%VSOGF%FT0
( 1195)     SELF%F_SOA => VARIABLE_GROUP%VSOA%FT0
( 1196)     SELF%F_VOLC => VARIABLE_GROUP%VVOLC%FT0
( 1197)     SELF%F_VOLE => VARIABLE_GROUP%VVOLE%FT0
( 1198)     SELF%F_DMSO => VARIABLE_GROUP%VDMSO%FT0
( 1199)     SELF%F_SOACO => VARIABLE_GROUP%VSOACO%FT0
( 1200)     SELF%F_URBF => VARIABLE_GROUP%VURBF%FT0
( 1201)     SELF%F_VOLCALTI => VARIABLE_GROUP%VVOLCALTI%FT0
( 1202)     SELF%F_FCA1 => VARIABLE_GROUP%VFCA1%FT0
( 1203)     SELF%F_FCA2 => VARIABLE_GROUP%VFCA2%FT0
( 1204)     SELF%F_AERDEP => VARIABLE_GROUP%VAERDEP%FT0
( 1205)     SELF%F_AERLTS => VARIABLE_GROUP%VAERLTS%FT0
( 1206)     SELF%F_AERSCC => VARIABLE_GROUP%VAERSCC%FT0
( 1207)     SELF%F_DSF => VARIABLE_GROUP%VDSF%FT0
( 1208)     IF (ALLOCATED(VARIABLE_GROUP%VCHEMFLX)) THEN
( 1209)       ALLOCATE(SELF%PCHEMFLX(SIZE(VARIABLE_GROUP%VCHEMFLX)))
( 1210)       ALLOCATE(SELF%F_CHEMFLX(SIZE(VARIABLE_GROUP%VCHEMFLX)))
( 1211)       DO I=1, SIZE(VARIABLE_GROUP%VCHEMFLX)
( 1212)         SELF%F_CHEMFLX(I)%PTR => VARIABLE_GROUP%VCHEMFLX(I)%FT0
( 1213)       END DO
( 1214)     END IF
( 1215)     IF (ALLOCATED(VARIABLE_GROUP%VCHEMFLXO)) THEN
( 1216)       ALLOCATE(SELF%PCHEMFLXO(SIZE(VARIABLE_GROUP%VCHEMFLXO)))
( 1217)       ALLOCATE(SELF%F_CHEMFLXO(SIZE(VARIABLE_GROUP%VCHEMFLXO)))
( 1218)       DO I=1, SIZE(VARIABLE_GROUP%VCHEMFLXO)
( 1219)         SELF%F_CHEMFLXO(I)%PTR => VARIABLE_GROUP%VCHEMFLXO(I)%FT0
( 1220)       END DO
( 1221)     END IF
( 1222)     IF (ALLOCATED(VARIABLE_GROUP%VCHEMDV)) THEN
( 1223)       ALLOCATE(SELF%PCHEMDV(SIZE(VARIABLE_GROUP%VCHEMDV)))
( 1224)       ALLOCATE(SELF%F_CHEMDV(SIZE(VARIABLE_GROUP%VCHEMDV)))
( 1225)       DO I=1, SIZE(VARIABLE_GROUP%VCHEMDV)
( 1226)         SELF%F_CHEMDV(I)%PTR => VARIABLE_GROUP%VCHEMDV(I)%FT0
( 1227)       END DO
( 1228)     END IF
( 1229)     SELF%F_NUDM => VARIABLE_GROUP%VNUDM%FT0
( 1230)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1231)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1232)   END SUBROUTINE SURFACE_VIEW_GROUP_VARSF_INIT
( 1233) 
( 1234)   SUBROUTINE SURFACE_VIEW_GROUP_VARSF_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1235)     ! Extract local array views from field objects
( 1236)     CLASS(SURFACE_VIEW_GROUP_VARSF) :: SELF
( 1237)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1238)     INTEGER(KIND=JPIM) :: I, J
( 1239) 
( 1240)     ! Set up the view pointer for the "T0" field
( 1241)     IF (ASSOCIATED(SELF%F_Z0F))  SELF%PZ0F => SELF%F_Z0F%GET_VIEW(BLOCK_INDEX)
( 1242)     IF (ASSOCIATED(SELF%F_ALBF))  SELF%PALBF => SELF%F_ALBF%GET_VIEW(BLOCK_INDEX)
( 1243)     IF (ASSOCIATED(SELF%F_EMISF))  SELF%PEMISF => SELF%F_EMISF%GET_VIEW(BLOCK_INDEX)
( 1244)     IF (ASSOCIATED(SELF%F_GETRL))  SELF%PGETRL => SELF%F_GETRL%GET_VIEW(BLOCK_INDEX)
( 1245)     IF (ASSOCIATED(SELF%F_LSM))  SELF%PLSM => SELF%F_LSM%GET_VIEW(BLOCK_INDEX)
( 1246)     IF (ASSOCIATED(SELF%F_VEG))  SELF%PVEG => SELF%F_VEG%GET_VIEW(BLOCK_INDEX)
( 1247)     IF (ASSOCIATED(SELF%F_VRLAN))  SELF%PVRLAN => SELF%F_VRLAN%GET_VIEW(BLOCK_INDEX)
( 1248)     IF (ASSOCIATED(SELF%F_VRLDI))  SELF%PVRLDI => SELF%F_VRLDI%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 24

( 1249)     IF (ASSOCIATED(SELF%F_SIG))  SELF%PSIG => SELF%F_SIG%GET_VIEW(BLOCK_INDEX)
( 1250)     IF (ASSOCIATED(SELF%F_ALBSF))  SELF%PALBSF => SELF%F_ALBSF%GET_VIEW(BLOCK_INDEX)
( 1251)     IF (ASSOCIATED(SELF%F_LAN))  SELF%PLAN => SELF%F_LAN%GET_VIEW(BLOCK_INDEX)
( 1252)     IF (ASSOCIATED(SELF%F_SST))  SELF%PSST => SELF%F_SST%GET_VIEW(BLOCK_INDEX)
( 1253)     IF (ASSOCIATED(SELF%F_SSS))  SELF%PSSS => SELF%F_SSS%GET_VIEW(BLOCK_INDEX)
( 1254)     IF (ASSOCIATED(SELF%F_LZ0H))  SELF%PLZ0H => SELF%F_LZ0H%GET_VIEW(BLOCK_INDEX)
( 1255)     IF (ASSOCIATED(SELF%F_CVL))  SELF%PCVL => SELF%F_CVL%GET_VIEW(BLOCK_INDEX)
( 1256)     IF (ASSOCIATED(SELF%F_CVH))  SELF%PCVH => SELF%F_CVH%GET_VIEW(BLOCK_INDEX)
( 1257)     IF (ASSOCIATED(SELF%F_TVL))  SELF%PTVL => SELF%F_TVL%GET_VIEW(BLOCK_INDEX)
( 1258)     IF (ASSOCIATED(SELF%F_TVH))  SELF%PTVH => SELF%F_TVH%GET_VIEW(BLOCK_INDEX)
( 1259)     IF (ASSOCIATED(SELF%F_LAIL))  SELF%PLAIL => SELF%F_LAIL%GET_VIEW(BLOCK_INDEX)
( 1260)     IF (ASSOCIATED(SELF%F_LAIH))  SELF%PLAIH => SELF%F_LAIH%GET_VIEW(BLOCK_INDEX)
( 1261)     IF (ASSOCIATED(SELF%F_SOTY))  SELF%PSOTY => SELF%F_SOTY%GET_VIEW(BLOCK_INDEX)
( 1262)     IF (ASSOCIATED(SELF%F_CLK))  SELF%PCLK => SELF%F_CLK%GET_VIEW(BLOCK_INDEX)
( 1263)     IF (ASSOCIATED(SELF%F_DL))  SELF%PDL => SELF%F_DL%GET_VIEW(BLOCK_INDEX)
( 1264)     IF (ASSOCIATED(SELF%F_CI))  SELF%PCI => SELF%F_CI%GET_VIEW(BLOCK_INDEX)
( 1265)     IF (ASSOCIATED(SELF%F_UCUR))  SELF%PUCUR => SELF%F_UCUR%GET_VIEW(BLOCK_INDEX)
( 1266)     IF (ASSOCIATED(SELF%F_VCUR))  SELF%PVCUR => SELF%F_VCUR%GET_VIEW(BLOCK_INDEX)
( 1267)     IF (ASSOCIATED(SELF%F_Z0RLF))  SELF%PZ0RLF => SELF%F_Z0RLF%GET_VIEW(BLOCK_INDEX)
( 1268)     IF (ASSOCIATED(SELF%F_CO2O))  SELF%PCO2O => SELF%F_CO2O%GET_VIEW(BLOCK_INDEX)
( 1269)     IF (ASSOCIATED(SELF%F_CO2B))  SELF%PCO2B => SELF%F_CO2B%GET_VIEW(BLOCK_INDEX)
( 1270)     IF (ASSOCIATED(SELF%F_CO2A))  SELF%PCO2A => SELF%F_CO2A%GET_VIEW(BLOCK_INDEX)
( 1271)     IF (ASSOCIATED(SELF%F_CO2F))  SELF%PCO2F => SELF%F_CO2F%GET_VIEW(BLOCK_INDEX)
( 1272)     IF (ASSOCIATED(SELF%F_CGPP))  SELF%PCGPP => SELF%F_CGPP%GET_VIEW(BLOCK_INDEX)
( 1273)     IF (ASSOCIATED(SELF%F_CREC))  SELF%PCREC => SELF%F_CREC%GET_VIEW(BLOCK_INDEX)
( 1274)     IF (ASSOCIATED(SELF%F_CH4AG))  SELF%PCH4AG => SELF%F_CH4AG%GET_VIEW(BLOCK_INDEX)
( 1275)     IF (ASSOCIATED(SELF%F_CH4F))  SELF%PCH4F => SELF%F_CH4F%GET_VIEW(BLOCK_INDEX)
( 1276)     IF (ASSOCIATED(SELF%F_SDFOR))  SELF%PSDFOR => SELF%F_SDFOR%GET_VIEW(BLOCK_INDEX)
( 1277)     IF (ASSOCIATED(SELF%F_ALUVP))  SELF%PALUVP => SELF%F_ALUVP%GET_VIEW(BLOCK_INDEX)
( 1278)     IF (ASSOCIATED(SELF%F_ALUVD))  SELF%PALUVD => SELF%F_ALUVD%GET_VIEW(BLOCK_INDEX)
( 1279)     IF (ASSOCIATED(SELF%F_ALNIP))  SELF%PALNIP => SELF%F_ALNIP%GET_VIEW(BLOCK_INDEX)
( 1280)     IF (ASSOCIATED(SELF%F_ALNID))  SELF%PALNID => SELF%F_ALNID%GET_VIEW(BLOCK_INDEX)
( 1281)     IF (ASSOCIATED(SELF%F_FP1))  SELF%PFP1 => SELF%F_FP1%GET_VIEW(BLOCK_INDEX)
( 1282)     IF (ASSOCIATED(SELF%F_BCBF))  SELF%PBCBF => SELF%F_BCBF%GET_VIEW(BLOCK_INDEX)
( 1283)     IF (ASSOCIATED(SELF%F_BCFF))  SELF%PBCFF => SELF%F_BCFF%GET_VIEW(BLOCK_INDEX)
( 1284)     IF (ASSOCIATED(SELF%F_BCGF))  SELF%PBCGF => SELF%F_BCGF%GET_VIEW(BLOCK_INDEX)
( 1285)     IF (ASSOCIATED(SELF%F_OMBF))  SELF%POMBF => SELF%F_OMBF%GET_VIEW(BLOCK_INDEX)
( 1286)     IF (ASSOCIATED(SELF%F_OMFF))  SELF%POMFF => SELF%F_OMFF%GET_VIEW(BLOCK_INDEX)
( 1287)     IF (ASSOCIATED(SELF%F_OMGF))  SELF%POMGF => SELF%F_OMGF%GET_VIEW(BLOCK_INDEX)
( 1288)     IF (ASSOCIATED(SELF%F_INJF))  SELF%PINJF => SELF%F_INJF%GET_VIEW(BLOCK_INDEX)
( 1289)     IF (ASSOCIATED(SELF%F_SO2L))  SELF%PSO2L => SELF%F_SO2L%GET_VIEW(BLOCK_INDEX)
( 1290)     IF (ASSOCIATED(SELF%F_SO2H))  SELF%PSO2H => SELF%F_SO2H%GET_VIEW(BLOCK_INDEX)
( 1291)     IF (ASSOCIATED(SELF%F_SO2DD))  SELF%PSO2DD => SELF%F_SO2DD%GET_VIEW(BLOCK_INDEX)
( 1292)     IF (ASSOCIATED(SELF%F_SOGF))  SELF%PSOGF => SELF%F_SOGF%GET_VIEW(BLOCK_INDEX)
( 1293)     IF (ASSOCIATED(SELF%F_SOA))  SELF%PSOA => SELF%F_SOA%GET_VIEW(BLOCK_INDEX)
( 1294)     IF (ASSOCIATED(SELF%F_VOLC))  SELF%PVOLC => SELF%F_VOLC%GET_VIEW(BLOCK_INDEX)
( 1295)     IF (ASSOCIATED(SELF%F_VOLE))  SELF%PVOLE => SELF%F_VOLE%GET_VIEW(BLOCK_INDEX)
( 1296)     IF (ASSOCIATED(SELF%F_DMSO))  SELF%PDMSO => SELF%F_DMSO%GET_VIEW(BLOCK_INDEX)
( 1297)     IF (ASSOCIATED(SELF%F_SOACO))  SELF%PSOACO => SELF%F_SOACO%GET_VIEW(BLOCK_INDEX)
( 1298)     IF (ASSOCIATED(SELF%F_URBF))  SELF%PURBF => SELF%F_URBF%GET_VIEW(BLOCK_INDEX)
( 1299)     IF (ASSOCIATED(SELF%F_VOLCALTI))  SELF%PVOLCALTI => SELF%F_VOLCALTI%GET_VIEW(BLOCK_INDEX)
( 1300)     IF (ASSOCIATED(SELF%F_FCA1))  SELF%PFCA1 => SELF%F_FCA1%GET_VIEW(BLOCK_INDEX)
( 1301)     IF (ASSOCIATED(SELF%F_FCA2))  SELF%PFCA2 => SELF%F_FCA2%GET_VIEW(BLOCK_INDEX)
( 1302)     IF (ASSOCIATED(SELF%F_AERDEP))  SELF%PAERDEP => SELF%F_AERDEP%GET_VIEW(BLOCK_INDEX)
( 1303)     IF (ASSOCIATED(SELF%F_AERLTS))  SELF%PAERLTS => SELF%F_AERLTS%GET_VIEW(BLOCK_INDEX)
( 1304)     IF (ASSOCIATED(SELF%F_AERSCC))  SELF%PAERSCC => SELF%F_AERSCC%GET_VIEW(BLOCK_INDEX)
( 1305)     IF (ASSOCIATED(SELF%F_DSF))  SELF%PDSF => SELF%F_DSF%GET_VIEW(BLOCK_INDEX)
( 1306)     IF (ALLOCATED(SELF%F_CHEMFLX)) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 25

( 1307)       DO I=1, SIZE(SELF%F_CHEMFLX)
( 1308)         SELF%PCHEMFLX(I)%P => SELF%F_CHEMFLX(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1309)       END DO
( 1310)     END IF
( 1311)     IF (ALLOCATED(SELF%F_CHEMFLXO)) THEN
( 1312)       DO I=1, SIZE(SELF%F_CHEMFLXO)
( 1313)         SELF%PCHEMFLXO(I)%P => SELF%F_CHEMFLXO(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1314)       END DO
( 1315)     END IF
( 1316)     IF (ALLOCATED(SELF%F_CHEMDV)) THEN
( 1317)       DO I=1, SIZE(SELF%F_CHEMDV)
( 1318)         SELF%PCHEMDV(I)%P => SELF%F_CHEMDV(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1319)       END DO
( 1320)     END IF
( 1321)     IF (ASSOCIATED(SELF%F_NUDM))  SELF%PNUDM => SELF%F_NUDM%GET_VIEW(BLOCK_INDEX)
( 1322) 
( 1323)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1324)   END SUBROUTINE SURFACE_VIEW_GROUP_VARSF_UPDATE_VIEW
( 1325) 
( 1326)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_INIT(SELF, VARIABLE_GROUP)
( 1327)     ! Constructor of the array view type for a surface variable group
( 1328)     CLASS(SURFACE_VIEW_GROUP_VCLIH) :: SELF
( 1329)     TYPE(SURFACE_VARIABLE_GROUP_VCLIH), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1330)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1331) 
( 1332)     ! Create a view for the "T0" field only for diagnostic fields
( 1333)     SELF%F_TCCH => VARIABLE_GROUP%VTCCH%FT0
( 1334)     SELF%F_SCCH => VARIABLE_GROUP%VSCCH%FT0
( 1335)     SELF%F_BCCH => VARIABLE_GROUP%VBCCH%FT0
( 1336)     SELF%F_PBLH => VARIABLE_GROUP%VPBLH%FT0
( 1337)     SELF%F_SPSH => VARIABLE_GROUP%VSPSH%FT0
( 1338)     SELF%F_QSH => VARIABLE_GROUP%VQSH%FT0
( 1339)     SELF%F_PCL => VARIABLE_GROUP%VPCL%FT0
( 1340)     SELF%F_PSL => VARIABLE_GROUP%VPSL%FT0
( 1341)     SELF%F_PCN => VARIABLE_GROUP%VPCN%FT0
( 1342)     SELF%F_PSN => VARIABLE_GROUP%VPSN%FT0
( 1343)     SELF%F_EVA => VARIABLE_GROUP%VEVA%FT0
( 1344)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1345)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1346)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_INIT
( 1347) 
( 1348)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1349)     ! Extract local array views from field objects
( 1350)     CLASS(SURFACE_VIEW_GROUP_VCLIH) :: SELF
( 1351)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1352)     INTEGER(KIND=JPIM) :: I, J
( 1353) 
( 1354)     ! Set up the view pointer for the "T0" field
( 1355)     IF (ASSOCIATED(SELF%F_TCCH))  SELF%PTCCH => SELF%F_TCCH%GET_VIEW(BLOCK_INDEX)
( 1356)     IF (ASSOCIATED(SELF%F_SCCH))  SELF%PSCCH => SELF%F_SCCH%GET_VIEW(BLOCK_INDEX)
( 1357)     IF (ASSOCIATED(SELF%F_BCCH))  SELF%PBCCH => SELF%F_BCCH%GET_VIEW(BLOCK_INDEX)
( 1358)     IF (ASSOCIATED(SELF%F_PBLH))  SELF%PPBLH => SELF%F_PBLH%GET_VIEW(BLOCK_INDEX)
( 1359)     IF (ASSOCIATED(SELF%F_SPSH))  SELF%PSPSH => SELF%F_SPSH%GET_VIEW(BLOCK_INDEX)
( 1360)     IF (ASSOCIATED(SELF%F_QSH))  SELF%PQSH => SELF%F_QSH%GET_VIEW(BLOCK_INDEX)
( 1361)     IF (ASSOCIATED(SELF%F_PCL))  SELF%PPCL => SELF%F_PCL%GET_VIEW(BLOCK_INDEX)
( 1362)     IF (ASSOCIATED(SELF%F_PSL))  SELF%PPSL => SELF%F_PSL%GET_VIEW(BLOCK_INDEX)
( 1363)     IF (ASSOCIATED(SELF%F_PCN))  SELF%PPCN => SELF%F_PCN%GET_VIEW(BLOCK_INDEX)
( 1364)     IF (ASSOCIATED(SELF%F_PSN))  SELF%PPSN => SELF%F_PSN%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 26

( 1365)     IF (ASSOCIATED(SELF%F_EVA))  SELF%PEVA => SELF%F_EVA%GET_VIEW(BLOCK_INDEX)
( 1366) 
( 1367)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1368)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_UPDATE_VIEW
( 1369) 
( 1370)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_INIT(SELF, VARIABLE_GROUP)
( 1371)     ! Constructor of the array view type for a surface variable group
( 1372)     CLASS(SURFACE_VIEW_GROUP_VCLIK) :: SELF
( 1373)     TYPE(SURFACE_VARIABLE_GROUP_VCLIK), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1374)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1375) 
( 1376)     ! Create a view for the "T0" field only for diagnostic fields
( 1377)     SELF%F_UDGRO => VARIABLE_GROUP%VUDGRO%FT0
( 1378)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1379)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1380)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_INIT
( 1381) 
( 1382)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1383)     ! Extract local array views from field objects
( 1384)     CLASS(SURFACE_VIEW_GROUP_VCLIK) :: SELF
( 1385)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1386)     INTEGER(KIND=JPIM) :: I, J
( 1387) 
( 1388)     ! Set up the view pointer for the "T0" field
( 1389)     IF (ASSOCIATED(SELF%F_UDGRO))  SELF%PUDGRO => SELF%F_UDGRO%GET_VIEW(BLOCK_INDEX)
( 1390) 
( 1391)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1392)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_UPDATE_VIEW
( 1393) 
( 1394)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_INIT(SELF, VARIABLE_GROUP)
( 1395)     ! Constructor of the array view type for a surface variable group
( 1396)     CLASS(SURFACE_VIEW_GROUP_VCLIP) :: SELF
( 1397)     TYPE(SURFACE_VARIABLE_GROUP_VCLIP), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1398)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1399) 
( 1400)     ! Create a view for the "T0" field only for diagnostic fields
( 1401)     SELF%F_TPC => VARIABLE_GROUP%VTPC%FT0
( 1402)     SELF%F_WPC => VARIABLE_GROUP%VWPC%FT0
( 1403)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1404)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1405)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_INIT
( 1406) 
( 1407)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1408)     ! Extract local array views from field objects
( 1409)     CLASS(SURFACE_VIEW_GROUP_VCLIP) :: SELF
( 1410)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1411)     INTEGER(KIND=JPIM) :: I, J
( 1412) 
( 1413)     ! Set up the view pointer for the "T0" field
( 1414)     IF (ASSOCIATED(SELF%F_TPC))  SELF%PTPC => SELF%F_TPC%GET_VIEW(BLOCK_INDEX)
( 1415)     IF (ASSOCIATED(SELF%F_WPC))  SELF%PWPC => SELF%F_WPC%GET_VIEW(BLOCK_INDEX)
( 1416) 
( 1417)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1418)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_UPDATE_VIEW
( 1419) 
( 1420)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_INIT(SELF, VARIABLE_GROUP)
( 1421)     ! Constructor of the array view type for a surface variable group
( 1422)     CLASS(SURFACE_VIEW_GROUP_VCLIV) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 27

( 1423)     TYPE(SURFACE_VARIABLE_GROUP_VCLIV), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1424)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1425) 
( 1426)     ! Create a view for the "T0" field only for diagnostic fields
( 1427)     SELF%F_ARG => VARIABLE_GROUP%VARG%FT0
( 1428)     SELF%F_SAB => VARIABLE_GROUP%VSAB%FT0
( 1429)     SELF%F_D2 => VARIABLE_GROUP%VD2%FT0
( 1430)     SELF%F_IVEG => VARIABLE_GROUP%VIVEG%FT0
( 1431)     SELF%F_RSMIN => VARIABLE_GROUP%VRSMIN%FT0
( 1432)     SELF%F_LAI => VARIABLE_GROUP%VLAI%FT0
( 1433)     SELF%F_HV => VARIABLE_GROUP%VHV%FT0
( 1434)     SELF%F_Z0H => VARIABLE_GROUP%VZ0H%FT0
( 1435)     SELF%F_ALS => VARIABLE_GROUP%VALS%FT0
( 1436)     SELF%F_ALV => VARIABLE_GROUP%VALV%FT0
( 1437)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1438)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1439)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_INIT
( 1440) 
( 1441)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1442)     ! Extract local array views from field objects
( 1443)     CLASS(SURFACE_VIEW_GROUP_VCLIV) :: SELF
( 1444)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1445)     INTEGER(KIND=JPIM) :: I, J
( 1446) 
( 1447)     ! Set up the view pointer for the "T0" field
( 1448)     IF (ASSOCIATED(SELF%F_ARG))  SELF%PARG => SELF%F_ARG%GET_VIEW(BLOCK_INDEX)
( 1449)     IF (ASSOCIATED(SELF%F_SAB))  SELF%PSAB => SELF%F_SAB%GET_VIEW(BLOCK_INDEX)
( 1450)     IF (ASSOCIATED(SELF%F_D2))  SELF%PD2 => SELF%F_D2%GET_VIEW(BLOCK_INDEX)
( 1451)     IF (ASSOCIATED(SELF%F_IVEG))  SELF%PIVEG => SELF%F_IVEG%GET_VIEW(BLOCK_INDEX)
( 1452)     IF (ASSOCIATED(SELF%F_RSMIN))  SELF%PRSMIN => SELF%F_RSMIN%GET_VIEW(BLOCK_INDEX)
( 1453)     IF (ASSOCIATED(SELF%F_LAI))  SELF%PLAI => SELF%F_LAI%GET_VIEW(BLOCK_INDEX)
( 1454)     IF (ASSOCIATED(SELF%F_HV))  SELF%PHV => SELF%F_HV%GET_VIEW(BLOCK_INDEX)
( 1455)     IF (ASSOCIATED(SELF%F_Z0H))  SELF%PZ0H => SELF%F_Z0H%GET_VIEW(BLOCK_INDEX)
( 1456)     IF (ASSOCIATED(SELF%F_ALS))  SELF%PALS => SELF%F_ALS%GET_VIEW(BLOCK_INDEX)
( 1457)     IF (ASSOCIATED(SELF%F_ALV))  SELF%PALV => SELF%F_ALV%GET_VIEW(BLOCK_INDEX)
( 1458) 
( 1459)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1460)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_UPDATE_VIEW
( 1461) 
( 1462)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_INIT(SELF, VARIABLE_GROUP)
( 1463)     ! Constructor of the array view type for a surface variable group
( 1464)     CLASS(SURFACE_VIEW_GROUP_VCLIA) :: SELF
( 1465)     TYPE(SURFACE_VARIABLE_GROUP_VCLIA), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1466)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1467) 
( 1468)     ! Create a view for the "T0" field only for diagnostic fields
( 1469)     SELF%F_SEA => VARIABLE_GROUP%VSEA%FT0
( 1470)     SELF%F_LAN => VARIABLE_GROUP%VLAN%FT0
( 1471)     SELF%F_SOO => VARIABLE_GROUP%VSOO%FT0
( 1472)     SELF%F_DES => VARIABLE_GROUP%VDES%FT0
( 1473)     SELF%F_SUL => VARIABLE_GROUP%VSUL%FT0
( 1474)     SELF%F_VOL => VARIABLE_GROUP%VVOL%FT0
( 1475)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1476)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1477)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_INIT
( 1478) 
( 1479)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1480)     ! Extract local array views from field objects






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 28

( 1481)     CLASS(SURFACE_VIEW_GROUP_VCLIA) :: SELF
( 1482)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1483)     INTEGER(KIND=JPIM) :: I, J
( 1484) 
( 1485)     ! Set up the view pointer for the "T0" field
( 1486)     IF (ASSOCIATED(SELF%F_SEA))  SELF%PSEA => SELF%F_SEA%GET_VIEW(BLOCK_INDEX)
( 1487)     IF (ASSOCIATED(SELF%F_LAN))  SELF%PLAN => SELF%F_LAN%GET_VIEW(BLOCK_INDEX)
( 1488)     IF (ASSOCIATED(SELF%F_SOO))  SELF%PSOO => SELF%F_SOO%GET_VIEW(BLOCK_INDEX)
( 1489)     IF (ASSOCIATED(SELF%F_DES))  SELF%PDES => SELF%F_DES%GET_VIEW(BLOCK_INDEX)
( 1490)     IF (ASSOCIATED(SELF%F_SUL))  SELF%PSUL => SELF%F_SUL%GET_VIEW(BLOCK_INDEX)
( 1491)     IF (ASSOCIATED(SELF%F_VOL))  SELF%PVOL => SELF%F_VOL%GET_VIEW(BLOCK_INDEX)
( 1492) 
( 1493)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1494)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_UPDATE_VIEW
( 1495) 
( 1496)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_INIT(SELF, VARIABLE_GROUP)
( 1497)     ! Constructor of the array view type for a surface variable group
( 1498)     CLASS(SURFACE_VIEW_GROUP_VCLIN) :: SELF
( 1499)     TYPE(SURFACE_VARIABLE_GROUP_VCLIN), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1500)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1501) 
( 1502)     ! Create a view for the "T0" field only for diagnostic fields
( 1503)     SELF%F_TOP => VARIABLE_GROUP%VTOP%FT0
( 1504)     SELF%F_BAS => VARIABLE_GROUP%VBAS%FT0
( 1505)     SELF%F_ACPR => VARIABLE_GROUP%VACPR%FT0
( 1506)     SELF%F_ACCPR => VARIABLE_GROUP%VACCPR%FT0
( 1507)     SELF%F_ACCPR5 => VARIABLE_GROUP%VACCPR5%FT0
( 1508)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1509)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1510)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_INIT
( 1511) 
( 1512)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1513)     ! Extract local array views from field objects
( 1514)     CLASS(SURFACE_VIEW_GROUP_VCLIN) :: SELF
( 1515)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1516)     INTEGER(KIND=JPIM) :: I, J
( 1517) 
( 1518)     ! Set up the view pointer for the "T0" field
( 1519)     IF (ASSOCIATED(SELF%F_TOP))  SELF%PTOP => SELF%F_TOP%GET_VIEW(BLOCK_INDEX)
( 1520)     IF (ASSOCIATED(SELF%F_BAS))  SELF%PBAS => SELF%F_BAS%GET_VIEW(BLOCK_INDEX)
( 1521)     IF (ASSOCIATED(SELF%F_ACPR))  SELF%PACPR => SELF%F_ACPR%GET_VIEW(BLOCK_INDEX)
( 1522)     IF (ASSOCIATED(SELF%F_ACCPR))  SELF%PACCPR => SELF%F_ACCPR%GET_VIEW(BLOCK_INDEX)
( 1523)     IF (ASSOCIATED(SELF%F_ACCPR5))  SELF%PACCPR5 => SELF%F_ACCPR5%GET_VIEW(BLOCK_INDEX)
( 1524) 
( 1525)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1526)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_UPDATE_VIEW
( 1527) 
( 1528)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_INIT(SELF, VARIABLE_GROUP)
( 1529)     ! Constructor of the array view type for a surface variable group
( 1530)     CLASS(SURFACE_VIEW_GROUP_VDIAGO2) :: SELF
( 1531)     TYPE(SURFACE_VARIABLE_GROUP_VDIAGO2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1532)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1533) 
( 1534)     ! Create a view for the "T0" field only for diagnostic fields
( 1535)     SELF%F_OCDEP => VARIABLE_GROUP%VOCDEP%FT0
( 1536)     SELF%F_USTRC => VARIABLE_GROUP%VUSTRC%FT0
( 1537)     SELF%F_VSTRC => VARIABLE_GROUP%VVSTRC%FT0
( 1538)     SELF%VARIABLE_GROUP => VARIABLE_GROUP






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 29

( 1539)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1540)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_INIT
( 1541) 
( 1542)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1543)     ! Extract local array views from field objects
( 1544)     CLASS(SURFACE_VIEW_GROUP_VDIAGO2) :: SELF
( 1545)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1546)     INTEGER(KIND=JPIM) :: I, J
( 1547) 
( 1548)     ! Set up the view pointer for the "T0" field
( 1549)     IF (ASSOCIATED(SELF%F_OCDEP))  SELF%POCDEP => SELF%F_OCDEP%GET_VIEW(BLOCK_INDEX)
( 1550)     IF (ASSOCIATED(SELF%F_USTRC))  SELF%PUSTRC => SELF%F_USTRC%GET_VIEW(BLOCK_INDEX)
( 1551)     IF (ASSOCIATED(SELF%F_VSTRC))  SELF%PVSTRC => SELF%F_VSTRC%GET_VIEW(BLOCK_INDEX)
( 1552) 
( 1553)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1554)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_UPDATE_VIEW
( 1555) 
( 1556)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_INIT(SELF, VARIABLE_GROUP)
( 1557)     ! Constructor of the array view type for a surface variable group
( 1558)     CLASS(SURFACE_VIEW_GROUP_VDIAGO3) :: SELF
( 1559)     TYPE(SURFACE_VARIABLE_GROUP_VDIAGO3), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1560)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1561) 
( 1562)     ! Create a view for the "T0" field only for diagnostic fields
( 1563)     SELF%F_DIFM => VARIABLE_GROUP%VDIFM%FT0
( 1564)     SELF%F_DIFT => VARIABLE_GROUP%VDIFT%FT0
( 1565)     SELF%F_DIFS => VARIABLE_GROUP%VDIFS%FT0
( 1566)     SELF%F_ADVT => VARIABLE_GROUP%VADVT%FT0
( 1567)     SELF%F_ADVS => VARIABLE_GROUP%VADVS%FT0
( 1568)     SELF%F_TRI0 => VARIABLE_GROUP%VTRI0%FT0
( 1569)     SELF%F_TRI1 => VARIABLE_GROUP%VTRI1%FT0
( 1570)     SELF%F_SWDK => VARIABLE_GROUP%VSWDK%FT0
( 1571)     SELF%F_ZO => VARIABLE_GROUP%VZO%FT0
( 1572)     SELF%F_HO => VARIABLE_GROUP%VHO%FT0
( 1573)     SELF%F_DO => VARIABLE_GROUP%VDO%FT0
( 1574)     SELF%F_HO_INV => VARIABLE_GROUP%VHO_INV%FT0
( 1575)     SELF%F_UOC => VARIABLE_GROUP%VUOC%FT0
( 1576)     SELF%F_VOC => VARIABLE_GROUP%VVOC%FT0
( 1577)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1578)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1579)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_INIT
( 1580) 
( 1581)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1582)     ! Extract local array views from field objects
( 1583)     CLASS(SURFACE_VIEW_GROUP_VDIAGO3) :: SELF
( 1584)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1585)     INTEGER(KIND=JPIM) :: I, J
( 1586) 
( 1587)     ! Set up the view pointer for the "T0" field
( 1588)     IF (ASSOCIATED(SELF%F_DIFM))  SELF%PDIFM => SELF%F_DIFM%GET_VIEW(BLOCK_INDEX)
( 1589)     IF (ASSOCIATED(SELF%F_DIFT))  SELF%PDIFT => SELF%F_DIFT%GET_VIEW(BLOCK_INDEX)
( 1590)     IF (ASSOCIATED(SELF%F_DIFS))  SELF%PDIFS => SELF%F_DIFS%GET_VIEW(BLOCK_INDEX)
( 1591)     IF (ASSOCIATED(SELF%F_ADVT))  SELF%PADVT => SELF%F_ADVT%GET_VIEW(BLOCK_INDEX)
( 1592)     IF (ASSOCIATED(SELF%F_ADVS))  SELF%PADVS => SELF%F_ADVS%GET_VIEW(BLOCK_INDEX)
( 1593)     IF (ASSOCIATED(SELF%F_TRI0))  SELF%PTRI0 => SELF%F_TRI0%GET_VIEW(BLOCK_INDEX)
( 1594)     IF (ASSOCIATED(SELF%F_TRI1))  SELF%PTRI1 => SELF%F_TRI1%GET_VIEW(BLOCK_INDEX)
( 1595)     IF (ASSOCIATED(SELF%F_SWDK))  SELF%PSWDK => SELF%F_SWDK%GET_VIEW(BLOCK_INDEX)
( 1596)     IF (ASSOCIATED(SELF%F_ZO))  SELF%PZO => SELF%F_ZO%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 30

( 1597)     IF (ASSOCIATED(SELF%F_HO))  SELF%PHO => SELF%F_HO%GET_VIEW(BLOCK_INDEX)
( 1598)     IF (ASSOCIATED(SELF%F_DO))  SELF%PDO => SELF%F_DO%GET_VIEW(BLOCK_INDEX)
( 1599)     IF (ASSOCIATED(SELF%F_HO_INV))  SELF%PHO_INV => SELF%F_HO_INV%GET_VIEW(BLOCK_INDEX)
( 1600)     IF (ASSOCIATED(SELF%F_UOC))  SELF%PUOC => SELF%F_UOC%GET_VIEW(BLOCK_INDEX)
( 1601)     IF (ASSOCIATED(SELF%F_VOC))  SELF%PVOC => SELF%F_VOC%GET_VIEW(BLOCK_INDEX)
( 1602) 
( 1603)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1604)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_UPDATE_VIEW
( 1605) 
( 1606)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_INIT(SELF, VARIABLE_GROUP)
( 1607)     ! Constructor of the array view type for a surface variable group
( 1608)     CLASS(SURFACE_VIEW_GROUP_VDIAG) :: SELF
( 1609)     TYPE(SURFACE_VARIABLE_GROUP_VDIAG), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1610)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1611) 
( 1612)     ! Create a view for the "T0" field only for diagnostic fields
( 1613)     SELF%F_LSP => VARIABLE_GROUP%VLSP%FT0
( 1614)     SELF%F_CP => VARIABLE_GROUP%VCP%FT0
( 1615)     SELF%F_SF => VARIABLE_GROUP%VSF%FT0
( 1616)     SELF%F_FZRA => VARIABLE_GROUP%VFZRA%FT0
( 1617)     SELF%F_BLD => VARIABLE_GROUP%VBLD%FT0
( 1618)     SELF%F_SSHF => VARIABLE_GROUP%VSSHF%FT0
( 1619)     SELF%F_SLHF => VARIABLE_GROUP%VSLHF%FT0
( 1620)     SELF%F_NEE => VARIABLE_GROUP%VNEE%FT0
( 1621)     SELF%F_GPP => VARIABLE_GROUP%VGPP%FT0
( 1622)     SELF%F_REC => VARIABLE_GROUP%VREC%FT0
( 1623)     SELF%F_MSL => VARIABLE_GROUP%VMSL%FT0
( 1624)     SELF%F_SP => VARIABLE_GROUP%VSP%FT0
( 1625)     SELF%F_TCC => VARIABLE_GROUP%VTCC%FT0
( 1626)     SELF%F_10U => VARIABLE_GROUP%V10U%FT0
( 1627)     SELF%F_10V => VARIABLE_GROUP%V10V%FT0
( 1628)     SELF%F_2T => VARIABLE_GROUP%V2T%FT0
( 1629)     SELF%F_2D => VARIABLE_GROUP%V2D%FT0
( 1630)     SELF%F_2Q => VARIABLE_GROUP%V2Q%FT0
( 1631)     SELF%F_SSR => VARIABLE_GROUP%VSSR%FT0
( 1632)     SELF%F_STR => VARIABLE_GROUP%VSTR%FT0
( 1633)     SELF%F_TSR => VARIABLE_GROUP%VTSR%FT0
( 1634)     SELF%F_TTR => VARIABLE_GROUP%VTTR%FT0
( 1635)     SELF%F_EWSS => VARIABLE_GROUP%VEWSS%FT0
( 1636)     SELF%F_NSSS => VARIABLE_GROUP%VNSSS%FT0
( 1637)     SELF%F_E => VARIABLE_GROUP%VE%FT0
( 1638)     SELF%F_PEV => VARIABLE_GROUP%VPEV%FT0
( 1639)     SELF%F_CCC => VARIABLE_GROUP%VCCC%FT0
( 1640)     SELF%F_LCC => VARIABLE_GROUP%VLCC%FT0
( 1641)     SELF%F_MCC => VARIABLE_GROUP%VMCC%FT0
( 1642)     SELF%F_HCC => VARIABLE_GROUP%VHCC%FT0
( 1643)     SELF%F_LGWS => VARIABLE_GROUP%VLGWS%FT0
( 1644)     SELF%F_MGWS => VARIABLE_GROUP%VMGWS%FT0
( 1645)     SELF%F_GWD => VARIABLE_GROUP%VGWD%FT0
( 1646)     SELF%F_MX2T => VARIABLE_GROUP%VMX2T%FT0
( 1647)     SELF%F_MN2T => VARIABLE_GROUP%VMN2T%FT0
( 1648)     IF (ALLOCATED(VARIABLE_GROUP%VMX2T6)) THEN
( 1649)       ALLOCATE(SELF%PMX2T6(SIZE(VARIABLE_GROUP%VMX2T6)))
( 1650)       ALLOCATE(SELF%F_MX2T6(SIZE(VARIABLE_GROUP%VMX2T6)))
( 1651)       DO I=1, SIZE(VARIABLE_GROUP%VMX2T6)
( 1652)         SELF%F_MX2T6(I)%PTR => VARIABLE_GROUP%VMX2T6(I)%FT0
( 1653)       END DO
( 1654)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 31

( 1655)     IF (ALLOCATED(VARIABLE_GROUP%VMN2T6)) THEN
( 1656)       ALLOCATE(SELF%PMN2T6(SIZE(VARIABLE_GROUP%VMN2T6)))
( 1657)       ALLOCATE(SELF%F_MN2T6(SIZE(VARIABLE_GROUP%VMN2T6)))
( 1658)       DO I=1, SIZE(VARIABLE_GROUP%VMN2T6)
( 1659)         SELF%F_MN2T6(I)%PTR => VARIABLE_GROUP%VMN2T6(I)%FT0
( 1660)       END DO
( 1661)     END IF
( 1662)     SELF%F_RO => VARIABLE_GROUP%VRO%FT0
( 1663)     SELF%F_SRO => VARIABLE_GROUP%VSRO%FT0
( 1664)     SELF%F_SSRO => VARIABLE_GROUP%VSSRO%FT0
( 1665)     SELF%F_ALB => VARIABLE_GROUP%VALB%FT0
( 1666)     SELF%F_IEWSS => VARIABLE_GROUP%VIEWSS%FT0
( 1667)     SELF%F_INSSS => VARIABLE_GROUP%VINSSS%FT0
( 1668)     SELF%F_ISSHF => VARIABLE_GROUP%VISSHF%FT0
( 1669)     SELF%F_IE => VARIABLE_GROUP%VIE%FT0
( 1670)     SELF%F_INEE => VARIABLE_GROUP%VINEE%FT0
( 1671)     SELF%F_IGPP => VARIABLE_GROUP%VIGPP%FT0
( 1672)     SELF%F_IREC => VARIABLE_GROUP%VIREC%FT0
( 1673)     SELF%F_CSF => VARIABLE_GROUP%VCSF%FT0
( 1674)     SELF%F_LSSF => VARIABLE_GROUP%VLSSF%FT0
( 1675)     SELF%F_MXTPR => VARIABLE_GROUP%VMXTPR%FT0
( 1676)     SELF%F_MNTPR => VARIABLE_GROUP%VMNTPR%FT0
( 1677)     IF (ALLOCATED(VARIABLE_GROUP%VMXTPR6)) THEN
( 1678)       ALLOCATE(SELF%PMXTPR6(SIZE(VARIABLE_GROUP%VMXTPR6)))
( 1679)       ALLOCATE(SELF%F_MXTPR6(SIZE(VARIABLE_GROUP%VMXTPR6)))
( 1680)       DO I=1, SIZE(VARIABLE_GROUP%VMXTPR6)
( 1681)         SELF%F_MXTPR6(I)%PTR => VARIABLE_GROUP%VMXTPR6(I)%FT0
( 1682)       END DO
( 1683)     END IF
( 1684)     IF (ALLOCATED(VARIABLE_GROUP%VMNTPR6)) THEN
( 1685)       ALLOCATE(SELF%PMNTPR6(SIZE(VARIABLE_GROUP%VMNTPR6)))
( 1686)       ALLOCATE(SELF%F_MNTPR6(SIZE(VARIABLE_GROUP%VMNTPR6)))
( 1687)       DO I=1, SIZE(VARIABLE_GROUP%VMNTPR6)
( 1688)         SELF%F_MNTPR6(I)%PTR => VARIABLE_GROUP%VMNTPR6(I)%FT0
( 1689)       END DO
( 1690)     END IF
( 1691)     SELF%F_TPR => VARIABLE_GROUP%VTPR%FT0
( 1692)     SELF%F_LSRR => VARIABLE_GROUP%VLSRR%FT0
( 1693)     SELF%F_CRR => VARIABLE_GROUP%VCRR%FT0
( 1694)     SELF%F_LSSFR => VARIABLE_GROUP%VLSSFR%FT0
( 1695)     SELF%F_CSFR => VARIABLE_GROUP%VCSFR%FT0
( 1696)     SELF%F_PTYPE => VARIABLE_GROUP%VPTYPE%FT0
( 1697)     SELF%F_ILSPF => VARIABLE_GROUP%VILSPF%FT0
( 1698)     SELF%F_Z0F => VARIABLE_GROUP%VZ0F%FT0
( 1699)     SELF%F_LZ0H => VARIABLE_GROUP%VLZ0H%FT0
( 1700)     SELF%F_VIWVE => VARIABLE_GROUP%VVIWVE%FT0
( 1701)     SELF%F_VIWVN => VARIABLE_GROUP%VVIWVN%FT0
( 1702)     SELF%F_TCW => VARIABLE_GROUP%VTCW%FT0
( 1703)     SELF%F_TCWV => VARIABLE_GROUP%VTCWV%FT0
( 1704)     SELF%F_TCLW => VARIABLE_GROUP%VTCLW%FT0
( 1705)     SELF%F_TCIW => VARIABLE_GROUP%VTCIW%FT0
( 1706)     SELF%F_TCRW => VARIABLE_GROUP%VTCRW%FT0
( 1707)     SELF%F_TCSW => VARIABLE_GROUP%VTCSW%FT0
( 1708)     SELF%F_TCSLW => VARIABLE_GROUP%VTCSLW%FT0
( 1709)     SELF%F_SSRD => VARIABLE_GROUP%VSSRD%FT0
( 1710)     SELF%F_STRD => VARIABLE_GROUP%VSTRD%FT0
( 1711)     SELF%F_SSRDC => VARIABLE_GROUP%VSSRDC%FT0
( 1712)     SELF%F_STRDC => VARIABLE_GROUP%VSTRDC%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 32

( 1713)     SELF%F_BLH => VARIABLE_GROUP%VBLH%FT0
( 1714)     SELF%F_SUND => VARIABLE_GROUP%VSUND%FT0
( 1715)     SELF%F_SPAR => VARIABLE_GROUP%VSPAR%FT0
( 1716)     SELF%F_SUVB => VARIABLE_GROUP%VSUVB%FT0
( 1717)     SELF%F_SFDIR => VARIABLE_GROUP%VSFDIR%FT0
( 1718)     SELF%F_SCDIR => VARIABLE_GROUP%VSCDIR%FT0
( 1719)     SELF%F_SDSRP => VARIABLE_GROUP%VSDSRP%FT0
( 1720)     SELF%F_CAPE => VARIABLE_GROUP%VCAPE%FT0
( 1721)     SELF%F_CAPES => VARIABLE_GROUP%VCAPES%FT0
( 1722)     IF (ALLOCATED(VARIABLE_GROUP%VMXCAP6)) THEN
( 1723)       ALLOCATE(SELF%PMXCAP6(SIZE(VARIABLE_GROUP%VMXCAP6)))
( 1724)       ALLOCATE(SELF%F_MXCAP6(SIZE(VARIABLE_GROUP%VMXCAP6)))
( 1725)       DO I=1, SIZE(VARIABLE_GROUP%VMXCAP6)
( 1726)         SELF%F_MXCAP6(I)%PTR => VARIABLE_GROUP%VMXCAP6(I)%FT0
( 1727)       END DO
( 1728)     END IF
( 1729)     IF (ALLOCATED(VARIABLE_GROUP%VMXCAPS6)) THEN
( 1730)       ALLOCATE(SELF%PMXCAPS6(SIZE(VARIABLE_GROUP%VMXCAPS6)))
( 1731)       ALLOCATE(SELF%F_MXCAPS6(SIZE(VARIABLE_GROUP%VMXCAPS6)))
( 1732)       DO I=1, SIZE(VARIABLE_GROUP%VMXCAPS6)
( 1733)         SELF%F_MXCAPS6(I)%PTR => VARIABLE_GROUP%VMXCAPS6(I)%FT0
( 1734)       END DO
( 1735)     END IF
( 1736)     SELF%F_TSRC => VARIABLE_GROUP%VTSRC%FT0
( 1737)     SELF%F_TTRC => VARIABLE_GROUP%VTTRC%FT0
( 1738)     SELF%F_SSRC => VARIABLE_GROUP%VSSRC%FT0
( 1739)     SELF%F_STRC => VARIABLE_GROUP%VSTRC%FT0
( 1740)     SELF%F_ES => VARIABLE_GROUP%VES%FT0
( 1741)     SELF%F_SMLT => VARIABLE_GROUP%VSMLT%FT0
( 1742)     SELF%F_10FG => VARIABLE_GROUP%V10FG%FT0
( 1743)     IF (ALLOCATED(VARIABLE_GROUP%V10FG6)) THEN
( 1744)       ALLOCATE(SELF%P10FG6(SIZE(VARIABLE_GROUP%V10FG6)))
( 1745)       ALLOCATE(SELF%F_10FG6(SIZE(VARIABLE_GROUP%V10FG6)))
( 1746)       DO I=1, SIZE(VARIABLE_GROUP%V10FG6)
( 1747)         SELF%F_10FG6(I)%PTR => VARIABLE_GROUP%V10FG6(I)%FT0
( 1748)       END DO
( 1749)     END IF
( 1750)     SELF%F_10FGCV => VARIABLE_GROUP%V10FGCV%FT0
( 1751)     SELF%F_I10FG => VARIABLE_GROUP%VI10FG%FT0
( 1752)     SELF%F_LSPF => VARIABLE_GROUP%VLSPF%FT0
( 1753)     SELF%F_TCO3 => VARIABLE_GROUP%VTCO3%FT0
( 1754)     SELF%F_VIMD => VARIABLE_GROUP%VVIMD%FT0
( 1755)     SELF%F_SPARC => VARIABLE_GROUP%VSPARC%FT0
( 1756)     SELF%F_STINC => VARIABLE_GROUP%VSTINC%FT0
( 1757)     SELF%F_CBASE => VARIABLE_GROUP%VCBASE%FT0
( 1758)     SELF%F_0DEGL => VARIABLE_GROUP%V0DEGL%FT0
( 1759)     SELF%F_VISIH => VARIABLE_GROUP%VVISIH%FT0
( 1760)     SELF%F_CIN => VARIABLE_GROUP%VCIN%FT0
( 1761)     SELF%F_KINDEX => VARIABLE_GROUP%VKINDEX%FT0
( 1762)     SELF%F_TTINDEX => VARIABLE_GROUP%VTTINDEX%FT0
( 1763)     SELF%F_CBASEA => VARIABLE_GROUP%VCBASEA%FT0
( 1764)     SELF%F_CTOPC => VARIABLE_GROUP%VCTOPC%FT0
( 1765)     SELF%F_ZTWETB0 => VARIABLE_GROUP%VZTWETB0%FT0
( 1766)     SELF%F_ZTWETB1 => VARIABLE_GROUP%VZTWETB1%FT0
( 1767)     IF (ALLOCATED(VARIABLE_GROUP%VTCGHG)) THEN
( 1768)       ALLOCATE(SELF%PTCGHG(SIZE(VARIABLE_GROUP%VTCGHG)))
( 1769)       ALLOCATE(SELF%F_TCGHG(SIZE(VARIABLE_GROUP%VTCGHG)))
( 1770)       DO I=1, SIZE(VARIABLE_GROUP%VTCGHG)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 33

( 1771)         SELF%F_TCGHG(I)%PTR => VARIABLE_GROUP%VTCGHG(I)%FT0
( 1772)       END DO
( 1773)     END IF
( 1774)     IF (ALLOCATED(VARIABLE_GROUP%VTCCHEM)) THEN
( 1775)       ALLOCATE(SELF%PTCCHEM(SIZE(VARIABLE_GROUP%VTCCHEM)))
( 1776)       ALLOCATE(SELF%F_TCCHEM(SIZE(VARIABLE_GROUP%VTCCHEM)))
( 1777)       DO I=1, SIZE(VARIABLE_GROUP%VTCCHEM)
( 1778)         SELF%F_TCCHEM(I)%PTR => VARIABLE_GROUP%VTCCHEM(I)%FT0
( 1779)       END DO
( 1780)     END IF
( 1781)     IF (ALLOCATED(VARIABLE_GROUP%VAERODIAG)) THEN
( 1782)       MYSHAPE = SHAPE(VARIABLE_GROUP%VAERODIAG)
( 1783)       ALLOCATE(SELF%PAERODIAG(MYSHAPE(1), MYSHAPE(2)))
( 1784)       ALLOCATE(SELF%F_AERODIAG(MYSHAPE(1), MYSHAPE(2)))
( 1785)       DO J=1, MYSHAPE(2)
( 1786)         DO I=1, MYSHAPE(1)
( 1787)           SELF%F_AERODIAG(I,J)%PTR => VARIABLE_GROUP%VAERODIAG(I,J)%FT0
( 1788)         END DO
( 1789)       END DO
( 1790)     END IF
( 1791)     IF (ALLOCATED(VARIABLE_GROUP%VAERO_WVL_DIAG)) THEN
( 1792)       MYSHAPE = SHAPE(VARIABLE_GROUP%VAERO_WVL_DIAG)
( 1793)       ALLOCATE(SELF%PAERO_WVL_DIAG(MYSHAPE(1), MYSHAPE(2)))
( 1794)       ALLOCATE(SELF%F_AERO_WVL_DIAG(MYSHAPE(1), MYSHAPE(2)))
( 1795)       DO J=1, MYSHAPE(2)
( 1796)         DO I=1, MYSHAPE(1)
( 1797)           SELF%F_AERO_WVL_DIAG(I,J)%PTR => VARIABLE_GROUP%VAERO_WVL_DIAG(I,J)%FT0
( 1798)         END DO
( 1799)       END DO
( 1800)     END IF
( 1801)     SELF%F_100U => VARIABLE_GROUP%V100U%FT0
( 1802)     SELF%F_100V => VARIABLE_GROUP%V100V%FT0
( 1803)     SELF%F_200U => VARIABLE_GROUP%V200U%FT0
( 1804)     SELF%F_200V => VARIABLE_GROUP%V200V%FT0
( 1805)     SELF%F_ZUST => VARIABLE_GROUP%VZUST%FT0
( 1806)     SELF%F_10NU => VARIABLE_GROUP%V10NU%FT0
( 1807)     SELF%F_10NV => VARIABLE_GROUP%V10NV%FT0
( 1808)     SELF%F_DNDZN => VARIABLE_GROUP%VDNDZN%FT0
( 1809)     SELF%F_DNDZA => VARIABLE_GROUP%VDNDZA%FT0
( 1810)     SELF%F_DCTB => VARIABLE_GROUP%VDCTB%FT0
( 1811)     SELF%F_TPLB => VARIABLE_GROUP%VTPLB%FT0
( 1812)     SELF%F_TPLT => VARIABLE_GROUP%VTPLT%FT0
( 1813)     SELF%F_ODSS => VARIABLE_GROUP%VODSS%FT0
( 1814)     SELF%F_ODDU => VARIABLE_GROUP%VODDU%FT0
( 1815)     SELF%F_ODOM => VARIABLE_GROUP%VODOM%FT0
( 1816)     SELF%F_ODBC => VARIABLE_GROUP%VODBC%FT0
( 1817)     SELF%F_ODSU => VARIABLE_GROUP%VODSU%FT0
( 1818)     SELF%F_ODNI => VARIABLE_GROUP%VODNI%FT0
( 1819)     SELF%F_ODAM => VARIABLE_GROUP%VODAM%FT0
( 1820)     SELF%F_ODSOA => VARIABLE_GROUP%VODSOA%FT0
( 1821)     SELF%F_ODVFA => VARIABLE_GROUP%VODVFA%FT0
( 1822)     SELF%F_ODVSU => VARIABLE_GROUP%VODVSU%FT0
( 1823)     SELF%F_ODTOACC => VARIABLE_GROUP%VODTOACC%FT0
( 1824)     SELF%F_AEPM1 => VARIABLE_GROUP%VAEPM1%FT0
( 1825)     SELF%F_AEPM25 => VARIABLE_GROUP%VAEPM25%FT0
( 1826)     SELF%F_AEPM10 => VARIABLE_GROUP%VAEPM10%FT0
( 1827)     SELF%F_UVBED => VARIABLE_GROUP%VUVBED%FT0
( 1828)     SELF%F_UVBEDCS => VARIABLE_GROUP%VUVBEDCS%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 34

( 1829)     SELF%F_LITOTI => VARIABLE_GROUP%VLITOTI%FT0
( 1830)     SELF%F_LICGI => VARIABLE_GROUP%VLICGI%FT0
( 1831)     IF (ALLOCATED(VARIABLE_GROUP%VLITOTA6)) THEN
( 1832)       ALLOCATE(SELF%PLITOTA6(SIZE(VARIABLE_GROUP%VLITOTA6)))
( 1833)       ALLOCATE(SELF%F_LITOTA6(SIZE(VARIABLE_GROUP%VLITOTA6)))
( 1834)       DO I=1, SIZE(VARIABLE_GROUP%VLITOTA6)
( 1835)         SELF%F_LITOTA6(I)%PTR => VARIABLE_GROUP%VLITOTA6(I)%FT0
( 1836)       END DO
( 1837)     END IF
( 1838)     IF (ALLOCATED(VARIABLE_GROUP%VLICGA6)) THEN
( 1839)       ALLOCATE(SELF%PLICGA6(SIZE(VARIABLE_GROUP%VLICGA6)))
( 1840)       ALLOCATE(SELF%F_LICGA6(SIZE(VARIABLE_GROUP%VLICGA6)))
( 1841)       DO I=1, SIZE(VARIABLE_GROUP%VLICGA6)
( 1842)         SELF%F_LICGA6(I)%PTR => VARIABLE_GROUP%VLICGA6(I)%FT0
( 1843)       END DO
( 1844)     END IF
( 1845)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1846)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1847)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_INIT
( 1848) 
( 1849)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1850)     ! Extract local array views from field objects
( 1851)     CLASS(SURFACE_VIEW_GROUP_VDIAG) :: SELF
( 1852)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1853)     INTEGER(KIND=JPIM) :: I, J
( 1854) 
( 1855)     ! Set up the view pointer for the "T0" field
( 1856)     IF (ASSOCIATED(SELF%F_LSP))  SELF%PLSP => SELF%F_LSP%GET_VIEW(BLOCK_INDEX)
( 1857)     IF (ASSOCIATED(SELF%F_CP))  SELF%PCP => SELF%F_CP%GET_VIEW(BLOCK_INDEX)
( 1858)     IF (ASSOCIATED(SELF%F_SF))  SELF%PSF => SELF%F_SF%GET_VIEW(BLOCK_INDEX)
( 1859)     IF (ASSOCIATED(SELF%F_FZRA))  SELF%PFZRA => SELF%F_FZRA%GET_VIEW(BLOCK_INDEX)
( 1860)     IF (ASSOCIATED(SELF%F_BLD))  SELF%PBLD => SELF%F_BLD%GET_VIEW(BLOCK_INDEX)
( 1861)     IF (ASSOCIATED(SELF%F_SSHF))  SELF%PSSHF => SELF%F_SSHF%GET_VIEW(BLOCK_INDEX)
( 1862)     IF (ASSOCIATED(SELF%F_SLHF))  SELF%PSLHF => SELF%F_SLHF%GET_VIEW(BLOCK_INDEX)
( 1863)     IF (ASSOCIATED(SELF%F_NEE))  SELF%PNEE => SELF%F_NEE%GET_VIEW(BLOCK_INDEX)
( 1864)     IF (ASSOCIATED(SELF%F_GPP))  SELF%PGPP => SELF%F_GPP%GET_VIEW(BLOCK_INDEX)
( 1865)     IF (ASSOCIATED(SELF%F_REC))  SELF%PREC => SELF%F_REC%GET_VIEW(BLOCK_INDEX)
( 1866)     IF (ASSOCIATED(SELF%F_MSL))  SELF%PMSL => SELF%F_MSL%GET_VIEW(BLOCK_INDEX)
( 1867)     IF (ASSOCIATED(SELF%F_SP))  SELF%PSP => SELF%F_SP%GET_VIEW(BLOCK_INDEX)
( 1868)     IF (ASSOCIATED(SELF%F_TCC))  SELF%PTCC => SELF%F_TCC%GET_VIEW(BLOCK_INDEX)
( 1869)     IF (ASSOCIATED(SELF%F_10U))  SELF%P10U => SELF%F_10U%GET_VIEW(BLOCK_INDEX)
( 1870)     IF (ASSOCIATED(SELF%F_10V))  SELF%P10V => SELF%F_10V%GET_VIEW(BLOCK_INDEX)
( 1871)     IF (ASSOCIATED(SELF%F_2T))  SELF%P2T => SELF%F_2T%GET_VIEW(BLOCK_INDEX)
( 1872)     IF (ASSOCIATED(SELF%F_2D))  SELF%P2D => SELF%F_2D%GET_VIEW(BLOCK_INDEX)
( 1873)     IF (ASSOCIATED(SELF%F_2Q))  SELF%P2Q => SELF%F_2Q%GET_VIEW(BLOCK_INDEX)
( 1874)     IF (ASSOCIATED(SELF%F_SSR))  SELF%PSSR => SELF%F_SSR%GET_VIEW(BLOCK_INDEX)
( 1875)     IF (ASSOCIATED(SELF%F_STR))  SELF%PSTR => SELF%F_STR%GET_VIEW(BLOCK_INDEX)
( 1876)     IF (ASSOCIATED(SELF%F_TSR))  SELF%PTSR => SELF%F_TSR%GET_VIEW(BLOCK_INDEX)
( 1877)     IF (ASSOCIATED(SELF%F_TTR))  SELF%PTTR => SELF%F_TTR%GET_VIEW(BLOCK_INDEX)
( 1878)     IF (ASSOCIATED(SELF%F_EWSS))  SELF%PEWSS => SELF%F_EWSS%GET_VIEW(BLOCK_INDEX)
( 1879)     IF (ASSOCIATED(SELF%F_NSSS))  SELF%PNSSS => SELF%F_NSSS%GET_VIEW(BLOCK_INDEX)
( 1880)     IF (ASSOCIATED(SELF%F_E))  SELF%PE => SELF%F_E%GET_VIEW(BLOCK_INDEX)
( 1881)     IF (ASSOCIATED(SELF%F_PEV))  SELF%PPEV => SELF%F_PEV%GET_VIEW(BLOCK_INDEX)
( 1882)     IF (ASSOCIATED(SELF%F_CCC))  SELF%PCCC => SELF%F_CCC%GET_VIEW(BLOCK_INDEX)
( 1883)     IF (ASSOCIATED(SELF%F_LCC))  SELF%PLCC => SELF%F_LCC%GET_VIEW(BLOCK_INDEX)
( 1884)     IF (ASSOCIATED(SELF%F_MCC))  SELF%PMCC => SELF%F_MCC%GET_VIEW(BLOCK_INDEX)
( 1885)     IF (ASSOCIATED(SELF%F_HCC))  SELF%PHCC => SELF%F_HCC%GET_VIEW(BLOCK_INDEX)
( 1886)     IF (ASSOCIATED(SELF%F_LGWS))  SELF%PLGWS => SELF%F_LGWS%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 35

( 1887)     IF (ASSOCIATED(SELF%F_MGWS))  SELF%PMGWS => SELF%F_MGWS%GET_VIEW(BLOCK_INDEX)
( 1888)     IF (ASSOCIATED(SELF%F_GWD))  SELF%PGWD => SELF%F_GWD%GET_VIEW(BLOCK_INDEX)
( 1889)     IF (ASSOCIATED(SELF%F_MX2T))  SELF%PMX2T => SELF%F_MX2T%GET_VIEW(BLOCK_INDEX)
( 1890)     IF (ASSOCIATED(SELF%F_MN2T))  SELF%PMN2T => SELF%F_MN2T%GET_VIEW(BLOCK_INDEX)
( 1891)     IF (ALLOCATED(SELF%F_MX2T6)) THEN
( 1892)       DO I=1, SIZE(SELF%F_MX2T6)
( 1893)         SELF%PMX2T6(I)%P => SELF%F_MX2T6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1894)       END DO
( 1895)     END IF
( 1896)     IF (ALLOCATED(SELF%F_MN2T6)) THEN
( 1897)       DO I=1, SIZE(SELF%F_MN2T6)
( 1898)         SELF%PMN2T6(I)%P => SELF%F_MN2T6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1899)       END DO
( 1900)     END IF
( 1901)     IF (ASSOCIATED(SELF%F_RO))  SELF%PRO => SELF%F_RO%GET_VIEW(BLOCK_INDEX)
( 1902)     IF (ASSOCIATED(SELF%F_SRO))  SELF%PSRO => SELF%F_SRO%GET_VIEW(BLOCK_INDEX)
( 1903)     IF (ASSOCIATED(SELF%F_SSRO))  SELF%PSSRO => SELF%F_SSRO%GET_VIEW(BLOCK_INDEX)
( 1904)     IF (ASSOCIATED(SELF%F_ALB))  SELF%PALB => SELF%F_ALB%GET_VIEW(BLOCK_INDEX)
( 1905)     IF (ASSOCIATED(SELF%F_IEWSS))  SELF%PIEWSS => SELF%F_IEWSS%GET_VIEW(BLOCK_INDEX)
( 1906)     IF (ASSOCIATED(SELF%F_INSSS))  SELF%PINSSS => SELF%F_INSSS%GET_VIEW(BLOCK_INDEX)
( 1907)     IF (ASSOCIATED(SELF%F_ISSHF))  SELF%PISSHF => SELF%F_ISSHF%GET_VIEW(BLOCK_INDEX)
( 1908)     IF (ASSOCIATED(SELF%F_IE))  SELF%PIE => SELF%F_IE%GET_VIEW(BLOCK_INDEX)
( 1909)     IF (ASSOCIATED(SELF%F_INEE))  SELF%PINEE => SELF%F_INEE%GET_VIEW(BLOCK_INDEX)
( 1910)     IF (ASSOCIATED(SELF%F_IGPP))  SELF%PIGPP => SELF%F_IGPP%GET_VIEW(BLOCK_INDEX)
( 1911)     IF (ASSOCIATED(SELF%F_IREC))  SELF%PIREC => SELF%F_IREC%GET_VIEW(BLOCK_INDEX)
( 1912)     IF (ASSOCIATED(SELF%F_CSF))  SELF%PCSF => SELF%F_CSF%GET_VIEW(BLOCK_INDEX)
( 1913)     IF (ASSOCIATED(SELF%F_LSSF))  SELF%PLSSF => SELF%F_LSSF%GET_VIEW(BLOCK_INDEX)
( 1914)     IF (ASSOCIATED(SELF%F_MXTPR))  SELF%PMXTPR => SELF%F_MXTPR%GET_VIEW(BLOCK_INDEX)
( 1915)     IF (ASSOCIATED(SELF%F_MNTPR))  SELF%PMNTPR => SELF%F_MNTPR%GET_VIEW(BLOCK_INDEX)
( 1916)     IF (ALLOCATED(SELF%F_MXTPR6)) THEN
( 1917)       DO I=1, SIZE(SELF%F_MXTPR6)
( 1918)         SELF%PMXTPR6(I)%P => SELF%F_MXTPR6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1919)       END DO
( 1920)     END IF
( 1921)     IF (ALLOCATED(SELF%F_MNTPR6)) THEN
( 1922)       DO I=1, SIZE(SELF%F_MNTPR6)
( 1923)         SELF%PMNTPR6(I)%P => SELF%F_MNTPR6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1924)       END DO
( 1925)     END IF
( 1926)     IF (ASSOCIATED(SELF%F_TPR))  SELF%PTPR => SELF%F_TPR%GET_VIEW(BLOCK_INDEX)
( 1927)     IF (ASSOCIATED(SELF%F_LSRR))  SELF%PLSRR => SELF%F_LSRR%GET_VIEW(BLOCK_INDEX)
( 1928)     IF (ASSOCIATED(SELF%F_CRR))  SELF%PCRR => SELF%F_CRR%GET_VIEW(BLOCK_INDEX)
( 1929)     IF (ASSOCIATED(SELF%F_LSSFR))  SELF%PLSSFR => SELF%F_LSSFR%GET_VIEW(BLOCK_INDEX)
( 1930)     IF (ASSOCIATED(SELF%F_CSFR))  SELF%PCSFR => SELF%F_CSFR%GET_VIEW(BLOCK_INDEX)
( 1931)     IF (ASSOCIATED(SELF%F_PTYPE))  SELF%PPTYPE => SELF%F_PTYPE%GET_VIEW(BLOCK_INDEX)
( 1932)     IF (ASSOCIATED(SELF%F_ILSPF))  SELF%PILSPF => SELF%F_ILSPF%GET_VIEW(BLOCK_INDEX)
( 1933)     IF (ASSOCIATED(SELF%F_Z0F))  SELF%PZ0F => SELF%F_Z0F%GET_VIEW(BLOCK_INDEX)
( 1934)     IF (ASSOCIATED(SELF%F_LZ0H))  SELF%PLZ0H => SELF%F_LZ0H%GET_VIEW(BLOCK_INDEX)
( 1935)     IF (ASSOCIATED(SELF%F_VIWVE))  SELF%PVIWVE => SELF%F_VIWVE%GET_VIEW(BLOCK_INDEX)
( 1936)     IF (ASSOCIATED(SELF%F_VIWVN))  SELF%PVIWVN => SELF%F_VIWVN%GET_VIEW(BLOCK_INDEX)
( 1937)     IF (ASSOCIATED(SELF%F_TCW))  SELF%PTCW => SELF%F_TCW%GET_VIEW(BLOCK_INDEX)
( 1938)     IF (ASSOCIATED(SELF%F_TCWV))  SELF%PTCWV => SELF%F_TCWV%GET_VIEW(BLOCK_INDEX)
( 1939)     IF (ASSOCIATED(SELF%F_TCLW))  SELF%PTCLW => SELF%F_TCLW%GET_VIEW(BLOCK_INDEX)
( 1940)     IF (ASSOCIATED(SELF%F_TCIW))  SELF%PTCIW => SELF%F_TCIW%GET_VIEW(BLOCK_INDEX)
( 1941)     IF (ASSOCIATED(SELF%F_TCRW))  SELF%PTCRW => SELF%F_TCRW%GET_VIEW(BLOCK_INDEX)
( 1942)     IF (ASSOCIATED(SELF%F_TCSW))  SELF%PTCSW => SELF%F_TCSW%GET_VIEW(BLOCK_INDEX)
( 1943)     IF (ASSOCIATED(SELF%F_TCSLW))  SELF%PTCSLW => SELF%F_TCSLW%GET_VIEW(BLOCK_INDEX)
( 1944)     IF (ASSOCIATED(SELF%F_SSRD))  SELF%PSSRD => SELF%F_SSRD%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 36

( 1945)     IF (ASSOCIATED(SELF%F_STRD))  SELF%PSTRD => SELF%F_STRD%GET_VIEW(BLOCK_INDEX)
( 1946)     IF (ASSOCIATED(SELF%F_SSRDC))  SELF%PSSRDC => SELF%F_SSRDC%GET_VIEW(BLOCK_INDEX)
( 1947)     IF (ASSOCIATED(SELF%F_STRDC))  SELF%PSTRDC => SELF%F_STRDC%GET_VIEW(BLOCK_INDEX)
( 1948)     IF (ASSOCIATED(SELF%F_BLH))  SELF%PBLH => SELF%F_BLH%GET_VIEW(BLOCK_INDEX)
( 1949)     IF (ASSOCIATED(SELF%F_SUND))  SELF%PSUND => SELF%F_SUND%GET_VIEW(BLOCK_INDEX)
( 1950)     IF (ASSOCIATED(SELF%F_SPAR))  SELF%PSPAR => SELF%F_SPAR%GET_VIEW(BLOCK_INDEX)
( 1951)     IF (ASSOCIATED(SELF%F_SUVB))  SELF%PSUVB => SELF%F_SUVB%GET_VIEW(BLOCK_INDEX)
( 1952)     IF (ASSOCIATED(SELF%F_SFDIR))  SELF%PSFDIR => SELF%F_SFDIR%GET_VIEW(BLOCK_INDEX)
( 1953)     IF (ASSOCIATED(SELF%F_SCDIR))  SELF%PSCDIR => SELF%F_SCDIR%GET_VIEW(BLOCK_INDEX)
( 1954)     IF (ASSOCIATED(SELF%F_SDSRP))  SELF%PSDSRP => SELF%F_SDSRP%GET_VIEW(BLOCK_INDEX)
( 1955)     IF (ASSOCIATED(SELF%F_CAPE))  SELF%PCAPE => SELF%F_CAPE%GET_VIEW(BLOCK_INDEX)
( 1956)     IF (ASSOCIATED(SELF%F_CAPES))  SELF%PCAPES => SELF%F_CAPES%GET_VIEW(BLOCK_INDEX)
( 1957)     IF (ALLOCATED(SELF%F_MXCAP6)) THEN
( 1958)       DO I=1, SIZE(SELF%F_MXCAP6)
( 1959)         SELF%PMXCAP6(I)%P => SELF%F_MXCAP6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1960)       END DO
( 1961)     END IF
( 1962)     IF (ALLOCATED(SELF%F_MXCAPS6)) THEN
( 1963)       DO I=1, SIZE(SELF%F_MXCAPS6)
( 1964)         SELF%PMXCAPS6(I)%P => SELF%F_MXCAPS6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1965)       END DO
( 1966)     END IF
( 1967)     IF (ASSOCIATED(SELF%F_TSRC))  SELF%PTSRC => SELF%F_TSRC%GET_VIEW(BLOCK_INDEX)
( 1968)     IF (ASSOCIATED(SELF%F_TTRC))  SELF%PTTRC => SELF%F_TTRC%GET_VIEW(BLOCK_INDEX)
( 1969)     IF (ASSOCIATED(SELF%F_SSRC))  SELF%PSSRC => SELF%F_SSRC%GET_VIEW(BLOCK_INDEX)
( 1970)     IF (ASSOCIATED(SELF%F_STRC))  SELF%PSTRC => SELF%F_STRC%GET_VIEW(BLOCK_INDEX)
( 1971)     IF (ASSOCIATED(SELF%F_ES))  SELF%PES => SELF%F_ES%GET_VIEW(BLOCK_INDEX)
( 1972)     IF (ASSOCIATED(SELF%F_SMLT))  SELF%PSMLT => SELF%F_SMLT%GET_VIEW(BLOCK_INDEX)
( 1973)     IF (ASSOCIATED(SELF%F_10FG))  SELF%P10FG => SELF%F_10FG%GET_VIEW(BLOCK_INDEX)
( 1974)     IF (ALLOCATED(SELF%F_10FG6)) THEN
( 1975)       DO I=1, SIZE(SELF%F_10FG6)
( 1976)         SELF%P10FG6(I)%P => SELF%F_10FG6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1977)       END DO
( 1978)     END IF
( 1979)     IF (ASSOCIATED(SELF%F_10FGCV))  SELF%P10FGCV => SELF%F_10FGCV%GET_VIEW(BLOCK_INDEX)
( 1980)     IF (ASSOCIATED(SELF%F_I10FG))  SELF%PI10FG => SELF%F_I10FG%GET_VIEW(BLOCK_INDEX)
( 1981)     IF (ASSOCIATED(SELF%F_LSPF))  SELF%PLSPF => SELF%F_LSPF%GET_VIEW(BLOCK_INDEX)
( 1982)     IF (ASSOCIATED(SELF%F_TCO3))  SELF%PTCO3 => SELF%F_TCO3%GET_VIEW(BLOCK_INDEX)
( 1983)     IF (ASSOCIATED(SELF%F_VIMD))  SELF%PVIMD => SELF%F_VIMD%GET_VIEW(BLOCK_INDEX)
( 1984)     IF (ASSOCIATED(SELF%F_SPARC))  SELF%PSPARC => SELF%F_SPARC%GET_VIEW(BLOCK_INDEX)
( 1985)     IF (ASSOCIATED(SELF%F_STINC))  SELF%PSTINC => SELF%F_STINC%GET_VIEW(BLOCK_INDEX)
( 1986)     IF (ASSOCIATED(SELF%F_CBASE))  SELF%PCBASE => SELF%F_CBASE%GET_VIEW(BLOCK_INDEX)
( 1987)     IF (ASSOCIATED(SELF%F_0DEGL))  SELF%P0DEGL => SELF%F_0DEGL%GET_VIEW(BLOCK_INDEX)
( 1988)     IF (ASSOCIATED(SELF%F_VISIH))  SELF%PVISIH => SELF%F_VISIH%GET_VIEW(BLOCK_INDEX)
( 1989)     IF (ASSOCIATED(SELF%F_CIN))  SELF%PCIN => SELF%F_CIN%GET_VIEW(BLOCK_INDEX)
( 1990)     IF (ASSOCIATED(SELF%F_KINDEX))  SELF%PKINDEX => SELF%F_KINDEX%GET_VIEW(BLOCK_INDEX)
( 1991)     IF (ASSOCIATED(SELF%F_TTINDEX))  SELF%PTTINDEX => SELF%F_TTINDEX%GET_VIEW(BLOCK_INDEX)
( 1992)     IF (ASSOCIATED(SELF%F_CBASEA))  SELF%PCBASEA => SELF%F_CBASEA%GET_VIEW(BLOCK_INDEX)
( 1993)     IF (ASSOCIATED(SELF%F_CTOPC))  SELF%PCTOPC => SELF%F_CTOPC%GET_VIEW(BLOCK_INDEX)
( 1994)     IF (ASSOCIATED(SELF%F_ZTWETB0))  SELF%PZTWETB0 => SELF%F_ZTWETB0%GET_VIEW(BLOCK_INDEX)
( 1995)     IF (ASSOCIATED(SELF%F_ZTWETB1))  SELF%PZTWETB1 => SELF%F_ZTWETB1%GET_VIEW(BLOCK_INDEX)
( 1996)     IF (ALLOCATED(SELF%F_TCGHG)) THEN
( 1997)       DO I=1, SIZE(SELF%F_TCGHG)
( 1998)         SELF%PTCGHG(I)%P => SELF%F_TCGHG(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1999)       END DO
( 2000)     END IF
( 2001)     IF (ALLOCATED(SELF%F_TCCHEM)) THEN
( 2002)       DO I=1, SIZE(SELF%F_TCCHEM)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 37

( 2003)         SELF%PTCCHEM(I)%P => SELF%F_TCCHEM(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 2004)       END DO
( 2005)     END IF
( 2006)     IF (ALLOCATED(SELF%F_AERODIAG)) THEN
( 2007)       DO J=1, SIZE(SELF%F_AERODIAG, DIM=2)
( 2008)         DO I=1, SIZE(SELF%F_AERODIAG, DIM=1)
( 2009)           SELF%PAERODIAG(I,J)%P => SELF%F_AERODIAG(I,J)%PTR%GET_VIEW(BLOCK_INDEX)
( 2010)         END DO
( 2011)       END DO
( 2012)     END IF
( 2013)     IF (ALLOCATED(SELF%F_AERO_WVL_DIAG)) THEN
( 2014)       DO J=1, SIZE(SELF%F_AERO_WVL_DIAG, DIM=2)
( 2015)         DO I=1, SIZE(SELF%F_AERO_WVL_DIAG, DIM=1)
( 2016)           SELF%PAERO_WVL_DIAG(I,J)%P => SELF%F_AERO_WVL_DIAG(I,J)%PTR%GET_VIEW(BLOCK_INDEX)
( 2017)         END DO
( 2018)       END DO
( 2019)     END IF
( 2020)     IF (ASSOCIATED(SELF%F_100U))  SELF%P100U => SELF%F_100U%GET_VIEW(BLOCK_INDEX)
( 2021)     IF (ASSOCIATED(SELF%F_100V))  SELF%P100V => SELF%F_100V%GET_VIEW(BLOCK_INDEX)
( 2022)     IF (ASSOCIATED(SELF%F_200U))  SELF%P200U => SELF%F_200U%GET_VIEW(BLOCK_INDEX)
( 2023)     IF (ASSOCIATED(SELF%F_200V))  SELF%P200V => SELF%F_200V%GET_VIEW(BLOCK_INDEX)
( 2024)     IF (ASSOCIATED(SELF%F_ZUST))  SELF%PZUST => SELF%F_ZUST%GET_VIEW(BLOCK_INDEX)
( 2025)     IF (ASSOCIATED(SELF%F_10NU))  SELF%P10NU => SELF%F_10NU%GET_VIEW(BLOCK_INDEX)
( 2026)     IF (ASSOCIATED(SELF%F_10NV))  SELF%P10NV => SELF%F_10NV%GET_VIEW(BLOCK_INDEX)
( 2027)     IF (ASSOCIATED(SELF%F_DNDZN))  SELF%PDNDZN => SELF%F_DNDZN%GET_VIEW(BLOCK_INDEX)
( 2028)     IF (ASSOCIATED(SELF%F_DNDZA))  SELF%PDNDZA => SELF%F_DNDZA%GET_VIEW(BLOCK_INDEX)
( 2029)     IF (ASSOCIATED(SELF%F_DCTB))  SELF%PDCTB => SELF%F_DCTB%GET_VIEW(BLOCK_INDEX)
( 2030)     IF (ASSOCIATED(SELF%F_TPLB))  SELF%PTPLB => SELF%F_TPLB%GET_VIEW(BLOCK_INDEX)
( 2031)     IF (ASSOCIATED(SELF%F_TPLT))  SELF%PTPLT => SELF%F_TPLT%GET_VIEW(BLOCK_INDEX)
( 2032)     IF (ASSOCIATED(SELF%F_ODSS))  SELF%PODSS => SELF%F_ODSS%GET_VIEW(BLOCK_INDEX)
( 2033)     IF (ASSOCIATED(SELF%F_ODDU))  SELF%PODDU => SELF%F_ODDU%GET_VIEW(BLOCK_INDEX)
( 2034)     IF (ASSOCIATED(SELF%F_ODOM))  SELF%PODOM => SELF%F_ODOM%GET_VIEW(BLOCK_INDEX)
( 2035)     IF (ASSOCIATED(SELF%F_ODBC))  SELF%PODBC => SELF%F_ODBC%GET_VIEW(BLOCK_INDEX)
( 2036)     IF (ASSOCIATED(SELF%F_ODSU))  SELF%PODSU => SELF%F_ODSU%GET_VIEW(BLOCK_INDEX)
( 2037)     IF (ASSOCIATED(SELF%F_ODNI))  SELF%PODNI => SELF%F_ODNI%GET_VIEW(BLOCK_INDEX)
( 2038)     IF (ASSOCIATED(SELF%F_ODAM))  SELF%PODAM => SELF%F_ODAM%GET_VIEW(BLOCK_INDEX)
( 2039)     IF (ASSOCIATED(SELF%F_ODSOA))  SELF%PODSOA => SELF%F_ODSOA%GET_VIEW(BLOCK_INDEX)
( 2040)     IF (ASSOCIATED(SELF%F_ODVFA))  SELF%PODVFA => SELF%F_ODVFA%GET_VIEW(BLOCK_INDEX)
( 2041)     IF (ASSOCIATED(SELF%F_ODVSU))  SELF%PODVSU => SELF%F_ODVSU%GET_VIEW(BLOCK_INDEX)
( 2042)     IF (ASSOCIATED(SELF%F_ODTOACC))  SELF%PODTOACC => SELF%F_ODTOACC%GET_VIEW(BLOCK_INDEX)
( 2043)     IF (ASSOCIATED(SELF%F_AEPM1))  SELF%PAEPM1 => SELF%F_AEPM1%GET_VIEW(BLOCK_INDEX)
( 2044)     IF (ASSOCIATED(SELF%F_AEPM25))  SELF%PAEPM25 => SELF%F_AEPM25%GET_VIEW(BLOCK_INDEX)
( 2045)     IF (ASSOCIATED(SELF%F_AEPM10))  SELF%PAEPM10 => SELF%F_AEPM10%GET_VIEW(BLOCK_INDEX)
( 2046)     IF (ASSOCIATED(SELF%F_UVBED))  SELF%PUVBED => SELF%F_UVBED%GET_VIEW(BLOCK_INDEX)
( 2047)     IF (ASSOCIATED(SELF%F_UVBEDCS))  SELF%PUVBEDCS => SELF%F_UVBEDCS%GET_VIEW(BLOCK_INDEX)
( 2048)     IF (ASSOCIATED(SELF%F_LITOTI))  SELF%PLITOTI => SELF%F_LITOTI%GET_VIEW(BLOCK_INDEX)
( 2049)     IF (ASSOCIATED(SELF%F_LICGI))  SELF%PLICGI => SELF%F_LICGI%GET_VIEW(BLOCK_INDEX)
( 2050)     IF (ALLOCATED(SELF%F_LITOTA6)) THEN
( 2051)       DO I=1, SIZE(SELF%F_LITOTA6)
( 2052)         SELF%PLITOTA6(I)%P => SELF%F_LITOTA6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 2053)       END DO
( 2054)     END IF
( 2055)     IF (ALLOCATED(SELF%F_LICGA6)) THEN
( 2056)       DO I=1, SIZE(SELF%F_LICGA6)
( 2057)         SELF%PLICGA6(I)%P => SELF%F_LICGA6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 2058)       END DO
( 2059)     END IF
( 2060) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 38

( 2061)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2062)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_UPDATE_VIEW
( 2063) 
( 2064)   SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_INIT(SELF, VARIABLE_GROUP)
( 2065)     ! Constructor of the array view type for a surface variable group
( 2066)     CLASS(SURFACE_VIEW_GROUP_SATSIM) :: SELF
( 2067)     TYPE(SURFACE_VARIABLE_GROUP_SATSIM), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2068)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2069) 
( 2070)     ! Create a view for the "T0" field only for diagnostic fields
( 2071)     SELF%F_CLBT => VARIABLE_GROUP%VCLBT%FT0
( 2072)     SELF%F_CSBT => VARIABLE_GROUP%VCSBT%FT0
( 2073)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2074)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2075)   END SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_INIT
( 2076) 
( 2077)   SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2078)     ! Extract local array views from field objects
( 2079)     CLASS(SURFACE_VIEW_GROUP_SATSIM) :: SELF
( 2080)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2081)     INTEGER(KIND=JPIM) :: I, J
( 2082) 
( 2083)     ! Set up the view pointer for the "T0" field
( 2084)     IF (ASSOCIATED(SELF%F_CLBT))  SELF%PCLBT => SELF%F_CLBT%GET_VIEW(BLOCK_INDEX)
( 2085)     IF (ASSOCIATED(SELF%F_CSBT))  SELF%PCSBT => SELF%F_CSBT%GET_VIEW(BLOCK_INDEX)
( 2086) 
( 2087)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2088)   END SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_UPDATE_VIEW
( 2089) 
( 2090)   SUBROUTINE SURFACE_VIEW_GROUP_WAVES_INIT(SELF, VARIABLE_GROUP)
( 2091)     ! Constructor of the array view type for a surface variable group
( 2092)     CLASS(SURFACE_VIEW_GROUP_WAVES) :: SELF
( 2093)     TYPE(SURFACE_VARIABLE_GROUP_WAVES), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2094)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2095) 
( 2096)     ! Create a view for the "T0" field only for diagnostic fields
( 2097)     SELF%F_CHAR => VARIABLE_GROUP%VCHAR%FT0
( 2098)     SELF%F_USTOKES => VARIABLE_GROUP%VUSTOKES%FT0
( 2099)     SELF%F_VSTOKES => VARIABLE_GROUP%VVSTOKES%FT0
( 2100)     SELF%F_PHIOC => VARIABLE_GROUP%VPHIOC%FT0
( 2101)     SELF%F_PHIAW => VARIABLE_GROUP%VPHIAW%FT0
( 2102)     SELF%F_TAUOC => VARIABLE_GROUP%VTAUOC%FT0
( 2103)     SELF%F_EMEAN => VARIABLE_GROUP%VEMEAN%FT0
( 2104)     SELF%F_FMEAN => VARIABLE_GROUP%VFMEAN%FT0
( 2105)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2106)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2107)   END SUBROUTINE SURFACE_VIEW_GROUP_WAVES_INIT
( 2108) 
( 2109)   SUBROUTINE SURFACE_VIEW_GROUP_WAVES_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2110)     ! Extract local array views from field objects
( 2111)     CLASS(SURFACE_VIEW_GROUP_WAVES) :: SELF
( 2112)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2113)     INTEGER(KIND=JPIM) :: I, J
( 2114) 
( 2115)     ! Set up the view pointer for the "T0" field
( 2116)     IF (ASSOCIATED(SELF%F_CHAR))  SELF%PCHAR => SELF%F_CHAR%GET_VIEW(BLOCK_INDEX)
( 2117)     IF (ASSOCIATED(SELF%F_USTOKES))  SELF%PUSTOKES => SELF%F_USTOKES%GET_VIEW(BLOCK_INDEX)
( 2118)     IF (ASSOCIATED(SELF%F_VSTOKES))  SELF%PVSTOKES => SELF%F_VSTOKES%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 39

( 2119)     IF (ASSOCIATED(SELF%F_PHIOC))  SELF%PPHIOC => SELF%F_PHIOC%GET_VIEW(BLOCK_INDEX)
( 2120)     IF (ASSOCIATED(SELF%F_PHIAW))  SELF%PPHIAW => SELF%F_PHIAW%GET_VIEW(BLOCK_INDEX)
( 2121)     IF (ASSOCIATED(SELF%F_TAUOC))  SELF%PTAUOC => SELF%F_TAUOC%GET_VIEW(BLOCK_INDEX)
( 2122)     IF (ASSOCIATED(SELF%F_EMEAN))  SELF%PEMEAN => SELF%F_EMEAN%GET_VIEW(BLOCK_INDEX)
( 2123)     IF (ASSOCIATED(SELF%F_FMEAN))  SELF%PFMEAN => SELF%F_FMEAN%GET_VIEW(BLOCK_INDEX)
( 2124) 
( 2125)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2126)   END SUBROUTINE SURFACE_VIEW_GROUP_WAVES_UPDATE_VIEW
( 2127) 
( 2128)   SUBROUTINE SURFACE_VIEW_GROUP_WAM_INIT(SELF, VARIABLE_GROUP)
( 2129)     ! Constructor of the array view type for a surface variable group
( 2130)     CLASS(SURFACE_VIEW_GROUP_WAM) :: SELF
( 2131)     TYPE(SURFACE_VARIABLE_GROUP_WAM), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2132)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2133) 
( 2134)     ! Create a view for the "T0" field only for diagnostic fields
( 2135)     SELF%F_U10N => VARIABLE_GROUP%VU10N%FT0
( 2136)     SELF%F_V10N => VARIABLE_GROUP%VV10N%FT0
( 2137)     SELF%F_RHO => VARIABLE_GROUP%VRHO%FT0
( 2138)     SELF%F_ZIL => VARIABLE_GROUP%VZIL%FT0
( 2139)     SELF%F_CIF => VARIABLE_GROUP%VCIF%FT0
( 2140)     SELF%F_CLK => VARIABLE_GROUP%VCLK%FT0
( 2141)     SELF%F_UCURW => VARIABLE_GROUP%VUCURW%FT0
( 2142)     SELF%F_VCURW => VARIABLE_GROUP%VVCURW%FT0
( 2143)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2144)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2145)   END SUBROUTINE SURFACE_VIEW_GROUP_WAM_INIT
( 2146) 
( 2147)   SUBROUTINE SURFACE_VIEW_GROUP_WAM_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2148)     ! Extract local array views from field objects
( 2149)     CLASS(SURFACE_VIEW_GROUP_WAM) :: SELF
( 2150)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2151)     INTEGER(KIND=JPIM) :: I, J
( 2152) 
( 2153)     ! Set up the view pointer for the "T0" field
( 2154)     IF (ASSOCIATED(SELF%F_U10N))  SELF%PU10N => SELF%F_U10N%GET_VIEW(BLOCK_INDEX)
( 2155)     IF (ASSOCIATED(SELF%F_V10N))  SELF%PV10N => SELF%F_V10N%GET_VIEW(BLOCK_INDEX)
( 2156)     IF (ASSOCIATED(SELF%F_RHO))  SELF%PRHO => SELF%F_RHO%GET_VIEW(BLOCK_INDEX)
( 2157)     IF (ASSOCIATED(SELF%F_ZIL))  SELF%PZIL => SELF%F_ZIL%GET_VIEW(BLOCK_INDEX)
( 2158)     IF (ASSOCIATED(SELF%F_CIF))  SELF%PCIF => SELF%F_CIF%GET_VIEW(BLOCK_INDEX)
( 2159)     IF (ASSOCIATED(SELF%F_CLK))  SELF%PCLK => SELF%F_CLK%GET_VIEW(BLOCK_INDEX)
( 2160)     IF (ASSOCIATED(SELF%F_UCURW))  SELF%PUCURW => SELF%F_UCURW%GET_VIEW(BLOCK_INDEX)
( 2161)     IF (ASSOCIATED(SELF%F_VCURW))  SELF%PVCURW => SELF%F_VCURW%GET_VIEW(BLOCK_INDEX)
( 2162) 
( 2163)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2164)   END SUBROUTINE SURFACE_VIEW_GROUP_WAM_UPDATE_VIEW
( 2165) 
( 2166)   SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_INIT(SELF, VARIABLE_GROUP)
( 2167)     ! Constructor of the array view type for a surface variable group
( 2168)     CLASS(SURFACE_VIEW_GROUP_PRECFRAC) :: SELF
( 2169)     TYPE(SURFACE_VARIABLE_GROUP_PRECFRAC), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2170)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2171) 
( 2172)     ! Create a view for the "T0" field only for diagnostic fields
( 2173)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2174)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2175)   END SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_INIT
( 2176) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 40

( 2177)   SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2178)     ! Extract local array views from field objects
( 2179)     CLASS(SURFACE_VIEW_GROUP_PRECFRAC) :: SELF
( 2180)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2181)     INTEGER(KIND=JPIM) :: I, J
( 2182) 
( 2183)     ! Set up the view pointer for the "T0" field
( 2184) 
( 2185)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2186)   END SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_UPDATE_VIEW
( 2187) 
( 2188)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_INIT(SELF, VARIABLE_GROUP)
( 2189)     ! Constructor of the array view type for a surface variable group
( 2190)     CLASS(SURFACE_VIEW_GROUP_VEXTRA) :: SELF
( 2191)     TYPE(SURFACE_VARIABLE_GROUP_VEXTRA), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2192)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2193) 
( 2194)     ! Create a view for the "T0" field only for diagnostic fields
( 2195)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2196)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2197)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_INIT
( 2198) 
( 2199)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2200)     ! Extract local array views from field objects
( 2201)     CLASS(SURFACE_VIEW_GROUP_VEXTRA) :: SELF
( 2202)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2203)     INTEGER(KIND=JPIM) :: I, J
( 2204) 
( 2205)     ! Set up the view pointer for the "T0" field
( 2206) 
( 2207)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2208)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_UPDATE_VIEW
( 2209) 
( 2210)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_INIT(SELF, VARIABLE_GROUP)
( 2211)     ! Constructor of the array view type for a surface variable group
( 2212)     CLASS(SURFACE_VIEW_GROUP_VEXTRDI) :: SELF
( 2213)     TYPE(SURFACE_VARIABLE_GROUP_VEXTRDI), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2214)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2215) 
( 2216)     ! Create a view for the "T0" field only for diagnostic fields
( 2217)     SELF%F_XEDR => VARIABLE_GROUP%VXEDR%FT0
( 2218)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2219)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2220)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_INIT
( 2221) 
( 2222)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2223)     ! Extract local array views from field objects
( 2224)     CLASS(SURFACE_VIEW_GROUP_VEXTRDI) :: SELF
( 2225)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2226)     INTEGER(KIND=JPIM) :: I, J
( 2227) 
( 2228)     ! Set up the view pointer for the "T0" field
( 2229)     IF (ASSOCIATED(SELF%F_XEDR))  SELF%PXEDR => SELF%F_XEDR%GET_VIEW(BLOCK_INDEX)
( 2230) 
( 2231)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2232)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_UPDATE_VIEW
( 2233) 
( 2234)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_INIT(SELF, VARIABLE_GROUP)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 41

( 2235)     ! Constructor of the array view type for a surface variable group
( 2236)     CLASS(SURFACE_VIEW_GROUP_VPRECIP) :: SELF
( 2237)     TYPE(SURFACE_VARIABLE_GROUP_VPRECIP), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2238)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2239) 
( 2240)     ! Create a view for the "T0" field only for diagnostic fields
( 2241)     SELF%F_PRECIP => VARIABLE_GROUP%VPRECIP%FT0
( 2242)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2243)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2244)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_INIT
( 2245) 
( 2246)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2247)     ! Extract local array views from field objects
( 2248)     CLASS(SURFACE_VIEW_GROUP_VPRECIP) :: SELF
( 2249)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2250)     INTEGER(KIND=JPIM) :: I, J
( 2251) 
( 2252)     ! Set up the view pointer for the "T0" field
( 2253)     IF (ASSOCIATED(SELF%F_PRECIP))  SELF%PPRECIP => SELF%F_PRECIP%GET_VIEW(BLOCK_INDEX)
( 2254) 
( 2255)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2256)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_UPDATE_VIEW
( 2257) 
( 2258)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_INIT(SELF, VARIABLE_GROUP)
( 2259)     ! Constructor of the array view type for a surface variable group
( 2260)     CLASS(SURFACE_VIEW_GROUP_VPRECIP2) :: SELF
( 2261)     TYPE(SURFACE_VARIABLE_GROUP_VPRECIP2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2262)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2263) 
( 2264)     ! Create a view for the "T0" field only for diagnostic fields
( 2265)     SELF%F_PRECIP2 => VARIABLE_GROUP%VPRECIP2%FT0
( 2266)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2267)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2268)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_INIT
( 2269) 
( 2270)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2271)     ! Extract local array views from field objects
( 2272)     CLASS(SURFACE_VIEW_GROUP_VPRECIP2) :: SELF
( 2273)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2274)     INTEGER(KIND=JPIM) :: I, J
( 2275) 
( 2276)     ! Set up the view pointer for the "T0" field
( 2277)     IF (ASSOCIATED(SELF%F_PRECIP2))  SELF%PPRECIP2 => SELF%F_PRECIP2%GET_VIEW(BLOCK_INDEX)
( 2278) 
( 2279)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2280)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_UPDATE_VIEW
( 2281) 
( 2282)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_INIT(SELF, VARIABLE_GROUP)
( 2283)     ! Constructor of the array view type for a surface variable group
( 2284)     CLASS(SURFACE_VIEW_GROUP_VEXTR2) :: SELF
( 2285)     TYPE(SURFACE_VARIABLE_GROUP_VEXTR2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2286)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2287) 
( 2288)     ! Create a view for the "T0" field only for diagnostic fields
( 2289)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2290)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2291)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_INIT
( 2292) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 42

( 2293)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2294)     ! Extract local array views from field objects
( 2295)     CLASS(SURFACE_VIEW_GROUP_VEXTR2) :: SELF
( 2296)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2297)     INTEGER(KIND=JPIM) :: I, J
( 2298) 
( 2299)     ! Set up the view pointer for the "T0" field
( 2300) 
( 2301)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2302)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_UPDATE_VIEW
( 2303) 
( 2304)   SUBROUTINE SURFACE_VIEW_GROUP_SFORC_INIT(SELF, VARIABLE_GROUP)
( 2305)     ! Constructor of the array view type for a surface variable group
( 2306)     CLASS(SURFACE_VIEW_GROUP_SFORC) :: SELF
( 2307)     TYPE(SURFACE_VARIABLE_GROUP_SFORC), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2308)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2309) 
( 2310)     ! Create a view for the "T0" field only for diagnostic fields
( 2311)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2312)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2313)   END SUBROUTINE SURFACE_VIEW_GROUP_SFORC_INIT
( 2314) 
( 2315)   SUBROUTINE SURFACE_VIEW_GROUP_SFORC_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2316)     ! Extract local array views from field objects
( 2317)     CLASS(SURFACE_VIEW_GROUP_SFORC) :: SELF
( 2318)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2319)     INTEGER(KIND=JPIM) :: I, J
( 2320) 
( 2321)     ! Set up the view pointer for the "T0" field
( 2322) 
( 2323)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2324)   END SUBROUTINE SURFACE_VIEW_GROUP_SFORC_UPDATE_VIEW
( 2325) 
( 2326)   SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_INIT(SELF, VARIABLE_GROUP)
( 2327)     ! Constructor of the array view type for a surface variable group
( 2328)     CLASS(SURFACE_VIEW_GROUP_SFLUX) :: SELF
( 2329)     TYPE(SURFACE_VARIABLE_GROUP_SFLUX), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2330)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2331) 
( 2332)     ! Create a view for the "T0" field only for diagnostic fields
( 2333)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2334)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2335)   END SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_INIT
( 2336) 
( 2337)   SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2338)     ! Extract local array views from field objects
( 2339)     CLASS(SURFACE_VIEW_GROUP_SFLUX) :: SELF
( 2340)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2341)     INTEGER(KIND=JPIM) :: I, J
( 2342) 
( 2343)     ! Set up the view pointer for the "T0" field
( 2344) 
( 2345)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2346)   END SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_UPDATE_VIEW
( 2347) 
( 2348)   SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_INIT(SELF, VARIABLE_GROUP)
( 2349)     ! Constructor of the array view type for a surface variable group
( 2350)     CLASS(SURFACE_VIEW_GROUP_VO3ABC) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 43

( 2351)     TYPE(SURFACE_VARIABLE_GROUP_VO3ABC), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2352)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2353) 
( 2354)     ! Create a view for the "T0" field only for diagnostic fields
( 2355)     SELF%F_A => VARIABLE_GROUP%VA%FT0
( 2356)     SELF%F_B => VARIABLE_GROUP%VB%FT0
( 2357)     SELF%F_C => VARIABLE_GROUP%VC%FT0
( 2358)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2359)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2360)   END SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_INIT
( 2361) 
( 2362)   SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2363)     ! Extract local array views from field objects
( 2364)     CLASS(SURFACE_VIEW_GROUP_VO3ABC) :: SELF
( 2365)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2366)     INTEGER(KIND=JPIM) :: I, J
( 2367) 
( 2368)     ! Set up the view pointer for the "T0" field
( 2369)     IF (ASSOCIATED(SELF%F_A))  SELF%PA => SELF%F_A%GET_VIEW(BLOCK_INDEX)
( 2370)     IF (ASSOCIATED(SELF%F_B))  SELF%PB => SELF%F_B%GET_VIEW(BLOCK_INDEX)
( 2371)     IF (ASSOCIATED(SELF%F_C))  SELF%PC => SELF%F_C%GET_VIEW(BLOCK_INDEX)
( 2372) 
( 2373)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2374)   END SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_UPDATE_VIEW
( 2375) 
( 2376)   
( 2377) END MODULE SURFACE_VIEWS_DIAGNOSTIC_MODULE
( 2378) 
( 2379) 
( 2380) 


































NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 44

(    1) # 1 "surface_views_diagnostic_module.F90"
(    1) # 2 "surface_views_diagnostic_module.F90"
(    2) MODULE SURFACE_VIEWS_DIAGNOSTIC_MODULE
(    3)   ! The SURFACE_VIEWS type contains namespaced access to groups of
(    4)   ! array pointers according to individual surface variable groups.
(    5)   !
(    6)   !
(    7)   ! Variable naming conventions
(    8)   ! ---------------------------
(    9)   ! The top-level type `SURFACE_VIEWS_TYPE` holds multiple group
(   10)   ! types, each prefixed with `GSP_` for prognostic and `GSD_` for
(   11)   ! diagnostic variable groups.
(   12)   !
(   13)   ! Each group type holds a list of array views (pointers to
(   14)   ! sub-sections of the gobal array), each prefixed with `P` to
(   15)   ! indicate a thread-local view pointer. The backend storage for each
(   16)   ! of these view pointers is provided by `FIELD_2D/FIELD_3D` objects,
(   17)   ! a reference to which is also stored on the group types and
(   18)   ! prefixed with `F_`.
(   19) # 20 "surface_views_diagnostic_module.F90"
(   20) USE PARKIND1, ONLY: JPIM, JPRB
(   21) USE FIELD_MODULE, ONLY: FIELD_2D, FIELD_3D, FIELD_4D, FIELD_2D_PTR, &
(   22)  &                      FIELD_3D_PTR, FIELD_2D_VIEW, FIELD_3D_VIEW
(   23) ! Using global imports here, since fypp notation breaks cmake's dependency analysis
(   24) USE SURFACE_VARIABLES_MOD
(   25) # 26 "surface_views_diagnostic_module.F90"
(   26) IMPLICIT NONE
(   27) # 28 "surface_views_diagnostic_module.F90"
(   28) TYPE SURFACE_VIEW_GROUP_VARSF
(   29)   REAL(KIND=JPRB), POINTER :: PZ0F(:)   ! gravity * surface roughness length
(   30) !>REAL(KIND=JPRB)          :: PZ0F (YDCPG_OPTS%KLON)
(   31)   REAL(KIND=JPRB), POINTER :: PALBF(:)   ! surface shortwave albedo
(   32) !>REAL(KIND=JPRB)          :: PALBF (YDCPG_OPTS%KLON)
(   33)   REAL(KIND=JPRB), POINTER :: PEMISF(:)   ! surface longwave emissivity
(   34) !>REAL(KIND=JPRB)          :: PEMISF (YDCPG_OPTS%KLON)
(   35)   REAL(KIND=JPRB), POINTER :: PGETRL(:)   ! standard deviation of orography
(   36) !>REAL(KIND=JPRB)          :: PGETRL (YDCPG_OPTS%KLON)
(   37)   REAL(KIND=JPRB), POINTER :: PLSM(:)   ! land-sea mask
(   38) !>REAL(KIND=JPRB)          :: PLSM (YDCPG_OPTS%KLON)
(   39)   REAL(KIND=JPRB), POINTER :: PVEG(:)   ! vegetation cover
(   40) !>REAL(KIND=JPRB)          :: PVEG (YDCPG_OPTS%KLON)
(   41)   REAL(KIND=JPRB), POINTER :: PVRLAN(:)   ! anisotropy of the sub-grid scale orography
(   42) !>REAL(KIND=JPRB)          :: PVRLAN (YDCPG_OPTS%KLON)
(   43)   REAL(KIND=JPRB), POINTER :: PVRLDI(:)   ! angle of the direction of orography with the x axis
(   44) !>REAL(KIND=JPRB)          :: PVRLDI (YDCPG_OPTS%KLON)
(   45)   REAL(KIND=JPRB), POINTER :: PSIG(:)   ! characteristic orographic slope
(   46) !>REAL(KIND=JPRB)          :: PSIG (YDCPG_OPTS%KLON)
(   47)   REAL(KIND=JPRB), POINTER :: PALBSF(:)   ! soil shortwave albedo
(   48) !>REAL(KIND=JPRB)          :: PALBSF (YDCPG_OPTS%KLON)
(   49)   REAL(KIND=JPRB), POINTER :: PLAN(:)   ! fraction of land
(   50) !>REAL(KIND=JPRB)          :: PLAN (YDCPG_OPTS%KLON)
(   51)   REAL(KIND=JPRB), POINTER :: PSST(:)   ! (open) sea surface temperature
(   52) !>REAL(KIND=JPRB)          :: PSST (YDCPG_OPTS%KLON)
(   53)   REAL(KIND=JPRB), POINTER :: PSSS(:)   ! sea surface salinity
(   54) !>REAL(KIND=JPRB)          :: PSSS (YDCPG_OPTS%KLON)
(   55)   REAL(KIND=JPRB), POINTER :: PLZ0H(:)   ! logarithm of roughness length for heat
(   56) !>REAL(KIND=JPRB)          :: PLZ0H (YDCPG_OPTS%KLON)
(   57)   REAL(KIND=JPRB), POINTER :: PCVL(:)   ! low vegetation cover






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 45

(   58) !>REAL(KIND=JPRB)          :: PCVL (YDCPG_OPTS%KLON)
(   59)   REAL(KIND=JPRB), POINTER :: PCVH(:)   ! high vegetation cover
(   60) !>REAL(KIND=JPRB)          :: PCVH (YDCPG_OPTS%KLON)
(   61)   REAL(KIND=JPRB), POINTER :: PTVL(:)   ! low vegetation type
(   62) !>REAL(KIND=JPRB)          :: PTVL (YDCPG_OPTS%KLON)
(   63)   REAL(KIND=JPRB), POINTER :: PTVH(:)   ! high vegetation type
(   64) !>REAL(KIND=JPRB)          :: PTVH (YDCPG_OPTS%KLON)
(   65)   REAL(KIND=JPRB), POINTER :: PLAIL(:)   ! low vegetation LAI
(   66) !>REAL(KIND=JPRB)          :: PLAIL (YDCPG_OPTS%KLON)
(   67)   REAL(KIND=JPRB), POINTER :: PLAIH(:)   ! high vegetation LAI
(   68) !>REAL(KIND=JPRB)          :: PLAIH (YDCPG_OPTS%KLON)
(   69)   REAL(KIND=JPRB), POINTER :: PSOTY(:)   ! soil type
(   70) !>REAL(KIND=JPRB)          :: PSOTY (YDCPG_OPTS%KLON)
(   71)   REAL(KIND=JPRB), POINTER :: PCLK(:)   ! lake cover
(   72) !>REAL(KIND=JPRB)          :: PCLK (YDCPG_OPTS%KLON)
(   73)   REAL(KIND=JPRB), POINTER :: PDL(:)   ! lake depth
(   74) !>REAL(KIND=JPRB)          :: PDL (YDCPG_OPTS%KLON)
(   75)   REAL(KIND=JPRB), POINTER :: PCI(:)   ! sea ice fraction
(   76) !>REAL(KIND=JPRB)          :: PCI (YDCPG_OPTS%KLON)
(   77)   REAL(KIND=JPRB), POINTER :: PUCUR(:)   ! U-component of the ocean current
(   78) !>REAL(KIND=JPRB)          :: PUCUR (YDCPG_OPTS%KLON)
(   79)   REAL(KIND=JPRB), POINTER :: PVCUR(:)   ! V-component of the ocean current
(   80) !>REAL(KIND=JPRB)          :: PVCUR (YDCPG_OPTS%KLON)
(   81)   REAL(KIND=JPRB), POINTER :: PZ0RLF(:)   ! gravity * vegetation roughness length
(   82) !>REAL(KIND=JPRB)          :: PZ0RLF (YDCPG_OPTS%KLON)
(   83)   REAL(KIND=JPRB), POINTER :: PCO2O(:)   ! oceanic CO2 flux
(   84) !>REAL(KIND=JPRB)          :: PCO2O (YDCPG_OPTS%KLON)
(   85)   REAL(KIND=JPRB), POINTER :: PCO2B(:)   ! biosphere CO2 flux
(   86) !>REAL(KIND=JPRB)          :: PCO2B (YDCPG_OPTS%KLON)
(   87)   REAL(KIND=JPRB), POINTER :: PCO2A(:)   ! anthropogenic CO2 flux
(   88) !>REAL(KIND=JPRB)          :: PCO2A (YDCPG_OPTS%KLON)
(   89)   REAL(KIND=JPRB), POINTER :: PCO2F(:)   ! CO2 fire emissions
(   90) !>REAL(KIND=JPRB)          :: PCO2F (YDCPG_OPTS%KLON)
(   91)   REAL(KIND=JPRB), POINTER :: PCGPP(:)   ! GPP bias correction factor
(   92) !>REAL(KIND=JPRB)          :: PCGPP (YDCPG_OPTS%KLON)
(   93)   REAL(KIND=JPRB), POINTER :: PCREC(:)   ! REC bias correction factor
(   94) !>REAL(KIND=JPRB)          :: PCREC (YDCPG_OPTS%KLON)
(   95)   REAL(KIND=JPRB), POINTER :: PCH4AG(:)   ! CH4 surface fluxes - aggregated field
(   96) !>REAL(KIND=JPRB)          :: PCH4AG (YDCPG_OPTS%KLON)
(   97)   REAL(KIND=JPRB), POINTER :: PCH4F(:)   ! CH4 fire emissions
(   98) !>REAL(KIND=JPRB)          :: PCH4F (YDCPG_OPTS%KLON)
(   99)   REAL(KIND=JPRB), POINTER :: PSDFOR(:)   ! SD filtered orography
(  100) !>REAL(KIND=JPRB)          :: PSDFOR (YDCPG_OPTS%KLON)
(  101)   REAL(KIND=JPRB), POINTER :: PALUVP(:)   ! MODIS-derived parallel albedo for shortwave radiation
(  102) !>REAL(KIND=JPRB)          :: PALUVP (YDCPG_OPTS%KLON)
(  103)   REAL(KIND=JPRB), POINTER :: PALUVD(:)   ! MODIS-derived diffuse albedo for shortwave radiation
(  104) !>REAL(KIND=JPRB)          :: PALUVD (YDCPG_OPTS%KLON)
(  105)   REAL(KIND=JPRB), POINTER :: PALNIP(:)   ! MODIS-derived parallel albedo for longwave radiation
(  106) !>REAL(KIND=JPRB)          :: PALNIP (YDCPG_OPTS%KLON)
(  107)   REAL(KIND=JPRB), POINTER :: PALNID(:)   ! MODIS-derived diffuse albedo for longwave radiation
(  108) !>REAL(KIND=JPRB)          :: PALNID (YDCPG_OPTS%KLON)
(  109)   REAL(KIND=JPRB), POINTER :: PFP1(:)   ! surface orography in the 2nd part of FULLPOS-927
(  110) !>REAL(KIND=JPRB)          :: PFP1 (YDCPG_OPTS%KLON)
(  111)   REAL(KIND=JPRB), POINTER :: PBCBF(:)   ! black carbon biogenic
(  112) !>REAL(KIND=JPRB)          :: PBCBF (YDCPG_OPTS%KLON)
(  113)   REAL(KIND=JPRB), POINTER :: PBCFF(:)   ! black carbon fossil fuel
(  114) !>REAL(KIND=JPRB)          :: PBCFF (YDCPG_OPTS%KLON)
(  115)   REAL(KIND=JPRB), POINTER :: PBCGF(:)   ! black carbon GFED






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 46

(  116) !>REAL(KIND=JPRB)          :: PBCGF (YDCPG_OPTS%KLON)
(  117)   REAL(KIND=JPRB), POINTER :: POMBF(:)   ! organic matter biogenic
(  118) !>REAL(KIND=JPRB)          :: POMBF (YDCPG_OPTS%KLON)
(  119)   REAL(KIND=JPRB), POINTER :: POMFF(:)   ! organic matter fossil fuel
(  120) !>REAL(KIND=JPRB)          :: POMFF (YDCPG_OPTS%KLON)
(  121)   REAL(KIND=JPRB), POINTER :: POMGF(:)   ! organic matter GFED
(  122) !>REAL(KIND=JPRB)          :: POMGF (YDCPG_OPTS%KLON)
(  123)   REAL(KIND=JPRB), POINTER :: PINJF(:)   ! height of maximum injection for biomass burning emissions
(  124) !>REAL(KIND=JPRB)          :: PINJF (YDCPG_OPTS%KLON)
(  125)   REAL(KIND=JPRB), POINTER :: PSO2L(:)   ! sulphate low-level
(  126) !>REAL(KIND=JPRB)          :: PSO2L (YDCPG_OPTS%KLON)
(  127)   REAL(KIND=JPRB), POINTER :: PSO2H(:)   ! sulphate higher-level
(  128) !>REAL(KIND=JPRB)          :: PSO2H (YDCPG_OPTS%KLON)
(  129)   REAL(KIND=JPRB), POINTER :: PSO2DD(:)   ! sulphate dry dep velocity
(  130) !>REAL(KIND=JPRB)          :: PSO2DD (YDCPG_OPTS%KLON)
(  131)   REAL(KIND=JPRB), POINTER :: PSOGF(:)   ! sulphate GFED
(  132) !>REAL(KIND=JPRB)          :: PSOGF (YDCPG_OPTS%KLON)
(  133)   REAL(KIND=JPRB), POINTER :: PSOA(:)   ! secondary organic
(  134) !>REAL(KIND=JPRB)          :: PSOA (YDCPG_OPTS%KLON)
(  135)   REAL(KIND=JPRB), POINTER :: PVOLC(:)   ! volcanic continuous
(  136) !>REAL(KIND=JPRB)          :: PVOLC (YDCPG_OPTS%KLON)
(  137)   REAL(KIND=JPRB), POINTER :: PVOLE(:)   ! volcanic explosive
(  138) !>REAL(KIND=JPRB)          :: PVOLE (YDCPG_OPTS%KLON)
(  139)   REAL(KIND=JPRB), POINTER :: PDMSO(:)   ! oceanic DMS
(  140) !>REAL(KIND=JPRB)          :: PDMSO (YDCPG_OPTS%KLON)
(  141)   REAL(KIND=JPRB), POINTER :: PSOACO(:)   ! SOA from CO
(  142) !>REAL(KIND=JPRB)          :: PSOACO (YDCPG_OPTS%KLON)
(  143)   REAL(KIND=JPRB), POINTER :: PURBF(:)   ! Urban fraction
(  144) !>REAL(KIND=JPRB)          :: PURBF (YDCPG_OPTS%KLON)
(  145)   REAL(KIND=JPRB), POINTER :: PVOLCALTI(:)   ! Altitude of volcanoes
(  146) !>REAL(KIND=JPRB)          :: PVOLCALTI (YDCPG_OPTS%KLON)
(  147)   REAL(KIND=JPRB), POINTER :: PFCA1(:)   ! Fraction of calcite over dust 1st bin
(  148) !>REAL(KIND=JPRB)          :: PFCA1 (YDCPG_OPTS%KLON)
(  149)   REAL(KIND=JPRB), POINTER :: PFCA2(:)   ! Fraction of calcite over dust 2nd bin
(  150) !>REAL(KIND=JPRB)          :: PFCA2 (YDCPG_OPTS%KLON)
(  151)   REAL(KIND=JPRB), POINTER :: PAERDEP(:)   ! dust emission potential
(  152) !>REAL(KIND=JPRB)          :: PAERDEP (YDCPG_OPTS%KLON)
(  153)   REAL(KIND=JPRB), POINTER :: PAERLTS(:)   ! dust lifting threshold speed
(  154) !>REAL(KIND=JPRB)          :: PAERLTS (YDCPG_OPTS%KLON)
(  155)   REAL(KIND=JPRB), POINTER :: PAERSCC(:)   ! dust soil clay content
(  156) !>REAL(KIND=JPRB)          :: PAERSCC (YDCPG_OPTS%KLON)
(  157)   REAL(KIND=JPRB), POINTER :: PDSF(:)   ! dust source function
(  158) !>REAL(KIND=JPRB)          :: PDSF (YDCPG_OPTS%KLON)
(  159)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PCHEMFLX   ! chemistry emissions input
(  160)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PCHEMFLXO   ! total chemistry flux (emissions + deposition)
(  161)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PCHEMDV   ! chemistry deposition velocity
(  162)   REAL(KIND=JPRB), POINTER :: PNUDM(:)   ! nudging mask
(  163) !>REAL(KIND=JPRB)          :: PNUDM (YDCPG_OPTS%KLON)
(  164)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  165) # 166 "surface_views_diagnostic_module.F90"
(  166)   TYPE(SURFACE_VARIABLE_GROUP_VARSF), POINTER :: VARIABLE_GROUP
(  167)   TYPE(FIELD_2D), POINTER :: F_Z0F=>NULL()
(  168)   TYPE(FIELD_2D), POINTER :: F_ALBF=>NULL()
(  169)   TYPE(FIELD_2D), POINTER :: F_EMISF=>NULL()
(  170)   TYPE(FIELD_2D), POINTER :: F_GETRL=>NULL()
(  171)   TYPE(FIELD_2D), POINTER :: F_LSM=>NULL()
(  172)   TYPE(FIELD_2D), POINTER :: F_VEG=>NULL()
(  173)   TYPE(FIELD_2D), POINTER :: F_VRLAN=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 47

(  174)   TYPE(FIELD_2D), POINTER :: F_VRLDI=>NULL()
(  175)   TYPE(FIELD_2D), POINTER :: F_SIG=>NULL()
(  176)   TYPE(FIELD_2D), POINTER :: F_ALBSF=>NULL()
(  177)   TYPE(FIELD_2D), POINTER :: F_LAN=>NULL()
(  178)   TYPE(FIELD_2D), POINTER :: F_SST=>NULL()
(  179)   TYPE(FIELD_2D), POINTER :: F_SSS=>NULL()
(  180)   TYPE(FIELD_2D), POINTER :: F_LZ0H=>NULL()
(  181)   TYPE(FIELD_2D), POINTER :: F_CVL=>NULL()
(  182)   TYPE(FIELD_2D), POINTER :: F_CVH=>NULL()
(  183)   TYPE(FIELD_2D), POINTER :: F_TVL=>NULL()
(  184)   TYPE(FIELD_2D), POINTER :: F_TVH=>NULL()
(  185)   TYPE(FIELD_2D), POINTER :: F_LAIL=>NULL()
(  186)   TYPE(FIELD_2D), POINTER :: F_LAIH=>NULL()
(  187)   TYPE(FIELD_2D), POINTER :: F_SOTY=>NULL()
(  188)   TYPE(FIELD_2D), POINTER :: F_CLK=>NULL()
(  189)   TYPE(FIELD_2D), POINTER :: F_DL=>NULL()
(  190)   TYPE(FIELD_2D), POINTER :: F_CI=>NULL()
(  191)   TYPE(FIELD_2D), POINTER :: F_UCUR=>NULL()
(  192)   TYPE(FIELD_2D), POINTER :: F_VCUR=>NULL()
(  193)   TYPE(FIELD_2D), POINTER :: F_Z0RLF=>NULL()
(  194)   TYPE(FIELD_2D), POINTER :: F_CO2O=>NULL()
(  195)   TYPE(FIELD_2D), POINTER :: F_CO2B=>NULL()
(  196)   TYPE(FIELD_2D), POINTER :: F_CO2A=>NULL()
(  197)   TYPE(FIELD_2D), POINTER :: F_CO2F=>NULL()
(  198)   TYPE(FIELD_2D), POINTER :: F_CGPP=>NULL()
(  199)   TYPE(FIELD_2D), POINTER :: F_CREC=>NULL()
(  200)   TYPE(FIELD_2D), POINTER :: F_CH4AG=>NULL()
(  201)   TYPE(FIELD_2D), POINTER :: F_CH4F=>NULL()
(  202)   TYPE(FIELD_2D), POINTER :: F_SDFOR=>NULL()
(  203)   TYPE(FIELD_2D), POINTER :: F_ALUVP=>NULL()
(  204)   TYPE(FIELD_2D), POINTER :: F_ALUVD=>NULL()
(  205)   TYPE(FIELD_2D), POINTER :: F_ALNIP=>NULL()
(  206)   TYPE(FIELD_2D), POINTER :: F_ALNID=>NULL()
(  207)   TYPE(FIELD_2D), POINTER :: F_FP1=>NULL()
(  208)   TYPE(FIELD_2D), POINTER :: F_BCBF=>NULL()
(  209)   TYPE(FIELD_2D), POINTER :: F_BCFF=>NULL()
(  210)   TYPE(FIELD_2D), POINTER :: F_BCGF=>NULL()
(  211)   TYPE(FIELD_2D), POINTER :: F_OMBF=>NULL()
(  212)   TYPE(FIELD_2D), POINTER :: F_OMFF=>NULL()
(  213)   TYPE(FIELD_2D), POINTER :: F_OMGF=>NULL()
(  214)   TYPE(FIELD_2D), POINTER :: F_INJF=>NULL()
(  215)   TYPE(FIELD_2D), POINTER :: F_SO2L=>NULL()
(  216)   TYPE(FIELD_2D), POINTER :: F_SO2H=>NULL()
(  217)   TYPE(FIELD_2D), POINTER :: F_SO2DD=>NULL()
(  218)   TYPE(FIELD_2D), POINTER :: F_SOGF=>NULL()
(  219)   TYPE(FIELD_2D), POINTER :: F_SOA=>NULL()
(  220)   TYPE(FIELD_2D), POINTER :: F_VOLC=>NULL()
(  221)   TYPE(FIELD_2D), POINTER :: F_VOLE=>NULL()
(  222)   TYPE(FIELD_2D), POINTER :: F_DMSO=>NULL()
(  223)   TYPE(FIELD_2D), POINTER :: F_SOACO=>NULL()
(  224)   TYPE(FIELD_2D), POINTER :: F_URBF=>NULL()
(  225)   TYPE(FIELD_2D), POINTER :: F_VOLCALTI=>NULL()
(  226)   TYPE(FIELD_2D), POINTER :: F_FCA1=>NULL()
(  227)   TYPE(FIELD_2D), POINTER :: F_FCA2=>NULL()
(  228)   TYPE(FIELD_2D), POINTER :: F_AERDEP=>NULL()
(  229)   TYPE(FIELD_2D), POINTER :: F_AERLTS=>NULL()
(  230)   TYPE(FIELD_2D), POINTER :: F_AERSCC=>NULL()
(  231)   TYPE(FIELD_2D), POINTER :: F_DSF=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 48

(  232)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_CHEMFLX
(  233)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_CHEMFLXO
(  234)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_CHEMDV
(  235)   TYPE(FIELD_2D), POINTER :: F_NUDM=>NULL()
(  236)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  237) # 238 "surface_views_diagnostic_module.F90"
(  238) CONTAINS
(  239)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VARSF_INIT
(  240)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VARSF_UPDATE_VIEW
(  241) END TYPE SURFACE_VIEW_GROUP_VARSF
(  242) # 243 "surface_views_diagnostic_module.F90"
(  243) TYPE SURFACE_VIEW_GROUP_VCLIH
(  244)   REAL(KIND=JPRB), POINTER :: PTCCH(:)   ! total convective cloudiness
(  245) !>REAL(KIND=JPRB)          :: PTCCH (YDCPG_OPTS%KLON)
(  246)   REAL(KIND=JPRB), POINTER :: PSCCH(:)   ! convective cloud summit
(  247) !>REAL(KIND=JPRB)          :: PSCCH (YDCPG_OPTS%KLON)
(  248)   REAL(KIND=JPRB), POINTER :: PBCCH(:)   ! convective cloud base
(  249) !>REAL(KIND=JPRB)          :: PBCCH (YDCPG_OPTS%KLON)
(  250)   REAL(KIND=JPRB), POINTER :: PPBLH(:)   ! PBL height
(  251) !>REAL(KIND=JPRB)          :: PPBLH (YDCPG_OPTS%KLON)
(  252)   REAL(KIND=JPRB), POINTER :: PSPSH(:)   ! variable for prognostic convection scheme (ALARO)
(  253) !>REAL(KIND=JPRB)          :: PSPSH (YDCPG_OPTS%KLON)
(  254)   REAL(KIND=JPRB), POINTER :: PQSH(:)   ! surface moisture historic variable (used by TOUCANS)
(  255) !>REAL(KIND=JPRB)          :: PQSH (YDCPG_OPTS%KLON)
(  256)   REAL(KIND=JPRB), POINTER :: PPCL(:)   ! 
(  257) !>REAL(KIND=JPRB)          :: PPCL (YDCPG_OPTS%KLON)
(  258)   REAL(KIND=JPRB), POINTER :: PPSL(:)   ! 
(  259) !>REAL(KIND=JPRB)          :: PPSL (YDCPG_OPTS%KLON)
(  260)   REAL(KIND=JPRB), POINTER :: PPCN(:)   ! 
(  261) !>REAL(KIND=JPRB)          :: PPCN (YDCPG_OPTS%KLON)
(  262)   REAL(KIND=JPRB), POINTER :: PPSN(:)   ! 
(  263) !>REAL(KIND=JPRB)          :: PPSN (YDCPG_OPTS%KLON)
(  264)   REAL(KIND=JPRB), POINTER :: PEVA(:)   ! 
(  265) !>REAL(KIND=JPRB)          :: PEVA (YDCPG_OPTS%KLON)
(  266)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  267) # 268 "surface_views_diagnostic_module.F90"
(  268)   TYPE(SURFACE_VARIABLE_GROUP_VCLIH), POINTER :: VARIABLE_GROUP
(  269)   TYPE(FIELD_2D), POINTER :: F_TCCH=>NULL()
(  270)   TYPE(FIELD_2D), POINTER :: F_SCCH=>NULL()
(  271)   TYPE(FIELD_2D), POINTER :: F_BCCH=>NULL()
(  272)   TYPE(FIELD_2D), POINTER :: F_PBLH=>NULL()
(  273)   TYPE(FIELD_2D), POINTER :: F_SPSH=>NULL()
(  274)   TYPE(FIELD_2D), POINTER :: F_QSH=>NULL()
(  275)   TYPE(FIELD_2D), POINTER :: F_PCL=>NULL()
(  276)   TYPE(FIELD_2D), POINTER :: F_PSL=>NULL()
(  277)   TYPE(FIELD_2D), POINTER :: F_PCN=>NULL()
(  278)   TYPE(FIELD_2D), POINTER :: F_PSN=>NULL()
(  279)   TYPE(FIELD_2D), POINTER :: F_EVA=>NULL()
(  280)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  281) # 282 "surface_views_diagnostic_module.F90"
(  282) CONTAINS
(  283)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIH_INIT
(  284)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIH_UPDATE_VIEW
(  285) END TYPE SURFACE_VIEW_GROUP_VCLIH
(  286) # 287 "surface_views_diagnostic_module.F90"
(  287) TYPE SURFACE_VIEW_GROUP_VCLIK
(  288)   REAL(KIND=JPRB), POINTER :: PUDGRO(:)   ! ud top position (accsu)
(  289) !>REAL(KIND=JPRB)          :: PUDGRO (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 49

(  290)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  291) # 292 "surface_views_diagnostic_module.F90"
(  292)   TYPE(SURFACE_VARIABLE_GROUP_VCLIK), POINTER :: VARIABLE_GROUP
(  293)   TYPE(FIELD_2D), POINTER :: F_UDGRO=>NULL()
(  294)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  295) # 296 "surface_views_diagnostic_module.F90"
(  296) CONTAINS
(  297)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIK_INIT
(  298)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIK_UPDATE_VIEW
(  299) END TYPE SURFACE_VIEW_GROUP_VCLIK
(  300) # 301 "surface_views_diagnostic_module.F90"
(  301) TYPE SURFACE_VIEW_GROUP_VCLIP
(  302)   REAL(KIND=JPRB), POINTER :: PTPC(:)   ! climatological deep layer temperature
(  303) !>REAL(KIND=JPRB)          :: PTPC (YDCPG_OPTS%KLON)
(  304)   REAL(KIND=JPRB), POINTER :: PWPC(:)   ! climatological deep layer moisture
(  305) !>REAL(KIND=JPRB)          :: PWPC (YDCPG_OPTS%KLON)
(  306)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  307) # 308 "surface_views_diagnostic_module.F90"
(  308)   TYPE(SURFACE_VARIABLE_GROUP_VCLIP), POINTER :: VARIABLE_GROUP
(  309)   TYPE(FIELD_2D), POINTER :: F_TPC=>NULL()
(  310)   TYPE(FIELD_2D), POINTER :: F_WPC=>NULL()
(  311)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  312) # 313 "surface_views_diagnostic_module.F90"
(  313) CONTAINS
(  314)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIP_INIT
(  315)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIP_UPDATE_VIEW
(  316) END TYPE SURFACE_VIEW_GROUP_VCLIP
(  317) # 318 "surface_views_diagnostic_module.F90"
(  318) TYPE SURFACE_VIEW_GROUP_VCLIV
(  319)   REAL(KIND=JPRB), POINTER :: PARG(:)   ! silt percentage within soil
(  320) !>REAL(KIND=JPRB)          :: PARG (YDCPG_OPTS%KLON)
(  321)   REAL(KIND=JPRB), POINTER :: PSAB(:)   ! percentage of sand within the soil
(  322) !>REAL(KIND=JPRB)          :: PSAB (YDCPG_OPTS%KLON)
(  323)   REAL(KIND=JPRB), POINTER :: PD2(:)   ! soil depth
(  324) !>REAL(KIND=JPRB)          :: PD2 (YDCPG_OPTS%KLON)
(  325)   REAL(KIND=JPRB), POINTER :: PIVEG(:)   ! type of vegetation
(  326) !>REAL(KIND=JPRB)          :: PIVEG (YDCPG_OPTS%KLON)
(  327)   REAL(KIND=JPRB), POINTER :: PRSMIN(:)   ! stomatal minimum resistance
(  328) !>REAL(KIND=JPRB)          :: PRSMIN (YDCPG_OPTS%KLON)
(  329)   REAL(KIND=JPRB), POINTER :: PLAI(:)   ! leaf area index
(  330) !>REAL(KIND=JPRB)          :: PLAI (YDCPG_OPTS%KLON)
(  331)   REAL(KIND=JPRB), POINTER :: PHV(:)   ! resistance to evapotranspiration
(  332) !>REAL(KIND=JPRB)          :: PHV (YDCPG_OPTS%KLON)
(  333)   REAL(KIND=JPRB), POINTER :: PZ0H(:)   ! gravity * roughness length for heat
(  334) !>REAL(KIND=JPRB)          :: PZ0H (YDCPG_OPTS%KLON)
(  335)   REAL(KIND=JPRB), POINTER :: PALS(:)   ! albedo of bare ground
(  336) !>REAL(KIND=JPRB)          :: PALS (YDCPG_OPTS%KLON)
(  337)   REAL(KIND=JPRB), POINTER :: PALV(:)   ! albedo of vegetation
(  338) !>REAL(KIND=JPRB)          :: PALV (YDCPG_OPTS%KLON)
(  339)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  340) # 341 "surface_views_diagnostic_module.F90"
(  341)   TYPE(SURFACE_VARIABLE_GROUP_VCLIV), POINTER :: VARIABLE_GROUP
(  342)   TYPE(FIELD_2D), POINTER :: F_ARG=>NULL()
(  343)   TYPE(FIELD_2D), POINTER :: F_SAB=>NULL()
(  344)   TYPE(FIELD_2D), POINTER :: F_D2=>NULL()
(  345)   TYPE(FIELD_2D), POINTER :: F_IVEG=>NULL()
(  346)   TYPE(FIELD_2D), POINTER :: F_RSMIN=>NULL()
(  347)   TYPE(FIELD_2D), POINTER :: F_LAI=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 50

(  348)   TYPE(FIELD_2D), POINTER :: F_HV=>NULL()
(  349)   TYPE(FIELD_2D), POINTER :: F_Z0H=>NULL()
(  350)   TYPE(FIELD_2D), POINTER :: F_ALS=>NULL()
(  351)   TYPE(FIELD_2D), POINTER :: F_ALV=>NULL()
(  352)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  353) # 354 "surface_views_diagnostic_module.F90"
(  354) CONTAINS
(  355)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIV_INIT
(  356)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIV_UPDATE_VIEW
(  357) END TYPE SURFACE_VIEW_GROUP_VCLIV
(  358) # 359 "surface_views_diagnostic_module.F90"
(  359) TYPE SURFACE_VIEW_GROUP_VCLIA
(  360)   REAL(KIND=JPRB), POINTER :: PSEA(:)   ! aerosol sea
(  361) !>REAL(KIND=JPRB)          :: PSEA (YDCPG_OPTS%KLON)
(  362)   REAL(KIND=JPRB), POINTER :: PLAN(:)   ! aerosol land
(  363) !>REAL(KIND=JPRB)          :: PLAN (YDCPG_OPTS%KLON)
(  364)   REAL(KIND=JPRB), POINTER :: PSOO(:)   ! aerosol soot
(  365) !>REAL(KIND=JPRB)          :: PSOO (YDCPG_OPTS%KLON)
(  366)   REAL(KIND=JPRB), POINTER :: PDES(:)   ! aerosol desert
(  367) !>REAL(KIND=JPRB)          :: PDES (YDCPG_OPTS%KLON)
(  368)   REAL(KIND=JPRB), POINTER :: PSUL(:)   ! aerosol sulfate
(  369) !>REAL(KIND=JPRB)          :: PSUL (YDCPG_OPTS%KLON)
(  370)   REAL(KIND=JPRB), POINTER :: PVOL(:)   ! aerosol volcano
(  371) !>REAL(KIND=JPRB)          :: PVOL (YDCPG_OPTS%KLON)
(  372)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  373) # 374 "surface_views_diagnostic_module.F90"
(  374)   TYPE(SURFACE_VARIABLE_GROUP_VCLIA), POINTER :: VARIABLE_GROUP
(  375)   TYPE(FIELD_2D), POINTER :: F_SEA=>NULL()
(  376)   TYPE(FIELD_2D), POINTER :: F_LAN=>NULL()
(  377)   TYPE(FIELD_2D), POINTER :: F_SOO=>NULL()
(  378)   TYPE(FIELD_2D), POINTER :: F_DES=>NULL()
(  379)   TYPE(FIELD_2D), POINTER :: F_SUL=>NULL()
(  380)   TYPE(FIELD_2D), POINTER :: F_VOL=>NULL()
(  381)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  382) # 383 "surface_views_diagnostic_module.F90"
(  383) CONTAINS
(  384)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIA_INIT
(  385)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIA_UPDATE_VIEW
(  386) END TYPE SURFACE_VIEW_GROUP_VCLIA
(  387) # 388 "surface_views_diagnostic_module.F90"
(  388) TYPE SURFACE_VIEW_GROUP_VCLIN
(  389)   REAL(KIND=JPRB), POINTER :: PTOP(:)   ! index of convective cloud top
(  390) !>REAL(KIND=JPRB)          :: PTOP (YDCPG_OPTS%KLON)
(  391)   REAL(KIND=JPRB), POINTER :: PBAS(:)   ! index of convective cloud base
(  392) !>REAL(KIND=JPRB)          :: PBAS (YDCPG_OPTS%KLON)
(  393)   REAL(KIND=JPRB), POINTER :: PACPR(:)   ! averaged convective precipitaion rate
(  394) !>REAL(KIND=JPRB)          :: PACPR (YDCPG_OPTS%KLON)
(  395)   REAL(KIND=JPRB), POINTER :: PACCPR(:)   ! accumulated total precipitaion for assimilation
(  396) !>REAL(KIND=JPRB)          :: PACCPR (YDCPG_OPTS%KLON)
(  397)   REAL(KIND=JPRB), POINTER :: PACCPR5(:)   ! accumulated total precipitaion for assimilation (trajectory)
(  398) !>REAL(KIND=JPRB)          :: PACCPR5 (YDCPG_OPTS%KLON)
(  399)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  400) # 401 "surface_views_diagnostic_module.F90"
(  401)   TYPE(SURFACE_VARIABLE_GROUP_VCLIN), POINTER :: VARIABLE_GROUP
(  402)   TYPE(FIELD_2D), POINTER :: F_TOP=>NULL()
(  403)   TYPE(FIELD_2D), POINTER :: F_BAS=>NULL()
(  404)   TYPE(FIELD_2D), POINTER :: F_ACPR=>NULL()
(  405)   TYPE(FIELD_2D), POINTER :: F_ACCPR=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 51

(  406)   TYPE(FIELD_2D), POINTER :: F_ACCPR5=>NULL()
(  407)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  408) # 409 "surface_views_diagnostic_module.F90"
(  409) CONTAINS
(  410)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VCLIN_INIT
(  411)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VCLIN_UPDATE_VIEW
(  412) END TYPE SURFACE_VIEW_GROUP_VCLIN
(  413) # 414 "surface_views_diagnostic_module.F90"
(  414) TYPE SURFACE_VIEW_GROUP_VDIAGO2
(  415)   REAL(KIND=JPRB), POINTER :: POCDEP(:)   ! bottom layer depth
(  416) !>REAL(KIND=JPRB)          :: POCDEP (YDCPG_OPTS%KLON)
(  417)   REAL(KIND=JPRB), POINTER :: PUSTRC(:)   ! taux clim.
(  418) !>REAL(KIND=JPRB)          :: PUSTRC (YDCPG_OPTS%KLON)
(  419)   REAL(KIND=JPRB), POINTER :: PVSTRC(:)   ! tauy clim.
(  420) !>REAL(KIND=JPRB)          :: PVSTRC (YDCPG_OPTS%KLON)
(  421)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  422) # 423 "surface_views_diagnostic_module.F90"
(  423)   TYPE(SURFACE_VARIABLE_GROUP_VDIAGO2), POINTER :: VARIABLE_GROUP
(  424)   TYPE(FIELD_2D), POINTER :: F_OCDEP=>NULL()
(  425)   TYPE(FIELD_2D), POINTER :: F_USTRC=>NULL()
(  426)   TYPE(FIELD_2D), POINTER :: F_VSTRC=>NULL()
(  427)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  428) # 429 "surface_views_diagnostic_module.F90"
(  429) CONTAINS
(  430)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VDIAGO2_INIT
(  431)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VDIAGO2_UPDATE_VIEW
(  432) END TYPE SURFACE_VIEW_GROUP_VDIAGO2
(  433) # 434 "surface_views_diagnostic_module.F90"
(  434) TYPE SURFACE_VIEW_GROUP_VDIAGO3
(  435)   REAL(KIND=JPRB), POINTER :: PDIFM(:,:)   ! viscosity
(  436) !>REAL(KIND=JPRB)          :: PDIFM (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  437)   REAL(KIND=JPRB), POINTER :: PDIFT(:,:)   ! diff. coef. of temp
(  438) !>REAL(KIND=JPRB)          :: PDIFT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  439)   REAL(KIND=JPRB), POINTER :: PDIFS(:,:)   ! diff. coef. of salinity
(  440) !>REAL(KIND=JPRB)          :: PDIFS (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  441)   REAL(KIND=JPRB), POINTER :: PADVT(:,:)   ! correction term for temp.
(  442) !>REAL(KIND=JPRB)          :: PADVT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  443)   REAL(KIND=JPRB), POINTER :: PADVS(:,:)   ! correction term for sal.
(  444) !>REAL(KIND=JPRB)          :: PADVS (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  445)   REAL(KIND=JPRB), POINTER :: PTRI0(:,:)   ! coef. for solving matrix.
(  446) !>REAL(KIND=JPRB)          :: PTRI0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  447)   REAL(KIND=JPRB), POINTER :: PTRI1(:,:)   ! coef. for solving matrix.
(  448) !>REAL(KIND=JPRB)          :: PTRI1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  449)   REAL(KIND=JPRB), POINTER :: PSWDK(:,:)   ! radiation term
(  450) !>REAL(KIND=JPRB)          :: PSWDK (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  451)   REAL(KIND=JPRB), POINTER :: PZO(:,:)   ! depth of layer
(  452) !>REAL(KIND=JPRB)          :: PZO (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  453)   REAL(KIND=JPRB), POINTER :: PHO(:,:)   ! depth of interface layer
(  454) !>REAL(KIND=JPRB)          :: PHO (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  455)   REAL(KIND=JPRB), POINTER :: PDO(:,:)   ! layer thickness
(  456) !>REAL(KIND=JPRB)          :: PDO (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  457)   REAL(KIND=JPRB), POINTER :: PHO_INV(:,:)   ! 1 / YHO
(  458) !>REAL(KIND=JPRB)          :: PHO_INV (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  459)   REAL(KIND=JPRB), POINTER :: PUOC(:,:)   ! U velocity clim.
(  460) !>REAL(KIND=JPRB)          :: PUOC (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  461)   REAL(KIND=JPRB), POINTER :: PVOC(:,:)   ! V velocity clim.
(  462) !>REAL(KIND=JPRB)          :: PVOC (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_V3D%NLEVS)
(  463)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 52

(  464) # 465 "surface_views_diagnostic_module.F90"
(  465)   TYPE(SURFACE_VARIABLE_GROUP_VDIAGO3), POINTER :: VARIABLE_GROUP
(  466)   TYPE(FIELD_3D), POINTER :: F_DIFM=>NULL()
(  467)   TYPE(FIELD_3D), POINTER :: F_DIFT=>NULL()
(  468)   TYPE(FIELD_3D), POINTER :: F_DIFS=>NULL()
(  469)   TYPE(FIELD_3D), POINTER :: F_ADVT=>NULL()
(  470)   TYPE(FIELD_3D), POINTER :: F_ADVS=>NULL()
(  471)   TYPE(FIELD_3D), POINTER :: F_TRI0=>NULL()
(  472)   TYPE(FIELD_3D), POINTER :: F_TRI1=>NULL()
(  473)   TYPE(FIELD_3D), POINTER :: F_SWDK=>NULL()
(  474)   TYPE(FIELD_3D), POINTER :: F_ZO=>NULL()
(  475)   TYPE(FIELD_3D), POINTER :: F_HO=>NULL()
(  476)   TYPE(FIELD_3D), POINTER :: F_DO=>NULL()
(  477)   TYPE(FIELD_3D), POINTER :: F_HO_INV=>NULL()
(  478)   TYPE(FIELD_3D), POINTER :: F_UOC=>NULL()
(  479)   TYPE(FIELD_3D), POINTER :: F_VOC=>NULL()
(  480)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  481) # 482 "surface_views_diagnostic_module.F90"
(  482) CONTAINS
(  483)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VDIAGO3_INIT
(  484)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VDIAGO3_UPDATE_VIEW
(  485) END TYPE SURFACE_VIEW_GROUP_VDIAGO3
(  486) # 487 "surface_views_diagnostic_module.F90"
(  487) TYPE SURFACE_VIEW_GROUP_VDIAG
(  488)   REAL(KIND=JPRB), POINTER :: PLSP(:)   ! Large scale precipitation
(  489) !>REAL(KIND=JPRB)          :: PLSP (YDCPG_OPTS%KLON)
(  490)   REAL(KIND=JPRB), POINTER :: PCP(:)   ! Convective precipitation
(  491) !>REAL(KIND=JPRB)          :: PCP (YDCPG_OPTS%KLON)
(  492)   REAL(KIND=JPRB), POINTER :: PSF(:)   ! Snowfall
(  493) !>REAL(KIND=JPRB)          :: PSF (YDCPG_OPTS%KLON)
(  494)   REAL(KIND=JPRB), POINTER :: PFZRA(:)   ! Freezing rain
(  495) !>REAL(KIND=JPRB)          :: PFZRA (YDCPG_OPTS%KLON)
(  496)   REAL(KIND=JPRB), POINTER :: PBLD(:)   ! Boundary layer dissipation
(  497) !>REAL(KIND=JPRB)          :: PBLD (YDCPG_OPTS%KLON)
(  498)   REAL(KIND=JPRB), POINTER :: PSSHF(:)   ! Surface sensible heat flux
(  499) !>REAL(KIND=JPRB)          :: PSSHF (YDCPG_OPTS%KLON)
(  500)   REAL(KIND=JPRB), POINTER :: PSLHF(:)   ! Surface latent heat flux
(  501) !>REAL(KIND=JPRB)          :: PSLHF (YDCPG_OPTS%KLON)
(  502)   REAL(KIND=JPRB), POINTER :: PNEE(:)   ! Surface net ecosystem exchange of CO2
(  503) !>REAL(KIND=JPRB)          :: PNEE (YDCPG_OPTS%KLON)
(  504)   REAL(KIND=JPRB), POINTER :: PGPP(:)   ! Surface gross primary production of CO2
(  505) !>REAL(KIND=JPRB)          :: PGPP (YDCPG_OPTS%KLON)
(  506)   REAL(KIND=JPRB), POINTER :: PREC(:)   ! Surface ecosystem respiration of CO2
(  507) !>REAL(KIND=JPRB)          :: PREC (YDCPG_OPTS%KLON)
(  508)   REAL(KIND=JPRB), POINTER :: PMSL(:)   ! Mean sea level pressure
(  509) !>REAL(KIND=JPRB)          :: PMSL (YDCPG_OPTS%KLON)
(  510)   REAL(KIND=JPRB), POINTER :: PSP(:)   ! Surface pressure
(  511) !>REAL(KIND=JPRB)          :: PSP (YDCPG_OPTS%KLON)
(  512)   REAL(KIND=JPRB), POINTER :: PTCC(:)   ! Total cloud cover
(  513) !>REAL(KIND=JPRB)          :: PTCC (YDCPG_OPTS%KLON)
(  514)   REAL(KIND=JPRB), POINTER :: P10U(:)   ! U-wind at 10 m
(  515) !>REAL(KIND=JPRB)          :: P10U (YDCPG_OPTS%KLON)
(  516)   REAL(KIND=JPRB), POINTER :: P10V(:)   ! V-wind at 10 m
(  517) !>REAL(KIND=JPRB)          :: P10V (YDCPG_OPTS%KLON)
(  518)   REAL(KIND=JPRB), POINTER :: P2T(:)   ! Temperature at 2 m
(  519) !>REAL(KIND=JPRB)          :: P2T (YDCPG_OPTS%KLON)
(  520)   REAL(KIND=JPRB), POINTER :: P2D(:)   ! Dewpoint temperature at 2 m
(  521) !>REAL(KIND=JPRB)          :: P2D (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 53

(  522)   REAL(KIND=JPRB), POINTER :: P2Q(:)   ! Specific humidity at 2 m
(  523) !>REAL(KIND=JPRB)          :: P2Q (YDCPG_OPTS%KLON)
(  524)   REAL(KIND=JPRB), POINTER :: PSSR(:)   ! Surface solar radiation
(  525) !>REAL(KIND=JPRB)          :: PSSR (YDCPG_OPTS%KLON)
(  526)   REAL(KIND=JPRB), POINTER :: PSTR(:)   ! Surface thermal radiation
(  527) !>REAL(KIND=JPRB)          :: PSTR (YDCPG_OPTS%KLON)
(  528)   REAL(KIND=JPRB), POINTER :: PTSR(:)   ! Top solar radiation
(  529) !>REAL(KIND=JPRB)          :: PTSR (YDCPG_OPTS%KLON)
(  530)   REAL(KIND=JPRB), POINTER :: PTTR(:)   ! Top thermal radiation
(  531) !>REAL(KIND=JPRB)          :: PTTR (YDCPG_OPTS%KLON)
(  532)   REAL(KIND=JPRB), POINTER :: PEWSS(:)   ! Instantaneous surface U-wind stress
(  533) !>REAL(KIND=JPRB)          :: PEWSS (YDCPG_OPTS%KLON)
(  534)   REAL(KIND=JPRB), POINTER :: PNSSS(:)   ! Instantaneous surface V-wind stress
(  535) !>REAL(KIND=JPRB)          :: PNSSS (YDCPG_OPTS%KLON)
(  536)   REAL(KIND=JPRB), POINTER :: PE(:)   ! Water evaporation
(  537) !>REAL(KIND=JPRB)          :: PE (YDCPG_OPTS%KLON)
(  538)   REAL(KIND=JPRB), POINTER :: PPEV(:)   ! Potential evaporation
(  539) !>REAL(KIND=JPRB)          :: PPEV (YDCPG_OPTS%KLON)
(  540)   REAL(KIND=JPRB), POINTER :: PCCC(:)   ! Convective cloud cover
(  541) !>REAL(KIND=JPRB)          :: PCCC (YDCPG_OPTS%KLON)
(  542)   REAL(KIND=JPRB), POINTER :: PLCC(:)   ! Low cloud cover
(  543) !>REAL(KIND=JPRB)          :: PLCC (YDCPG_OPTS%KLON)
(  544)   REAL(KIND=JPRB), POINTER :: PMCC(:)   ! Medium cloud cover
(  545) !>REAL(KIND=JPRB)          :: PMCC (YDCPG_OPTS%KLON)
(  546)   REAL(KIND=JPRB), POINTER :: PHCC(:)   ! High cloud cover
(  547) !>REAL(KIND=JPRB)          :: PHCC (YDCPG_OPTS%KLON)
(  548)   REAL(KIND=JPRB), POINTER :: PLGWS(:)   ! Zonal gravity wave stress
(  549) !>REAL(KIND=JPRB)          :: PLGWS (YDCPG_OPTS%KLON)
(  550)   REAL(KIND=JPRB), POINTER :: PMGWS(:)   ! Meridian gravity wave stress
(  551) !>REAL(KIND=JPRB)          :: PMGWS (YDCPG_OPTS%KLON)
(  552)   REAL(KIND=JPRB), POINTER :: PGWD(:)   ! Gravity wave dissipation
(  553) !>REAL(KIND=JPRB)          :: PGWD (YDCPG_OPTS%KLON)
(  554)   REAL(KIND=JPRB), POINTER :: PMX2T(:)   ! Maximum temperature at 2 m
(  555) !>REAL(KIND=JPRB)          :: PMX2T (YDCPG_OPTS%KLON)
(  556)   REAL(KIND=JPRB), POINTER :: PMN2T(:)   ! Minimum temperature at 2 m
(  557) !>REAL(KIND=JPRB)          :: PMN2T (YDCPG_OPTS%KLON)
(  558)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMX2T6   ! Bins for maximum temperature at 2 m since last 6 hours
(  559)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMN2T6   ! Bins for minimum temperature at 2 m since last 6 hours
(  560)   REAL(KIND=JPRB), POINTER :: PRO(:)   ! Runoff (total)
(  561) !>REAL(KIND=JPRB)          :: PRO (YDCPG_OPTS%KLON)
(  562)   REAL(KIND=JPRB), POINTER :: PSRO(:)   ! Runoff surface
(  563) !>REAL(KIND=JPRB)          :: PSRO (YDCPG_OPTS%KLON)
(  564)   REAL(KIND=JPRB), POINTER :: PSSRO(:)   ! Runoff sub-surface
(  565) !>REAL(KIND=JPRB)          :: PSSRO (YDCPG_OPTS%KLON)
(  566)   REAL(KIND=JPRB), POINTER :: PALB(:)   ! (surface shortwave) albedo
(  567) !>REAL(KIND=JPRB)          :: PALB (YDCPG_OPTS%KLON)
(  568)   REAL(KIND=JPRB), POINTER :: PIEWSS(:)   ! Instantaneous surface zonal component of stress
(  569) !>REAL(KIND=JPRB)          :: PIEWSS (YDCPG_OPTS%KLON)
(  570)   REAL(KIND=JPRB), POINTER :: PINSSS(:)   ! Instantaneous surface meridian component of stress
(  571) !>REAL(KIND=JPRB)          :: PINSSS (YDCPG_OPTS%KLON)
(  572)   REAL(KIND=JPRB), POINTER :: PISSHF(:)   ! Instantaneous surface heat flux
(  573) !>REAL(KIND=JPRB)          :: PISSHF (YDCPG_OPTS%KLON)
(  574)   REAL(KIND=JPRB), POINTER :: PIE(:)   ! Instantaneous surface moisture flux
(  575) !>REAL(KIND=JPRB)          :: PIE (YDCPG_OPTS%KLON)
(  576)   REAL(KIND=JPRB), POINTER :: PINEE(:)   ! Instantaneous net ecosystem exchange of CO2
(  577) !>REAL(KIND=JPRB)          :: PINEE (YDCPG_OPTS%KLON)
(  578)   REAL(KIND=JPRB), POINTER :: PIGPP(:)   ! Instantaneous gross primary production of CO2
(  579) !>REAL(KIND=JPRB)          :: PIGPP (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 54

(  580)   REAL(KIND=JPRB), POINTER :: PIREC(:)   ! Instantaneous ecosystem respiration of CO2
(  581) !>REAL(KIND=JPRB)          :: PIREC (YDCPG_OPTS%KLON)
(  582)   REAL(KIND=JPRB), POINTER :: PCSF(:)   ! Convective snow fall
(  583) !>REAL(KIND=JPRB)          :: PCSF (YDCPG_OPTS%KLON)
(  584)   REAL(KIND=JPRB), POINTER :: PLSSF(:)   ! Large scale snowfall
(  585) !>REAL(KIND=JPRB)          :: PLSSF (YDCPG_OPTS%KLON)
(  586)   REAL(KIND=JPRB), POINTER :: PMXTPR(:)   ! Max precip rate since last post-processing
(  587) !>REAL(KIND=JPRB)          :: PMXTPR (YDCPG_OPTS%KLON)
(  588)   REAL(KIND=JPRB), POINTER :: PMNTPR(:)   ! Min precip rate since last post-processing
(  589) !>REAL(KIND=JPRB)          :: PMNTPR (YDCPG_OPTS%KLON)
(  590)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMXTPR6   ! Max precip rate in last 6 hours
(  591)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMNTPR6   ! Min precip rate in last 6 hours
(  592)   REAL(KIND=JPRB), POINTER :: PTPR(:)   ! Total precipitation rate
(  593) !>REAL(KIND=JPRB)          :: PTPR (YDCPG_OPTS%KLON)
(  594)   REAL(KIND=JPRB), POINTER :: PLSRR(:)   ! Large scale rain rate
(  595) !>REAL(KIND=JPRB)          :: PLSRR (YDCPG_OPTS%KLON)
(  596)   REAL(KIND=JPRB), POINTER :: PCRR(:)   ! Convective rain rate
(  597) !>REAL(KIND=JPRB)          :: PCRR (YDCPG_OPTS%KLON)
(  598)   REAL(KIND=JPRB), POINTER :: PLSSFR(:)   ! Large scale snowfall rate
(  599) !>REAL(KIND=JPRB)          :: PLSSFR (YDCPG_OPTS%KLON)
(  600)   REAL(KIND=JPRB), POINTER :: PCSFR(:)   ! Convective snowfall rate
(  601) !>REAL(KIND=JPRB)          :: PCSFR (YDCPG_OPTS%KLON)
(  602)   REAL(KIND=JPRB), POINTER :: PPTYPE(:)   ! Precipitation type
(  603) !>REAL(KIND=JPRB)          :: PPTYPE (YDCPG_OPTS%KLON)
(  604)   REAL(KIND=JPRB), POINTER :: PILSPF(:)   ! Large-scale precipitation fraction (inst.)
(  605) !>REAL(KIND=JPRB)          :: PILSPF (YDCPG_OPTS%KLON)
(  606)   REAL(KIND=JPRB), POINTER :: PZ0F(:)   ! Gravity * surface roughness length
(  607) !>REAL(KIND=JPRB)          :: PZ0F (YDCPG_OPTS%KLON)
(  608)   REAL(KIND=JPRB), POINTER :: PLZ0H(:)   ! Logarithm of z0 times heat flux
(  609) !>REAL(KIND=JPRB)          :: PLZ0H (YDCPG_OPTS%KLON)
(  610)   REAL(KIND=JPRB), POINTER :: PVIWVE(:)   ! Vertical integral of eastward water vapour flux
(  611) !>REAL(KIND=JPRB)          :: PVIWVE (YDCPG_OPTS%KLON)
(  612)   REAL(KIND=JPRB), POINTER :: PVIWVN(:)   ! Vertical integral of northward water vapour flux
(  613) !>REAL(KIND=JPRB)          :: PVIWVN (YDCPG_OPTS%KLON)
(  614)   REAL(KIND=JPRB), POINTER :: PTCW(:)   ! Total water content in a vertical column
(  615) !>REAL(KIND=JPRB)          :: PTCW (YDCPG_OPTS%KLON)
(  616)   REAL(KIND=JPRB), POINTER :: PTCWV(:)   ! Total water vapor content in a vertical column
(  617) !>REAL(KIND=JPRB)          :: PTCWV (YDCPG_OPTS%KLON)
(  618)   REAL(KIND=JPRB), POINTER :: PTCLW(:)   ! Total liquid water content in a vertical column
(  619) !>REAL(KIND=JPRB)          :: PTCLW (YDCPG_OPTS%KLON)
(  620)   REAL(KIND=JPRB), POINTER :: PTCIW(:)   ! Total ice water content in a vertical column
(  621) !>REAL(KIND=JPRB)          :: PTCIW (YDCPG_OPTS%KLON)
(  622)   REAL(KIND=JPRB), POINTER :: PTCRW(:)   ! Total rain water content in a vertical column
(  623) !>REAL(KIND=JPRB)          :: PTCRW (YDCPG_OPTS%KLON)
(  624)   REAL(KIND=JPRB), POINTER :: PTCSW(:)   ! Total snow water content in a vertical column
(  625) !>REAL(KIND=JPRB)          :: PTCSW (YDCPG_OPTS%KLON)
(  626)   REAL(KIND=JPRB), POINTER :: PTCSLW(:)   ! Total supercooled liquid water content in a vertical column
(  627) !>REAL(KIND=JPRB)          :: PTCSLW (YDCPG_OPTS%KLON)
(  628)   REAL(KIND=JPRB), POINTER :: PSSRD(:)   ! Downward surface solar radiation
(  629) !>REAL(KIND=JPRB)          :: PSSRD (YDCPG_OPTS%KLON)
(  630)   REAL(KIND=JPRB), POINTER :: PSTRD(:)   ! Downward surface thermic radiation
(  631) !>REAL(KIND=JPRB)          :: PSTRD (YDCPG_OPTS%KLON)
(  632)   REAL(KIND=JPRB), POINTER :: PSSRDC(:)   ! Clear-sky downward surface solar radiation
(  633) !>REAL(KIND=JPRB)          :: PSSRDC (YDCPG_OPTS%KLON)
(  634)   REAL(KIND=JPRB), POINTER :: PSTRDC(:)   ! Claer-sky downward surface thermal radiation
(  635) !>REAL(KIND=JPRB)          :: PSTRDC (YDCPG_OPTS%KLON)
(  636)   REAL(KIND=JPRB), POINTER :: PBLH(:)   ! Height of boundary layer
(  637) !>REAL(KIND=JPRB)          :: PBLH (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 55

(  638)   REAL(KIND=JPRB), POINTER :: PSUND(:)   ! Sunshine duration
(  639) !>REAL(KIND=JPRB)          :: PSUND (YDCPG_OPTS%KLON)
(  640)   REAL(KIND=JPRB), POINTER :: PSPAR(:)   ! Surface downward PARadiation
(  641) !>REAL(KIND=JPRB)          :: PSPAR (YDCPG_OPTS%KLON)
(  642)   REAL(KIND=JPRB), POINTER :: PSUVB(:)   ! Surface downward UV-B radiation
(  643) !>REAL(KIND=JPRB)          :: PSUVB (YDCPG_OPTS%KLON)
(  644)   REAL(KIND=JPRB), POINTER :: PSFDIR(:)   ! Surface total sky direct downward SW radiation
(  645) !>REAL(KIND=JPRB)          :: PSFDIR (YDCPG_OPTS%KLON)
(  646)   REAL(KIND=JPRB), POINTER :: PSCDIR(:)   ! Surface clear-sky direct downward SW radiation
(  647) !>REAL(KIND=JPRB)          :: PSCDIR (YDCPG_OPTS%KLON)
(  648)   REAL(KIND=JPRB), POINTER :: PSDSRP(:)   ! Surface total-sky direct beam downward SW radiation
(  649) !>REAL(KIND=JPRB)          :: PSDSRP (YDCPG_OPTS%KLON)
(  650)   REAL(KIND=JPRB), POINTER :: PCAPE(:)   ! Conv.avail.potential energy (CAPE)
(  651) !>REAL(KIND=JPRB)          :: PCAPE (YDCPG_OPTS%KLON)
(  652)   REAL(KIND=JPRB), POINTER :: PCAPES(:)   ! CAPE-Shear
(  653) !>REAL(KIND=JPRB)          :: PCAPES (YDCPG_OPTS%KLON)
(  654)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMXCAP6   ! Bins for maximum CAPE in last 6 hours
(  655)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PMXCAPS6   ! Bins for maximum CAPE-Shear in last 6 hours
(  656)   REAL(KIND=JPRB), POINTER :: PTSRC(:)   ! Top solar radiation clear sky
(  657) !>REAL(KIND=JPRB)          :: PTSRC (YDCPG_OPTS%KLON)
(  658)   REAL(KIND=JPRB), POINTER :: PTTRC(:)   ! Top thermal radiation clear sky
(  659) !>REAL(KIND=JPRB)          :: PTTRC (YDCPG_OPTS%KLON)
(  660)   REAL(KIND=JPRB), POINTER :: PSSRC(:)   ! Surface solar radiation clear sky
(  661) !>REAL(KIND=JPRB)          :: PSSRC (YDCPG_OPTS%KLON)
(  662)   REAL(KIND=JPRB), POINTER :: PSTRC(:)   ! Surface thermal radiation clear sky
(  663) !>REAL(KIND=JPRB)          :: PSTRC (YDCPG_OPTS%KLON)
(  664)   REAL(KIND=JPRB), POINTER :: PES(:)   ! Evaporation of snow
(  665) !>REAL(KIND=JPRB)          :: PES (YDCPG_OPTS%KLON)
(  666)   REAL(KIND=JPRB), POINTER :: PSMLT(:)   ! Snow melt
(  667) !>REAL(KIND=JPRB)          :: PSMLT (YDCPG_OPTS%KLON)
(  668)   REAL(KIND=JPRB), POINTER :: P10FG(:)   ! Wind gust at 10 m (max since previous pp)
(  669) !>REAL(KIND=JPRB)          :: P10FG (YDCPG_OPTS%KLON)
(  670)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: P10FG6   ! Bins for wind gust at 10 m (max since last 6 hours)
(  671)   REAL(KIND=JPRB), POINTER :: P10FGCV(:)   ! convective wind gust at 10m for current time level (m/s)
(  672) !>REAL(KIND=JPRB)          :: P10FGCV (YDCPG_OPTS%KLON)
(  673)   REAL(KIND=JPRB), POINTER :: PI10FG(:)   ! Wind gust at 10 m ("instantaneous")
(  674) !>REAL(KIND=JPRB)          :: PI10FG (YDCPG_OPTS%KLON)
(  675)   REAL(KIND=JPRB), POINTER :: PLSPF(:)   ! Large scale precipitation fraction
(  676) !>REAL(KIND=JPRB)          :: PLSPF (YDCPG_OPTS%KLON)
(  677)   REAL(KIND=JPRB), POINTER :: PTCO3(:)   ! Total ozone content in a vertical column
(  678) !>REAL(KIND=JPRB)          :: PTCO3 (YDCPG_OPTS%KLON)
(  679)   REAL(KIND=JPRB), POINTER :: PVIMD(:)   ! Vertically integrated mass divergence
(  680) !>REAL(KIND=JPRB)          :: PVIMD (YDCPG_OPTS%KLON)
(  681)   REAL(KIND=JPRB), POINTER :: PSPARC(:)   ! Surface clear-sky parallel radiation
(  682) !>REAL(KIND=JPRB)          :: PSPARC (YDCPG_OPTS%KLON)
(  683)   REAL(KIND=JPRB), POINTER :: PSTINC(:)   ! Top of atmosphere incident solar radiation
(  684) !>REAL(KIND=JPRB)          :: PSTINC (YDCPG_OPTS%KLON)
(  685)   REAL(KIND=JPRB), POINTER :: PCBASE(:)   ! Cloud base level
(  686) !>REAL(KIND=JPRB)          :: PCBASE (YDCPG_OPTS%KLON)
(  687)   REAL(KIND=JPRB), POINTER :: P0DEGL(:)   ! Zero deg. level
(  688) !>REAL(KIND=JPRB)          :: P0DEGL (YDCPG_OPTS%KLON)
(  689)   REAL(KIND=JPRB), POINTER :: PVISIH(:)   ! Horizontal visibility
(  690) !>REAL(KIND=JPRB)          :: PVISIH (YDCPG_OPTS%KLON)
(  691)   REAL(KIND=JPRB), POINTER :: PCIN(:)   ! CIN
(  692) !>REAL(KIND=JPRB)          :: PCIN (YDCPG_OPTS%KLON)
(  693)   REAL(KIND=JPRB), POINTER :: PKINDEX(:)   ! Convective K-Index
(  694) !>REAL(KIND=JPRB)          :: PKINDEX (YDCPG_OPTS%KLON)
(  695)   REAL(KIND=JPRB), POINTER :: PTTINDEX(:)   ! Convective TT-Index






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 56

(  696) !>REAL(KIND=JPRB)          :: PTTINDEX (YDCPG_OPTS%KLON)
(  697)   REAL(KIND=JPRB), POINTER :: PCBASEA(:)   ! Cloud base aviation
(  698) !>REAL(KIND=JPRB)          :: PCBASEA (YDCPG_OPTS%KLON)
(  699)   REAL(KIND=JPRB), POINTER :: PCTOPC(:)   ! Cloud top convective
(  700) !>REAL(KIND=JPRB)          :: PCTOPC (YDCPG_OPTS%KLON)
(  701)   REAL(KIND=JPRB), POINTER :: PZTWETB0(:)   ! Height of 0 deg wet bulb temperature
(  702) !>REAL(KIND=JPRB)          :: PZTWETB0 (YDCPG_OPTS%KLON)
(  703)   REAL(KIND=JPRB), POINTER :: PZTWETB1(:)   ! Height of 1 deg wet bulb temperature
(  704) !>REAL(KIND=JPRB)          :: PZTWETB1 (YDCPG_OPTS%KLON)
(  705)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PTCGHG   ! Total column greenhouse gases
(  706)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PTCCHEM   ! Total column chemistry
(  707)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:,:) :: PAERODIAG   ! Per-aerosol-type diagnostics
(  708)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:,:) :: PAERO_WVL_DIAG   ! Per-wavelength aerosol optical diagnostics
(  709)   REAL(KIND=JPRB), POINTER :: P100U(:)   ! 100m zonal wind
(  710) !>REAL(KIND=JPRB)          :: P100U (YDCPG_OPTS%KLON)
(  711)   REAL(KIND=JPRB), POINTER :: P100V(:)   ! 100m meridional wind
(  712) !>REAL(KIND=JPRB)          :: P100V (YDCPG_OPTS%KLON)
(  713)   REAL(KIND=JPRB), POINTER :: P200U(:)   ! 200m zonal wind
(  714) !>REAL(KIND=JPRB)          :: P200U (YDCPG_OPTS%KLON)
(  715)   REAL(KIND=JPRB), POINTER :: P200V(:)   ! 200m meridional wind
(  716) !>REAL(KIND=JPRB)          :: P200V (YDCPG_OPTS%KLON)
(  717)   REAL(KIND=JPRB), POINTER :: PZUST(:)   ! Friction velocity
(  718) !>REAL(KIND=JPRB)          :: PZUST (YDCPG_OPTS%KLON)
(  719)   REAL(KIND=JPRB), POINTER :: P10NU(:)   ! 10m zonal neutral wind
(  720) !>REAL(KIND=JPRB)          :: P10NU (YDCPG_OPTS%KLON)
(  721)   REAL(KIND=JPRB), POINTER :: P10NV(:)   ! 10m meridional neutral wind
(  722) !>REAL(KIND=JPRB)          :: P10NV (YDCPG_OPTS%KLON)
(  723)   REAL(KIND=JPRB), POINTER :: PDNDZN(:)   ! Minimum vertical refractivity gradient
(  724) !>REAL(KIND=JPRB)          :: PDNDZN (YDCPG_OPTS%KLON)
(  725)   REAL(KIND=JPRB), POINTER :: PDNDZA(:)   ! Mean vertical refractivity gradient
(  726) !>REAL(KIND=JPRB)          :: PDNDZA (YDCPG_OPTS%KLON)
(  727)   REAL(KIND=JPRB), POINTER :: PDCTB(:)   ! Duct base height
(  728) !>REAL(KIND=JPRB)          :: PDCTB (YDCPG_OPTS%KLON)
(  729)   REAL(KIND=JPRB), POINTER :: PTPLB(:)   ! Trapping layer base height
(  730) !>REAL(KIND=JPRB)          :: PTPLB (YDCPG_OPTS%KLON)
(  731)   REAL(KIND=JPRB), POINTER :: PTPLT(:)   ! Trapping layer top height
(  732) !>REAL(KIND=JPRB)          :: PTPLT (YDCPG_OPTS%KLON)
(  733)   REAL(KIND=JPRB), POINTER :: PODSS(:)   ! optical depth sea salt aerosols
(  734) !>REAL(KIND=JPRB)          :: PODSS (YDCPG_OPTS%KLON)
(  735)   REAL(KIND=JPRB), POINTER :: PODDU(:)   ! optical depth dust aerosols
(  736) !>REAL(KIND=JPRB)          :: PODDU (YDCPG_OPTS%KLON)
(  737)   REAL(KIND=JPRB), POINTER :: PODOM(:)   ! optical depth organic m. aerosols
(  738) !>REAL(KIND=JPRB)          :: PODOM (YDCPG_OPTS%KLON)
(  739)   REAL(KIND=JPRB), POINTER :: PODBC(:)   ! optical depth black C aerosols
(  740) !>REAL(KIND=JPRB)          :: PODBC (YDCPG_OPTS%KLON)
(  741)   REAL(KIND=JPRB), POINTER :: PODSU(:)   ! optical depth sulphate aerosols
(  742) !>REAL(KIND=JPRB)          :: PODSU (YDCPG_OPTS%KLON)
(  743)   REAL(KIND=JPRB), POINTER :: PODNI(:)   ! optical depth nitrate aerosols
(  744) !>REAL(KIND=JPRB)          :: PODNI (YDCPG_OPTS%KLON)
(  745)   REAL(KIND=JPRB), POINTER :: PODAM(:)   ! optical depth ammonium aerosols
(  746) !>REAL(KIND=JPRB)          :: PODAM (YDCPG_OPTS%KLON)
(  747)   REAL(KIND=JPRB), POINTER :: PODSOA(:)   ! optical depth secondary organic aerosols
(  748) !>REAL(KIND=JPRB)          :: PODSOA (YDCPG_OPTS%KLON)
(  749)   REAL(KIND=JPRB), POINTER :: PODVFA(:)   ! optical depth volcanic flying ash
(  750) !>REAL(KIND=JPRB)          :: PODVFA (YDCPG_OPTS%KLON)
(  751)   REAL(KIND=JPRB), POINTER :: PODVSU(:)   ! optical depth volcanic sulphate aerosols
(  752) !>REAL(KIND=JPRB)          :: PODVSU (YDCPG_OPTS%KLON)
(  753)   REAL(KIND=JPRB), POINTER :: PODTOACC(:)   ! optical depth total aerosol accumulated






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 57

(  754) !>REAL(KIND=JPRB)          :: PODTOACC (YDCPG_OPTS%KLON)
(  755)   REAL(KIND=JPRB), POINTER :: PAEPM1(:)   ! particulate matter le 1 um
(  756) !>REAL(KIND=JPRB)          :: PAEPM1 (YDCPG_OPTS%KLON)
(  757)   REAL(KIND=JPRB), POINTER :: PAEPM25(:)   ! particulate matter le 2.5um
(  758) !>REAL(KIND=JPRB)          :: PAEPM25 (YDCPG_OPTS%KLON)
(  759)   REAL(KIND=JPRB), POINTER :: PAEPM10(:)   ! particulate matter le 10 um
(  760) !>REAL(KIND=JPRB)          :: PAEPM10 (YDCPG_OPTS%KLON)
(  761)   REAL(KIND=JPRB), POINTER :: PUVBED(:)   ! UV biologically effective dose
(  762) !>REAL(KIND=JPRB)          :: PUVBED (YDCPG_OPTS%KLON)
(  763)   REAL(KIND=JPRB), POINTER :: PUVBEDCS(:)   ! UV biologically effective dose clear sky
(  764) !>REAL(KIND=JPRB)          :: PUVBEDCS (YDCPG_OPTS%KLON)
(  765)   REAL(KIND=JPRB), POINTER :: PLITOTI(:)   ! instantaneous total lightning flash density
(  766) !>REAL(KIND=JPRB)          :: PLITOTI (YDCPG_OPTS%KLON)
(  767)   REAL(KIND=JPRB), POINTER :: PLICGI(:)   ! instantaneous cloud-to-ground lightning flash density
(  768) !>REAL(KIND=JPRB)          :: PLICGI (YDCPG_OPTS%KLON)
(  769)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PLITOTA6   ! Bins for averaged total lightning over last 6 hours
(  770)   TYPE(FIELD_2D_VIEW), ALLOCATABLE, DIMENSION(:) :: PLICGA6   ! Bins for averaged cloud-to-ground lightning over last 6 hours
(  771)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  772) # 773 "surface_views_diagnostic_module.F90"
(  773)   TYPE(SURFACE_VARIABLE_GROUP_VDIAG), POINTER :: VARIABLE_GROUP
(  774)   TYPE(FIELD_2D), POINTER :: F_LSP=>NULL()
(  775)   TYPE(FIELD_2D), POINTER :: F_CP=>NULL()
(  776)   TYPE(FIELD_2D), POINTER :: F_SF=>NULL()
(  777)   TYPE(FIELD_2D), POINTER :: F_FZRA=>NULL()
(  778)   TYPE(FIELD_2D), POINTER :: F_BLD=>NULL()
(  779)   TYPE(FIELD_2D), POINTER :: F_SSHF=>NULL()
(  780)   TYPE(FIELD_2D), POINTER :: F_SLHF=>NULL()
(  781)   TYPE(FIELD_2D), POINTER :: F_NEE=>NULL()
(  782)   TYPE(FIELD_2D), POINTER :: F_GPP=>NULL()
(  783)   TYPE(FIELD_2D), POINTER :: F_REC=>NULL()
(  784)   TYPE(FIELD_2D), POINTER :: F_MSL=>NULL()
(  785)   TYPE(FIELD_2D), POINTER :: F_SP=>NULL()
(  786)   TYPE(FIELD_2D), POINTER :: F_TCC=>NULL()
(  787)   TYPE(FIELD_2D), POINTER :: F_10U=>NULL()
(  788)   TYPE(FIELD_2D), POINTER :: F_10V=>NULL()
(  789)   TYPE(FIELD_2D), POINTER :: F_2T=>NULL()
(  790)   TYPE(FIELD_2D), POINTER :: F_2D=>NULL()
(  791)   TYPE(FIELD_2D), POINTER :: F_2Q=>NULL()
(  792)   TYPE(FIELD_2D), POINTER :: F_SSR=>NULL()
(  793)   TYPE(FIELD_2D), POINTER :: F_STR=>NULL()
(  794)   TYPE(FIELD_2D), POINTER :: F_TSR=>NULL()
(  795)   TYPE(FIELD_2D), POINTER :: F_TTR=>NULL()
(  796)   TYPE(FIELD_2D), POINTER :: F_EWSS=>NULL()
(  797)   TYPE(FIELD_2D), POINTER :: F_NSSS=>NULL()
(  798)   TYPE(FIELD_2D), POINTER :: F_E=>NULL()
(  799)   TYPE(FIELD_2D), POINTER :: F_PEV=>NULL()
(  800)   TYPE(FIELD_2D), POINTER :: F_CCC=>NULL()
(  801)   TYPE(FIELD_2D), POINTER :: F_LCC=>NULL()
(  802)   TYPE(FIELD_2D), POINTER :: F_MCC=>NULL()
(  803)   TYPE(FIELD_2D), POINTER :: F_HCC=>NULL()
(  804)   TYPE(FIELD_2D), POINTER :: F_LGWS=>NULL()
(  805)   TYPE(FIELD_2D), POINTER :: F_MGWS=>NULL()
(  806)   TYPE(FIELD_2D), POINTER :: F_GWD=>NULL()
(  807)   TYPE(FIELD_2D), POINTER :: F_MX2T=>NULL()
(  808)   TYPE(FIELD_2D), POINTER :: F_MN2T=>NULL()
(  809)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MX2T6
(  810)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MN2T6
(  811)   TYPE(FIELD_2D), POINTER :: F_RO=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 58

(  812)   TYPE(FIELD_2D), POINTER :: F_SRO=>NULL()
(  813)   TYPE(FIELD_2D), POINTER :: F_SSRO=>NULL()
(  814)   TYPE(FIELD_2D), POINTER :: F_ALB=>NULL()
(  815)   TYPE(FIELD_2D), POINTER :: F_IEWSS=>NULL()
(  816)   TYPE(FIELD_2D), POINTER :: F_INSSS=>NULL()
(  817)   TYPE(FIELD_2D), POINTER :: F_ISSHF=>NULL()
(  818)   TYPE(FIELD_2D), POINTER :: F_IE=>NULL()
(  819)   TYPE(FIELD_2D), POINTER :: F_INEE=>NULL()
(  820)   TYPE(FIELD_2D), POINTER :: F_IGPP=>NULL()
(  821)   TYPE(FIELD_2D), POINTER :: F_IREC=>NULL()
(  822)   TYPE(FIELD_2D), POINTER :: F_CSF=>NULL()
(  823)   TYPE(FIELD_2D), POINTER :: F_LSSF=>NULL()
(  824)   TYPE(FIELD_2D), POINTER :: F_MXTPR=>NULL()
(  825)   TYPE(FIELD_2D), POINTER :: F_MNTPR=>NULL()
(  826)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MXTPR6
(  827)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MNTPR6
(  828)   TYPE(FIELD_2D), POINTER :: F_TPR=>NULL()
(  829)   TYPE(FIELD_2D), POINTER :: F_LSRR=>NULL()
(  830)   TYPE(FIELD_2D), POINTER :: F_CRR=>NULL()
(  831)   TYPE(FIELD_2D), POINTER :: F_LSSFR=>NULL()
(  832)   TYPE(FIELD_2D), POINTER :: F_CSFR=>NULL()
(  833)   TYPE(FIELD_2D), POINTER :: F_PTYPE=>NULL()
(  834)   TYPE(FIELD_2D), POINTER :: F_ILSPF=>NULL()
(  835)   TYPE(FIELD_2D), POINTER :: F_Z0F=>NULL()
(  836)   TYPE(FIELD_2D), POINTER :: F_LZ0H=>NULL()
(  837)   TYPE(FIELD_2D), POINTER :: F_VIWVE=>NULL()
(  838)   TYPE(FIELD_2D), POINTER :: F_VIWVN=>NULL()
(  839)   TYPE(FIELD_2D), POINTER :: F_TCW=>NULL()
(  840)   TYPE(FIELD_2D), POINTER :: F_TCWV=>NULL()
(  841)   TYPE(FIELD_2D), POINTER :: F_TCLW=>NULL()
(  842)   TYPE(FIELD_2D), POINTER :: F_TCIW=>NULL()
(  843)   TYPE(FIELD_2D), POINTER :: F_TCRW=>NULL()
(  844)   TYPE(FIELD_2D), POINTER :: F_TCSW=>NULL()
(  845)   TYPE(FIELD_2D), POINTER :: F_TCSLW=>NULL()
(  846)   TYPE(FIELD_2D), POINTER :: F_SSRD=>NULL()
(  847)   TYPE(FIELD_2D), POINTER :: F_STRD=>NULL()
(  848)   TYPE(FIELD_2D), POINTER :: F_SSRDC=>NULL()
(  849)   TYPE(FIELD_2D), POINTER :: F_STRDC=>NULL()
(  850)   TYPE(FIELD_2D), POINTER :: F_BLH=>NULL()
(  851)   TYPE(FIELD_2D), POINTER :: F_SUND=>NULL()
(  852)   TYPE(FIELD_2D), POINTER :: F_SPAR=>NULL()
(  853)   TYPE(FIELD_2D), POINTER :: F_SUVB=>NULL()
(  854)   TYPE(FIELD_2D), POINTER :: F_SFDIR=>NULL()
(  855)   TYPE(FIELD_2D), POINTER :: F_SCDIR=>NULL()
(  856)   TYPE(FIELD_2D), POINTER :: F_SDSRP=>NULL()
(  857)   TYPE(FIELD_2D), POINTER :: F_CAPE=>NULL()
(  858)   TYPE(FIELD_2D), POINTER :: F_CAPES=>NULL()
(  859)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MXCAP6
(  860)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_MXCAPS6
(  861)   TYPE(FIELD_2D), POINTER :: F_TSRC=>NULL()
(  862)   TYPE(FIELD_2D), POINTER :: F_TTRC=>NULL()
(  863)   TYPE(FIELD_2D), POINTER :: F_SSRC=>NULL()
(  864)   TYPE(FIELD_2D), POINTER :: F_STRC=>NULL()
(  865)   TYPE(FIELD_2D), POINTER :: F_ES=>NULL()
(  866)   TYPE(FIELD_2D), POINTER :: F_SMLT=>NULL()
(  867)   TYPE(FIELD_2D), POINTER :: F_10FG=>NULL()
(  868)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_10FG6
(  869)   TYPE(FIELD_2D), POINTER :: F_10FGCV=>NULL()






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 59

(  870)   TYPE(FIELD_2D), POINTER :: F_I10FG=>NULL()
(  871)   TYPE(FIELD_2D), POINTER :: F_LSPF=>NULL()
(  872)   TYPE(FIELD_2D), POINTER :: F_TCO3=>NULL()
(  873)   TYPE(FIELD_2D), POINTER :: F_VIMD=>NULL()
(  874)   TYPE(FIELD_2D), POINTER :: F_SPARC=>NULL()
(  875)   TYPE(FIELD_2D), POINTER :: F_STINC=>NULL()
(  876)   TYPE(FIELD_2D), POINTER :: F_CBASE=>NULL()
(  877)   TYPE(FIELD_2D), POINTER :: F_0DEGL=>NULL()
(  878)   TYPE(FIELD_2D), POINTER :: F_VISIH=>NULL()
(  879)   TYPE(FIELD_2D), POINTER :: F_CIN=>NULL()
(  880)   TYPE(FIELD_2D), POINTER :: F_KINDEX=>NULL()
(  881)   TYPE(FIELD_2D), POINTER :: F_TTINDEX=>NULL()
(  882)   TYPE(FIELD_2D), POINTER :: F_CBASEA=>NULL()
(  883)   TYPE(FIELD_2D), POINTER :: F_CTOPC=>NULL()
(  884)   TYPE(FIELD_2D), POINTER :: F_ZTWETB0=>NULL()
(  885)   TYPE(FIELD_2D), POINTER :: F_ZTWETB1=>NULL()
(  886)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_TCGHG
(  887)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_TCCHEM
(  888)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:,:) :: F_AERODIAG
(  889)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:,:) :: F_AERO_WVL_DIAG
(  890)   TYPE(FIELD_2D), POINTER :: F_100U=>NULL()
(  891)   TYPE(FIELD_2D), POINTER :: F_100V=>NULL()
(  892)   TYPE(FIELD_2D), POINTER :: F_200U=>NULL()
(  893)   TYPE(FIELD_2D), POINTER :: F_200V=>NULL()
(  894)   TYPE(FIELD_2D), POINTER :: F_ZUST=>NULL()
(  895)   TYPE(FIELD_2D), POINTER :: F_10NU=>NULL()
(  896)   TYPE(FIELD_2D), POINTER :: F_10NV=>NULL()
(  897)   TYPE(FIELD_2D), POINTER :: F_DNDZN=>NULL()
(  898)   TYPE(FIELD_2D), POINTER :: F_DNDZA=>NULL()
(  899)   TYPE(FIELD_2D), POINTER :: F_DCTB=>NULL()
(  900)   TYPE(FIELD_2D), POINTER :: F_TPLB=>NULL()
(  901)   TYPE(FIELD_2D), POINTER :: F_TPLT=>NULL()
(  902)   TYPE(FIELD_2D), POINTER :: F_ODSS=>NULL()
(  903)   TYPE(FIELD_2D), POINTER :: F_ODDU=>NULL()
(  904)   TYPE(FIELD_2D), POINTER :: F_ODOM=>NULL()
(  905)   TYPE(FIELD_2D), POINTER :: F_ODBC=>NULL()
(  906)   TYPE(FIELD_2D), POINTER :: F_ODSU=>NULL()
(  907)   TYPE(FIELD_2D), POINTER :: F_ODNI=>NULL()
(  908)   TYPE(FIELD_2D), POINTER :: F_ODAM=>NULL()
(  909)   TYPE(FIELD_2D), POINTER :: F_ODSOA=>NULL()
(  910)   TYPE(FIELD_2D), POINTER :: F_ODVFA=>NULL()
(  911)   TYPE(FIELD_2D), POINTER :: F_ODVSU=>NULL()
(  912)   TYPE(FIELD_2D), POINTER :: F_ODTOACC=>NULL()
(  913)   TYPE(FIELD_2D), POINTER :: F_AEPM1=>NULL()
(  914)   TYPE(FIELD_2D), POINTER :: F_AEPM25=>NULL()
(  915)   TYPE(FIELD_2D), POINTER :: F_AEPM10=>NULL()
(  916)   TYPE(FIELD_2D), POINTER :: F_UVBED=>NULL()
(  917)   TYPE(FIELD_2D), POINTER :: F_UVBEDCS=>NULL()
(  918)   TYPE(FIELD_2D), POINTER :: F_LITOTI=>NULL()
(  919)   TYPE(FIELD_2D), POINTER :: F_LICGI=>NULL()
(  920)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_LITOTA6
(  921)   TYPE(FIELD_2D_PTR), ALLOCATABLE, DIMENSION(:) :: F_LICGA6
(  922)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  923) # 924 "surface_views_diagnostic_module.F90"
(  924) CONTAINS
(  925)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VDIAG_INIT
(  926)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VDIAG_UPDATE_VIEW
(  927) END TYPE SURFACE_VIEW_GROUP_VDIAG






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 60

(  928) # 929 "surface_views_diagnostic_module.F90"
(  929) TYPE SURFACE_VIEW_GROUP_SATSIM
(  930)   REAL(KIND=JPRB), POINTER :: PCLBT(:,:)   ! Cloudy brightness temperature
(  931) !>REAL(KIND=JPRB)          :: PCLBT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_SMD%NLEVS)
(  932)   REAL(KIND=JPRB), POINTER :: PCSBT(:,:)   ! Clear-sky brightness temperature
(  933) !>REAL(KIND=JPRB)          :: PCSBT (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_SMD%NLEVS)
(  934)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  935) # 936 "surface_views_diagnostic_module.F90"
(  936)   TYPE(SURFACE_VARIABLE_GROUP_SATSIM), POINTER :: VARIABLE_GROUP
(  937)   TYPE(FIELD_3D), POINTER :: F_CLBT=>NULL()
(  938)   TYPE(FIELD_3D), POINTER :: F_CSBT=>NULL()
(  939)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  940) # 941 "surface_views_diagnostic_module.F90"
(  941) CONTAINS
(  942)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SATSIM_INIT
(  943)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SATSIM_UPDATE_VIEW
(  944) END TYPE SURFACE_VIEW_GROUP_SATSIM
(  945) # 946 "surface_views_diagnostic_module.F90"
(  946) TYPE SURFACE_VIEW_GROUP_WAVES
(  947)   REAL(KIND=JPRB), POINTER :: PCHAR(:)   ! Charnock parameter as modified by the wave model.
(  948) !>REAL(KIND=JPRB)          :: PCHAR (YDCPG_OPTS%KLON)
(  949)   REAL(KIND=JPRB), POINTER :: PUSTOKES(:)   ! U-component of the surface Stokes drift.
(  950) !>REAL(KIND=JPRB)          :: PUSTOKES (YDCPG_OPTS%KLON)
(  951)   REAL(KIND=JPRB), POINTER :: PVSTOKES(:)   ! V-component of the surface Stokes drift.
(  952) !>REAL(KIND=JPRB)          :: PVSTOKES (YDCPG_OPTS%KLON)
(  953)   REAL(KIND=JPRB), POINTER :: PPHIOC(:)   ! Energy flux to ocean.
(  954) !>REAL(KIND=JPRB)          :: PPHIOC (YDCPG_OPTS%KLON)
(  955)   REAL(KIND=JPRB), POINTER :: PPHIAW(:)   ! Energy flux to ocean waves.
(  956) !>REAL(KIND=JPRB)          :: PPHIAW (YDCPG_OPTS%KLON)
(  957)   REAL(KIND=JPRB), POINTER :: PTAUOC(:)   ! Momentum flux to ocean.
(  958) !>REAL(KIND=JPRB)          :: PTAUOC (YDCPG_OPTS%KLON)
(  959)   REAL(KIND=JPRB), POINTER :: PEMEAN(:)   ! Wave variance.
(  960) !>REAL(KIND=JPRB)          :: PEMEAN (YDCPG_OPTS%KLON)
(  961)   REAL(KIND=JPRB), POINTER :: PFMEAN(:)   ! Wave mean frequency.
(  962) !>REAL(KIND=JPRB)          :: PFMEAN (YDCPG_OPTS%KLON)
(  963)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  964) # 965 "surface_views_diagnostic_module.F90"
(  965)   TYPE(SURFACE_VARIABLE_GROUP_WAVES), POINTER :: VARIABLE_GROUP
(  966)   TYPE(FIELD_2D), POINTER :: F_CHAR=>NULL()
(  967)   TYPE(FIELD_2D), POINTER :: F_USTOKES=>NULL()
(  968)   TYPE(FIELD_2D), POINTER :: F_VSTOKES=>NULL()
(  969)   TYPE(FIELD_2D), POINTER :: F_PHIOC=>NULL()
(  970)   TYPE(FIELD_2D), POINTER :: F_PHIAW=>NULL()
(  971)   TYPE(FIELD_2D), POINTER :: F_TAUOC=>NULL()
(  972)   TYPE(FIELD_2D), POINTER :: F_EMEAN=>NULL()
(  973)   TYPE(FIELD_2D), POINTER :: F_FMEAN=>NULL()
(  974)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  975) # 976 "surface_views_diagnostic_module.F90"
(  976) CONTAINS
(  977)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_WAVES_INIT
(  978)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_WAVES_UPDATE_VIEW
(  979) END TYPE SURFACE_VIEW_GROUP_WAVES
(  980) # 981 "surface_views_diagnostic_module.F90"
(  981) TYPE SURFACE_VIEW_GROUP_WAM
(  982)   REAL(KIND=JPRB), POINTER :: PU10N(:)   ! 10m neutral wind U-component passed to the wave model (WAM).
(  983) !>REAL(KIND=JPRB)          :: PU10N (YDCPG_OPTS%KLON)
(  984)   REAL(KIND=JPRB), POINTER :: PV10N(:)   ! 10m neutral wind V-component passed to the wave model (WAM).
(  985) !>REAL(KIND=JPRB)          :: PV10N (YDCPG_OPTS%KLON)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 61

(  986)   REAL(KIND=JPRB), POINTER :: PRHO(:)   ! surface density passed to the wave model (WAM).
(  987) !>REAL(KIND=JPRB)          :: PRHO (YDCPG_OPTS%KLON)
(  988)   REAL(KIND=JPRB), POINTER :: PZIL(:)   ! ZI/L passed to the wave model (used for gustiness in WAM).
(  989) !>REAL(KIND=JPRB)          :: PZIL (YDCPG_OPTS%KLON)
(  990)   REAL(KIND=JPRB), POINTER :: PCIF(:)   ! Sea ice fraction passed to the wave model (WAM).
(  991) !>REAL(KIND=JPRB)          :: PCIF (YDCPG_OPTS%KLON)
(  992)   REAL(KIND=JPRB), POINTER :: PCLK(:)   ! Lake cover passed to the wave model (WAM).
(  993) !>REAL(KIND=JPRB)          :: PCLK (YDCPG_OPTS%KLON)
(  994)   REAL(KIND=JPRB), POINTER :: PUCURW(:)   ! Ocean current    U-component passed to the wave model (WAM).
(  995) !>REAL(KIND=JPRB)          :: PUCURW (YDCPG_OPTS%KLON)
(  996)   REAL(KIND=JPRB), POINTER :: PVCURW(:)   ! Ocean current    V-component passed to the wave model (WAM).
(  997) !>REAL(KIND=JPRB)          :: PVCURW (YDCPG_OPTS%KLON)
(  998)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  999) # 1000 "surface_views_diagnostic_module.F90"
( 1000)   TYPE(SURFACE_VARIABLE_GROUP_WAM), POINTER :: VARIABLE_GROUP
( 1001)   TYPE(FIELD_2D), POINTER :: F_U10N=>NULL()
( 1002)   TYPE(FIELD_2D), POINTER :: F_V10N=>NULL()
( 1003)   TYPE(FIELD_2D), POINTER :: F_RHO=>NULL()
( 1004)   TYPE(FIELD_2D), POINTER :: F_ZIL=>NULL()
( 1005)   TYPE(FIELD_2D), POINTER :: F_CIF=>NULL()
( 1006)   TYPE(FIELD_2D), POINTER :: F_CLK=>NULL()
( 1007)   TYPE(FIELD_2D), POINTER :: F_UCURW=>NULL()
( 1008)   TYPE(FIELD_2D), POINTER :: F_VCURW=>NULL()
( 1009)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1010) # 1011 "surface_views_diagnostic_module.F90"
( 1011) CONTAINS
( 1012)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_WAM_INIT
( 1013)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_WAM_UPDATE_VIEW
( 1014) END TYPE SURFACE_VIEW_GROUP_WAM
( 1015) # 1016 "surface_views_diagnostic_module.F90"
( 1016) TYPE SURFACE_VIEW_GROUP_PRECFRAC
( 1017)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1018) # 1019 "surface_views_diagnostic_module.F90"
( 1019)   TYPE(SURFACE_VARIABLE_GROUP_PRECFRAC), POINTER :: VARIABLE_GROUP
( 1020)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1021) # 1022 "surface_views_diagnostic_module.F90"
( 1022) CONTAINS
( 1023)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_PRECFRAC_INIT
( 1024)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_PRECFRAC_UPDATE_VIEW
( 1025) END TYPE SURFACE_VIEW_GROUP_PRECFRAC
( 1026) # 1027 "surface_views_diagnostic_module.F90"
( 1027) TYPE SURFACE_VIEW_GROUP_VEXTRA
( 1028)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1029) # 1030 "surface_views_diagnostic_module.F90"
( 1030)   TYPE(SURFACE_VARIABLE_GROUP_VEXTRA), POINTER :: VARIABLE_GROUP
( 1031)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1032) # 1033 "surface_views_diagnostic_module.F90"
( 1033) CONTAINS
( 1034)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VEXTRA_INIT
( 1035)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VEXTRA_UPDATE_VIEW
( 1036) END TYPE SURFACE_VIEW_GROUP_VEXTRA
( 1037) # 1038 "surface_views_diagnostic_module.F90"
( 1038) TYPE SURFACE_VIEW_GROUP_VEXTRDI
( 1039)   REAL(KIND=JPRB), POINTER :: PXEDR(:,:)   ! Eddy diffusivity rate
( 1040) !>REAL(KIND=JPRB)          :: PXEDR (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_DID%NLEVS)
( 1041)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1042) # 1043 "surface_views_diagnostic_module.F90"
( 1043)   TYPE(SURFACE_VARIABLE_GROUP_VEXTRDI), POINTER :: VARIABLE_GROUP






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 62

( 1044)   TYPE(FIELD_3D), POINTER :: F_XEDR=>NULL()
( 1045)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1046) # 1047 "surface_views_diagnostic_module.F90"
( 1047) CONTAINS
( 1048)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VEXTRDI_INIT
( 1049)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VEXTRDI_UPDATE_VIEW
( 1050) END TYPE SURFACE_VIEW_GROUP_VEXTRDI
( 1051) # 1052 "surface_views_diagnostic_module.F90"
( 1052) TYPE SURFACE_VIEW_GROUP_VPRECIP
( 1053)   REAL(KIND=JPRB), POINTER :: PPRECIP(:,:)   ! Diagnostic of precipitations type
( 1054) !>REAL(KIND=JPRB)          :: PPRECIP (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_XPD%NLEVS)
( 1055)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1056) # 1057 "surface_views_diagnostic_module.F90"
( 1057)   TYPE(SURFACE_VARIABLE_GROUP_VPRECIP), POINTER :: VARIABLE_GROUP
( 1058)   TYPE(FIELD_3D), POINTER :: F_PRECIP=>NULL()
( 1059)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1060) # 1061 "surface_views_diagnostic_module.F90"
( 1061) CONTAINS
( 1062)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VPRECIP_INIT
( 1063)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VPRECIP_UPDATE_VIEW
( 1064) END TYPE SURFACE_VIEW_GROUP_VPRECIP
( 1065) # 1066 "surface_views_diagnostic_module.F90"
( 1066) TYPE SURFACE_VIEW_GROUP_VPRECIP2
( 1067)   REAL(KIND=JPRB), POINTER :: PPRECIP2(:,:)   ! Diagnostic of precipitations type
( 1068) !>REAL(KIND=JPRB)          :: PPRECIP2 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSD_XP2D%NLEVS)
( 1069)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
( 1070) # 1071 "surface_views_diagnostic_module.F90"
( 1071)   TYPE(SURFACE_VARIABLE_GROUP_VPRECIP2), POINTER :: VARIABLE_GROUP
( 1072)   TYPE(FIELD_3D), POINTER :: F_PRECIP2=>NULL()
( 1073)   TYPE(FIELD_4D), POINTER :: F_GROUP
( 1074) # 1075 "surface_views_diagnostic_module.F90"
( 1075) CONTAINS
( 1076)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VPRECIP2_INIT
( 1077)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VPRECIP2_UPDATE_VIEW
( 1078) END TYPE SURFACE_VIEW_GROUP_VPRECIP2
( 1079) # 1080 "surface_views_diagnostic_module.F90"
( 1080) TYPE SURFACE_VIEW_GROUP_VEXTR2
( 1081)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1082) # 1083 "surface_views_diagnostic_module.F90"
( 1083)   TYPE(SURFACE_VARIABLE_GROUP_VEXTR2), POINTER :: VARIABLE_GROUP
( 1084)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1085) # 1086 "surface_views_diagnostic_module.F90"
( 1086) CONTAINS
( 1087)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VEXTR2_INIT
( 1088)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VEXTR2_UPDATE_VIEW
( 1089) END TYPE SURFACE_VIEW_GROUP_VEXTR2
( 1090) # 1091 "surface_views_diagnostic_module.F90"
( 1091) TYPE SURFACE_VIEW_GROUP_SFORC
( 1092)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1093) # 1094 "surface_views_diagnostic_module.F90"
( 1094)   TYPE(SURFACE_VARIABLE_GROUP_SFORC), POINTER :: VARIABLE_GROUP
( 1095)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1096) # 1097 "surface_views_diagnostic_module.F90"
( 1097) CONTAINS
( 1098)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SFORC_INIT
( 1099)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SFORC_UPDATE_VIEW
( 1100) END TYPE SURFACE_VIEW_GROUP_SFORC
( 1101) # 1102 "surface_views_diagnostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 63

( 1102) TYPE SURFACE_VIEW_GROUP_SFLUX
( 1103)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1104) # 1105 "surface_views_diagnostic_module.F90"
( 1105)   TYPE(SURFACE_VARIABLE_GROUP_SFLUX), POINTER :: VARIABLE_GROUP
( 1106)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1107) # 1108 "surface_views_diagnostic_module.F90"
( 1108) CONTAINS
( 1109)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SFLUX_INIT
( 1110)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SFLUX_UPDATE_VIEW
( 1111) END TYPE SURFACE_VIEW_GROUP_SFLUX
( 1112) # 1113 "surface_views_diagnostic_module.F90"
( 1113) TYPE SURFACE_VIEW_GROUP_VO3ABC
( 1114)   REAL(KIND=JPRB), POINTER :: PA(:)   ! A climatological ozone profile
( 1115) !>REAL(KIND=JPRB)          :: PA (YDCPG_OPTS%KLON)
( 1116)   REAL(KIND=JPRB), POINTER :: PB(:)   ! B climatological ozone profile
( 1117) !>REAL(KIND=JPRB)          :: PB (YDCPG_OPTS%KLON)
( 1118)   REAL(KIND=JPRB), POINTER :: PC(:)   ! C climatological ozone profile
( 1119) !>REAL(KIND=JPRB)          :: PC (YDCPG_OPTS%KLON)
( 1120)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
( 1121) # 1122 "surface_views_diagnostic_module.F90"
( 1122)   TYPE(SURFACE_VARIABLE_GROUP_VO3ABC), POINTER :: VARIABLE_GROUP
( 1123)   TYPE(FIELD_2D), POINTER :: F_A=>NULL()
( 1124)   TYPE(FIELD_2D), POINTER :: F_B=>NULL()
( 1125)   TYPE(FIELD_2D), POINTER :: F_C=>NULL()
( 1126)   TYPE(FIELD_3D), POINTER :: F_GROUP
( 1127) # 1128 "surface_views_diagnostic_module.F90"
( 1128) CONTAINS
( 1129)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_VO3ABC_INIT
( 1130)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_VO3ABC_UPDATE_VIEW
( 1131) END TYPE SURFACE_VIEW_GROUP_VO3ABC
( 1132) # 1134 "surface_views_diagnostic_module.F90"
( 1134) CONTAINS
( 1135) # 1136 "surface_views_diagnostic_module.F90"
( 1136)   SUBROUTINE SURFACE_VIEW_GROUP_VARSF_INIT(SELF, VARIABLE_GROUP)
( 1137)     ! Constructor of the array view type for a surface variable group
( 1138)     CLASS(SURFACE_VIEW_GROUP_VARSF) :: SELF
( 1139)     TYPE(SURFACE_VARIABLE_GROUP_VARSF), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1140)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1141) # 1142 "surface_views_diagnostic_module.F90"
( 1142)     ! Create a view for the "T0" field only for diagnostic fields
( 1143)     SELF%F_Z0F => VARIABLE_GROUP%VZ0F%FT0
( 1144)     SELF%F_ALBF => VARIABLE_GROUP%VALBF%FT0
( 1145)     SELF%F_EMISF => VARIABLE_GROUP%VEMISF%FT0
( 1146)     SELF%F_GETRL => VARIABLE_GROUP%VGETRL%FT0
( 1147)     SELF%F_LSM => VARIABLE_GROUP%VLSM%FT0
( 1148)     SELF%F_VEG => VARIABLE_GROUP%VVEG%FT0
( 1149)     SELF%F_VRLAN => VARIABLE_GROUP%VVRLAN%FT0
( 1150)     SELF%F_VRLDI => VARIABLE_GROUP%VVRLDI%FT0
( 1151)     SELF%F_SIG => VARIABLE_GROUP%VSIG%FT0
( 1152)     SELF%F_ALBSF => VARIABLE_GROUP%VALBSF%FT0
( 1153)     SELF%F_LAN => VARIABLE_GROUP%VLAN%FT0
( 1154)     SELF%F_SST => VARIABLE_GROUP%VSST%FT0
( 1155)     SELF%F_SSS => VARIABLE_GROUP%VSSS%FT0
( 1156)     SELF%F_LZ0H => VARIABLE_GROUP%VLZ0H%FT0
( 1157)     SELF%F_CVL => VARIABLE_GROUP%VCVL%FT0
( 1158)     SELF%F_CVH => VARIABLE_GROUP%VCVH%FT0
( 1159)     SELF%F_TVL => VARIABLE_GROUP%VTVL%FT0
( 1160)     SELF%F_TVH => VARIABLE_GROUP%VTVH%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 64

( 1161)     SELF%F_LAIL => VARIABLE_GROUP%VLAIL%FT0
( 1162)     SELF%F_LAIH => VARIABLE_GROUP%VLAIH%FT0
( 1163)     SELF%F_SOTY => VARIABLE_GROUP%VSOTY%FT0
( 1164)     SELF%F_CLK => VARIABLE_GROUP%VCLK%FT0
( 1165)     SELF%F_DL => VARIABLE_GROUP%VDL%FT0
( 1166)     SELF%F_CI => VARIABLE_GROUP%VCI%FT0
( 1167)     SELF%F_UCUR => VARIABLE_GROUP%VUCUR%FT0
( 1168)     SELF%F_VCUR => VARIABLE_GROUP%VVCUR%FT0
( 1169)     SELF%F_Z0RLF => VARIABLE_GROUP%VZ0RLF%FT0
( 1170)     SELF%F_CO2O => VARIABLE_GROUP%VCO2O%FT0
( 1171)     SELF%F_CO2B => VARIABLE_GROUP%VCO2B%FT0
( 1172)     SELF%F_CO2A => VARIABLE_GROUP%VCO2A%FT0
( 1173)     SELF%F_CO2F => VARIABLE_GROUP%VCO2F%FT0
( 1174)     SELF%F_CGPP => VARIABLE_GROUP%VCGPP%FT0
( 1175)     SELF%F_CREC => VARIABLE_GROUP%VCREC%FT0
( 1176)     SELF%F_CH4AG => VARIABLE_GROUP%VCH4AG%FT0
( 1177)     SELF%F_CH4F => VARIABLE_GROUP%VCH4F%FT0
( 1178)     SELF%F_SDFOR => VARIABLE_GROUP%VSDFOR%FT0
( 1179)     SELF%F_ALUVP => VARIABLE_GROUP%VALUVP%FT0
( 1180)     SELF%F_ALUVD => VARIABLE_GROUP%VALUVD%FT0
( 1181)     SELF%F_ALNIP => VARIABLE_GROUP%VALNIP%FT0
( 1182)     SELF%F_ALNID => VARIABLE_GROUP%VALNID%FT0
( 1183)     SELF%F_FP1 => VARIABLE_GROUP%VFP1%FT0
( 1184)     SELF%F_BCBF => VARIABLE_GROUP%VBCBF%FT0
( 1185)     SELF%F_BCFF => VARIABLE_GROUP%VBCFF%FT0
( 1186)     SELF%F_BCGF => VARIABLE_GROUP%VBCGF%FT0
( 1187)     SELF%F_OMBF => VARIABLE_GROUP%VOMBF%FT0
( 1188)     SELF%F_OMFF => VARIABLE_GROUP%VOMFF%FT0
( 1189)     SELF%F_OMGF => VARIABLE_GROUP%VOMGF%FT0
( 1190)     SELF%F_INJF => VARIABLE_GROUP%VINJF%FT0
( 1191)     SELF%F_SO2L => VARIABLE_GROUP%VSO2L%FT0
( 1192)     SELF%F_SO2H => VARIABLE_GROUP%VSO2H%FT0
( 1193)     SELF%F_SO2DD => VARIABLE_GROUP%VSO2DD%FT0
( 1194)     SELF%F_SOGF => VARIABLE_GROUP%VSOGF%FT0
( 1195)     SELF%F_SOA => VARIABLE_GROUP%VSOA%FT0
( 1196)     SELF%F_VOLC => VARIABLE_GROUP%VVOLC%FT0
( 1197)     SELF%F_VOLE => VARIABLE_GROUP%VVOLE%FT0
( 1198)     SELF%F_DMSO => VARIABLE_GROUP%VDMSO%FT0
( 1199)     SELF%F_SOACO => VARIABLE_GROUP%VSOACO%FT0
( 1200)     SELF%F_URBF => VARIABLE_GROUP%VURBF%FT0
( 1201)     SELF%F_VOLCALTI => VARIABLE_GROUP%VVOLCALTI%FT0
( 1202)     SELF%F_FCA1 => VARIABLE_GROUP%VFCA1%FT0
( 1203)     SELF%F_FCA2 => VARIABLE_GROUP%VFCA2%FT0
( 1204)     SELF%F_AERDEP => VARIABLE_GROUP%VAERDEP%FT0
( 1205)     SELF%F_AERLTS => VARIABLE_GROUP%VAERLTS%FT0
( 1206)     SELF%F_AERSCC => VARIABLE_GROUP%VAERSCC%FT0
( 1207)     SELF%F_DSF => VARIABLE_GROUP%VDSF%FT0
( 1208)     IF (ALLOCATED(VARIABLE_GROUP%VCHEMFLX)) THEN
( 1209)       ALLOCATE(SELF%PCHEMFLX(SIZE(VARIABLE_GROUP%VCHEMFLX)))
( 1210)       ALLOCATE(SELF%F_CHEMFLX(SIZE(VARIABLE_GROUP%VCHEMFLX)))
( 1211)       DO I=1, SIZE(VARIABLE_GROUP%VCHEMFLX)
( 1212)         SELF%F_CHEMFLX(I)%PTR => VARIABLE_GROUP%VCHEMFLX(I)%FT0
( 1213)       END DO
( 1214)     END IF
( 1215)     IF (ALLOCATED(VARIABLE_GROUP%VCHEMFLXO)) THEN
( 1216)       ALLOCATE(SELF%PCHEMFLXO(SIZE(VARIABLE_GROUP%VCHEMFLXO)))
( 1217)       ALLOCATE(SELF%F_CHEMFLXO(SIZE(VARIABLE_GROUP%VCHEMFLXO)))
( 1218)       DO I=1, SIZE(VARIABLE_GROUP%VCHEMFLXO)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 65

( 1219)         SELF%F_CHEMFLXO(I)%PTR => VARIABLE_GROUP%VCHEMFLXO(I)%FT0
( 1220)       END DO
( 1221)     END IF
( 1222)     IF (ALLOCATED(VARIABLE_GROUP%VCHEMDV)) THEN
( 1223)       ALLOCATE(SELF%PCHEMDV(SIZE(VARIABLE_GROUP%VCHEMDV)))
( 1224)       ALLOCATE(SELF%F_CHEMDV(SIZE(VARIABLE_GROUP%VCHEMDV)))
( 1225)       DO I=1, SIZE(VARIABLE_GROUP%VCHEMDV)
( 1226)         SELF%F_CHEMDV(I)%PTR => VARIABLE_GROUP%VCHEMDV(I)%FT0
( 1227)       END DO
( 1228)     END IF
( 1229)     SELF%F_NUDM => VARIABLE_GROUP%VNUDM%FT0
( 1230)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1231)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1232)   END SUBROUTINE SURFACE_VIEW_GROUP_VARSF_INIT
( 1233) # 1234 "surface_views_diagnostic_module.F90"
( 1234)   SUBROUTINE SURFACE_VIEW_GROUP_VARSF_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1235)     ! Extract local array views from field objects
( 1236)     CLASS(SURFACE_VIEW_GROUP_VARSF) :: SELF
( 1237)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1238)     INTEGER(KIND=JPIM) :: I, J
( 1239) # 1240 "surface_views_diagnostic_module.F90"
( 1240)     ! Set up the view pointer for the "T0" field
( 1241)     IF (ASSOCIATED(SELF%F_Z0F))  SELF%PZ0F => SELF%F_Z0F%GET_VIEW(BLOCK_INDEX)
( 1242)     IF (ASSOCIATED(SELF%F_ALBF))  SELF%PALBF => SELF%F_ALBF%GET_VIEW(BLOCK_INDEX)
( 1243)     IF (ASSOCIATED(SELF%F_EMISF))  SELF%PEMISF => SELF%F_EMISF%GET_VIEW(BLOCK_INDEX)
( 1244)     IF (ASSOCIATED(SELF%F_GETRL))  SELF%PGETRL => SELF%F_GETRL%GET_VIEW(BLOCK_INDEX)
( 1245)     IF (ASSOCIATED(SELF%F_LSM))  SELF%PLSM => SELF%F_LSM%GET_VIEW(BLOCK_INDEX)
( 1246)     IF (ASSOCIATED(SELF%F_VEG))  SELF%PVEG => SELF%F_VEG%GET_VIEW(BLOCK_INDEX)
( 1247)     IF (ASSOCIATED(SELF%F_VRLAN))  SELF%PVRLAN => SELF%F_VRLAN%GET_VIEW(BLOCK_INDEX)
( 1248)     IF (ASSOCIATED(SELF%F_VRLDI))  SELF%PVRLDI => SELF%F_VRLDI%GET_VIEW(BLOCK_INDEX)
( 1249)     IF (ASSOCIATED(SELF%F_SIG))  SELF%PSIG => SELF%F_SIG%GET_VIEW(BLOCK_INDEX)
( 1250)     IF (ASSOCIATED(SELF%F_ALBSF))  SELF%PALBSF => SELF%F_ALBSF%GET_VIEW(BLOCK_INDEX)
( 1251)     IF (ASSOCIATED(SELF%F_LAN))  SELF%PLAN => SELF%F_LAN%GET_VIEW(BLOCK_INDEX)
( 1252)     IF (ASSOCIATED(SELF%F_SST))  SELF%PSST => SELF%F_SST%GET_VIEW(BLOCK_INDEX)
( 1253)     IF (ASSOCIATED(SELF%F_SSS))  SELF%PSSS => SELF%F_SSS%GET_VIEW(BLOCK_INDEX)
( 1254)     IF (ASSOCIATED(SELF%F_LZ0H))  SELF%PLZ0H => SELF%F_LZ0H%GET_VIEW(BLOCK_INDEX)
( 1255)     IF (ASSOCIATED(SELF%F_CVL))  SELF%PCVL => SELF%F_CVL%GET_VIEW(BLOCK_INDEX)
( 1256)     IF (ASSOCIATED(SELF%F_CVH))  SELF%PCVH => SELF%F_CVH%GET_VIEW(BLOCK_INDEX)
( 1257)     IF (ASSOCIATED(SELF%F_TVL))  SELF%PTVL => SELF%F_TVL%GET_VIEW(BLOCK_INDEX)
( 1258)     IF (ASSOCIATED(SELF%F_TVH))  SELF%PTVH => SELF%F_TVH%GET_VIEW(BLOCK_INDEX)
( 1259)     IF (ASSOCIATED(SELF%F_LAIL))  SELF%PLAIL => SELF%F_LAIL%GET_VIEW(BLOCK_INDEX)
( 1260)     IF (ASSOCIATED(SELF%F_LAIH))  SELF%PLAIH => SELF%F_LAIH%GET_VIEW(BLOCK_INDEX)
( 1261)     IF (ASSOCIATED(SELF%F_SOTY))  SELF%PSOTY => SELF%F_SOTY%GET_VIEW(BLOCK_INDEX)
( 1262)     IF (ASSOCIATED(SELF%F_CLK))  SELF%PCLK => SELF%F_CLK%GET_VIEW(BLOCK_INDEX)
( 1263)     IF (ASSOCIATED(SELF%F_DL))  SELF%PDL => SELF%F_DL%GET_VIEW(BLOCK_INDEX)
( 1264)     IF (ASSOCIATED(SELF%F_CI))  SELF%PCI => SELF%F_CI%GET_VIEW(BLOCK_INDEX)
( 1265)     IF (ASSOCIATED(SELF%F_UCUR))  SELF%PUCUR => SELF%F_UCUR%GET_VIEW(BLOCK_INDEX)
( 1266)     IF (ASSOCIATED(SELF%F_VCUR))  SELF%PVCUR => SELF%F_VCUR%GET_VIEW(BLOCK_INDEX)
( 1267)     IF (ASSOCIATED(SELF%F_Z0RLF))  SELF%PZ0RLF => SELF%F_Z0RLF%GET_VIEW(BLOCK_INDEX)
( 1268)     IF (ASSOCIATED(SELF%F_CO2O))  SELF%PCO2O => SELF%F_CO2O%GET_VIEW(BLOCK_INDEX)
( 1269)     IF (ASSOCIATED(SELF%F_CO2B))  SELF%PCO2B => SELF%F_CO2B%GET_VIEW(BLOCK_INDEX)
( 1270)     IF (ASSOCIATED(SELF%F_CO2A))  SELF%PCO2A => SELF%F_CO2A%GET_VIEW(BLOCK_INDEX)
( 1271)     IF (ASSOCIATED(SELF%F_CO2F))  SELF%PCO2F => SELF%F_CO2F%GET_VIEW(BLOCK_INDEX)
( 1272)     IF (ASSOCIATED(SELF%F_CGPP))  SELF%PCGPP => SELF%F_CGPP%GET_VIEW(BLOCK_INDEX)
( 1273)     IF (ASSOCIATED(SELF%F_CREC))  SELF%PCREC => SELF%F_CREC%GET_VIEW(BLOCK_INDEX)
( 1274)     IF (ASSOCIATED(SELF%F_CH4AG))  SELF%PCH4AG => SELF%F_CH4AG%GET_VIEW(BLOCK_INDEX)
( 1275)     IF (ASSOCIATED(SELF%F_CH4F))  SELF%PCH4F => SELF%F_CH4F%GET_VIEW(BLOCK_INDEX)
( 1276)     IF (ASSOCIATED(SELF%F_SDFOR))  SELF%PSDFOR => SELF%F_SDFOR%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 66

( 1277)     IF (ASSOCIATED(SELF%F_ALUVP))  SELF%PALUVP => SELF%F_ALUVP%GET_VIEW(BLOCK_INDEX)
( 1278)     IF (ASSOCIATED(SELF%F_ALUVD))  SELF%PALUVD => SELF%F_ALUVD%GET_VIEW(BLOCK_INDEX)
( 1279)     IF (ASSOCIATED(SELF%F_ALNIP))  SELF%PALNIP => SELF%F_ALNIP%GET_VIEW(BLOCK_INDEX)
( 1280)     IF (ASSOCIATED(SELF%F_ALNID))  SELF%PALNID => SELF%F_ALNID%GET_VIEW(BLOCK_INDEX)
( 1281)     IF (ASSOCIATED(SELF%F_FP1))  SELF%PFP1 => SELF%F_FP1%GET_VIEW(BLOCK_INDEX)
( 1282)     IF (ASSOCIATED(SELF%F_BCBF))  SELF%PBCBF => SELF%F_BCBF%GET_VIEW(BLOCK_INDEX)
( 1283)     IF (ASSOCIATED(SELF%F_BCFF))  SELF%PBCFF => SELF%F_BCFF%GET_VIEW(BLOCK_INDEX)
( 1284)     IF (ASSOCIATED(SELF%F_BCGF))  SELF%PBCGF => SELF%F_BCGF%GET_VIEW(BLOCK_INDEX)
( 1285)     IF (ASSOCIATED(SELF%F_OMBF))  SELF%POMBF => SELF%F_OMBF%GET_VIEW(BLOCK_INDEX)
( 1286)     IF (ASSOCIATED(SELF%F_OMFF))  SELF%POMFF => SELF%F_OMFF%GET_VIEW(BLOCK_INDEX)
( 1287)     IF (ASSOCIATED(SELF%F_OMGF))  SELF%POMGF => SELF%F_OMGF%GET_VIEW(BLOCK_INDEX)
( 1288)     IF (ASSOCIATED(SELF%F_INJF))  SELF%PINJF => SELF%F_INJF%GET_VIEW(BLOCK_INDEX)
( 1289)     IF (ASSOCIATED(SELF%F_SO2L))  SELF%PSO2L => SELF%F_SO2L%GET_VIEW(BLOCK_INDEX)
( 1290)     IF (ASSOCIATED(SELF%F_SO2H))  SELF%PSO2H => SELF%F_SO2H%GET_VIEW(BLOCK_INDEX)
( 1291)     IF (ASSOCIATED(SELF%F_SO2DD))  SELF%PSO2DD => SELF%F_SO2DD%GET_VIEW(BLOCK_INDEX)
( 1292)     IF (ASSOCIATED(SELF%F_SOGF))  SELF%PSOGF => SELF%F_SOGF%GET_VIEW(BLOCK_INDEX)
( 1293)     IF (ASSOCIATED(SELF%F_SOA))  SELF%PSOA => SELF%F_SOA%GET_VIEW(BLOCK_INDEX)
( 1294)     IF (ASSOCIATED(SELF%F_VOLC))  SELF%PVOLC => SELF%F_VOLC%GET_VIEW(BLOCK_INDEX)
( 1295)     IF (ASSOCIATED(SELF%F_VOLE))  SELF%PVOLE => SELF%F_VOLE%GET_VIEW(BLOCK_INDEX)
( 1296)     IF (ASSOCIATED(SELF%F_DMSO))  SELF%PDMSO => SELF%F_DMSO%GET_VIEW(BLOCK_INDEX)
( 1297)     IF (ASSOCIATED(SELF%F_SOACO))  SELF%PSOACO => SELF%F_SOACO%GET_VIEW(BLOCK_INDEX)
( 1298)     IF (ASSOCIATED(SELF%F_URBF))  SELF%PURBF => SELF%F_URBF%GET_VIEW(BLOCK_INDEX)
( 1299)     IF (ASSOCIATED(SELF%F_VOLCALTI))  SELF%PVOLCALTI => SELF%F_VOLCALTI%GET_VIEW(BLOCK_INDEX)
( 1300)     IF (ASSOCIATED(SELF%F_FCA1))  SELF%PFCA1 => SELF%F_FCA1%GET_VIEW(BLOCK_INDEX)
( 1301)     IF (ASSOCIATED(SELF%F_FCA2))  SELF%PFCA2 => SELF%F_FCA2%GET_VIEW(BLOCK_INDEX)
( 1302)     IF (ASSOCIATED(SELF%F_AERDEP))  SELF%PAERDEP => SELF%F_AERDEP%GET_VIEW(BLOCK_INDEX)
( 1303)     IF (ASSOCIATED(SELF%F_AERLTS))  SELF%PAERLTS => SELF%F_AERLTS%GET_VIEW(BLOCK_INDEX)
( 1304)     IF (ASSOCIATED(SELF%F_AERSCC))  SELF%PAERSCC => SELF%F_AERSCC%GET_VIEW(BLOCK_INDEX)
( 1305)     IF (ASSOCIATED(SELF%F_DSF))  SELF%PDSF => SELF%F_DSF%GET_VIEW(BLOCK_INDEX)
( 1306)     IF (ALLOCATED(SELF%F_CHEMFLX)) THEN
( 1307)       DO I=1, SIZE(SELF%F_CHEMFLX)
( 1308)         SELF%PCHEMFLX(I)%P => SELF%F_CHEMFLX(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1309)       END DO
( 1310)     END IF
( 1311)     IF (ALLOCATED(SELF%F_CHEMFLXO)) THEN
( 1312)       DO I=1, SIZE(SELF%F_CHEMFLXO)
( 1313)         SELF%PCHEMFLXO(I)%P => SELF%F_CHEMFLXO(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1314)       END DO
( 1315)     END IF
( 1316)     IF (ALLOCATED(SELF%F_CHEMDV)) THEN
( 1317)       DO I=1, SIZE(SELF%F_CHEMDV)
( 1318)         SELF%PCHEMDV(I)%P => SELF%F_CHEMDV(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1319)       END DO
( 1320)     END IF
( 1321)     IF (ASSOCIATED(SELF%F_NUDM))  SELF%PNUDM => SELF%F_NUDM%GET_VIEW(BLOCK_INDEX)
( 1322) # 1323 "surface_views_diagnostic_module.F90"
( 1323)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1324)   END SUBROUTINE SURFACE_VIEW_GROUP_VARSF_UPDATE_VIEW
( 1325) # 1326 "surface_views_diagnostic_module.F90"
( 1326)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_INIT(SELF, VARIABLE_GROUP)
( 1327)     ! Constructor of the array view type for a surface variable group
( 1328)     CLASS(SURFACE_VIEW_GROUP_VCLIH) :: SELF
( 1329)     TYPE(SURFACE_VARIABLE_GROUP_VCLIH), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1330)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1331) # 1332 "surface_views_diagnostic_module.F90"
( 1332)     ! Create a view for the "T0" field only for diagnostic fields
( 1333)     SELF%F_TCCH => VARIABLE_GROUP%VTCCH%FT0
( 1334)     SELF%F_SCCH => VARIABLE_GROUP%VSCCH%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 67

( 1335)     SELF%F_BCCH => VARIABLE_GROUP%VBCCH%FT0
( 1336)     SELF%F_PBLH => VARIABLE_GROUP%VPBLH%FT0
( 1337)     SELF%F_SPSH => VARIABLE_GROUP%VSPSH%FT0
( 1338)     SELF%F_QSH => VARIABLE_GROUP%VQSH%FT0
( 1339)     SELF%F_PCL => VARIABLE_GROUP%VPCL%FT0
( 1340)     SELF%F_PSL => VARIABLE_GROUP%VPSL%FT0
( 1341)     SELF%F_PCN => VARIABLE_GROUP%VPCN%FT0
( 1342)     SELF%F_PSN => VARIABLE_GROUP%VPSN%FT0
( 1343)     SELF%F_EVA => VARIABLE_GROUP%VEVA%FT0
( 1344)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1345)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1346)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_INIT
( 1347) # 1348 "surface_views_diagnostic_module.F90"
( 1348)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1349)     ! Extract local array views from field objects
( 1350)     CLASS(SURFACE_VIEW_GROUP_VCLIH) :: SELF
( 1351)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1352)     INTEGER(KIND=JPIM) :: I, J
( 1353) # 1354 "surface_views_diagnostic_module.F90"
( 1354)     ! Set up the view pointer for the "T0" field
( 1355)     IF (ASSOCIATED(SELF%F_TCCH))  SELF%PTCCH => SELF%F_TCCH%GET_VIEW(BLOCK_INDEX)
( 1356)     IF (ASSOCIATED(SELF%F_SCCH))  SELF%PSCCH => SELF%F_SCCH%GET_VIEW(BLOCK_INDEX)
( 1357)     IF (ASSOCIATED(SELF%F_BCCH))  SELF%PBCCH => SELF%F_BCCH%GET_VIEW(BLOCK_INDEX)
( 1358)     IF (ASSOCIATED(SELF%F_PBLH))  SELF%PPBLH => SELF%F_PBLH%GET_VIEW(BLOCK_INDEX)
( 1359)     IF (ASSOCIATED(SELF%F_SPSH))  SELF%PSPSH => SELF%F_SPSH%GET_VIEW(BLOCK_INDEX)
( 1360)     IF (ASSOCIATED(SELF%F_QSH))  SELF%PQSH => SELF%F_QSH%GET_VIEW(BLOCK_INDEX)
( 1361)     IF (ASSOCIATED(SELF%F_PCL))  SELF%PPCL => SELF%F_PCL%GET_VIEW(BLOCK_INDEX)
( 1362)     IF (ASSOCIATED(SELF%F_PSL))  SELF%PPSL => SELF%F_PSL%GET_VIEW(BLOCK_INDEX)
( 1363)     IF (ASSOCIATED(SELF%F_PCN))  SELF%PPCN => SELF%F_PCN%GET_VIEW(BLOCK_INDEX)
( 1364)     IF (ASSOCIATED(SELF%F_PSN))  SELF%PPSN => SELF%F_PSN%GET_VIEW(BLOCK_INDEX)
( 1365)     IF (ASSOCIATED(SELF%F_EVA))  SELF%PEVA => SELF%F_EVA%GET_VIEW(BLOCK_INDEX)
( 1366) # 1367 "surface_views_diagnostic_module.F90"
( 1367)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1368)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIH_UPDATE_VIEW
( 1369) # 1370 "surface_views_diagnostic_module.F90"
( 1370)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_INIT(SELF, VARIABLE_GROUP)
( 1371)     ! Constructor of the array view type for a surface variable group
( 1372)     CLASS(SURFACE_VIEW_GROUP_VCLIK) :: SELF
( 1373)     TYPE(SURFACE_VARIABLE_GROUP_VCLIK), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1374)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1375) # 1376 "surface_views_diagnostic_module.F90"
( 1376)     ! Create a view for the "T0" field only for diagnostic fields
( 1377)     SELF%F_UDGRO => VARIABLE_GROUP%VUDGRO%FT0
( 1378)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1379)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1380)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_INIT
( 1381) # 1382 "surface_views_diagnostic_module.F90"
( 1382)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1383)     ! Extract local array views from field objects
( 1384)     CLASS(SURFACE_VIEW_GROUP_VCLIK) :: SELF
( 1385)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1386)     INTEGER(KIND=JPIM) :: I, J
( 1387) # 1388 "surface_views_diagnostic_module.F90"
( 1388)     ! Set up the view pointer for the "T0" field
( 1389)     IF (ASSOCIATED(SELF%F_UDGRO))  SELF%PUDGRO => SELF%F_UDGRO%GET_VIEW(BLOCK_INDEX)
( 1390) # 1391 "surface_views_diagnostic_module.F90"
( 1391)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1392)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIK_UPDATE_VIEW






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 68

( 1393) # 1394 "surface_views_diagnostic_module.F90"
( 1394)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_INIT(SELF, VARIABLE_GROUP)
( 1395)     ! Constructor of the array view type for a surface variable group
( 1396)     CLASS(SURFACE_VIEW_GROUP_VCLIP) :: SELF
( 1397)     TYPE(SURFACE_VARIABLE_GROUP_VCLIP), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1398)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1399) # 1400 "surface_views_diagnostic_module.F90"
( 1400)     ! Create a view for the "T0" field only for diagnostic fields
( 1401)     SELF%F_TPC => VARIABLE_GROUP%VTPC%FT0
( 1402)     SELF%F_WPC => VARIABLE_GROUP%VWPC%FT0
( 1403)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1404)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1405)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_INIT
( 1406) # 1407 "surface_views_diagnostic_module.F90"
( 1407)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1408)     ! Extract local array views from field objects
( 1409)     CLASS(SURFACE_VIEW_GROUP_VCLIP) :: SELF
( 1410)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1411)     INTEGER(KIND=JPIM) :: I, J
( 1412) # 1413 "surface_views_diagnostic_module.F90"
( 1413)     ! Set up the view pointer for the "T0" field
( 1414)     IF (ASSOCIATED(SELF%F_TPC))  SELF%PTPC => SELF%F_TPC%GET_VIEW(BLOCK_INDEX)
( 1415)     IF (ASSOCIATED(SELF%F_WPC))  SELF%PWPC => SELF%F_WPC%GET_VIEW(BLOCK_INDEX)
( 1416) # 1417 "surface_views_diagnostic_module.F90"
( 1417)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1418)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIP_UPDATE_VIEW
( 1419) # 1420 "surface_views_diagnostic_module.F90"
( 1420)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_INIT(SELF, VARIABLE_GROUP)
( 1421)     ! Constructor of the array view type for a surface variable group
( 1422)     CLASS(SURFACE_VIEW_GROUP_VCLIV) :: SELF
( 1423)     TYPE(SURFACE_VARIABLE_GROUP_VCLIV), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1424)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1425) # 1426 "surface_views_diagnostic_module.F90"
( 1426)     ! Create a view for the "T0" field only for diagnostic fields
( 1427)     SELF%F_ARG => VARIABLE_GROUP%VARG%FT0
( 1428)     SELF%F_SAB => VARIABLE_GROUP%VSAB%FT0
( 1429)     SELF%F_D2 => VARIABLE_GROUP%VD2%FT0
( 1430)     SELF%F_IVEG => VARIABLE_GROUP%VIVEG%FT0
( 1431)     SELF%F_RSMIN => VARIABLE_GROUP%VRSMIN%FT0
( 1432)     SELF%F_LAI => VARIABLE_GROUP%VLAI%FT0
( 1433)     SELF%F_HV => VARIABLE_GROUP%VHV%FT0
( 1434)     SELF%F_Z0H => VARIABLE_GROUP%VZ0H%FT0
( 1435)     SELF%F_ALS => VARIABLE_GROUP%VALS%FT0
( 1436)     SELF%F_ALV => VARIABLE_GROUP%VALV%FT0
( 1437)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1438)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1439)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_INIT
( 1440) # 1441 "surface_views_diagnostic_module.F90"
( 1441)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1442)     ! Extract local array views from field objects
( 1443)     CLASS(SURFACE_VIEW_GROUP_VCLIV) :: SELF
( 1444)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1445)     INTEGER(KIND=JPIM) :: I, J
( 1446) # 1447 "surface_views_diagnostic_module.F90"
( 1447)     ! Set up the view pointer for the "T0" field
( 1448)     IF (ASSOCIATED(SELF%F_ARG))  SELF%PARG => SELF%F_ARG%GET_VIEW(BLOCK_INDEX)
( 1449)     IF (ASSOCIATED(SELF%F_SAB))  SELF%PSAB => SELF%F_SAB%GET_VIEW(BLOCK_INDEX)
( 1450)     IF (ASSOCIATED(SELF%F_D2))  SELF%PD2 => SELF%F_D2%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 69

( 1451)     IF (ASSOCIATED(SELF%F_IVEG))  SELF%PIVEG => SELF%F_IVEG%GET_VIEW(BLOCK_INDEX)
( 1452)     IF (ASSOCIATED(SELF%F_RSMIN))  SELF%PRSMIN => SELF%F_RSMIN%GET_VIEW(BLOCK_INDEX)
( 1453)     IF (ASSOCIATED(SELF%F_LAI))  SELF%PLAI => SELF%F_LAI%GET_VIEW(BLOCK_INDEX)
( 1454)     IF (ASSOCIATED(SELF%F_HV))  SELF%PHV => SELF%F_HV%GET_VIEW(BLOCK_INDEX)
( 1455)     IF (ASSOCIATED(SELF%F_Z0H))  SELF%PZ0H => SELF%F_Z0H%GET_VIEW(BLOCK_INDEX)
( 1456)     IF (ASSOCIATED(SELF%F_ALS))  SELF%PALS => SELF%F_ALS%GET_VIEW(BLOCK_INDEX)
( 1457)     IF (ASSOCIATED(SELF%F_ALV))  SELF%PALV => SELF%F_ALV%GET_VIEW(BLOCK_INDEX)
( 1458) # 1459 "surface_views_diagnostic_module.F90"
( 1459)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1460)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIV_UPDATE_VIEW
( 1461) # 1462 "surface_views_diagnostic_module.F90"
( 1462)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_INIT(SELF, VARIABLE_GROUP)
( 1463)     ! Constructor of the array view type for a surface variable group
( 1464)     CLASS(SURFACE_VIEW_GROUP_VCLIA) :: SELF
( 1465)     TYPE(SURFACE_VARIABLE_GROUP_VCLIA), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1466)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1467) # 1468 "surface_views_diagnostic_module.F90"
( 1468)     ! Create a view for the "T0" field only for diagnostic fields
( 1469)     SELF%F_SEA => VARIABLE_GROUP%VSEA%FT0
( 1470)     SELF%F_LAN => VARIABLE_GROUP%VLAN%FT0
( 1471)     SELF%F_SOO => VARIABLE_GROUP%VSOO%FT0
( 1472)     SELF%F_DES => VARIABLE_GROUP%VDES%FT0
( 1473)     SELF%F_SUL => VARIABLE_GROUP%VSUL%FT0
( 1474)     SELF%F_VOL => VARIABLE_GROUP%VVOL%FT0
( 1475)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1476)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1477)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_INIT
( 1478) # 1479 "surface_views_diagnostic_module.F90"
( 1479)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1480)     ! Extract local array views from field objects
( 1481)     CLASS(SURFACE_VIEW_GROUP_VCLIA) :: SELF
( 1482)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1483)     INTEGER(KIND=JPIM) :: I, J
( 1484) # 1485 "surface_views_diagnostic_module.F90"
( 1485)     ! Set up the view pointer for the "T0" field
( 1486)     IF (ASSOCIATED(SELF%F_SEA))  SELF%PSEA => SELF%F_SEA%GET_VIEW(BLOCK_INDEX)
( 1487)     IF (ASSOCIATED(SELF%F_LAN))  SELF%PLAN => SELF%F_LAN%GET_VIEW(BLOCK_INDEX)
( 1488)     IF (ASSOCIATED(SELF%F_SOO))  SELF%PSOO => SELF%F_SOO%GET_VIEW(BLOCK_INDEX)
( 1489)     IF (ASSOCIATED(SELF%F_DES))  SELF%PDES => SELF%F_DES%GET_VIEW(BLOCK_INDEX)
( 1490)     IF (ASSOCIATED(SELF%F_SUL))  SELF%PSUL => SELF%F_SUL%GET_VIEW(BLOCK_INDEX)
( 1491)     IF (ASSOCIATED(SELF%F_VOL))  SELF%PVOL => SELF%F_VOL%GET_VIEW(BLOCK_INDEX)
( 1492) # 1493 "surface_views_diagnostic_module.F90"
( 1493)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1494)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIA_UPDATE_VIEW
( 1495) # 1496 "surface_views_diagnostic_module.F90"
( 1496)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_INIT(SELF, VARIABLE_GROUP)
( 1497)     ! Constructor of the array view type for a surface variable group
( 1498)     CLASS(SURFACE_VIEW_GROUP_VCLIN) :: SELF
( 1499)     TYPE(SURFACE_VARIABLE_GROUP_VCLIN), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1500)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1501) # 1502 "surface_views_diagnostic_module.F90"
( 1502)     ! Create a view for the "T0" field only for diagnostic fields
( 1503)     SELF%F_TOP => VARIABLE_GROUP%VTOP%FT0
( 1504)     SELF%F_BAS => VARIABLE_GROUP%VBAS%FT0
( 1505)     SELF%F_ACPR => VARIABLE_GROUP%VACPR%FT0
( 1506)     SELF%F_ACCPR => VARIABLE_GROUP%VACCPR%FT0
( 1507)     SELF%F_ACCPR5 => VARIABLE_GROUP%VACCPR5%FT0
( 1508)     SELF%VARIABLE_GROUP => VARIABLE_GROUP






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 70

( 1509)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1510)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_INIT
( 1511) # 1512 "surface_views_diagnostic_module.F90"
( 1512)   SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1513)     ! Extract local array views from field objects
( 1514)     CLASS(SURFACE_VIEW_GROUP_VCLIN) :: SELF
( 1515)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1516)     INTEGER(KIND=JPIM) :: I, J
( 1517) # 1518 "surface_views_diagnostic_module.F90"
( 1518)     ! Set up the view pointer for the "T0" field
( 1519)     IF (ASSOCIATED(SELF%F_TOP))  SELF%PTOP => SELF%F_TOP%GET_VIEW(BLOCK_INDEX)
( 1520)     IF (ASSOCIATED(SELF%F_BAS))  SELF%PBAS => SELF%F_BAS%GET_VIEW(BLOCK_INDEX)
( 1521)     IF (ASSOCIATED(SELF%F_ACPR))  SELF%PACPR => SELF%F_ACPR%GET_VIEW(BLOCK_INDEX)
( 1522)     IF (ASSOCIATED(SELF%F_ACCPR))  SELF%PACCPR => SELF%F_ACCPR%GET_VIEW(BLOCK_INDEX)
( 1523)     IF (ASSOCIATED(SELF%F_ACCPR5))  SELF%PACCPR5 => SELF%F_ACCPR5%GET_VIEW(BLOCK_INDEX)
( 1524) # 1525 "surface_views_diagnostic_module.F90"
( 1525)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1526)   END SUBROUTINE SURFACE_VIEW_GROUP_VCLIN_UPDATE_VIEW
( 1527) # 1528 "surface_views_diagnostic_module.F90"
( 1528)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_INIT(SELF, VARIABLE_GROUP)
( 1529)     ! Constructor of the array view type for a surface variable group
( 1530)     CLASS(SURFACE_VIEW_GROUP_VDIAGO2) :: SELF
( 1531)     TYPE(SURFACE_VARIABLE_GROUP_VDIAGO2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1532)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1533) # 1534 "surface_views_diagnostic_module.F90"
( 1534)     ! Create a view for the "T0" field only for diagnostic fields
( 1535)     SELF%F_OCDEP => VARIABLE_GROUP%VOCDEP%FT0
( 1536)     SELF%F_USTRC => VARIABLE_GROUP%VUSTRC%FT0
( 1537)     SELF%F_VSTRC => VARIABLE_GROUP%VVSTRC%FT0
( 1538)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1539)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1540)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_INIT
( 1541) # 1542 "surface_views_diagnostic_module.F90"
( 1542)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1543)     ! Extract local array views from field objects
( 1544)     CLASS(SURFACE_VIEW_GROUP_VDIAGO2) :: SELF
( 1545)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1546)     INTEGER(KIND=JPIM) :: I, J
( 1547) # 1548 "surface_views_diagnostic_module.F90"
( 1548)     ! Set up the view pointer for the "T0" field
( 1549)     IF (ASSOCIATED(SELF%F_OCDEP))  SELF%POCDEP => SELF%F_OCDEP%GET_VIEW(BLOCK_INDEX)
( 1550)     IF (ASSOCIATED(SELF%F_USTRC))  SELF%PUSTRC => SELF%F_USTRC%GET_VIEW(BLOCK_INDEX)
( 1551)     IF (ASSOCIATED(SELF%F_VSTRC))  SELF%PVSTRC => SELF%F_VSTRC%GET_VIEW(BLOCK_INDEX)
( 1552) # 1553 "surface_views_diagnostic_module.F90"
( 1553)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1554)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO2_UPDATE_VIEW
( 1555) # 1556 "surface_views_diagnostic_module.F90"
( 1556)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_INIT(SELF, VARIABLE_GROUP)
( 1557)     ! Constructor of the array view type for a surface variable group
( 1558)     CLASS(SURFACE_VIEW_GROUP_VDIAGO3) :: SELF
( 1559)     TYPE(SURFACE_VARIABLE_GROUP_VDIAGO3), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1560)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1561) # 1562 "surface_views_diagnostic_module.F90"
( 1562)     ! Create a view for the "T0" field only for diagnostic fields
( 1563)     SELF%F_DIFM => VARIABLE_GROUP%VDIFM%FT0
( 1564)     SELF%F_DIFT => VARIABLE_GROUP%VDIFT%FT0
( 1565)     SELF%F_DIFS => VARIABLE_GROUP%VDIFS%FT0
( 1566)     SELF%F_ADVT => VARIABLE_GROUP%VADVT%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 71

( 1567)     SELF%F_ADVS => VARIABLE_GROUP%VADVS%FT0
( 1568)     SELF%F_TRI0 => VARIABLE_GROUP%VTRI0%FT0
( 1569)     SELF%F_TRI1 => VARIABLE_GROUP%VTRI1%FT0
( 1570)     SELF%F_SWDK => VARIABLE_GROUP%VSWDK%FT0
( 1571)     SELF%F_ZO => VARIABLE_GROUP%VZO%FT0
( 1572)     SELF%F_HO => VARIABLE_GROUP%VHO%FT0
( 1573)     SELF%F_DO => VARIABLE_GROUP%VDO%FT0
( 1574)     SELF%F_HO_INV => VARIABLE_GROUP%VHO_INV%FT0
( 1575)     SELF%F_UOC => VARIABLE_GROUP%VUOC%FT0
( 1576)     SELF%F_VOC => VARIABLE_GROUP%VVOC%FT0
( 1577)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1578)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1579)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_INIT
( 1580) # 1581 "surface_views_diagnostic_module.F90"
( 1581)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1582)     ! Extract local array views from field objects
( 1583)     CLASS(SURFACE_VIEW_GROUP_VDIAGO3) :: SELF
( 1584)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1585)     INTEGER(KIND=JPIM) :: I, J
( 1586) # 1587 "surface_views_diagnostic_module.F90"
( 1587)     ! Set up the view pointer for the "T0" field
( 1588)     IF (ASSOCIATED(SELF%F_DIFM))  SELF%PDIFM => SELF%F_DIFM%GET_VIEW(BLOCK_INDEX)
( 1589)     IF (ASSOCIATED(SELF%F_DIFT))  SELF%PDIFT => SELF%F_DIFT%GET_VIEW(BLOCK_INDEX)
( 1590)     IF (ASSOCIATED(SELF%F_DIFS))  SELF%PDIFS => SELF%F_DIFS%GET_VIEW(BLOCK_INDEX)
( 1591)     IF (ASSOCIATED(SELF%F_ADVT))  SELF%PADVT => SELF%F_ADVT%GET_VIEW(BLOCK_INDEX)
( 1592)     IF (ASSOCIATED(SELF%F_ADVS))  SELF%PADVS => SELF%F_ADVS%GET_VIEW(BLOCK_INDEX)
( 1593)     IF (ASSOCIATED(SELF%F_TRI0))  SELF%PTRI0 => SELF%F_TRI0%GET_VIEW(BLOCK_INDEX)
( 1594)     IF (ASSOCIATED(SELF%F_TRI1))  SELF%PTRI1 => SELF%F_TRI1%GET_VIEW(BLOCK_INDEX)
( 1595)     IF (ASSOCIATED(SELF%F_SWDK))  SELF%PSWDK => SELF%F_SWDK%GET_VIEW(BLOCK_INDEX)
( 1596)     IF (ASSOCIATED(SELF%F_ZO))  SELF%PZO => SELF%F_ZO%GET_VIEW(BLOCK_INDEX)
( 1597)     IF (ASSOCIATED(SELF%F_HO))  SELF%PHO => SELF%F_HO%GET_VIEW(BLOCK_INDEX)
( 1598)     IF (ASSOCIATED(SELF%F_DO))  SELF%PDO => SELF%F_DO%GET_VIEW(BLOCK_INDEX)
( 1599)     IF (ASSOCIATED(SELF%F_HO_INV))  SELF%PHO_INV => SELF%F_HO_INV%GET_VIEW(BLOCK_INDEX)
( 1600)     IF (ASSOCIATED(SELF%F_UOC))  SELF%PUOC => SELF%F_UOC%GET_VIEW(BLOCK_INDEX)
( 1601)     IF (ASSOCIATED(SELF%F_VOC))  SELF%PVOC => SELF%F_VOC%GET_VIEW(BLOCK_INDEX)
( 1602) # 1603 "surface_views_diagnostic_module.F90"
( 1603)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 1604)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAGO3_UPDATE_VIEW
( 1605) # 1606 "surface_views_diagnostic_module.F90"
( 1606)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_INIT(SELF, VARIABLE_GROUP)
( 1607)     ! Constructor of the array view type for a surface variable group
( 1608)     CLASS(SURFACE_VIEW_GROUP_VDIAG) :: SELF
( 1609)     TYPE(SURFACE_VARIABLE_GROUP_VDIAG), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 1610)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 1611) # 1612 "surface_views_diagnostic_module.F90"
( 1612)     ! Create a view for the "T0" field only for diagnostic fields
( 1613)     SELF%F_LSP => VARIABLE_GROUP%VLSP%FT0
( 1614)     SELF%F_CP => VARIABLE_GROUP%VCP%FT0
( 1615)     SELF%F_SF => VARIABLE_GROUP%VSF%FT0
( 1616)     SELF%F_FZRA => VARIABLE_GROUP%VFZRA%FT0
( 1617)     SELF%F_BLD => VARIABLE_GROUP%VBLD%FT0
( 1618)     SELF%F_SSHF => VARIABLE_GROUP%VSSHF%FT0
( 1619)     SELF%F_SLHF => VARIABLE_GROUP%VSLHF%FT0
( 1620)     SELF%F_NEE => VARIABLE_GROUP%VNEE%FT0
( 1621)     SELF%F_GPP => VARIABLE_GROUP%VGPP%FT0
( 1622)     SELF%F_REC => VARIABLE_GROUP%VREC%FT0
( 1623)     SELF%F_MSL => VARIABLE_GROUP%VMSL%FT0
( 1624)     SELF%F_SP => VARIABLE_GROUP%VSP%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 72

( 1625)     SELF%F_TCC => VARIABLE_GROUP%VTCC%FT0
( 1626)     SELF%F_10U => VARIABLE_GROUP%V10U%FT0
( 1627)     SELF%F_10V => VARIABLE_GROUP%V10V%FT0
( 1628)     SELF%F_2T => VARIABLE_GROUP%V2T%FT0
( 1629)     SELF%F_2D => VARIABLE_GROUP%V2D%FT0
( 1630)     SELF%F_2Q => VARIABLE_GROUP%V2Q%FT0
( 1631)     SELF%F_SSR => VARIABLE_GROUP%VSSR%FT0
( 1632)     SELF%F_STR => VARIABLE_GROUP%VSTR%FT0
( 1633)     SELF%F_TSR => VARIABLE_GROUP%VTSR%FT0
( 1634)     SELF%F_TTR => VARIABLE_GROUP%VTTR%FT0
( 1635)     SELF%F_EWSS => VARIABLE_GROUP%VEWSS%FT0
( 1636)     SELF%F_NSSS => VARIABLE_GROUP%VNSSS%FT0
( 1637)     SELF%F_E => VARIABLE_GROUP%VE%FT0
( 1638)     SELF%F_PEV => VARIABLE_GROUP%VPEV%FT0
( 1639)     SELF%F_CCC => VARIABLE_GROUP%VCCC%FT0
( 1640)     SELF%F_LCC => VARIABLE_GROUP%VLCC%FT0
( 1641)     SELF%F_MCC => VARIABLE_GROUP%VMCC%FT0
( 1642)     SELF%F_HCC => VARIABLE_GROUP%VHCC%FT0
( 1643)     SELF%F_LGWS => VARIABLE_GROUP%VLGWS%FT0
( 1644)     SELF%F_MGWS => VARIABLE_GROUP%VMGWS%FT0
( 1645)     SELF%F_GWD => VARIABLE_GROUP%VGWD%FT0
( 1646)     SELF%F_MX2T => VARIABLE_GROUP%VMX2T%FT0
( 1647)     SELF%F_MN2T => VARIABLE_GROUP%VMN2T%FT0
( 1648)     IF (ALLOCATED(VARIABLE_GROUP%VMX2T6)) THEN
( 1649)       ALLOCATE(SELF%PMX2T6(SIZE(VARIABLE_GROUP%VMX2T6)))
( 1650)       ALLOCATE(SELF%F_MX2T6(SIZE(VARIABLE_GROUP%VMX2T6)))
( 1651)       DO I=1, SIZE(VARIABLE_GROUP%VMX2T6)
( 1652)         SELF%F_MX2T6(I)%PTR => VARIABLE_GROUP%VMX2T6(I)%FT0
( 1653)       END DO
( 1654)     END IF
( 1655)     IF (ALLOCATED(VARIABLE_GROUP%VMN2T6)) THEN
( 1656)       ALLOCATE(SELF%PMN2T6(SIZE(VARIABLE_GROUP%VMN2T6)))
( 1657)       ALLOCATE(SELF%F_MN2T6(SIZE(VARIABLE_GROUP%VMN2T6)))
( 1658)       DO I=1, SIZE(VARIABLE_GROUP%VMN2T6)
( 1659)         SELF%F_MN2T6(I)%PTR => VARIABLE_GROUP%VMN2T6(I)%FT0
( 1660)       END DO
( 1661)     END IF
( 1662)     SELF%F_RO => VARIABLE_GROUP%VRO%FT0
( 1663)     SELF%F_SRO => VARIABLE_GROUP%VSRO%FT0
( 1664)     SELF%F_SSRO => VARIABLE_GROUP%VSSRO%FT0
( 1665)     SELF%F_ALB => VARIABLE_GROUP%VALB%FT0
( 1666)     SELF%F_IEWSS => VARIABLE_GROUP%VIEWSS%FT0
( 1667)     SELF%F_INSSS => VARIABLE_GROUP%VINSSS%FT0
( 1668)     SELF%F_ISSHF => VARIABLE_GROUP%VISSHF%FT0
( 1669)     SELF%F_IE => VARIABLE_GROUP%VIE%FT0
( 1670)     SELF%F_INEE => VARIABLE_GROUP%VINEE%FT0
( 1671)     SELF%F_IGPP => VARIABLE_GROUP%VIGPP%FT0
( 1672)     SELF%F_IREC => VARIABLE_GROUP%VIREC%FT0
( 1673)     SELF%F_CSF => VARIABLE_GROUP%VCSF%FT0
( 1674)     SELF%F_LSSF => VARIABLE_GROUP%VLSSF%FT0
( 1675)     SELF%F_MXTPR => VARIABLE_GROUP%VMXTPR%FT0
( 1676)     SELF%F_MNTPR => VARIABLE_GROUP%VMNTPR%FT0
( 1677)     IF (ALLOCATED(VARIABLE_GROUP%VMXTPR6)) THEN
( 1678)       ALLOCATE(SELF%PMXTPR6(SIZE(VARIABLE_GROUP%VMXTPR6)))
( 1679)       ALLOCATE(SELF%F_MXTPR6(SIZE(VARIABLE_GROUP%VMXTPR6)))
( 1680)       DO I=1, SIZE(VARIABLE_GROUP%VMXTPR6)
( 1681)         SELF%F_MXTPR6(I)%PTR => VARIABLE_GROUP%VMXTPR6(I)%FT0
( 1682)       END DO






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 73

( 1683)     END IF
( 1684)     IF (ALLOCATED(VARIABLE_GROUP%VMNTPR6)) THEN
( 1685)       ALLOCATE(SELF%PMNTPR6(SIZE(VARIABLE_GROUP%VMNTPR6)))
( 1686)       ALLOCATE(SELF%F_MNTPR6(SIZE(VARIABLE_GROUP%VMNTPR6)))
( 1687)       DO I=1, SIZE(VARIABLE_GROUP%VMNTPR6)
( 1688)         SELF%F_MNTPR6(I)%PTR => VARIABLE_GROUP%VMNTPR6(I)%FT0
( 1689)       END DO
( 1690)     END IF
( 1691)     SELF%F_TPR => VARIABLE_GROUP%VTPR%FT0
( 1692)     SELF%F_LSRR => VARIABLE_GROUP%VLSRR%FT0
( 1693)     SELF%F_CRR => VARIABLE_GROUP%VCRR%FT0
( 1694)     SELF%F_LSSFR => VARIABLE_GROUP%VLSSFR%FT0
( 1695)     SELF%F_CSFR => VARIABLE_GROUP%VCSFR%FT0
( 1696)     SELF%F_PTYPE => VARIABLE_GROUP%VPTYPE%FT0
( 1697)     SELF%F_ILSPF => VARIABLE_GROUP%VILSPF%FT0
( 1698)     SELF%F_Z0F => VARIABLE_GROUP%VZ0F%FT0
( 1699)     SELF%F_LZ0H => VARIABLE_GROUP%VLZ0H%FT0
( 1700)     SELF%F_VIWVE => VARIABLE_GROUP%VVIWVE%FT0
( 1701)     SELF%F_VIWVN => VARIABLE_GROUP%VVIWVN%FT0
( 1702)     SELF%F_TCW => VARIABLE_GROUP%VTCW%FT0
( 1703)     SELF%F_TCWV => VARIABLE_GROUP%VTCWV%FT0
( 1704)     SELF%F_TCLW => VARIABLE_GROUP%VTCLW%FT0
( 1705)     SELF%F_TCIW => VARIABLE_GROUP%VTCIW%FT0
( 1706)     SELF%F_TCRW => VARIABLE_GROUP%VTCRW%FT0
( 1707)     SELF%F_TCSW => VARIABLE_GROUP%VTCSW%FT0
( 1708)     SELF%F_TCSLW => VARIABLE_GROUP%VTCSLW%FT0
( 1709)     SELF%F_SSRD => VARIABLE_GROUP%VSSRD%FT0
( 1710)     SELF%F_STRD => VARIABLE_GROUP%VSTRD%FT0
( 1711)     SELF%F_SSRDC => VARIABLE_GROUP%VSSRDC%FT0
( 1712)     SELF%F_STRDC => VARIABLE_GROUP%VSTRDC%FT0
( 1713)     SELF%F_BLH => VARIABLE_GROUP%VBLH%FT0
( 1714)     SELF%F_SUND => VARIABLE_GROUP%VSUND%FT0
( 1715)     SELF%F_SPAR => VARIABLE_GROUP%VSPAR%FT0
( 1716)     SELF%F_SUVB => VARIABLE_GROUP%VSUVB%FT0
( 1717)     SELF%F_SFDIR => VARIABLE_GROUP%VSFDIR%FT0
( 1718)     SELF%F_SCDIR => VARIABLE_GROUP%VSCDIR%FT0
( 1719)     SELF%F_SDSRP => VARIABLE_GROUP%VSDSRP%FT0
( 1720)     SELF%F_CAPE => VARIABLE_GROUP%VCAPE%FT0
( 1721)     SELF%F_CAPES => VARIABLE_GROUP%VCAPES%FT0
( 1722)     IF (ALLOCATED(VARIABLE_GROUP%VMXCAP6)) THEN
( 1723)       ALLOCATE(SELF%PMXCAP6(SIZE(VARIABLE_GROUP%VMXCAP6)))
( 1724)       ALLOCATE(SELF%F_MXCAP6(SIZE(VARIABLE_GROUP%VMXCAP6)))
( 1725)       DO I=1, SIZE(VARIABLE_GROUP%VMXCAP6)
( 1726)         SELF%F_MXCAP6(I)%PTR => VARIABLE_GROUP%VMXCAP6(I)%FT0
( 1727)       END DO
( 1728)     END IF
( 1729)     IF (ALLOCATED(VARIABLE_GROUP%VMXCAPS6)) THEN
( 1730)       ALLOCATE(SELF%PMXCAPS6(SIZE(VARIABLE_GROUP%VMXCAPS6)))
( 1731)       ALLOCATE(SELF%F_MXCAPS6(SIZE(VARIABLE_GROUP%VMXCAPS6)))
( 1732)       DO I=1, SIZE(VARIABLE_GROUP%VMXCAPS6)
( 1733)         SELF%F_MXCAPS6(I)%PTR => VARIABLE_GROUP%VMXCAPS6(I)%FT0
( 1734)       END DO
( 1735)     END IF
( 1736)     SELF%F_TSRC => VARIABLE_GROUP%VTSRC%FT0
( 1737)     SELF%F_TTRC => VARIABLE_GROUP%VTTRC%FT0
( 1738)     SELF%F_SSRC => VARIABLE_GROUP%VSSRC%FT0
( 1739)     SELF%F_STRC => VARIABLE_GROUP%VSTRC%FT0
( 1740)     SELF%F_ES => VARIABLE_GROUP%VES%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 74

( 1741)     SELF%F_SMLT => VARIABLE_GROUP%VSMLT%FT0
( 1742)     SELF%F_10FG => VARIABLE_GROUP%V10FG%FT0
( 1743)     IF (ALLOCATED(VARIABLE_GROUP%V10FG6)) THEN
( 1744)       ALLOCATE(SELF%P10FG6(SIZE(VARIABLE_GROUP%V10FG6)))
( 1745)       ALLOCATE(SELF%F_10FG6(SIZE(VARIABLE_GROUP%V10FG6)))
( 1746)       DO I=1, SIZE(VARIABLE_GROUP%V10FG6)
( 1747)         SELF%F_10FG6(I)%PTR => VARIABLE_GROUP%V10FG6(I)%FT0
( 1748)       END DO
( 1749)     END IF
( 1750)     SELF%F_10FGCV => VARIABLE_GROUP%V10FGCV%FT0
( 1751)     SELF%F_I10FG => VARIABLE_GROUP%VI10FG%FT0
( 1752)     SELF%F_LSPF => VARIABLE_GROUP%VLSPF%FT0
( 1753)     SELF%F_TCO3 => VARIABLE_GROUP%VTCO3%FT0
( 1754)     SELF%F_VIMD => VARIABLE_GROUP%VVIMD%FT0
( 1755)     SELF%F_SPARC => VARIABLE_GROUP%VSPARC%FT0
( 1756)     SELF%F_STINC => VARIABLE_GROUP%VSTINC%FT0
( 1757)     SELF%F_CBASE => VARIABLE_GROUP%VCBASE%FT0
( 1758)     SELF%F_0DEGL => VARIABLE_GROUP%V0DEGL%FT0
( 1759)     SELF%F_VISIH => VARIABLE_GROUP%VVISIH%FT0
( 1760)     SELF%F_CIN => VARIABLE_GROUP%VCIN%FT0
( 1761)     SELF%F_KINDEX => VARIABLE_GROUP%VKINDEX%FT0
( 1762)     SELF%F_TTINDEX => VARIABLE_GROUP%VTTINDEX%FT0
( 1763)     SELF%F_CBASEA => VARIABLE_GROUP%VCBASEA%FT0
( 1764)     SELF%F_CTOPC => VARIABLE_GROUP%VCTOPC%FT0
( 1765)     SELF%F_ZTWETB0 => VARIABLE_GROUP%VZTWETB0%FT0
( 1766)     SELF%F_ZTWETB1 => VARIABLE_GROUP%VZTWETB1%FT0
( 1767)     IF (ALLOCATED(VARIABLE_GROUP%VTCGHG)) THEN
( 1768)       ALLOCATE(SELF%PTCGHG(SIZE(VARIABLE_GROUP%VTCGHG)))
( 1769)       ALLOCATE(SELF%F_TCGHG(SIZE(VARIABLE_GROUP%VTCGHG)))
( 1770)       DO I=1, SIZE(VARIABLE_GROUP%VTCGHG)
( 1771)         SELF%F_TCGHG(I)%PTR => VARIABLE_GROUP%VTCGHG(I)%FT0
( 1772)       END DO
( 1773)     END IF
( 1774)     IF (ALLOCATED(VARIABLE_GROUP%VTCCHEM)) THEN
( 1775)       ALLOCATE(SELF%PTCCHEM(SIZE(VARIABLE_GROUP%VTCCHEM)))
( 1776)       ALLOCATE(SELF%F_TCCHEM(SIZE(VARIABLE_GROUP%VTCCHEM)))
( 1777)       DO I=1, SIZE(VARIABLE_GROUP%VTCCHEM)
( 1778)         SELF%F_TCCHEM(I)%PTR => VARIABLE_GROUP%VTCCHEM(I)%FT0
( 1779)       END DO
( 1780)     END IF
( 1781)     IF (ALLOCATED(VARIABLE_GROUP%VAERODIAG)) THEN
( 1782)       MYSHAPE = SHAPE(VARIABLE_GROUP%VAERODIAG)
( 1783)       ALLOCATE(SELF%PAERODIAG(MYSHAPE(1), MYSHAPE(2)))
( 1784)       ALLOCATE(SELF%F_AERODIAG(MYSHAPE(1), MYSHAPE(2)))
( 1785)       DO J=1, MYSHAPE(2)
( 1786)         DO I=1, MYSHAPE(1)
( 1787)           SELF%F_AERODIAG(I,J)%PTR => VARIABLE_GROUP%VAERODIAG(I,J)%FT0
( 1788)         END DO
( 1789)       END DO
( 1790)     END IF
( 1791)     IF (ALLOCATED(VARIABLE_GROUP%VAERO_WVL_DIAG)) THEN
( 1792)       MYSHAPE = SHAPE(VARIABLE_GROUP%VAERO_WVL_DIAG)
( 1793)       ALLOCATE(SELF%PAERO_WVL_DIAG(MYSHAPE(1), MYSHAPE(2)))
( 1794)       ALLOCATE(SELF%F_AERO_WVL_DIAG(MYSHAPE(1), MYSHAPE(2)))
( 1795)       DO J=1, MYSHAPE(2)
( 1796)         DO I=1, MYSHAPE(1)
( 1797)           SELF%F_AERO_WVL_DIAG(I,J)%PTR => VARIABLE_GROUP%VAERO_WVL_DIAG(I,J)%FT0
( 1798)         END DO






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 75

( 1799)       END DO
( 1800)     END IF
( 1801)     SELF%F_100U => VARIABLE_GROUP%V100U%FT0
( 1802)     SELF%F_100V => VARIABLE_GROUP%V100V%FT0
( 1803)     SELF%F_200U => VARIABLE_GROUP%V200U%FT0
( 1804)     SELF%F_200V => VARIABLE_GROUP%V200V%FT0
( 1805)     SELF%F_ZUST => VARIABLE_GROUP%VZUST%FT0
( 1806)     SELF%F_10NU => VARIABLE_GROUP%V10NU%FT0
( 1807)     SELF%F_10NV => VARIABLE_GROUP%V10NV%FT0
( 1808)     SELF%F_DNDZN => VARIABLE_GROUP%VDNDZN%FT0
( 1809)     SELF%F_DNDZA => VARIABLE_GROUP%VDNDZA%FT0
( 1810)     SELF%F_DCTB => VARIABLE_GROUP%VDCTB%FT0
( 1811)     SELF%F_TPLB => VARIABLE_GROUP%VTPLB%FT0
( 1812)     SELF%F_TPLT => VARIABLE_GROUP%VTPLT%FT0
( 1813)     SELF%F_ODSS => VARIABLE_GROUP%VODSS%FT0
( 1814)     SELF%F_ODDU => VARIABLE_GROUP%VODDU%FT0
( 1815)     SELF%F_ODOM => VARIABLE_GROUP%VODOM%FT0
( 1816)     SELF%F_ODBC => VARIABLE_GROUP%VODBC%FT0
( 1817)     SELF%F_ODSU => VARIABLE_GROUP%VODSU%FT0
( 1818)     SELF%F_ODNI => VARIABLE_GROUP%VODNI%FT0
( 1819)     SELF%F_ODAM => VARIABLE_GROUP%VODAM%FT0
( 1820)     SELF%F_ODSOA => VARIABLE_GROUP%VODSOA%FT0
( 1821)     SELF%F_ODVFA => VARIABLE_GROUP%VODVFA%FT0
( 1822)     SELF%F_ODVSU => VARIABLE_GROUP%VODVSU%FT0
( 1823)     SELF%F_ODTOACC => VARIABLE_GROUP%VODTOACC%FT0
( 1824)     SELF%F_AEPM1 => VARIABLE_GROUP%VAEPM1%FT0
( 1825)     SELF%F_AEPM25 => VARIABLE_GROUP%VAEPM25%FT0
( 1826)     SELF%F_AEPM10 => VARIABLE_GROUP%VAEPM10%FT0
( 1827)     SELF%F_UVBED => VARIABLE_GROUP%VUVBED%FT0
( 1828)     SELF%F_UVBEDCS => VARIABLE_GROUP%VUVBEDCS%FT0
( 1829)     SELF%F_LITOTI => VARIABLE_GROUP%VLITOTI%FT0
( 1830)     SELF%F_LICGI => VARIABLE_GROUP%VLICGI%FT0
( 1831)     IF (ALLOCATED(VARIABLE_GROUP%VLITOTA6)) THEN
( 1832)       ALLOCATE(SELF%PLITOTA6(SIZE(VARIABLE_GROUP%VLITOTA6)))
( 1833)       ALLOCATE(SELF%F_LITOTA6(SIZE(VARIABLE_GROUP%VLITOTA6)))
( 1834)       DO I=1, SIZE(VARIABLE_GROUP%VLITOTA6)
( 1835)         SELF%F_LITOTA6(I)%PTR => VARIABLE_GROUP%VLITOTA6(I)%FT0
( 1836)       END DO
( 1837)     END IF
( 1838)     IF (ALLOCATED(VARIABLE_GROUP%VLICGA6)) THEN
( 1839)       ALLOCATE(SELF%PLICGA6(SIZE(VARIABLE_GROUP%VLICGA6)))
( 1840)       ALLOCATE(SELF%F_LICGA6(SIZE(VARIABLE_GROUP%VLICGA6)))
( 1841)       DO I=1, SIZE(VARIABLE_GROUP%VLICGA6)
( 1842)         SELF%F_LICGA6(I)%PTR => VARIABLE_GROUP%VLICGA6(I)%FT0
( 1843)       END DO
( 1844)     END IF
( 1845)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 1846)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 1847)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_INIT
( 1848) # 1849 "surface_views_diagnostic_module.F90"
( 1849)   SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1850)     ! Extract local array views from field objects
( 1851)     CLASS(SURFACE_VIEW_GROUP_VDIAG) :: SELF
( 1852)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1853)     INTEGER(KIND=JPIM) :: I, J
( 1854) # 1855 "surface_views_diagnostic_module.F90"
( 1855)     ! Set up the view pointer for the "T0" field
( 1856)     IF (ASSOCIATED(SELF%F_LSP))  SELF%PLSP => SELF%F_LSP%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 76

( 1857)     IF (ASSOCIATED(SELF%F_CP))  SELF%PCP => SELF%F_CP%GET_VIEW(BLOCK_INDEX)
( 1858)     IF (ASSOCIATED(SELF%F_SF))  SELF%PSF => SELF%F_SF%GET_VIEW(BLOCK_INDEX)
( 1859)     IF (ASSOCIATED(SELF%F_FZRA))  SELF%PFZRA => SELF%F_FZRA%GET_VIEW(BLOCK_INDEX)
( 1860)     IF (ASSOCIATED(SELF%F_BLD))  SELF%PBLD => SELF%F_BLD%GET_VIEW(BLOCK_INDEX)
( 1861)     IF (ASSOCIATED(SELF%F_SSHF))  SELF%PSSHF => SELF%F_SSHF%GET_VIEW(BLOCK_INDEX)
( 1862)     IF (ASSOCIATED(SELF%F_SLHF))  SELF%PSLHF => SELF%F_SLHF%GET_VIEW(BLOCK_INDEX)
( 1863)     IF (ASSOCIATED(SELF%F_NEE))  SELF%PNEE => SELF%F_NEE%GET_VIEW(BLOCK_INDEX)
( 1864)     IF (ASSOCIATED(SELF%F_GPP))  SELF%PGPP => SELF%F_GPP%GET_VIEW(BLOCK_INDEX)
( 1865)     IF (ASSOCIATED(SELF%F_REC))  SELF%PREC => SELF%F_REC%GET_VIEW(BLOCK_INDEX)
( 1866)     IF (ASSOCIATED(SELF%F_MSL))  SELF%PMSL => SELF%F_MSL%GET_VIEW(BLOCK_INDEX)
( 1867)     IF (ASSOCIATED(SELF%F_SP))  SELF%PSP => SELF%F_SP%GET_VIEW(BLOCK_INDEX)
( 1868)     IF (ASSOCIATED(SELF%F_TCC))  SELF%PTCC => SELF%F_TCC%GET_VIEW(BLOCK_INDEX)
( 1869)     IF (ASSOCIATED(SELF%F_10U))  SELF%P10U => SELF%F_10U%GET_VIEW(BLOCK_INDEX)
( 1870)     IF (ASSOCIATED(SELF%F_10V))  SELF%P10V => SELF%F_10V%GET_VIEW(BLOCK_INDEX)
( 1871)     IF (ASSOCIATED(SELF%F_2T))  SELF%P2T => SELF%F_2T%GET_VIEW(BLOCK_INDEX)
( 1872)     IF (ASSOCIATED(SELF%F_2D))  SELF%P2D => SELF%F_2D%GET_VIEW(BLOCK_INDEX)
( 1873)     IF (ASSOCIATED(SELF%F_2Q))  SELF%P2Q => SELF%F_2Q%GET_VIEW(BLOCK_INDEX)
( 1874)     IF (ASSOCIATED(SELF%F_SSR))  SELF%PSSR => SELF%F_SSR%GET_VIEW(BLOCK_INDEX)
( 1875)     IF (ASSOCIATED(SELF%F_STR))  SELF%PSTR => SELF%F_STR%GET_VIEW(BLOCK_INDEX)
( 1876)     IF (ASSOCIATED(SELF%F_TSR))  SELF%PTSR => SELF%F_TSR%GET_VIEW(BLOCK_INDEX)
( 1877)     IF (ASSOCIATED(SELF%F_TTR))  SELF%PTTR => SELF%F_TTR%GET_VIEW(BLOCK_INDEX)
( 1878)     IF (ASSOCIATED(SELF%F_EWSS))  SELF%PEWSS => SELF%F_EWSS%GET_VIEW(BLOCK_INDEX)
( 1879)     IF (ASSOCIATED(SELF%F_NSSS))  SELF%PNSSS => SELF%F_NSSS%GET_VIEW(BLOCK_INDEX)
( 1880)     IF (ASSOCIATED(SELF%F_E))  SELF%PE => SELF%F_E%GET_VIEW(BLOCK_INDEX)
( 1881)     IF (ASSOCIATED(SELF%F_PEV))  SELF%PPEV => SELF%F_PEV%GET_VIEW(BLOCK_INDEX)
( 1882)     IF (ASSOCIATED(SELF%F_CCC))  SELF%PCCC => SELF%F_CCC%GET_VIEW(BLOCK_INDEX)
( 1883)     IF (ASSOCIATED(SELF%F_LCC))  SELF%PLCC => SELF%F_LCC%GET_VIEW(BLOCK_INDEX)
( 1884)     IF (ASSOCIATED(SELF%F_MCC))  SELF%PMCC => SELF%F_MCC%GET_VIEW(BLOCK_INDEX)
( 1885)     IF (ASSOCIATED(SELF%F_HCC))  SELF%PHCC => SELF%F_HCC%GET_VIEW(BLOCK_INDEX)
( 1886)     IF (ASSOCIATED(SELF%F_LGWS))  SELF%PLGWS => SELF%F_LGWS%GET_VIEW(BLOCK_INDEX)
( 1887)     IF (ASSOCIATED(SELF%F_MGWS))  SELF%PMGWS => SELF%F_MGWS%GET_VIEW(BLOCK_INDEX)
( 1888)     IF (ASSOCIATED(SELF%F_GWD))  SELF%PGWD => SELF%F_GWD%GET_VIEW(BLOCK_INDEX)
( 1889)     IF (ASSOCIATED(SELF%F_MX2T))  SELF%PMX2T => SELF%F_MX2T%GET_VIEW(BLOCK_INDEX)
( 1890)     IF (ASSOCIATED(SELF%F_MN2T))  SELF%PMN2T => SELF%F_MN2T%GET_VIEW(BLOCK_INDEX)
( 1891)     IF (ALLOCATED(SELF%F_MX2T6)) THEN
( 1892)       DO I=1, SIZE(SELF%F_MX2T6)
( 1893)         SELF%PMX2T6(I)%P => SELF%F_MX2T6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1894)       END DO
( 1895)     END IF
( 1896)     IF (ALLOCATED(SELF%F_MN2T6)) THEN
( 1897)       DO I=1, SIZE(SELF%F_MN2T6)
( 1898)         SELF%PMN2T6(I)%P => SELF%F_MN2T6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1899)       END DO
( 1900)     END IF
( 1901)     IF (ASSOCIATED(SELF%F_RO))  SELF%PRO => SELF%F_RO%GET_VIEW(BLOCK_INDEX)
( 1902)     IF (ASSOCIATED(SELF%F_SRO))  SELF%PSRO => SELF%F_SRO%GET_VIEW(BLOCK_INDEX)
( 1903)     IF (ASSOCIATED(SELF%F_SSRO))  SELF%PSSRO => SELF%F_SSRO%GET_VIEW(BLOCK_INDEX)
( 1904)     IF (ASSOCIATED(SELF%F_ALB))  SELF%PALB => SELF%F_ALB%GET_VIEW(BLOCK_INDEX)
( 1905)     IF (ASSOCIATED(SELF%F_IEWSS))  SELF%PIEWSS => SELF%F_IEWSS%GET_VIEW(BLOCK_INDEX)
( 1906)     IF (ASSOCIATED(SELF%F_INSSS))  SELF%PINSSS => SELF%F_INSSS%GET_VIEW(BLOCK_INDEX)
( 1907)     IF (ASSOCIATED(SELF%F_ISSHF))  SELF%PISSHF => SELF%F_ISSHF%GET_VIEW(BLOCK_INDEX)
( 1908)     IF (ASSOCIATED(SELF%F_IE))  SELF%PIE => SELF%F_IE%GET_VIEW(BLOCK_INDEX)
( 1909)     IF (ASSOCIATED(SELF%F_INEE))  SELF%PINEE => SELF%F_INEE%GET_VIEW(BLOCK_INDEX)
( 1910)     IF (ASSOCIATED(SELF%F_IGPP))  SELF%PIGPP => SELF%F_IGPP%GET_VIEW(BLOCK_INDEX)
( 1911)     IF (ASSOCIATED(SELF%F_IREC))  SELF%PIREC => SELF%F_IREC%GET_VIEW(BLOCK_INDEX)
( 1912)     IF (ASSOCIATED(SELF%F_CSF))  SELF%PCSF => SELF%F_CSF%GET_VIEW(BLOCK_INDEX)
( 1913)     IF (ASSOCIATED(SELF%F_LSSF))  SELF%PLSSF => SELF%F_LSSF%GET_VIEW(BLOCK_INDEX)
( 1914)     IF (ASSOCIATED(SELF%F_MXTPR))  SELF%PMXTPR => SELF%F_MXTPR%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 77

( 1915)     IF (ASSOCIATED(SELF%F_MNTPR))  SELF%PMNTPR => SELF%F_MNTPR%GET_VIEW(BLOCK_INDEX)
( 1916)     IF (ALLOCATED(SELF%F_MXTPR6)) THEN
( 1917)       DO I=1, SIZE(SELF%F_MXTPR6)
( 1918)         SELF%PMXTPR6(I)%P => SELF%F_MXTPR6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1919)       END DO
( 1920)     END IF
( 1921)     IF (ALLOCATED(SELF%F_MNTPR6)) THEN
( 1922)       DO I=1, SIZE(SELF%F_MNTPR6)
( 1923)         SELF%PMNTPR6(I)%P => SELF%F_MNTPR6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1924)       END DO
( 1925)     END IF
( 1926)     IF (ASSOCIATED(SELF%F_TPR))  SELF%PTPR => SELF%F_TPR%GET_VIEW(BLOCK_INDEX)
( 1927)     IF (ASSOCIATED(SELF%F_LSRR))  SELF%PLSRR => SELF%F_LSRR%GET_VIEW(BLOCK_INDEX)
( 1928)     IF (ASSOCIATED(SELF%F_CRR))  SELF%PCRR => SELF%F_CRR%GET_VIEW(BLOCK_INDEX)
( 1929)     IF (ASSOCIATED(SELF%F_LSSFR))  SELF%PLSSFR => SELF%F_LSSFR%GET_VIEW(BLOCK_INDEX)
( 1930)     IF (ASSOCIATED(SELF%F_CSFR))  SELF%PCSFR => SELF%F_CSFR%GET_VIEW(BLOCK_INDEX)
( 1931)     IF (ASSOCIATED(SELF%F_PTYPE))  SELF%PPTYPE => SELF%F_PTYPE%GET_VIEW(BLOCK_INDEX)
( 1932)     IF (ASSOCIATED(SELF%F_ILSPF))  SELF%PILSPF => SELF%F_ILSPF%GET_VIEW(BLOCK_INDEX)
( 1933)     IF (ASSOCIATED(SELF%F_Z0F))  SELF%PZ0F => SELF%F_Z0F%GET_VIEW(BLOCK_INDEX)
( 1934)     IF (ASSOCIATED(SELF%F_LZ0H))  SELF%PLZ0H => SELF%F_LZ0H%GET_VIEW(BLOCK_INDEX)
( 1935)     IF (ASSOCIATED(SELF%F_VIWVE))  SELF%PVIWVE => SELF%F_VIWVE%GET_VIEW(BLOCK_INDEX)
( 1936)     IF (ASSOCIATED(SELF%F_VIWVN))  SELF%PVIWVN => SELF%F_VIWVN%GET_VIEW(BLOCK_INDEX)
( 1937)     IF (ASSOCIATED(SELF%F_TCW))  SELF%PTCW => SELF%F_TCW%GET_VIEW(BLOCK_INDEX)
( 1938)     IF (ASSOCIATED(SELF%F_TCWV))  SELF%PTCWV => SELF%F_TCWV%GET_VIEW(BLOCK_INDEX)
( 1939)     IF (ASSOCIATED(SELF%F_TCLW))  SELF%PTCLW => SELF%F_TCLW%GET_VIEW(BLOCK_INDEX)
( 1940)     IF (ASSOCIATED(SELF%F_TCIW))  SELF%PTCIW => SELF%F_TCIW%GET_VIEW(BLOCK_INDEX)
( 1941)     IF (ASSOCIATED(SELF%F_TCRW))  SELF%PTCRW => SELF%F_TCRW%GET_VIEW(BLOCK_INDEX)
( 1942)     IF (ASSOCIATED(SELF%F_TCSW))  SELF%PTCSW => SELF%F_TCSW%GET_VIEW(BLOCK_INDEX)
( 1943)     IF (ASSOCIATED(SELF%F_TCSLW))  SELF%PTCSLW => SELF%F_TCSLW%GET_VIEW(BLOCK_INDEX)
( 1944)     IF (ASSOCIATED(SELF%F_SSRD))  SELF%PSSRD => SELF%F_SSRD%GET_VIEW(BLOCK_INDEX)
( 1945)     IF (ASSOCIATED(SELF%F_STRD))  SELF%PSTRD => SELF%F_STRD%GET_VIEW(BLOCK_INDEX)
( 1946)     IF (ASSOCIATED(SELF%F_SSRDC))  SELF%PSSRDC => SELF%F_SSRDC%GET_VIEW(BLOCK_INDEX)
( 1947)     IF (ASSOCIATED(SELF%F_STRDC))  SELF%PSTRDC => SELF%F_STRDC%GET_VIEW(BLOCK_INDEX)
( 1948)     IF (ASSOCIATED(SELF%F_BLH))  SELF%PBLH => SELF%F_BLH%GET_VIEW(BLOCK_INDEX)
( 1949)     IF (ASSOCIATED(SELF%F_SUND))  SELF%PSUND => SELF%F_SUND%GET_VIEW(BLOCK_INDEX)
( 1950)     IF (ASSOCIATED(SELF%F_SPAR))  SELF%PSPAR => SELF%F_SPAR%GET_VIEW(BLOCK_INDEX)
( 1951)     IF (ASSOCIATED(SELF%F_SUVB))  SELF%PSUVB => SELF%F_SUVB%GET_VIEW(BLOCK_INDEX)
( 1952)     IF (ASSOCIATED(SELF%F_SFDIR))  SELF%PSFDIR => SELF%F_SFDIR%GET_VIEW(BLOCK_INDEX)
( 1953)     IF (ASSOCIATED(SELF%F_SCDIR))  SELF%PSCDIR => SELF%F_SCDIR%GET_VIEW(BLOCK_INDEX)
( 1954)     IF (ASSOCIATED(SELF%F_SDSRP))  SELF%PSDSRP => SELF%F_SDSRP%GET_VIEW(BLOCK_INDEX)
( 1955)     IF (ASSOCIATED(SELF%F_CAPE))  SELF%PCAPE => SELF%F_CAPE%GET_VIEW(BLOCK_INDEX)
( 1956)     IF (ASSOCIATED(SELF%F_CAPES))  SELF%PCAPES => SELF%F_CAPES%GET_VIEW(BLOCK_INDEX)
( 1957)     IF (ALLOCATED(SELF%F_MXCAP6)) THEN
( 1958)       DO I=1, SIZE(SELF%F_MXCAP6)
( 1959)         SELF%PMXCAP6(I)%P => SELF%F_MXCAP6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1960)       END DO
( 1961)     END IF
( 1962)     IF (ALLOCATED(SELF%F_MXCAPS6)) THEN
( 1963)       DO I=1, SIZE(SELF%F_MXCAPS6)
( 1964)         SELF%PMXCAPS6(I)%P => SELF%F_MXCAPS6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1965)       END DO
( 1966)     END IF
( 1967)     IF (ASSOCIATED(SELF%F_TSRC))  SELF%PTSRC => SELF%F_TSRC%GET_VIEW(BLOCK_INDEX)
( 1968)     IF (ASSOCIATED(SELF%F_TTRC))  SELF%PTTRC => SELF%F_TTRC%GET_VIEW(BLOCK_INDEX)
( 1969)     IF (ASSOCIATED(SELF%F_SSRC))  SELF%PSSRC => SELF%F_SSRC%GET_VIEW(BLOCK_INDEX)
( 1970)     IF (ASSOCIATED(SELF%F_STRC))  SELF%PSTRC => SELF%F_STRC%GET_VIEW(BLOCK_INDEX)
( 1971)     IF (ASSOCIATED(SELF%F_ES))  SELF%PES => SELF%F_ES%GET_VIEW(BLOCK_INDEX)
( 1972)     IF (ASSOCIATED(SELF%F_SMLT))  SELF%PSMLT => SELF%F_SMLT%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 78

( 1973)     IF (ASSOCIATED(SELF%F_10FG))  SELF%P10FG => SELF%F_10FG%GET_VIEW(BLOCK_INDEX)
( 1974)     IF (ALLOCATED(SELF%F_10FG6)) THEN
( 1975)       DO I=1, SIZE(SELF%F_10FG6)
( 1976)         SELF%P10FG6(I)%P => SELF%F_10FG6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1977)       END DO
( 1978)     END IF
( 1979)     IF (ASSOCIATED(SELF%F_10FGCV))  SELF%P10FGCV => SELF%F_10FGCV%GET_VIEW(BLOCK_INDEX)
( 1980)     IF (ASSOCIATED(SELF%F_I10FG))  SELF%PI10FG => SELF%F_I10FG%GET_VIEW(BLOCK_INDEX)
( 1981)     IF (ASSOCIATED(SELF%F_LSPF))  SELF%PLSPF => SELF%F_LSPF%GET_VIEW(BLOCK_INDEX)
( 1982)     IF (ASSOCIATED(SELF%F_TCO3))  SELF%PTCO3 => SELF%F_TCO3%GET_VIEW(BLOCK_INDEX)
( 1983)     IF (ASSOCIATED(SELF%F_VIMD))  SELF%PVIMD => SELF%F_VIMD%GET_VIEW(BLOCK_INDEX)
( 1984)     IF (ASSOCIATED(SELF%F_SPARC))  SELF%PSPARC => SELF%F_SPARC%GET_VIEW(BLOCK_INDEX)
( 1985)     IF (ASSOCIATED(SELF%F_STINC))  SELF%PSTINC => SELF%F_STINC%GET_VIEW(BLOCK_INDEX)
( 1986)     IF (ASSOCIATED(SELF%F_CBASE))  SELF%PCBASE => SELF%F_CBASE%GET_VIEW(BLOCK_INDEX)
( 1987)     IF (ASSOCIATED(SELF%F_0DEGL))  SELF%P0DEGL => SELF%F_0DEGL%GET_VIEW(BLOCK_INDEX)
( 1988)     IF (ASSOCIATED(SELF%F_VISIH))  SELF%PVISIH => SELF%F_VISIH%GET_VIEW(BLOCK_INDEX)
( 1989)     IF (ASSOCIATED(SELF%F_CIN))  SELF%PCIN => SELF%F_CIN%GET_VIEW(BLOCK_INDEX)
( 1990)     IF (ASSOCIATED(SELF%F_KINDEX))  SELF%PKINDEX => SELF%F_KINDEX%GET_VIEW(BLOCK_INDEX)
( 1991)     IF (ASSOCIATED(SELF%F_TTINDEX))  SELF%PTTINDEX => SELF%F_TTINDEX%GET_VIEW(BLOCK_INDEX)
( 1992)     IF (ASSOCIATED(SELF%F_CBASEA))  SELF%PCBASEA => SELF%F_CBASEA%GET_VIEW(BLOCK_INDEX)
( 1993)     IF (ASSOCIATED(SELF%F_CTOPC))  SELF%PCTOPC => SELF%F_CTOPC%GET_VIEW(BLOCK_INDEX)
( 1994)     IF (ASSOCIATED(SELF%F_ZTWETB0))  SELF%PZTWETB0 => SELF%F_ZTWETB0%GET_VIEW(BLOCK_INDEX)
( 1995)     IF (ASSOCIATED(SELF%F_ZTWETB1))  SELF%PZTWETB1 => SELF%F_ZTWETB1%GET_VIEW(BLOCK_INDEX)
( 1996)     IF (ALLOCATED(SELF%F_TCGHG)) THEN
( 1997)       DO I=1, SIZE(SELF%F_TCGHG)
( 1998)         SELF%PTCGHG(I)%P => SELF%F_TCGHG(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 1999)       END DO
( 2000)     END IF
( 2001)     IF (ALLOCATED(SELF%F_TCCHEM)) THEN
( 2002)       DO I=1, SIZE(SELF%F_TCCHEM)
( 2003)         SELF%PTCCHEM(I)%P => SELF%F_TCCHEM(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 2004)       END DO
( 2005)     END IF
( 2006)     IF (ALLOCATED(SELF%F_AERODIAG)) THEN
( 2007)       DO J=1, SIZE(SELF%F_AERODIAG, DIM=2)
( 2008)         DO I=1, SIZE(SELF%F_AERODIAG, DIM=1)
( 2009)           SELF%PAERODIAG(I,J)%P => SELF%F_AERODIAG(I,J)%PTR%GET_VIEW(BLOCK_INDEX)
( 2010)         END DO
( 2011)       END DO
( 2012)     END IF
( 2013)     IF (ALLOCATED(SELF%F_AERO_WVL_DIAG)) THEN
( 2014)       DO J=1, SIZE(SELF%F_AERO_WVL_DIAG, DIM=2)
( 2015)         DO I=1, SIZE(SELF%F_AERO_WVL_DIAG, DIM=1)
( 2016)           SELF%PAERO_WVL_DIAG(I,J)%P => SELF%F_AERO_WVL_DIAG(I,J)%PTR%GET_VIEW(BLOCK_INDEX)
( 2017)         END DO
( 2018)       END DO
( 2019)     END IF
( 2020)     IF (ASSOCIATED(SELF%F_100U))  SELF%P100U => SELF%F_100U%GET_VIEW(BLOCK_INDEX)
( 2021)     IF (ASSOCIATED(SELF%F_100V))  SELF%P100V => SELF%F_100V%GET_VIEW(BLOCK_INDEX)
( 2022)     IF (ASSOCIATED(SELF%F_200U))  SELF%P200U => SELF%F_200U%GET_VIEW(BLOCK_INDEX)
( 2023)     IF (ASSOCIATED(SELF%F_200V))  SELF%P200V => SELF%F_200V%GET_VIEW(BLOCK_INDEX)
( 2024)     IF (ASSOCIATED(SELF%F_ZUST))  SELF%PZUST => SELF%F_ZUST%GET_VIEW(BLOCK_INDEX)
( 2025)     IF (ASSOCIATED(SELF%F_10NU))  SELF%P10NU => SELF%F_10NU%GET_VIEW(BLOCK_INDEX)
( 2026)     IF (ASSOCIATED(SELF%F_10NV))  SELF%P10NV => SELF%F_10NV%GET_VIEW(BLOCK_INDEX)
( 2027)     IF (ASSOCIATED(SELF%F_DNDZN))  SELF%PDNDZN => SELF%F_DNDZN%GET_VIEW(BLOCK_INDEX)
( 2028)     IF (ASSOCIATED(SELF%F_DNDZA))  SELF%PDNDZA => SELF%F_DNDZA%GET_VIEW(BLOCK_INDEX)
( 2029)     IF (ASSOCIATED(SELF%F_DCTB))  SELF%PDCTB => SELF%F_DCTB%GET_VIEW(BLOCK_INDEX)
( 2030)     IF (ASSOCIATED(SELF%F_TPLB))  SELF%PTPLB => SELF%F_TPLB%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 79

( 2031)     IF (ASSOCIATED(SELF%F_TPLT))  SELF%PTPLT => SELF%F_TPLT%GET_VIEW(BLOCK_INDEX)
( 2032)     IF (ASSOCIATED(SELF%F_ODSS))  SELF%PODSS => SELF%F_ODSS%GET_VIEW(BLOCK_INDEX)
( 2033)     IF (ASSOCIATED(SELF%F_ODDU))  SELF%PODDU => SELF%F_ODDU%GET_VIEW(BLOCK_INDEX)
( 2034)     IF (ASSOCIATED(SELF%F_ODOM))  SELF%PODOM => SELF%F_ODOM%GET_VIEW(BLOCK_INDEX)
( 2035)     IF (ASSOCIATED(SELF%F_ODBC))  SELF%PODBC => SELF%F_ODBC%GET_VIEW(BLOCK_INDEX)
( 2036)     IF (ASSOCIATED(SELF%F_ODSU))  SELF%PODSU => SELF%F_ODSU%GET_VIEW(BLOCK_INDEX)
( 2037)     IF (ASSOCIATED(SELF%F_ODNI))  SELF%PODNI => SELF%F_ODNI%GET_VIEW(BLOCK_INDEX)
( 2038)     IF (ASSOCIATED(SELF%F_ODAM))  SELF%PODAM => SELF%F_ODAM%GET_VIEW(BLOCK_INDEX)
( 2039)     IF (ASSOCIATED(SELF%F_ODSOA))  SELF%PODSOA => SELF%F_ODSOA%GET_VIEW(BLOCK_INDEX)
( 2040)     IF (ASSOCIATED(SELF%F_ODVFA))  SELF%PODVFA => SELF%F_ODVFA%GET_VIEW(BLOCK_INDEX)
( 2041)     IF (ASSOCIATED(SELF%F_ODVSU))  SELF%PODVSU => SELF%F_ODVSU%GET_VIEW(BLOCK_INDEX)
( 2042)     IF (ASSOCIATED(SELF%F_ODTOACC))  SELF%PODTOACC => SELF%F_ODTOACC%GET_VIEW(BLOCK_INDEX)
( 2043)     IF (ASSOCIATED(SELF%F_AEPM1))  SELF%PAEPM1 => SELF%F_AEPM1%GET_VIEW(BLOCK_INDEX)
( 2044)     IF (ASSOCIATED(SELF%F_AEPM25))  SELF%PAEPM25 => SELF%F_AEPM25%GET_VIEW(BLOCK_INDEX)
( 2045)     IF (ASSOCIATED(SELF%F_AEPM10))  SELF%PAEPM10 => SELF%F_AEPM10%GET_VIEW(BLOCK_INDEX)
( 2046)     IF (ASSOCIATED(SELF%F_UVBED))  SELF%PUVBED => SELF%F_UVBED%GET_VIEW(BLOCK_INDEX)
( 2047)     IF (ASSOCIATED(SELF%F_UVBEDCS))  SELF%PUVBEDCS => SELF%F_UVBEDCS%GET_VIEW(BLOCK_INDEX)
( 2048)     IF (ASSOCIATED(SELF%F_LITOTI))  SELF%PLITOTI => SELF%F_LITOTI%GET_VIEW(BLOCK_INDEX)
( 2049)     IF (ASSOCIATED(SELF%F_LICGI))  SELF%PLICGI => SELF%F_LICGI%GET_VIEW(BLOCK_INDEX)
( 2050)     IF (ALLOCATED(SELF%F_LITOTA6)) THEN
( 2051)       DO I=1, SIZE(SELF%F_LITOTA6)
( 2052)         SELF%PLITOTA6(I)%P => SELF%F_LITOTA6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 2053)       END DO
( 2054)     END IF
( 2055)     IF (ALLOCATED(SELF%F_LICGA6)) THEN
( 2056)       DO I=1, SIZE(SELF%F_LICGA6)
( 2057)         SELF%PLICGA6(I)%P => SELF%F_LICGA6(I)%PTR%GET_VIEW(BLOCK_INDEX)
( 2058)       END DO
( 2059)     END IF
( 2060) # 2061 "surface_views_diagnostic_module.F90"
( 2061)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2062)   END SUBROUTINE SURFACE_VIEW_GROUP_VDIAG_UPDATE_VIEW
( 2063) # 2064 "surface_views_diagnostic_module.F90"
( 2064)   SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_INIT(SELF, VARIABLE_GROUP)
( 2065)     ! Constructor of the array view type for a surface variable group
( 2066)     CLASS(SURFACE_VIEW_GROUP_SATSIM) :: SELF
( 2067)     TYPE(SURFACE_VARIABLE_GROUP_SATSIM), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2068)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2069) # 2070 "surface_views_diagnostic_module.F90"
( 2070)     ! Create a view for the "T0" field only for diagnostic fields
( 2071)     SELF%F_CLBT => VARIABLE_GROUP%VCLBT%FT0
( 2072)     SELF%F_CSBT => VARIABLE_GROUP%VCSBT%FT0
( 2073)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2074)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2075)   END SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_INIT
( 2076) # 2077 "surface_views_diagnostic_module.F90"
( 2077)   SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2078)     ! Extract local array views from field objects
( 2079)     CLASS(SURFACE_VIEW_GROUP_SATSIM) :: SELF
( 2080)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2081)     INTEGER(KIND=JPIM) :: I, J
( 2082) # 2083 "surface_views_diagnostic_module.F90"
( 2083)     ! Set up the view pointer for the "T0" field
( 2084)     IF (ASSOCIATED(SELF%F_CLBT))  SELF%PCLBT => SELF%F_CLBT%GET_VIEW(BLOCK_INDEX)
( 2085)     IF (ASSOCIATED(SELF%F_CSBT))  SELF%PCSBT => SELF%F_CSBT%GET_VIEW(BLOCK_INDEX)
( 2086) # 2087 "surface_views_diagnostic_module.F90"
( 2087)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2088)   END SUBROUTINE SURFACE_VIEW_GROUP_SATSIM_UPDATE_VIEW






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 80

( 2089) # 2090 "surface_views_diagnostic_module.F90"
( 2090)   SUBROUTINE SURFACE_VIEW_GROUP_WAVES_INIT(SELF, VARIABLE_GROUP)
( 2091)     ! Constructor of the array view type for a surface variable group
( 2092)     CLASS(SURFACE_VIEW_GROUP_WAVES) :: SELF
( 2093)     TYPE(SURFACE_VARIABLE_GROUP_WAVES), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2094)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2095) # 2096 "surface_views_diagnostic_module.F90"
( 2096)     ! Create a view for the "T0" field only for diagnostic fields
( 2097)     SELF%F_CHAR => VARIABLE_GROUP%VCHAR%FT0
( 2098)     SELF%F_USTOKES => VARIABLE_GROUP%VUSTOKES%FT0
( 2099)     SELF%F_VSTOKES => VARIABLE_GROUP%VVSTOKES%FT0
( 2100)     SELF%F_PHIOC => VARIABLE_GROUP%VPHIOC%FT0
( 2101)     SELF%F_PHIAW => VARIABLE_GROUP%VPHIAW%FT0
( 2102)     SELF%F_TAUOC => VARIABLE_GROUP%VTAUOC%FT0
( 2103)     SELF%F_EMEAN => VARIABLE_GROUP%VEMEAN%FT0
( 2104)     SELF%F_FMEAN => VARIABLE_GROUP%VFMEAN%FT0
( 2105)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2106)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2107)   END SUBROUTINE SURFACE_VIEW_GROUP_WAVES_INIT
( 2108) # 2109 "surface_views_diagnostic_module.F90"
( 2109)   SUBROUTINE SURFACE_VIEW_GROUP_WAVES_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2110)     ! Extract local array views from field objects
( 2111)     CLASS(SURFACE_VIEW_GROUP_WAVES) :: SELF
( 2112)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2113)     INTEGER(KIND=JPIM) :: I, J
( 2114) # 2115 "surface_views_diagnostic_module.F90"
( 2115)     ! Set up the view pointer for the "T0" field
( 2116)     IF (ASSOCIATED(SELF%F_CHAR))  SELF%PCHAR => SELF%F_CHAR%GET_VIEW(BLOCK_INDEX)
( 2117)     IF (ASSOCIATED(SELF%F_USTOKES))  SELF%PUSTOKES => SELF%F_USTOKES%GET_VIEW(BLOCK_INDEX)
( 2118)     IF (ASSOCIATED(SELF%F_VSTOKES))  SELF%PVSTOKES => SELF%F_VSTOKES%GET_VIEW(BLOCK_INDEX)
( 2119)     IF (ASSOCIATED(SELF%F_PHIOC))  SELF%PPHIOC => SELF%F_PHIOC%GET_VIEW(BLOCK_INDEX)
( 2120)     IF (ASSOCIATED(SELF%F_PHIAW))  SELF%PPHIAW => SELF%F_PHIAW%GET_VIEW(BLOCK_INDEX)
( 2121)     IF (ASSOCIATED(SELF%F_TAUOC))  SELF%PTAUOC => SELF%F_TAUOC%GET_VIEW(BLOCK_INDEX)
( 2122)     IF (ASSOCIATED(SELF%F_EMEAN))  SELF%PEMEAN => SELF%F_EMEAN%GET_VIEW(BLOCK_INDEX)
( 2123)     IF (ASSOCIATED(SELF%F_FMEAN))  SELF%PFMEAN => SELF%F_FMEAN%GET_VIEW(BLOCK_INDEX)
( 2124) # 2125 "surface_views_diagnostic_module.F90"
( 2125)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2126)   END SUBROUTINE SURFACE_VIEW_GROUP_WAVES_UPDATE_VIEW
( 2127) # 2128 "surface_views_diagnostic_module.F90"
( 2128)   SUBROUTINE SURFACE_VIEW_GROUP_WAM_INIT(SELF, VARIABLE_GROUP)
( 2129)     ! Constructor of the array view type for a surface variable group
( 2130)     CLASS(SURFACE_VIEW_GROUP_WAM) :: SELF
( 2131)     TYPE(SURFACE_VARIABLE_GROUP_WAM), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2132)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2133) # 2134 "surface_views_diagnostic_module.F90"
( 2134)     ! Create a view for the "T0" field only for diagnostic fields
( 2135)     SELF%F_U10N => VARIABLE_GROUP%VU10N%FT0
( 2136)     SELF%F_V10N => VARIABLE_GROUP%VV10N%FT0
( 2137)     SELF%F_RHO => VARIABLE_GROUP%VRHO%FT0
( 2138)     SELF%F_ZIL => VARIABLE_GROUP%VZIL%FT0
( 2139)     SELF%F_CIF => VARIABLE_GROUP%VCIF%FT0
( 2140)     SELF%F_CLK => VARIABLE_GROUP%VCLK%FT0
( 2141)     SELF%F_UCURW => VARIABLE_GROUP%VUCURW%FT0
( 2142)     SELF%F_VCURW => VARIABLE_GROUP%VVCURW%FT0
( 2143)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2144)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2145)   END SUBROUTINE SURFACE_VIEW_GROUP_WAM_INIT
( 2146) # 2147 "surface_views_diagnostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 81

( 2147)   SUBROUTINE SURFACE_VIEW_GROUP_WAM_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2148)     ! Extract local array views from field objects
( 2149)     CLASS(SURFACE_VIEW_GROUP_WAM) :: SELF
( 2150)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2151)     INTEGER(KIND=JPIM) :: I, J
( 2152) # 2153 "surface_views_diagnostic_module.F90"
( 2153)     ! Set up the view pointer for the "T0" field
( 2154)     IF (ASSOCIATED(SELF%F_U10N))  SELF%PU10N => SELF%F_U10N%GET_VIEW(BLOCK_INDEX)
( 2155)     IF (ASSOCIATED(SELF%F_V10N))  SELF%PV10N => SELF%F_V10N%GET_VIEW(BLOCK_INDEX)
( 2156)     IF (ASSOCIATED(SELF%F_RHO))  SELF%PRHO => SELF%F_RHO%GET_VIEW(BLOCK_INDEX)
( 2157)     IF (ASSOCIATED(SELF%F_ZIL))  SELF%PZIL => SELF%F_ZIL%GET_VIEW(BLOCK_INDEX)
( 2158)     IF (ASSOCIATED(SELF%F_CIF))  SELF%PCIF => SELF%F_CIF%GET_VIEW(BLOCK_INDEX)
( 2159)     IF (ASSOCIATED(SELF%F_CLK))  SELF%PCLK => SELF%F_CLK%GET_VIEW(BLOCK_INDEX)
( 2160)     IF (ASSOCIATED(SELF%F_UCURW))  SELF%PUCURW => SELF%F_UCURW%GET_VIEW(BLOCK_INDEX)
( 2161)     IF (ASSOCIATED(SELF%F_VCURW))  SELF%PVCURW => SELF%F_VCURW%GET_VIEW(BLOCK_INDEX)
( 2162) # 2163 "surface_views_diagnostic_module.F90"
( 2163)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2164)   END SUBROUTINE SURFACE_VIEW_GROUP_WAM_UPDATE_VIEW
( 2165) # 2166 "surface_views_diagnostic_module.F90"
( 2166)   SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_INIT(SELF, VARIABLE_GROUP)
( 2167)     ! Constructor of the array view type for a surface variable group
( 2168)     CLASS(SURFACE_VIEW_GROUP_PRECFRAC) :: SELF
( 2169)     TYPE(SURFACE_VARIABLE_GROUP_PRECFRAC), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2170)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2171) # 2172 "surface_views_diagnostic_module.F90"
( 2172)     ! Create a view for the "T0" field only for diagnostic fields
( 2173)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2174)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2175)   END SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_INIT
( 2176) # 2177 "surface_views_diagnostic_module.F90"
( 2177)   SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2178)     ! Extract local array views from field objects
( 2179)     CLASS(SURFACE_VIEW_GROUP_PRECFRAC) :: SELF
( 2180)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2181)     INTEGER(KIND=JPIM) :: I, J
( 2182) # 2183 "surface_views_diagnostic_module.F90"
( 2183)     ! Set up the view pointer for the "T0" field
( 2184) # 2185 "surface_views_diagnostic_module.F90"
( 2185)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2186)   END SUBROUTINE SURFACE_VIEW_GROUP_PRECFRAC_UPDATE_VIEW
( 2187) # 2188 "surface_views_diagnostic_module.F90"
( 2188)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_INIT(SELF, VARIABLE_GROUP)
( 2189)     ! Constructor of the array view type for a surface variable group
( 2190)     CLASS(SURFACE_VIEW_GROUP_VEXTRA) :: SELF
( 2191)     TYPE(SURFACE_VARIABLE_GROUP_VEXTRA), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2192)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2193) # 2194 "surface_views_diagnostic_module.F90"
( 2194)     ! Create a view for the "T0" field only for diagnostic fields
( 2195)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2196)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2197)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_INIT
( 2198) # 2199 "surface_views_diagnostic_module.F90"
( 2199)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2200)     ! Extract local array views from field objects
( 2201)     CLASS(SURFACE_VIEW_GROUP_VEXTRA) :: SELF
( 2202)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2203)     INTEGER(KIND=JPIM) :: I, J
( 2204) # 2205 "surface_views_diagnostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 82

( 2205)     ! Set up the view pointer for the "T0" field
( 2206) # 2207 "surface_views_diagnostic_module.F90"
( 2207)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2208)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRA_UPDATE_VIEW
( 2209) # 2210 "surface_views_diagnostic_module.F90"
( 2210)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_INIT(SELF, VARIABLE_GROUP)
( 2211)     ! Constructor of the array view type for a surface variable group
( 2212)     CLASS(SURFACE_VIEW_GROUP_VEXTRDI) :: SELF
( 2213)     TYPE(SURFACE_VARIABLE_GROUP_VEXTRDI), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2214)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2215) # 2216 "surface_views_diagnostic_module.F90"
( 2216)     ! Create a view for the "T0" field only for diagnostic fields
( 2217)     SELF%F_XEDR => VARIABLE_GROUP%VXEDR%FT0
( 2218)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2219)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2220)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_INIT
( 2221) # 2222 "surface_views_diagnostic_module.F90"
( 2222)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2223)     ! Extract local array views from field objects
( 2224)     CLASS(SURFACE_VIEW_GROUP_VEXTRDI) :: SELF
( 2225)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2226)     INTEGER(KIND=JPIM) :: I, J
( 2227) # 2228 "surface_views_diagnostic_module.F90"
( 2228)     ! Set up the view pointer for the "T0" field
( 2229)     IF (ASSOCIATED(SELF%F_XEDR))  SELF%PXEDR => SELF%F_XEDR%GET_VIEW(BLOCK_INDEX)
( 2230) # 2231 "surface_views_diagnostic_module.F90"
( 2231)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2232)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTRDI_UPDATE_VIEW
( 2233) # 2234 "surface_views_diagnostic_module.F90"
( 2234)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_INIT(SELF, VARIABLE_GROUP)
( 2235)     ! Constructor of the array view type for a surface variable group
( 2236)     CLASS(SURFACE_VIEW_GROUP_VPRECIP) :: SELF
( 2237)     TYPE(SURFACE_VARIABLE_GROUP_VPRECIP), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2238)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2239) # 2240 "surface_views_diagnostic_module.F90"
( 2240)     ! Create a view for the "T0" field only for diagnostic fields
( 2241)     SELF%F_PRECIP => VARIABLE_GROUP%VPRECIP%FT0
( 2242)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2243)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2244)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_INIT
( 2245) # 2246 "surface_views_diagnostic_module.F90"
( 2246)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2247)     ! Extract local array views from field objects
( 2248)     CLASS(SURFACE_VIEW_GROUP_VPRECIP) :: SELF
( 2249)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2250)     INTEGER(KIND=JPIM) :: I, J
( 2251) # 2252 "surface_views_diagnostic_module.F90"
( 2252)     ! Set up the view pointer for the "T0" field
( 2253)     IF (ASSOCIATED(SELF%F_PRECIP))  SELF%PPRECIP => SELF%F_PRECIP%GET_VIEW(BLOCK_INDEX)
( 2254) # 2255 "surface_views_diagnostic_module.F90"
( 2255)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2256)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP_UPDATE_VIEW
( 2257) # 2258 "surface_views_diagnostic_module.F90"
( 2258)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_INIT(SELF, VARIABLE_GROUP)
( 2259)     ! Constructor of the array view type for a surface variable group
( 2260)     CLASS(SURFACE_VIEW_GROUP_VPRECIP2) :: SELF
( 2261)     TYPE(SURFACE_VARIABLE_GROUP_VPRECIP2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2262)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 83

( 2263) # 2264 "surface_views_diagnostic_module.F90"
( 2264)     ! Create a view for the "T0" field only for diagnostic fields
( 2265)     SELF%F_PRECIP2 => VARIABLE_GROUP%VPRECIP2%FT0
( 2266)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2267)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2268)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_INIT
( 2269) # 2270 "surface_views_diagnostic_module.F90"
( 2270)   SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2271)     ! Extract local array views from field objects
( 2272)     CLASS(SURFACE_VIEW_GROUP_VPRECIP2) :: SELF
( 2273)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2274)     INTEGER(KIND=JPIM) :: I, J
( 2275) # 2276 "surface_views_diagnostic_module.F90"
( 2276)     ! Set up the view pointer for the "T0" field
( 2277)     IF (ASSOCIATED(SELF%F_PRECIP2))  SELF%PPRECIP2 => SELF%F_PRECIP2%GET_VIEW(BLOCK_INDEX)
( 2278) # 2279 "surface_views_diagnostic_module.F90"
( 2279)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2280)   END SUBROUTINE SURFACE_VIEW_GROUP_VPRECIP2_UPDATE_VIEW
( 2281) # 2282 "surface_views_diagnostic_module.F90"
( 2282)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_INIT(SELF, VARIABLE_GROUP)
( 2283)     ! Constructor of the array view type for a surface variable group
( 2284)     CLASS(SURFACE_VIEW_GROUP_VEXTR2) :: SELF
( 2285)     TYPE(SURFACE_VARIABLE_GROUP_VEXTR2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2286)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2287) # 2288 "surface_views_diagnostic_module.F90"
( 2288)     ! Create a view for the "T0" field only for diagnostic fields
( 2289)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2290)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2291)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_INIT
( 2292) # 2293 "surface_views_diagnostic_module.F90"
( 2293)   SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2294)     ! Extract local array views from field objects
( 2295)     CLASS(SURFACE_VIEW_GROUP_VEXTR2) :: SELF
( 2296)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2297)     INTEGER(KIND=JPIM) :: I, J
( 2298) # 2299 "surface_views_diagnostic_module.F90"
( 2299)     ! Set up the view pointer for the "T0" field
( 2300) # 2301 "surface_views_diagnostic_module.F90"
( 2301)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2302)   END SUBROUTINE SURFACE_VIEW_GROUP_VEXTR2_UPDATE_VIEW
( 2303) # 2304 "surface_views_diagnostic_module.F90"
( 2304)   SUBROUTINE SURFACE_VIEW_GROUP_SFORC_INIT(SELF, VARIABLE_GROUP)
( 2305)     ! Constructor of the array view type for a surface variable group
( 2306)     CLASS(SURFACE_VIEW_GROUP_SFORC) :: SELF
( 2307)     TYPE(SURFACE_VARIABLE_GROUP_SFORC), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2308)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2309) # 2310 "surface_views_diagnostic_module.F90"
( 2310)     ! Create a view for the "T0" field only for diagnostic fields
( 2311)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2312)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2313)   END SUBROUTINE SURFACE_VIEW_GROUP_SFORC_INIT
( 2314) # 2315 "surface_views_diagnostic_module.F90"
( 2315)   SUBROUTINE SURFACE_VIEW_GROUP_SFORC_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2316)     ! Extract local array views from field objects
( 2317)     CLASS(SURFACE_VIEW_GROUP_SFORC) :: SELF
( 2318)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2319)     INTEGER(KIND=JPIM) :: I, J
( 2320) # 2321 "surface_views_diagnostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 84

( 2321)     ! Set up the view pointer for the "T0" field
( 2322) # 2323 "surface_views_diagnostic_module.F90"
( 2323)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2324)   END SUBROUTINE SURFACE_VIEW_GROUP_SFORC_UPDATE_VIEW
( 2325) # 2326 "surface_views_diagnostic_module.F90"
( 2326)   SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_INIT(SELF, VARIABLE_GROUP)
( 2327)     ! Constructor of the array view type for a surface variable group
( 2328)     CLASS(SURFACE_VIEW_GROUP_SFLUX) :: SELF
( 2329)     TYPE(SURFACE_VARIABLE_GROUP_SFLUX), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2330)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2331) # 2332 "surface_views_diagnostic_module.F90"
( 2332)     ! Create a view for the "T0" field only for diagnostic fields
( 2333)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2334)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2335)   END SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_INIT
( 2336) # 2337 "surface_views_diagnostic_module.F90"
( 2337)   SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2338)     ! Extract local array views from field objects
( 2339)     CLASS(SURFACE_VIEW_GROUP_SFLUX) :: SELF
( 2340)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2341)     INTEGER(KIND=JPIM) :: I, J
( 2342) # 2343 "surface_views_diagnostic_module.F90"
( 2343)     ! Set up the view pointer for the "T0" field
( 2344) # 2345 "surface_views_diagnostic_module.F90"
( 2345)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2346)   END SUBROUTINE SURFACE_VIEW_GROUP_SFLUX_UPDATE_VIEW
( 2347) # 2348 "surface_views_diagnostic_module.F90"
( 2348)   SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_INIT(SELF, VARIABLE_GROUP)
( 2349)     ! Constructor of the array view type for a surface variable group
( 2350)     CLASS(SURFACE_VIEW_GROUP_VO3ABC) :: SELF
( 2351)     TYPE(SURFACE_VARIABLE_GROUP_VO3ABC), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
( 2352)     INTEGER(KIND=JPIM) :: I, J, MYSHAPE(2)
( 2353) # 2354 "surface_views_diagnostic_module.F90"
( 2354)     ! Create a view for the "T0" field only for diagnostic fields
( 2355)     SELF%F_A => VARIABLE_GROUP%VA%FT0
( 2356)     SELF%F_B => VARIABLE_GROUP%VB%FT0
( 2357)     SELF%F_C => VARIABLE_GROUP%VC%FT0
( 2358)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
( 2359)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
( 2360)   END SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_INIT
( 2361) # 2362 "surface_views_diagnostic_module.F90"
( 2362)   SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 2363)     ! Extract local array views from field objects
( 2364)     CLASS(SURFACE_VIEW_GROUP_VO3ABC) :: SELF
( 2365)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 2366)     INTEGER(KIND=JPIM) :: I, J
( 2367) # 2368 "surface_views_diagnostic_module.F90"
( 2368)     ! Set up the view pointer for the "T0" field
( 2369)     IF (ASSOCIATED(SELF%F_A))  SELF%PA => SELF%F_A%GET_VIEW(BLOCK_INDEX)
( 2370)     IF (ASSOCIATED(SELF%F_B))  SELF%PB => SELF%F_B%GET_VIEW(BLOCK_INDEX)
( 2371)     IF (ASSOCIATED(SELF%F_C))  SELF%PC => SELF%F_C%GET_VIEW(BLOCK_INDEX)
( 2372) # 2373 "surface_views_diagnostic_module.F90"
( 2373)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
( 2374)   END SUBROUTINE SURFACE_VIEW_GROUP_VO3ABC_UPDATE_VIEW
( 2375) # 2376 "surface_views_diagnostic_module.F90"
( 2376)   
( 2377) END MODULE SURFACE_VIEWS_DIAGNOSTIC_MODULE
