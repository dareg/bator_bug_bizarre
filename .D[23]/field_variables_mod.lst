


NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: field_variables_mod.F90

(    1)  
(    2) 
(    3) MODULE FIELD_VARIABLES_MOD
(    4)   ! The FIELD_VARIABLES type provides namespaced access to all core
(    5)   ! VARIABLE objects used.
(    6)   !
(    7)   ! These VARIABLE objects are currently wrappers around GMV and GFL
(    8)   ! fields and provide accessor methods to the individual FIELD
(    9)   ! storage objects and NPROMA array views (sub-array blocks) in
(   10)   ! OpenMP loops. The FIELD_VARIABLES%UPDATE_VIEW(BLOCK_INDEX) utility
(   11)   ! ensures that all block pointers provided by the stored variable
(   12)   ! objects are pointing to the correct sub-arrry block.
(   13) 
(   14) USE PARKIND1, ONLY: JPIM, JPRB
(   15) USE VARIABLE_MODULE, ONLY: VARIABLE_2D, VARIABLE_3D, VARIABLE_4D
(   16) USE VARIABLE_MODULE, ONLY: VARIABLE_3D_PTR
(   17) 
(   18) IMPLICIT NONE
(   19) 
(   20) TYPE GEOMETRY_VARIABLES
(   21) 
(   22)   ! Variables for arrays specific to the geometry
(   23)   TYPE(VARIABLE_2D) :: RCORI
(   24)   TYPE(VARIABLE_2D) :: RCORIC
(   25)   TYPE(VARIABLE_2D) :: GEMU
(   26)   TYPE(VARIABLE_2D) :: GSQM2
(   27)   TYPE(VARIABLE_2D) :: GELAM
(   28)   TYPE(VARIABLE_2D) :: GELAT
(   29)   TYPE(VARIABLE_2D) :: GECLO
(   30)   TYPE(VARIABLE_2D) :: GESLO






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 3

(   31)   TYPE(VARIABLE_2D) :: GM
(   32)   TYPE(VARIABLE_2D) :: GMAPPA
(   33)   TYPE(VARIABLE_2D) :: GOMVRL
(   34)   TYPE(VARIABLE_2D) :: GOMVRM
(   35)   TYPE(VARIABLE_2D) :: GNORDL
(   36)   TYPE(VARIABLE_2D) :: GNORDM
(   37)   TYPE(VARIABLE_2D) :: GNORDLCL
(   38)   TYPE(VARIABLE_2D) :: GNORDMCL
(   39)   TYPE(VARIABLE_2D) :: GNORDMCM
(   40)   TYPE(VARIABLE_2D) :: GAW
(   41)   TYPE(VARIABLE_2D) :: OROG
(   42)   TYPE(VARIABLE_2D) :: OROGL
(   43)   TYPE(VARIABLE_2D) :: OROGM
(   44)   TYPE(VARIABLE_2D) :: OROGLL
(   45)   TYPE(VARIABLE_2D) :: OROGMM
(   46)   TYPE(VARIABLE_2D) :: OROGLM
(   47)   TYPE(VARIABLE_2D) :: RCOLON
(   48)   TYPE(VARIABLE_2D) :: RSILON
(   49)   TYPE(VARIABLE_2D) :: RINDX
(   50)   TYPE(VARIABLE_2D) :: RINDY
(   51)   TYPE(VARIABLE_2D) :: RATATH
(   52)   TYPE(VARIABLE_2D) :: RATATX
(   53) 
(   54) CONTAINS
(   55)   PROCEDURE :: UPDATE_VIEW => GEOMETRY_VARIABLES_UPDATE_VIEW
(   56)   PROCEDURE :: FINAL => GEOMETRY_VARIABLES_FINAL
(   57) END TYPE GEOMETRY_VARIABLES
(   58) 
(   59) TYPE ECPHYS_VARIABLES
(   60)   ! Variables for arrays in EC_PHYS_FIELDS_MOD
(   61)   TYPE(VARIABLE_3D) :: USTRTI  ! E-W  SURFACE STRESS
(   62)   TYPE(VARIABLE_3D) :: VSTRTI  ! N-S  SURFACE STRESS
(   63)   TYPE(VARIABLE_3D) :: AHFSTI  ! SURFACE SENSIBLE HEAT FLUX
(   64)   TYPE(VARIABLE_3D) :: EVAPTI  ! EVAPORATION
(   65)   TYPE(VARIABLE_3D) :: TSKTI   ! SKIN TEMPERATURE
(   66) END TYPE ECPHYS_VARIABLES
(   67) 
(   68) TYPE RADIATION_VARIABLES
(   69)   ! Variables for arrays specific to radiation
(   70)   TYPE(VARIABLE_3D) :: EMTD      ! longwave net flux
(   71)   TYPE(VARIABLE_3D) :: TRSW      ! shortwave net transmissivity (multiply by incoming SW to get flux)
(   72)   TYPE(VARIABLE_3D) :: EMTC      ! clear-sky net longwave flux
(   73)   TYPE(VARIABLE_3D) :: TRSC      ! clear-sky net shortwave transmissivity
(   74)   TYPE(VARIABLE_3D) :: EMTU
(   75)   TYPE(VARIABLE_4D) :: TAUAER    ! prognostic aerosol variable for radiation and clouds
(   76)   TYPE(VARIABLE_2D) :: SRSWD     ! downward SW radiation at the surface
(   77)   TYPE(VARIABLE_3D) :: SRLWD     ! downward LW radiation at the surface
(   78)   TYPE(VARIABLE_2D) :: SRLWDC    ! clear-sky downward LW radiation at the surface
(   79)   TYPE(VARIABLE_2D) :: SRSWDC    ! clear-sky downward SW radiation at the surface
(   80)   TYPE(VARIABLE_2D) :: SRSWDCS   ! clear-sky NET SW radiation at the surface
(   81)   TYPE(VARIABLE_2D) :: SRLWDCS   ! clear-sky NET LW radiation at the surface
(   82)   TYPE(VARIABLE_2D) :: SRSWDV    ! downward SW visible radiation at the surface
(   83)   TYPE(VARIABLE_2D) :: SRSWDUV   ! downward SW ultraviolet/visible radiation at the surface
(   84)   TYPE(VARIABLE_2D) :: EDRO
(   85)   TYPE(VARIABLE_2D) :: SRSWPAR   ! downward SW PAR radiation at the surface
(   86)   TYPE(VARIABLE_2D) :: SRSWUVB   ! downward UV-B radiation at the surface
(   87)   TYPE(VARIABLE_2D) :: SRSWPARC  ! downward clear-sky SW PAR radiation at the surface
(   88)   TYPE(VARIABLE_2D) :: SRSWTINC  ! TOA incident solar radiation






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 4

(   89)   TYPE(VARIABLE_2D) :: RMOON     ! M-F military application
(   90)   TYPE(VARIABLE_2D) :: SRFDIR    ! total sky direct downward SW radiation
(   91)   TYPE(VARIABLE_2D) :: SRCDIR    ! clear-sky direct downward SW radiation
(   92)   TYPE(VARIABLE_3D) :: DERIVATIVELW  ! derivative to update LW radiation between calls to full radiation scheme
(   93) END TYPE RADIATION_VARIABLES
(   94) 
(   95) TYPE FIELD_VARIABLES
(   96)   TYPE(VARIABLE_3D) :: U  ! U-wind
(   97)   TYPE(VARIABLE_3D) :: V  ! V-wind
(   98)   TYPE(VARIABLE_3D) :: T  ! Temperature
(   99)   TYPE(VARIABLE_3D) :: DIV  ! Divergence
(  100)   TYPE(VARIABLE_3D) :: VOR  ! Vorticity
(  101)   TYPE(VARIABLE_3D) :: SPD  ! Pressure departure variable
(  102)   TYPE(VARIABLE_3D) :: SVD  ! Vertical div or velocity variable
(  103)   TYPE(VARIABLE_3D) :: CSPDNL  ! 
(  104)   TYPE(VARIABLE_3D) :: CSPNL  ! 
(  105)   TYPE(VARIABLE_3D) :: CSVDPT  ! 
(  106)   TYPE(VARIABLE_3D) :: CTNL  ! 
(  107)   TYPE(VARIABLE_3D) :: CTPT  ! 
(  108)   TYPE(VARIABLE_3D) :: CUNL  ! 
(  109)   TYPE(VARIABLE_3D) :: CUPT  ! 
(  110)   TYPE(VARIABLE_3D) :: CVNL  ! 
(  111)   TYPE(VARIABLE_3D) :: CVPT  ! 
(  112)   TYPE(VARIABLE_3D) :: CVWVNL  ! 
(  113)   TYPE(VARIABLE_3D) :: DPHI  ! 
(  114)   TYPE(VARIABLE_3D) :: EDOT  ! 
(  115)   TYPE(VARIABLE_3D) :: GW  ! 
(  116)   TYPE(VARIABLE_3D) :: NHX  ! 
(  117)   TYPE(VARIABLE_3D) :: NHY  ! 
(  118)   TYPE(VARIABLE_3D) :: SGRTL  ! 
(  119)   TYPE(VARIABLE_3D) :: SGRTM  ! 
(  120)   TYPE(VARIABLE_3D) :: SPDNL  ! 
(  121)   TYPE(VARIABLE_3D) :: SPDNL_SI  ! 
(  122)   TYPE(VARIABLE_3D) :: SPNL  ! 
(  123)   TYPE(VARIABLE_3D) :: SPNL_SI  ! 
(  124)   TYPE(VARIABLE_3D) :: SVDNL_SI  ! 
(  125)   TYPE(VARIABLE_3D) :: TNL  ! 
(  126)   TYPE(VARIABLE_3D) :: TNL_SI  ! 
(  127)   TYPE(VARIABLE_3D) :: UNL  ! 
(  128)   TYPE(VARIABLE_3D) :: UNL_SI  ! 
(  129)   TYPE(VARIABLE_3D) :: VNL  ! 
(  130)   TYPE(VARIABLE_3D) :: VNL_SI  ! 
(  131)   TYPE(VARIABLE_3D) :: VWVNL  ! 
(  132)   TYPE(VARIABLE_3D) :: CURHS  ! 
(  133)   TYPE(VARIABLE_3D) :: CVRHS  ! 
(  134)   TYPE(VARIABLE_3D) :: CTRHS  ! 
(  135)   TYPE(VARIABLE_3D) :: CSPDRHS  ! 
(  136)   TYPE(VARIABLE_3D) :: CSVDRHS  ! 
(  137)   TYPE(VARIABLE_3D) :: NHXNL  ! 
(  138)   TYPE(VARIABLE_3D) :: CNHXNL  ! 
(  139)   TYPE(VARIABLE_2D) :: SP  ! Surface pressure
(  140)   TYPE(VARIABLE_2D) :: SPNL2  ! 
(  141)   TYPE(VARIABLE_2D) :: PREHYDS  ! 
(  142)   TYPE(VARIABLE_2D) :: DBBC  ! 
(  143)   TYPE(VARIABLE_2D) :: CSPPT  ! 
(  144)   TYPE(VARIABLE_2D) :: CSPNL2  ! 
(  145)   TYPE(VARIABLE_2D) :: CSPRHS  ! 
(  146)   TYPE(VARIABLE_2D) :: GWS  ! 






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 5

(  147)   TYPE(VARIABLE_3D) :: Q  ! Specific humidity
(  148)   TYPE(VARIABLE_3D) :: I  ! Ice water
(  149)   TYPE(VARIABLE_3D) :: L  ! Liquid water
(  150)   TYPE(VARIABLE_3D) :: LCONV  ! Liquid water (CONV. PART)
(  151)   TYPE(VARIABLE_3D) :: ICONV  ! Ice    water (CONV. PART)
(  152)   TYPE(VARIABLE_3D) :: RCONV  ! Rain         (CONV. PART)
(  153)   TYPE(VARIABLE_3D) :: SCONV  ! Snow         (CONV. PART)
(  154)   TYPE(VARIABLE_3D) :: IRAD  ! Radiative cloud Ice water
(  155)   TYPE(VARIABLE_3D) :: LRAD  ! Radiative cloud Liquid water
(  156)   TYPE(VARIABLE_3D) :: S  ! Snow
(  157)   TYPE(VARIABLE_3D) :: R  ! Rain
(  158)   TYPE(VARIABLE_3D) :: G  ! Graupel
(  159)   TYPE(VARIABLE_3D) :: H  ! Hail
(  160)   TYPE(VARIABLE_3D) :: TKE  ! Turbulent Kinetic Energy
(  161)   TYPE(VARIABLE_3D) :: TTE  ! Turbulent Total Energy
(  162)   TYPE(VARIABLE_3D) :: EFB1  ! First variable EFB scheme
(  163)   TYPE(VARIABLE_3D) :: EFB2  ! Second variable EFB scheme
(  164)   TYPE(VARIABLE_3D) :: EFB3  ! Third variable EFB scheme
(  165)   TYPE(VARIABLE_3D) :: A  ! Cloud fraction
(  166)   TYPE(VARIABLE_3D) :: O3  ! Ozone
(  167)   TYPE(VARIABLE_3D) :: SRC  ! Second-order flux for AROME s"rc"/2Sigma_s2 multiplied by Lambda_3
(  168)   TYPE(VARIABLE_3D) :: MXL  ! Prognostic mixing length
(  169)   TYPE(VARIABLE_3D) :: SHTUR  ! Shear source term for turbulence.
(  170)   TYPE(VARIABLE_3D) :: FQTUR  ! Flux form source term for turbulence - moisture.
(  171)   TYPE(VARIABLE_3D) :: FSTUR  ! Flux form source term for turbulence - enthalpy.
(  172)   TYPE(VARIABLE_3D) :: CPF  ! Convective precipitation flux
(  173)   TYPE(VARIABLE_3D) :: SPF  ! Stratiform precipitation flux
(  174)   TYPE(VARIABLE_3D) :: CVGQ  ! Moisture Convergence for french physics
(  175)   TYPE(VARIABLE_3D) :: QVA  ! Total humidity variation
(  176)   TYPE(VARIABLE_3D), ALLOCATABLE :: GHG_G(:)  ! Greenhouse Gases
(  177)   TYPE(VARIABLE_3D), POINTER :: GHG(:)  ! Greenhouse Gases
(  178)   TYPE(VARIABLE_3D), ALLOCATABLE :: CHEM_G(:)  ! Chemistry
(  179)   TYPE(VARIABLE_3D), POINTER :: CHEM(:)  ! Chemistry
(  180)   TYPE(VARIABLE_3D), ALLOCATABLE :: AERO_G(:)  ! Aerosols
(  181)   TYPE(VARIABLE_3D), POINTER :: AERO(:)  ! Aerosols
(  182)   TYPE(VARIABLE_3D) :: LRCH4  ! CH4 loss rate (instantaneous field)
(  183)   TYPE(VARIABLE_3D), ALLOCATABLE :: FORC_G(:)  ! Large scale forcing
(  184)   TYPE(VARIABLE_3D), POINTER :: FORC(:)  ! Large scale forcing
(  185)   TYPE(VARIABLE_3D), ALLOCATABLE :: EZDIAG_G(:)  ! Easy diagnostics
(  186)   TYPE(VARIABLE_3D), POINTER :: EZDIAG(:)  ! Easy diagnostics
(  187)   TYPE(VARIABLE_3D), ALLOCATABLE :: ERA40_G(:)  ! ERA40 diagnostic fields
(  188)   TYPE(VARIABLE_3D), POINTER :: ERA40(:)  ! ERA40 diagnostic fields
(  189)   TYPE(VARIABLE_3D), ALLOCATABLE :: NOGW_G(:)  ! NORO GWD SCHEME
(  190)   TYPE(VARIABLE_3D), POINTER :: NOGW(:)  ! NORO GWD SCHEME
(  191)   TYPE(VARIABLE_3D), ALLOCATABLE :: EDRP_G(:)  ! Turbulence diagnostics EDR Parameter
(  192)   TYPE(VARIABLE_3D), POINTER :: EDRP(:)  ! Turbulence diagnostics EDR Parameter
(  193)   TYPE(VARIABLE_3D), ALLOCATABLE :: SLDIA_G(:)  ! SL dynamics diagnostics
(  194)   TYPE(VARIABLE_3D), POINTER :: SLDIA(:)  ! SL dynamics diagnostics
(  195)   TYPE(VARIABLE_3D), ALLOCATABLE :: AERAOT_G(:)  ! Aerosol optical thicknesses
(  196)   TYPE(VARIABLE_3D), POINTER :: AERAOT(:)  ! Aerosol optical thicknesses
(  197)   TYPE(VARIABLE_3D), ALLOCATABLE :: AERLISI_G(:)  ! Aerosol lidar simulator
(  198)   TYPE(VARIABLE_3D), POINTER :: AERLISI(:)  ! Aerosol lidar simulator
(  199)   TYPE(VARIABLE_3D), ALLOCATABLE :: AEROUT_G(:)  ! Aerosol outputs
(  200)   TYPE(VARIABLE_3D), POINTER :: AEROUT(:)  ! Aerosol outputs
(  201)   TYPE(VARIABLE_3D), ALLOCATABLE :: AEROCLIM_G(:)  ! Aerosol climatology
(  202)   TYPE(VARIABLE_3D), POINTER :: AEROCLIM(:)  ! Aerosol climatology
(  203)   TYPE(VARIABLE_3D), ALLOCATABLE :: UVP_G(:)  ! UV-processor output
(  204)   TYPE(VARIABLE_3D), POINTER :: UVP(:)  ! UV-processor output






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 6

(  205)   TYPE(VARIABLE_3D), ALLOCATABLE :: PHYS_G(:)  ! PHYS output
(  206)   TYPE(VARIABLE_3D), POINTER :: PHYS(:)  ! PHYS output
(  207)   TYPE(VARIABLE_3D) :: PHYCTY  ! PHYS input for MassCTY
(  208)   TYPE(VARIABLE_3D) :: RSPEC  ! Specific gas constant
(  209)   TYPE(VARIABLE_3D) :: SDSAT  ! Standard Deviation of the saturation Depression (Sigma_s)
(  210)   TYPE(VARIABLE_3D) :: CVV  ! Convective Vertical Velocity
(  211)   TYPE(VARIABLE_3D) :: RKTH  ! Rasch-Kristjansson H tendency
(  212)   TYPE(VARIABLE_3D) :: RKTQV  ! Rasch-Kristjansson Qv tendency
(  213)   TYPE(VARIABLE_3D) :: RKTQC  ! Rasch-Kristjansson Qc tendency
(  214)   TYPE(VARIABLE_3D) :: UOM  ! Updraught vert velocity
(  215)   TYPE(VARIABLE_3D) :: UAL  ! Updraught mesh fraction
(  216)   TYPE(VARIABLE_3D) :: DOM  ! Downdraught vert velocity
(  217)   TYPE(VARIABLE_3D) :: DAL  ! Downdraught mesh fraction
(  218)   TYPE(VARIABLE_3D) :: UEN  ! Updraught entrainment
(  219)   TYPE(VARIABLE_3D) :: UNEBH  ! pseudo-historic convective
(  220)   TYPE(VARIABLE_3D), ALLOCATABLE :: CRM_G(:)  ! CRM prognostic fields
(  221)   TYPE(VARIABLE_3D), POINTER :: CRM(:)  ! CRM prognostic fields
(  222)   TYPE(VARIABLE_3D), ALLOCATABLE :: LIMA_G(:)  ! LIMA prognostic fields
(  223)   TYPE(VARIABLE_3D), POINTER :: LIMA(:)  ! LIMA prognostic fields
(  224)   TYPE(VARIABLE_3D) :: FSD  ! PHYS output
(  225)   TYPE(VARIABLE_3D), ALLOCATABLE :: EXT_G(:)  ! Extra fields
(  226)   TYPE(VARIABLE_3D), POINTER :: EXT(:)  ! Extra fields
(  227) 
(  228)   TYPE(GEOMETRY_VARIABLES) :: GEOMETRY
(  229)   TYPE(ECPHYS_VARIABLES) :: ECPHYS
(  230)   TYPE(RADIATION_VARIABLES) :: RADIATION
(  231) 
(  232)   TYPE(VARIABLE_3D_PTR), ALLOCATABLE :: GFL_PTR_G (:)
(  233)   TYPE(VARIABLE_3D_PTR), POINTER :: GFL_PTR (:)
(  234) 
(  235) CONTAINS
(  236)   ! PROCEDURE :: CLONE => FIELD_VARIABLES_CLONE
(  237)   PROCEDURE :: CLONE_ARRAYS => FIELD_VARIABLES_CLONE_ARRAYS
(  238)   PROCEDURE :: UPDATE_VIEW => FIELD_VARIABLES_UPDATE_VIEW
(  239)   PROCEDURE :: RESET_ARRAYS => FIELD_VARIABLES_RESET_ARRAYS
(  240)   PROCEDURE :: FINAL => FIELD_VARIABLES_FINAL
(  241) END TYPE FIELD_VARIABLES
(  242) 
(  243) CONTAINS
(  244) 
(  245) !   FUNCTION FIELD_VARIABLES_CLONE(SELF) RESULT(NEWOBJ)
(  246) !     ! Replicate objects by deep-copying through associated object pointers
(  247) !     !
(  248) !     ! This is required create per-thread replication of the data view pointers
(  249) !     ! under the fields associated with these variables.
(  250) !     CLASS(FIELD_VARIABLES) :: SELF
(  251) !     TYPE(FIELD_VARIABLES) :: NEWOBJ
(  252) !     INTEGER(KIND=JPIM) :: I
(  253) 
(  254) ! #:for v in variables
(  255) ! #:if v.array == 1
(  256) !     IF (ALLOCATED(SELF%EXT)) THEN
(  257) !       ALLOCATE(NEWOBJ%EXT(SIZE(SELF%EXT)))
(  258) !       DO I=1, SIZE(SELF%EXT)
(  259) !         NEWOBJ%EXT(I) = SELF%EXT(I)%CLONE()
(  260) !       END DO
(  261) !     END IF
(  262) ! #:else






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 7

(  263) !     NEWOBJ%EXT = SELF%EXT%CLONE()
(  264) ! #:endif
(  265) ! #:endfor
(  266) !   END FUNCTION FIELD_VARIABLES_CLONE
(  267) 
(  268)   SUBROUTINE FIELD_VARIABLES_CLONE_ARRAYS(SELF)
(  269)     ! Replicate variable arrays by allocating a thread-local copy and
(  270)     ! associating its variables with the underpinning storage fields.
(  271)     !
(  272)     ! This is required ensure that per-thread data view pointers under
(  273)     ! variables don't alias.
(  274)     CLASS(FIELD_VARIABLES), TARGET :: SELF
(  275)     INTEGER(KIND=JPIM) :: I
(  276)     INTEGER(KIND=JPIM) :: IPNTR
(  277)     INTEGER(KIND=JPIM) :: JFLD
(  278) 
(  279)     ! Allocate a thread-local copy of the array
(  280)     NULLIFY(SELF%GHG)
(  281)     ALLOCATE(SELF%GHG(SIZE(SELF%GHG_G)))
(  282)     SELF%GHG = SELF%GHG_G
(  283) !   DO I=1, SIZE(SELF%GHG_G)
(  284) !     ! Associate underpinning storage objects with thread-local variables
(  285) !     IF (ASSOCIATED(SELF%GHG_G(I)%FT0))  SELF%GHG(I)%FT0 => SELF%GHG_G(I)%FT0
(  286) !     IF (ASSOCIATED(SELF%GHG_G(I)%FT1))  SELF%GHG(I)%FT1 => SELF%GHG_G(I)%FT1
(  287) !     IF (ASSOCIATED(SELF%GHG_G(I)%FT9))  SELF%GHG(I)%FT9 => SELF%GHG_G(I)%FT9
(  288) !     IF (ASSOCIATED(SELF%GHG_G(I)%FPH9)) SELF%GHG(I)%FPH9=> SELF%GHG_G(I)%FPH9
(  289) !     IF (ASSOCIATED(SELF%GHG_G(I)%FDL))  SELF%GHG(I)%FDL => SELF%GHG_G(I)%FDL
(  290) !     IF (ASSOCIATED(SELF%GHG_G(I)%FDM))  SELF%GHG(I)%FDM => SELF%GHG_G(I)%FDM
(  291) !   END DO
(  292)     ! Allocate a thread-local copy of the array
(  293)     NULLIFY(SELF%CHEM)
(  294)     ALLOCATE(SELF%CHEM(SIZE(SELF%CHEM_G)))
(  295)     SELF%CHEM = SELF%CHEM_G
(  296) !   DO I=1, SIZE(SELF%CHEM_G)
(  297) !     ! Associate underpinning storage objects with thread-local variables
(  298) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FT0))  SELF%CHEM(I)%FT0 => SELF%CHEM_G(I)%FT0
(  299) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FT1))  SELF%CHEM(I)%FT1 => SELF%CHEM_G(I)%FT1
(  300) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FT9))  SELF%CHEM(I)%FT9 => SELF%CHEM_G(I)%FT9
(  301) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FPH9)) SELF%CHEM(I)%FPH9=> SELF%CHEM_G(I)%FPH9
(  302) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FDL))  SELF%CHEM(I)%FDL => SELF%CHEM_G(I)%FDL
(  303) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FDM))  SELF%CHEM(I)%FDM => SELF%CHEM_G(I)%FDM
(  304) !   END DO
(  305)     ! Allocate a thread-local copy of the array
(  306)     NULLIFY(SELF%AERO)
(  307)     ALLOCATE(SELF%AERO(SIZE(SELF%AERO_G)))
(  308)     SELF%AERO = SELF%AERO_G
(  309) !   DO I=1, SIZE(SELF%AERO_G)
(  310) !     ! Associate underpinning storage objects with thread-local variables
(  311) !     IF (ASSOCIATED(SELF%AERO_G(I)%FT0))  SELF%AERO(I)%FT0 => SELF%AERO_G(I)%FT0
(  312) !     IF (ASSOCIATED(SELF%AERO_G(I)%FT1))  SELF%AERO(I)%FT1 => SELF%AERO_G(I)%FT1
(  313) !     IF (ASSOCIATED(SELF%AERO_G(I)%FT9))  SELF%AERO(I)%FT9 => SELF%AERO_G(I)%FT9
(  314) !     IF (ASSOCIATED(SELF%AERO_G(I)%FPH9)) SELF%AERO(I)%FPH9=> SELF%AERO_G(I)%FPH9
(  315) !     IF (ASSOCIATED(SELF%AERO_G(I)%FDL))  SELF%AERO(I)%FDL => SELF%AERO_G(I)%FDL
(  316) !     IF (ASSOCIATED(SELF%AERO_G(I)%FDM))  SELF%AERO(I)%FDM => SELF%AERO_G(I)%FDM
(  317) !   END DO
(  318)     ! Allocate a thread-local copy of the array
(  319)     NULLIFY(SELF%FORC)
(  320)     ALLOCATE(SELF%FORC(SIZE(SELF%FORC_G)))






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 8

(  321)     SELF%FORC = SELF%FORC_G
(  322) !   DO I=1, SIZE(SELF%FORC_G)
(  323) !     ! Associate underpinning storage objects with thread-local variables
(  324) !     IF (ASSOCIATED(SELF%FORC_G(I)%FT0))  SELF%FORC(I)%FT0 => SELF%FORC_G(I)%FT0
(  325) !     IF (ASSOCIATED(SELF%FORC_G(I)%FT1))  SELF%FORC(I)%FT1 => SELF%FORC_G(I)%FT1
(  326) !     IF (ASSOCIATED(SELF%FORC_G(I)%FT9))  SELF%FORC(I)%FT9 => SELF%FORC_G(I)%FT9
(  327) !     IF (ASSOCIATED(SELF%FORC_G(I)%FPH9)) SELF%FORC(I)%FPH9=> SELF%FORC_G(I)%FPH9
(  328) !     IF (ASSOCIATED(SELF%FORC_G(I)%FDL))  SELF%FORC(I)%FDL => SELF%FORC_G(I)%FDL
(  329) !     IF (ASSOCIATED(SELF%FORC_G(I)%FDM))  SELF%FORC(I)%FDM => SELF%FORC_G(I)%FDM
(  330) !   END DO
(  331)     ! Allocate a thread-local copy of the array
(  332)     NULLIFY(SELF%EZDIAG)
(  333)     ALLOCATE(SELF%EZDIAG(SIZE(SELF%EZDIAG_G)))
(  334)     SELF%EZDIAG = SELF%EZDIAG_G
(  335) !   DO I=1, SIZE(SELF%EZDIAG_G)
(  336) !     ! Associate underpinning storage objects with thread-local variables
(  337) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FT0))  SELF%EZDIAG(I)%FT0 => SELF%EZDIAG_G(I)%FT0
(  338) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FT1))  SELF%EZDIAG(I)%FT1 => SELF%EZDIAG_G(I)%FT1
(  339) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FT9))  SELF%EZDIAG(I)%FT9 => SELF%EZDIAG_G(I)%FT9
(  340) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FPH9)) SELF%EZDIAG(I)%FPH9=> SELF%EZDIAG_G(I)%FPH9
(  341) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FDL))  SELF%EZDIAG(I)%FDL => SELF%EZDIAG_G(I)%FDL
(  342) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FDM))  SELF%EZDIAG(I)%FDM => SELF%EZDIAG_G(I)%FDM
(  343) !   END DO
(  344)     ! Allocate a thread-local copy of the array
(  345)     NULLIFY(SELF%ERA40)
(  346)     ALLOCATE(SELF%ERA40(SIZE(SELF%ERA40_G)))
(  347)     SELF%ERA40 = SELF%ERA40_G
(  348) !   DO I=1, SIZE(SELF%ERA40_G)
(  349) !     ! Associate underpinning storage objects with thread-local variables
(  350) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FT0))  SELF%ERA40(I)%FT0 => SELF%ERA40_G(I)%FT0
(  351) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FT1))  SELF%ERA40(I)%FT1 => SELF%ERA40_G(I)%FT1
(  352) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FT9))  SELF%ERA40(I)%FT9 => SELF%ERA40_G(I)%FT9
(  353) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FPH9)) SELF%ERA40(I)%FPH9=> SELF%ERA40_G(I)%FPH9
(  354) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FDL))  SELF%ERA40(I)%FDL => SELF%ERA40_G(I)%FDL
(  355) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FDM))  SELF%ERA40(I)%FDM => SELF%ERA40_G(I)%FDM
(  356) !   END DO
(  357)     ! Allocate a thread-local copy of the array
(  358)     NULLIFY(SELF%NOGW)
(  359)     ALLOCATE(SELF%NOGW(SIZE(SELF%NOGW_G)))
(  360)     SELF%NOGW = SELF%NOGW_G
(  361) !   DO I=1, SIZE(SELF%NOGW_G)
(  362) !     ! Associate underpinning storage objects with thread-local variables
(  363) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FT0))  SELF%NOGW(I)%FT0 => SELF%NOGW_G(I)%FT0
(  364) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FT1))  SELF%NOGW(I)%FT1 => SELF%NOGW_G(I)%FT1
(  365) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FT9))  SELF%NOGW(I)%FT9 => SELF%NOGW_G(I)%FT9
(  366) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FPH9)) SELF%NOGW(I)%FPH9=> SELF%NOGW_G(I)%FPH9
(  367) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FDL))  SELF%NOGW(I)%FDL => SELF%NOGW_G(I)%FDL
(  368) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FDM))  SELF%NOGW(I)%FDM => SELF%NOGW_G(I)%FDM
(  369) !   END DO
(  370)     ! Allocate a thread-local copy of the array
(  371)     NULLIFY(SELF%EDRP)
(  372)     ALLOCATE(SELF%EDRP(SIZE(SELF%EDRP_G)))
(  373)     SELF%EDRP = SELF%EDRP_G
(  374) !   DO I=1, SIZE(SELF%EDRP_G)
(  375) !     ! Associate underpinning storage objects with thread-local variables
(  376) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FT0))  SELF%EDRP(I)%FT0 => SELF%EDRP_G(I)%FT0
(  377) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FT1))  SELF%EDRP(I)%FT1 => SELF%EDRP_G(I)%FT1
(  378) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FT9))  SELF%EDRP(I)%FT9 => SELF%EDRP_G(I)%FT9






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 9

(  379) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FPH9)) SELF%EDRP(I)%FPH9=> SELF%EDRP_G(I)%FPH9
(  380) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FDL))  SELF%EDRP(I)%FDL => SELF%EDRP_G(I)%FDL
(  381) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FDM))  SELF%EDRP(I)%FDM => SELF%EDRP_G(I)%FDM
(  382) !   END DO
(  383)     ! Allocate a thread-local copy of the array
(  384)     NULLIFY(SELF%SLDIA)
(  385)     ALLOCATE(SELF%SLDIA(SIZE(SELF%SLDIA_G)))
(  386)     SELF%SLDIA = SELF%SLDIA_G
(  387) !   DO I=1, SIZE(SELF%SLDIA_G)
(  388) !     ! Associate underpinning storage objects with thread-local variables
(  389) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FT0))  SELF%SLDIA(I)%FT0 => SELF%SLDIA_G(I)%FT0
(  390) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FT1))  SELF%SLDIA(I)%FT1 => SELF%SLDIA_G(I)%FT1
(  391) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FT9))  SELF%SLDIA(I)%FT9 => SELF%SLDIA_G(I)%FT9
(  392) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FPH9)) SELF%SLDIA(I)%FPH9=> SELF%SLDIA_G(I)%FPH9
(  393) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FDL))  SELF%SLDIA(I)%FDL => SELF%SLDIA_G(I)%FDL
(  394) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FDM))  SELF%SLDIA(I)%FDM => SELF%SLDIA_G(I)%FDM
(  395) !   END DO
(  396)     ! Allocate a thread-local copy of the array
(  397)     NULLIFY(SELF%AERAOT)
(  398)     ALLOCATE(SELF%AERAOT(SIZE(SELF%AERAOT_G)))
(  399)     SELF%AERAOT = SELF%AERAOT_G
(  400) !   DO I=1, SIZE(SELF%AERAOT_G)
(  401) !     ! Associate underpinning storage objects with thread-local variables
(  402) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FT0))  SELF%AERAOT(I)%FT0 => SELF%AERAOT_G(I)%FT0
(  403) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FT1))  SELF%AERAOT(I)%FT1 => SELF%AERAOT_G(I)%FT1
(  404) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FT9))  SELF%AERAOT(I)%FT9 => SELF%AERAOT_G(I)%FT9
(  405) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FPH9)) SELF%AERAOT(I)%FPH9=> SELF%AERAOT_G(I)%FPH9
(  406) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FDL))  SELF%AERAOT(I)%FDL => SELF%AERAOT_G(I)%FDL
(  407) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FDM))  SELF%AERAOT(I)%FDM => SELF%AERAOT_G(I)%FDM
(  408) !   END DO
(  409)     ! Allocate a thread-local copy of the array
(  410)     NULLIFY(SELF%AERLISI)
(  411)     ALLOCATE(SELF%AERLISI(SIZE(SELF%AERLISI_G)))
(  412)     SELF%AERLISI = SELF%AERLISI_G
(  413) !   DO I=1, SIZE(SELF%AERLISI_G)
(  414) !     ! Associate underpinning storage objects with thread-local variables
(  415) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FT0))  SELF%AERLISI(I)%FT0 => SELF%AERLISI_G(I)%FT0
(  416) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FT1))  SELF%AERLISI(I)%FT1 => SELF%AERLISI_G(I)%FT1
(  417) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FT9))  SELF%AERLISI(I)%FT9 => SELF%AERLISI_G(I)%FT9
(  418) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FPH9)) SELF%AERLISI(I)%FPH9=> SELF%AERLISI_G(I)%FPH9
(  419) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FDL))  SELF%AERLISI(I)%FDL => SELF%AERLISI_G(I)%FDL
(  420) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FDM))  SELF%AERLISI(I)%FDM => SELF%AERLISI_G(I)%FDM
(  421) !   END DO
(  422)     ! Allocate a thread-local copy of the array
(  423)     NULLIFY(SELF%AEROUT)
(  424)     ALLOCATE(SELF%AEROUT(SIZE(SELF%AEROUT_G)))
(  425)     SELF%AEROUT = SELF%AEROUT_G
(  426) !   DO I=1, SIZE(SELF%AEROUT_G)
(  427) !     ! Associate underpinning storage objects with thread-local variables
(  428) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FT0))  SELF%AEROUT(I)%FT0 => SELF%AEROUT_G(I)%FT0
(  429) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FT1))  SELF%AEROUT(I)%FT1 => SELF%AEROUT_G(I)%FT1
(  430) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FT9))  SELF%AEROUT(I)%FT9 => SELF%AEROUT_G(I)%FT9
(  431) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FPH9)) SELF%AEROUT(I)%FPH9=> SELF%AEROUT_G(I)%FPH9
(  432) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FDL))  SELF%AEROUT(I)%FDL => SELF%AEROUT_G(I)%FDL
(  433) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FDM))  SELF%AEROUT(I)%FDM => SELF%AEROUT_G(I)%FDM
(  434) !   END DO
(  435)     ! Allocate a thread-local copy of the array
(  436)     NULLIFY(SELF%AEROCLIM)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 10

(  437)     ALLOCATE(SELF%AEROCLIM(SIZE(SELF%AEROCLIM_G)))
(  438)     SELF%AEROCLIM = SELF%AEROCLIM_G
(  439) !   DO I=1, SIZE(SELF%AEROCLIM_G)
(  440) !     ! Associate underpinning storage objects with thread-local variables
(  441) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FT0))  SELF%AEROCLIM(I)%FT0 => SELF%AEROCLIM_G(I)%FT0
(  442) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FT1))  SELF%AEROCLIM(I)%FT1 => SELF%AEROCLIM_G(I)%FT1
(  443) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FT9))  SELF%AEROCLIM(I)%FT9 => SELF%AEROCLIM_G(I)%FT9
(  444) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FPH9)) SELF%AEROCLIM(I)%FPH9=> SELF%AEROCLIM_G(I)%FPH9
(  445) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FDL))  SELF%AEROCLIM(I)%FDL => SELF%AEROCLIM_G(I)%FDL
(  446) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FDM))  SELF%AEROCLIM(I)%FDM => SELF%AEROCLIM_G(I)%FDM
(  447) !   END DO
(  448)     ! Allocate a thread-local copy of the array
(  449)     NULLIFY(SELF%UVP)
(  450)     ALLOCATE(SELF%UVP(SIZE(SELF%UVP_G)))
(  451)     SELF%UVP = SELF%UVP_G
(  452) !   DO I=1, SIZE(SELF%UVP_G)
(  453) !     ! Associate underpinning storage objects with thread-local variables
(  454) !     IF (ASSOCIATED(SELF%UVP_G(I)%FT0))  SELF%UVP(I)%FT0 => SELF%UVP_G(I)%FT0
(  455) !     IF (ASSOCIATED(SELF%UVP_G(I)%FT1))  SELF%UVP(I)%FT1 => SELF%UVP_G(I)%FT1
(  456) !     IF (ASSOCIATED(SELF%UVP_G(I)%FT9))  SELF%UVP(I)%FT9 => SELF%UVP_G(I)%FT9
(  457) !     IF (ASSOCIATED(SELF%UVP_G(I)%FPH9)) SELF%UVP(I)%FPH9=> SELF%UVP_G(I)%FPH9
(  458) !     IF (ASSOCIATED(SELF%UVP_G(I)%FDL))  SELF%UVP(I)%FDL => SELF%UVP_G(I)%FDL
(  459) !     IF (ASSOCIATED(SELF%UVP_G(I)%FDM))  SELF%UVP(I)%FDM => SELF%UVP_G(I)%FDM
(  460) !   END DO
(  461)     ! Allocate a thread-local copy of the array
(  462)     NULLIFY(SELF%PHYS)
(  463)     ALLOCATE(SELF%PHYS(SIZE(SELF%PHYS_G)))
(  464)     SELF%PHYS = SELF%PHYS_G
(  465) !   DO I=1, SIZE(SELF%PHYS_G)
(  466) !     ! Associate underpinning storage objects with thread-local variables
(  467) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FT0))  SELF%PHYS(I)%FT0 => SELF%PHYS_G(I)%FT0
(  468) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FT1))  SELF%PHYS(I)%FT1 => SELF%PHYS_G(I)%FT1
(  469) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FT9))  SELF%PHYS(I)%FT9 => SELF%PHYS_G(I)%FT9
(  470) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FPH9)) SELF%PHYS(I)%FPH9=> SELF%PHYS_G(I)%FPH9
(  471) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FDL))  SELF%PHYS(I)%FDL => SELF%PHYS_G(I)%FDL
(  472) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FDM))  SELF%PHYS(I)%FDM => SELF%PHYS_G(I)%FDM
(  473) !   END DO
(  474)     ! Allocate a thread-local copy of the array
(  475)     NULLIFY(SELF%CRM)
(  476)     ALLOCATE(SELF%CRM(SIZE(SELF%CRM_G)))
(  477)     SELF%CRM = SELF%CRM_G
(  478) !   DO I=1, SIZE(SELF%CRM_G)
(  479) !     ! Associate underpinning storage objects with thread-local variables
(  480) !     IF (ASSOCIATED(SELF%CRM_G(I)%FT0))  SELF%CRM(I)%FT0 => SELF%CRM_G(I)%FT0
(  481) !     IF (ASSOCIATED(SELF%CRM_G(I)%FT1))  SELF%CRM(I)%FT1 => SELF%CRM_G(I)%FT1
(  482) !     IF (ASSOCIATED(SELF%CRM_G(I)%FT9))  SELF%CRM(I)%FT9 => SELF%CRM_G(I)%FT9
(  483) !     IF (ASSOCIATED(SELF%CRM_G(I)%FPH9)) SELF%CRM(I)%FPH9=> SELF%CRM_G(I)%FPH9
(  484) !     IF (ASSOCIATED(SELF%CRM_G(I)%FDL))  SELF%CRM(I)%FDL => SELF%CRM_G(I)%FDL
(  485) !     IF (ASSOCIATED(SELF%CRM_G(I)%FDM))  SELF%CRM(I)%FDM => SELF%CRM_G(I)%FDM
(  486) !   END DO
(  487)     ! Allocate a thread-local copy of the array
(  488)     NULLIFY(SELF%LIMA)
(  489)     ALLOCATE(SELF%LIMA(SIZE(SELF%LIMA_G)))
(  490)     SELF%LIMA = SELF%LIMA_G
(  491) !   DO I=1, SIZE(SELF%LIMA_G)
(  492) !     ! Associate underpinning storage objects with thread-local variables
(  493) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FT0))  SELF%LIMA(I)%FT0 => SELF%LIMA_G(I)%FT0
(  494) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FT1))  SELF%LIMA(I)%FT1 => SELF%LIMA_G(I)%FT1






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 11

(  495) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FT9))  SELF%LIMA(I)%FT9 => SELF%LIMA_G(I)%FT9
(  496) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FPH9)) SELF%LIMA(I)%FPH9=> SELF%LIMA_G(I)%FPH9
(  497) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FDL))  SELF%LIMA(I)%FDL => SELF%LIMA_G(I)%FDL
(  498) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FDM))  SELF%LIMA(I)%FDM => SELF%LIMA_G(I)%FDM
(  499) !   END DO
(  500)     ! Allocate a thread-local copy of the array
(  501)     NULLIFY(SELF%EXT)
(  502)     ALLOCATE(SELF%EXT(SIZE(SELF%EXT_G)))
(  503)     SELF%EXT = SELF%EXT_G
(  504) !   DO I=1, SIZE(SELF%EXT_G)
(  505) !     ! Associate underpinning storage objects with thread-local variables
(  506) !     IF (ASSOCIATED(SELF%EXT_G(I)%FT0))  SELF%EXT(I)%FT0 => SELF%EXT_G(I)%FT0
(  507) !     IF (ASSOCIATED(SELF%EXT_G(I)%FT1))  SELF%EXT(I)%FT1 => SELF%EXT_G(I)%FT1
(  508) !     IF (ASSOCIATED(SELF%EXT_G(I)%FT9))  SELF%EXT(I)%FT9 => SELF%EXT_G(I)%FT9
(  509) !     IF (ASSOCIATED(SELF%EXT_G(I)%FPH9)) SELF%EXT(I)%FPH9=> SELF%EXT_G(I)%FPH9
(  510) !     IF (ASSOCIATED(SELF%EXT_G(I)%FDL))  SELF%EXT(I)%FDL => SELF%EXT_G(I)%FDL
(  511) !     IF (ASSOCIATED(SELF%EXT_G(I)%FDM))  SELF%EXT(I)%FDM => SELF%EXT_G(I)%FDM
(  512) !   END DO
(  513) 
(  514)     NULLIFY (SELF%GFL_PTR)
(  515)     ALLOCATE (SELF%GFL_PTR (SIZE (SELF%GFL_PTR_G)))
(  516) 
(  517)     IPNTR = 1
(  518)     
(  519)     SELF%GFL_PTR (IPNTR)%YV => SELF%Q
(  520)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%Q%YCOMP
(  521)     IPNTR = IPNTR + 1
(  522)     SELF%GFL_PTR (IPNTR)%YV => SELF%I
(  523)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%I%YCOMP
(  524)     IPNTR = IPNTR + 1
(  525)     SELF%GFL_PTR (IPNTR)%YV => SELF%L
(  526)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%L%YCOMP
(  527)     IPNTR = IPNTR + 1
(  528)     SELF%GFL_PTR (IPNTR)%YV => SELF%LCONV
(  529)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LCONV%YCOMP
(  530)     IPNTR = IPNTR + 1
(  531)     SELF%GFL_PTR (IPNTR)%YV => SELF%ICONV
(  532)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%ICONV%YCOMP
(  533)     IPNTR = IPNTR + 1
(  534)     SELF%GFL_PTR (IPNTR)%YV => SELF%RCONV
(  535)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RCONV%YCOMP
(  536)     IPNTR = IPNTR + 1
(  537)     SELF%GFL_PTR (IPNTR)%YV => SELF%SCONV
(  538)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SCONV%YCOMP
(  539)     IPNTR = IPNTR + 1
(  540)     SELF%GFL_PTR (IPNTR)%YV => SELF%IRAD
(  541)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%IRAD%YCOMP
(  542)     IPNTR = IPNTR + 1
(  543)     SELF%GFL_PTR (IPNTR)%YV => SELF%LRAD
(  544)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LRAD%YCOMP
(  545)     IPNTR = IPNTR + 1
(  546)     SELF%GFL_PTR (IPNTR)%YV => SELF%S
(  547)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%S%YCOMP
(  548)     IPNTR = IPNTR + 1
(  549)     SELF%GFL_PTR (IPNTR)%YV => SELF%R
(  550)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%R%YCOMP
(  551)     IPNTR = IPNTR + 1
(  552)     SELF%GFL_PTR (IPNTR)%YV => SELF%G






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 12

(  553)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%G%YCOMP
(  554)     IPNTR = IPNTR + 1
(  555)     SELF%GFL_PTR (IPNTR)%YV => SELF%H
(  556)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%H%YCOMP
(  557)     IPNTR = IPNTR + 1
(  558)     SELF%GFL_PTR (IPNTR)%YV => SELF%TKE
(  559)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%TKE%YCOMP
(  560)     IPNTR = IPNTR + 1
(  561)     SELF%GFL_PTR (IPNTR)%YV => SELF%TTE
(  562)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%TTE%YCOMP
(  563)     IPNTR = IPNTR + 1
(  564)     SELF%GFL_PTR (IPNTR)%YV => SELF%EFB1
(  565)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EFB1%YCOMP
(  566)     IPNTR = IPNTR + 1
(  567)     SELF%GFL_PTR (IPNTR)%YV => SELF%EFB2
(  568)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EFB2%YCOMP
(  569)     IPNTR = IPNTR + 1
(  570)     SELF%GFL_PTR (IPNTR)%YV => SELF%EFB3
(  571)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EFB3%YCOMP
(  572)     IPNTR = IPNTR + 1
(  573)     SELF%GFL_PTR (IPNTR)%YV => SELF%A
(  574)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%A%YCOMP
(  575)     IPNTR = IPNTR + 1
(  576)     SELF%GFL_PTR (IPNTR)%YV => SELF%O3
(  577)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%O3%YCOMP
(  578)     IPNTR = IPNTR + 1
(  579)     SELF%GFL_PTR (IPNTR)%YV => SELF%SRC
(  580)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SRC%YCOMP
(  581)     IPNTR = IPNTR + 1
(  582)     SELF%GFL_PTR (IPNTR)%YV => SELF%MXL
(  583)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%MXL%YCOMP
(  584)     IPNTR = IPNTR + 1
(  585)     SELF%GFL_PTR (IPNTR)%YV => SELF%SHTUR
(  586)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SHTUR%YCOMP
(  587)     IPNTR = IPNTR + 1
(  588)     SELF%GFL_PTR (IPNTR)%YV => SELF%FQTUR
(  589)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FQTUR%YCOMP
(  590)     IPNTR = IPNTR + 1
(  591)     SELF%GFL_PTR (IPNTR)%YV => SELF%FSTUR
(  592)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FSTUR%YCOMP
(  593)     IPNTR = IPNTR + 1
(  594)     SELF%GFL_PTR (IPNTR)%YV => SELF%CPF
(  595)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CPF%YCOMP
(  596)     IPNTR = IPNTR + 1
(  597)     SELF%GFL_PTR (IPNTR)%YV => SELF%SPF
(  598)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SPF%YCOMP
(  599)     IPNTR = IPNTR + 1
(  600)     SELF%GFL_PTR (IPNTR)%YV => SELF%CVGQ
(  601)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CVGQ%YCOMP
(  602)     IPNTR = IPNTR + 1
(  603)     SELF%GFL_PTR (IPNTR)%YV => SELF%QVA
(  604)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%QVA%YCOMP
(  605)     IPNTR = IPNTR + 1
(  606)     DO JFLD = 1, SIZE (SELF%GHG)
(  607)       SELF%GFL_PTR (IPNTR)%YV => SELF%GHG(JFLD)
(  608)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%GHG(JFLD)%YCOMP
(  609)       IPNTR = IPNTR + 1
(  610)     ENDDO






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 13

(  611)     DO JFLD = 1, SIZE (SELF%CHEM)
(  612)       SELF%GFL_PTR (IPNTR)%YV => SELF%CHEM(JFLD)
(  613)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CHEM(JFLD)%YCOMP
(  614)       IPNTR = IPNTR + 1
(  615)     ENDDO
(  616)     DO JFLD = 1, SIZE (SELF%AERO)
(  617)       SELF%GFL_PTR (IPNTR)%YV => SELF%AERO(JFLD)
(  618)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AERO(JFLD)%YCOMP
(  619)       IPNTR = IPNTR + 1
(  620)     ENDDO
(  621)     SELF%GFL_PTR (IPNTR)%YV => SELF%LRCH4
(  622)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LRCH4%YCOMP
(  623)     IPNTR = IPNTR + 1
(  624)     DO JFLD = 1, SIZE (SELF%FORC)
(  625)       SELF%GFL_PTR (IPNTR)%YV => SELF%FORC(JFLD)
(  626)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FORC(JFLD)%YCOMP
(  627)       IPNTR = IPNTR + 1
(  628)     ENDDO
(  629)     DO JFLD = 1, SIZE (SELF%EZDIAG)
(  630)       SELF%GFL_PTR (IPNTR)%YV => SELF%EZDIAG(JFLD)
(  631)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EZDIAG(JFLD)%YCOMP
(  632)       IPNTR = IPNTR + 1
(  633)     ENDDO
(  634)     DO JFLD = 1, SIZE (SELF%ERA40)
(  635)       SELF%GFL_PTR (IPNTR)%YV => SELF%ERA40(JFLD)
(  636)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%ERA40(JFLD)%YCOMP
(  637)       IPNTR = IPNTR + 1
(  638)     ENDDO
(  639)     DO JFLD = 1, SIZE (SELF%NOGW)
(  640)       SELF%GFL_PTR (IPNTR)%YV => SELF%NOGW(JFLD)
(  641)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%NOGW(JFLD)%YCOMP
(  642)       IPNTR = IPNTR + 1
(  643)     ENDDO
(  644)     DO JFLD = 1, SIZE (SELF%EDRP)
(  645)       SELF%GFL_PTR (IPNTR)%YV => SELF%EDRP(JFLD)
(  646)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EDRP(JFLD)%YCOMP
(  647)       IPNTR = IPNTR + 1
(  648)     ENDDO
(  649)     DO JFLD = 1, SIZE (SELF%SLDIA)
(  650)       SELF%GFL_PTR (IPNTR)%YV => SELF%SLDIA(JFLD)
(  651)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SLDIA(JFLD)%YCOMP
(  652)       IPNTR = IPNTR + 1
(  653)     ENDDO
(  654)     DO JFLD = 1, SIZE (SELF%AERAOT)
(  655)       SELF%GFL_PTR (IPNTR)%YV => SELF%AERAOT(JFLD)
(  656)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AERAOT(JFLD)%YCOMP
(  657)       IPNTR = IPNTR + 1
(  658)     ENDDO
(  659)     DO JFLD = 1, SIZE (SELF%AERLISI)
(  660)       SELF%GFL_PTR (IPNTR)%YV => SELF%AERLISI(JFLD)
(  661)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AERLISI(JFLD)%YCOMP
(  662)       IPNTR = IPNTR + 1
(  663)     ENDDO
(  664)     DO JFLD = 1, SIZE (SELF%AEROUT)
(  665)       SELF%GFL_PTR (IPNTR)%YV => SELF%AEROUT(JFLD)
(  666)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AEROUT(JFLD)%YCOMP
(  667)       IPNTR = IPNTR + 1
(  668)     ENDDO






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 14

(  669)     DO JFLD = 1, SIZE (SELF%AEROCLIM)
(  670)       SELF%GFL_PTR (IPNTR)%YV => SELF%AEROCLIM(JFLD)
(  671)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AEROCLIM(JFLD)%YCOMP
(  672)       IPNTR = IPNTR + 1
(  673)     ENDDO
(  674)     DO JFLD = 1, SIZE (SELF%UVP)
(  675)       SELF%GFL_PTR (IPNTR)%YV => SELF%UVP(JFLD)
(  676)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UVP(JFLD)%YCOMP
(  677)       IPNTR = IPNTR + 1
(  678)     ENDDO
(  679)     DO JFLD = 1, SIZE (SELF%PHYS)
(  680)       SELF%GFL_PTR (IPNTR)%YV => SELF%PHYS(JFLD)
(  681)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%PHYS(JFLD)%YCOMP
(  682)       IPNTR = IPNTR + 1
(  683)     ENDDO
(  684)     SELF%GFL_PTR (IPNTR)%YV => SELF%PHYCTY
(  685)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%PHYCTY%YCOMP
(  686)     IPNTR = IPNTR + 1
(  687)     SELF%GFL_PTR (IPNTR)%YV => SELF%RSPEC
(  688)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RSPEC%YCOMP
(  689)     IPNTR = IPNTR + 1
(  690)     SELF%GFL_PTR (IPNTR)%YV => SELF%SDSAT
(  691)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SDSAT%YCOMP
(  692)     IPNTR = IPNTR + 1
(  693)     SELF%GFL_PTR (IPNTR)%YV => SELF%CVV
(  694)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CVV%YCOMP
(  695)     IPNTR = IPNTR + 1
(  696)     SELF%GFL_PTR (IPNTR)%YV => SELF%RKTH
(  697)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RKTH%YCOMP
(  698)     IPNTR = IPNTR + 1
(  699)     SELF%GFL_PTR (IPNTR)%YV => SELF%RKTQV
(  700)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RKTQV%YCOMP
(  701)     IPNTR = IPNTR + 1
(  702)     SELF%GFL_PTR (IPNTR)%YV => SELF%RKTQC
(  703)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RKTQC%YCOMP
(  704)     IPNTR = IPNTR + 1
(  705)     SELF%GFL_PTR (IPNTR)%YV => SELF%UOM
(  706)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UOM%YCOMP
(  707)     IPNTR = IPNTR + 1
(  708)     SELF%GFL_PTR (IPNTR)%YV => SELF%UAL
(  709)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UAL%YCOMP
(  710)     IPNTR = IPNTR + 1
(  711)     SELF%GFL_PTR (IPNTR)%YV => SELF%DOM
(  712)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%DOM%YCOMP
(  713)     IPNTR = IPNTR + 1
(  714)     SELF%GFL_PTR (IPNTR)%YV => SELF%DAL
(  715)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%DAL%YCOMP
(  716)     IPNTR = IPNTR + 1
(  717)     SELF%GFL_PTR (IPNTR)%YV => SELF%UEN
(  718)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UEN%YCOMP
(  719)     IPNTR = IPNTR + 1
(  720)     SELF%GFL_PTR (IPNTR)%YV => SELF%UNEBH
(  721)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UNEBH%YCOMP
(  722)     IPNTR = IPNTR + 1
(  723)     DO JFLD = 1, SIZE (SELF%CRM)
(  724)       SELF%GFL_PTR (IPNTR)%YV => SELF%CRM(JFLD)
(  725)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CRM(JFLD)%YCOMP
(  726)       IPNTR = IPNTR + 1






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 15

(  727)     ENDDO
(  728)     DO JFLD = 1, SIZE (SELF%LIMA)
(  729)       SELF%GFL_PTR (IPNTR)%YV => SELF%LIMA(JFLD)
(  730)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LIMA(JFLD)%YCOMP
(  731)       IPNTR = IPNTR + 1
(  732)     ENDDO
(  733)     SELF%GFL_PTR (IPNTR)%YV => SELF%FSD
(  734)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FSD%YCOMP
(  735)     IPNTR = IPNTR + 1
(  736)     DO JFLD = 1, SIZE (SELF%EXT)
(  737)       SELF%GFL_PTR (IPNTR)%YV => SELF%EXT(JFLD)
(  738)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EXT(JFLD)%YCOMP
(  739)       IPNTR = IPNTR + 1
(  740)     ENDDO
(  741)     
(  742)   END SUBROUTINE FIELD_VARIABLES_CLONE_ARRAYS
(  743) 
(  744)   SUBROUTINE FIELD_VARIABLES_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  745)     ! Update the internal data view pointers of all associated variables
(  746)     CLASS(FIELD_VARIABLES) :: SELF
(  747)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  748)     INTEGER(KIND=JPIM) :: I
(  749) 
(  750)     CALL SELF%U%UPDATE_VIEW(BLOCK_INDEX)
(  751)     CALL SELF%V%UPDATE_VIEW(BLOCK_INDEX)
(  752)     CALL SELF%T%UPDATE_VIEW(BLOCK_INDEX)
(  753)     CALL SELF%DIV%UPDATE_VIEW(BLOCK_INDEX)
(  754)     CALL SELF%VOR%UPDATE_VIEW(BLOCK_INDEX)
(  755)     CALL SELF%SPD%UPDATE_VIEW(BLOCK_INDEX)
(  756)     CALL SELF%SVD%UPDATE_VIEW(BLOCK_INDEX)
(  757)     CALL SELF%CSPDNL%UPDATE_VIEW(BLOCK_INDEX)
(  758)     CALL SELF%CSPNL%UPDATE_VIEW(BLOCK_INDEX)
(  759)     CALL SELF%CSVDPT%UPDATE_VIEW(BLOCK_INDEX)
(  760)     CALL SELF%CTNL%UPDATE_VIEW(BLOCK_INDEX)
(  761)     CALL SELF%CTPT%UPDATE_VIEW(BLOCK_INDEX)
(  762)     CALL SELF%CUNL%UPDATE_VIEW(BLOCK_INDEX)
(  763)     CALL SELF%CUPT%UPDATE_VIEW(BLOCK_INDEX)
(  764)     CALL SELF%CVNL%UPDATE_VIEW(BLOCK_INDEX)
(  765)     CALL SELF%CVPT%UPDATE_VIEW(BLOCK_INDEX)
(  766)     CALL SELF%CVWVNL%UPDATE_VIEW(BLOCK_INDEX)
(  767)     CALL SELF%DPHI%UPDATE_VIEW(BLOCK_INDEX)
(  768)     CALL SELF%EDOT%UPDATE_VIEW(BLOCK_INDEX)
(  769)     CALL SELF%GW%UPDATE_VIEW(BLOCK_INDEX)
(  770)     CALL SELF%NHX%UPDATE_VIEW(BLOCK_INDEX)
(  771)     CALL SELF%NHY%UPDATE_VIEW(BLOCK_INDEX)
(  772)     CALL SELF%SGRTL%UPDATE_VIEW(BLOCK_INDEX)
(  773)     CALL SELF%SGRTM%UPDATE_VIEW(BLOCK_INDEX)
(  774)     CALL SELF%SPDNL%UPDATE_VIEW(BLOCK_INDEX)
(  775)     CALL SELF%SPDNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  776)     CALL SELF%SPNL%UPDATE_VIEW(BLOCK_INDEX)
(  777)     CALL SELF%SPNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  778)     CALL SELF%SVDNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  779)     CALL SELF%TNL%UPDATE_VIEW(BLOCK_INDEX)
(  780)     CALL SELF%TNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  781)     CALL SELF%UNL%UPDATE_VIEW(BLOCK_INDEX)
(  782)     CALL SELF%UNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  783)     CALL SELF%VNL%UPDATE_VIEW(BLOCK_INDEX)
(  784)     CALL SELF%VNL_SI%UPDATE_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 16

(  785)     CALL SELF%VWVNL%UPDATE_VIEW(BLOCK_INDEX)
(  786)     CALL SELF%CURHS%UPDATE_VIEW(BLOCK_INDEX)
(  787)     CALL SELF%CVRHS%UPDATE_VIEW(BLOCK_INDEX)
(  788)     CALL SELF%CTRHS%UPDATE_VIEW(BLOCK_INDEX)
(  789)     CALL SELF%CSPDRHS%UPDATE_VIEW(BLOCK_INDEX)
(  790)     CALL SELF%CSVDRHS%UPDATE_VIEW(BLOCK_INDEX)
(  791)     CALL SELF%NHXNL%UPDATE_VIEW(BLOCK_INDEX)
(  792)     CALL SELF%CNHXNL%UPDATE_VIEW(BLOCK_INDEX)
(  793)     CALL SELF%SP%UPDATE_VIEW(BLOCK_INDEX)
(  794)     CALL SELF%SPNL2%UPDATE_VIEW(BLOCK_INDEX)
(  795)     CALL SELF%PREHYDS%UPDATE_VIEW(BLOCK_INDEX)
(  796)     CALL SELF%DBBC%UPDATE_VIEW(BLOCK_INDEX)
(  797)     CALL SELF%CSPPT%UPDATE_VIEW(BLOCK_INDEX)
(  798)     CALL SELF%CSPNL2%UPDATE_VIEW(BLOCK_INDEX)
(  799)     CALL SELF%CSPRHS%UPDATE_VIEW(BLOCK_INDEX)
(  800)     CALL SELF%GWS%UPDATE_VIEW(BLOCK_INDEX)
(  801)     CALL SELF%Q%UPDATE_VIEW(BLOCK_INDEX)
(  802)     CALL SELF%I%UPDATE_VIEW(BLOCK_INDEX)
(  803)     CALL SELF%L%UPDATE_VIEW(BLOCK_INDEX)
(  804)     CALL SELF%LCONV%UPDATE_VIEW(BLOCK_INDEX)
(  805)     CALL SELF%ICONV%UPDATE_VIEW(BLOCK_INDEX)
(  806)     CALL SELF%RCONV%UPDATE_VIEW(BLOCK_INDEX)
(  807)     CALL SELF%SCONV%UPDATE_VIEW(BLOCK_INDEX)
(  808)     CALL SELF%IRAD%UPDATE_VIEW(BLOCK_INDEX)
(  809)     CALL SELF%LRAD%UPDATE_VIEW(BLOCK_INDEX)
(  810)     CALL SELF%S%UPDATE_VIEW(BLOCK_INDEX)
(  811)     CALL SELF%R%UPDATE_VIEW(BLOCK_INDEX)
(  812)     CALL SELF%G%UPDATE_VIEW(BLOCK_INDEX)
(  813)     CALL SELF%H%UPDATE_VIEW(BLOCK_INDEX)
(  814)     CALL SELF%TKE%UPDATE_VIEW(BLOCK_INDEX)
(  815)     CALL SELF%TTE%UPDATE_VIEW(BLOCK_INDEX)
(  816)     CALL SELF%EFB1%UPDATE_VIEW(BLOCK_INDEX)
(  817)     CALL SELF%EFB2%UPDATE_VIEW(BLOCK_INDEX)
(  818)     CALL SELF%EFB3%UPDATE_VIEW(BLOCK_INDEX)
(  819)     CALL SELF%A%UPDATE_VIEW(BLOCK_INDEX)
(  820)     CALL SELF%O3%UPDATE_VIEW(BLOCK_INDEX)
(  821)     CALL SELF%SRC%UPDATE_VIEW(BLOCK_INDEX)
(  822)     CALL SELF%MXL%UPDATE_VIEW(BLOCK_INDEX)
(  823)     CALL SELF%SHTUR%UPDATE_VIEW(BLOCK_INDEX)
(  824)     CALL SELF%FQTUR%UPDATE_VIEW(BLOCK_INDEX)
(  825)     CALL SELF%FSTUR%UPDATE_VIEW(BLOCK_INDEX)
(  826)     CALL SELF%CPF%UPDATE_VIEW(BLOCK_INDEX)
(  827)     CALL SELF%SPF%UPDATE_VIEW(BLOCK_INDEX)
(  828)     CALL SELF%CVGQ%UPDATE_VIEW(BLOCK_INDEX)
(  829)     CALL SELF%QVA%UPDATE_VIEW(BLOCK_INDEX)
(  830)     ! Note, we assume allocation of size 0 for inactive variables!
(  831)     DO I=1, SIZE(SELF%GHG)
(  832)       CALL SELF%GHG(I)%UPDATE_VIEW(BLOCK_INDEX)
(  833)     END DO
(  834)     ! Note, we assume allocation of size 0 for inactive variables!
(  835)     DO I=1, SIZE(SELF%CHEM)
(  836)       CALL SELF%CHEM(I)%UPDATE_VIEW(BLOCK_INDEX)
(  837)     END DO
(  838)     ! Note, we assume allocation of size 0 for inactive variables!
(  839)     DO I=1, SIZE(SELF%AERO)
(  840)       CALL SELF%AERO(I)%UPDATE_VIEW(BLOCK_INDEX)
(  841)     END DO
(  842)     CALL SELF%LRCH4%UPDATE_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 17

(  843)     ! Note, we assume allocation of size 0 for inactive variables!
(  844)     DO I=1, SIZE(SELF%FORC)
(  845)       CALL SELF%FORC(I)%UPDATE_VIEW(BLOCK_INDEX)
(  846)     END DO
(  847)     ! Note, we assume allocation of size 0 for inactive variables!
(  848)     DO I=1, SIZE(SELF%EZDIAG)
(  849)       CALL SELF%EZDIAG(I)%UPDATE_VIEW(BLOCK_INDEX)
(  850)     END DO
(  851)     ! Note, we assume allocation of size 0 for inactive variables!
(  852)     DO I=1, SIZE(SELF%ERA40)
(  853)       CALL SELF%ERA40(I)%UPDATE_VIEW(BLOCK_INDEX)
(  854)     END DO
(  855)     ! Note, we assume allocation of size 0 for inactive variables!
(  856)     DO I=1, SIZE(SELF%NOGW)
(  857)       CALL SELF%NOGW(I)%UPDATE_VIEW(BLOCK_INDEX)
(  858)     END DO
(  859)     ! Note, we assume allocation of size 0 for inactive variables!
(  860)     DO I=1, SIZE(SELF%EDRP)
(  861)       CALL SELF%EDRP(I)%UPDATE_VIEW(BLOCK_INDEX)
(  862)     END DO
(  863)     ! Note, we assume allocation of size 0 for inactive variables!
(  864)     DO I=1, SIZE(SELF%SLDIA)
(  865)       CALL SELF%SLDIA(I)%UPDATE_VIEW(BLOCK_INDEX)
(  866)     END DO
(  867)     ! Note, we assume allocation of size 0 for inactive variables!
(  868)     DO I=1, SIZE(SELF%AERAOT)
(  869)       CALL SELF%AERAOT(I)%UPDATE_VIEW(BLOCK_INDEX)
(  870)     END DO
(  871)     ! Note, we assume allocation of size 0 for inactive variables!
(  872)     DO I=1, SIZE(SELF%AERLISI)
(  873)       CALL SELF%AERLISI(I)%UPDATE_VIEW(BLOCK_INDEX)
(  874)     END DO
(  875)     ! Note, we assume allocation of size 0 for inactive variables!
(  876)     DO I=1, SIZE(SELF%AEROUT)
(  877)       CALL SELF%AEROUT(I)%UPDATE_VIEW(BLOCK_INDEX)
(  878)     END DO
(  879)     ! Note, we assume allocation of size 0 for inactive variables!
(  880)     DO I=1, SIZE(SELF%AEROCLIM)
(  881)       CALL SELF%AEROCLIM(I)%UPDATE_VIEW(BLOCK_INDEX)
(  882)     END DO
(  883)     ! Note, we assume allocation of size 0 for inactive variables!
(  884)     DO I=1, SIZE(SELF%UVP)
(  885)       CALL SELF%UVP(I)%UPDATE_VIEW(BLOCK_INDEX)
(  886)     END DO
(  887)     ! Note, we assume allocation of size 0 for inactive variables!
(  888)     DO I=1, SIZE(SELF%PHYS)
(  889)       CALL SELF%PHYS(I)%UPDATE_VIEW(BLOCK_INDEX)
(  890)     END DO
(  891)     CALL SELF%PHYCTY%UPDATE_VIEW(BLOCK_INDEX)
(  892)     CALL SELF%RSPEC%UPDATE_VIEW(BLOCK_INDEX)
(  893)     CALL SELF%SDSAT%UPDATE_VIEW(BLOCK_INDEX)
(  894)     CALL SELF%CVV%UPDATE_VIEW(BLOCK_INDEX)
(  895)     CALL SELF%RKTH%UPDATE_VIEW(BLOCK_INDEX)
(  896)     CALL SELF%RKTQV%UPDATE_VIEW(BLOCK_INDEX)
(  897)     CALL SELF%RKTQC%UPDATE_VIEW(BLOCK_INDEX)
(  898)     CALL SELF%UOM%UPDATE_VIEW(BLOCK_INDEX)
(  899)     CALL SELF%UAL%UPDATE_VIEW(BLOCK_INDEX)
(  900)     CALL SELF%DOM%UPDATE_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 18

(  901)     CALL SELF%DAL%UPDATE_VIEW(BLOCK_INDEX)
(  902)     CALL SELF%UEN%UPDATE_VIEW(BLOCK_INDEX)
(  903)     CALL SELF%UNEBH%UPDATE_VIEW(BLOCK_INDEX)
(  904)     ! Note, we assume allocation of size 0 for inactive variables!
(  905)     DO I=1, SIZE(SELF%CRM)
(  906)       CALL SELF%CRM(I)%UPDATE_VIEW(BLOCK_INDEX)
(  907)     END DO
(  908)     ! Note, we assume allocation of size 0 for inactive variables!
(  909)     DO I=1, SIZE(SELF%LIMA)
(  910)       CALL SELF%LIMA(I)%UPDATE_VIEW(BLOCK_INDEX)
(  911)     END DO
(  912)     CALL SELF%FSD%UPDATE_VIEW(BLOCK_INDEX)
(  913)     ! Note, we assume allocation of size 0 for inactive variables!
(  914)     DO I=1, SIZE(SELF%EXT)
(  915)       CALL SELF%EXT(I)%UPDATE_VIEW(BLOCK_INDEX)
(  916)     END DO
(  917) 
(  918)     ! Manually update variables in ECPHYS sub-type
(  919)     CALL SELF%ECPHYS%USTRTI%UPDATE_VIEW(BLOCK_INDEX)
(  920)     CALL SELF%ECPHYS%VSTRTI%UPDATE_VIEW(BLOCK_INDEX)
(  921)     CALL SELF%ECPHYS%AHFSTI%UPDATE_VIEW(BLOCK_INDEX)
(  922)     CALL SELF%ECPHYS%EVAPTI%UPDATE_VIEW(BLOCK_INDEX)
(  923)     CALL SELF%ECPHYS%TSKTI%UPDATE_VIEW(BLOCK_INDEX)
(  924) 
(  925)     CALL SELF%GEOMETRY%UPDATE_VIEW (BLOCK_INDEX)
(  926) 
(  927)   END SUBROUTINE FIELD_VARIABLES_UPDATE_VIEW
(  928) 
(  929)   SUBROUTINE FIELD_VARIABLES_FINAL(SELF)
(  930)     ! Update the internal data view pointers of all associated variables
(  931)     CLASS(FIELD_VARIABLES) :: SELF
(  932)     INTEGER(KIND=JPIM) :: I
(  933) 
(  934)     CALL SELF%U%FINAL()
(  935)     CALL SELF%V%FINAL()
(  936)     CALL SELF%T%FINAL()
(  937)     CALL SELF%DIV%FINAL()
(  938)     CALL SELF%VOR%FINAL()
(  939)     CALL SELF%SPD%FINAL()
(  940)     CALL SELF%SVD%FINAL()
(  941)     CALL SELF%CSPDNL%FINAL()
(  942)     CALL SELF%CSPNL%FINAL()
(  943)     CALL SELF%CSVDPT%FINAL()
(  944)     CALL SELF%CTNL%FINAL()
(  945)     CALL SELF%CTPT%FINAL()
(  946)     CALL SELF%CUNL%FINAL()
(  947)     CALL SELF%CUPT%FINAL()
(  948)     CALL SELF%CVNL%FINAL()
(  949)     CALL SELF%CVPT%FINAL()
(  950)     CALL SELF%CVWVNL%FINAL()
(  951)     CALL SELF%DPHI%FINAL()
(  952)     CALL SELF%EDOT%FINAL()
(  953)     CALL SELF%GW%FINAL()
(  954)     CALL SELF%NHX%FINAL()
(  955)     CALL SELF%NHY%FINAL()
(  956)     CALL SELF%SGRTL%FINAL()
(  957)     CALL SELF%SGRTM%FINAL()
(  958)     CALL SELF%SPDNL%FINAL()






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 19

(  959)     CALL SELF%SPDNL_SI%FINAL()
(  960)     CALL SELF%SPNL%FINAL()
(  961)     CALL SELF%SPNL_SI%FINAL()
(  962)     CALL SELF%SVDNL_SI%FINAL()
(  963)     CALL SELF%TNL%FINAL()
(  964)     CALL SELF%TNL_SI%FINAL()
(  965)     CALL SELF%UNL%FINAL()
(  966)     CALL SELF%UNL_SI%FINAL()
(  967)     CALL SELF%VNL%FINAL()
(  968)     CALL SELF%VNL_SI%FINAL()
(  969)     CALL SELF%VWVNL%FINAL()
(  970)     CALL SELF%CURHS%FINAL()
(  971)     CALL SELF%CVRHS%FINAL()
(  972)     CALL SELF%CTRHS%FINAL()
(  973)     CALL SELF%CSPDRHS%FINAL()
(  974)     CALL SELF%CSVDRHS%FINAL()
(  975)     CALL SELF%NHXNL%FINAL()
(  976)     CALL SELF%CNHXNL%FINAL()
(  977)     CALL SELF%SP%FINAL()
(  978)     CALL SELF%SPNL2%FINAL()
(  979)     CALL SELF%PREHYDS%FINAL()
(  980)     CALL SELF%DBBC%FINAL()
(  981)     CALL SELF%CSPPT%FINAL()
(  982)     CALL SELF%CSPNL2%FINAL()
(  983)     CALL SELF%CSPRHS%FINAL()
(  984)     CALL SELF%GWS%FINAL()
(  985)     CALL SELF%Q%FINAL()
(  986)     CALL SELF%I%FINAL()
(  987)     CALL SELF%L%FINAL()
(  988)     CALL SELF%LCONV%FINAL()
(  989)     CALL SELF%ICONV%FINAL()
(  990)     CALL SELF%RCONV%FINAL()
(  991)     CALL SELF%SCONV%FINAL()
(  992)     CALL SELF%IRAD%FINAL()
(  993)     CALL SELF%LRAD%FINAL()
(  994)     CALL SELF%S%FINAL()
(  995)     CALL SELF%R%FINAL()
(  996)     CALL SELF%G%FINAL()
(  997)     CALL SELF%H%FINAL()
(  998)     CALL SELF%TKE%FINAL()
(  999)     CALL SELF%TTE%FINAL()
( 1000)     CALL SELF%EFB1%FINAL()
( 1001)     CALL SELF%EFB2%FINAL()
( 1002)     CALL SELF%EFB3%FINAL()
( 1003)     CALL SELF%A%FINAL()
( 1004)     CALL SELF%O3%FINAL()
( 1005)     CALL SELF%SRC%FINAL()
( 1006)     CALL SELF%MXL%FINAL()
( 1007)     CALL SELF%SHTUR%FINAL()
( 1008)     CALL SELF%FQTUR%FINAL()
( 1009)     CALL SELF%FSTUR%FINAL()
( 1010)     CALL SELF%CPF%FINAL()
( 1011)     CALL SELF%SPF%FINAL()
( 1012)     CALL SELF%CVGQ%FINAL()
( 1013)     CALL SELF%QVA%FINAL()
( 1014)     IF (ALLOCATED(SELF%GHG_G)) THEN
( 1015)       DO I=1, SIZE(SELF%GHG)
( 1016)         CALL SELF%GHG(I)%FINAL()






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 20

( 1017)       END DO
( 1018)       DEALLOCATE(SELF%GHG_G)
( 1019)       NULLIFY(SELF%GHG)
( 1020)     END IF
( 1021)     IF (ALLOCATED(SELF%CHEM_G)) THEN
( 1022)       DO I=1, SIZE(SELF%CHEM)
( 1023)         CALL SELF%CHEM(I)%FINAL()
( 1024)       END DO
( 1025)       DEALLOCATE(SELF%CHEM_G)
( 1026)       NULLIFY(SELF%CHEM)
( 1027)     END IF
( 1028)     IF (ALLOCATED(SELF%AERO_G)) THEN
( 1029)       DO I=1, SIZE(SELF%AERO)
( 1030)         CALL SELF%AERO(I)%FINAL()
( 1031)       END DO
( 1032)       DEALLOCATE(SELF%AERO_G)
( 1033)       NULLIFY(SELF%AERO)
( 1034)     END IF
( 1035)     CALL SELF%LRCH4%FINAL()
( 1036)     IF (ALLOCATED(SELF%FORC_G)) THEN
( 1037)       DO I=1, SIZE(SELF%FORC)
( 1038)         CALL SELF%FORC(I)%FINAL()
( 1039)       END DO
( 1040)       DEALLOCATE(SELF%FORC_G)
( 1041)       NULLIFY(SELF%FORC)
( 1042)     END IF
( 1043)     IF (ALLOCATED(SELF%EZDIAG_G)) THEN
( 1044)       DO I=1, SIZE(SELF%EZDIAG)
( 1045)         CALL SELF%EZDIAG(I)%FINAL()
( 1046)       END DO
( 1047)       DEALLOCATE(SELF%EZDIAG_G)
( 1048)       NULLIFY(SELF%EZDIAG)
( 1049)     END IF
( 1050)     IF (ALLOCATED(SELF%ERA40_G)) THEN
( 1051)       DO I=1, SIZE(SELF%ERA40)
( 1052)         CALL SELF%ERA40(I)%FINAL()
( 1053)       END DO
( 1054)       DEALLOCATE(SELF%ERA40_G)
( 1055)       NULLIFY(SELF%ERA40)
( 1056)     END IF
( 1057)     IF (ALLOCATED(SELF%NOGW_G)) THEN
( 1058)       DO I=1, SIZE(SELF%NOGW)
( 1059)         CALL SELF%NOGW(I)%FINAL()
( 1060)       END DO
( 1061)       DEALLOCATE(SELF%NOGW_G)
( 1062)       NULLIFY(SELF%NOGW)
( 1063)     END IF
( 1064)     IF (ALLOCATED(SELF%EDRP_G)) THEN
( 1065)       DO I=1, SIZE(SELF%EDRP)
( 1066)         CALL SELF%EDRP(I)%FINAL()
( 1067)       END DO
( 1068)       DEALLOCATE(SELF%EDRP_G)
( 1069)       NULLIFY(SELF%EDRP)
( 1070)     END IF
( 1071)     IF (ALLOCATED(SELF%SLDIA_G)) THEN
( 1072)       DO I=1, SIZE(SELF%SLDIA)
( 1073)         CALL SELF%SLDIA(I)%FINAL()
( 1074)       END DO






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 21

( 1075)       DEALLOCATE(SELF%SLDIA_G)
( 1076)       NULLIFY(SELF%SLDIA)
( 1077)     END IF
( 1078)     IF (ALLOCATED(SELF%AERAOT_G)) THEN
( 1079)       DO I=1, SIZE(SELF%AERAOT)
( 1080)         CALL SELF%AERAOT(I)%FINAL()
( 1081)       END DO
( 1082)       DEALLOCATE(SELF%AERAOT_G)
( 1083)       NULLIFY(SELF%AERAOT)
( 1084)     END IF
( 1085)     IF (ALLOCATED(SELF%AERLISI_G)) THEN
( 1086)       DO I=1, SIZE(SELF%AERLISI)
( 1087)         CALL SELF%AERLISI(I)%FINAL()
( 1088)       END DO
( 1089)       DEALLOCATE(SELF%AERLISI_G)
( 1090)       NULLIFY(SELF%AERLISI)
( 1091)     END IF
( 1092)     IF (ALLOCATED(SELF%AEROUT_G)) THEN
( 1093)       DO I=1, SIZE(SELF%AEROUT)
( 1094)         CALL SELF%AEROUT(I)%FINAL()
( 1095)       END DO
( 1096)       DEALLOCATE(SELF%AEROUT_G)
( 1097)       NULLIFY(SELF%AEROUT)
( 1098)     END IF
( 1099)     IF (ALLOCATED(SELF%AEROCLIM_G)) THEN
( 1100)       DO I=1, SIZE(SELF%AEROCLIM)
( 1101)         CALL SELF%AEROCLIM(I)%FINAL()
( 1102)       END DO
( 1103)       DEALLOCATE(SELF%AEROCLIM_G)
( 1104)       NULLIFY(SELF%AEROCLIM)
( 1105)     END IF
( 1106)     IF (ALLOCATED(SELF%UVP_G)) THEN
( 1107)       DO I=1, SIZE(SELF%UVP)
( 1108)         CALL SELF%UVP(I)%FINAL()
( 1109)       END DO
( 1110)       DEALLOCATE(SELF%UVP_G)
( 1111)       NULLIFY(SELF%UVP)
( 1112)     END IF
( 1113)     IF (ALLOCATED(SELF%PHYS_G)) THEN
( 1114)       DO I=1, SIZE(SELF%PHYS)
( 1115)         CALL SELF%PHYS(I)%FINAL()
( 1116)       END DO
( 1117)       DEALLOCATE(SELF%PHYS_G)
( 1118)       NULLIFY(SELF%PHYS)
( 1119)     END IF
( 1120)     CALL SELF%PHYCTY%FINAL()
( 1121)     CALL SELF%RSPEC%FINAL()
( 1122)     CALL SELF%SDSAT%FINAL()
( 1123)     CALL SELF%CVV%FINAL()
( 1124)     CALL SELF%RKTH%FINAL()
( 1125)     CALL SELF%RKTQV%FINAL()
( 1126)     CALL SELF%RKTQC%FINAL()
( 1127)     CALL SELF%UOM%FINAL()
( 1128)     CALL SELF%UAL%FINAL()
( 1129)     CALL SELF%DOM%FINAL()
( 1130)     CALL SELF%DAL%FINAL()
( 1131)     CALL SELF%UEN%FINAL()
( 1132)     CALL SELF%UNEBH%FINAL()






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 22

( 1133)     IF (ALLOCATED(SELF%CRM_G)) THEN
( 1134)       DO I=1, SIZE(SELF%CRM)
( 1135)         CALL SELF%CRM(I)%FINAL()
( 1136)       END DO
( 1137)       DEALLOCATE(SELF%CRM_G)
( 1138)       NULLIFY(SELF%CRM)
( 1139)     END IF
( 1140)     IF (ALLOCATED(SELF%LIMA_G)) THEN
( 1141)       DO I=1, SIZE(SELF%LIMA)
( 1142)         CALL SELF%LIMA(I)%FINAL()
( 1143)       END DO
( 1144)       DEALLOCATE(SELF%LIMA_G)
( 1145)       NULLIFY(SELF%LIMA)
( 1146)     END IF
( 1147)     CALL SELF%FSD%FINAL()
( 1148)     IF (ALLOCATED(SELF%EXT_G)) THEN
( 1149)       DO I=1, SIZE(SELF%EXT)
( 1150)         CALL SELF%EXT(I)%FINAL()
( 1151)       END DO
( 1152)       DEALLOCATE(SELF%EXT_G)
( 1153)       NULLIFY(SELF%EXT)
( 1154)     END IF
( 1155)   END SUBROUTINE FIELD_VARIABLES_FINAL
( 1156) 
( 1157)   SUBROUTINE FIELD_VARIABLES_RESET_ARRAYS(SELF)
( 1158)     ! Deallocate and reset thread-local variables arrays.
( 1159)     !
( 1160)     ! This ensures we are not leaking thread-local objects and should
( 1161)     ! be done after parallel regions.
( 1162)     CLASS(FIELD_VARIABLES), TARGET :: SELF
( 1163)     INTEGER(KIND=JPIM) :: I
( 1164) 
( 1165)     ! Deallocate and reset thread-local variables arrays
( 1166)     DEALLOCATE(SELF%GHG)
( 1167)     SELF%GHG => SELF%GHG_G
( 1168)     ! Deallocate and reset thread-local variables arrays
( 1169)     DEALLOCATE(SELF%CHEM)
( 1170)     SELF%CHEM => SELF%CHEM_G
( 1171)     ! Deallocate and reset thread-local variables arrays
( 1172)     DEALLOCATE(SELF%AERO)
( 1173)     SELF%AERO => SELF%AERO_G
( 1174)     ! Deallocate and reset thread-local variables arrays
( 1175)     DEALLOCATE(SELF%FORC)
( 1176)     SELF%FORC => SELF%FORC_G
( 1177)     ! Deallocate and reset thread-local variables arrays
( 1178)     DEALLOCATE(SELF%EZDIAG)
( 1179)     SELF%EZDIAG => SELF%EZDIAG_G
( 1180)     ! Deallocate and reset thread-local variables arrays
( 1181)     DEALLOCATE(SELF%ERA40)
( 1182)     SELF%ERA40 => SELF%ERA40_G
( 1183)     ! Deallocate and reset thread-local variables arrays
( 1184)     DEALLOCATE(SELF%NOGW)
( 1185)     SELF%NOGW => SELF%NOGW_G
( 1186)     ! Deallocate and reset thread-local variables arrays
( 1187)     DEALLOCATE(SELF%EDRP)
( 1188)     SELF%EDRP => SELF%EDRP_G
( 1189)     ! Deallocate and reset thread-local variables arrays
( 1190)     DEALLOCATE(SELF%SLDIA)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 23

( 1191)     SELF%SLDIA => SELF%SLDIA_G
( 1192)     ! Deallocate and reset thread-local variables arrays
( 1193)     DEALLOCATE(SELF%AERAOT)
( 1194)     SELF%AERAOT => SELF%AERAOT_G
( 1195)     ! Deallocate and reset thread-local variables arrays
( 1196)     DEALLOCATE(SELF%AERLISI)
( 1197)     SELF%AERLISI => SELF%AERLISI_G
( 1198)     ! Deallocate and reset thread-local variables arrays
( 1199)     DEALLOCATE(SELF%AEROUT)
( 1200)     SELF%AEROUT => SELF%AEROUT_G
( 1201)     ! Deallocate and reset thread-local variables arrays
( 1202)     DEALLOCATE(SELF%AEROCLIM)
( 1203)     SELF%AEROCLIM => SELF%AEROCLIM_G
( 1204)     ! Deallocate and reset thread-local variables arrays
( 1205)     DEALLOCATE(SELF%UVP)
( 1206)     SELF%UVP => SELF%UVP_G
( 1207)     ! Deallocate and reset thread-local variables arrays
( 1208)     DEALLOCATE(SELF%PHYS)
( 1209)     SELF%PHYS => SELF%PHYS_G
( 1210)     ! Deallocate and reset thread-local variables arrays
( 1211)     DEALLOCATE(SELF%CRM)
( 1212)     SELF%CRM => SELF%CRM_G
( 1213)     ! Deallocate and reset thread-local variables arrays
( 1214)     DEALLOCATE(SELF%LIMA)
( 1215)     SELF%LIMA => SELF%LIMA_G
( 1216)     ! Deallocate and reset thread-local variables arrays
( 1217)     DEALLOCATE(SELF%EXT)
( 1218)     SELF%EXT => SELF%EXT_G
( 1219) 
( 1220)     DEALLOCATE (SELF%GFL_PTR)
( 1221)     NULLIFY (SELF%GFL_PTR)
( 1222) 
( 1223)   END SUBROUTINE FIELD_VARIABLES_RESET_ARRAYS
( 1224) 
( 1225)   SUBROUTINE GEOMETRY_VARIABLES_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1226)     CLASS (GEOMETRY_VARIABLES) :: SELF
( 1227)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1228)     CALL SELF%RCORI%UPDATE_VIEW (BLOCK_INDEX)
( 1229)     CALL SELF%RCORIC%UPDATE_VIEW (BLOCK_INDEX)
( 1230)     CALL SELF%GEMU%UPDATE_VIEW (BLOCK_INDEX)
( 1231)     CALL SELF%GSQM2%UPDATE_VIEW (BLOCK_INDEX)
( 1232)     CALL SELF%GELAM%UPDATE_VIEW (BLOCK_INDEX)
( 1233)     CALL SELF%GELAT%UPDATE_VIEW (BLOCK_INDEX)
( 1234)     CALL SELF%GECLO%UPDATE_VIEW (BLOCK_INDEX)
( 1235)     CALL SELF%GESLO%UPDATE_VIEW (BLOCK_INDEX)
( 1236)     CALL SELF%GM%UPDATE_VIEW (BLOCK_INDEX)
( 1237)     CALL SELF%GMAPPA%UPDATE_VIEW (BLOCK_INDEX)
( 1238)     CALL SELF%GOMVRL%UPDATE_VIEW (BLOCK_INDEX)
( 1239)     CALL SELF%GOMVRM%UPDATE_VIEW (BLOCK_INDEX)
( 1240)     CALL SELF%GNORDL%UPDATE_VIEW (BLOCK_INDEX)
( 1241)     CALL SELF%GNORDM%UPDATE_VIEW (BLOCK_INDEX)
( 1242)     CALL SELF%GNORDLCL%UPDATE_VIEW (BLOCK_INDEX)
( 1243)     CALL SELF%GNORDMCL%UPDATE_VIEW (BLOCK_INDEX)
( 1244)     CALL SELF%GNORDMCM%UPDATE_VIEW (BLOCK_INDEX)
( 1245)     CALL SELF%GAW%UPDATE_VIEW (BLOCK_INDEX)
( 1246)     CALL SELF%OROG%UPDATE_VIEW (BLOCK_INDEX)
( 1247)     CALL SELF%OROGL%UPDATE_VIEW (BLOCK_INDEX)
( 1248)     CALL SELF%OROGM%UPDATE_VIEW (BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 24

( 1249)     CALL SELF%OROGLL%UPDATE_VIEW (BLOCK_INDEX)
( 1250)     CALL SELF%OROGMM%UPDATE_VIEW (BLOCK_INDEX)
( 1251)     CALL SELF%OROGLM%UPDATE_VIEW (BLOCK_INDEX)
( 1252)     CALL SELF%RCOLON%UPDATE_VIEW (BLOCK_INDEX)
( 1253)     CALL SELF%RSILON%UPDATE_VIEW (BLOCK_INDEX)
( 1254)     CALL SELF%RINDX%UPDATE_VIEW (BLOCK_INDEX)
( 1255)     CALL SELF%RINDY%UPDATE_VIEW (BLOCK_INDEX)
( 1256)     CALL SELF%RATATH%UPDATE_VIEW (BLOCK_INDEX)
( 1257)     CALL SELF%RATATX%UPDATE_VIEW (BLOCK_INDEX)
( 1258)   END SUBROUTINE GEOMETRY_VARIABLES_UPDATE_VIEW
( 1259) 
( 1260)   SUBROUTINE GEOMETRY_VARIABLES_FINAL (SELF)
( 1261)     CLASS (GEOMETRY_VARIABLES) :: SELF
( 1262)     CALL SELF%RCORI%FINAL
( 1263)     CALL SELF%RCORIC%FINAL
( 1264)     CALL SELF%GEMU%FINAL
( 1265)     CALL SELF%GSQM2%FINAL
( 1266)     CALL SELF%GELAM%FINAL
( 1267)     CALL SELF%GELAT%FINAL
( 1268)     CALL SELF%GECLO%FINAL
( 1269)     CALL SELF%GESLO%FINAL
( 1270)     CALL SELF%GM%FINAL
( 1271)     CALL SELF%GMAPPA%FINAL
( 1272)     CALL SELF%GOMVRL%FINAL
( 1273)     CALL SELF%GOMVRM%FINAL
( 1274)     CALL SELF%GNORDL%FINAL
( 1275)     CALL SELF%GNORDM%FINAL
( 1276)     CALL SELF%GNORDLCL%FINAL
( 1277)     CALL SELF%GNORDMCL%FINAL
( 1278)     CALL SELF%GNORDMCM%FINAL
( 1279)     CALL SELF%GAW%FINAL
( 1280)     CALL SELF%OROG%FINAL
( 1281)     CALL SELF%OROGL%FINAL
( 1282)     CALL SELF%OROGM%FINAL
( 1283)     CALL SELF%OROGLL%FINAL
( 1284)     CALL SELF%OROGMM%FINAL
( 1285)     CALL SELF%OROGLM%FINAL
( 1286)     CALL SELF%RCOLON%FINAL
( 1287)     CALL SELF%RSILON%FINAL
( 1288)     CALL SELF%RINDX%FINAL
( 1289)     CALL SELF%RINDY%FINAL
( 1290)     CALL SELF%RATATH%FINAL
( 1291)     CALL SELF%RATATX%FINAL
( 1292)   END SUBROUTINE GEOMETRY_VARIABLES_FINAL
( 1293) 
( 1294) END MODULE FIELD_VARIABLES_MOD
( 1295) 
( 1296) 
( 1297) 















NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 25

(    1) # 1 "field_variables_mod.F90"
(    1)  
(    2) # 3 "field_variables_mod.F90"
(    3) MODULE FIELD_VARIABLES_MOD
(    4)   ! The FIELD_VARIABLES type provides namespaced access to all core
(    5)   ! VARIABLE objects used.
(    6)   !
(    7)   ! These VARIABLE objects are currently wrappers around GMV and GFL
(    8)   ! fields and provide accessor methods to the individual FIELD
(    9)   ! storage objects and NPROMA array views (sub-array blocks) in
(   10)   ! OpenMP loops. The FIELD_VARIABLES%UPDATE_VIEW(BLOCK_INDEX) utility
(   11)   ! ensures that all block pointers provided by the stored variable
(   12)   ! objects are pointing to the correct sub-arrry block.
(   13) # 14 "field_variables_mod.F90"
(   14) USE PARKIND1, ONLY: JPIM, JPRB
(   15) USE VARIABLE_MODULE, ONLY: VARIABLE_2D, VARIABLE_3D, VARIABLE_4D
(   16) USE VARIABLE_MODULE, ONLY: VARIABLE_3D_PTR
(   17) # 18 "field_variables_mod.F90"
(   18) IMPLICIT NONE
(   19) # 20 "field_variables_mod.F90"
(   20) TYPE GEOMETRY_VARIABLES
(   21) # 22 "field_variables_mod.F90"
(   22)   ! Variables for arrays specific to the geometry
(   23)   TYPE(VARIABLE_2D) :: RCORI
(   24)   TYPE(VARIABLE_2D) :: RCORIC
(   25)   TYPE(VARIABLE_2D) :: GEMU
(   26)   TYPE(VARIABLE_2D) :: GSQM2
(   27)   TYPE(VARIABLE_2D) :: GELAM
(   28)   TYPE(VARIABLE_2D) :: GELAT
(   29)   TYPE(VARIABLE_2D) :: GECLO
(   30)   TYPE(VARIABLE_2D) :: GESLO
(   31)   TYPE(VARIABLE_2D) :: GM
(   32)   TYPE(VARIABLE_2D) :: GMAPPA
(   33)   TYPE(VARIABLE_2D) :: GOMVRL
(   34)   TYPE(VARIABLE_2D) :: GOMVRM
(   35)   TYPE(VARIABLE_2D) :: GNORDL
(   36)   TYPE(VARIABLE_2D) :: GNORDM
(   37)   TYPE(VARIABLE_2D) :: GNORDLCL
(   38)   TYPE(VARIABLE_2D) :: GNORDMCL
(   39)   TYPE(VARIABLE_2D) :: GNORDMCM
(   40)   TYPE(VARIABLE_2D) :: GAW
(   41)   TYPE(VARIABLE_2D) :: OROG
(   42)   TYPE(VARIABLE_2D) :: OROGL
(   43)   TYPE(VARIABLE_2D) :: OROGM
(   44)   TYPE(VARIABLE_2D) :: OROGLL
(   45)   TYPE(VARIABLE_2D) :: OROGMM
(   46)   TYPE(VARIABLE_2D) :: OROGLM
(   47)   TYPE(VARIABLE_2D) :: RCOLON
(   48)   TYPE(VARIABLE_2D) :: RSILON
(   49)   TYPE(VARIABLE_2D) :: RINDX
(   50)   TYPE(VARIABLE_2D) :: RINDY
(   51)   TYPE(VARIABLE_2D) :: RATATH
(   52)   TYPE(VARIABLE_2D) :: RATATX
(   53) # 54 "field_variables_mod.F90"
(   54) CONTAINS
(   55)   PROCEDURE :: UPDATE_VIEW => GEOMETRY_VARIABLES_UPDATE_VIEW
(   56)   PROCEDURE :: FINAL => GEOMETRY_VARIABLES_FINAL
(   57) END TYPE GEOMETRY_VARIABLES






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 26

(   58) # 59 "field_variables_mod.F90"
(   59) TYPE ECPHYS_VARIABLES
(   60)   ! Variables for arrays in EC_PHYS_FIELDS_MOD
(   61)   TYPE(VARIABLE_3D) :: USTRTI  ! E-W  SURFACE STRESS
(   62)   TYPE(VARIABLE_3D) :: VSTRTI  ! N-S  SURFACE STRESS
(   63)   TYPE(VARIABLE_3D) :: AHFSTI  ! SURFACE SENSIBLE HEAT FLUX
(   64)   TYPE(VARIABLE_3D) :: EVAPTI  ! EVAPORATION
(   65)   TYPE(VARIABLE_3D) :: TSKTI   ! SKIN TEMPERATURE
(   66) END TYPE ECPHYS_VARIABLES
(   67) # 68 "field_variables_mod.F90"
(   68) TYPE RADIATION_VARIABLES
(   69)   ! Variables for arrays specific to radiation
(   70)   TYPE(VARIABLE_3D) :: EMTD      ! longwave net flux
(   71)   TYPE(VARIABLE_3D) :: TRSW      ! shortwave net transmissivity (multiply by incoming SW to get flux)
(   72)   TYPE(VARIABLE_3D) :: EMTC      ! clear-sky net longwave flux
(   73)   TYPE(VARIABLE_3D) :: TRSC      ! clear-sky net shortwave transmissivity
(   74)   TYPE(VARIABLE_3D) :: EMTU
(   75)   TYPE(VARIABLE_4D) :: TAUAER    ! prognostic aerosol variable for radiation and clouds
(   76)   TYPE(VARIABLE_2D) :: SRSWD     ! downward SW radiation at the surface
(   77)   TYPE(VARIABLE_3D) :: SRLWD     ! downward LW radiation at the surface
(   78)   TYPE(VARIABLE_2D) :: SRLWDC    ! clear-sky downward LW radiation at the surface
(   79)   TYPE(VARIABLE_2D) :: SRSWDC    ! clear-sky downward SW radiation at the surface
(   80)   TYPE(VARIABLE_2D) :: SRSWDCS   ! clear-sky NET SW radiation at the surface
(   81)   TYPE(VARIABLE_2D) :: SRLWDCS   ! clear-sky NET LW radiation at the surface
(   82)   TYPE(VARIABLE_2D) :: SRSWDV    ! downward SW visible radiation at the surface
(   83)   TYPE(VARIABLE_2D) :: SRSWDUV   ! downward SW ultraviolet/visible radiation at the surface
(   84)   TYPE(VARIABLE_2D) :: EDRO
(   85)   TYPE(VARIABLE_2D) :: SRSWPAR   ! downward SW PAR radiation at the surface
(   86)   TYPE(VARIABLE_2D) :: SRSWUVB   ! downward UV-B radiation at the surface
(   87)   TYPE(VARIABLE_2D) :: SRSWPARC  ! downward clear-sky SW PAR radiation at the surface
(   88)   TYPE(VARIABLE_2D) :: SRSWTINC  ! TOA incident solar radiation
(   89)   TYPE(VARIABLE_2D) :: RMOON     ! M-F military application
(   90)   TYPE(VARIABLE_2D) :: SRFDIR    ! total sky direct downward SW radiation
(   91)   TYPE(VARIABLE_2D) :: SRCDIR    ! clear-sky direct downward SW radiation
(   92)   TYPE(VARIABLE_3D) :: DERIVATIVELW  ! derivative to update LW radiation between calls to full radiation scheme
(   93) END TYPE RADIATION_VARIABLES
(   94) # 95 "field_variables_mod.F90"
(   95) TYPE FIELD_VARIABLES
(   96)   TYPE(VARIABLE_3D) :: U  ! U-wind
(   97)   TYPE(VARIABLE_3D) :: V  ! V-wind
(   98)   TYPE(VARIABLE_3D) :: T  ! Temperature
(   99)   TYPE(VARIABLE_3D) :: DIV  ! Divergence
(  100)   TYPE(VARIABLE_3D) :: VOR  ! Vorticity
(  101)   TYPE(VARIABLE_3D) :: SPD  ! Pressure departure variable
(  102)   TYPE(VARIABLE_3D) :: SVD  ! Vertical div or velocity variable
(  103)   TYPE(VARIABLE_3D) :: CSPDNL  ! 
(  104)   TYPE(VARIABLE_3D) :: CSPNL  ! 
(  105)   TYPE(VARIABLE_3D) :: CSVDPT  ! 
(  106)   TYPE(VARIABLE_3D) :: CTNL  ! 
(  107)   TYPE(VARIABLE_3D) :: CTPT  ! 
(  108)   TYPE(VARIABLE_3D) :: CUNL  ! 
(  109)   TYPE(VARIABLE_3D) :: CUPT  ! 
(  110)   TYPE(VARIABLE_3D) :: CVNL  ! 
(  111)   TYPE(VARIABLE_3D) :: CVPT  ! 
(  112)   TYPE(VARIABLE_3D) :: CVWVNL  ! 
(  113)   TYPE(VARIABLE_3D) :: DPHI  ! 
(  114)   TYPE(VARIABLE_3D) :: EDOT  ! 
(  115)   TYPE(VARIABLE_3D) :: GW  ! 






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 27

(  116)   TYPE(VARIABLE_3D) :: NHX  ! 
(  117)   TYPE(VARIABLE_3D) :: NHY  ! 
(  118)   TYPE(VARIABLE_3D) :: SGRTL  ! 
(  119)   TYPE(VARIABLE_3D) :: SGRTM  ! 
(  120)   TYPE(VARIABLE_3D) :: SPDNL  ! 
(  121)   TYPE(VARIABLE_3D) :: SPDNL_SI  ! 
(  122)   TYPE(VARIABLE_3D) :: SPNL  ! 
(  123)   TYPE(VARIABLE_3D) :: SPNL_SI  ! 
(  124)   TYPE(VARIABLE_3D) :: SVDNL_SI  ! 
(  125)   TYPE(VARIABLE_3D) :: TNL  ! 
(  126)   TYPE(VARIABLE_3D) :: TNL_SI  ! 
(  127)   TYPE(VARIABLE_3D) :: UNL  ! 
(  128)   TYPE(VARIABLE_3D) :: UNL_SI  ! 
(  129)   TYPE(VARIABLE_3D) :: VNL  ! 
(  130)   TYPE(VARIABLE_3D) :: VNL_SI  ! 
(  131)   TYPE(VARIABLE_3D) :: VWVNL  ! 
(  132)   TYPE(VARIABLE_3D) :: CURHS  ! 
(  133)   TYPE(VARIABLE_3D) :: CVRHS  ! 
(  134)   TYPE(VARIABLE_3D) :: CTRHS  ! 
(  135)   TYPE(VARIABLE_3D) :: CSPDRHS  ! 
(  136)   TYPE(VARIABLE_3D) :: CSVDRHS  ! 
(  137)   TYPE(VARIABLE_3D) :: NHXNL  ! 
(  138)   TYPE(VARIABLE_3D) :: CNHXNL  ! 
(  139)   TYPE(VARIABLE_2D) :: SP  ! Surface pressure
(  140)   TYPE(VARIABLE_2D) :: SPNL2  ! 
(  141)   TYPE(VARIABLE_2D) :: PREHYDS  ! 
(  142)   TYPE(VARIABLE_2D) :: DBBC  ! 
(  143)   TYPE(VARIABLE_2D) :: CSPPT  ! 
(  144)   TYPE(VARIABLE_2D) :: CSPNL2  ! 
(  145)   TYPE(VARIABLE_2D) :: CSPRHS  ! 
(  146)   TYPE(VARIABLE_2D) :: GWS  ! 
(  147)   TYPE(VARIABLE_3D) :: Q  ! Specific humidity
(  148)   TYPE(VARIABLE_3D) :: I  ! Ice water
(  149)   TYPE(VARIABLE_3D) :: L  ! Liquid water
(  150)   TYPE(VARIABLE_3D) :: LCONV  ! Liquid water (CONV. PART)
(  151)   TYPE(VARIABLE_3D) :: ICONV  ! Ice    water (CONV. PART)
(  152)   TYPE(VARIABLE_3D) :: RCONV  ! Rain         (CONV. PART)
(  153)   TYPE(VARIABLE_3D) :: SCONV  ! Snow         (CONV. PART)
(  154)   TYPE(VARIABLE_3D) :: IRAD  ! Radiative cloud Ice water
(  155)   TYPE(VARIABLE_3D) :: LRAD  ! Radiative cloud Liquid water
(  156)   TYPE(VARIABLE_3D) :: S  ! Snow
(  157)   TYPE(VARIABLE_3D) :: R  ! Rain
(  158)   TYPE(VARIABLE_3D) :: G  ! Graupel
(  159)   TYPE(VARIABLE_3D) :: H  ! Hail
(  160)   TYPE(VARIABLE_3D) :: TKE  ! Turbulent Kinetic Energy
(  161)   TYPE(VARIABLE_3D) :: TTE  ! Turbulent Total Energy
(  162)   TYPE(VARIABLE_3D) :: EFB1  ! First variable EFB scheme
(  163)   TYPE(VARIABLE_3D) :: EFB2  ! Second variable EFB scheme
(  164)   TYPE(VARIABLE_3D) :: EFB3  ! Third variable EFB scheme
(  165)   TYPE(VARIABLE_3D) :: A  ! Cloud fraction
(  166)   TYPE(VARIABLE_3D) :: O3  ! Ozone
(  167)   TYPE(VARIABLE_3D) :: SRC  ! Second-order flux for AROME s"rc"/2Sigma_s2 multiplied by Lambda_3
(  168)   TYPE(VARIABLE_3D) :: MXL  ! Prognostic mixing length
(  169)   TYPE(VARIABLE_3D) :: SHTUR  ! Shear source term for turbulence.
(  170)   TYPE(VARIABLE_3D) :: FQTUR  ! Flux form source term for turbulence - moisture.
(  171)   TYPE(VARIABLE_3D) :: FSTUR  ! Flux form source term for turbulence - enthalpy.
(  172)   TYPE(VARIABLE_3D) :: CPF  ! Convective precipitation flux
(  173)   TYPE(VARIABLE_3D) :: SPF  ! Stratiform precipitation flux






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 28

(  174)   TYPE(VARIABLE_3D) :: CVGQ  ! Moisture Convergence for french physics
(  175)   TYPE(VARIABLE_3D) :: QVA  ! Total humidity variation
(  176)   TYPE(VARIABLE_3D), ALLOCATABLE :: GHG_G(:)  ! Greenhouse Gases
(  177)   TYPE(VARIABLE_3D), POINTER :: GHG(:)  ! Greenhouse Gases
(  178)   TYPE(VARIABLE_3D), ALLOCATABLE :: CHEM_G(:)  ! Chemistry
(  179)   TYPE(VARIABLE_3D), POINTER :: CHEM(:)  ! Chemistry
(  180)   TYPE(VARIABLE_3D), ALLOCATABLE :: AERO_G(:)  ! Aerosols
(  181)   TYPE(VARIABLE_3D), POINTER :: AERO(:)  ! Aerosols
(  182)   TYPE(VARIABLE_3D) :: LRCH4  ! CH4 loss rate (instantaneous field)
(  183)   TYPE(VARIABLE_3D), ALLOCATABLE :: FORC_G(:)  ! Large scale forcing
(  184)   TYPE(VARIABLE_3D), POINTER :: FORC(:)  ! Large scale forcing
(  185)   TYPE(VARIABLE_3D), ALLOCATABLE :: EZDIAG_G(:)  ! Easy diagnostics
(  186)   TYPE(VARIABLE_3D), POINTER :: EZDIAG(:)  ! Easy diagnostics
(  187)   TYPE(VARIABLE_3D), ALLOCATABLE :: ERA40_G(:)  ! ERA40 diagnostic fields
(  188)   TYPE(VARIABLE_3D), POINTER :: ERA40(:)  ! ERA40 diagnostic fields
(  189)   TYPE(VARIABLE_3D), ALLOCATABLE :: NOGW_G(:)  ! NORO GWD SCHEME
(  190)   TYPE(VARIABLE_3D), POINTER :: NOGW(:)  ! NORO GWD SCHEME
(  191)   TYPE(VARIABLE_3D), ALLOCATABLE :: EDRP_G(:)  ! Turbulence diagnostics EDR Parameter
(  192)   TYPE(VARIABLE_3D), POINTER :: EDRP(:)  ! Turbulence diagnostics EDR Parameter
(  193)   TYPE(VARIABLE_3D), ALLOCATABLE :: SLDIA_G(:)  ! SL dynamics diagnostics
(  194)   TYPE(VARIABLE_3D), POINTER :: SLDIA(:)  ! SL dynamics diagnostics
(  195)   TYPE(VARIABLE_3D), ALLOCATABLE :: AERAOT_G(:)  ! Aerosol optical thicknesses
(  196)   TYPE(VARIABLE_3D), POINTER :: AERAOT(:)  ! Aerosol optical thicknesses
(  197)   TYPE(VARIABLE_3D), ALLOCATABLE :: AERLISI_G(:)  ! Aerosol lidar simulator
(  198)   TYPE(VARIABLE_3D), POINTER :: AERLISI(:)  ! Aerosol lidar simulator
(  199)   TYPE(VARIABLE_3D), ALLOCATABLE :: AEROUT_G(:)  ! Aerosol outputs
(  200)   TYPE(VARIABLE_3D), POINTER :: AEROUT(:)  ! Aerosol outputs
(  201)   TYPE(VARIABLE_3D), ALLOCATABLE :: AEROCLIM_G(:)  ! Aerosol climatology
(  202)   TYPE(VARIABLE_3D), POINTER :: AEROCLIM(:)  ! Aerosol climatology
(  203)   TYPE(VARIABLE_3D), ALLOCATABLE :: UVP_G(:)  ! UV-processor output
(  204)   TYPE(VARIABLE_3D), POINTER :: UVP(:)  ! UV-processor output
(  205)   TYPE(VARIABLE_3D), ALLOCATABLE :: PHYS_G(:)  ! PHYS output
(  206)   TYPE(VARIABLE_3D), POINTER :: PHYS(:)  ! PHYS output
(  207)   TYPE(VARIABLE_3D) :: PHYCTY  ! PHYS input for MassCTY
(  208)   TYPE(VARIABLE_3D) :: RSPEC  ! Specific gas constant
(  209)   TYPE(VARIABLE_3D) :: SDSAT  ! Standard Deviation of the saturation Depression (Sigma_s)
(  210)   TYPE(VARIABLE_3D) :: CVV  ! Convective Vertical Velocity
(  211)   TYPE(VARIABLE_3D) :: RKTH  ! Rasch-Kristjansson H tendency
(  212)   TYPE(VARIABLE_3D) :: RKTQV  ! Rasch-Kristjansson Qv tendency
(  213)   TYPE(VARIABLE_3D) :: RKTQC  ! Rasch-Kristjansson Qc tendency
(  214)   TYPE(VARIABLE_3D) :: UOM  ! Updraught vert velocity
(  215)   TYPE(VARIABLE_3D) :: UAL  ! Updraught mesh fraction
(  216)   TYPE(VARIABLE_3D) :: DOM  ! Downdraught vert velocity
(  217)   TYPE(VARIABLE_3D) :: DAL  ! Downdraught mesh fraction
(  218)   TYPE(VARIABLE_3D) :: UEN  ! Updraught entrainment
(  219)   TYPE(VARIABLE_3D) :: UNEBH  ! pseudo-historic convective
(  220)   TYPE(VARIABLE_3D), ALLOCATABLE :: CRM_G(:)  ! CRM prognostic fields
(  221)   TYPE(VARIABLE_3D), POINTER :: CRM(:)  ! CRM prognostic fields
(  222)   TYPE(VARIABLE_3D), ALLOCATABLE :: LIMA_G(:)  ! LIMA prognostic fields
(  223)   TYPE(VARIABLE_3D), POINTER :: LIMA(:)  ! LIMA prognostic fields
(  224)   TYPE(VARIABLE_3D) :: FSD  ! PHYS output
(  225)   TYPE(VARIABLE_3D), ALLOCATABLE :: EXT_G(:)  ! Extra fields
(  226)   TYPE(VARIABLE_3D), POINTER :: EXT(:)  ! Extra fields
(  227) # 228 "field_variables_mod.F90"
(  228)   TYPE(GEOMETRY_VARIABLES) :: GEOMETRY
(  229)   TYPE(ECPHYS_VARIABLES) :: ECPHYS
(  230)   TYPE(RADIATION_VARIABLES) :: RADIATION
(  231) # 232 "field_variables_mod.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 29

(  232)   TYPE(VARIABLE_3D_PTR), ALLOCATABLE :: GFL_PTR_G (:)
(  233)   TYPE(VARIABLE_3D_PTR), POINTER :: GFL_PTR (:)
(  234) # 235 "field_variables_mod.F90"
(  235) CONTAINS
(  236)   ! PROCEDURE :: CLONE => FIELD_VARIABLES_CLONE
(  237)   PROCEDURE :: CLONE_ARRAYS => FIELD_VARIABLES_CLONE_ARRAYS
(  238)   PROCEDURE :: UPDATE_VIEW => FIELD_VARIABLES_UPDATE_VIEW
(  239)   PROCEDURE :: RESET_ARRAYS => FIELD_VARIABLES_RESET_ARRAYS
(  240)   PROCEDURE :: FINAL => FIELD_VARIABLES_FINAL
(  241) END TYPE FIELD_VARIABLES
(  242) # 243 "field_variables_mod.F90"
(  243) CONTAINS
(  244) # 245 "field_variables_mod.F90"
(  245) !   FUNCTION FIELD_VARIABLES_CLONE(SELF) RESULT(NEWOBJ)
(  246) !     ! Replicate objects by deep-copying through associated object pointers
(  247) !     !
(  248) !     ! This is required create per-thread replication of the data view pointers
(  249) !     ! under the fields associated with these variables.
(  250) !     CLASS(FIELD_VARIABLES) :: SELF
(  251) !     TYPE(FIELD_VARIABLES) :: NEWOBJ
(  252) !     INTEGER(KIND=JPIM) :: I
(  253) # 254 "field_variables_mod.F90"
(  254) ! #:for v in variables
(  255) ! #:if v.array == 1
(  256) !     IF (ALLOCATED(SELF%EXT)) THEN
(  257) !       ALLOCATE(NEWOBJ%EXT(SIZE(SELF%EXT)))
(  258) !       DO I=1, SIZE(SELF%EXT)
(  259) !         NEWOBJ%EXT(I) = SELF%EXT(I)%CLONE()
(  260) !       END DO
(  261) !     END IF
(  262) ! #:else
(  263) !     NEWOBJ%EXT = SELF%EXT%CLONE()
(  264) ! #:endif
(  265) ! #:endfor
(  266) !   END FUNCTION FIELD_VARIABLES_CLONE
(  267) # 268 "field_variables_mod.F90"
(  268)   SUBROUTINE FIELD_VARIABLES_CLONE_ARRAYS(SELF)
(  269)     ! Replicate variable arrays by allocating a thread-local copy and
(  270)     ! associating its variables with the underpinning storage fields.
(  271)     !
(  272)     ! This is required ensure that per-thread data view pointers under
(  273)     ! variables don't alias.
(  274)     CLASS(FIELD_VARIABLES), TARGET :: SELF
(  275)     INTEGER(KIND=JPIM) :: I
(  276)     INTEGER(KIND=JPIM) :: IPNTR
(  277)     INTEGER(KIND=JPIM) :: JFLD
(  278) # 279 "field_variables_mod.F90"
(  279)     ! Allocate a thread-local copy of the array
(  280)     NULLIFY(SELF%GHG)
(  281)     ALLOCATE(SELF%GHG(SIZE(SELF%GHG_G)))
(  282)     SELF%GHG = SELF%GHG_G
(  283) !   DO I=1, SIZE(SELF%GHG_G)
(  284) !     ! Associate underpinning storage objects with thread-local variables
(  285) !     IF (ASSOCIATED(SELF%GHG_G(I)%FT0))  SELF%GHG(I)%FT0 => SELF%GHG_G(I)%FT0
(  286) !     IF (ASSOCIATED(SELF%GHG_G(I)%FT1))  SELF%GHG(I)%FT1 => SELF%GHG_G(I)%FT1
(  287) !     IF (ASSOCIATED(SELF%GHG_G(I)%FT9))  SELF%GHG(I)%FT9 => SELF%GHG_G(I)%FT9
(  288) !     IF (ASSOCIATED(SELF%GHG_G(I)%FPH9)) SELF%GHG(I)%FPH9=> SELF%GHG_G(I)%FPH9
(  289) !     IF (ASSOCIATED(SELF%GHG_G(I)%FDL))  SELF%GHG(I)%FDL => SELF%GHG_G(I)%FDL






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 30

(  290) !     IF (ASSOCIATED(SELF%GHG_G(I)%FDM))  SELF%GHG(I)%FDM => SELF%GHG_G(I)%FDM
(  291) !   END DO
(  292)     ! Allocate a thread-local copy of the array
(  293)     NULLIFY(SELF%CHEM)
(  294)     ALLOCATE(SELF%CHEM(SIZE(SELF%CHEM_G)))
(  295)     SELF%CHEM = SELF%CHEM_G
(  296) !   DO I=1, SIZE(SELF%CHEM_G)
(  297) !     ! Associate underpinning storage objects with thread-local variables
(  298) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FT0))  SELF%CHEM(I)%FT0 => SELF%CHEM_G(I)%FT0
(  299) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FT1))  SELF%CHEM(I)%FT1 => SELF%CHEM_G(I)%FT1
(  300) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FT9))  SELF%CHEM(I)%FT9 => SELF%CHEM_G(I)%FT9
(  301) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FPH9)) SELF%CHEM(I)%FPH9=> SELF%CHEM_G(I)%FPH9
(  302) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FDL))  SELF%CHEM(I)%FDL => SELF%CHEM_G(I)%FDL
(  303) !     IF (ASSOCIATED(SELF%CHEM_G(I)%FDM))  SELF%CHEM(I)%FDM => SELF%CHEM_G(I)%FDM
(  304) !   END DO
(  305)     ! Allocate a thread-local copy of the array
(  306)     NULLIFY(SELF%AERO)
(  307)     ALLOCATE(SELF%AERO(SIZE(SELF%AERO_G)))
(  308)     SELF%AERO = SELF%AERO_G
(  309) !   DO I=1, SIZE(SELF%AERO_G)
(  310) !     ! Associate underpinning storage objects with thread-local variables
(  311) !     IF (ASSOCIATED(SELF%AERO_G(I)%FT0))  SELF%AERO(I)%FT0 => SELF%AERO_G(I)%FT0
(  312) !     IF (ASSOCIATED(SELF%AERO_G(I)%FT1))  SELF%AERO(I)%FT1 => SELF%AERO_G(I)%FT1
(  313) !     IF (ASSOCIATED(SELF%AERO_G(I)%FT9))  SELF%AERO(I)%FT9 => SELF%AERO_G(I)%FT9
(  314) !     IF (ASSOCIATED(SELF%AERO_G(I)%FPH9)) SELF%AERO(I)%FPH9=> SELF%AERO_G(I)%FPH9
(  315) !     IF (ASSOCIATED(SELF%AERO_G(I)%FDL))  SELF%AERO(I)%FDL => SELF%AERO_G(I)%FDL
(  316) !     IF (ASSOCIATED(SELF%AERO_G(I)%FDM))  SELF%AERO(I)%FDM => SELF%AERO_G(I)%FDM
(  317) !   END DO
(  318)     ! Allocate a thread-local copy of the array
(  319)     NULLIFY(SELF%FORC)
(  320)     ALLOCATE(SELF%FORC(SIZE(SELF%FORC_G)))
(  321)     SELF%FORC = SELF%FORC_G
(  322) !   DO I=1, SIZE(SELF%FORC_G)
(  323) !     ! Associate underpinning storage objects with thread-local variables
(  324) !     IF (ASSOCIATED(SELF%FORC_G(I)%FT0))  SELF%FORC(I)%FT0 => SELF%FORC_G(I)%FT0
(  325) !     IF (ASSOCIATED(SELF%FORC_G(I)%FT1))  SELF%FORC(I)%FT1 => SELF%FORC_G(I)%FT1
(  326) !     IF (ASSOCIATED(SELF%FORC_G(I)%FT9))  SELF%FORC(I)%FT9 => SELF%FORC_G(I)%FT9
(  327) !     IF (ASSOCIATED(SELF%FORC_G(I)%FPH9)) SELF%FORC(I)%FPH9=> SELF%FORC_G(I)%FPH9
(  328) !     IF (ASSOCIATED(SELF%FORC_G(I)%FDL))  SELF%FORC(I)%FDL => SELF%FORC_G(I)%FDL
(  329) !     IF (ASSOCIATED(SELF%FORC_G(I)%FDM))  SELF%FORC(I)%FDM => SELF%FORC_G(I)%FDM
(  330) !   END DO
(  331)     ! Allocate a thread-local copy of the array
(  332)     NULLIFY(SELF%EZDIAG)
(  333)     ALLOCATE(SELF%EZDIAG(SIZE(SELF%EZDIAG_G)))
(  334)     SELF%EZDIAG = SELF%EZDIAG_G
(  335) !   DO I=1, SIZE(SELF%EZDIAG_G)
(  336) !     ! Associate underpinning storage objects with thread-local variables
(  337) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FT0))  SELF%EZDIAG(I)%FT0 => SELF%EZDIAG_G(I)%FT0
(  338) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FT1))  SELF%EZDIAG(I)%FT1 => SELF%EZDIAG_G(I)%FT1
(  339) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FT9))  SELF%EZDIAG(I)%FT9 => SELF%EZDIAG_G(I)%FT9
(  340) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FPH9)) SELF%EZDIAG(I)%FPH9=> SELF%EZDIAG_G(I)%FPH9
(  341) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FDL))  SELF%EZDIAG(I)%FDL => SELF%EZDIAG_G(I)%FDL
(  342) !     IF (ASSOCIATED(SELF%EZDIAG_G(I)%FDM))  SELF%EZDIAG(I)%FDM => SELF%EZDIAG_G(I)%FDM
(  343) !   END DO
(  344)     ! Allocate a thread-local copy of the array
(  345)     NULLIFY(SELF%ERA40)
(  346)     ALLOCATE(SELF%ERA40(SIZE(SELF%ERA40_G)))
(  347)     SELF%ERA40 = SELF%ERA40_G






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 31

(  348) !   DO I=1, SIZE(SELF%ERA40_G)
(  349) !     ! Associate underpinning storage objects with thread-local variables
(  350) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FT0))  SELF%ERA40(I)%FT0 => SELF%ERA40_G(I)%FT0
(  351) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FT1))  SELF%ERA40(I)%FT1 => SELF%ERA40_G(I)%FT1
(  352) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FT9))  SELF%ERA40(I)%FT9 => SELF%ERA40_G(I)%FT9
(  353) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FPH9)) SELF%ERA40(I)%FPH9=> SELF%ERA40_G(I)%FPH9
(  354) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FDL))  SELF%ERA40(I)%FDL => SELF%ERA40_G(I)%FDL
(  355) !     IF (ASSOCIATED(SELF%ERA40_G(I)%FDM))  SELF%ERA40(I)%FDM => SELF%ERA40_G(I)%FDM
(  356) !   END DO
(  357)     ! Allocate a thread-local copy of the array
(  358)     NULLIFY(SELF%NOGW)
(  359)     ALLOCATE(SELF%NOGW(SIZE(SELF%NOGW_G)))
(  360)     SELF%NOGW = SELF%NOGW_G
(  361) !   DO I=1, SIZE(SELF%NOGW_G)
(  362) !     ! Associate underpinning storage objects with thread-local variables
(  363) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FT0))  SELF%NOGW(I)%FT0 => SELF%NOGW_G(I)%FT0
(  364) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FT1))  SELF%NOGW(I)%FT1 => SELF%NOGW_G(I)%FT1
(  365) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FT9))  SELF%NOGW(I)%FT9 => SELF%NOGW_G(I)%FT9
(  366) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FPH9)) SELF%NOGW(I)%FPH9=> SELF%NOGW_G(I)%FPH9
(  367) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FDL))  SELF%NOGW(I)%FDL => SELF%NOGW_G(I)%FDL
(  368) !     IF (ASSOCIATED(SELF%NOGW_G(I)%FDM))  SELF%NOGW(I)%FDM => SELF%NOGW_G(I)%FDM
(  369) !   END DO
(  370)     ! Allocate a thread-local copy of the array
(  371)     NULLIFY(SELF%EDRP)
(  372)     ALLOCATE(SELF%EDRP(SIZE(SELF%EDRP_G)))
(  373)     SELF%EDRP = SELF%EDRP_G
(  374) !   DO I=1, SIZE(SELF%EDRP_G)
(  375) !     ! Associate underpinning storage objects with thread-local variables
(  376) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FT0))  SELF%EDRP(I)%FT0 => SELF%EDRP_G(I)%FT0
(  377) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FT1))  SELF%EDRP(I)%FT1 => SELF%EDRP_G(I)%FT1
(  378) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FT9))  SELF%EDRP(I)%FT9 => SELF%EDRP_G(I)%FT9
(  379) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FPH9)) SELF%EDRP(I)%FPH9=> SELF%EDRP_G(I)%FPH9
(  380) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FDL))  SELF%EDRP(I)%FDL => SELF%EDRP_G(I)%FDL
(  381) !     IF (ASSOCIATED(SELF%EDRP_G(I)%FDM))  SELF%EDRP(I)%FDM => SELF%EDRP_G(I)%FDM
(  382) !   END DO
(  383)     ! Allocate a thread-local copy of the array
(  384)     NULLIFY(SELF%SLDIA)
(  385)     ALLOCATE(SELF%SLDIA(SIZE(SELF%SLDIA_G)))
(  386)     SELF%SLDIA = SELF%SLDIA_G
(  387) !   DO I=1, SIZE(SELF%SLDIA_G)
(  388) !     ! Associate underpinning storage objects with thread-local variables
(  389) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FT0))  SELF%SLDIA(I)%FT0 => SELF%SLDIA_G(I)%FT0
(  390) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FT1))  SELF%SLDIA(I)%FT1 => SELF%SLDIA_G(I)%FT1
(  391) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FT9))  SELF%SLDIA(I)%FT9 => SELF%SLDIA_G(I)%FT9
(  392) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FPH9)) SELF%SLDIA(I)%FPH9=> SELF%SLDIA_G(I)%FPH9
(  393) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FDL))  SELF%SLDIA(I)%FDL => SELF%SLDIA_G(I)%FDL
(  394) !     IF (ASSOCIATED(SELF%SLDIA_G(I)%FDM))  SELF%SLDIA(I)%FDM => SELF%SLDIA_G(I)%FDM
(  395) !   END DO
(  396)     ! Allocate a thread-local copy of the array
(  397)     NULLIFY(SELF%AERAOT)
(  398)     ALLOCATE(SELF%AERAOT(SIZE(SELF%AERAOT_G)))
(  399)     SELF%AERAOT = SELF%AERAOT_G
(  400) !   DO I=1, SIZE(SELF%AERAOT_G)
(  401) !     ! Associate underpinning storage objects with thread-local variables
(  402) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FT0))  SELF%AERAOT(I)%FT0 => SELF%AERAOT_G(I)%FT0
(  403) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FT1))  SELF%AERAOT(I)%FT1 => SELF%AERAOT_G(I)%FT1
(  404) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FT9))  SELF%AERAOT(I)%FT9 => SELF%AERAOT_G(I)%FT9
(  405) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FPH9)) SELF%AERAOT(I)%FPH9=> SELF%AERAOT_G(I)%FPH9






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 32

(  406) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FDL))  SELF%AERAOT(I)%FDL => SELF%AERAOT_G(I)%FDL
(  407) !     IF (ASSOCIATED(SELF%AERAOT_G(I)%FDM))  SELF%AERAOT(I)%FDM => SELF%AERAOT_G(I)%FDM
(  408) !   END DO
(  409)     ! Allocate a thread-local copy of the array
(  410)     NULLIFY(SELF%AERLISI)
(  411)     ALLOCATE(SELF%AERLISI(SIZE(SELF%AERLISI_G)))
(  412)     SELF%AERLISI = SELF%AERLISI_G
(  413) !   DO I=1, SIZE(SELF%AERLISI_G)
(  414) !     ! Associate underpinning storage objects with thread-local variables
(  415) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FT0))  SELF%AERLISI(I)%FT0 => SELF%AERLISI_G(I)%FT0
(  416) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FT1))  SELF%AERLISI(I)%FT1 => SELF%AERLISI_G(I)%FT1
(  417) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FT9))  SELF%AERLISI(I)%FT9 => SELF%AERLISI_G(I)%FT9
(  418) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FPH9)) SELF%AERLISI(I)%FPH9=> SELF%AERLISI_G(I)%FPH9
(  419) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FDL))  SELF%AERLISI(I)%FDL => SELF%AERLISI_G(I)%FDL
(  420) !     IF (ASSOCIATED(SELF%AERLISI_G(I)%FDM))  SELF%AERLISI(I)%FDM => SELF%AERLISI_G(I)%FDM
(  421) !   END DO
(  422)     ! Allocate a thread-local copy of the array
(  423)     NULLIFY(SELF%AEROUT)
(  424)     ALLOCATE(SELF%AEROUT(SIZE(SELF%AEROUT_G)))
(  425)     SELF%AEROUT = SELF%AEROUT_G
(  426) !   DO I=1, SIZE(SELF%AEROUT_G)
(  427) !     ! Associate underpinning storage objects with thread-local variables
(  428) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FT0))  SELF%AEROUT(I)%FT0 => SELF%AEROUT_G(I)%FT0
(  429) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FT1))  SELF%AEROUT(I)%FT1 => SELF%AEROUT_G(I)%FT1
(  430) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FT9))  SELF%AEROUT(I)%FT9 => SELF%AEROUT_G(I)%FT9
(  431) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FPH9)) SELF%AEROUT(I)%FPH9=> SELF%AEROUT_G(I)%FPH9
(  432) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FDL))  SELF%AEROUT(I)%FDL => SELF%AEROUT_G(I)%FDL
(  433) !     IF (ASSOCIATED(SELF%AEROUT_G(I)%FDM))  SELF%AEROUT(I)%FDM => SELF%AEROUT_G(I)%FDM
(  434) !   END DO
(  435)     ! Allocate a thread-local copy of the array
(  436)     NULLIFY(SELF%AEROCLIM)
(  437)     ALLOCATE(SELF%AEROCLIM(SIZE(SELF%AEROCLIM_G)))
(  438)     SELF%AEROCLIM = SELF%AEROCLIM_G
(  439) !   DO I=1, SIZE(SELF%AEROCLIM_G)
(  440) !     ! Associate underpinning storage objects with thread-local variables
(  441) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FT0))  SELF%AEROCLIM(I)%FT0 => SELF%AEROCLIM_G(I)%FT0
(  442) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FT1))  SELF%AEROCLIM(I)%FT1 => SELF%AEROCLIM_G(I)%FT1
(  443) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FT9))  SELF%AEROCLIM(I)%FT9 => SELF%AEROCLIM_G(I)%FT9
(  444) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FPH9)) SELF%AEROCLIM(I)%FPH9=> SELF%AEROCLIM_G(I)%FPH9
(  445) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FDL))  SELF%AEROCLIM(I)%FDL => SELF%AEROCLIM_G(I)%FDL
(  446) !     IF (ASSOCIATED(SELF%AEROCLIM_G(I)%FDM))  SELF%AEROCLIM(I)%FDM => SELF%AEROCLIM_G(I)%FDM
(  447) !   END DO
(  448)     ! Allocate a thread-local copy of the array
(  449)     NULLIFY(SELF%UVP)
(  450)     ALLOCATE(SELF%UVP(SIZE(SELF%UVP_G)))
(  451)     SELF%UVP = SELF%UVP_G
(  452) !   DO I=1, SIZE(SELF%UVP_G)
(  453) !     ! Associate underpinning storage objects with thread-local variables
(  454) !     IF (ASSOCIATED(SELF%UVP_G(I)%FT0))  SELF%UVP(I)%FT0 => SELF%UVP_G(I)%FT0
(  455) !     IF (ASSOCIATED(SELF%UVP_G(I)%FT1))  SELF%UVP(I)%FT1 => SELF%UVP_G(I)%FT1
(  456) !     IF (ASSOCIATED(SELF%UVP_G(I)%FT9))  SELF%UVP(I)%FT9 => SELF%UVP_G(I)%FT9
(  457) !     IF (ASSOCIATED(SELF%UVP_G(I)%FPH9)) SELF%UVP(I)%FPH9=> SELF%UVP_G(I)%FPH9
(  458) !     IF (ASSOCIATED(SELF%UVP_G(I)%FDL))  SELF%UVP(I)%FDL => SELF%UVP_G(I)%FDL
(  459) !     IF (ASSOCIATED(SELF%UVP_G(I)%FDM))  SELF%UVP(I)%FDM => SELF%UVP_G(I)%FDM
(  460) !   END DO
(  461)     ! Allocate a thread-local copy of the array
(  462)     NULLIFY(SELF%PHYS)
(  463)     ALLOCATE(SELF%PHYS(SIZE(SELF%PHYS_G)))






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 33

(  464)     SELF%PHYS = SELF%PHYS_G
(  465) !   DO I=1, SIZE(SELF%PHYS_G)
(  466) !     ! Associate underpinning storage objects with thread-local variables
(  467) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FT0))  SELF%PHYS(I)%FT0 => SELF%PHYS_G(I)%FT0
(  468) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FT1))  SELF%PHYS(I)%FT1 => SELF%PHYS_G(I)%FT1
(  469) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FT9))  SELF%PHYS(I)%FT9 => SELF%PHYS_G(I)%FT9
(  470) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FPH9)) SELF%PHYS(I)%FPH9=> SELF%PHYS_G(I)%FPH9
(  471) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FDL))  SELF%PHYS(I)%FDL => SELF%PHYS_G(I)%FDL
(  472) !     IF (ASSOCIATED(SELF%PHYS_G(I)%FDM))  SELF%PHYS(I)%FDM => SELF%PHYS_G(I)%FDM
(  473) !   END DO
(  474)     ! Allocate a thread-local copy of the array
(  475)     NULLIFY(SELF%CRM)
(  476)     ALLOCATE(SELF%CRM(SIZE(SELF%CRM_G)))
(  477)     SELF%CRM = SELF%CRM_G
(  478) !   DO I=1, SIZE(SELF%CRM_G)
(  479) !     ! Associate underpinning storage objects with thread-local variables
(  480) !     IF (ASSOCIATED(SELF%CRM_G(I)%FT0))  SELF%CRM(I)%FT0 => SELF%CRM_G(I)%FT0
(  481) !     IF (ASSOCIATED(SELF%CRM_G(I)%FT1))  SELF%CRM(I)%FT1 => SELF%CRM_G(I)%FT1
(  482) !     IF (ASSOCIATED(SELF%CRM_G(I)%FT9))  SELF%CRM(I)%FT9 => SELF%CRM_G(I)%FT9
(  483) !     IF (ASSOCIATED(SELF%CRM_G(I)%FPH9)) SELF%CRM(I)%FPH9=> SELF%CRM_G(I)%FPH9
(  484) !     IF (ASSOCIATED(SELF%CRM_G(I)%FDL))  SELF%CRM(I)%FDL => SELF%CRM_G(I)%FDL
(  485) !     IF (ASSOCIATED(SELF%CRM_G(I)%FDM))  SELF%CRM(I)%FDM => SELF%CRM_G(I)%FDM
(  486) !   END DO
(  487)     ! Allocate a thread-local copy of the array
(  488)     NULLIFY(SELF%LIMA)
(  489)     ALLOCATE(SELF%LIMA(SIZE(SELF%LIMA_G)))
(  490)     SELF%LIMA = SELF%LIMA_G
(  491) !   DO I=1, SIZE(SELF%LIMA_G)
(  492) !     ! Associate underpinning storage objects with thread-local variables
(  493) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FT0))  SELF%LIMA(I)%FT0 => SELF%LIMA_G(I)%FT0
(  494) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FT1))  SELF%LIMA(I)%FT1 => SELF%LIMA_G(I)%FT1
(  495) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FT9))  SELF%LIMA(I)%FT9 => SELF%LIMA_G(I)%FT9
(  496) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FPH9)) SELF%LIMA(I)%FPH9=> SELF%LIMA_G(I)%FPH9
(  497) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FDL))  SELF%LIMA(I)%FDL => SELF%LIMA_G(I)%FDL
(  498) !     IF (ASSOCIATED(SELF%LIMA_G(I)%FDM))  SELF%LIMA(I)%FDM => SELF%LIMA_G(I)%FDM
(  499) !   END DO
(  500)     ! Allocate a thread-local copy of the array
(  501)     NULLIFY(SELF%EXT)
(  502)     ALLOCATE(SELF%EXT(SIZE(SELF%EXT_G)))
(  503)     SELF%EXT = SELF%EXT_G
(  504) !   DO I=1, SIZE(SELF%EXT_G)
(  505) !     ! Associate underpinning storage objects with thread-local variables
(  506) !     IF (ASSOCIATED(SELF%EXT_G(I)%FT0))  SELF%EXT(I)%FT0 => SELF%EXT_G(I)%FT0
(  507) !     IF (ASSOCIATED(SELF%EXT_G(I)%FT1))  SELF%EXT(I)%FT1 => SELF%EXT_G(I)%FT1
(  508) !     IF (ASSOCIATED(SELF%EXT_G(I)%FT9))  SELF%EXT(I)%FT9 => SELF%EXT_G(I)%FT9
(  509) !     IF (ASSOCIATED(SELF%EXT_G(I)%FPH9)) SELF%EXT(I)%FPH9=> SELF%EXT_G(I)%FPH9
(  510) !     IF (ASSOCIATED(SELF%EXT_G(I)%FDL))  SELF%EXT(I)%FDL => SELF%EXT_G(I)%FDL
(  511) !     IF (ASSOCIATED(SELF%EXT_G(I)%FDM))  SELF%EXT(I)%FDM => SELF%EXT_G(I)%FDM
(  512) !   END DO
(  513) # 514 "field_variables_mod.F90"
(  514)     NULLIFY (SELF%GFL_PTR)
(  515)     ALLOCATE (SELF%GFL_PTR (SIZE (SELF%GFL_PTR_G)))
(  516) # 517 "field_variables_mod.F90"
(  517)     IPNTR = 1
(  518)     
(  519)     SELF%GFL_PTR (IPNTR)%YV => SELF%Q
(  520)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%Q%YCOMP
(  521)     IPNTR = IPNTR + 1






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 34

(  522)     SELF%GFL_PTR (IPNTR)%YV => SELF%I
(  523)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%I%YCOMP
(  524)     IPNTR = IPNTR + 1
(  525)     SELF%GFL_PTR (IPNTR)%YV => SELF%L
(  526)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%L%YCOMP
(  527)     IPNTR = IPNTR + 1
(  528)     SELF%GFL_PTR (IPNTR)%YV => SELF%LCONV
(  529)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LCONV%YCOMP
(  530)     IPNTR = IPNTR + 1
(  531)     SELF%GFL_PTR (IPNTR)%YV => SELF%ICONV
(  532)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%ICONV%YCOMP
(  533)     IPNTR = IPNTR + 1
(  534)     SELF%GFL_PTR (IPNTR)%YV => SELF%RCONV
(  535)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RCONV%YCOMP
(  536)     IPNTR = IPNTR + 1
(  537)     SELF%GFL_PTR (IPNTR)%YV => SELF%SCONV
(  538)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SCONV%YCOMP
(  539)     IPNTR = IPNTR + 1
(  540)     SELF%GFL_PTR (IPNTR)%YV => SELF%IRAD
(  541)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%IRAD%YCOMP
(  542)     IPNTR = IPNTR + 1
(  543)     SELF%GFL_PTR (IPNTR)%YV => SELF%LRAD
(  544)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LRAD%YCOMP
(  545)     IPNTR = IPNTR + 1
(  546)     SELF%GFL_PTR (IPNTR)%YV => SELF%S
(  547)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%S%YCOMP
(  548)     IPNTR = IPNTR + 1
(  549)     SELF%GFL_PTR (IPNTR)%YV => SELF%R
(  550)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%R%YCOMP
(  551)     IPNTR = IPNTR + 1
(  552)     SELF%GFL_PTR (IPNTR)%YV => SELF%G
(  553)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%G%YCOMP
(  554)     IPNTR = IPNTR + 1
(  555)     SELF%GFL_PTR (IPNTR)%YV => SELF%H
(  556)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%H%YCOMP
(  557)     IPNTR = IPNTR + 1
(  558)     SELF%GFL_PTR (IPNTR)%YV => SELF%TKE
(  559)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%TKE%YCOMP
(  560)     IPNTR = IPNTR + 1
(  561)     SELF%GFL_PTR (IPNTR)%YV => SELF%TTE
(  562)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%TTE%YCOMP
(  563)     IPNTR = IPNTR + 1
(  564)     SELF%GFL_PTR (IPNTR)%YV => SELF%EFB1
(  565)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EFB1%YCOMP
(  566)     IPNTR = IPNTR + 1
(  567)     SELF%GFL_PTR (IPNTR)%YV => SELF%EFB2
(  568)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EFB2%YCOMP
(  569)     IPNTR = IPNTR + 1
(  570)     SELF%GFL_PTR (IPNTR)%YV => SELF%EFB3
(  571)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EFB3%YCOMP
(  572)     IPNTR = IPNTR + 1
(  573)     SELF%GFL_PTR (IPNTR)%YV => SELF%A
(  574)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%A%YCOMP
(  575)     IPNTR = IPNTR + 1
(  576)     SELF%GFL_PTR (IPNTR)%YV => SELF%O3
(  577)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%O3%YCOMP
(  578)     IPNTR = IPNTR + 1
(  579)     SELF%GFL_PTR (IPNTR)%YV => SELF%SRC






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 35

(  580)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SRC%YCOMP
(  581)     IPNTR = IPNTR + 1
(  582)     SELF%GFL_PTR (IPNTR)%YV => SELF%MXL
(  583)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%MXL%YCOMP
(  584)     IPNTR = IPNTR + 1
(  585)     SELF%GFL_PTR (IPNTR)%YV => SELF%SHTUR
(  586)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SHTUR%YCOMP
(  587)     IPNTR = IPNTR + 1
(  588)     SELF%GFL_PTR (IPNTR)%YV => SELF%FQTUR
(  589)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FQTUR%YCOMP
(  590)     IPNTR = IPNTR + 1
(  591)     SELF%GFL_PTR (IPNTR)%YV => SELF%FSTUR
(  592)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FSTUR%YCOMP
(  593)     IPNTR = IPNTR + 1
(  594)     SELF%GFL_PTR (IPNTR)%YV => SELF%CPF
(  595)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CPF%YCOMP
(  596)     IPNTR = IPNTR + 1
(  597)     SELF%GFL_PTR (IPNTR)%YV => SELF%SPF
(  598)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SPF%YCOMP
(  599)     IPNTR = IPNTR + 1
(  600)     SELF%GFL_PTR (IPNTR)%YV => SELF%CVGQ
(  601)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CVGQ%YCOMP
(  602)     IPNTR = IPNTR + 1
(  603)     SELF%GFL_PTR (IPNTR)%YV => SELF%QVA
(  604)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%QVA%YCOMP
(  605)     IPNTR = IPNTR + 1
(  606)     DO JFLD = 1, SIZE (SELF%GHG)
(  607)       SELF%GFL_PTR (IPNTR)%YV => SELF%GHG(JFLD)
(  608)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%GHG(JFLD)%YCOMP
(  609)       IPNTR = IPNTR + 1
(  610)     ENDDO
(  611)     DO JFLD = 1, SIZE (SELF%CHEM)
(  612)       SELF%GFL_PTR (IPNTR)%YV => SELF%CHEM(JFLD)
(  613)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CHEM(JFLD)%YCOMP
(  614)       IPNTR = IPNTR + 1
(  615)     ENDDO
(  616)     DO JFLD = 1, SIZE (SELF%AERO)
(  617)       SELF%GFL_PTR (IPNTR)%YV => SELF%AERO(JFLD)
(  618)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AERO(JFLD)%YCOMP
(  619)       IPNTR = IPNTR + 1
(  620)     ENDDO
(  621)     SELF%GFL_PTR (IPNTR)%YV => SELF%LRCH4
(  622)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LRCH4%YCOMP
(  623)     IPNTR = IPNTR + 1
(  624)     DO JFLD = 1, SIZE (SELF%FORC)
(  625)       SELF%GFL_PTR (IPNTR)%YV => SELF%FORC(JFLD)
(  626)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FORC(JFLD)%YCOMP
(  627)       IPNTR = IPNTR + 1
(  628)     ENDDO
(  629)     DO JFLD = 1, SIZE (SELF%EZDIAG)
(  630)       SELF%GFL_PTR (IPNTR)%YV => SELF%EZDIAG(JFLD)
(  631)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EZDIAG(JFLD)%YCOMP
(  632)       IPNTR = IPNTR + 1
(  633)     ENDDO
(  634)     DO JFLD = 1, SIZE (SELF%ERA40)
(  635)       SELF%GFL_PTR (IPNTR)%YV => SELF%ERA40(JFLD)
(  636)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%ERA40(JFLD)%YCOMP
(  637)       IPNTR = IPNTR + 1






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 36

(  638)     ENDDO
(  639)     DO JFLD = 1, SIZE (SELF%NOGW)
(  640)       SELF%GFL_PTR (IPNTR)%YV => SELF%NOGW(JFLD)
(  641)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%NOGW(JFLD)%YCOMP
(  642)       IPNTR = IPNTR + 1
(  643)     ENDDO
(  644)     DO JFLD = 1, SIZE (SELF%EDRP)
(  645)       SELF%GFL_PTR (IPNTR)%YV => SELF%EDRP(JFLD)
(  646)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EDRP(JFLD)%YCOMP
(  647)       IPNTR = IPNTR + 1
(  648)     ENDDO
(  649)     DO JFLD = 1, SIZE (SELF%SLDIA)
(  650)       SELF%GFL_PTR (IPNTR)%YV => SELF%SLDIA(JFLD)
(  651)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SLDIA(JFLD)%YCOMP
(  652)       IPNTR = IPNTR + 1
(  653)     ENDDO
(  654)     DO JFLD = 1, SIZE (SELF%AERAOT)
(  655)       SELF%GFL_PTR (IPNTR)%YV => SELF%AERAOT(JFLD)
(  656)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AERAOT(JFLD)%YCOMP
(  657)       IPNTR = IPNTR + 1
(  658)     ENDDO
(  659)     DO JFLD = 1, SIZE (SELF%AERLISI)
(  660)       SELF%GFL_PTR (IPNTR)%YV => SELF%AERLISI(JFLD)
(  661)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AERLISI(JFLD)%YCOMP
(  662)       IPNTR = IPNTR + 1
(  663)     ENDDO
(  664)     DO JFLD = 1, SIZE (SELF%AEROUT)
(  665)       SELF%GFL_PTR (IPNTR)%YV => SELF%AEROUT(JFLD)
(  666)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AEROUT(JFLD)%YCOMP
(  667)       IPNTR = IPNTR + 1
(  668)     ENDDO
(  669)     DO JFLD = 1, SIZE (SELF%AEROCLIM)
(  670)       SELF%GFL_PTR (IPNTR)%YV => SELF%AEROCLIM(JFLD)
(  671)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%AEROCLIM(JFLD)%YCOMP
(  672)       IPNTR = IPNTR + 1
(  673)     ENDDO
(  674)     DO JFLD = 1, SIZE (SELF%UVP)
(  675)       SELF%GFL_PTR (IPNTR)%YV => SELF%UVP(JFLD)
(  676)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UVP(JFLD)%YCOMP
(  677)       IPNTR = IPNTR + 1
(  678)     ENDDO
(  679)     DO JFLD = 1, SIZE (SELF%PHYS)
(  680)       SELF%GFL_PTR (IPNTR)%YV => SELF%PHYS(JFLD)
(  681)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%PHYS(JFLD)%YCOMP
(  682)       IPNTR = IPNTR + 1
(  683)     ENDDO
(  684)     SELF%GFL_PTR (IPNTR)%YV => SELF%PHYCTY
(  685)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%PHYCTY%YCOMP
(  686)     IPNTR = IPNTR + 1
(  687)     SELF%GFL_PTR (IPNTR)%YV => SELF%RSPEC
(  688)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RSPEC%YCOMP
(  689)     IPNTR = IPNTR + 1
(  690)     SELF%GFL_PTR (IPNTR)%YV => SELF%SDSAT
(  691)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%SDSAT%YCOMP
(  692)     IPNTR = IPNTR + 1
(  693)     SELF%GFL_PTR (IPNTR)%YV => SELF%CVV
(  694)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CVV%YCOMP
(  695)     IPNTR = IPNTR + 1






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 37

(  696)     SELF%GFL_PTR (IPNTR)%YV => SELF%RKTH
(  697)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RKTH%YCOMP
(  698)     IPNTR = IPNTR + 1
(  699)     SELF%GFL_PTR (IPNTR)%YV => SELF%RKTQV
(  700)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RKTQV%YCOMP
(  701)     IPNTR = IPNTR + 1
(  702)     SELF%GFL_PTR (IPNTR)%YV => SELF%RKTQC
(  703)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%RKTQC%YCOMP
(  704)     IPNTR = IPNTR + 1
(  705)     SELF%GFL_PTR (IPNTR)%YV => SELF%UOM
(  706)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UOM%YCOMP
(  707)     IPNTR = IPNTR + 1
(  708)     SELF%GFL_PTR (IPNTR)%YV => SELF%UAL
(  709)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UAL%YCOMP
(  710)     IPNTR = IPNTR + 1
(  711)     SELF%GFL_PTR (IPNTR)%YV => SELF%DOM
(  712)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%DOM%YCOMP
(  713)     IPNTR = IPNTR + 1
(  714)     SELF%GFL_PTR (IPNTR)%YV => SELF%DAL
(  715)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%DAL%YCOMP
(  716)     IPNTR = IPNTR + 1
(  717)     SELF%GFL_PTR (IPNTR)%YV => SELF%UEN
(  718)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UEN%YCOMP
(  719)     IPNTR = IPNTR + 1
(  720)     SELF%GFL_PTR (IPNTR)%YV => SELF%UNEBH
(  721)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%UNEBH%YCOMP
(  722)     IPNTR = IPNTR + 1
(  723)     DO JFLD = 1, SIZE (SELF%CRM)
(  724)       SELF%GFL_PTR (IPNTR)%YV => SELF%CRM(JFLD)
(  725)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%CRM(JFLD)%YCOMP
(  726)       IPNTR = IPNTR + 1
(  727)     ENDDO
(  728)     DO JFLD = 1, SIZE (SELF%LIMA)
(  729)       SELF%GFL_PTR (IPNTR)%YV => SELF%LIMA(JFLD)
(  730)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%LIMA(JFLD)%YCOMP
(  731)       IPNTR = IPNTR + 1
(  732)     ENDDO
(  733)     SELF%GFL_PTR (IPNTR)%YV => SELF%FSD
(  734)     SELF%GFL_PTR (IPNTR)%YCOMP = SELF%FSD%YCOMP
(  735)     IPNTR = IPNTR + 1
(  736)     DO JFLD = 1, SIZE (SELF%EXT)
(  737)       SELF%GFL_PTR (IPNTR)%YV => SELF%EXT(JFLD)
(  738)       SELF%GFL_PTR (IPNTR)%YCOMP = SELF%EXT(JFLD)%YCOMP
(  739)       IPNTR = IPNTR + 1
(  740)     ENDDO
(  741)     
(  742)   END SUBROUTINE FIELD_VARIABLES_CLONE_ARRAYS
(  743) # 744 "field_variables_mod.F90"
(  744)   SUBROUTINE FIELD_VARIABLES_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  745)     ! Update the internal data view pointers of all associated variables
(  746)     CLASS(FIELD_VARIABLES) :: SELF
(  747)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  748)     INTEGER(KIND=JPIM) :: I
(  749) # 750 "field_variables_mod.F90"
(  750)     CALL SELF%U%UPDATE_VIEW(BLOCK_INDEX)
(  751)     CALL SELF%V%UPDATE_VIEW(BLOCK_INDEX)
(  752)     CALL SELF%T%UPDATE_VIEW(BLOCK_INDEX)
(  753)     CALL SELF%DIV%UPDATE_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 38

(  754)     CALL SELF%VOR%UPDATE_VIEW(BLOCK_INDEX)
(  755)     CALL SELF%SPD%UPDATE_VIEW(BLOCK_INDEX)
(  756)     CALL SELF%SVD%UPDATE_VIEW(BLOCK_INDEX)
(  757)     CALL SELF%CSPDNL%UPDATE_VIEW(BLOCK_INDEX)
(  758)     CALL SELF%CSPNL%UPDATE_VIEW(BLOCK_INDEX)
(  759)     CALL SELF%CSVDPT%UPDATE_VIEW(BLOCK_INDEX)
(  760)     CALL SELF%CTNL%UPDATE_VIEW(BLOCK_INDEX)
(  761)     CALL SELF%CTPT%UPDATE_VIEW(BLOCK_INDEX)
(  762)     CALL SELF%CUNL%UPDATE_VIEW(BLOCK_INDEX)
(  763)     CALL SELF%CUPT%UPDATE_VIEW(BLOCK_INDEX)
(  764)     CALL SELF%CVNL%UPDATE_VIEW(BLOCK_INDEX)
(  765)     CALL SELF%CVPT%UPDATE_VIEW(BLOCK_INDEX)
(  766)     CALL SELF%CVWVNL%UPDATE_VIEW(BLOCK_INDEX)
(  767)     CALL SELF%DPHI%UPDATE_VIEW(BLOCK_INDEX)
(  768)     CALL SELF%EDOT%UPDATE_VIEW(BLOCK_INDEX)
(  769)     CALL SELF%GW%UPDATE_VIEW(BLOCK_INDEX)
(  770)     CALL SELF%NHX%UPDATE_VIEW(BLOCK_INDEX)
(  771)     CALL SELF%NHY%UPDATE_VIEW(BLOCK_INDEX)
(  772)     CALL SELF%SGRTL%UPDATE_VIEW(BLOCK_INDEX)
(  773)     CALL SELF%SGRTM%UPDATE_VIEW(BLOCK_INDEX)
(  774)     CALL SELF%SPDNL%UPDATE_VIEW(BLOCK_INDEX)
(  775)     CALL SELF%SPDNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  776)     CALL SELF%SPNL%UPDATE_VIEW(BLOCK_INDEX)
(  777)     CALL SELF%SPNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  778)     CALL SELF%SVDNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  779)     CALL SELF%TNL%UPDATE_VIEW(BLOCK_INDEX)
(  780)     CALL SELF%TNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  781)     CALL SELF%UNL%UPDATE_VIEW(BLOCK_INDEX)
(  782)     CALL SELF%UNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  783)     CALL SELF%VNL%UPDATE_VIEW(BLOCK_INDEX)
(  784)     CALL SELF%VNL_SI%UPDATE_VIEW(BLOCK_INDEX)
(  785)     CALL SELF%VWVNL%UPDATE_VIEW(BLOCK_INDEX)
(  786)     CALL SELF%CURHS%UPDATE_VIEW(BLOCK_INDEX)
(  787)     CALL SELF%CVRHS%UPDATE_VIEW(BLOCK_INDEX)
(  788)     CALL SELF%CTRHS%UPDATE_VIEW(BLOCK_INDEX)
(  789)     CALL SELF%CSPDRHS%UPDATE_VIEW(BLOCK_INDEX)
(  790)     CALL SELF%CSVDRHS%UPDATE_VIEW(BLOCK_INDEX)
(  791)     CALL SELF%NHXNL%UPDATE_VIEW(BLOCK_INDEX)
(  792)     CALL SELF%CNHXNL%UPDATE_VIEW(BLOCK_INDEX)
(  793)     CALL SELF%SP%UPDATE_VIEW(BLOCK_INDEX)
(  794)     CALL SELF%SPNL2%UPDATE_VIEW(BLOCK_INDEX)
(  795)     CALL SELF%PREHYDS%UPDATE_VIEW(BLOCK_INDEX)
(  796)     CALL SELF%DBBC%UPDATE_VIEW(BLOCK_INDEX)
(  797)     CALL SELF%CSPPT%UPDATE_VIEW(BLOCK_INDEX)
(  798)     CALL SELF%CSPNL2%UPDATE_VIEW(BLOCK_INDEX)
(  799)     CALL SELF%CSPRHS%UPDATE_VIEW(BLOCK_INDEX)
(  800)     CALL SELF%GWS%UPDATE_VIEW(BLOCK_INDEX)
(  801)     CALL SELF%Q%UPDATE_VIEW(BLOCK_INDEX)
(  802)     CALL SELF%I%UPDATE_VIEW(BLOCK_INDEX)
(  803)     CALL SELF%L%UPDATE_VIEW(BLOCK_INDEX)
(  804)     CALL SELF%LCONV%UPDATE_VIEW(BLOCK_INDEX)
(  805)     CALL SELF%ICONV%UPDATE_VIEW(BLOCK_INDEX)
(  806)     CALL SELF%RCONV%UPDATE_VIEW(BLOCK_INDEX)
(  807)     CALL SELF%SCONV%UPDATE_VIEW(BLOCK_INDEX)
(  808)     CALL SELF%IRAD%UPDATE_VIEW(BLOCK_INDEX)
(  809)     CALL SELF%LRAD%UPDATE_VIEW(BLOCK_INDEX)
(  810)     CALL SELF%S%UPDATE_VIEW(BLOCK_INDEX)
(  811)     CALL SELF%R%UPDATE_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 39

(  812)     CALL SELF%G%UPDATE_VIEW(BLOCK_INDEX)
(  813)     CALL SELF%H%UPDATE_VIEW(BLOCK_INDEX)
(  814)     CALL SELF%TKE%UPDATE_VIEW(BLOCK_INDEX)
(  815)     CALL SELF%TTE%UPDATE_VIEW(BLOCK_INDEX)
(  816)     CALL SELF%EFB1%UPDATE_VIEW(BLOCK_INDEX)
(  817)     CALL SELF%EFB2%UPDATE_VIEW(BLOCK_INDEX)
(  818)     CALL SELF%EFB3%UPDATE_VIEW(BLOCK_INDEX)
(  819)     CALL SELF%A%UPDATE_VIEW(BLOCK_INDEX)
(  820)     CALL SELF%O3%UPDATE_VIEW(BLOCK_INDEX)
(  821)     CALL SELF%SRC%UPDATE_VIEW(BLOCK_INDEX)
(  822)     CALL SELF%MXL%UPDATE_VIEW(BLOCK_INDEX)
(  823)     CALL SELF%SHTUR%UPDATE_VIEW(BLOCK_INDEX)
(  824)     CALL SELF%FQTUR%UPDATE_VIEW(BLOCK_INDEX)
(  825)     CALL SELF%FSTUR%UPDATE_VIEW(BLOCK_INDEX)
(  826)     CALL SELF%CPF%UPDATE_VIEW(BLOCK_INDEX)
(  827)     CALL SELF%SPF%UPDATE_VIEW(BLOCK_INDEX)
(  828)     CALL SELF%CVGQ%UPDATE_VIEW(BLOCK_INDEX)
(  829)     CALL SELF%QVA%UPDATE_VIEW(BLOCK_INDEX)
(  830)     ! Note, we assume allocation of size 0 for inactive variables!
(  831)     DO I=1, SIZE(SELF%GHG)
(  832)       CALL SELF%GHG(I)%UPDATE_VIEW(BLOCK_INDEX)
(  833)     END DO
(  834)     ! Note, we assume allocation of size 0 for inactive variables!
(  835)     DO I=1, SIZE(SELF%CHEM)
(  836)       CALL SELF%CHEM(I)%UPDATE_VIEW(BLOCK_INDEX)
(  837)     END DO
(  838)     ! Note, we assume allocation of size 0 for inactive variables!
(  839)     DO I=1, SIZE(SELF%AERO)
(  840)       CALL SELF%AERO(I)%UPDATE_VIEW(BLOCK_INDEX)
(  841)     END DO
(  842)     CALL SELF%LRCH4%UPDATE_VIEW(BLOCK_INDEX)
(  843)     ! Note, we assume allocation of size 0 for inactive variables!
(  844)     DO I=1, SIZE(SELF%FORC)
(  845)       CALL SELF%FORC(I)%UPDATE_VIEW(BLOCK_INDEX)
(  846)     END DO
(  847)     ! Note, we assume allocation of size 0 for inactive variables!
(  848)     DO I=1, SIZE(SELF%EZDIAG)
(  849)       CALL SELF%EZDIAG(I)%UPDATE_VIEW(BLOCK_INDEX)
(  850)     END DO
(  851)     ! Note, we assume allocation of size 0 for inactive variables!
(  852)     DO I=1, SIZE(SELF%ERA40)
(  853)       CALL SELF%ERA40(I)%UPDATE_VIEW(BLOCK_INDEX)
(  854)     END DO
(  855)     ! Note, we assume allocation of size 0 for inactive variables!
(  856)     DO I=1, SIZE(SELF%NOGW)
(  857)       CALL SELF%NOGW(I)%UPDATE_VIEW(BLOCK_INDEX)
(  858)     END DO
(  859)     ! Note, we assume allocation of size 0 for inactive variables!
(  860)     DO I=1, SIZE(SELF%EDRP)
(  861)       CALL SELF%EDRP(I)%UPDATE_VIEW(BLOCK_INDEX)
(  862)     END DO
(  863)     ! Note, we assume allocation of size 0 for inactive variables!
(  864)     DO I=1, SIZE(SELF%SLDIA)
(  865)       CALL SELF%SLDIA(I)%UPDATE_VIEW(BLOCK_INDEX)
(  866)     END DO
(  867)     ! Note, we assume allocation of size 0 for inactive variables!
(  868)     DO I=1, SIZE(SELF%AERAOT)
(  869)       CALL SELF%AERAOT(I)%UPDATE_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 40

(  870)     END DO
(  871)     ! Note, we assume allocation of size 0 for inactive variables!
(  872)     DO I=1, SIZE(SELF%AERLISI)
(  873)       CALL SELF%AERLISI(I)%UPDATE_VIEW(BLOCK_INDEX)
(  874)     END DO
(  875)     ! Note, we assume allocation of size 0 for inactive variables!
(  876)     DO I=1, SIZE(SELF%AEROUT)
(  877)       CALL SELF%AEROUT(I)%UPDATE_VIEW(BLOCK_INDEX)
(  878)     END DO
(  879)     ! Note, we assume allocation of size 0 for inactive variables!
(  880)     DO I=1, SIZE(SELF%AEROCLIM)
(  881)       CALL SELF%AEROCLIM(I)%UPDATE_VIEW(BLOCK_INDEX)
(  882)     END DO
(  883)     ! Note, we assume allocation of size 0 for inactive variables!
(  884)     DO I=1, SIZE(SELF%UVP)
(  885)       CALL SELF%UVP(I)%UPDATE_VIEW(BLOCK_INDEX)
(  886)     END DO
(  887)     ! Note, we assume allocation of size 0 for inactive variables!
(  888)     DO I=1, SIZE(SELF%PHYS)
(  889)       CALL SELF%PHYS(I)%UPDATE_VIEW(BLOCK_INDEX)
(  890)     END DO
(  891)     CALL SELF%PHYCTY%UPDATE_VIEW(BLOCK_INDEX)
(  892)     CALL SELF%RSPEC%UPDATE_VIEW(BLOCK_INDEX)
(  893)     CALL SELF%SDSAT%UPDATE_VIEW(BLOCK_INDEX)
(  894)     CALL SELF%CVV%UPDATE_VIEW(BLOCK_INDEX)
(  895)     CALL SELF%RKTH%UPDATE_VIEW(BLOCK_INDEX)
(  896)     CALL SELF%RKTQV%UPDATE_VIEW(BLOCK_INDEX)
(  897)     CALL SELF%RKTQC%UPDATE_VIEW(BLOCK_INDEX)
(  898)     CALL SELF%UOM%UPDATE_VIEW(BLOCK_INDEX)
(  899)     CALL SELF%UAL%UPDATE_VIEW(BLOCK_INDEX)
(  900)     CALL SELF%DOM%UPDATE_VIEW(BLOCK_INDEX)
(  901)     CALL SELF%DAL%UPDATE_VIEW(BLOCK_INDEX)
(  902)     CALL SELF%UEN%UPDATE_VIEW(BLOCK_INDEX)
(  903)     CALL SELF%UNEBH%UPDATE_VIEW(BLOCK_INDEX)
(  904)     ! Note, we assume allocation of size 0 for inactive variables!
(  905)     DO I=1, SIZE(SELF%CRM)
(  906)       CALL SELF%CRM(I)%UPDATE_VIEW(BLOCK_INDEX)
(  907)     END DO
(  908)     ! Note, we assume allocation of size 0 for inactive variables!
(  909)     DO I=1, SIZE(SELF%LIMA)
(  910)       CALL SELF%LIMA(I)%UPDATE_VIEW(BLOCK_INDEX)
(  911)     END DO
(  912)     CALL SELF%FSD%UPDATE_VIEW(BLOCK_INDEX)
(  913)     ! Note, we assume allocation of size 0 for inactive variables!
(  914)     DO I=1, SIZE(SELF%EXT)
(  915)       CALL SELF%EXT(I)%UPDATE_VIEW(BLOCK_INDEX)
(  916)     END DO
(  917) # 918 "field_variables_mod.F90"
(  918)     ! Manually update variables in ECPHYS sub-type
(  919)     CALL SELF%ECPHYS%USTRTI%UPDATE_VIEW(BLOCK_INDEX)
(  920)     CALL SELF%ECPHYS%VSTRTI%UPDATE_VIEW(BLOCK_INDEX)
(  921)     CALL SELF%ECPHYS%AHFSTI%UPDATE_VIEW(BLOCK_INDEX)
(  922)     CALL SELF%ECPHYS%EVAPTI%UPDATE_VIEW(BLOCK_INDEX)
(  923)     CALL SELF%ECPHYS%TSKTI%UPDATE_VIEW(BLOCK_INDEX)
(  924) # 925 "field_variables_mod.F90"
(  925)     CALL SELF%GEOMETRY%UPDATE_VIEW (BLOCK_INDEX)
(  926) # 927 "field_variables_mod.F90"
(  927)   END SUBROUTINE FIELD_VARIABLES_UPDATE_VIEW






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 41

(  928) # 929 "field_variables_mod.F90"
(  929)   SUBROUTINE FIELD_VARIABLES_FINAL(SELF)
(  930)     ! Update the internal data view pointers of all associated variables
(  931)     CLASS(FIELD_VARIABLES) :: SELF
(  932)     INTEGER(KIND=JPIM) :: I
(  933) # 934 "field_variables_mod.F90"
(  934)     CALL SELF%U%FINAL()
(  935)     CALL SELF%V%FINAL()
(  936)     CALL SELF%T%FINAL()
(  937)     CALL SELF%DIV%FINAL()
(  938)     CALL SELF%VOR%FINAL()
(  939)     CALL SELF%SPD%FINAL()
(  940)     CALL SELF%SVD%FINAL()
(  941)     CALL SELF%CSPDNL%FINAL()
(  942)     CALL SELF%CSPNL%FINAL()
(  943)     CALL SELF%CSVDPT%FINAL()
(  944)     CALL SELF%CTNL%FINAL()
(  945)     CALL SELF%CTPT%FINAL()
(  946)     CALL SELF%CUNL%FINAL()
(  947)     CALL SELF%CUPT%FINAL()
(  948)     CALL SELF%CVNL%FINAL()
(  949)     CALL SELF%CVPT%FINAL()
(  950)     CALL SELF%CVWVNL%FINAL()
(  951)     CALL SELF%DPHI%FINAL()
(  952)     CALL SELF%EDOT%FINAL()
(  953)     CALL SELF%GW%FINAL()
(  954)     CALL SELF%NHX%FINAL()
(  955)     CALL SELF%NHY%FINAL()
(  956)     CALL SELF%SGRTL%FINAL()
(  957)     CALL SELF%SGRTM%FINAL()
(  958)     CALL SELF%SPDNL%FINAL()
(  959)     CALL SELF%SPDNL_SI%FINAL()
(  960)     CALL SELF%SPNL%FINAL()
(  961)     CALL SELF%SPNL_SI%FINAL()
(  962)     CALL SELF%SVDNL_SI%FINAL()
(  963)     CALL SELF%TNL%FINAL()
(  964)     CALL SELF%TNL_SI%FINAL()
(  965)     CALL SELF%UNL%FINAL()
(  966)     CALL SELF%UNL_SI%FINAL()
(  967)     CALL SELF%VNL%FINAL()
(  968)     CALL SELF%VNL_SI%FINAL()
(  969)     CALL SELF%VWVNL%FINAL()
(  970)     CALL SELF%CURHS%FINAL()
(  971)     CALL SELF%CVRHS%FINAL()
(  972)     CALL SELF%CTRHS%FINAL()
(  973)     CALL SELF%CSPDRHS%FINAL()
(  974)     CALL SELF%CSVDRHS%FINAL()
(  975)     CALL SELF%NHXNL%FINAL()
(  976)     CALL SELF%CNHXNL%FINAL()
(  977)     CALL SELF%SP%FINAL()
(  978)     CALL SELF%SPNL2%FINAL()
(  979)     CALL SELF%PREHYDS%FINAL()
(  980)     CALL SELF%DBBC%FINAL()
(  981)     CALL SELF%CSPPT%FINAL()
(  982)     CALL SELF%CSPNL2%FINAL()
(  983)     CALL SELF%CSPRHS%FINAL()
(  984)     CALL SELF%GWS%FINAL()
(  985)     CALL SELF%Q%FINAL()






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 42

(  986)     CALL SELF%I%FINAL()
(  987)     CALL SELF%L%FINAL()
(  988)     CALL SELF%LCONV%FINAL()
(  989)     CALL SELF%ICONV%FINAL()
(  990)     CALL SELF%RCONV%FINAL()
(  991)     CALL SELF%SCONV%FINAL()
(  992)     CALL SELF%IRAD%FINAL()
(  993)     CALL SELF%LRAD%FINAL()
(  994)     CALL SELF%S%FINAL()
(  995)     CALL SELF%R%FINAL()
(  996)     CALL SELF%G%FINAL()
(  997)     CALL SELF%H%FINAL()
(  998)     CALL SELF%TKE%FINAL()
(  999)     CALL SELF%TTE%FINAL()
( 1000)     CALL SELF%EFB1%FINAL()
( 1001)     CALL SELF%EFB2%FINAL()
( 1002)     CALL SELF%EFB3%FINAL()
( 1003)     CALL SELF%A%FINAL()
( 1004)     CALL SELF%O3%FINAL()
( 1005)     CALL SELF%SRC%FINAL()
( 1006)     CALL SELF%MXL%FINAL()
( 1007)     CALL SELF%SHTUR%FINAL()
( 1008)     CALL SELF%FQTUR%FINAL()
( 1009)     CALL SELF%FSTUR%FINAL()
( 1010)     CALL SELF%CPF%FINAL()
( 1011)     CALL SELF%SPF%FINAL()
( 1012)     CALL SELF%CVGQ%FINAL()
( 1013)     CALL SELF%QVA%FINAL()
( 1014)     IF (ALLOCATED(SELF%GHG_G)) THEN
( 1015)       DO I=1, SIZE(SELF%GHG)
( 1016)         CALL SELF%GHG(I)%FINAL()
( 1017)       END DO
( 1018)       DEALLOCATE(SELF%GHG_G)
( 1019)       NULLIFY(SELF%GHG)
( 1020)     END IF
( 1021)     IF (ALLOCATED(SELF%CHEM_G)) THEN
( 1022)       DO I=1, SIZE(SELF%CHEM)
( 1023)         CALL SELF%CHEM(I)%FINAL()
( 1024)       END DO
( 1025)       DEALLOCATE(SELF%CHEM_G)
( 1026)       NULLIFY(SELF%CHEM)
( 1027)     END IF
( 1028)     IF (ALLOCATED(SELF%AERO_G)) THEN
( 1029)       DO I=1, SIZE(SELF%AERO)
( 1030)         CALL SELF%AERO(I)%FINAL()
( 1031)       END DO
( 1032)       DEALLOCATE(SELF%AERO_G)
( 1033)       NULLIFY(SELF%AERO)
( 1034)     END IF
( 1035)     CALL SELF%LRCH4%FINAL()
( 1036)     IF (ALLOCATED(SELF%FORC_G)) THEN
( 1037)       DO I=1, SIZE(SELF%FORC)
( 1038)         CALL SELF%FORC(I)%FINAL()
( 1039)       END DO
( 1040)       DEALLOCATE(SELF%FORC_G)
( 1041)       NULLIFY(SELF%FORC)
( 1042)     END IF
( 1043)     IF (ALLOCATED(SELF%EZDIAG_G)) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 43

( 1044)       DO I=1, SIZE(SELF%EZDIAG)
( 1045)         CALL SELF%EZDIAG(I)%FINAL()
( 1046)       END DO
( 1047)       DEALLOCATE(SELF%EZDIAG_G)
( 1048)       NULLIFY(SELF%EZDIAG)
( 1049)     END IF
( 1050)     IF (ALLOCATED(SELF%ERA40_G)) THEN
( 1051)       DO I=1, SIZE(SELF%ERA40)
( 1052)         CALL SELF%ERA40(I)%FINAL()
( 1053)       END DO
( 1054)       DEALLOCATE(SELF%ERA40_G)
( 1055)       NULLIFY(SELF%ERA40)
( 1056)     END IF
( 1057)     IF (ALLOCATED(SELF%NOGW_G)) THEN
( 1058)       DO I=1, SIZE(SELF%NOGW)
( 1059)         CALL SELF%NOGW(I)%FINAL()
( 1060)       END DO
( 1061)       DEALLOCATE(SELF%NOGW_G)
( 1062)       NULLIFY(SELF%NOGW)
( 1063)     END IF
( 1064)     IF (ALLOCATED(SELF%EDRP_G)) THEN
( 1065)       DO I=1, SIZE(SELF%EDRP)
( 1066)         CALL SELF%EDRP(I)%FINAL()
( 1067)       END DO
( 1068)       DEALLOCATE(SELF%EDRP_G)
( 1069)       NULLIFY(SELF%EDRP)
( 1070)     END IF
( 1071)     IF (ALLOCATED(SELF%SLDIA_G)) THEN
( 1072)       DO I=1, SIZE(SELF%SLDIA)
( 1073)         CALL SELF%SLDIA(I)%FINAL()
( 1074)       END DO
( 1075)       DEALLOCATE(SELF%SLDIA_G)
( 1076)       NULLIFY(SELF%SLDIA)
( 1077)     END IF
( 1078)     IF (ALLOCATED(SELF%AERAOT_G)) THEN
( 1079)       DO I=1, SIZE(SELF%AERAOT)
( 1080)         CALL SELF%AERAOT(I)%FINAL()
( 1081)       END DO
( 1082)       DEALLOCATE(SELF%AERAOT_G)
( 1083)       NULLIFY(SELF%AERAOT)
( 1084)     END IF
( 1085)     IF (ALLOCATED(SELF%AERLISI_G)) THEN
( 1086)       DO I=1, SIZE(SELF%AERLISI)
( 1087)         CALL SELF%AERLISI(I)%FINAL()
( 1088)       END DO
( 1089)       DEALLOCATE(SELF%AERLISI_G)
( 1090)       NULLIFY(SELF%AERLISI)
( 1091)     END IF
( 1092)     IF (ALLOCATED(SELF%AEROUT_G)) THEN
( 1093)       DO I=1, SIZE(SELF%AEROUT)
( 1094)         CALL SELF%AEROUT(I)%FINAL()
( 1095)       END DO
( 1096)       DEALLOCATE(SELF%AEROUT_G)
( 1097)       NULLIFY(SELF%AEROUT)
( 1098)     END IF
( 1099)     IF (ALLOCATED(SELF%AEROCLIM_G)) THEN
( 1100)       DO I=1, SIZE(SELF%AEROCLIM)
( 1101)         CALL SELF%AEROCLIM(I)%FINAL()






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 44

( 1102)       END DO
( 1103)       DEALLOCATE(SELF%AEROCLIM_G)
( 1104)       NULLIFY(SELF%AEROCLIM)
( 1105)     END IF
( 1106)     IF (ALLOCATED(SELF%UVP_G)) THEN
( 1107)       DO I=1, SIZE(SELF%UVP)
( 1108)         CALL SELF%UVP(I)%FINAL()
( 1109)       END DO
( 1110)       DEALLOCATE(SELF%UVP_G)
( 1111)       NULLIFY(SELF%UVP)
( 1112)     END IF
( 1113)     IF (ALLOCATED(SELF%PHYS_G)) THEN
( 1114)       DO I=1, SIZE(SELF%PHYS)
( 1115)         CALL SELF%PHYS(I)%FINAL()
( 1116)       END DO
( 1117)       DEALLOCATE(SELF%PHYS_G)
( 1118)       NULLIFY(SELF%PHYS)
( 1119)     END IF
( 1120)     CALL SELF%PHYCTY%FINAL()
( 1121)     CALL SELF%RSPEC%FINAL()
( 1122)     CALL SELF%SDSAT%FINAL()
( 1123)     CALL SELF%CVV%FINAL()
( 1124)     CALL SELF%RKTH%FINAL()
( 1125)     CALL SELF%RKTQV%FINAL()
( 1126)     CALL SELF%RKTQC%FINAL()
( 1127)     CALL SELF%UOM%FINAL()
( 1128)     CALL SELF%UAL%FINAL()
( 1129)     CALL SELF%DOM%FINAL()
( 1130)     CALL SELF%DAL%FINAL()
( 1131)     CALL SELF%UEN%FINAL()
( 1132)     CALL SELF%UNEBH%FINAL()
( 1133)     IF (ALLOCATED(SELF%CRM_G)) THEN
( 1134)       DO I=1, SIZE(SELF%CRM)
( 1135)         CALL SELF%CRM(I)%FINAL()
( 1136)       END DO
( 1137)       DEALLOCATE(SELF%CRM_G)
( 1138)       NULLIFY(SELF%CRM)
( 1139)     END IF
( 1140)     IF (ALLOCATED(SELF%LIMA_G)) THEN
( 1141)       DO I=1, SIZE(SELF%LIMA)
( 1142)         CALL SELF%LIMA(I)%FINAL()
( 1143)       END DO
( 1144)       DEALLOCATE(SELF%LIMA_G)
( 1145)       NULLIFY(SELF%LIMA)
( 1146)     END IF
( 1147)     CALL SELF%FSD%FINAL()
( 1148)     IF (ALLOCATED(SELF%EXT_G)) THEN
( 1149)       DO I=1, SIZE(SELF%EXT)
( 1150)         CALL SELF%EXT(I)%FINAL()
( 1151)       END DO
( 1152)       DEALLOCATE(SELF%EXT_G)
( 1153)       NULLIFY(SELF%EXT)
( 1154)     END IF
( 1155)   END SUBROUTINE FIELD_VARIABLES_FINAL
( 1156) # 1157 "field_variables_mod.F90"
( 1157)   SUBROUTINE FIELD_VARIABLES_RESET_ARRAYS(SELF)
( 1158)     ! Deallocate and reset thread-local variables arrays.
( 1159)     !






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 45

( 1160)     ! This ensures we are not leaking thread-local objects and should
( 1161)     ! be done after parallel regions.
( 1162)     CLASS(FIELD_VARIABLES), TARGET :: SELF
( 1163)     INTEGER(KIND=JPIM) :: I
( 1164) # 1165 "field_variables_mod.F90"
( 1165)     ! Deallocate and reset thread-local variables arrays
( 1166)     DEALLOCATE(SELF%GHG)
( 1167)     SELF%GHG => SELF%GHG_G
( 1168)     ! Deallocate and reset thread-local variables arrays
( 1169)     DEALLOCATE(SELF%CHEM)
( 1170)     SELF%CHEM => SELF%CHEM_G
( 1171)     ! Deallocate and reset thread-local variables arrays
( 1172)     DEALLOCATE(SELF%AERO)
( 1173)     SELF%AERO => SELF%AERO_G
( 1174)     ! Deallocate and reset thread-local variables arrays
( 1175)     DEALLOCATE(SELF%FORC)
( 1176)     SELF%FORC => SELF%FORC_G
( 1177)     ! Deallocate and reset thread-local variables arrays
( 1178)     DEALLOCATE(SELF%EZDIAG)
( 1179)     SELF%EZDIAG => SELF%EZDIAG_G
( 1180)     ! Deallocate and reset thread-local variables arrays
( 1181)     DEALLOCATE(SELF%ERA40)
( 1182)     SELF%ERA40 => SELF%ERA40_G
( 1183)     ! Deallocate and reset thread-local variables arrays
( 1184)     DEALLOCATE(SELF%NOGW)
( 1185)     SELF%NOGW => SELF%NOGW_G
( 1186)     ! Deallocate and reset thread-local variables arrays
( 1187)     DEALLOCATE(SELF%EDRP)
( 1188)     SELF%EDRP => SELF%EDRP_G
( 1189)     ! Deallocate and reset thread-local variables arrays
( 1190)     DEALLOCATE(SELF%SLDIA)
( 1191)     SELF%SLDIA => SELF%SLDIA_G
( 1192)     ! Deallocate and reset thread-local variables arrays
( 1193)     DEALLOCATE(SELF%AERAOT)
( 1194)     SELF%AERAOT => SELF%AERAOT_G
( 1195)     ! Deallocate and reset thread-local variables arrays
( 1196)     DEALLOCATE(SELF%AERLISI)
( 1197)     SELF%AERLISI => SELF%AERLISI_G
( 1198)     ! Deallocate and reset thread-local variables arrays
( 1199)     DEALLOCATE(SELF%AEROUT)
( 1200)     SELF%AEROUT => SELF%AEROUT_G
( 1201)     ! Deallocate and reset thread-local variables arrays
( 1202)     DEALLOCATE(SELF%AEROCLIM)
( 1203)     SELF%AEROCLIM => SELF%AEROCLIM_G
( 1204)     ! Deallocate and reset thread-local variables arrays
( 1205)     DEALLOCATE(SELF%UVP)
( 1206)     SELF%UVP => SELF%UVP_G
( 1207)     ! Deallocate and reset thread-local variables arrays
( 1208)     DEALLOCATE(SELF%PHYS)
( 1209)     SELF%PHYS => SELF%PHYS_G
( 1210)     ! Deallocate and reset thread-local variables arrays
( 1211)     DEALLOCATE(SELF%CRM)
( 1212)     SELF%CRM => SELF%CRM_G
( 1213)     ! Deallocate and reset thread-local variables arrays
( 1214)     DEALLOCATE(SELF%LIMA)
( 1215)     SELF%LIMA => SELF%LIMA_G
( 1216)     ! Deallocate and reset thread-local variables arrays
( 1217)     DEALLOCATE(SELF%EXT)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 46

( 1218)     SELF%EXT => SELF%EXT_G
( 1219) # 1220 "field_variables_mod.F90"
( 1220)     DEALLOCATE (SELF%GFL_PTR)
( 1221)     NULLIFY (SELF%GFL_PTR)
( 1222) # 1223 "field_variables_mod.F90"
( 1223)   END SUBROUTINE FIELD_VARIABLES_RESET_ARRAYS
( 1224) # 1225 "field_variables_mod.F90"
( 1225)   SUBROUTINE GEOMETRY_VARIABLES_UPDATE_VIEW(SELF, BLOCK_INDEX)
( 1226)     CLASS (GEOMETRY_VARIABLES) :: SELF
( 1227)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
( 1228)     CALL SELF%RCORI%UPDATE_VIEW (BLOCK_INDEX)
( 1229)     CALL SELF%RCORIC%UPDATE_VIEW (BLOCK_INDEX)
( 1230)     CALL SELF%GEMU%UPDATE_VIEW (BLOCK_INDEX)
( 1231)     CALL SELF%GSQM2%UPDATE_VIEW (BLOCK_INDEX)
( 1232)     CALL SELF%GELAM%UPDATE_VIEW (BLOCK_INDEX)
( 1233)     CALL SELF%GELAT%UPDATE_VIEW (BLOCK_INDEX)
( 1234)     CALL SELF%GECLO%UPDATE_VIEW (BLOCK_INDEX)
( 1235)     CALL SELF%GESLO%UPDATE_VIEW (BLOCK_INDEX)
( 1236)     CALL SELF%GM%UPDATE_VIEW (BLOCK_INDEX)
( 1237)     CALL SELF%GMAPPA%UPDATE_VIEW (BLOCK_INDEX)
( 1238)     CALL SELF%GOMVRL%UPDATE_VIEW (BLOCK_INDEX)
( 1239)     CALL SELF%GOMVRM%UPDATE_VIEW (BLOCK_INDEX)
( 1240)     CALL SELF%GNORDL%UPDATE_VIEW (BLOCK_INDEX)
( 1241)     CALL SELF%GNORDM%UPDATE_VIEW (BLOCK_INDEX)
( 1242)     CALL SELF%GNORDLCL%UPDATE_VIEW (BLOCK_INDEX)
( 1243)     CALL SELF%GNORDMCL%UPDATE_VIEW (BLOCK_INDEX)
( 1244)     CALL SELF%GNORDMCM%UPDATE_VIEW (BLOCK_INDEX)
( 1245)     CALL SELF%GAW%UPDATE_VIEW (BLOCK_INDEX)
( 1246)     CALL SELF%OROG%UPDATE_VIEW (BLOCK_INDEX)
( 1247)     CALL SELF%OROGL%UPDATE_VIEW (BLOCK_INDEX)
( 1248)     CALL SELF%OROGM%UPDATE_VIEW (BLOCK_INDEX)
( 1249)     CALL SELF%OROGLL%UPDATE_VIEW (BLOCK_INDEX)
( 1250)     CALL SELF%OROGMM%UPDATE_VIEW (BLOCK_INDEX)
( 1251)     CALL SELF%OROGLM%UPDATE_VIEW (BLOCK_INDEX)
( 1252)     CALL SELF%RCOLON%UPDATE_VIEW (BLOCK_INDEX)
( 1253)     CALL SELF%RSILON%UPDATE_VIEW (BLOCK_INDEX)
( 1254)     CALL SELF%RINDX%UPDATE_VIEW (BLOCK_INDEX)
( 1255)     CALL SELF%RINDY%UPDATE_VIEW (BLOCK_INDEX)
( 1256)     CALL SELF%RATATH%UPDATE_VIEW (BLOCK_INDEX)
( 1257)     CALL SELF%RATATX%UPDATE_VIEW (BLOCK_INDEX)
( 1258)   END SUBROUTINE GEOMETRY_VARIABLES_UPDATE_VIEW
( 1259) # 1260 "field_variables_mod.F90"
( 1260)   SUBROUTINE GEOMETRY_VARIABLES_FINAL (SELF)
( 1261)     CLASS (GEOMETRY_VARIABLES) :: SELF
( 1262)     CALL SELF%RCORI%FINAL
( 1263)     CALL SELF%RCORIC%FINAL
( 1264)     CALL SELF%GEMU%FINAL
( 1265)     CALL SELF%GSQM2%FINAL
( 1266)     CALL SELF%GELAM%FINAL
( 1267)     CALL SELF%GELAT%FINAL
( 1268)     CALL SELF%GECLO%FINAL
( 1269)     CALL SELF%GESLO%FINAL
( 1270)     CALL SELF%GM%FINAL
( 1271)     CALL SELF%GMAPPA%FINAL
( 1272)     CALL SELF%GOMVRL%FINAL
( 1273)     CALL SELF%GOMVRM%FINAL
( 1274)     CALL SELF%GNORDL%FINAL
( 1275)     CALL SELF%GNORDM%FINAL






NVFORTRAN (Version     23.1)          02/24/2023  13:57:17      page 47

( 1276)     CALL SELF%GNORDLCL%FINAL
( 1277)     CALL SELF%GNORDMCL%FINAL
( 1278)     CALL SELF%GNORDMCM%FINAL
( 1279)     CALL SELF%GAW%FINAL
( 1280)     CALL SELF%OROG%FINAL
( 1281)     CALL SELF%OROGL%FINAL
( 1282)     CALL SELF%OROGM%FINAL
( 1283)     CALL SELF%OROGLL%FINAL
( 1284)     CALL SELF%OROGMM%FINAL
( 1285)     CALL SELF%OROGLM%FINAL
( 1286)     CALL SELF%RCOLON%FINAL
( 1287)     CALL SELF%RSILON%FINAL
( 1288)     CALL SELF%RINDX%FINAL
( 1289)     CALL SELF%RINDY%FINAL
( 1290)     CALL SELF%RATATH%FINAL
( 1291)     CALL SELF%RATATX%FINAL
( 1292)   END SUBROUTINE GEOMETRY_VARIABLES_FINAL
( 1293) # 1294 "field_variables_mod.F90"
( 1294) END MODULE FIELD_VARIABLES_MOD
