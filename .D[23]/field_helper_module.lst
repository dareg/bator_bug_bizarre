


NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: field_helper_module.F90

(    1) 
(    2) 
(    3) 
(    4) 
(    5) MODULE FIELD_HELPER_MODULE
(    6) 
(    7) USE FIELD_MODULE
(    8) USE YOMHOOK
(    9) 
(   10) IMPLICIT NONE
(   11) 
(   12) INTERFACE CREATE_TEMPORARY_LU
(   13)   MODULE PROCEDURE CREATE_TEMPORARY_2D_LU
(   14)   MODULE PROCEDURE CREATE_TEMPORARY_3D_LU
(   15)   MODULE PROCEDURE CREATE_TEMPORARY_4D_LU
(   16)   MODULE PROCEDURE CREATE_TEMPORARY_5D_LU
(   17)   MODULE PROCEDURE CREATE_TEMPORARY_INT2D_LU
(   18)   MODULE PROCEDURE CREATE_TEMPORARY_INT3D_LU
(   19)   MODULE PROCEDURE CREATE_TEMPORARY_LOG2D_LU
(   20) END INTERFACE CREATE_TEMPORARY_LU
(   21) 
(   22) INTERFACE GET_DEVICE_DATA_RDONLY
(   23)   MODULE PROCEDURE :: FIELD_2D_GET_DEVICE_DATA_RDONLY
(   24)   MODULE PROCEDURE :: FIELD_3D_GET_DEVICE_DATA_RDONLY
(   25)   MODULE PROCEDURE :: FIELD_4D_GET_DEVICE_DATA_RDONLY
(   26)   MODULE PROCEDURE :: FIELD_5D_GET_DEVICE_DATA_RDONLY
(   27)   MODULE PROCEDURE :: FIELD_INT2D_GET_DEVICE_DATA_RDONLY
(   28)   MODULE PROCEDURE :: FIELD_INT3D_GET_DEVICE_DATA_RDONLY
(   29)   MODULE PROCEDURE :: FIELD_INT4D_GET_DEVICE_DATA_RDONLY
(   30)   MODULE PROCEDURE :: FIELD_INT5D_GET_DEVICE_DATA_RDONLY






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 3

(   31)   MODULE PROCEDURE :: FIELD_LOG2D_GET_DEVICE_DATA_RDONLY
(   32)   MODULE PROCEDURE :: FIELD_LOG3D_GET_DEVICE_DATA_RDONLY
(   33)   MODULE PROCEDURE :: FIELD_LOG4D_GET_DEVICE_DATA_RDONLY
(   34)   MODULE PROCEDURE :: FIELD_LOG5D_GET_DEVICE_DATA_RDONLY
(   35) END INTERFACE GET_DEVICE_DATA_RDONLY
(   36) 
(   37) INTERFACE GET_DEVICE_DATA_RDWR
(   38)   MODULE PROCEDURE :: FIELD_2D_GET_DEVICE_DATA_RDWR
(   39)   MODULE PROCEDURE :: FIELD_3D_GET_DEVICE_DATA_RDWR
(   40)   MODULE PROCEDURE :: FIELD_4D_GET_DEVICE_DATA_RDWR
(   41)   MODULE PROCEDURE :: FIELD_5D_GET_DEVICE_DATA_RDWR
(   42)   MODULE PROCEDURE :: FIELD_INT2D_GET_DEVICE_DATA_RDWR
(   43)   MODULE PROCEDURE :: FIELD_INT3D_GET_DEVICE_DATA_RDWR
(   44)   MODULE PROCEDURE :: FIELD_INT4D_GET_DEVICE_DATA_RDWR
(   45)   MODULE PROCEDURE :: FIELD_INT5D_GET_DEVICE_DATA_RDWR
(   46)   MODULE PROCEDURE :: FIELD_LOG2D_GET_DEVICE_DATA_RDWR
(   47)   MODULE PROCEDURE :: FIELD_LOG3D_GET_DEVICE_DATA_RDWR
(   48)   MODULE PROCEDURE :: FIELD_LOG4D_GET_DEVICE_DATA_RDWR
(   49)   MODULE PROCEDURE :: FIELD_LOG5D_GET_DEVICE_DATA_RDWR
(   50) END INTERFACE GET_DEVICE_DATA_RDWR
(   51) 
(   52) INTERFACE GET_HOST_DATA_RDONLY
(   53)   MODULE PROCEDURE :: FIELD_2D_GET_HOST_DATA_RDONLY
(   54)   MODULE PROCEDURE :: FIELD_3D_GET_HOST_DATA_RDONLY
(   55)   MODULE PROCEDURE :: FIELD_4D_GET_HOST_DATA_RDONLY
(   56)   MODULE PROCEDURE :: FIELD_5D_GET_HOST_DATA_RDONLY
(   57)   MODULE PROCEDURE :: FIELD_INT2D_GET_HOST_DATA_RDONLY
(   58)   MODULE PROCEDURE :: FIELD_INT3D_GET_HOST_DATA_RDONLY
(   59)   MODULE PROCEDURE :: FIELD_INT4D_GET_HOST_DATA_RDONLY
(   60)   MODULE PROCEDURE :: FIELD_INT5D_GET_HOST_DATA_RDONLY
(   61)   MODULE PROCEDURE :: FIELD_LOG2D_GET_HOST_DATA_RDONLY
(   62)   MODULE PROCEDURE :: FIELD_LOG3D_GET_HOST_DATA_RDONLY
(   63)   MODULE PROCEDURE :: FIELD_LOG4D_GET_HOST_DATA_RDONLY
(   64)   MODULE PROCEDURE :: FIELD_LOG5D_GET_HOST_DATA_RDONLY
(   65) END INTERFACE GET_HOST_DATA_RDONLY
(   66) 
(   67) INTERFACE GET_HOST_DATA_RDWR
(   68)   MODULE PROCEDURE :: FIELD_2D_GET_HOST_DATA_RDWR
(   69)   MODULE PROCEDURE :: FIELD_3D_GET_HOST_DATA_RDWR
(   70)   MODULE PROCEDURE :: FIELD_4D_GET_HOST_DATA_RDWR
(   71)   MODULE PROCEDURE :: FIELD_5D_GET_HOST_DATA_RDWR
(   72)   MODULE PROCEDURE :: FIELD_INT2D_GET_HOST_DATA_RDWR
(   73)   MODULE PROCEDURE :: FIELD_INT3D_GET_HOST_DATA_RDWR
(   74)   MODULE PROCEDURE :: FIELD_INT4D_GET_HOST_DATA_RDWR
(   75)   MODULE PROCEDURE :: FIELD_INT5D_GET_HOST_DATA_RDWR
(   76)   MODULE PROCEDURE :: FIELD_LOG2D_GET_HOST_DATA_RDWR
(   77)   MODULE PROCEDURE :: FIELD_LOG3D_GET_HOST_DATA_RDWR
(   78)   MODULE PROCEDURE :: FIELD_LOG4D_GET_HOST_DATA_RDWR
(   79)   MODULE PROCEDURE :: FIELD_LOG5D_GET_HOST_DATA_RDWR
(   80) END INTERFACE GET_HOST_DATA_RDWR
(   81) 
(   82) INTEGER (KIND=JPIM), PARAMETER, PRIVATE :: NH2D = 1, ND2H = 2, NRD = B'00000001', NWR = B'00000010'
(   83) 
(   84) CONTAINS
(   85) 
(   86) 
(   87)   INTEGER (KIND=JPIM) FUNCTION FIELD_2D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(   88)   REAL(KIND=JPRB), POINTER :: PTR (:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 4

(   89)   INTEGER*8 :: ISTRIDE (2)
(   90)   INTEGER (KIND=JPIM) :: J
(   91) 
(   92)   ISTRIDE (1) = KIND (PTR)
(   93)   DO J = 2, 2
(   94)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(   95)   ENDDO
(   96) 
(   97)   JDIM = 0
(   98)   IF (LOC (PTR (2, 1)) - LOC (PTR (1, 1)) /= ISTRIDE (1)) THEN
(   99)     RETURN
(  100)   ENDIF
(  101) 
(  102)   JDIM = 1
(  103) 
(  104)   IF (LOC (PTR (1, 2)) - LOC (PTR (1, 1)) /= ISTRIDE (2)) THEN
(  105)     RETURN
(  106)   ENDIF
(  107) 
(  108)   JDIM = 2
(  109) 
(  110)   END FUNCTION FIELD_2D_GET_LAST_CONTIGUOUS_DIMENSION
(  111) 
(  112)   SUBROUTINE FIELD_2D_COPY (HST, DEV, KDIR)
(  113)   REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  114)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  115)   INTEGER (KIND=JPIM) :: JDIM
(  116) 
(  117)   JDIM = FIELD_2D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  118) 
(  119)   SELECT CASE (JDIM)
(  120)     CASE (0)
(  121)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  122)     CASE (1)
(  123)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  124)     CASE (2)
(  125)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  126)   END SELECT
(  127) 
(  128)   CONTAINS
(  129) 
(  130)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  131) #ifdef _OPENACC
(  132)     USE OPENACC
(  133) #endif
(  134)     REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  135)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  136)     INTEGER (KIND=JPIM) :: ISIZE
(  137)     INTEGER :: J, J1, J2
(  138) 
(  139)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  140)       DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  141)         ISIZE = KIND (HST)
(  142)         IF (KDIR == NH2D) THEN
(  143)           !$acc host_data use_device (DEV)
(  144) #ifdef _OPENACC
(  145)           CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2), HST (J1, J2), ISIZE)
(  146) #endif






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 5

(  147)           !$acc end host_data
(  148)         ELSEIF (KDIR == ND2H) THEN
(  149)           !$acc host_data use_device (DEV)
(  150) #ifdef _OPENACC
(  151)           CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2), DEV (J1, J2), ISIZE)
(  152) #endif
(  153)           !$acc end host_data
(  154)         ENDIF
(  155)       ENDDO
(  156)     ENDDO
(  157)     END SUBROUTINE
(  158) 
(  159)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  160) #ifdef _OPENACC
(  161)     USE OPENACC
(  162) #endif
(  163)     REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  164)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  165)     INTEGER (KIND=JPIM) :: ISIZE
(  166)     INTEGER :: J, J2
(  167) 
(  168)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  169)       ISIZE = KIND (HST) * SIZE (HST (:, J2))
(  170)       IF (KDIR == NH2D) THEN
(  171)         !$acc host_data use_device (DEV)
(  172) #ifdef _OPENACC
(  173)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2), HST (:, J2), ISIZE)
(  174) #endif
(  175)         !$acc end host_data
(  176)       ELSEIF (KDIR == ND2H) THEN
(  177)         !$acc host_data use_device (DEV)
(  178) #ifdef _OPENACC
(  179)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2), DEV (:, J2), ISIZE)
(  180) #endif
(  181)         !$acc end host_data
(  182)       ENDIF
(  183)     ENDDO
(  184)     END SUBROUTINE
(  185) 
(  186)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  187) #ifdef _OPENACC
(  188)     USE OPENACC
(  189) #endif
(  190)     REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  191)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  192)     INTEGER (KIND=JPIM) :: ISIZE
(  193)     INTEGER :: J
(  194) 
(  195)         ISIZE = KIND (HST) * SIZE (HST (:, :))
(  196)         IF (KDIR == NH2D) THEN
(  197)           !$acc host_data use_device (DEV)
(  198) #ifdef _OPENACC
(  199)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :), HST (:, :), ISIZE)
(  200) #endif
(  201)           !$acc end host_data
(  202)         ELSEIF (KDIR == ND2H) THEN
(  203)           !$acc host_data use_device (DEV)
(  204) #ifdef _OPENACC






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 6

(  205)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :), DEV (:, :), ISIZE)
(  206) #endif
(  207)           !$acc end host_data
(  208)         ENDIF
(  209)     END SUBROUTINE
(  210) 
(  211)   END SUBROUTINE FIELD_2D_COPY
(  212) 
(  213)   FUNCTION FIELD_2D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
(  214)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  215)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  216)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1)
(  217)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  218) 
(  219)     IF (ASSOCIATED (SELF)) THEN
(  220)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
(  221)         CALL FIELD_2D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
(  222)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
(  223)       ENDIF
(  224)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%PTR (:,:)
(  225)       IF (IAND (MODE, NWR) /= 0) THEN
(  226)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
(  227)       ENDIF
(  228)     ELSE
(  229)       PTR => ZDUM
(  230)     ENDIF
(  231) 
(  232)   END FUNCTION FIELD_2D_GET_HOST_DATA_
(  233) 
(  234)   FUNCTION FIELD_2D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
(  235)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  236)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  237) 
(  238)     PTR => FIELD_2D_GET_HOST_DATA_ (SELF, NRD)
(  239) 
(  240)   END FUNCTION FIELD_2D_GET_HOST_DATA_RDONLY
(  241) 
(  242)   FUNCTION FIELD_2D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
(  243)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  244)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  245) 
(  246)     PTR => FIELD_2D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
(  247) 
(  248)   END FUNCTION FIELD_2D_GET_HOST_DATA_RDWR
(  249) 
(  250)   FUNCTION FIELD_2D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
(  251)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  252)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  253)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1)
(  254)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  255) 
(  256)     IF (ASSOCIATED (SELF)) THEN
(  257)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
(  258)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
(  259)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
(  260)           !$acc enter data create (SELF%DEVPTR)
(  261)         ENDIF
(  262)         CALL FIELD_2D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 7

(  263)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
(  264)       ENDIF
(  265)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%DEVPTR (:,:)
(  266)       IF (IAND (MODE, NWR) /= 0) THEN
(  267)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
(  268)       ENDIF
(  269)     ELSE
(  270)       PTR => ZDUM
(  271)     ENDIF
(  272) 
(  273)   END FUNCTION FIELD_2D_GET_DEVICE_DATA_
(  274) 
(  275)   FUNCTION FIELD_2D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
(  276)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  277)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  278) 
(  279)     PTR => FIELD_2D_GET_DEVICE_DATA_ (SELF, NRD)
(  280) 
(  281)   END FUNCTION FIELD_2D_GET_DEVICE_DATA_RDONLY
(  282) 
(  283)   FUNCTION FIELD_2D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
(  284)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  285)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  286) 
(  287)     PTR => FIELD_2D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
(  288) 
(  289)   END FUNCTION FIELD_2D_GET_DEVICE_DATA_RDWR
(  290) 
(  291) 
(  292)   INTEGER (KIND=JPIM) FUNCTION FIELD_3D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(  293)   REAL(KIND=JPRB), POINTER :: PTR (:,:,:)
(  294)   INTEGER*8 :: ISTRIDE (3)
(  295)   INTEGER (KIND=JPIM) :: J
(  296) 
(  297)   ISTRIDE (1) = KIND (PTR)
(  298)   DO J = 2, 3
(  299)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(  300)   ENDDO
(  301) 
(  302)   JDIM = 0
(  303)   IF (LOC (PTR (2, 1, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (1)) THEN
(  304)     RETURN
(  305)   ENDIF
(  306) 
(  307)   JDIM = 1
(  308) 
(  309)   IF (LOC (PTR (1, 2, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (2)) THEN
(  310)     RETURN
(  311)   ENDIF
(  312) 
(  313)   JDIM = 2
(  314) 
(  315)   IF (LOC (PTR (1, 1, 2)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (3)) THEN
(  316)     RETURN
(  317)   ENDIF
(  318) 
(  319)   JDIM = 3
(  320) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 8

(  321)   END FUNCTION FIELD_3D_GET_LAST_CONTIGUOUS_DIMENSION
(  322) 
(  323)   SUBROUTINE FIELD_3D_COPY (HST, DEV, KDIR)
(  324)   REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  325)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  326)   INTEGER (KIND=JPIM) :: JDIM
(  327) 
(  328)   JDIM = FIELD_3D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  329) 
(  330)   SELECT CASE (JDIM)
(  331)     CASE (0)
(  332)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  333)     CASE (1)
(  334)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  335)     CASE (2)
(  336)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  337)     CASE (3)
(  338)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  339)   END SELECT
(  340) 
(  341)   CONTAINS
(  342) 
(  343)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  344) #ifdef _OPENACC
(  345)     USE OPENACC
(  346) #endif
(  347)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  348)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  349)     INTEGER (KIND=JPIM) :: ISIZE
(  350)     INTEGER :: J, J1, J2, J3
(  351) 
(  352)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  353)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  354)         DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  355)           ISIZE = KIND (HST)
(  356)           IF (KDIR == NH2D) THEN
(  357)             !$acc host_data use_device (DEV)
(  358) #ifdef _OPENACC
(  359)             CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3), HST (J1, J2, J3), ISIZE)
(  360) #endif
(  361)             !$acc end host_data
(  362)           ELSEIF (KDIR == ND2H) THEN
(  363)             !$acc host_data use_device (DEV)
(  364) #ifdef _OPENACC
(  365)             CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3), DEV (J1, J2, J3), ISIZE)
(  366) #endif
(  367)             !$acc end host_data
(  368)           ENDIF
(  369)         ENDDO
(  370)       ENDDO
(  371)     ENDDO
(  372)     END SUBROUTINE
(  373) 
(  374)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  375) #ifdef _OPENACC
(  376)     USE OPENACC
(  377) #endif
(  378)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 9

(  379)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  380)     INTEGER (KIND=JPIM) :: ISIZE
(  381)     INTEGER :: J, J2, J3
(  382) 
(  383)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  384)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  385)         ISIZE = KIND (HST) * SIZE (HST (:, J2, J3))
(  386)         IF (KDIR == NH2D) THEN
(  387)           !$acc host_data use_device (DEV)
(  388) #ifdef _OPENACC
(  389)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3), HST (:, J2, J3), ISIZE)
(  390) #endif
(  391)           !$acc end host_data
(  392)         ELSEIF (KDIR == ND2H) THEN
(  393)           !$acc host_data use_device (DEV)
(  394) #ifdef _OPENACC
(  395)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3), DEV (:, J2, J3), ISIZE)
(  396) #endif
(  397)           !$acc end host_data
(  398)         ENDIF
(  399)       ENDDO
(  400)     ENDDO
(  401)     END SUBROUTINE
(  402) 
(  403)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  404) #ifdef _OPENACC
(  405)     USE OPENACC
(  406) #endif
(  407)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  408)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  409)     INTEGER (KIND=JPIM) :: ISIZE
(  410)     INTEGER :: J, J3
(  411) 
(  412)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  413)       ISIZE = KIND (HST) * SIZE (HST (:, :, J3))
(  414)       IF (KDIR == NH2D) THEN
(  415)         !$acc host_data use_device (DEV)
(  416) #ifdef _OPENACC
(  417)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3), HST (:, :, J3), ISIZE)
(  418) #endif
(  419)         !$acc end host_data
(  420)       ELSEIF (KDIR == ND2H) THEN
(  421)         !$acc host_data use_device (DEV)
(  422) #ifdef _OPENACC
(  423)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3), DEV (:, :, J3), ISIZE)
(  424) #endif
(  425)         !$acc end host_data
(  426)       ENDIF
(  427)     ENDDO
(  428)     END SUBROUTINE
(  429) 
(  430)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  431) #ifdef _OPENACC
(  432)     USE OPENACC
(  433) #endif
(  434)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  435)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  436)     INTEGER (KIND=JPIM) :: ISIZE






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 10

(  437)     INTEGER :: J
(  438) 
(  439)         ISIZE = KIND (HST) * SIZE (HST (:, :, :))
(  440)         IF (KDIR == NH2D) THEN
(  441)           !$acc host_data use_device (DEV)
(  442) #ifdef _OPENACC
(  443)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :), HST (:, :, :), ISIZE)
(  444) #endif
(  445)           !$acc end host_data
(  446)         ELSEIF (KDIR == ND2H) THEN
(  447)           !$acc host_data use_device (DEV)
(  448) #ifdef _OPENACC
(  449)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :), DEV (:, :, :), ISIZE)
(  450) #endif
(  451)           !$acc end host_data
(  452)         ENDIF
(  453)     END SUBROUTINE
(  454) 
(  455)   END SUBROUTINE FIELD_3D_COPY
(  456) 
(  457)   FUNCTION FIELD_3D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
(  458)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  459)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  460)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1)
(  461)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  462) 
(  463)     IF (ASSOCIATED (SELF)) THEN
(  464)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
(  465)         CALL FIELD_3D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
(  466)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
(  467)       ENDIF
(  468)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%PTR (:,:,:)
(  469)       IF (IAND (MODE, NWR) /= 0) THEN
(  470)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
(  471)       ENDIF
(  472)     ELSE
(  473)       PTR => ZDUM
(  474)     ENDIF
(  475) 
(  476)   END FUNCTION FIELD_3D_GET_HOST_DATA_
(  477) 
(  478)   FUNCTION FIELD_3D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
(  479)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  480)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  481) 
(  482)     PTR => FIELD_3D_GET_HOST_DATA_ (SELF, NRD)
(  483) 
(  484)   END FUNCTION FIELD_3D_GET_HOST_DATA_RDONLY
(  485) 
(  486)   FUNCTION FIELD_3D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
(  487)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  488)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  489) 
(  490)     PTR => FIELD_3D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
(  491) 
(  492)   END FUNCTION FIELD_3D_GET_HOST_DATA_RDWR
(  493) 
(  494)   FUNCTION FIELD_3D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 11

(  495)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  496)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  497)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1)
(  498)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  499) 
(  500)     IF (ASSOCIATED (SELF)) THEN
(  501)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
(  502)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
(  503)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
(  504)           !$acc enter data create (SELF%DEVPTR)
(  505)         ENDIF
(  506)         CALL FIELD_3D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
(  507)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
(  508)       ENDIF
(  509)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%DEVPTR (:,:,:)
(  510)       IF (IAND (MODE, NWR) /= 0) THEN
(  511)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
(  512)       ENDIF
(  513)     ELSE
(  514)       PTR => ZDUM
(  515)     ENDIF
(  516) 
(  517)   END FUNCTION FIELD_3D_GET_DEVICE_DATA_
(  518) 
(  519)   FUNCTION FIELD_3D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
(  520)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  521)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  522) 
(  523)     PTR => FIELD_3D_GET_DEVICE_DATA_ (SELF, NRD)
(  524) 
(  525)   END FUNCTION FIELD_3D_GET_DEVICE_DATA_RDONLY
(  526) 
(  527)   FUNCTION FIELD_3D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
(  528)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  529)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  530) 
(  531)     PTR => FIELD_3D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
(  532) 
(  533)   END FUNCTION FIELD_3D_GET_DEVICE_DATA_RDWR
(  534) 
(  535) 
(  536)   INTEGER (KIND=JPIM) FUNCTION FIELD_4D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(  537)   REAL(KIND=JPRB), POINTER :: PTR (:,:,:,:)
(  538)   INTEGER*8 :: ISTRIDE (4)
(  539)   INTEGER (KIND=JPIM) :: J
(  540) 
(  541)   ISTRIDE (1) = KIND (PTR)
(  542)   DO J = 2, 4
(  543)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(  544)   ENDDO
(  545) 
(  546)   JDIM = 0
(  547)   IF (LOC (PTR (2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (1)) THEN
(  548)     RETURN
(  549)   ENDIF
(  550) 
(  551)   JDIM = 1
(  552) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 12

(  553)   IF (LOC (PTR (1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (2)) THEN
(  554)     RETURN
(  555)   ENDIF
(  556) 
(  557)   JDIM = 2
(  558) 
(  559)   IF (LOC (PTR (1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (3)) THEN
(  560)     RETURN
(  561)   ENDIF
(  562) 
(  563)   JDIM = 3
(  564) 
(  565)   IF (LOC (PTR (1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (4)) THEN
(  566)     RETURN
(  567)   ENDIF
(  568) 
(  569)   JDIM = 4
(  570) 
(  571)   END FUNCTION FIELD_4D_GET_LAST_CONTIGUOUS_DIMENSION
(  572) 
(  573)   SUBROUTINE FIELD_4D_COPY (HST, DEV, KDIR)
(  574)   REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  575)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  576)   INTEGER (KIND=JPIM) :: JDIM
(  577) 
(  578)   JDIM = FIELD_4D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  579) 
(  580)   SELECT CASE (JDIM)
(  581)     CASE (0)
(  582)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  583)     CASE (1)
(  584)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  585)     CASE (2)
(  586)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  587)     CASE (3)
(  588)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  589)     CASE (4)
(  590)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
(  591)   END SELECT
(  592) 
(  593)   CONTAINS
(  594) 
(  595)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  596) #ifdef _OPENACC
(  597)     USE OPENACC
(  598) #endif
(  599)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  600)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  601)     INTEGER (KIND=JPIM) :: ISIZE
(  602)     INTEGER :: J, J1, J2, J3, J4
(  603) 
(  604)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  605)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  606)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  607)           DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  608)             ISIZE = KIND (HST)
(  609)             IF (KDIR == NH2D) THEN
(  610)               !$acc host_data use_device (DEV)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 13

(  611) #ifdef _OPENACC
(  612)               CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4), HST (J1, J2, J3, J4), ISIZE)
(  613) #endif
(  614)               !$acc end host_data
(  615)             ELSEIF (KDIR == ND2H) THEN
(  616)               !$acc host_data use_device (DEV)
(  617) #ifdef _OPENACC
(  618)               CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4), DEV (J1, J2, J3, J4), ISIZE)
(  619) #endif
(  620)               !$acc end host_data
(  621)             ENDIF
(  622)           ENDDO
(  623)         ENDDO
(  624)       ENDDO
(  625)     ENDDO
(  626)     END SUBROUTINE
(  627) 
(  628)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  629) #ifdef _OPENACC
(  630)     USE OPENACC
(  631) #endif
(  632)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  633)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  634)     INTEGER (KIND=JPIM) :: ISIZE
(  635)     INTEGER :: J, J2, J3, J4
(  636) 
(  637)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  638)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  639)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  640)           ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4))
(  641)           IF (KDIR == NH2D) THEN
(  642)             !$acc host_data use_device (DEV)
(  643) #ifdef _OPENACC
(  644)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4), HST (:, J2, J3, J4), ISIZE)
(  645) #endif
(  646)             !$acc end host_data
(  647)           ELSEIF (KDIR == ND2H) THEN
(  648)             !$acc host_data use_device (DEV)
(  649) #ifdef _OPENACC
(  650)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4), DEV (:, J2, J3, J4), ISIZE)
(  651) #endif
(  652)             !$acc end host_data
(  653)           ENDIF
(  654)         ENDDO
(  655)       ENDDO
(  656)     ENDDO
(  657)     END SUBROUTINE
(  658) 
(  659)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  660) #ifdef _OPENACC
(  661)     USE OPENACC
(  662) #endif
(  663)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  664)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  665)     INTEGER (KIND=JPIM) :: ISIZE
(  666)     INTEGER :: J, J3, J4
(  667) 
(  668)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 14

(  669)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  670)         ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4))
(  671)         IF (KDIR == NH2D) THEN
(  672)           !$acc host_data use_device (DEV)
(  673) #ifdef _OPENACC
(  674)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4), HST (:, :, J3, J4), ISIZE)
(  675) #endif
(  676)           !$acc end host_data
(  677)         ELSEIF (KDIR == ND2H) THEN
(  678)           !$acc host_data use_device (DEV)
(  679) #ifdef _OPENACC
(  680)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4), DEV (:, :, J3, J4), ISIZE)
(  681) #endif
(  682)           !$acc end host_data
(  683)         ENDIF
(  684)       ENDDO
(  685)     ENDDO
(  686)     END SUBROUTINE
(  687) 
(  688)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  689) #ifdef _OPENACC
(  690)     USE OPENACC
(  691) #endif
(  692)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  693)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  694)     INTEGER (KIND=JPIM) :: ISIZE
(  695)     INTEGER :: J, J4
(  696) 
(  697)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  698)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4))
(  699)       IF (KDIR == NH2D) THEN
(  700)         !$acc host_data use_device (DEV)
(  701) #ifdef _OPENACC
(  702)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4), HST (:, :, :, J4), ISIZE)
(  703) #endif
(  704)         !$acc end host_data
(  705)       ELSEIF (KDIR == ND2H) THEN
(  706)         !$acc host_data use_device (DEV)
(  707) #ifdef _OPENACC
(  708)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4), DEV (:, :, :, J4), ISIZE)
(  709) #endif
(  710)         !$acc end host_data
(  711)       ENDIF
(  712)     ENDDO
(  713)     END SUBROUTINE
(  714) 
(  715)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
(  716) #ifdef _OPENACC
(  717)     USE OPENACC
(  718) #endif
(  719)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  720)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  721)     INTEGER (KIND=JPIM) :: ISIZE
(  722)     INTEGER :: J
(  723) 
(  724)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :))
(  725)         IF (KDIR == NH2D) THEN
(  726)           !$acc host_data use_device (DEV)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 15

(  727) #ifdef _OPENACC
(  728)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :), HST (:, :, :, :), ISIZE)
(  729) #endif
(  730)           !$acc end host_data
(  731)         ELSEIF (KDIR == ND2H) THEN
(  732)           !$acc host_data use_device (DEV)
(  733) #ifdef _OPENACC
(  734)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :), DEV (:, :, :, :), ISIZE)
(  735) #endif
(  736)           !$acc end host_data
(  737)         ENDIF
(  738)     END SUBROUTINE
(  739) 
(  740)   END SUBROUTINE FIELD_4D_COPY
(  741) 
(  742)   FUNCTION FIELD_4D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
(  743)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  744)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  745)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
(  746)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  747) 
(  748)     IF (ASSOCIATED (SELF)) THEN
(  749)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
(  750)         CALL FIELD_4D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
(  751)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
(  752)       ENDIF
(  753)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%PTR (:,:,:,:)
(  754)       IF (IAND (MODE, NWR) /= 0) THEN
(  755)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
(  756)       ENDIF
(  757)     ELSE
(  758)       PTR => ZDUM
(  759)     ENDIF
(  760) 
(  761)   END FUNCTION FIELD_4D_GET_HOST_DATA_
(  762) 
(  763)   FUNCTION FIELD_4D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
(  764)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  765)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  766) 
(  767)     PTR => FIELD_4D_GET_HOST_DATA_ (SELF, NRD)
(  768) 
(  769)   END FUNCTION FIELD_4D_GET_HOST_DATA_RDONLY
(  770) 
(  771)   FUNCTION FIELD_4D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
(  772)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  773)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  774) 
(  775)     PTR => FIELD_4D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
(  776) 
(  777)   END FUNCTION FIELD_4D_GET_HOST_DATA_RDWR
(  778) 
(  779)   FUNCTION FIELD_4D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
(  780)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  781)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  782)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
(  783)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  784) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 16

(  785)     IF (ASSOCIATED (SELF)) THEN
(  786)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
(  787)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
(  788)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
(  789)           !$acc enter data create (SELF%DEVPTR)
(  790)         ENDIF
(  791)         CALL FIELD_4D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
(  792)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
(  793)       ENDIF
(  794)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%DEVPTR (:,:,:,:)
(  795)       IF (IAND (MODE, NWR) /= 0) THEN
(  796)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
(  797)       ENDIF
(  798)     ELSE
(  799)       PTR => ZDUM
(  800)     ENDIF
(  801) 
(  802)   END FUNCTION FIELD_4D_GET_DEVICE_DATA_
(  803) 
(  804)   FUNCTION FIELD_4D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
(  805)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  806)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  807) 
(  808)     PTR => FIELD_4D_GET_DEVICE_DATA_ (SELF, NRD)
(  809) 
(  810)   END FUNCTION FIELD_4D_GET_DEVICE_DATA_RDONLY
(  811) 
(  812)   FUNCTION FIELD_4D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
(  813)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  814)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  815) 
(  816)     PTR => FIELD_4D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
(  817) 
(  818)   END FUNCTION FIELD_4D_GET_DEVICE_DATA_RDWR
(  819) 
(  820) 
(  821)   INTEGER (KIND=JPIM) FUNCTION FIELD_5D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(  822)   REAL(KIND=JPRB), POINTER :: PTR (:,:,:,:,:)
(  823)   INTEGER*8 :: ISTRIDE (5)
(  824)   INTEGER (KIND=JPIM) :: J
(  825) 
(  826)   ISTRIDE (1) = KIND (PTR)
(  827)   DO J = 2, 5
(  828)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(  829)   ENDDO
(  830) 
(  831)   JDIM = 0
(  832)   IF (LOC (PTR (2, 1, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (1)) THEN
(  833)     RETURN
(  834)   ENDIF
(  835) 
(  836)   JDIM = 1
(  837) 
(  838)   IF (LOC (PTR (1, 2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (2)) THEN
(  839)     RETURN
(  840)   ENDIF
(  841) 
(  842)   JDIM = 2






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 17

(  843) 
(  844)   IF (LOC (PTR (1, 1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (3)) THEN
(  845)     RETURN
(  846)   ENDIF
(  847) 
(  848)   JDIM = 3
(  849) 
(  850)   IF (LOC (PTR (1, 1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (4)) THEN
(  851)     RETURN
(  852)   ENDIF
(  853) 
(  854)   JDIM = 4
(  855) 
(  856)   IF (LOC (PTR (1, 1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (5)) THEN
(  857)     RETURN
(  858)   ENDIF
(  859) 
(  860)   JDIM = 5
(  861) 
(  862)   END FUNCTION FIELD_5D_GET_LAST_CONTIGUOUS_DIMENSION
(  863) 
(  864)   SUBROUTINE FIELD_5D_COPY (HST, DEV, KDIR)
(  865)   REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  866)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  867)   INTEGER (KIND=JPIM) :: JDIM
(  868) 
(  869)   JDIM = FIELD_5D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  870) 
(  871)   SELECT CASE (JDIM)
(  872)     CASE (0)
(  873)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  874)     CASE (1)
(  875)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  876)     CASE (2)
(  877)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  878)     CASE (3)
(  879)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  880)     CASE (4)
(  881)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
(  882)     CASE (5)
(  883)       CALL COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
(  884)   END SELECT
(  885) 
(  886)   CONTAINS
(  887) 
(  888)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  889) #ifdef _OPENACC
(  890)     USE OPENACC
(  891) #endif
(  892)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  893)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  894)     INTEGER (KIND=JPIM) :: ISIZE
(  895)     INTEGER :: J, J1, J2, J3, J4, J5
(  896) 
(  897)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  898)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  899)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  900)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 18

(  901)             DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  902)               ISIZE = KIND (HST)
(  903)               IF (KDIR == NH2D) THEN
(  904)                 !$acc host_data use_device (DEV)
(  905) #ifdef _OPENACC
(  906)                 CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4, J5), HST (J1, J2, J3, J4, J5), ISIZE)
(  907) #endif
(  908)                 !$acc end host_data
(  909)               ELSEIF (KDIR == ND2H) THEN
(  910)                 !$acc host_data use_device (DEV)
(  911) #ifdef _OPENACC
(  912)                 CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4, J5), DEV (J1, J2, J3, J4, J5), ISIZE)
(  913) #endif
(  914)                 !$acc end host_data
(  915)               ENDIF
(  916)             ENDDO
(  917)           ENDDO
(  918)         ENDDO
(  919)       ENDDO
(  920)     ENDDO
(  921)     END SUBROUTINE
(  922) 
(  923)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  924) #ifdef _OPENACC
(  925)     USE OPENACC
(  926) #endif
(  927)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  928)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  929)     INTEGER (KIND=JPIM) :: ISIZE
(  930)     INTEGER :: J, J2, J3, J4, J5
(  931) 
(  932)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  933)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  934)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  935)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  936)             ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4, J5))
(  937)             IF (KDIR == NH2D) THEN
(  938)               !$acc host_data use_device (DEV)
(  939) #ifdef _OPENACC
(  940)               CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4, J5), HST (:, J2, J3, J4, J5), ISIZE)
(  941) #endif
(  942)               !$acc end host_data
(  943)             ELSEIF (KDIR == ND2H) THEN
(  944)               !$acc host_data use_device (DEV)
(  945) #ifdef _OPENACC
(  946)               CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4, J5), DEV (:, J2, J3, J4, J5), ISIZE)
(  947) #endif
(  948)               !$acc end host_data
(  949)             ENDIF
(  950)           ENDDO
(  951)         ENDDO
(  952)       ENDDO
(  953)     ENDDO
(  954)     END SUBROUTINE
(  955) 
(  956)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  957) #ifdef _OPENACC
(  958)     USE OPENACC






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 19

(  959) #endif
(  960)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  961)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  962)     INTEGER (KIND=JPIM) :: ISIZE
(  963)     INTEGER :: J, J3, J4, J5
(  964) 
(  965)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  966)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  967)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  968)           ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4, J5))
(  969)           IF (KDIR == NH2D) THEN
(  970)             !$acc host_data use_device (DEV)
(  971) #ifdef _OPENACC
(  972)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4, J5), HST (:, :, J3, J4, J5), ISIZE)
(  973) #endif
(  974)             !$acc end host_data
(  975)           ELSEIF (KDIR == ND2H) THEN
(  976)             !$acc host_data use_device (DEV)
(  977) #ifdef _OPENACC
(  978)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4, J5), DEV (:, :, J3, J4, J5), ISIZE)
(  979) #endif
(  980)             !$acc end host_data
(  981)           ENDIF
(  982)         ENDDO
(  983)       ENDDO
(  984)     ENDDO
(  985)     END SUBROUTINE
(  986) 
(  987)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  988) #ifdef _OPENACC
(  989)     USE OPENACC
(  990) #endif
(  991)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  992)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  993)     INTEGER (KIND=JPIM) :: ISIZE
(  994)     INTEGER :: J, J4, J5
(  995) 
(  996)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  997)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  998)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4, J5))
(  999)         IF (KDIR == NH2D) THEN
( 1000)           !$acc host_data use_device (DEV)
( 1001) #ifdef _OPENACC
( 1002)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4, J5), HST (:, :, :, J4, J5), ISIZE)
( 1003) #endif
( 1004)           !$acc end host_data
( 1005)         ELSEIF (KDIR == ND2H) THEN
( 1006)           !$acc host_data use_device (DEV)
( 1007) #ifdef _OPENACC
( 1008)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4, J5), DEV (:, :, :, J4, J5), ISIZE)
( 1009) #endif
( 1010)           !$acc end host_data
( 1011)         ENDIF
( 1012)       ENDDO
( 1013)     ENDDO
( 1014)     END SUBROUTINE
( 1015) 
( 1016)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 20

( 1017) #ifdef _OPENACC
( 1018)     USE OPENACC
( 1019) #endif
( 1020)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1021)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1022)     INTEGER (KIND=JPIM) :: ISIZE
( 1023)     INTEGER :: J, J5
( 1024) 
( 1025)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 1026)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, J5))
( 1027)       IF (KDIR == NH2D) THEN
( 1028)         !$acc host_data use_device (DEV)
( 1029) #ifdef _OPENACC
( 1030)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, J5), HST (:, :, :, :, J5), ISIZE)
( 1031) #endif
( 1032)         !$acc end host_data
( 1033)       ELSEIF (KDIR == ND2H) THEN
( 1034)         !$acc host_data use_device (DEV)
( 1035) #ifdef _OPENACC
( 1036)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, J5), DEV (:, :, :, :, J5), ISIZE)
( 1037) #endif
( 1038)         !$acc end host_data
( 1039)       ENDIF
( 1040)     ENDDO
( 1041)     END SUBROUTINE
( 1042) 
( 1043)     SUBROUTINE COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 1044) #ifdef _OPENACC
( 1045)     USE OPENACC
( 1046) #endif
( 1047)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1048)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1049)     INTEGER (KIND=JPIM) :: ISIZE
( 1050)     INTEGER :: J
( 1051) 
( 1052)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, :))
( 1053)         IF (KDIR == NH2D) THEN
( 1054)           !$acc host_data use_device (DEV)
( 1055) #ifdef _OPENACC
( 1056)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, :), HST (:, :, :, :, :), ISIZE)
( 1057) #endif
( 1058)           !$acc end host_data
( 1059)         ELSEIF (KDIR == ND2H) THEN
( 1060)           !$acc host_data use_device (DEV)
( 1061) #ifdef _OPENACC
( 1062)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, :), DEV (:, :, :, :, :), ISIZE)
( 1063) #endif
( 1064)           !$acc end host_data
( 1065)         ENDIF
( 1066)     END SUBROUTINE
( 1067) 
( 1068)   END SUBROUTINE FIELD_5D_COPY
( 1069) 
( 1070)   FUNCTION FIELD_5D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1071)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1072)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1073)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 1074)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 21

( 1075) 
( 1076)     IF (ASSOCIATED (SELF)) THEN
( 1077)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1078)         CALL FIELD_5D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1079)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1080)       ENDIF
( 1081)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%PTR (:,:,:,:,:)
( 1082)       IF (IAND (MODE, NWR) /= 0) THEN
( 1083)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1084)       ENDIF
( 1085)     ELSE
( 1086)       PTR => ZDUM
( 1087)     ENDIF
( 1088) 
( 1089)   END FUNCTION FIELD_5D_GET_HOST_DATA_
( 1090) 
( 1091)   FUNCTION FIELD_5D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1092)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1093)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1094) 
( 1095)     PTR => FIELD_5D_GET_HOST_DATA_ (SELF, NRD)
( 1096) 
( 1097)   END FUNCTION FIELD_5D_GET_HOST_DATA_RDONLY
( 1098) 
( 1099)   FUNCTION FIELD_5D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1100)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1101)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1102) 
( 1103)     PTR => FIELD_5D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1104) 
( 1105)   END FUNCTION FIELD_5D_GET_HOST_DATA_RDWR
( 1106) 
( 1107)   FUNCTION FIELD_5D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1108)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1109)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1110)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 1111)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1112) 
( 1113)     IF (ASSOCIATED (SELF)) THEN
( 1114)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1115)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1116)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1117)           !$acc enter data create (SELF%DEVPTR)
( 1118)         ENDIF
( 1119)         CALL FIELD_5D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1120)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1121)       ENDIF
( 1122)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%DEVPTR (:,:,:,:
( 1123)       IF (IAND (MODE, NWR) /= 0) THEN
( 1124)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1125)       ENDIF
( 1126)     ELSE
( 1127)       PTR => ZDUM
( 1128)     ENDIF
( 1129) 
( 1130)   END FUNCTION FIELD_5D_GET_DEVICE_DATA_
( 1131) 
( 1132)   FUNCTION FIELD_5D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 22

( 1133)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1134)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1135) 
( 1136)     PTR => FIELD_5D_GET_DEVICE_DATA_ (SELF, NRD)
( 1137) 
( 1138)   END FUNCTION FIELD_5D_GET_DEVICE_DATA_RDONLY
( 1139) 
( 1140)   FUNCTION FIELD_5D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1141)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1142)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1143) 
( 1144)     PTR => FIELD_5D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1145) 
( 1146)   END FUNCTION FIELD_5D_GET_DEVICE_DATA_RDWR
( 1147) 
( 1148) 
( 1149)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT2D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1150)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:)
( 1151)   INTEGER*8 :: ISTRIDE (2)
( 1152)   INTEGER (KIND=JPIM) :: J
( 1153) 
( 1154)   ISTRIDE (1) = KIND (PTR)
( 1155)   DO J = 2, 2
( 1156)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1157)   ENDDO
( 1158) 
( 1159)   JDIM = 0
( 1160)   IF (LOC (PTR (2, 1)) - LOC (PTR (1, 1)) /= ISTRIDE (1)) THEN
( 1161)     RETURN
( 1162)   ENDIF
( 1163) 
( 1164)   JDIM = 1
( 1165) 
( 1166)   IF (LOC (PTR (1, 2)) - LOC (PTR (1, 1)) /= ISTRIDE (2)) THEN
( 1167)     RETURN
( 1168)   ENDIF
( 1169) 
( 1170)   JDIM = 2
( 1171) 
( 1172)   END FUNCTION FIELD_INT2D_GET_LAST_CONTIGUOUS_DIMENSION
( 1173) 
( 1174)   SUBROUTINE FIELD_INT2D_COPY (HST, DEV, KDIR)
( 1175)   INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1176)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1177)   INTEGER (KIND=JPIM) :: JDIM
( 1178) 
( 1179)   JDIM = FIELD_INT2D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1180) 
( 1181)   SELECT CASE (JDIM)
( 1182)     CASE (0)
( 1183)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1184)     CASE (1)
( 1185)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1186)     CASE (2)
( 1187)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1188)   END SELECT
( 1189) 
( 1190)   CONTAINS






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 23

( 1191) 
( 1192)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1193) #ifdef _OPENACC
( 1194)     USE OPENACC
( 1195) #endif
( 1196)     INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1197)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1198)     INTEGER (KIND=JPIM) :: ISIZE
( 1199)     INTEGER :: J, J1, J2
( 1200) 
( 1201)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1202)       DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1203)         ISIZE = KIND (HST)
( 1204)         IF (KDIR == NH2D) THEN
( 1205)           !$acc host_data use_device (DEV)
( 1206) #ifdef _OPENACC
( 1207)           CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2), HST (J1, J2), ISIZE)
( 1208) #endif
( 1209)           !$acc end host_data
( 1210)         ELSEIF (KDIR == ND2H) THEN
( 1211)           !$acc host_data use_device (DEV)
( 1212) #ifdef _OPENACC
( 1213)           CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2), DEV (J1, J2), ISIZE)
( 1214) #endif
( 1215)           !$acc end host_data
( 1216)         ENDIF
( 1217)       ENDDO
( 1218)     ENDDO
( 1219)     END SUBROUTINE
( 1220) 
( 1221)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1222) #ifdef _OPENACC
( 1223)     USE OPENACC
( 1224) #endif
( 1225)     INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1226)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1227)     INTEGER (KIND=JPIM) :: ISIZE
( 1228)     INTEGER :: J, J2
( 1229) 
( 1230)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1231)       ISIZE = KIND (HST) * SIZE (HST (:, J2))
( 1232)       IF (KDIR == NH2D) THEN
( 1233)         !$acc host_data use_device (DEV)
( 1234) #ifdef _OPENACC
( 1235)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2), HST (:, J2), ISIZE)
( 1236) #endif
( 1237)         !$acc end host_data
( 1238)       ELSEIF (KDIR == ND2H) THEN
( 1239)         !$acc host_data use_device (DEV)
( 1240) #ifdef _OPENACC
( 1241)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2), DEV (:, J2), ISIZE)
( 1242) #endif
( 1243)         !$acc end host_data
( 1244)       ENDIF
( 1245)     ENDDO
( 1246)     END SUBROUTINE
( 1247) 
( 1248)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 24

( 1249) #ifdef _OPENACC
( 1250)     USE OPENACC
( 1251) #endif
( 1252)     INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1253)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1254)     INTEGER (KIND=JPIM) :: ISIZE
( 1255)     INTEGER :: J
( 1256) 
( 1257)         ISIZE = KIND (HST) * SIZE (HST (:, :))
( 1258)         IF (KDIR == NH2D) THEN
( 1259)           !$acc host_data use_device (DEV)
( 1260) #ifdef _OPENACC
( 1261)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :), HST (:, :), ISIZE)
( 1262) #endif
( 1263)           !$acc end host_data
( 1264)         ELSEIF (KDIR == ND2H) THEN
( 1265)           !$acc host_data use_device (DEV)
( 1266) #ifdef _OPENACC
( 1267)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :), DEV (:, :), ISIZE)
( 1268) #endif
( 1269)           !$acc end host_data
( 1270)         ENDIF
( 1271)     END SUBROUTINE
( 1272) 
( 1273)   END SUBROUTINE FIELD_INT2D_COPY
( 1274) 
( 1275)   FUNCTION FIELD_INT2D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1276)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1277)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1278)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1)
( 1279)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1280) 
( 1281)     IF (ASSOCIATED (SELF)) THEN
( 1282)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1283)         CALL FIELD_INT2D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1284)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1285)       ENDIF
( 1286)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%PTR (:,:)
( 1287)       IF (IAND (MODE, NWR) /= 0) THEN
( 1288)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1289)       ENDIF
( 1290)     ELSE
( 1291)       PTR => ZDUM
( 1292)     ENDIF
( 1293) 
( 1294)   END FUNCTION FIELD_INT2D_GET_HOST_DATA_
( 1295) 
( 1296)   FUNCTION FIELD_INT2D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1297)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1298)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1299) 
( 1300)     PTR => FIELD_INT2D_GET_HOST_DATA_ (SELF, NRD)
( 1301) 
( 1302)   END FUNCTION FIELD_INT2D_GET_HOST_DATA_RDONLY
( 1303) 
( 1304)   FUNCTION FIELD_INT2D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1305)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1306)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 25

( 1307) 
( 1308)     PTR => FIELD_INT2D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1309) 
( 1310)   END FUNCTION FIELD_INT2D_GET_HOST_DATA_RDWR
( 1311) 
( 1312)   FUNCTION FIELD_INT2D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1313)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1314)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1315)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1)
( 1316)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1317) 
( 1318)     IF (ASSOCIATED (SELF)) THEN
( 1319)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1320)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1321)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1322)           !$acc enter data create (SELF%DEVPTR)
( 1323)         ENDIF
( 1324)         CALL FIELD_INT2D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1325)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1326)       ENDIF
( 1327)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%DEVPTR (:,:)
( 1328)       IF (IAND (MODE, NWR) /= 0) THEN
( 1329)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1330)       ENDIF
( 1331)     ELSE
( 1332)       PTR => ZDUM
( 1333)     ENDIF
( 1334) 
( 1335)   END FUNCTION FIELD_INT2D_GET_DEVICE_DATA_
( 1336) 
( 1337)   FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1338)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1339)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1340) 
( 1341)     PTR => FIELD_INT2D_GET_DEVICE_DATA_ (SELF, NRD)
( 1342) 
( 1343)   END FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDONLY
( 1344) 
( 1345)   FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1346)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1347)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1348) 
( 1349)     PTR => FIELD_INT2D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1350) 
( 1351)   END FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDWR
( 1352) 
( 1353) 
( 1354)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT3D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1355)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:,:)
( 1356)   INTEGER*8 :: ISTRIDE (3)
( 1357)   INTEGER (KIND=JPIM) :: J
( 1358) 
( 1359)   ISTRIDE (1) = KIND (PTR)
( 1360)   DO J = 2, 3
( 1361)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1362)   ENDDO
( 1363) 
( 1364)   JDIM = 0






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 26

( 1365)   IF (LOC (PTR (2, 1, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (1)) THEN
( 1366)     RETURN
( 1367)   ENDIF
( 1368) 
( 1369)   JDIM = 1
( 1370) 
( 1371)   IF (LOC (PTR (1, 2, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (2)) THEN
( 1372)     RETURN
( 1373)   ENDIF
( 1374) 
( 1375)   JDIM = 2
( 1376) 
( 1377)   IF (LOC (PTR (1, 1, 2)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (3)) THEN
( 1378)     RETURN
( 1379)   ENDIF
( 1380) 
( 1381)   JDIM = 3
( 1382) 
( 1383)   END FUNCTION FIELD_INT3D_GET_LAST_CONTIGUOUS_DIMENSION
( 1384) 
( 1385)   SUBROUTINE FIELD_INT3D_COPY (HST, DEV, KDIR)
( 1386)   INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1387)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1388)   INTEGER (KIND=JPIM) :: JDIM
( 1389) 
( 1390)   JDIM = FIELD_INT3D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1391) 
( 1392)   SELECT CASE (JDIM)
( 1393)     CASE (0)
( 1394)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1395)     CASE (1)
( 1396)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1397)     CASE (2)
( 1398)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1399)     CASE (3)
( 1400)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1401)   END SELECT
( 1402) 
( 1403)   CONTAINS
( 1404) 
( 1405)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1406) #ifdef _OPENACC
( 1407)     USE OPENACC
( 1408) #endif
( 1409)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1410)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1411)     INTEGER (KIND=JPIM) :: ISIZE
( 1412)     INTEGER :: J, J1, J2, J3
( 1413) 
( 1414)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1415)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1416)         DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1417)           ISIZE = KIND (HST)
( 1418)           IF (KDIR == NH2D) THEN
( 1419)             !$acc host_data use_device (DEV)
( 1420) #ifdef _OPENACC
( 1421)             CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3), HST (J1, J2, J3), ISIZE)
( 1422) #endif






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 27

( 1423)             !$acc end host_data
( 1424)           ELSEIF (KDIR == ND2H) THEN
( 1425)             !$acc host_data use_device (DEV)
( 1426) #ifdef _OPENACC
( 1427)             CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3), DEV (J1, J2, J3), ISIZE)
( 1428) #endif
( 1429)             !$acc end host_data
( 1430)           ENDIF
( 1431)         ENDDO
( 1432)       ENDDO
( 1433)     ENDDO
( 1434)     END SUBROUTINE
( 1435) 
( 1436)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1437) #ifdef _OPENACC
( 1438)     USE OPENACC
( 1439) #endif
( 1440)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1441)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1442)     INTEGER (KIND=JPIM) :: ISIZE
( 1443)     INTEGER :: J, J2, J3
( 1444) 
( 1445)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1446)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1447)         ISIZE = KIND (HST) * SIZE (HST (:, J2, J3))
( 1448)         IF (KDIR == NH2D) THEN
( 1449)           !$acc host_data use_device (DEV)
( 1450) #ifdef _OPENACC
( 1451)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3), HST (:, J2, J3), ISIZE)
( 1452) #endif
( 1453)           !$acc end host_data
( 1454)         ELSEIF (KDIR == ND2H) THEN
( 1455)           !$acc host_data use_device (DEV)
( 1456) #ifdef _OPENACC
( 1457)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3), DEV (:, J2, J3), ISIZE)
( 1458) #endif
( 1459)           !$acc end host_data
( 1460)         ENDIF
( 1461)       ENDDO
( 1462)     ENDDO
( 1463)     END SUBROUTINE
( 1464) 
( 1465)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1466) #ifdef _OPENACC
( 1467)     USE OPENACC
( 1468) #endif
( 1469)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1470)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1471)     INTEGER (KIND=JPIM) :: ISIZE
( 1472)     INTEGER :: J, J3
( 1473) 
( 1474)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1475)       ISIZE = KIND (HST) * SIZE (HST (:, :, J3))
( 1476)       IF (KDIR == NH2D) THEN
( 1477)         !$acc host_data use_device (DEV)
( 1478) #ifdef _OPENACC
( 1479)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3), HST (:, :, J3), ISIZE)
( 1480) #endif






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 28

( 1481)         !$acc end host_data
( 1482)       ELSEIF (KDIR == ND2H) THEN
( 1483)         !$acc host_data use_device (DEV)
( 1484) #ifdef _OPENACC
( 1485)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3), DEV (:, :, J3), ISIZE)
( 1486) #endif
( 1487)         !$acc end host_data
( 1488)       ENDIF
( 1489)     ENDDO
( 1490)     END SUBROUTINE
( 1491) 
( 1492)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1493) #ifdef _OPENACC
( 1494)     USE OPENACC
( 1495) #endif
( 1496)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1497)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1498)     INTEGER (KIND=JPIM) :: ISIZE
( 1499)     INTEGER :: J
( 1500) 
( 1501)         ISIZE = KIND (HST) * SIZE (HST (:, :, :))
( 1502)         IF (KDIR == NH2D) THEN
( 1503)           !$acc host_data use_device (DEV)
( 1504) #ifdef _OPENACC
( 1505)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :), HST (:, :, :), ISIZE)
( 1506) #endif
( 1507)           !$acc end host_data
( 1508)         ELSEIF (KDIR == ND2H) THEN
( 1509)           !$acc host_data use_device (DEV)
( 1510) #ifdef _OPENACC
( 1511)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :), DEV (:, :, :), ISIZE)
( 1512) #endif
( 1513)           !$acc end host_data
( 1514)         ENDIF
( 1515)     END SUBROUTINE
( 1516) 
( 1517)   END SUBROUTINE FIELD_INT3D_COPY
( 1518) 
( 1519)   FUNCTION FIELD_INT3D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1520)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1521)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1522)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1)
( 1523)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1524) 
( 1525)     IF (ASSOCIATED (SELF)) THEN
( 1526)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1527)         CALL FIELD_INT3D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1528)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1529)       ENDIF
( 1530)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%PTR (:,:,:)
( 1531)       IF (IAND (MODE, NWR) /= 0) THEN
( 1532)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1533)       ENDIF
( 1534)     ELSE
( 1535)       PTR => ZDUM
( 1536)     ENDIF
( 1537) 
( 1538)   END FUNCTION FIELD_INT3D_GET_HOST_DATA_






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 29

( 1539) 
( 1540)   FUNCTION FIELD_INT3D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1541)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1542)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1543) 
( 1544)     PTR => FIELD_INT3D_GET_HOST_DATA_ (SELF, NRD)
( 1545) 
( 1546)   END FUNCTION FIELD_INT3D_GET_HOST_DATA_RDONLY
( 1547) 
( 1548)   FUNCTION FIELD_INT3D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1549)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1550)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1551) 
( 1552)     PTR => FIELD_INT3D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1553) 
( 1554)   END FUNCTION FIELD_INT3D_GET_HOST_DATA_RDWR
( 1555) 
( 1556)   FUNCTION FIELD_INT3D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1557)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1558)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1559)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1)
( 1560)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1561) 
( 1562)     IF (ASSOCIATED (SELF)) THEN
( 1563)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1564)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1565)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1566)           !$acc enter data create (SELF%DEVPTR)
( 1567)         ENDIF
( 1568)         CALL FIELD_INT3D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1569)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1570)       ENDIF
( 1571)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%DEVPTR (:,:,:)
( 1572)       IF (IAND (MODE, NWR) /= 0) THEN
( 1573)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1574)       ENDIF
( 1575)     ELSE
( 1576)       PTR => ZDUM
( 1577)     ENDIF
( 1578) 
( 1579)   END FUNCTION FIELD_INT3D_GET_DEVICE_DATA_
( 1580) 
( 1581)   FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1582)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1583)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1584) 
( 1585)     PTR => FIELD_INT3D_GET_DEVICE_DATA_ (SELF, NRD)
( 1586) 
( 1587)   END FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDONLY
( 1588) 
( 1589)   FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1590)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1591)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1592) 
( 1593)     PTR => FIELD_INT3D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1594) 
( 1595)   END FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDWR
( 1596) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 30

( 1597) 
( 1598)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT4D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1599)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:,:,:)
( 1600)   INTEGER*8 :: ISTRIDE (4)
( 1601)   INTEGER (KIND=JPIM) :: J
( 1602) 
( 1603)   ISTRIDE (1) = KIND (PTR)
( 1604)   DO J = 2, 4
( 1605)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1606)   ENDDO
( 1607) 
( 1608)   JDIM = 0
( 1609)   IF (LOC (PTR (2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 1610)     RETURN
( 1611)   ENDIF
( 1612) 
( 1613)   JDIM = 1
( 1614) 
( 1615)   IF (LOC (PTR (1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 1616)     RETURN
( 1617)   ENDIF
( 1618) 
( 1619)   JDIM = 2
( 1620) 
( 1621)   IF (LOC (PTR (1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 1622)     RETURN
( 1623)   ENDIF
( 1624) 
( 1625)   JDIM = 3
( 1626) 
( 1627)   IF (LOC (PTR (1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 1628)     RETURN
( 1629)   ENDIF
( 1630) 
( 1631)   JDIM = 4
( 1632) 
( 1633)   END FUNCTION FIELD_INT4D_GET_LAST_CONTIGUOUS_DIMENSION
( 1634) 
( 1635)   SUBROUTINE FIELD_INT4D_COPY (HST, DEV, KDIR)
( 1636)   INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1637)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1638)   INTEGER (KIND=JPIM) :: JDIM
( 1639) 
( 1640)   JDIM = FIELD_INT4D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1641) 
( 1642)   SELECT CASE (JDIM)
( 1643)     CASE (0)
( 1644)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1645)     CASE (1)
( 1646)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1647)     CASE (2)
( 1648)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1649)     CASE (3)
( 1650)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1651)     CASE (4)
( 1652)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1653)   END SELECT
( 1654) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 31

( 1655)   CONTAINS
( 1656) 
( 1657)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1658) #ifdef _OPENACC
( 1659)     USE OPENACC
( 1660) #endif
( 1661)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1662)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1663)     INTEGER (KIND=JPIM) :: ISIZE
( 1664)     INTEGER :: J, J1, J2, J3, J4
( 1665) 
( 1666)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1667)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1668)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1669)           DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1670)             ISIZE = KIND (HST)
( 1671)             IF (KDIR == NH2D) THEN
( 1672)               !$acc host_data use_device (DEV)
( 1673) #ifdef _OPENACC
( 1674)               CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4), HST (J1, J2, J3, J4), ISIZE)
( 1675) #endif
( 1676)               !$acc end host_data
( 1677)             ELSEIF (KDIR == ND2H) THEN
( 1678)               !$acc host_data use_device (DEV)
( 1679) #ifdef _OPENACC
( 1680)               CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4), DEV (J1, J2, J3, J4), ISIZE)
( 1681) #endif
( 1682)               !$acc end host_data
( 1683)             ENDIF
( 1684)           ENDDO
( 1685)         ENDDO
( 1686)       ENDDO
( 1687)     ENDDO
( 1688)     END SUBROUTINE
( 1689) 
( 1690)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1691) #ifdef _OPENACC
( 1692)     USE OPENACC
( 1693) #endif
( 1694)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1695)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1696)     INTEGER (KIND=JPIM) :: ISIZE
( 1697)     INTEGER :: J, J2, J3, J4
( 1698) 
( 1699)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1700)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1701)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1702)           ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4))
( 1703)           IF (KDIR == NH2D) THEN
( 1704)             !$acc host_data use_device (DEV)
( 1705) #ifdef _OPENACC
( 1706)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4), HST (:, J2, J3, J4), ISIZE)
( 1707) #endif
( 1708)             !$acc end host_data
( 1709)           ELSEIF (KDIR == ND2H) THEN
( 1710)             !$acc host_data use_device (DEV)
( 1711) #ifdef _OPENACC
( 1712)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4), DEV (:, J2, J3, J4), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 32

( 1713) #endif
( 1714)             !$acc end host_data
( 1715)           ENDIF
( 1716)         ENDDO
( 1717)       ENDDO
( 1718)     ENDDO
( 1719)     END SUBROUTINE
( 1720) 
( 1721)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1722) #ifdef _OPENACC
( 1723)     USE OPENACC
( 1724) #endif
( 1725)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1726)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1727)     INTEGER (KIND=JPIM) :: ISIZE
( 1728)     INTEGER :: J, J3, J4
( 1729) 
( 1730)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1731)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1732)         ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4))
( 1733)         IF (KDIR == NH2D) THEN
( 1734)           !$acc host_data use_device (DEV)
( 1735) #ifdef _OPENACC
( 1736)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4), HST (:, :, J3, J4), ISIZE)
( 1737) #endif
( 1738)           !$acc end host_data
( 1739)         ELSEIF (KDIR == ND2H) THEN
( 1740)           !$acc host_data use_device (DEV)
( 1741) #ifdef _OPENACC
( 1742)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4), DEV (:, :, J3, J4), ISIZE)
( 1743) #endif
( 1744)           !$acc end host_data
( 1745)         ENDIF
( 1746)       ENDDO
( 1747)     ENDDO
( 1748)     END SUBROUTINE
( 1749) 
( 1750)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1751) #ifdef _OPENACC
( 1752)     USE OPENACC
( 1753) #endif
( 1754)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1755)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1756)     INTEGER (KIND=JPIM) :: ISIZE
( 1757)     INTEGER :: J, J4
( 1758) 
( 1759)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1760)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4))
( 1761)       IF (KDIR == NH2D) THEN
( 1762)         !$acc host_data use_device (DEV)
( 1763) #ifdef _OPENACC
( 1764)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4), HST (:, :, :, J4), ISIZE)
( 1765) #endif
( 1766)         !$acc end host_data
( 1767)       ELSEIF (KDIR == ND2H) THEN
( 1768)         !$acc host_data use_device (DEV)
( 1769) #ifdef _OPENACC
( 1770)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4), DEV (:, :, :, J4), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 33

( 1771) #endif
( 1772)         !$acc end host_data
( 1773)       ENDIF
( 1774)     ENDDO
( 1775)     END SUBROUTINE
( 1776) 
( 1777)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1778) #ifdef _OPENACC
( 1779)     USE OPENACC
( 1780) #endif
( 1781)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1782)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1783)     INTEGER (KIND=JPIM) :: ISIZE
( 1784)     INTEGER :: J
( 1785) 
( 1786)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :))
( 1787)         IF (KDIR == NH2D) THEN
( 1788)           !$acc host_data use_device (DEV)
( 1789) #ifdef _OPENACC
( 1790)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :), HST (:, :, :, :), ISIZE)
( 1791) #endif
( 1792)           !$acc end host_data
( 1793)         ELSEIF (KDIR == ND2H) THEN
( 1794)           !$acc host_data use_device (DEV)
( 1795) #ifdef _OPENACC
( 1796)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :), DEV (:, :, :, :), ISIZE)
( 1797) #endif
( 1798)           !$acc end host_data
( 1799)         ENDIF
( 1800)     END SUBROUTINE
( 1801) 
( 1802)   END SUBROUTINE FIELD_INT4D_COPY
( 1803) 
( 1804)   FUNCTION FIELD_INT4D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1805)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1806)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1807)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 1808)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1809) 
( 1810)     IF (ASSOCIATED (SELF)) THEN
( 1811)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1812)         CALL FIELD_INT4D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1813)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1814)       ENDIF
( 1815)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%PTR (:,:,:,:)
( 1816)       IF (IAND (MODE, NWR) /= 0) THEN
( 1817)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1818)       ENDIF
( 1819)     ELSE
( 1820)       PTR => ZDUM
( 1821)     ENDIF
( 1822) 
( 1823)   END FUNCTION FIELD_INT4D_GET_HOST_DATA_
( 1824) 
( 1825)   FUNCTION FIELD_INT4D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1826)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1827)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1828) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 34

( 1829)     PTR => FIELD_INT4D_GET_HOST_DATA_ (SELF, NRD)
( 1830) 
( 1831)   END FUNCTION FIELD_INT4D_GET_HOST_DATA_RDONLY
( 1832) 
( 1833)   FUNCTION FIELD_INT4D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1834)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1835)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1836) 
( 1837)     PTR => FIELD_INT4D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1838) 
( 1839)   END FUNCTION FIELD_INT4D_GET_HOST_DATA_RDWR
( 1840) 
( 1841)   FUNCTION FIELD_INT4D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1842)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1843)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1844)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 1845)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1846) 
( 1847)     IF (ASSOCIATED (SELF)) THEN
( 1848)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1849)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1850)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1851)           !$acc enter data create (SELF%DEVPTR)
( 1852)         ENDIF
( 1853)         CALL FIELD_INT4D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1854)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1855)       ENDIF
( 1856)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%DEVPTR (:,:,:,:)
( 1857)       IF (IAND (MODE, NWR) /= 0) THEN
( 1858)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1859)       ENDIF
( 1860)     ELSE
( 1861)       PTR => ZDUM
( 1862)     ENDIF
( 1863) 
( 1864)   END FUNCTION FIELD_INT4D_GET_DEVICE_DATA_
( 1865) 
( 1866)   FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1867)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1868)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1869) 
( 1870)     PTR => FIELD_INT4D_GET_DEVICE_DATA_ (SELF, NRD)
( 1871) 
( 1872)   END FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDONLY
( 1873) 
( 1874)   FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1875)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1876)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1877) 
( 1878)     PTR => FIELD_INT4D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1879) 
( 1880)   END FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDWR
( 1881) 
( 1882) 
( 1883)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT5D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1884)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:,:,:,:)
( 1885)   INTEGER*8 :: ISTRIDE (5)
( 1886)   INTEGER (KIND=JPIM) :: J






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 35

( 1887) 
( 1888)   ISTRIDE (1) = KIND (PTR)
( 1889)   DO J = 2, 5
( 1890)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1891)   ENDDO
( 1892) 
( 1893)   JDIM = 0
( 1894)   IF (LOC (PTR (2, 1, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 1895)     RETURN
( 1896)   ENDIF
( 1897) 
( 1898)   JDIM = 1
( 1899) 
( 1900)   IF (LOC (PTR (1, 2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 1901)     RETURN
( 1902)   ENDIF
( 1903) 
( 1904)   JDIM = 2
( 1905) 
( 1906)   IF (LOC (PTR (1, 1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 1907)     RETURN
( 1908)   ENDIF
( 1909) 
( 1910)   JDIM = 3
( 1911) 
( 1912)   IF (LOC (PTR (1, 1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 1913)     RETURN
( 1914)   ENDIF
( 1915) 
( 1916)   JDIM = 4
( 1917) 
( 1918)   IF (LOC (PTR (1, 1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (5)) THEN
( 1919)     RETURN
( 1920)   ENDIF
( 1921) 
( 1922)   JDIM = 5
( 1923) 
( 1924)   END FUNCTION FIELD_INT5D_GET_LAST_CONTIGUOUS_DIMENSION
( 1925) 
( 1926)   SUBROUTINE FIELD_INT5D_COPY (HST, DEV, KDIR)
( 1927)   INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1928)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1929)   INTEGER (KIND=JPIM) :: JDIM
( 1930) 
( 1931)   JDIM = FIELD_INT5D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1932) 
( 1933)   SELECT CASE (JDIM)
( 1934)     CASE (0)
( 1935)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1936)     CASE (1)
( 1937)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1938)     CASE (2)
( 1939)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1940)     CASE (3)
( 1941)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1942)     CASE (4)
( 1943)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1944)     CASE (5)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 36

( 1945)       CALL COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 1946)   END SELECT
( 1947) 
( 1948)   CONTAINS
( 1949) 
( 1950)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1951) #ifdef _OPENACC
( 1952)     USE OPENACC
( 1953) #endif
( 1954)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1955)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1956)     INTEGER (KIND=JPIM) :: ISIZE
( 1957)     INTEGER :: J, J1, J2, J3, J4, J5
( 1958) 
( 1959)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 1960)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1961)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1962)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1963)             DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1964)               ISIZE = KIND (HST)
( 1965)               IF (KDIR == NH2D) THEN
( 1966)                 !$acc host_data use_device (DEV)
( 1967) #ifdef _OPENACC
( 1968)                 CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4, J5), HST (J1, J2, J3, J4, J5), ISIZE)
( 1969) #endif
( 1970)                 !$acc end host_data
( 1971)               ELSEIF (KDIR == ND2H) THEN
( 1972)                 !$acc host_data use_device (DEV)
( 1973) #ifdef _OPENACC
( 1974)                 CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4, J5), DEV (J1, J2, J3, J4, J5), ISIZE)
( 1975) #endif
( 1976)                 !$acc end host_data
( 1977)               ENDIF
( 1978)             ENDDO
( 1979)           ENDDO
( 1980)         ENDDO
( 1981)       ENDDO
( 1982)     ENDDO
( 1983)     END SUBROUTINE
( 1984) 
( 1985)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1986) #ifdef _OPENACC
( 1987)     USE OPENACC
( 1988) #endif
( 1989)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1990)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1991)     INTEGER (KIND=JPIM) :: ISIZE
( 1992)     INTEGER :: J, J2, J3, J4, J5
( 1993) 
( 1994)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 1995)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1996)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1997)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1998)             ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4, J5))
( 1999)             IF (KDIR == NH2D) THEN
( 2000)               !$acc host_data use_device (DEV)
( 2001) #ifdef _OPENACC
( 2002)               CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4, J5), HST (:, J2, J3, J4, J5), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 37

( 2003) #endif
( 2004)               !$acc end host_data
( 2005)             ELSEIF (KDIR == ND2H) THEN
( 2006)               !$acc host_data use_device (DEV)
( 2007) #ifdef _OPENACC
( 2008)               CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4, J5), DEV (:, J2, J3, J4, J5), ISIZE)
( 2009) #endif
( 2010)               !$acc end host_data
( 2011)             ENDIF
( 2012)           ENDDO
( 2013)         ENDDO
( 2014)       ENDDO
( 2015)     ENDDO
( 2016)     END SUBROUTINE
( 2017) 
( 2018)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2019) #ifdef _OPENACC
( 2020)     USE OPENACC
( 2021) #endif
( 2022)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2023)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2024)     INTEGER (KIND=JPIM) :: ISIZE
( 2025)     INTEGER :: J, J3, J4, J5
( 2026) 
( 2027)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 2028)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2029)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2030)           ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4, J5))
( 2031)           IF (KDIR == NH2D) THEN
( 2032)             !$acc host_data use_device (DEV)
( 2033) #ifdef _OPENACC
( 2034)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4, J5), HST (:, :, J3, J4, J5), ISIZE)
( 2035) #endif
( 2036)             !$acc end host_data
( 2037)           ELSEIF (KDIR == ND2H) THEN
( 2038)             !$acc host_data use_device (DEV)
( 2039) #ifdef _OPENACC
( 2040)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4, J5), DEV (:, :, J3, J4, J5), ISIZE)
( 2041) #endif
( 2042)             !$acc end host_data
( 2043)           ENDIF
( 2044)         ENDDO
( 2045)       ENDDO
( 2046)     ENDDO
( 2047)     END SUBROUTINE
( 2048) 
( 2049)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2050) #ifdef _OPENACC
( 2051)     USE OPENACC
( 2052) #endif
( 2053)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2054)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2055)     INTEGER (KIND=JPIM) :: ISIZE
( 2056)     INTEGER :: J, J4, J5
( 2057) 
( 2058)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 2059)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2060)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4, J5))






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 38

( 2061)         IF (KDIR == NH2D) THEN
( 2062)           !$acc host_data use_device (DEV)
( 2063) #ifdef _OPENACC
( 2064)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4, J5), HST (:, :, :, J4, J5), ISIZE)
( 2065) #endif
( 2066)           !$acc end host_data
( 2067)         ELSEIF (KDIR == ND2H) THEN
( 2068)           !$acc host_data use_device (DEV)
( 2069) #ifdef _OPENACC
( 2070)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4, J5), DEV (:, :, :, J4, J5), ISIZE)
( 2071) #endif
( 2072)           !$acc end host_data
( 2073)         ENDIF
( 2074)       ENDDO
( 2075)     ENDDO
( 2076)     END SUBROUTINE
( 2077) 
( 2078)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 2079) #ifdef _OPENACC
( 2080)     USE OPENACC
( 2081) #endif
( 2082)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2083)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2084)     INTEGER (KIND=JPIM) :: ISIZE
( 2085)     INTEGER :: J, J5
( 2086) 
( 2087)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 2088)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, J5))
( 2089)       IF (KDIR == NH2D) THEN
( 2090)         !$acc host_data use_device (DEV)
( 2091) #ifdef _OPENACC
( 2092)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, J5), HST (:, :, :, :, J5), ISIZE)
( 2093) #endif
( 2094)         !$acc end host_data
( 2095)       ELSEIF (KDIR == ND2H) THEN
( 2096)         !$acc host_data use_device (DEV)
( 2097) #ifdef _OPENACC
( 2098)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, J5), DEV (:, :, :, :, J5), ISIZE)
( 2099) #endif
( 2100)         !$acc end host_data
( 2101)       ENDIF
( 2102)     ENDDO
( 2103)     END SUBROUTINE
( 2104) 
( 2105)     SUBROUTINE COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 2106) #ifdef _OPENACC
( 2107)     USE OPENACC
( 2108) #endif
( 2109)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2110)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2111)     INTEGER (KIND=JPIM) :: ISIZE
( 2112)     INTEGER :: J
( 2113) 
( 2114)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, :))
( 2115)         IF (KDIR == NH2D) THEN
( 2116)           !$acc host_data use_device (DEV)
( 2117) #ifdef _OPENACC
( 2118)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, :), HST (:, :, :, :, :), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 39

( 2119) #endif
( 2120)           !$acc end host_data
( 2121)         ELSEIF (KDIR == ND2H) THEN
( 2122)           !$acc host_data use_device (DEV)
( 2123) #ifdef _OPENACC
( 2124)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, :), DEV (:, :, :, :, :), ISIZE)
( 2125) #endif
( 2126)           !$acc end host_data
( 2127)         ENDIF
( 2128)     END SUBROUTINE
( 2129) 
( 2130)   END SUBROUTINE FIELD_INT5D_COPY
( 2131) 
( 2132)   FUNCTION FIELD_INT5D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2133)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2134)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2135)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 2136)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2137) 
( 2138)     IF (ASSOCIATED (SELF)) THEN
( 2139)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2140)         CALL FIELD_INT5D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2141)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2142)       ENDIF
( 2143)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%PTR (:,:,:,:,:)
( 2144)       IF (IAND (MODE, NWR) /= 0) THEN
( 2145)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2146)       ENDIF
( 2147)     ELSE
( 2148)       PTR => ZDUM
( 2149)     ENDIF
( 2150) 
( 2151)   END FUNCTION FIELD_INT5D_GET_HOST_DATA_
( 2152) 
( 2153)   FUNCTION FIELD_INT5D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2154)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2155)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2156) 
( 2157)     PTR => FIELD_INT5D_GET_HOST_DATA_ (SELF, NRD)
( 2158) 
( 2159)   END FUNCTION FIELD_INT5D_GET_HOST_DATA_RDONLY
( 2160) 
( 2161)   FUNCTION FIELD_INT5D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2162)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2163)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2164) 
( 2165)     PTR => FIELD_INT5D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2166) 
( 2167)   END FUNCTION FIELD_INT5D_GET_HOST_DATA_RDWR
( 2168) 
( 2169)   FUNCTION FIELD_INT5D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2170)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2171)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2172)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 2173)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2174) 
( 2175)     IF (ASSOCIATED (SELF)) THEN
( 2176)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 40

( 2177)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2178)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2179)           !$acc enter data create (SELF%DEVPTR)
( 2180)         ENDIF
( 2181)         CALL FIELD_INT5D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2182)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2183)       ENDIF
( 2184)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%DEVPTR (:,:,:,:
( 2185)       IF (IAND (MODE, NWR) /= 0) THEN
( 2186)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2187)       ENDIF
( 2188)     ELSE
( 2189)       PTR => ZDUM
( 2190)     ENDIF
( 2191) 
( 2192)   END FUNCTION FIELD_INT5D_GET_DEVICE_DATA_
( 2193) 
( 2194)   FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2195)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2196)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2197) 
( 2198)     PTR => FIELD_INT5D_GET_DEVICE_DATA_ (SELF, NRD)
( 2199) 
( 2200)   END FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDONLY
( 2201) 
( 2202)   FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2203)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2204)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2205) 
( 2206)     PTR => FIELD_INT5D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2207) 
( 2208)   END FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDWR
( 2209) 
( 2210) 
( 2211)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG2D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2212)   LOGICAL, POINTER :: PTR (:,:)
( 2213)   INTEGER*8 :: ISTRIDE (2)
( 2214)   INTEGER (KIND=JPIM) :: J
( 2215) 
( 2216)   ISTRIDE (1) = KIND (PTR)
( 2217)   DO J = 2, 2
( 2218)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2219)   ENDDO
( 2220) 
( 2221)   JDIM = 0
( 2222)   IF (LOC (PTR (2, 1)) - LOC (PTR (1, 1)) /= ISTRIDE (1)) THEN
( 2223)     RETURN
( 2224)   ENDIF
( 2225) 
( 2226)   JDIM = 1
( 2227) 
( 2228)   IF (LOC (PTR (1, 2)) - LOC (PTR (1, 1)) /= ISTRIDE (2)) THEN
( 2229)     RETURN
( 2230)   ENDIF
( 2231) 
( 2232)   JDIM = 2
( 2233) 
( 2234)   END FUNCTION FIELD_LOG2D_GET_LAST_CONTIGUOUS_DIMENSION






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 41

( 2235) 
( 2236)   SUBROUTINE FIELD_LOG2D_COPY (HST, DEV, KDIR)
( 2237)   LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2238)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2239)   INTEGER (KIND=JPIM) :: JDIM
( 2240) 
( 2241)   JDIM = FIELD_LOG2D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2242) 
( 2243)   SELECT CASE (JDIM)
( 2244)     CASE (0)
( 2245)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2246)     CASE (1)
( 2247)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2248)     CASE (2)
( 2249)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2250)   END SELECT
( 2251) 
( 2252)   CONTAINS
( 2253) 
( 2254)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2255) #ifdef _OPENACC
( 2256)     USE OPENACC
( 2257) #endif
( 2258)     LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2259)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2260)     INTEGER (KIND=JPIM) :: ISIZE
( 2261)     INTEGER :: J, J1, J2
( 2262) 
( 2263)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2264)       DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 2265)         ISIZE = KIND (HST)
( 2266)         IF (KDIR == NH2D) THEN
( 2267)           !$acc host_data use_device (DEV)
( 2268) #ifdef _OPENACC
( 2269)           CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2), HST (J1, J2), ISIZE)
( 2270) #endif
( 2271)           !$acc end host_data
( 2272)         ELSEIF (KDIR == ND2H) THEN
( 2273)           !$acc host_data use_device (DEV)
( 2274) #ifdef _OPENACC
( 2275)           CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2), DEV (J1, J2), ISIZE)
( 2276) #endif
( 2277)           !$acc end host_data
( 2278)         ENDIF
( 2279)       ENDDO
( 2280)     ENDDO
( 2281)     END SUBROUTINE
( 2282) 
( 2283)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2284) #ifdef _OPENACC
( 2285)     USE OPENACC
( 2286) #endif
( 2287)     LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2288)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2289)     INTEGER (KIND=JPIM) :: ISIZE
( 2290)     INTEGER :: J, J2
( 2291) 
( 2292)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 42

( 2293)       ISIZE = KIND (HST) * SIZE (HST (:, J2))
( 2294)       IF (KDIR == NH2D) THEN
( 2295)         !$acc host_data use_device (DEV)
( 2296) #ifdef _OPENACC
( 2297)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2), HST (:, J2), ISIZE)
( 2298) #endif
( 2299)         !$acc end host_data
( 2300)       ELSEIF (KDIR == ND2H) THEN
( 2301)         !$acc host_data use_device (DEV)
( 2302) #ifdef _OPENACC
( 2303)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2), DEV (:, J2), ISIZE)
( 2304) #endif
( 2305)         !$acc end host_data
( 2306)       ENDIF
( 2307)     ENDDO
( 2308)     END SUBROUTINE
( 2309) 
( 2310)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2311) #ifdef _OPENACC
( 2312)     USE OPENACC
( 2313) #endif
( 2314)     LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2315)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2316)     INTEGER (KIND=JPIM) :: ISIZE
( 2317)     INTEGER :: J
( 2318) 
( 2319)         ISIZE = KIND (HST) * SIZE (HST (:, :))
( 2320)         IF (KDIR == NH2D) THEN
( 2321)           !$acc host_data use_device (DEV)
( 2322) #ifdef _OPENACC
( 2323)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :), HST (:, :), ISIZE)
( 2324) #endif
( 2325)           !$acc end host_data
( 2326)         ELSEIF (KDIR == ND2H) THEN
( 2327)           !$acc host_data use_device (DEV)
( 2328) #ifdef _OPENACC
( 2329)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :), DEV (:, :), ISIZE)
( 2330) #endif
( 2331)           !$acc end host_data
( 2332)         ENDIF
( 2333)     END SUBROUTINE
( 2334) 
( 2335)   END SUBROUTINE FIELD_LOG2D_COPY
( 2336) 
( 2337)   FUNCTION FIELD_LOG2D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2338)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2339)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2340)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1)
( 2341)     LOGICAL, POINTER :: PTR(:,:)
( 2342) 
( 2343)     IF (ASSOCIATED (SELF)) THEN
( 2344)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2345)         CALL FIELD_LOG2D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2346)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2347)       ENDIF
( 2348)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%PTR (:,:)
( 2349)       IF (IAND (MODE, NWR) /= 0) THEN
( 2350)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 43

( 2351)       ENDIF
( 2352)     ELSE
( 2353)       PTR => ZDUM
( 2354)     ENDIF
( 2355) 
( 2356)   END FUNCTION FIELD_LOG2D_GET_HOST_DATA_
( 2357) 
( 2358)   FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2359)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2360)     LOGICAL, POINTER :: PTR(:,:)
( 2361) 
( 2362)     PTR => FIELD_LOG2D_GET_HOST_DATA_ (SELF, NRD)
( 2363) 
( 2364)   END FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDONLY
( 2365) 
( 2366)   FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2367)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2368)     LOGICAL, POINTER :: PTR(:,:)
( 2369) 
( 2370)     PTR => FIELD_LOG2D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2371) 
( 2372)   END FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDWR
( 2373) 
( 2374)   FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2375)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2376)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2377)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1)
( 2378)     LOGICAL, POINTER :: PTR(:,:)
( 2379) 
( 2380)     IF (ASSOCIATED (SELF)) THEN
( 2381)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2382)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2383)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2384)           !$acc enter data create (SELF%DEVPTR)
( 2385)         ENDIF
( 2386)         CALL FIELD_LOG2D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2387)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2388)       ENDIF
( 2389)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%DEVPTR (:,:)
( 2390)       IF (IAND (MODE, NWR) /= 0) THEN
( 2391)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2392)       ENDIF
( 2393)     ELSE
( 2394)       PTR => ZDUM
( 2395)     ENDIF
( 2396) 
( 2397)   END FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_
( 2398) 
( 2399)   FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2400)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2401)     LOGICAL, POINTER :: PTR(:,:)
( 2402) 
( 2403)     PTR => FIELD_LOG2D_GET_DEVICE_DATA_ (SELF, NRD)
( 2404) 
( 2405)   END FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDONLY
( 2406) 
( 2407)   FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2408)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 44

( 2409)     LOGICAL, POINTER :: PTR(:,:)
( 2410) 
( 2411)     PTR => FIELD_LOG2D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2412) 
( 2413)   END FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDWR
( 2414) 
( 2415) 
( 2416)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG3D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2417)   LOGICAL, POINTER :: PTR (:,:,:)
( 2418)   INTEGER*8 :: ISTRIDE (3)
( 2419)   INTEGER (KIND=JPIM) :: J
( 2420) 
( 2421)   ISTRIDE (1) = KIND (PTR)
( 2422)   DO J = 2, 3
( 2423)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2424)   ENDDO
( 2425) 
( 2426)   JDIM = 0
( 2427)   IF (LOC (PTR (2, 1, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (1)) THEN
( 2428)     RETURN
( 2429)   ENDIF
( 2430) 
( 2431)   JDIM = 1
( 2432) 
( 2433)   IF (LOC (PTR (1, 2, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (2)) THEN
( 2434)     RETURN
( 2435)   ENDIF
( 2436) 
( 2437)   JDIM = 2
( 2438) 
( 2439)   IF (LOC (PTR (1, 1, 2)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (3)) THEN
( 2440)     RETURN
( 2441)   ENDIF
( 2442) 
( 2443)   JDIM = 3
( 2444) 
( 2445)   END FUNCTION FIELD_LOG3D_GET_LAST_CONTIGUOUS_DIMENSION
( 2446) 
( 2447)   SUBROUTINE FIELD_LOG3D_COPY (HST, DEV, KDIR)
( 2448)   LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2449)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2450)   INTEGER (KIND=JPIM) :: JDIM
( 2451) 
( 2452)   JDIM = FIELD_LOG3D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2453) 
( 2454)   SELECT CASE (JDIM)
( 2455)     CASE (0)
( 2456)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2457)     CASE (1)
( 2458)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2459)     CASE (2)
( 2460)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2461)     CASE (3)
( 2462)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2463)   END SELECT
( 2464) 
( 2465)   CONTAINS
( 2466) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 45

( 2467)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2468) #ifdef _OPENACC
( 2469)     USE OPENACC
( 2470) #endif
( 2471)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2472)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2473)     INTEGER (KIND=JPIM) :: ISIZE
( 2474)     INTEGER :: J, J1, J2, J3
( 2475) 
( 2476)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2477)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2478)         DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 2479)           ISIZE = KIND (HST)
( 2480)           IF (KDIR == NH2D) THEN
( 2481)             !$acc host_data use_device (DEV)
( 2482) #ifdef _OPENACC
( 2483)             CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3), HST (J1, J2, J3), ISIZE)
( 2484) #endif
( 2485)             !$acc end host_data
( 2486)           ELSEIF (KDIR == ND2H) THEN
( 2487)             !$acc host_data use_device (DEV)
( 2488) #ifdef _OPENACC
( 2489)             CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3), DEV (J1, J2, J3), ISIZE)
( 2490) #endif
( 2491)             !$acc end host_data
( 2492)           ENDIF
( 2493)         ENDDO
( 2494)       ENDDO
( 2495)     ENDDO
( 2496)     END SUBROUTINE
( 2497) 
( 2498)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2499) #ifdef _OPENACC
( 2500)     USE OPENACC
( 2501) #endif
( 2502)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2503)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2504)     INTEGER (KIND=JPIM) :: ISIZE
( 2505)     INTEGER :: J, J2, J3
( 2506) 
( 2507)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2508)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2509)         ISIZE = KIND (HST) * SIZE (HST (:, J2, J3))
( 2510)         IF (KDIR == NH2D) THEN
( 2511)           !$acc host_data use_device (DEV)
( 2512) #ifdef _OPENACC
( 2513)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3), HST (:, J2, J3), ISIZE)
( 2514) #endif
( 2515)           !$acc end host_data
( 2516)         ELSEIF (KDIR == ND2H) THEN
( 2517)           !$acc host_data use_device (DEV)
( 2518) #ifdef _OPENACC
( 2519)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3), DEV (:, J2, J3), ISIZE)
( 2520) #endif
( 2521)           !$acc end host_data
( 2522)         ENDIF
( 2523)       ENDDO
( 2524)     ENDDO






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 46

( 2525)     END SUBROUTINE
( 2526) 
( 2527)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2528) #ifdef _OPENACC
( 2529)     USE OPENACC
( 2530) #endif
( 2531)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2532)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2533)     INTEGER (KIND=JPIM) :: ISIZE
( 2534)     INTEGER :: J, J3
( 2535) 
( 2536)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2537)       ISIZE = KIND (HST) * SIZE (HST (:, :, J3))
( 2538)       IF (KDIR == NH2D) THEN
( 2539)         !$acc host_data use_device (DEV)
( 2540) #ifdef _OPENACC
( 2541)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3), HST (:, :, J3), ISIZE)
( 2542) #endif
( 2543)         !$acc end host_data
( 2544)       ELSEIF (KDIR == ND2H) THEN
( 2545)         !$acc host_data use_device (DEV)
( 2546) #ifdef _OPENACC
( 2547)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3), DEV (:, :, J3), ISIZE)
( 2548) #endif
( 2549)         !$acc end host_data
( 2550)       ENDIF
( 2551)     ENDDO
( 2552)     END SUBROUTINE
( 2553) 
( 2554)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2555) #ifdef _OPENACC
( 2556)     USE OPENACC
( 2557) #endif
( 2558)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2559)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2560)     INTEGER (KIND=JPIM) :: ISIZE
( 2561)     INTEGER :: J
( 2562) 
( 2563)         ISIZE = KIND (HST) * SIZE (HST (:, :, :))
( 2564)         IF (KDIR == NH2D) THEN
( 2565)           !$acc host_data use_device (DEV)
( 2566) #ifdef _OPENACC
( 2567)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :), HST (:, :, :), ISIZE)
( 2568) #endif
( 2569)           !$acc end host_data
( 2570)         ELSEIF (KDIR == ND2H) THEN
( 2571)           !$acc host_data use_device (DEV)
( 2572) #ifdef _OPENACC
( 2573)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :), DEV (:, :, :), ISIZE)
( 2574) #endif
( 2575)           !$acc end host_data
( 2576)         ENDIF
( 2577)     END SUBROUTINE
( 2578) 
( 2579)   END SUBROUTINE FIELD_LOG3D_COPY
( 2580) 
( 2581)   FUNCTION FIELD_LOG3D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2582)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 47

( 2583)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2584)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1)
( 2585)     LOGICAL, POINTER :: PTR(:,:,:)
( 2586) 
( 2587)     IF (ASSOCIATED (SELF)) THEN
( 2588)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2589)         CALL FIELD_LOG3D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2590)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2591)       ENDIF
( 2592)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%PTR (:,:,:)
( 2593)       IF (IAND (MODE, NWR) /= 0) THEN
( 2594)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2595)       ENDIF
( 2596)     ELSE
( 2597)       PTR => ZDUM
( 2598)     ENDIF
( 2599) 
( 2600)   END FUNCTION FIELD_LOG3D_GET_HOST_DATA_
( 2601) 
( 2602)   FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2603)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2604)     LOGICAL, POINTER :: PTR(:,:,:)
( 2605) 
( 2606)     PTR => FIELD_LOG3D_GET_HOST_DATA_ (SELF, NRD)
( 2607) 
( 2608)   END FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDONLY
( 2609) 
( 2610)   FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2611)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2612)     LOGICAL, POINTER :: PTR(:,:,:)
( 2613) 
( 2614)     PTR => FIELD_LOG3D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2615) 
( 2616)   END FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDWR
( 2617) 
( 2618)   FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2619)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2620)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2621)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1)
( 2622)     LOGICAL, POINTER :: PTR(:,:,:)
( 2623) 
( 2624)     IF (ASSOCIATED (SELF)) THEN
( 2625)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2626)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2627)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2628)           !$acc enter data create (SELF%DEVPTR)
( 2629)         ENDIF
( 2630)         CALL FIELD_LOG3D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2631)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2632)       ENDIF
( 2633)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%DEVPTR (:,:,:)
( 2634)       IF (IAND (MODE, NWR) /= 0) THEN
( 2635)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2636)       ENDIF
( 2637)     ELSE
( 2638)       PTR => ZDUM
( 2639)     ENDIF
( 2640) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 48

( 2641)   END FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_
( 2642) 
( 2643)   FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2644)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2645)     LOGICAL, POINTER :: PTR(:,:,:)
( 2646) 
( 2647)     PTR => FIELD_LOG3D_GET_DEVICE_DATA_ (SELF, NRD)
( 2648) 
( 2649)   END FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDONLY
( 2650) 
( 2651)   FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2652)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2653)     LOGICAL, POINTER :: PTR(:,:,:)
( 2654) 
( 2655)     PTR => FIELD_LOG3D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2656) 
( 2657)   END FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDWR
( 2658) 
( 2659) 
( 2660)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG4D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2661)   LOGICAL, POINTER :: PTR (:,:,:,:)
( 2662)   INTEGER*8 :: ISTRIDE (4)
( 2663)   INTEGER (KIND=JPIM) :: J
( 2664) 
( 2665)   ISTRIDE (1) = KIND (PTR)
( 2666)   DO J = 2, 4
( 2667)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2668)   ENDDO
( 2669) 
( 2670)   JDIM = 0
( 2671)   IF (LOC (PTR (2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 2672)     RETURN
( 2673)   ENDIF
( 2674) 
( 2675)   JDIM = 1
( 2676) 
( 2677)   IF (LOC (PTR (1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 2678)     RETURN
( 2679)   ENDIF
( 2680) 
( 2681)   JDIM = 2
( 2682) 
( 2683)   IF (LOC (PTR (1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 2684)     RETURN
( 2685)   ENDIF
( 2686) 
( 2687)   JDIM = 3
( 2688) 
( 2689)   IF (LOC (PTR (1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 2690)     RETURN
( 2691)   ENDIF
( 2692) 
( 2693)   JDIM = 4
( 2694) 
( 2695)   END FUNCTION FIELD_LOG4D_GET_LAST_CONTIGUOUS_DIMENSION
( 2696) 
( 2697)   SUBROUTINE FIELD_LOG4D_COPY (HST, DEV, KDIR)
( 2698)   LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 49

( 2699)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2700)   INTEGER (KIND=JPIM) :: JDIM
( 2701) 
( 2702)   JDIM = FIELD_LOG4D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2703) 
( 2704)   SELECT CASE (JDIM)
( 2705)     CASE (0)
( 2706)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2707)     CASE (1)
( 2708)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2709)     CASE (2)
( 2710)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2711)     CASE (3)
( 2712)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2713)     CASE (4)
( 2714)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 2715)   END SELECT
( 2716) 
( 2717)   CONTAINS
( 2718) 
( 2719)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2720) #ifdef _OPENACC
( 2721)     USE OPENACC
( 2722) #endif
( 2723)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2724)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2725)     INTEGER (KIND=JPIM) :: ISIZE
( 2726)     INTEGER :: J, J1, J2, J3, J4
( 2727) 
( 2728)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2729)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2730)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2731)           DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 2732)             ISIZE = KIND (HST)
( 2733)             IF (KDIR == NH2D) THEN
( 2734)               !$acc host_data use_device (DEV)
( 2735) #ifdef _OPENACC
( 2736)               CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4), HST (J1, J2, J3, J4), ISIZE)
( 2737) #endif
( 2738)               !$acc end host_data
( 2739)             ELSEIF (KDIR == ND2H) THEN
( 2740)               !$acc host_data use_device (DEV)
( 2741) #ifdef _OPENACC
( 2742)               CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4), DEV (J1, J2, J3, J4), ISIZE)
( 2743) #endif
( 2744)               !$acc end host_data
( 2745)             ENDIF
( 2746)           ENDDO
( 2747)         ENDDO
( 2748)       ENDDO
( 2749)     ENDDO
( 2750)     END SUBROUTINE
( 2751) 
( 2752)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2753) #ifdef _OPENACC
( 2754)     USE OPENACC
( 2755) #endif
( 2756)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 50

( 2757)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2758)     INTEGER (KIND=JPIM) :: ISIZE
( 2759)     INTEGER :: J, J2, J3, J4
( 2760) 
( 2761)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2762)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2763)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2764)           ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4))
( 2765)           IF (KDIR == NH2D) THEN
( 2766)             !$acc host_data use_device (DEV)
( 2767) #ifdef _OPENACC
( 2768)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4), HST (:, J2, J3, J4), ISIZE)
( 2769) #endif
( 2770)             !$acc end host_data
( 2771)           ELSEIF (KDIR == ND2H) THEN
( 2772)             !$acc host_data use_device (DEV)
( 2773) #ifdef _OPENACC
( 2774)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4), DEV (:, J2, J3, J4), ISIZE)
( 2775) #endif
( 2776)             !$acc end host_data
( 2777)           ENDIF
( 2778)         ENDDO
( 2779)       ENDDO
( 2780)     ENDDO
( 2781)     END SUBROUTINE
( 2782) 
( 2783)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2784) #ifdef _OPENACC
( 2785)     USE OPENACC
( 2786) #endif
( 2787)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2788)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2789)     INTEGER (KIND=JPIM) :: ISIZE
( 2790)     INTEGER :: J, J3, J4
( 2791) 
( 2792)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2793)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2794)         ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4))
( 2795)         IF (KDIR == NH2D) THEN
( 2796)           !$acc host_data use_device (DEV)
( 2797) #ifdef _OPENACC
( 2798)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4), HST (:, :, J3, J4), ISIZE)
( 2799) #endif
( 2800)           !$acc end host_data
( 2801)         ELSEIF (KDIR == ND2H) THEN
( 2802)           !$acc host_data use_device (DEV)
( 2803) #ifdef _OPENACC
( 2804)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4), DEV (:, :, J3, J4), ISIZE)
( 2805) #endif
( 2806)           !$acc end host_data
( 2807)         ENDIF
( 2808)       ENDDO
( 2809)     ENDDO
( 2810)     END SUBROUTINE
( 2811) 
( 2812)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2813) #ifdef _OPENACC
( 2814)     USE OPENACC






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 51

( 2815) #endif
( 2816)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2817)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2818)     INTEGER (KIND=JPIM) :: ISIZE
( 2819)     INTEGER :: J, J4
( 2820) 
( 2821)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2822)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4))
( 2823)       IF (KDIR == NH2D) THEN
( 2824)         !$acc host_data use_device (DEV)
( 2825) #ifdef _OPENACC
( 2826)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4), HST (:, :, :, J4), ISIZE)
( 2827) #endif
( 2828)         !$acc end host_data
( 2829)       ELSEIF (KDIR == ND2H) THEN
( 2830)         !$acc host_data use_device (DEV)
( 2831) #ifdef _OPENACC
( 2832)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4), DEV (:, :, :, J4), ISIZE)
( 2833) #endif
( 2834)         !$acc end host_data
( 2835)       ENDIF
( 2836)     ENDDO
( 2837)     END SUBROUTINE
( 2838) 
( 2839)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 2840) #ifdef _OPENACC
( 2841)     USE OPENACC
( 2842) #endif
( 2843)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2844)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2845)     INTEGER (KIND=JPIM) :: ISIZE
( 2846)     INTEGER :: J
( 2847) 
( 2848)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :))
( 2849)         IF (KDIR == NH2D) THEN
( 2850)           !$acc host_data use_device (DEV)
( 2851) #ifdef _OPENACC
( 2852)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :), HST (:, :, :, :), ISIZE)
( 2853) #endif
( 2854)           !$acc end host_data
( 2855)         ELSEIF (KDIR == ND2H) THEN
( 2856)           !$acc host_data use_device (DEV)
( 2857) #ifdef _OPENACC
( 2858)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :), DEV (:, :, :, :), ISIZE)
( 2859) #endif
( 2860)           !$acc end host_data
( 2861)         ENDIF
( 2862)     END SUBROUTINE
( 2863) 
( 2864)   END SUBROUTINE FIELD_LOG4D_COPY
( 2865) 
( 2866)   FUNCTION FIELD_LOG4D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2867)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2868)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2869)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 2870)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2871) 
( 2872)     IF (ASSOCIATED (SELF)) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 52

( 2873)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2874)         CALL FIELD_LOG4D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2875)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2876)       ENDIF
( 2877)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%PTR (:,:,:,:)
( 2878)       IF (IAND (MODE, NWR) /= 0) THEN
( 2879)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2880)       ENDIF
( 2881)     ELSE
( 2882)       PTR => ZDUM
( 2883)     ENDIF
( 2884) 
( 2885)   END FUNCTION FIELD_LOG4D_GET_HOST_DATA_
( 2886) 
( 2887)   FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2888)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2889)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2890) 
( 2891)     PTR => FIELD_LOG4D_GET_HOST_DATA_ (SELF, NRD)
( 2892) 
( 2893)   END FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDONLY
( 2894) 
( 2895)   FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2896)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2897)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2898) 
( 2899)     PTR => FIELD_LOG4D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2900) 
( 2901)   END FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDWR
( 2902) 
( 2903)   FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2904)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2905)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2906)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 2907)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2908) 
( 2909)     IF (ASSOCIATED (SELF)) THEN
( 2910)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2911)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2912)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2913)           !$acc enter data create (SELF%DEVPTR)
( 2914)         ENDIF
( 2915)         CALL FIELD_LOG4D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2916)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2917)       ENDIF
( 2918)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%DEVPTR (:,:,:,:)
( 2919)       IF (IAND (MODE, NWR) /= 0) THEN
( 2920)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2921)       ENDIF
( 2922)     ELSE
( 2923)       PTR => ZDUM
( 2924)     ENDIF
( 2925) 
( 2926)   END FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_
( 2927) 
( 2928)   FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2929)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2930)     LOGICAL, POINTER :: PTR(:,:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 53

( 2931) 
( 2932)     PTR => FIELD_LOG4D_GET_DEVICE_DATA_ (SELF, NRD)
( 2933) 
( 2934)   END FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDONLY
( 2935) 
( 2936)   FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2937)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2938)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2939) 
( 2940)     PTR => FIELD_LOG4D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2941) 
( 2942)   END FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDWR
( 2943) 
( 2944) 
( 2945)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG5D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2946)   LOGICAL, POINTER :: PTR (:,:,:,:,:)
( 2947)   INTEGER*8 :: ISTRIDE (5)
( 2948)   INTEGER (KIND=JPIM) :: J
( 2949) 
( 2950)   ISTRIDE (1) = KIND (PTR)
( 2951)   DO J = 2, 5
( 2952)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2953)   ENDDO
( 2954) 
( 2955)   JDIM = 0
( 2956)   IF (LOC (PTR (2, 1, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 2957)     RETURN
( 2958)   ENDIF
( 2959) 
( 2960)   JDIM = 1
( 2961) 
( 2962)   IF (LOC (PTR (1, 2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 2963)     RETURN
( 2964)   ENDIF
( 2965) 
( 2966)   JDIM = 2
( 2967) 
( 2968)   IF (LOC (PTR (1, 1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 2969)     RETURN
( 2970)   ENDIF
( 2971) 
( 2972)   JDIM = 3
( 2973) 
( 2974)   IF (LOC (PTR (1, 1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 2975)     RETURN
( 2976)   ENDIF
( 2977) 
( 2978)   JDIM = 4
( 2979) 
( 2980)   IF (LOC (PTR (1, 1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (5)) THEN
( 2981)     RETURN
( 2982)   ENDIF
( 2983) 
( 2984)   JDIM = 5
( 2985) 
( 2986)   END FUNCTION FIELD_LOG5D_GET_LAST_CONTIGUOUS_DIMENSION
( 2987) 
( 2988)   SUBROUTINE FIELD_LOG5D_COPY (HST, DEV, KDIR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 54

( 2989)   LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2990)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2991)   INTEGER (KIND=JPIM) :: JDIM
( 2992) 
( 2993)   JDIM = FIELD_LOG5D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2994) 
( 2995)   SELECT CASE (JDIM)
( 2996)     CASE (0)
( 2997)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2998)     CASE (1)
( 2999)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 3000)     CASE (2)
( 3001)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 3002)     CASE (3)
( 3003)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 3004)     CASE (4)
( 3005)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 3006)     CASE (5)
( 3007)       CALL COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 3008)   END SELECT
( 3009) 
( 3010)   CONTAINS
( 3011) 
( 3012)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 3013) #ifdef _OPENACC
( 3014)     USE OPENACC
( 3015) #endif
( 3016)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3017)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3018)     INTEGER (KIND=JPIM) :: ISIZE
( 3019)     INTEGER :: J, J1, J2, J3, J4, J5
( 3020) 
( 3021)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3022)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3023)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 3024)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 3025)             DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 3026)               ISIZE = KIND (HST)
( 3027)               IF (KDIR == NH2D) THEN
( 3028)                 !$acc host_data use_device (DEV)
( 3029) #ifdef _OPENACC
( 3030)                 CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4, J5), HST (J1, J2, J3, J4, J5), ISIZE)
( 3031) #endif
( 3032)                 !$acc end host_data
( 3033)               ELSEIF (KDIR == ND2H) THEN
( 3034)                 !$acc host_data use_device (DEV)
( 3035) #ifdef _OPENACC
( 3036)                 CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4, J5), DEV (J1, J2, J3, J4, J5), ISIZE)
( 3037) #endif
( 3038)                 !$acc end host_data
( 3039)               ENDIF
( 3040)             ENDDO
( 3041)           ENDDO
( 3042)         ENDDO
( 3043)       ENDDO
( 3044)     ENDDO
( 3045)     END SUBROUTINE
( 3046) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 55

( 3047)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 3048) #ifdef _OPENACC
( 3049)     USE OPENACC
( 3050) #endif
( 3051)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3052)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3053)     INTEGER (KIND=JPIM) :: ISIZE
( 3054)     INTEGER :: J, J2, J3, J4, J5
( 3055) 
( 3056)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3057)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3058)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 3059)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 3060)             ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4, J5))
( 3061)             IF (KDIR == NH2D) THEN
( 3062)               !$acc host_data use_device (DEV)
( 3063) #ifdef _OPENACC
( 3064)               CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4, J5), HST (:, J2, J3, J4, J5), ISIZE)
( 3065) #endif
( 3066)               !$acc end host_data
( 3067)             ELSEIF (KDIR == ND2H) THEN
( 3068)               !$acc host_data use_device (DEV)
( 3069) #ifdef _OPENACC
( 3070)               CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4, J5), DEV (:, J2, J3, J4, J5), ISIZE)
( 3071) #endif
( 3072)               !$acc end host_data
( 3073)             ENDIF
( 3074)           ENDDO
( 3075)         ENDDO
( 3076)       ENDDO
( 3077)     ENDDO
( 3078)     END SUBROUTINE
( 3079) 
( 3080)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 3081) #ifdef _OPENACC
( 3082)     USE OPENACC
( 3083) #endif
( 3084)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3085)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3086)     INTEGER (KIND=JPIM) :: ISIZE
( 3087)     INTEGER :: J, J3, J4, J5
( 3088) 
( 3089)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3090)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3091)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 3092)           ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4, J5))
( 3093)           IF (KDIR == NH2D) THEN
( 3094)             !$acc host_data use_device (DEV)
( 3095) #ifdef _OPENACC
( 3096)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4, J5), HST (:, :, J3, J4, J5), ISIZE)
( 3097) #endif
( 3098)             !$acc end host_data
( 3099)           ELSEIF (KDIR == ND2H) THEN
( 3100)             !$acc host_data use_device (DEV)
( 3101) #ifdef _OPENACC
( 3102)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4, J5), DEV (:, :, J3, J4, J5), ISIZE)
( 3103) #endif
( 3104)             !$acc end host_data






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 56

( 3105)           ENDIF
( 3106)         ENDDO
( 3107)       ENDDO
( 3108)     ENDDO
( 3109)     END SUBROUTINE
( 3110) 
( 3111)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 3112) #ifdef _OPENACC
( 3113)     USE OPENACC
( 3114) #endif
( 3115)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3116)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3117)     INTEGER (KIND=JPIM) :: ISIZE
( 3118)     INTEGER :: J, J4, J5
( 3119) 
( 3120)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3121)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3122)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4, J5))
( 3123)         IF (KDIR == NH2D) THEN
( 3124)           !$acc host_data use_device (DEV)
( 3125) #ifdef _OPENACC
( 3126)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4, J5), HST (:, :, :, J4, J5), ISIZE)
( 3127) #endif
( 3128)           !$acc end host_data
( 3129)         ELSEIF (KDIR == ND2H) THEN
( 3130)           !$acc host_data use_device (DEV)
( 3131) #ifdef _OPENACC
( 3132)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4, J5), DEV (:, :, :, J4, J5), ISIZE)
( 3133) #endif
( 3134)           !$acc end host_data
( 3135)         ENDIF
( 3136)       ENDDO
( 3137)     ENDDO
( 3138)     END SUBROUTINE
( 3139) 
( 3140)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 3141) #ifdef _OPENACC
( 3142)     USE OPENACC
( 3143) #endif
( 3144)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3145)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3146)     INTEGER (KIND=JPIM) :: ISIZE
( 3147)     INTEGER :: J, J5
( 3148) 
( 3149)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3150)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, J5))
( 3151)       IF (KDIR == NH2D) THEN
( 3152)         !$acc host_data use_device (DEV)
( 3153) #ifdef _OPENACC
( 3154)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, J5), HST (:, :, :, :, J5), ISIZE)
( 3155) #endif
( 3156)         !$acc end host_data
( 3157)       ELSEIF (KDIR == ND2H) THEN
( 3158)         !$acc host_data use_device (DEV)
( 3159) #ifdef _OPENACC
( 3160)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, J5), DEV (:, :, :, :, J5), ISIZE)
( 3161) #endif
( 3162)         !$acc end host_data






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 57

( 3163)       ENDIF
( 3164)     ENDDO
( 3165)     END SUBROUTINE
( 3166) 
( 3167)     SUBROUTINE COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 3168) #ifdef _OPENACC
( 3169)     USE OPENACC
( 3170) #endif
( 3171)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3172)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3173)     INTEGER (KIND=JPIM) :: ISIZE
( 3174)     INTEGER :: J
( 3175) 
( 3176)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, :))
( 3177)         IF (KDIR == NH2D) THEN
( 3178)           !$acc host_data use_device (DEV)
( 3179) #ifdef _OPENACC
( 3180)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, :), HST (:, :, :, :, :), ISIZE)
( 3181) #endif
( 3182)           !$acc end host_data
( 3183)         ELSEIF (KDIR == ND2H) THEN
( 3184)           !$acc host_data use_device (DEV)
( 3185) #ifdef _OPENACC
( 3186)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, :), DEV (:, :, :, :, :), ISIZE)
( 3187) #endif
( 3188)           !$acc end host_data
( 3189)         ENDIF
( 3190)     END SUBROUTINE
( 3191) 
( 3192)   END SUBROUTINE FIELD_LOG5D_COPY
( 3193) 
( 3194)   FUNCTION FIELD_LOG5D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 3195)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3196)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 3197)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 3198)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3199) 
( 3200)     IF (ASSOCIATED (SELF)) THEN
( 3201)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 3202)         CALL FIELD_LOG5D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 3203)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 3204)       ENDIF
( 3205)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%PTR (:,:,:,:,:)
( 3206)       IF (IAND (MODE, NWR) /= 0) THEN
( 3207)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 3208)       ENDIF
( 3209)     ELSE
( 3210)       PTR => ZDUM
( 3211)     ENDIF
( 3212) 
( 3213)   END FUNCTION FIELD_LOG5D_GET_HOST_DATA_
( 3214) 
( 3215)   FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 3216)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3217)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3218) 
( 3219)     PTR => FIELD_LOG5D_GET_HOST_DATA_ (SELF, NRD)
( 3220) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 58

( 3221)   END FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDONLY
( 3222) 
( 3223)   FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 3224)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3225)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3226) 
( 3227)     PTR => FIELD_LOG5D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 3228) 
( 3229)   END FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDWR
( 3230) 
( 3231)   FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 3232)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3233)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 3234)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 3235)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3236) 
( 3237)     IF (ASSOCIATED (SELF)) THEN
( 3238)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 3239)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 3240)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 3241)           !$acc enter data create (SELF%DEVPTR)
( 3242)         ENDIF
( 3243)         CALL FIELD_LOG5D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 3244)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 3245)       ENDIF
( 3246)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%DEVPTR (:,:,:,:
( 3247)       IF (IAND (MODE, NWR) /= 0) THEN
( 3248)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 3249)       ENDIF
( 3250)     ELSE
( 3251)       PTR => ZDUM
( 3252)     ENDIF
( 3253) 
( 3254)   END FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_
( 3255) 
( 3256)   FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 3257)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3258)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3259) 
( 3260)     PTR => FIELD_LOG5D_GET_DEVICE_DATA_ (SELF, NRD)
( 3261) 
( 3262)   END FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDONLY
( 3263) 
( 3264)   FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 3265)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3266)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3267) 
( 3268)     PTR => FIELD_LOG5D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 3269) 
( 3270)   END FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDWR
( 3271) 
( 3272) 
( 3273) 
( 3274)   SUBROUTINE CREATE_TEMPORARY_2D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3275) 
( 3276)     TYPE(FIELD_2D), POINTER :: FIELD_PTR
( 3277)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (2)
( 3278)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 59

( 3279)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3280)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3281)     INTEGER(KIND=JPIM) :: ISIZE (2)
( 3282) 
( 3283)     ISIZE = UBOUNDS
( 3284)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3285) 
( 3286)     ALLOCATE(FIELD_PTR)
( 3287)     NBLOCKS = UBOUNDS (2)
( 3288)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:2-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3289) 
( 3290)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3291)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3292) 
( 3293)   END SUBROUTINE CREATE_TEMPORARY_2D_LU
( 3294) 
( 3295)   SUBROUTINE CREATE_TEMPORARY_3D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3296) 
( 3297)     TYPE(FIELD_3D), POINTER :: FIELD_PTR
( 3298)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (3)
( 3299)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)
( 3300)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3301)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3302)     INTEGER(KIND=JPIM) :: ISIZE (3)
( 3303) 
( 3304)     ISIZE = UBOUNDS
( 3305)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3306) 
( 3307)     ALLOCATE(FIELD_PTR)
( 3308)     NBLOCKS = UBOUNDS (3)
( 3309)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:3-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3310) 
( 3311)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3312)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3313) 
( 3314)   END SUBROUTINE CREATE_TEMPORARY_3D_LU
( 3315) 
( 3316)   SUBROUTINE CREATE_TEMPORARY_4D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3317) 
( 3318)     TYPE(FIELD_4D), POINTER :: FIELD_PTR
( 3319)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (4)
( 3320)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (4)
( 3321)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3322)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3323)     INTEGER(KIND=JPIM) :: ISIZE (4)
( 3324) 
( 3325)     ISIZE = UBOUNDS
( 3326)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3327) 
( 3328)     ALLOCATE(FIELD_PTR)
( 3329)     NBLOCKS = UBOUNDS (4)
( 3330)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:4-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3331) 
( 3332)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3333)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3334) 
( 3335)   END SUBROUTINE CREATE_TEMPORARY_4D_LU
( 3336) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 60

( 3337)   SUBROUTINE CREATE_TEMPORARY_5D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3338) 
( 3339)     TYPE(FIELD_5D), POINTER :: FIELD_PTR
( 3340)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (5)
( 3341)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (5)
( 3342)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3343)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3344)     INTEGER(KIND=JPIM) :: ISIZE (5)
( 3345) 
( 3346)     ISIZE = UBOUNDS
( 3347)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3348) 
( 3349)     ALLOCATE(FIELD_PTR)
( 3350)     NBLOCKS = UBOUNDS (5)
( 3351)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:5-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3352) 
( 3353)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3354)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3355) 
( 3356)   END SUBROUTINE CREATE_TEMPORARY_5D_LU
( 3357) 
( 3358)   SUBROUTINE CREATE_TEMPORARY_INT2D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3359) 
( 3360)     TYPE(FIELD_INT2D), POINTER :: FIELD_PTR
( 3361)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (2)
( 3362)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)
( 3363)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3364)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3365)     INTEGER(KIND=JPIM) :: ISIZE (2)
( 3366) 
( 3367)     ISIZE = UBOUNDS
( 3368)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3369) 
( 3370)     ALLOCATE(FIELD_PTR)
( 3371)     NBLOCKS = UBOUNDS (2)
( 3372)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:2-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3373) 
( 3374)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3375)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3376) 
( 3377)   END SUBROUTINE CREATE_TEMPORARY_INT2D_LU
( 3378) 
( 3379)   SUBROUTINE CREATE_TEMPORARY_INT3D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3380) 
( 3381)     TYPE(FIELD_INT3D), POINTER :: FIELD_PTR
( 3382)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (3)
( 3383)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)
( 3384)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3385)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3386)     INTEGER(KIND=JPIM) :: ISIZE (3)
( 3387) 
( 3388)     ISIZE = UBOUNDS
( 3389)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3390) 
( 3391)     ALLOCATE(FIELD_PTR)
( 3392)     NBLOCKS = UBOUNDS (3)
( 3393)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:3-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3394) 






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 61

( 3395)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3396)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3397) 
( 3398)   END SUBROUTINE CREATE_TEMPORARY_INT3D_LU
( 3399) 
( 3400)   SUBROUTINE CREATE_TEMPORARY_LOG2D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3401) 
( 3402)     TYPE(FIELD_LOG2D), POINTER :: FIELD_PTR
( 3403)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (2)
( 3404)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)
( 3405)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3406)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3407)     INTEGER(KIND=JPIM) :: ISIZE (2)
( 3408) 
( 3409)     ISIZE = UBOUNDS
( 3410)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3411) 
( 3412)     ALLOCATE(FIELD_PTR)
( 3413)     NBLOCKS = UBOUNDS (2)
( 3414)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:2-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3415) 
( 3416)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3417)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3418) 
( 3419)   END SUBROUTINE CREATE_TEMPORARY_LOG2D_LU
( 3420) 
( 3421) 
( 3422) END MODULE FIELD_HELPER_MODULE
( 3423) 
( 3424) 
( 3425) 

































NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 62

(    1) # 1 "field_helper_module.F90"
(    1) # 5 "field_helper_module.F90"
(    5) MODULE FIELD_HELPER_MODULE
(    6) # 7 "field_helper_module.F90"
(    7) USE FIELD_MODULE
(    8) USE YOMHOOK
(    9) # 10 "field_helper_module.F90"
(   10) IMPLICIT NONE
(   11) # 12 "field_helper_module.F90"
(   12) INTERFACE CREATE_TEMPORARY_LU
(   13)   MODULE PROCEDURE CREATE_TEMPORARY_2D_LU
(   14)   MODULE PROCEDURE CREATE_TEMPORARY_3D_LU
(   15)   MODULE PROCEDURE CREATE_TEMPORARY_4D_LU
(   16)   MODULE PROCEDURE CREATE_TEMPORARY_5D_LU
(   17)   MODULE PROCEDURE CREATE_TEMPORARY_INT2D_LU
(   18)   MODULE PROCEDURE CREATE_TEMPORARY_INT3D_LU
(   19)   MODULE PROCEDURE CREATE_TEMPORARY_LOG2D_LU
(   20) END INTERFACE CREATE_TEMPORARY_LU
(   21) # 22 "field_helper_module.F90"
(   22) INTERFACE GET_DEVICE_DATA_RDONLY
(   23)   MODULE PROCEDURE :: FIELD_2D_GET_DEVICE_DATA_RDONLY
(   24)   MODULE PROCEDURE :: FIELD_3D_GET_DEVICE_DATA_RDONLY
(   25)   MODULE PROCEDURE :: FIELD_4D_GET_DEVICE_DATA_RDONLY
(   26)   MODULE PROCEDURE :: FIELD_5D_GET_DEVICE_DATA_RDONLY
(   27)   MODULE PROCEDURE :: FIELD_INT2D_GET_DEVICE_DATA_RDONLY
(   28)   MODULE PROCEDURE :: FIELD_INT3D_GET_DEVICE_DATA_RDONLY
(   29)   MODULE PROCEDURE :: FIELD_INT4D_GET_DEVICE_DATA_RDONLY
(   30)   MODULE PROCEDURE :: FIELD_INT5D_GET_DEVICE_DATA_RDONLY
(   31)   MODULE PROCEDURE :: FIELD_LOG2D_GET_DEVICE_DATA_RDONLY
(   32)   MODULE PROCEDURE :: FIELD_LOG3D_GET_DEVICE_DATA_RDONLY
(   33)   MODULE PROCEDURE :: FIELD_LOG4D_GET_DEVICE_DATA_RDONLY
(   34)   MODULE PROCEDURE :: FIELD_LOG5D_GET_DEVICE_DATA_RDONLY
(   35) END INTERFACE GET_DEVICE_DATA_RDONLY
(   36) # 37 "field_helper_module.F90"
(   37) INTERFACE GET_DEVICE_DATA_RDWR
(   38)   MODULE PROCEDURE :: FIELD_2D_GET_DEVICE_DATA_RDWR
(   39)   MODULE PROCEDURE :: FIELD_3D_GET_DEVICE_DATA_RDWR
(   40)   MODULE PROCEDURE :: FIELD_4D_GET_DEVICE_DATA_RDWR
(   41)   MODULE PROCEDURE :: FIELD_5D_GET_DEVICE_DATA_RDWR
(   42)   MODULE PROCEDURE :: FIELD_INT2D_GET_DEVICE_DATA_RDWR
(   43)   MODULE PROCEDURE :: FIELD_INT3D_GET_DEVICE_DATA_RDWR
(   44)   MODULE PROCEDURE :: FIELD_INT4D_GET_DEVICE_DATA_RDWR
(   45)   MODULE PROCEDURE :: FIELD_INT5D_GET_DEVICE_DATA_RDWR
(   46)   MODULE PROCEDURE :: FIELD_LOG2D_GET_DEVICE_DATA_RDWR
(   47)   MODULE PROCEDURE :: FIELD_LOG3D_GET_DEVICE_DATA_RDWR
(   48)   MODULE PROCEDURE :: FIELD_LOG4D_GET_DEVICE_DATA_RDWR
(   49)   MODULE PROCEDURE :: FIELD_LOG5D_GET_DEVICE_DATA_RDWR
(   50) END INTERFACE GET_DEVICE_DATA_RDWR
(   51) # 52 "field_helper_module.F90"
(   52) INTERFACE GET_HOST_DATA_RDONLY
(   53)   MODULE PROCEDURE :: FIELD_2D_GET_HOST_DATA_RDONLY
(   54)   MODULE PROCEDURE :: FIELD_3D_GET_HOST_DATA_RDONLY
(   55)   MODULE PROCEDURE :: FIELD_4D_GET_HOST_DATA_RDONLY
(   56)   MODULE PROCEDURE :: FIELD_5D_GET_HOST_DATA_RDONLY
(   57)   MODULE PROCEDURE :: FIELD_INT2D_GET_HOST_DATA_RDONLY
(   58)   MODULE PROCEDURE :: FIELD_INT3D_GET_HOST_DATA_RDONLY
(   59)   MODULE PROCEDURE :: FIELD_INT4D_GET_HOST_DATA_RDONLY
(   60)   MODULE PROCEDURE :: FIELD_INT5D_GET_HOST_DATA_RDONLY






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 63

(   61)   MODULE PROCEDURE :: FIELD_LOG2D_GET_HOST_DATA_RDONLY
(   62)   MODULE PROCEDURE :: FIELD_LOG3D_GET_HOST_DATA_RDONLY
(   63)   MODULE PROCEDURE :: FIELD_LOG4D_GET_HOST_DATA_RDONLY
(   64)   MODULE PROCEDURE :: FIELD_LOG5D_GET_HOST_DATA_RDONLY
(   65) END INTERFACE GET_HOST_DATA_RDONLY
(   66) # 67 "field_helper_module.F90"
(   67) INTERFACE GET_HOST_DATA_RDWR
(   68)   MODULE PROCEDURE :: FIELD_2D_GET_HOST_DATA_RDWR
(   69)   MODULE PROCEDURE :: FIELD_3D_GET_HOST_DATA_RDWR
(   70)   MODULE PROCEDURE :: FIELD_4D_GET_HOST_DATA_RDWR
(   71)   MODULE PROCEDURE :: FIELD_5D_GET_HOST_DATA_RDWR
(   72)   MODULE PROCEDURE :: FIELD_INT2D_GET_HOST_DATA_RDWR
(   73)   MODULE PROCEDURE :: FIELD_INT3D_GET_HOST_DATA_RDWR
(   74)   MODULE PROCEDURE :: FIELD_INT4D_GET_HOST_DATA_RDWR
(   75)   MODULE PROCEDURE :: FIELD_INT5D_GET_HOST_DATA_RDWR
(   76)   MODULE PROCEDURE :: FIELD_LOG2D_GET_HOST_DATA_RDWR
(   77)   MODULE PROCEDURE :: FIELD_LOG3D_GET_HOST_DATA_RDWR
(   78)   MODULE PROCEDURE :: FIELD_LOG4D_GET_HOST_DATA_RDWR
(   79)   MODULE PROCEDURE :: FIELD_LOG5D_GET_HOST_DATA_RDWR
(   80) END INTERFACE GET_HOST_DATA_RDWR
(   81) # 82 "field_helper_module.F90"
(   82) INTEGER (KIND=JPIM), PARAMETER, PRIVATE :: NH2D = 1, ND2H = 2, NRD = B'00000001', NWR = B'00000010'
(   83) # 84 "field_helper_module.F90"
(   84) CONTAINS
(   85) # 87 "field_helper_module.F90"
(   87)   INTEGER (KIND=JPIM) FUNCTION FIELD_2D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(   88)   REAL(KIND=JPRB), POINTER :: PTR (:,:)
(   89)   INTEGER*8 :: ISTRIDE (2)
(   90)   INTEGER (KIND=JPIM) :: J
(   91) # 92 "field_helper_module.F90"
(   92)   ISTRIDE (1) = KIND (PTR)
(   93)   DO J = 2, 2
(   94)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(   95)   ENDDO
(   96) # 97 "field_helper_module.F90"
(   97)   JDIM = 0
(   98)   IF (LOC (PTR (2, 1)) - LOC (PTR (1, 1)) /= ISTRIDE (1)) THEN
(   99)     RETURN
(  100)   ENDIF
(  101) # 102 "field_helper_module.F90"
(  102)   JDIM = 1
(  103) # 104 "field_helper_module.F90"
(  104)   IF (LOC (PTR (1, 2)) - LOC (PTR (1, 1)) /= ISTRIDE (2)) THEN
(  105)     RETURN
(  106)   ENDIF
(  107) # 108 "field_helper_module.F90"
(  108)   JDIM = 2
(  109) # 110 "field_helper_module.F90"
(  110)   END FUNCTION FIELD_2D_GET_LAST_CONTIGUOUS_DIMENSION
(  111) # 112 "field_helper_module.F90"
(  112)   SUBROUTINE FIELD_2D_COPY (HST, DEV, KDIR)
(  113)   REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  114)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  115)   INTEGER (KIND=JPIM) :: JDIM
(  116) # 117 "field_helper_module.F90"
(  117)   JDIM = FIELD_2D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  118) # 119 "field_helper_module.F90"
(  119)   SELECT CASE (JDIM)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 64

(  120)     CASE (0)
(  121)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  122)     CASE (1)
(  123)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  124)     CASE (2)
(  125)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  126)   END SELECT
(  127) # 128 "field_helper_module.F90"
(  128)   CONTAINS
(  129) # 130 "field_helper_module.F90"
(  130)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  131) # 132 "field_helper_module.F90"
(  132)     USE OPENACC
(  133) # 134 "field_helper_module.F90"
(  134)     REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  135)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  136)     INTEGER (KIND=JPIM) :: ISIZE
(  137)     INTEGER :: J, J1, J2
(  138) # 139 "field_helper_module.F90"
(  139)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  140)       DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  141)         ISIZE = KIND (HST)
(  142)         IF (KDIR == NH2D) THEN
(  143)           !$acc host_data use_device (DEV)
(  144) # 145 "field_helper_module.F90"
(  145)           CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2), HST (J1, J2), ISIZE)
(  146) # 147 "field_helper_module.F90"
(  147)           !$acc end host_data
(  148)         ELSEIF (KDIR == ND2H) THEN
(  149)           !$acc host_data use_device (DEV)
(  150) # 151 "field_helper_module.F90"
(  151)           CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2), DEV (J1, J2), ISIZE)
(  152) # 153 "field_helper_module.F90"
(  153)           !$acc end host_data
(  154)         ENDIF
(  155)       ENDDO
(  156)     ENDDO
(  157)     END SUBROUTINE
(  158) # 159 "field_helper_module.F90"
(  159)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  160) # 161 "field_helper_module.F90"
(  161)     USE OPENACC
(  162) # 163 "field_helper_module.F90"
(  163)     REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  164)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  165)     INTEGER (KIND=JPIM) :: ISIZE
(  166)     INTEGER :: J, J2
(  167) # 168 "field_helper_module.F90"
(  168)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  169)       ISIZE = KIND (HST) * SIZE (HST (:, J2))
(  170)       IF (KDIR == NH2D) THEN
(  171)         !$acc host_data use_device (DEV)
(  172) # 173 "field_helper_module.F90"
(  173)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2), HST (:, J2), ISIZE)
(  174) # 175 "field_helper_module.F90"
(  175)         !$acc end host_data
(  176)       ELSEIF (KDIR == ND2H) THEN
(  177)         !$acc host_data use_device (DEV)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 65

(  178) # 179 "field_helper_module.F90"
(  179)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2), DEV (:, J2), ISIZE)
(  180) # 181 "field_helper_module.F90"
(  181)         !$acc end host_data
(  182)       ENDIF
(  183)     ENDDO
(  184)     END SUBROUTINE
(  185) # 186 "field_helper_module.F90"
(  186)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  187) # 188 "field_helper_module.F90"
(  188)     USE OPENACC
(  189) # 190 "field_helper_module.F90"
(  190)     REAL(KIND=JPRB), POINTER :: HST (:,:), DEV (:,:)
(  191)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  192)     INTEGER (KIND=JPIM) :: ISIZE
(  193)     INTEGER :: J
(  194) # 195 "field_helper_module.F90"
(  195)         ISIZE = KIND (HST) * SIZE (HST (:, :))
(  196)         IF (KDIR == NH2D) THEN
(  197)           !$acc host_data use_device (DEV)
(  198) # 199 "field_helper_module.F90"
(  199)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :), HST (:, :), ISIZE)
(  200) # 201 "field_helper_module.F90"
(  201)           !$acc end host_data
(  202)         ELSEIF (KDIR == ND2H) THEN
(  203)           !$acc host_data use_device (DEV)
(  204) # 205 "field_helper_module.F90"
(  205)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :), DEV (:, :), ISIZE)
(  206) # 207 "field_helper_module.F90"
(  207)           !$acc end host_data
(  208)         ENDIF
(  209)     END SUBROUTINE
(  210) # 211 "field_helper_module.F90"
(  211)   END SUBROUTINE FIELD_2D_COPY
(  212) # 213 "field_helper_module.F90"
(  213)   FUNCTION FIELD_2D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
(  214)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  215)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  216)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1)
(  217)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  218) # 219 "field_helper_module.F90"
(  219)     IF (ASSOCIATED (SELF)) THEN
(  220)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
(  221)         CALL FIELD_2D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
(  222)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
(  223)       ENDIF
(  224)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%PTR (:,:)
(  225)       IF (IAND (MODE, NWR) /= 0) THEN
(  226)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
(  227)       ENDIF
(  228)     ELSE
(  229)       PTR => ZDUM
(  230)     ENDIF
(  231) # 232 "field_helper_module.F90"
(  232)   END FUNCTION FIELD_2D_GET_HOST_DATA_
(  233) # 234 "field_helper_module.F90"
(  234)   FUNCTION FIELD_2D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
(  235)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 66

(  236)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  237) # 238 "field_helper_module.F90"
(  238)     PTR => FIELD_2D_GET_HOST_DATA_ (SELF, NRD)
(  239) # 240 "field_helper_module.F90"
(  240)   END FUNCTION FIELD_2D_GET_HOST_DATA_RDONLY
(  241) # 242 "field_helper_module.F90"
(  242)   FUNCTION FIELD_2D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
(  243)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  244)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  245) # 246 "field_helper_module.F90"
(  246)     PTR => FIELD_2D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
(  247) # 248 "field_helper_module.F90"
(  248)   END FUNCTION FIELD_2D_GET_HOST_DATA_RDWR
(  249) # 250 "field_helper_module.F90"
(  250)   FUNCTION FIELD_2D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
(  251)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  252)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  253)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1)
(  254)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  255) # 256 "field_helper_module.F90"
(  256)     IF (ASSOCIATED (SELF)) THEN
(  257)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
(  258)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
(  259)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
(  260)           !$acc enter data create (SELF%DEVPTR)
(  261)         ENDIF
(  262)         CALL FIELD_2D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
(  263)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
(  264)       ENDIF
(  265)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%DEVPTR (:,:)
(  266)       IF (IAND (MODE, NWR) /= 0) THEN
(  267)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
(  268)       ENDIF
(  269)     ELSE
(  270)       PTR => ZDUM
(  271)     ENDIF
(  272) # 273 "field_helper_module.F90"
(  273)   END FUNCTION FIELD_2D_GET_DEVICE_DATA_
(  274) # 275 "field_helper_module.F90"
(  275)   FUNCTION FIELD_2D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
(  276)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  277)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  278) # 279 "field_helper_module.F90"
(  279)     PTR => FIELD_2D_GET_DEVICE_DATA_ (SELF, NRD)
(  280) # 281 "field_helper_module.F90"
(  281)   END FUNCTION FIELD_2D_GET_DEVICE_DATA_RDONLY
(  282) # 283 "field_helper_module.F90"
(  283)   FUNCTION FIELD_2D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
(  284)     TYPE(FIELD_2D), POINTER, INTENT (IN) :: SELF
(  285)     REAL(KIND=JPRB), POINTER :: PTR(:,:)
(  286) # 287 "field_helper_module.F90"
(  287)     PTR => FIELD_2D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
(  288) # 289 "field_helper_module.F90"
(  289)   END FUNCTION FIELD_2D_GET_DEVICE_DATA_RDWR
(  290) # 292 "field_helper_module.F90"
(  292)   INTEGER (KIND=JPIM) FUNCTION FIELD_3D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(  293)   REAL(KIND=JPRB), POINTER :: PTR (:,:,:)
(  294)   INTEGER*8 :: ISTRIDE (3)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 67

(  295)   INTEGER (KIND=JPIM) :: J
(  296) # 297 "field_helper_module.F90"
(  297)   ISTRIDE (1) = KIND (PTR)
(  298)   DO J = 2, 3
(  299)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(  300)   ENDDO
(  301) # 302 "field_helper_module.F90"
(  302)   JDIM = 0
(  303)   IF (LOC (PTR (2, 1, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (1)) THEN
(  304)     RETURN
(  305)   ENDIF
(  306) # 307 "field_helper_module.F90"
(  307)   JDIM = 1
(  308) # 309 "field_helper_module.F90"
(  309)   IF (LOC (PTR (1, 2, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (2)) THEN
(  310)     RETURN
(  311)   ENDIF
(  312) # 313 "field_helper_module.F90"
(  313)   JDIM = 2
(  314) # 315 "field_helper_module.F90"
(  315)   IF (LOC (PTR (1, 1, 2)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (3)) THEN
(  316)     RETURN
(  317)   ENDIF
(  318) # 319 "field_helper_module.F90"
(  319)   JDIM = 3
(  320) # 321 "field_helper_module.F90"
(  321)   END FUNCTION FIELD_3D_GET_LAST_CONTIGUOUS_DIMENSION
(  322) # 323 "field_helper_module.F90"
(  323)   SUBROUTINE FIELD_3D_COPY (HST, DEV, KDIR)
(  324)   REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  325)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  326)   INTEGER (KIND=JPIM) :: JDIM
(  327) # 328 "field_helper_module.F90"
(  328)   JDIM = FIELD_3D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  329) # 330 "field_helper_module.F90"
(  330)   SELECT CASE (JDIM)
(  331)     CASE (0)
(  332)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  333)     CASE (1)
(  334)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  335)     CASE (2)
(  336)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  337)     CASE (3)
(  338)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  339)   END SELECT
(  340) # 341 "field_helper_module.F90"
(  341)   CONTAINS
(  342) # 343 "field_helper_module.F90"
(  343)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  344) # 345 "field_helper_module.F90"
(  345)     USE OPENACC
(  346) # 347 "field_helper_module.F90"
(  347)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  348)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  349)     INTEGER (KIND=JPIM) :: ISIZE
(  350)     INTEGER :: J, J1, J2, J3
(  351) # 352 "field_helper_module.F90"
(  352)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 68

(  353)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  354)         DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  355)           ISIZE = KIND (HST)
(  356)           IF (KDIR == NH2D) THEN
(  357)             !$acc host_data use_device (DEV)
(  358) # 359 "field_helper_module.F90"
(  359)             CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3), HST (J1, J2, J3), ISIZE)
(  360) # 361 "field_helper_module.F90"
(  361)             !$acc end host_data
(  362)           ELSEIF (KDIR == ND2H) THEN
(  363)             !$acc host_data use_device (DEV)
(  364) # 365 "field_helper_module.F90"
(  365)             CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3), DEV (J1, J2, J3), ISIZE)
(  366) # 367 "field_helper_module.F90"
(  367)             !$acc end host_data
(  368)           ENDIF
(  369)         ENDDO
(  370)       ENDDO
(  371)     ENDDO
(  372)     END SUBROUTINE
(  373) # 374 "field_helper_module.F90"
(  374)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  375) # 376 "field_helper_module.F90"
(  376)     USE OPENACC
(  377) # 378 "field_helper_module.F90"
(  378)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  379)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  380)     INTEGER (KIND=JPIM) :: ISIZE
(  381)     INTEGER :: J, J2, J3
(  382) # 383 "field_helper_module.F90"
(  383)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  384)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  385)         ISIZE = KIND (HST) * SIZE (HST (:, J2, J3))
(  386)         IF (KDIR == NH2D) THEN
(  387)           !$acc host_data use_device (DEV)
(  388) # 389 "field_helper_module.F90"
(  389)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3), HST (:, J2, J3), ISIZE)
(  390) # 391 "field_helper_module.F90"
(  391)           !$acc end host_data
(  392)         ELSEIF (KDIR == ND2H) THEN
(  393)           !$acc host_data use_device (DEV)
(  394) # 395 "field_helper_module.F90"
(  395)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3), DEV (:, J2, J3), ISIZE)
(  396) # 397 "field_helper_module.F90"
(  397)           !$acc end host_data
(  398)         ENDIF
(  399)       ENDDO
(  400)     ENDDO
(  401)     END SUBROUTINE
(  402) # 403 "field_helper_module.F90"
(  403)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  404) # 405 "field_helper_module.F90"
(  405)     USE OPENACC
(  406) # 407 "field_helper_module.F90"
(  407)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  408)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  409)     INTEGER (KIND=JPIM) :: ISIZE
(  410)     INTEGER :: J, J3






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 69

(  411) # 412 "field_helper_module.F90"
(  412)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  413)       ISIZE = KIND (HST) * SIZE (HST (:, :, J3))
(  414)       IF (KDIR == NH2D) THEN
(  415)         !$acc host_data use_device (DEV)
(  416) # 417 "field_helper_module.F90"
(  417)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3), HST (:, :, J3), ISIZE)
(  418) # 419 "field_helper_module.F90"
(  419)         !$acc end host_data
(  420)       ELSEIF (KDIR == ND2H) THEN
(  421)         !$acc host_data use_device (DEV)
(  422) # 423 "field_helper_module.F90"
(  423)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3), DEV (:, :, J3), ISIZE)
(  424) # 425 "field_helper_module.F90"
(  425)         !$acc end host_data
(  426)       ENDIF
(  427)     ENDDO
(  428)     END SUBROUTINE
(  429) # 430 "field_helper_module.F90"
(  430)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  431) # 432 "field_helper_module.F90"
(  432)     USE OPENACC
(  433) # 434 "field_helper_module.F90"
(  434)     REAL(KIND=JPRB), POINTER :: HST (:,:,:), DEV (:,:,:)
(  435)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  436)     INTEGER (KIND=JPIM) :: ISIZE
(  437)     INTEGER :: J
(  438) # 439 "field_helper_module.F90"
(  439)         ISIZE = KIND (HST) * SIZE (HST (:, :, :))
(  440)         IF (KDIR == NH2D) THEN
(  441)           !$acc host_data use_device (DEV)
(  442) # 443 "field_helper_module.F90"
(  443)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :), HST (:, :, :), ISIZE)
(  444) # 445 "field_helper_module.F90"
(  445)           !$acc end host_data
(  446)         ELSEIF (KDIR == ND2H) THEN
(  447)           !$acc host_data use_device (DEV)
(  448) # 449 "field_helper_module.F90"
(  449)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :), DEV (:, :, :), ISIZE)
(  450) # 451 "field_helper_module.F90"
(  451)           !$acc end host_data
(  452)         ENDIF
(  453)     END SUBROUTINE
(  454) # 455 "field_helper_module.F90"
(  455)   END SUBROUTINE FIELD_3D_COPY
(  456) # 457 "field_helper_module.F90"
(  457)   FUNCTION FIELD_3D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
(  458)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  459)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  460)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1)
(  461)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  462) # 463 "field_helper_module.F90"
(  463)     IF (ASSOCIATED (SELF)) THEN
(  464)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
(  465)         CALL FIELD_3D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
(  466)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
(  467)       ENDIF
(  468)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%PTR (:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 70

(  469)       IF (IAND (MODE, NWR) /= 0) THEN
(  470)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
(  471)       ENDIF
(  472)     ELSE
(  473)       PTR => ZDUM
(  474)     ENDIF
(  475) # 476 "field_helper_module.F90"
(  476)   END FUNCTION FIELD_3D_GET_HOST_DATA_
(  477) # 478 "field_helper_module.F90"
(  478)   FUNCTION FIELD_3D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
(  479)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  480)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  481) # 482 "field_helper_module.F90"
(  482)     PTR => FIELD_3D_GET_HOST_DATA_ (SELF, NRD)
(  483) # 484 "field_helper_module.F90"
(  484)   END FUNCTION FIELD_3D_GET_HOST_DATA_RDONLY
(  485) # 486 "field_helper_module.F90"
(  486)   FUNCTION FIELD_3D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
(  487)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  488)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  489) # 490 "field_helper_module.F90"
(  490)     PTR => FIELD_3D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
(  491) # 492 "field_helper_module.F90"
(  492)   END FUNCTION FIELD_3D_GET_HOST_DATA_RDWR
(  493) # 494 "field_helper_module.F90"
(  494)   FUNCTION FIELD_3D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
(  495)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  496)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  497)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1)
(  498)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  499) # 500 "field_helper_module.F90"
(  500)     IF (ASSOCIATED (SELF)) THEN
(  501)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
(  502)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
(  503)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
(  504)           !$acc enter data create (SELF%DEVPTR)
(  505)         ENDIF
(  506)         CALL FIELD_3D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
(  507)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
(  508)       ENDIF
(  509)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%DEVPTR (:,:,:)
(  510)       IF (IAND (MODE, NWR) /= 0) THEN
(  511)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
(  512)       ENDIF
(  513)     ELSE
(  514)       PTR => ZDUM
(  515)     ENDIF
(  516) # 517 "field_helper_module.F90"
(  517)   END FUNCTION FIELD_3D_GET_DEVICE_DATA_
(  518) # 519 "field_helper_module.F90"
(  519)   FUNCTION FIELD_3D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
(  520)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  521)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  522) # 523 "field_helper_module.F90"
(  523)     PTR => FIELD_3D_GET_DEVICE_DATA_ (SELF, NRD)
(  524) # 525 "field_helper_module.F90"
(  525)   END FUNCTION FIELD_3D_GET_DEVICE_DATA_RDONLY
(  526) # 527 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 71

(  527)   FUNCTION FIELD_3D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
(  528)     TYPE(FIELD_3D), POINTER, INTENT (IN) :: SELF
(  529)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:)
(  530) # 531 "field_helper_module.F90"
(  531)     PTR => FIELD_3D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
(  532) # 533 "field_helper_module.F90"
(  533)   END FUNCTION FIELD_3D_GET_DEVICE_DATA_RDWR
(  534) # 536 "field_helper_module.F90"
(  536)   INTEGER (KIND=JPIM) FUNCTION FIELD_4D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(  537)   REAL(KIND=JPRB), POINTER :: PTR (:,:,:,:)
(  538)   INTEGER*8 :: ISTRIDE (4)
(  539)   INTEGER (KIND=JPIM) :: J
(  540) # 541 "field_helper_module.F90"
(  541)   ISTRIDE (1) = KIND (PTR)
(  542)   DO J = 2, 4
(  543)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(  544)   ENDDO
(  545) # 546 "field_helper_module.F90"
(  546)   JDIM = 0
(  547)   IF (LOC (PTR (2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (1)) THEN
(  548)     RETURN
(  549)   ENDIF
(  550) # 551 "field_helper_module.F90"
(  551)   JDIM = 1
(  552) # 553 "field_helper_module.F90"
(  553)   IF (LOC (PTR (1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (2)) THEN
(  554)     RETURN
(  555)   ENDIF
(  556) # 557 "field_helper_module.F90"
(  557)   JDIM = 2
(  558) # 559 "field_helper_module.F90"
(  559)   IF (LOC (PTR (1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (3)) THEN
(  560)     RETURN
(  561)   ENDIF
(  562) # 563 "field_helper_module.F90"
(  563)   JDIM = 3
(  564) # 565 "field_helper_module.F90"
(  565)   IF (LOC (PTR (1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (4)) THEN
(  566)     RETURN
(  567)   ENDIF
(  568) # 569 "field_helper_module.F90"
(  569)   JDIM = 4
(  570) # 571 "field_helper_module.F90"
(  571)   END FUNCTION FIELD_4D_GET_LAST_CONTIGUOUS_DIMENSION
(  572) # 573 "field_helper_module.F90"
(  573)   SUBROUTINE FIELD_4D_COPY (HST, DEV, KDIR)
(  574)   REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  575)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  576)   INTEGER (KIND=JPIM) :: JDIM
(  577) # 578 "field_helper_module.F90"
(  578)   JDIM = FIELD_4D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  579) # 580 "field_helper_module.F90"
(  580)   SELECT CASE (JDIM)
(  581)     CASE (0)
(  582)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  583)     CASE (1)
(  584)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  585)     CASE (2)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 72

(  586)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  587)     CASE (3)
(  588)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  589)     CASE (4)
(  590)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
(  591)   END SELECT
(  592) # 593 "field_helper_module.F90"
(  593)   CONTAINS
(  594) # 595 "field_helper_module.F90"
(  595)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  596) # 597 "field_helper_module.F90"
(  597)     USE OPENACC
(  598) # 599 "field_helper_module.F90"
(  599)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  600)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  601)     INTEGER (KIND=JPIM) :: ISIZE
(  602)     INTEGER :: J, J1, J2, J3, J4
(  603) # 604 "field_helper_module.F90"
(  604)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  605)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  606)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  607)           DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  608)             ISIZE = KIND (HST)
(  609)             IF (KDIR == NH2D) THEN
(  610)               !$acc host_data use_device (DEV)
(  611) # 612 "field_helper_module.F90"
(  612)               CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4), HST (J1, J2, J3, J4), ISIZE)
(  613) # 614 "field_helper_module.F90"
(  614)               !$acc end host_data
(  615)             ELSEIF (KDIR == ND2H) THEN
(  616)               !$acc host_data use_device (DEV)
(  617) # 618 "field_helper_module.F90"
(  618)               CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4), DEV (J1, J2, J3, J4), ISIZE)
(  619) # 620 "field_helper_module.F90"
(  620)               !$acc end host_data
(  621)             ENDIF
(  622)           ENDDO
(  623)         ENDDO
(  624)       ENDDO
(  625)     ENDDO
(  626)     END SUBROUTINE
(  627) # 628 "field_helper_module.F90"
(  628)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  629) # 630 "field_helper_module.F90"
(  630)     USE OPENACC
(  631) # 632 "field_helper_module.F90"
(  632)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  633)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  634)     INTEGER (KIND=JPIM) :: ISIZE
(  635)     INTEGER :: J, J2, J3, J4
(  636) # 637 "field_helper_module.F90"
(  637)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  638)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  639)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  640)           ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4))
(  641)           IF (KDIR == NH2D) THEN
(  642)             !$acc host_data use_device (DEV)
(  643) # 644 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 73

(  644)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4), HST (:, J2, J3, J4), ISIZE)
(  645) # 646 "field_helper_module.F90"
(  646)             !$acc end host_data
(  647)           ELSEIF (KDIR == ND2H) THEN
(  648)             !$acc host_data use_device (DEV)
(  649) # 650 "field_helper_module.F90"
(  650)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4), DEV (:, J2, J3, J4), ISIZE)
(  651) # 652 "field_helper_module.F90"
(  652)             !$acc end host_data
(  653)           ENDIF
(  654)         ENDDO
(  655)       ENDDO
(  656)     ENDDO
(  657)     END SUBROUTINE
(  658) # 659 "field_helper_module.F90"
(  659)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  660) # 661 "field_helper_module.F90"
(  661)     USE OPENACC
(  662) # 663 "field_helper_module.F90"
(  663)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  664)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  665)     INTEGER (KIND=JPIM) :: ISIZE
(  666)     INTEGER :: J, J3, J4
(  667) # 668 "field_helper_module.F90"
(  668)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  669)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  670)         ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4))
(  671)         IF (KDIR == NH2D) THEN
(  672)           !$acc host_data use_device (DEV)
(  673) # 674 "field_helper_module.F90"
(  674)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4), HST (:, :, J3, J4), ISIZE)
(  675) # 676 "field_helper_module.F90"
(  676)           !$acc end host_data
(  677)         ELSEIF (KDIR == ND2H) THEN
(  678)           !$acc host_data use_device (DEV)
(  679) # 680 "field_helper_module.F90"
(  680)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4), DEV (:, :, J3, J4), ISIZE)
(  681) # 682 "field_helper_module.F90"
(  682)           !$acc end host_data
(  683)         ENDIF
(  684)       ENDDO
(  685)     ENDDO
(  686)     END SUBROUTINE
(  687) # 688 "field_helper_module.F90"
(  688)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  689) # 690 "field_helper_module.F90"
(  690)     USE OPENACC
(  691) # 692 "field_helper_module.F90"
(  692)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  693)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  694)     INTEGER (KIND=JPIM) :: ISIZE
(  695)     INTEGER :: J, J4
(  696) # 697 "field_helper_module.F90"
(  697)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  698)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4))
(  699)       IF (KDIR == NH2D) THEN
(  700)         !$acc host_data use_device (DEV)
(  701) # 702 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 74

(  702)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4), HST (:, :, :, J4), ISIZE)
(  703) # 704 "field_helper_module.F90"
(  704)         !$acc end host_data
(  705)       ELSEIF (KDIR == ND2H) THEN
(  706)         !$acc host_data use_device (DEV)
(  707) # 708 "field_helper_module.F90"
(  708)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4), DEV (:, :, :, J4), ISIZE)
(  709) # 710 "field_helper_module.F90"
(  710)         !$acc end host_data
(  711)       ENDIF
(  712)     ENDDO
(  713)     END SUBROUTINE
(  714) # 715 "field_helper_module.F90"
(  715)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
(  716) # 717 "field_helper_module.F90"
(  717)     USE OPENACC
(  718) # 719 "field_helper_module.F90"
(  719)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
(  720)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  721)     INTEGER (KIND=JPIM) :: ISIZE
(  722)     INTEGER :: J
(  723) # 724 "field_helper_module.F90"
(  724)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :))
(  725)         IF (KDIR == NH2D) THEN
(  726)           !$acc host_data use_device (DEV)
(  727) # 728 "field_helper_module.F90"
(  728)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :), HST (:, :, :, :), ISIZE)
(  729) # 730 "field_helper_module.F90"
(  730)           !$acc end host_data
(  731)         ELSEIF (KDIR == ND2H) THEN
(  732)           !$acc host_data use_device (DEV)
(  733) # 734 "field_helper_module.F90"
(  734)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :), DEV (:, :, :, :), ISIZE)
(  735) # 736 "field_helper_module.F90"
(  736)           !$acc end host_data
(  737)         ENDIF
(  738)     END SUBROUTINE
(  739) # 740 "field_helper_module.F90"
(  740)   END SUBROUTINE FIELD_4D_COPY
(  741) # 742 "field_helper_module.F90"
(  742)   FUNCTION FIELD_4D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
(  743)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  744)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  745)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
(  746)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  747) # 748 "field_helper_module.F90"
(  748)     IF (ASSOCIATED (SELF)) THEN
(  749)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
(  750)         CALL FIELD_4D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
(  751)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
(  752)       ENDIF
(  753)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%PTR (:,:,:,:)
(  754)       IF (IAND (MODE, NWR) /= 0) THEN
(  755)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
(  756)       ENDIF
(  757)     ELSE
(  758)       PTR => ZDUM
(  759)     ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 75

(  760) # 761 "field_helper_module.F90"
(  761)   END FUNCTION FIELD_4D_GET_HOST_DATA_
(  762) # 763 "field_helper_module.F90"
(  763)   FUNCTION FIELD_4D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
(  764)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  765)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  766) # 767 "field_helper_module.F90"
(  767)     PTR => FIELD_4D_GET_HOST_DATA_ (SELF, NRD)
(  768) # 769 "field_helper_module.F90"
(  769)   END FUNCTION FIELD_4D_GET_HOST_DATA_RDONLY
(  770) # 771 "field_helper_module.F90"
(  771)   FUNCTION FIELD_4D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
(  772)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  773)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  774) # 775 "field_helper_module.F90"
(  775)     PTR => FIELD_4D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
(  776) # 777 "field_helper_module.F90"
(  777)   END FUNCTION FIELD_4D_GET_HOST_DATA_RDWR
(  778) # 779 "field_helper_module.F90"
(  779)   FUNCTION FIELD_4D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
(  780)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  781)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
(  782)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
(  783)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  784) # 785 "field_helper_module.F90"
(  785)     IF (ASSOCIATED (SELF)) THEN
(  786)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
(  787)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
(  788)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
(  789)           !$acc enter data create (SELF%DEVPTR)
(  790)         ENDIF
(  791)         CALL FIELD_4D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
(  792)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
(  793)       ENDIF
(  794)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%DEVPTR (:,:,:,:)
(  795)       IF (IAND (MODE, NWR) /= 0) THEN
(  796)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
(  797)       ENDIF
(  798)     ELSE
(  799)       PTR => ZDUM
(  800)     ENDIF
(  801) # 802 "field_helper_module.F90"
(  802)   END FUNCTION FIELD_4D_GET_DEVICE_DATA_
(  803) # 804 "field_helper_module.F90"
(  804)   FUNCTION FIELD_4D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
(  805)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  806)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  807) # 808 "field_helper_module.F90"
(  808)     PTR => FIELD_4D_GET_DEVICE_DATA_ (SELF, NRD)
(  809) # 810 "field_helper_module.F90"
(  810)   END FUNCTION FIELD_4D_GET_DEVICE_DATA_RDONLY
(  811) # 812 "field_helper_module.F90"
(  812)   FUNCTION FIELD_4D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
(  813)     TYPE(FIELD_4D), POINTER, INTENT (IN) :: SELF
(  814)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:)
(  815) # 816 "field_helper_module.F90"
(  816)     PTR => FIELD_4D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
(  817) # 818 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 76

(  818)   END FUNCTION FIELD_4D_GET_DEVICE_DATA_RDWR
(  819) # 821 "field_helper_module.F90"
(  821)   INTEGER (KIND=JPIM) FUNCTION FIELD_5D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
(  822)   REAL(KIND=JPRB), POINTER :: PTR (:,:,:,:,:)
(  823)   INTEGER*8 :: ISTRIDE (5)
(  824)   INTEGER (KIND=JPIM) :: J
(  825) # 826 "field_helper_module.F90"
(  826)   ISTRIDE (1) = KIND (PTR)
(  827)   DO J = 2, 5
(  828)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
(  829)   ENDDO
(  830) # 831 "field_helper_module.F90"
(  831)   JDIM = 0
(  832)   IF (LOC (PTR (2, 1, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (1)) THEN
(  833)     RETURN
(  834)   ENDIF
(  835) # 836 "field_helper_module.F90"
(  836)   JDIM = 1
(  837) # 838 "field_helper_module.F90"
(  838)   IF (LOC (PTR (1, 2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (2)) THEN
(  839)     RETURN
(  840)   ENDIF
(  841) # 842 "field_helper_module.F90"
(  842)   JDIM = 2
(  843) # 844 "field_helper_module.F90"
(  844)   IF (LOC (PTR (1, 1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (3)) THEN
(  845)     RETURN
(  846)   ENDIF
(  847) # 848 "field_helper_module.F90"
(  848)   JDIM = 3
(  849) # 850 "field_helper_module.F90"
(  850)   IF (LOC (PTR (1, 1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (4)) THEN
(  851)     RETURN
(  852)   ENDIF
(  853) # 854 "field_helper_module.F90"
(  854)   JDIM = 4
(  855) # 856 "field_helper_module.F90"
(  856)   IF (LOC (PTR (1, 1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (5)) THEN
(  857)     RETURN
(  858)   ENDIF
(  859) # 860 "field_helper_module.F90"
(  860)   JDIM = 5
(  861) # 862 "field_helper_module.F90"
(  862)   END FUNCTION FIELD_5D_GET_LAST_CONTIGUOUS_DIMENSION
(  863) # 864 "field_helper_module.F90"
(  864)   SUBROUTINE FIELD_5D_COPY (HST, DEV, KDIR)
(  865)   REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  866)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  867)   INTEGER (KIND=JPIM) :: JDIM
(  868) # 869 "field_helper_module.F90"
(  869)   JDIM = FIELD_5D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
(  870) # 871 "field_helper_module.F90"
(  871)   SELECT CASE (JDIM)
(  872)     CASE (0)
(  873)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  874)     CASE (1)
(  875)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  876)     CASE (2)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 77

(  877)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  878)     CASE (3)
(  879)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  880)     CASE (4)
(  881)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
(  882)     CASE (5)
(  883)       CALL COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
(  884)   END SELECT
(  885) # 886 "field_helper_module.F90"
(  886)   CONTAINS
(  887) # 888 "field_helper_module.F90"
(  888)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
(  889) # 890 "field_helper_module.F90"
(  890)     USE OPENACC
(  891) # 892 "field_helper_module.F90"
(  892)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  893)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  894)     INTEGER (KIND=JPIM) :: ISIZE
(  895)     INTEGER :: J, J1, J2, J3, J4, J5
(  896) # 897 "field_helper_module.F90"
(  897)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  898)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  899)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  900)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  901)             DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
(  902)               ISIZE = KIND (HST)
(  903)               IF (KDIR == NH2D) THEN
(  904)                 !$acc host_data use_device (DEV)
(  905) # 906 "field_helper_module.F90"
(  906)                 CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4, J5), HST (J1, J2, J3, J4, J5), ISIZE)
(  907) # 908 "field_helper_module.F90"
(  908)                 !$acc end host_data
(  909)               ELSEIF (KDIR == ND2H) THEN
(  910)                 !$acc host_data use_device (DEV)
(  911) # 912 "field_helper_module.F90"
(  912)                 CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4, J5), DEV (J1, J2, J3, J4, J5), ISIZE)
(  913) # 914 "field_helper_module.F90"
(  914)                 !$acc end host_data
(  915)               ENDIF
(  916)             ENDDO
(  917)           ENDDO
(  918)         ENDDO
(  919)       ENDDO
(  920)     ENDDO
(  921)     END SUBROUTINE
(  922) # 923 "field_helper_module.F90"
(  923)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
(  924) # 925 "field_helper_module.F90"
(  925)     USE OPENACC
(  926) # 927 "field_helper_module.F90"
(  927)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  928)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  929)     INTEGER (KIND=JPIM) :: ISIZE
(  930)     INTEGER :: J, J2, J3, J4, J5
(  931) # 932 "field_helper_module.F90"
(  932)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  933)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  934)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 78

(  935)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
(  936)             ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4, J5))
(  937)             IF (KDIR == NH2D) THEN
(  938)               !$acc host_data use_device (DEV)
(  939) # 940 "field_helper_module.F90"
(  940)               CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4, J5), HST (:, J2, J3, J4, J5), ISIZE)
(  941) # 942 "field_helper_module.F90"
(  942)               !$acc end host_data
(  943)             ELSEIF (KDIR == ND2H) THEN
(  944)               !$acc host_data use_device (DEV)
(  945) # 946 "field_helper_module.F90"
(  946)               CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4, J5), DEV (:, J2, J3, J4, J5), ISIZE)
(  947) # 948 "field_helper_module.F90"
(  948)               !$acc end host_data
(  949)             ENDIF
(  950)           ENDDO
(  951)         ENDDO
(  952)       ENDDO
(  953)     ENDDO
(  954)     END SUBROUTINE
(  955) # 956 "field_helper_module.F90"
(  956)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
(  957) # 958 "field_helper_module.F90"
(  958)     USE OPENACC
(  959) # 960 "field_helper_module.F90"
(  960)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  961)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
(  962)     INTEGER (KIND=JPIM) :: ISIZE
(  963)     INTEGER :: J, J3, J4, J5
(  964) # 965 "field_helper_module.F90"
(  965)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  966)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  967)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
(  968)           ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4, J5))
(  969)           IF (KDIR == NH2D) THEN
(  970)             !$acc host_data use_device (DEV)
(  971) # 972 "field_helper_module.F90"
(  972)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4, J5), HST (:, :, J3, J4, J5), ISIZE)
(  973) # 974 "field_helper_module.F90"
(  974)             !$acc end host_data
(  975)           ELSEIF (KDIR == ND2H) THEN
(  976)             !$acc host_data use_device (DEV)
(  977) # 978 "field_helper_module.F90"
(  978)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4, J5), DEV (:, :, J3, J4, J5), ISIZE)
(  979) # 980 "field_helper_module.F90"
(  980)             !$acc end host_data
(  981)           ENDIF
(  982)         ENDDO
(  983)       ENDDO
(  984)     ENDDO
(  985)     END SUBROUTINE
(  986) # 987 "field_helper_module.F90"
(  987)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
(  988) # 989 "field_helper_module.F90"
(  989)     USE OPENACC
(  990) # 991 "field_helper_module.F90"
(  991)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
(  992)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 79

(  993)     INTEGER (KIND=JPIM) :: ISIZE
(  994)     INTEGER :: J, J4, J5
(  995) # 996 "field_helper_module.F90"
(  996)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
(  997)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
(  998)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4, J5))
(  999)         IF (KDIR == NH2D) THEN
( 1000)           !$acc host_data use_device (DEV)
( 1001) # 1002 "field_helper_module.F90"
( 1002)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4, J5), HST (:, :, :, J4, J5), ISIZE)
( 1003) # 1004 "field_helper_module.F90"
( 1004)           !$acc end host_data
( 1005)         ELSEIF (KDIR == ND2H) THEN
( 1006)           !$acc host_data use_device (DEV)
( 1007) # 1008 "field_helper_module.F90"
( 1008)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4, J5), DEV (:, :, :, J4, J5), ISIZE)
( 1009) # 1010 "field_helper_module.F90"
( 1010)           !$acc end host_data
( 1011)         ENDIF
( 1012)       ENDDO
( 1013)     ENDDO
( 1014)     END SUBROUTINE
( 1015) # 1016 "field_helper_module.F90"
( 1016)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1017) # 1018 "field_helper_module.F90"
( 1018)     USE OPENACC
( 1019) # 1020 "field_helper_module.F90"
( 1020)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1021)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1022)     INTEGER (KIND=JPIM) :: ISIZE
( 1023)     INTEGER :: J, J5
( 1024) # 1025 "field_helper_module.F90"
( 1025)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 1026)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, J5))
( 1027)       IF (KDIR == NH2D) THEN
( 1028)         !$acc host_data use_device (DEV)
( 1029) # 1030 "field_helper_module.F90"
( 1030)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, J5), HST (:, :, :, :, J5), ISIZE)
( 1031) # 1032 "field_helper_module.F90"
( 1032)         !$acc end host_data
( 1033)       ELSEIF (KDIR == ND2H) THEN
( 1034)         !$acc host_data use_device (DEV)
( 1035) # 1036 "field_helper_module.F90"
( 1036)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, J5), DEV (:, :, :, :, J5), ISIZE)
( 1037) # 1038 "field_helper_module.F90"
( 1038)         !$acc end host_data
( 1039)       ENDIF
( 1040)     ENDDO
( 1041)     END SUBROUTINE
( 1042) # 1043 "field_helper_module.F90"
( 1043)     SUBROUTINE COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 1044) # 1045 "field_helper_module.F90"
( 1045)     USE OPENACC
( 1046) # 1047 "field_helper_module.F90"
( 1047)     REAL(KIND=JPRB), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1048)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1049)     INTEGER (KIND=JPIM) :: ISIZE
( 1050)     INTEGER :: J






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 80

( 1051) # 1052 "field_helper_module.F90"
( 1052)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, :))
( 1053)         IF (KDIR == NH2D) THEN
( 1054)           !$acc host_data use_device (DEV)
( 1055) # 1056 "field_helper_module.F90"
( 1056)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, :), HST (:, :, :, :, :), ISIZE)
( 1057) # 1058 "field_helper_module.F90"
( 1058)           !$acc end host_data
( 1059)         ELSEIF (KDIR == ND2H) THEN
( 1060)           !$acc host_data use_device (DEV)
( 1061) # 1062 "field_helper_module.F90"
( 1062)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, :), DEV (:, :, :, :, :), ISIZE)
( 1063) # 1064 "field_helper_module.F90"
( 1064)           !$acc end host_data
( 1065)         ENDIF
( 1066)     END SUBROUTINE
( 1067) # 1068 "field_helper_module.F90"
( 1068)   END SUBROUTINE FIELD_5D_COPY
( 1069) # 1070 "field_helper_module.F90"
( 1070)   FUNCTION FIELD_5D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1071)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1072)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1073)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 1074)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1075) # 1076 "field_helper_module.F90"
( 1076)     IF (ASSOCIATED (SELF)) THEN
( 1077)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1078)         CALL FIELD_5D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1079)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1080)       ENDIF
( 1081)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%PTR (:,:,:,:,:)
( 1082)       IF (IAND (MODE, NWR) /= 0) THEN
( 1083)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1084)       ENDIF
( 1085)     ELSE
( 1086)       PTR => ZDUM
( 1087)     ENDIF
( 1088) # 1089 "field_helper_module.F90"
( 1089)   END FUNCTION FIELD_5D_GET_HOST_DATA_
( 1090) # 1091 "field_helper_module.F90"
( 1091)   FUNCTION FIELD_5D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1092)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1093)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1094) # 1095 "field_helper_module.F90"
( 1095)     PTR => FIELD_5D_GET_HOST_DATA_ (SELF, NRD)
( 1096) # 1097 "field_helper_module.F90"
( 1097)   END FUNCTION FIELD_5D_GET_HOST_DATA_RDONLY
( 1098) # 1099 "field_helper_module.F90"
( 1099)   FUNCTION FIELD_5D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1100)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1101)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1102) # 1103 "field_helper_module.F90"
( 1103)     PTR => FIELD_5D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1104) # 1105 "field_helper_module.F90"
( 1105)   END FUNCTION FIELD_5D_GET_HOST_DATA_RDWR
( 1106) # 1107 "field_helper_module.F90"
( 1107)   FUNCTION FIELD_5D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1108)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 81

( 1109)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1110)     REAL(KIND=JPRB), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 1111)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1112) # 1113 "field_helper_module.F90"
( 1113)     IF (ASSOCIATED (SELF)) THEN
( 1114)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1115)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1116)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1117)           !$acc enter data create (SELF%DEVPTR)
( 1118)         ENDIF
( 1119)         CALL FIELD_5D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1120)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1121)       ENDIF
( 1122)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%DEVPTR (:,:,:,:,:)
( 1123)       IF (IAND (MODE, NWR) /= 0) THEN
( 1124)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1125)       ENDIF
( 1126)     ELSE
( 1127)       PTR => ZDUM
( 1128)     ENDIF
( 1129) # 1130 "field_helper_module.F90"
( 1130)   END FUNCTION FIELD_5D_GET_DEVICE_DATA_
( 1131) # 1132 "field_helper_module.F90"
( 1132)   FUNCTION FIELD_5D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1133)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1134)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1135) # 1136 "field_helper_module.F90"
( 1136)     PTR => FIELD_5D_GET_DEVICE_DATA_ (SELF, NRD)
( 1137) # 1138 "field_helper_module.F90"
( 1138)   END FUNCTION FIELD_5D_GET_DEVICE_DATA_RDONLY
( 1139) # 1140 "field_helper_module.F90"
( 1140)   FUNCTION FIELD_5D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1141)     TYPE(FIELD_5D), POINTER, INTENT (IN) :: SELF
( 1142)     REAL(KIND=JPRB), POINTER :: PTR(:,:,:,:,:)
( 1143) # 1144 "field_helper_module.F90"
( 1144)     PTR => FIELD_5D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1145) # 1146 "field_helper_module.F90"
( 1146)   END FUNCTION FIELD_5D_GET_DEVICE_DATA_RDWR
( 1147) # 1149 "field_helper_module.F90"
( 1149)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT2D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1150)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:)
( 1151)   INTEGER*8 :: ISTRIDE (2)
( 1152)   INTEGER (KIND=JPIM) :: J
( 1153) # 1154 "field_helper_module.F90"
( 1154)   ISTRIDE (1) = KIND (PTR)
( 1155)   DO J = 2, 2
( 1156)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1157)   ENDDO
( 1158) # 1159 "field_helper_module.F90"
( 1159)   JDIM = 0
( 1160)   IF (LOC (PTR (2, 1)) - LOC (PTR (1, 1)) /= ISTRIDE (1)) THEN
( 1161)     RETURN
( 1162)   ENDIF
( 1163) # 1164 "field_helper_module.F90"
( 1164)   JDIM = 1
( 1165) # 1166 "field_helper_module.F90"
( 1166)   IF (LOC (PTR (1, 2)) - LOC (PTR (1, 1)) /= ISTRIDE (2)) THEN
( 1167)     RETURN






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 82

( 1168)   ENDIF
( 1169) # 1170 "field_helper_module.F90"
( 1170)   JDIM = 2
( 1171) # 1172 "field_helper_module.F90"
( 1172)   END FUNCTION FIELD_INT2D_GET_LAST_CONTIGUOUS_DIMENSION
( 1173) # 1174 "field_helper_module.F90"
( 1174)   SUBROUTINE FIELD_INT2D_COPY (HST, DEV, KDIR)
( 1175)   INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1176)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1177)   INTEGER (KIND=JPIM) :: JDIM
( 1178) # 1179 "field_helper_module.F90"
( 1179)   JDIM = FIELD_INT2D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1180) # 1181 "field_helper_module.F90"
( 1181)   SELECT CASE (JDIM)
( 1182)     CASE (0)
( 1183)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1184)     CASE (1)
( 1185)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1186)     CASE (2)
( 1187)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1188)   END SELECT
( 1189) # 1190 "field_helper_module.F90"
( 1190)   CONTAINS
( 1191) # 1192 "field_helper_module.F90"
( 1192)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1193) # 1194 "field_helper_module.F90"
( 1194)     USE OPENACC
( 1195) # 1196 "field_helper_module.F90"
( 1196)     INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1197)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1198)     INTEGER (KIND=JPIM) :: ISIZE
( 1199)     INTEGER :: J, J1, J2
( 1200) # 1201 "field_helper_module.F90"
( 1201)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1202)       DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1203)         ISIZE = KIND (HST)
( 1204)         IF (KDIR == NH2D) THEN
( 1205)           !$acc host_data use_device (DEV)
( 1206) # 1207 "field_helper_module.F90"
( 1207)           CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2), HST (J1, J2), ISIZE)
( 1208) # 1209 "field_helper_module.F90"
( 1209)           !$acc end host_data
( 1210)         ELSEIF (KDIR == ND2H) THEN
( 1211)           !$acc host_data use_device (DEV)
( 1212) # 1213 "field_helper_module.F90"
( 1213)           CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2), DEV (J1, J2), ISIZE)
( 1214) # 1215 "field_helper_module.F90"
( 1215)           !$acc end host_data
( 1216)         ENDIF
( 1217)       ENDDO
( 1218)     ENDDO
( 1219)     END SUBROUTINE
( 1220) # 1221 "field_helper_module.F90"
( 1221)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1222) # 1223 "field_helper_module.F90"
( 1223)     USE OPENACC
( 1224) # 1225 "field_helper_module.F90"
( 1225)     INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 83

( 1226)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1227)     INTEGER (KIND=JPIM) :: ISIZE
( 1228)     INTEGER :: J, J2
( 1229) # 1230 "field_helper_module.F90"
( 1230)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1231)       ISIZE = KIND (HST) * SIZE (HST (:, J2))
( 1232)       IF (KDIR == NH2D) THEN
( 1233)         !$acc host_data use_device (DEV)
( 1234) # 1235 "field_helper_module.F90"
( 1235)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2), HST (:, J2), ISIZE)
( 1236) # 1237 "field_helper_module.F90"
( 1237)         !$acc end host_data
( 1238)       ELSEIF (KDIR == ND2H) THEN
( 1239)         !$acc host_data use_device (DEV)
( 1240) # 1241 "field_helper_module.F90"
( 1241)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2), DEV (:, J2), ISIZE)
( 1242) # 1243 "field_helper_module.F90"
( 1243)         !$acc end host_data
( 1244)       ENDIF
( 1245)     ENDDO
( 1246)     END SUBROUTINE
( 1247) # 1248 "field_helper_module.F90"
( 1248)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1249) # 1250 "field_helper_module.F90"
( 1250)     USE OPENACC
( 1251) # 1252 "field_helper_module.F90"
( 1252)     INTEGER(KIND=JPIM), POINTER :: HST (:,:), DEV (:,:)
( 1253)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1254)     INTEGER (KIND=JPIM) :: ISIZE
( 1255)     INTEGER :: J
( 1256) # 1257 "field_helper_module.F90"
( 1257)         ISIZE = KIND (HST) * SIZE (HST (:, :))
( 1258)         IF (KDIR == NH2D) THEN
( 1259)           !$acc host_data use_device (DEV)
( 1260) # 1261 "field_helper_module.F90"
( 1261)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :), HST (:, :), ISIZE)
( 1262) # 1263 "field_helper_module.F90"
( 1263)           !$acc end host_data
( 1264)         ELSEIF (KDIR == ND2H) THEN
( 1265)           !$acc host_data use_device (DEV)
( 1266) # 1267 "field_helper_module.F90"
( 1267)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :), DEV (:, :), ISIZE)
( 1268) # 1269 "field_helper_module.F90"
( 1269)           !$acc end host_data
( 1270)         ENDIF
( 1271)     END SUBROUTINE
( 1272) # 1273 "field_helper_module.F90"
( 1273)   END SUBROUTINE FIELD_INT2D_COPY
( 1274) # 1275 "field_helper_module.F90"
( 1275)   FUNCTION FIELD_INT2D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1276)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1277)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1278)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1)
( 1279)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1280) # 1281 "field_helper_module.F90"
( 1281)     IF (ASSOCIATED (SELF)) THEN
( 1282)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1283)         CALL FIELD_INT2D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 84

( 1284)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1285)       ENDIF
( 1286)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%PTR (:,:)
( 1287)       IF (IAND (MODE, NWR) /= 0) THEN
( 1288)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1289)       ENDIF
( 1290)     ELSE
( 1291)       PTR => ZDUM
( 1292)     ENDIF
( 1293) # 1294 "field_helper_module.F90"
( 1294)   END FUNCTION FIELD_INT2D_GET_HOST_DATA_
( 1295) # 1296 "field_helper_module.F90"
( 1296)   FUNCTION FIELD_INT2D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1297)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1298)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1299) # 1300 "field_helper_module.F90"
( 1300)     PTR => FIELD_INT2D_GET_HOST_DATA_ (SELF, NRD)
( 1301) # 1302 "field_helper_module.F90"
( 1302)   END FUNCTION FIELD_INT2D_GET_HOST_DATA_RDONLY
( 1303) # 1304 "field_helper_module.F90"
( 1304)   FUNCTION FIELD_INT2D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1305)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1306)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1307) # 1308 "field_helper_module.F90"
( 1308)     PTR => FIELD_INT2D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1309) # 1310 "field_helper_module.F90"
( 1310)   END FUNCTION FIELD_INT2D_GET_HOST_DATA_RDWR
( 1311) # 1312 "field_helper_module.F90"
( 1312)   FUNCTION FIELD_INT2D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1313)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1314)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1315)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1)
( 1316)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1317) # 1318 "field_helper_module.F90"
( 1318)     IF (ASSOCIATED (SELF)) THEN
( 1319)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1320)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1321)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1322)           !$acc enter data create (SELF%DEVPTR)
( 1323)         ENDIF
( 1324)         CALL FIELD_INT2D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1325)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1326)       ENDIF
( 1327)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%DEVPTR (:,:)
( 1328)       IF (IAND (MODE, NWR) /= 0) THEN
( 1329)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1330)       ENDIF
( 1331)     ELSE
( 1332)       PTR => ZDUM
( 1333)     ENDIF
( 1334) # 1335 "field_helper_module.F90"
( 1335)   END FUNCTION FIELD_INT2D_GET_DEVICE_DATA_
( 1336) # 1337 "field_helper_module.F90"
( 1337)   FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1338)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1339)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1340) # 1341 "field_helper_module.F90"
( 1341)     PTR => FIELD_INT2D_GET_DEVICE_DATA_ (SELF, NRD)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 85

( 1342) # 1343 "field_helper_module.F90"
( 1343)   END FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDONLY
( 1344) # 1345 "field_helper_module.F90"
( 1345)   FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1346)     TYPE(FIELD_INT2D), POINTER, INTENT (IN) :: SELF
( 1347)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:)
( 1348) # 1349 "field_helper_module.F90"
( 1349)     PTR => FIELD_INT2D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1350) # 1351 "field_helper_module.F90"
( 1351)   END FUNCTION FIELD_INT2D_GET_DEVICE_DATA_RDWR
( 1352) # 1354 "field_helper_module.F90"
( 1354)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT3D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1355)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:,:)
( 1356)   INTEGER*8 :: ISTRIDE (3)
( 1357)   INTEGER (KIND=JPIM) :: J
( 1358) # 1359 "field_helper_module.F90"
( 1359)   ISTRIDE (1) = KIND (PTR)
( 1360)   DO J = 2, 3
( 1361)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1362)   ENDDO
( 1363) # 1364 "field_helper_module.F90"
( 1364)   JDIM = 0
( 1365)   IF (LOC (PTR (2, 1, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (1)) THEN
( 1366)     RETURN
( 1367)   ENDIF
( 1368) # 1369 "field_helper_module.F90"
( 1369)   JDIM = 1
( 1370) # 1371 "field_helper_module.F90"
( 1371)   IF (LOC (PTR (1, 2, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (2)) THEN
( 1372)     RETURN
( 1373)   ENDIF
( 1374) # 1375 "field_helper_module.F90"
( 1375)   JDIM = 2
( 1376) # 1377 "field_helper_module.F90"
( 1377)   IF (LOC (PTR (1, 1, 2)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (3)) THEN
( 1378)     RETURN
( 1379)   ENDIF
( 1380) # 1381 "field_helper_module.F90"
( 1381)   JDIM = 3
( 1382) # 1383 "field_helper_module.F90"
( 1383)   END FUNCTION FIELD_INT3D_GET_LAST_CONTIGUOUS_DIMENSION
( 1384) # 1385 "field_helper_module.F90"
( 1385)   SUBROUTINE FIELD_INT3D_COPY (HST, DEV, KDIR)
( 1386)   INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1387)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1388)   INTEGER (KIND=JPIM) :: JDIM
( 1389) # 1390 "field_helper_module.F90"
( 1390)   JDIM = FIELD_INT3D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1391) # 1392 "field_helper_module.F90"
( 1392)   SELECT CASE (JDIM)
( 1393)     CASE (0)
( 1394)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1395)     CASE (1)
( 1396)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1397)     CASE (2)
( 1398)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1399)     CASE (3)
( 1400)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 86

( 1401)   END SELECT
( 1402) # 1403 "field_helper_module.F90"
( 1403)   CONTAINS
( 1404) # 1405 "field_helper_module.F90"
( 1405)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1406) # 1407 "field_helper_module.F90"
( 1407)     USE OPENACC
( 1408) # 1409 "field_helper_module.F90"
( 1409)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1410)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1411)     INTEGER (KIND=JPIM) :: ISIZE
( 1412)     INTEGER :: J, J1, J2, J3
( 1413) # 1414 "field_helper_module.F90"
( 1414)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1415)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1416)         DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1417)           ISIZE = KIND (HST)
( 1418)           IF (KDIR == NH2D) THEN
( 1419)             !$acc host_data use_device (DEV)
( 1420) # 1421 "field_helper_module.F90"
( 1421)             CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3), HST (J1, J2, J3), ISIZE)
( 1422) # 1423 "field_helper_module.F90"
( 1423)             !$acc end host_data
( 1424)           ELSEIF (KDIR == ND2H) THEN
( 1425)             !$acc host_data use_device (DEV)
( 1426) # 1427 "field_helper_module.F90"
( 1427)             CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3), DEV (J1, J2, J3), ISIZE)
( 1428) # 1429 "field_helper_module.F90"
( 1429)             !$acc end host_data
( 1430)           ENDIF
( 1431)         ENDDO
( 1432)       ENDDO
( 1433)     ENDDO
( 1434)     END SUBROUTINE
( 1435) # 1436 "field_helper_module.F90"
( 1436)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1437) # 1438 "field_helper_module.F90"
( 1438)     USE OPENACC
( 1439) # 1440 "field_helper_module.F90"
( 1440)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1441)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1442)     INTEGER (KIND=JPIM) :: ISIZE
( 1443)     INTEGER :: J, J2, J3
( 1444) # 1445 "field_helper_module.F90"
( 1445)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1446)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1447)         ISIZE = KIND (HST) * SIZE (HST (:, J2, J3))
( 1448)         IF (KDIR == NH2D) THEN
( 1449)           !$acc host_data use_device (DEV)
( 1450) # 1451 "field_helper_module.F90"
( 1451)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3), HST (:, J2, J3), ISIZE)
( 1452) # 1453 "field_helper_module.F90"
( 1453)           !$acc end host_data
( 1454)         ELSEIF (KDIR == ND2H) THEN
( 1455)           !$acc host_data use_device (DEV)
( 1456) # 1457 "field_helper_module.F90"
( 1457)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3), DEV (:, J2, J3), ISIZE)
( 1458) # 1459 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 87

( 1459)           !$acc end host_data
( 1460)         ENDIF
( 1461)       ENDDO
( 1462)     ENDDO
( 1463)     END SUBROUTINE
( 1464) # 1465 "field_helper_module.F90"
( 1465)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1466) # 1467 "field_helper_module.F90"
( 1467)     USE OPENACC
( 1468) # 1469 "field_helper_module.F90"
( 1469)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1470)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1471)     INTEGER (KIND=JPIM) :: ISIZE
( 1472)     INTEGER :: J, J3
( 1473) # 1474 "field_helper_module.F90"
( 1474)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1475)       ISIZE = KIND (HST) * SIZE (HST (:, :, J3))
( 1476)       IF (KDIR == NH2D) THEN
( 1477)         !$acc host_data use_device (DEV)
( 1478) # 1479 "field_helper_module.F90"
( 1479)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3), HST (:, :, J3), ISIZE)
( 1480) # 1481 "field_helper_module.F90"
( 1481)         !$acc end host_data
( 1482)       ELSEIF (KDIR == ND2H) THEN
( 1483)         !$acc host_data use_device (DEV)
( 1484) # 1485 "field_helper_module.F90"
( 1485)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3), DEV (:, :, J3), ISIZE)
( 1486) # 1487 "field_helper_module.F90"
( 1487)         !$acc end host_data
( 1488)       ENDIF
( 1489)     ENDDO
( 1490)     END SUBROUTINE
( 1491) # 1492 "field_helper_module.F90"
( 1492)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1493) # 1494 "field_helper_module.F90"
( 1494)     USE OPENACC
( 1495) # 1496 "field_helper_module.F90"
( 1496)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:), DEV (:,:,:)
( 1497)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1498)     INTEGER (KIND=JPIM) :: ISIZE
( 1499)     INTEGER :: J
( 1500) # 1501 "field_helper_module.F90"
( 1501)         ISIZE = KIND (HST) * SIZE (HST (:, :, :))
( 1502)         IF (KDIR == NH2D) THEN
( 1503)           !$acc host_data use_device (DEV)
( 1504) # 1505 "field_helper_module.F90"
( 1505)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :), HST (:, :, :), ISIZE)
( 1506) # 1507 "field_helper_module.F90"
( 1507)           !$acc end host_data
( 1508)         ELSEIF (KDIR == ND2H) THEN
( 1509)           !$acc host_data use_device (DEV)
( 1510) # 1511 "field_helper_module.F90"
( 1511)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :), DEV (:, :, :), ISIZE)
( 1512) # 1513 "field_helper_module.F90"
( 1513)           !$acc end host_data
( 1514)         ENDIF
( 1515)     END SUBROUTINE
( 1516) # 1517 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 88

( 1517)   END SUBROUTINE FIELD_INT3D_COPY
( 1518) # 1519 "field_helper_module.F90"
( 1519)   FUNCTION FIELD_INT3D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1520)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1521)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1522)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1)
( 1523)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1524) # 1525 "field_helper_module.F90"
( 1525)     IF (ASSOCIATED (SELF)) THEN
( 1526)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1527)         CALL FIELD_INT3D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1528)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1529)       ENDIF
( 1530)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%PTR (:,:,:)
( 1531)       IF (IAND (MODE, NWR) /= 0) THEN
( 1532)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1533)       ENDIF
( 1534)     ELSE
( 1535)       PTR => ZDUM
( 1536)     ENDIF
( 1537) # 1538 "field_helper_module.F90"
( 1538)   END FUNCTION FIELD_INT3D_GET_HOST_DATA_
( 1539) # 1540 "field_helper_module.F90"
( 1540)   FUNCTION FIELD_INT3D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1541)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1542)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1543) # 1544 "field_helper_module.F90"
( 1544)     PTR => FIELD_INT3D_GET_HOST_DATA_ (SELF, NRD)
( 1545) # 1546 "field_helper_module.F90"
( 1546)   END FUNCTION FIELD_INT3D_GET_HOST_DATA_RDONLY
( 1547) # 1548 "field_helper_module.F90"
( 1548)   FUNCTION FIELD_INT3D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1549)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1550)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1551) # 1552 "field_helper_module.F90"
( 1552)     PTR => FIELD_INT3D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1553) # 1554 "field_helper_module.F90"
( 1554)   END FUNCTION FIELD_INT3D_GET_HOST_DATA_RDWR
( 1555) # 1556 "field_helper_module.F90"
( 1556)   FUNCTION FIELD_INT3D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1557)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1558)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1559)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1)
( 1560)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1561) # 1562 "field_helper_module.F90"
( 1562)     IF (ASSOCIATED (SELF)) THEN
( 1563)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1564)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1565)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1566)           !$acc enter data create (SELF%DEVPTR)
( 1567)         ENDIF
( 1568)         CALL FIELD_INT3D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1569)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1570)       ENDIF
( 1571)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%DEVPTR (:,:,:)
( 1572)       IF (IAND (MODE, NWR) /= 0) THEN
( 1573)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1574)       ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 89

( 1575)     ELSE
( 1576)       PTR => ZDUM
( 1577)     ENDIF
( 1578) # 1579 "field_helper_module.F90"
( 1579)   END FUNCTION FIELD_INT3D_GET_DEVICE_DATA_
( 1580) # 1581 "field_helper_module.F90"
( 1581)   FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1582)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1583)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1584) # 1585 "field_helper_module.F90"
( 1585)     PTR => FIELD_INT3D_GET_DEVICE_DATA_ (SELF, NRD)
( 1586) # 1587 "field_helper_module.F90"
( 1587)   END FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDONLY
( 1588) # 1589 "field_helper_module.F90"
( 1589)   FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1590)     TYPE(FIELD_INT3D), POINTER, INTENT (IN) :: SELF
( 1591)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:)
( 1592) # 1593 "field_helper_module.F90"
( 1593)     PTR => FIELD_INT3D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1594) # 1595 "field_helper_module.F90"
( 1595)   END FUNCTION FIELD_INT3D_GET_DEVICE_DATA_RDWR
( 1596) # 1598 "field_helper_module.F90"
( 1598)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT4D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1599)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:,:,:)
( 1600)   INTEGER*8 :: ISTRIDE (4)
( 1601)   INTEGER (KIND=JPIM) :: J
( 1602) # 1603 "field_helper_module.F90"
( 1603)   ISTRIDE (1) = KIND (PTR)
( 1604)   DO J = 2, 4
( 1605)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1606)   ENDDO
( 1607) # 1608 "field_helper_module.F90"
( 1608)   JDIM = 0
( 1609)   IF (LOC (PTR (2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 1610)     RETURN
( 1611)   ENDIF
( 1612) # 1613 "field_helper_module.F90"
( 1613)   JDIM = 1
( 1614) # 1615 "field_helper_module.F90"
( 1615)   IF (LOC (PTR (1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 1616)     RETURN
( 1617)   ENDIF
( 1618) # 1619 "field_helper_module.F90"
( 1619)   JDIM = 2
( 1620) # 1621 "field_helper_module.F90"
( 1621)   IF (LOC (PTR (1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 1622)     RETURN
( 1623)   ENDIF
( 1624) # 1625 "field_helper_module.F90"
( 1625)   JDIM = 3
( 1626) # 1627 "field_helper_module.F90"
( 1627)   IF (LOC (PTR (1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 1628)     RETURN
( 1629)   ENDIF
( 1630) # 1631 "field_helper_module.F90"
( 1631)   JDIM = 4
( 1632) # 1633 "field_helper_module.F90"
( 1633)   END FUNCTION FIELD_INT4D_GET_LAST_CONTIGUOUS_DIMENSION






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 90

( 1634) # 1635 "field_helper_module.F90"
( 1635)   SUBROUTINE FIELD_INT4D_COPY (HST, DEV, KDIR)
( 1636)   INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1637)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1638)   INTEGER (KIND=JPIM) :: JDIM
( 1639) # 1640 "field_helper_module.F90"
( 1640)   JDIM = FIELD_INT4D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1641) # 1642 "field_helper_module.F90"
( 1642)   SELECT CASE (JDIM)
( 1643)     CASE (0)
( 1644)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1645)     CASE (1)
( 1646)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1647)     CASE (2)
( 1648)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1649)     CASE (3)
( 1650)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1651)     CASE (4)
( 1652)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1653)   END SELECT
( 1654) # 1655 "field_helper_module.F90"
( 1655)   CONTAINS
( 1656) # 1657 "field_helper_module.F90"
( 1657)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1658) # 1659 "field_helper_module.F90"
( 1659)     USE OPENACC
( 1660) # 1661 "field_helper_module.F90"
( 1661)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1662)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1663)     INTEGER (KIND=JPIM) :: ISIZE
( 1664)     INTEGER :: J, J1, J2, J3, J4
( 1665) # 1666 "field_helper_module.F90"
( 1666)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1667)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1668)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1669)           DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1670)             ISIZE = KIND (HST)
( 1671)             IF (KDIR == NH2D) THEN
( 1672)               !$acc host_data use_device (DEV)
( 1673) # 1674 "field_helper_module.F90"
( 1674)               CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4), HST (J1, J2, J3, J4), ISIZE)
( 1675) # 1676 "field_helper_module.F90"
( 1676)               !$acc end host_data
( 1677)             ELSEIF (KDIR == ND2H) THEN
( 1678)               !$acc host_data use_device (DEV)
( 1679) # 1680 "field_helper_module.F90"
( 1680)               CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4), DEV (J1, J2, J3, J4), ISIZE)
( 1681) # 1682 "field_helper_module.F90"
( 1682)               !$acc end host_data
( 1683)             ENDIF
( 1684)           ENDDO
( 1685)         ENDDO
( 1686)       ENDDO
( 1687)     ENDDO
( 1688)     END SUBROUTINE
( 1689) # 1690 "field_helper_module.F90"
( 1690)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1691) # 1692 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 91

( 1692)     USE OPENACC
( 1693) # 1694 "field_helper_module.F90"
( 1694)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1695)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1696)     INTEGER (KIND=JPIM) :: ISIZE
( 1697)     INTEGER :: J, J2, J3, J4
( 1698) # 1699 "field_helper_module.F90"
( 1699)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1700)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1701)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1702)           ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4))
( 1703)           IF (KDIR == NH2D) THEN
( 1704)             !$acc host_data use_device (DEV)
( 1705) # 1706 "field_helper_module.F90"
( 1706)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4), HST (:, J2, J3, J4), ISIZE)
( 1707) # 1708 "field_helper_module.F90"
( 1708)             !$acc end host_data
( 1709)           ELSEIF (KDIR == ND2H) THEN
( 1710)             !$acc host_data use_device (DEV)
( 1711) # 1712 "field_helper_module.F90"
( 1712)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4), DEV (:, J2, J3, J4), ISIZE)
( 1713) # 1714 "field_helper_module.F90"
( 1714)             !$acc end host_data
( 1715)           ENDIF
( 1716)         ENDDO
( 1717)       ENDDO
( 1718)     ENDDO
( 1719)     END SUBROUTINE
( 1720) # 1721 "field_helper_module.F90"
( 1721)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1722) # 1723 "field_helper_module.F90"
( 1723)     USE OPENACC
( 1724) # 1725 "field_helper_module.F90"
( 1725)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1726)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1727)     INTEGER (KIND=JPIM) :: ISIZE
( 1728)     INTEGER :: J, J3, J4
( 1729) # 1730 "field_helper_module.F90"
( 1730)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1731)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1732)         ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4))
( 1733)         IF (KDIR == NH2D) THEN
( 1734)           !$acc host_data use_device (DEV)
( 1735) # 1736 "field_helper_module.F90"
( 1736)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4), HST (:, :, J3, J4), ISIZE)
( 1737) # 1738 "field_helper_module.F90"
( 1738)           !$acc end host_data
( 1739)         ELSEIF (KDIR == ND2H) THEN
( 1740)           !$acc host_data use_device (DEV)
( 1741) # 1742 "field_helper_module.F90"
( 1742)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4), DEV (:, :, J3, J4), ISIZE)
( 1743) # 1744 "field_helper_module.F90"
( 1744)           !$acc end host_data
( 1745)         ENDIF
( 1746)       ENDDO
( 1747)     ENDDO
( 1748)     END SUBROUTINE
( 1749) # 1750 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 92

( 1750)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1751) # 1752 "field_helper_module.F90"
( 1752)     USE OPENACC
( 1753) # 1754 "field_helper_module.F90"
( 1754)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1755)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1756)     INTEGER (KIND=JPIM) :: ISIZE
( 1757)     INTEGER :: J, J4
( 1758) # 1759 "field_helper_module.F90"
( 1759)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1760)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4))
( 1761)       IF (KDIR == NH2D) THEN
( 1762)         !$acc host_data use_device (DEV)
( 1763) # 1764 "field_helper_module.F90"
( 1764)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4), HST (:, :, :, J4), ISIZE)
( 1765) # 1766 "field_helper_module.F90"
( 1766)         !$acc end host_data
( 1767)       ELSEIF (KDIR == ND2H) THEN
( 1768)         !$acc host_data use_device (DEV)
( 1769) # 1770 "field_helper_module.F90"
( 1770)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4), DEV (:, :, :, J4), ISIZE)
( 1771) # 1772 "field_helper_module.F90"
( 1772)         !$acc end host_data
( 1773)       ENDIF
( 1774)     ENDDO
( 1775)     END SUBROUTINE
( 1776) # 1777 "field_helper_module.F90"
( 1777)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1778) # 1779 "field_helper_module.F90"
( 1779)     USE OPENACC
( 1780) # 1781 "field_helper_module.F90"
( 1781)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 1782)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1783)     INTEGER (KIND=JPIM) :: ISIZE
( 1784)     INTEGER :: J
( 1785) # 1786 "field_helper_module.F90"
( 1786)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :))
( 1787)         IF (KDIR == NH2D) THEN
( 1788)           !$acc host_data use_device (DEV)
( 1789) # 1790 "field_helper_module.F90"
( 1790)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :), HST (:, :, :, :), ISIZE)
( 1791) # 1792 "field_helper_module.F90"
( 1792)           !$acc end host_data
( 1793)         ELSEIF (KDIR == ND2H) THEN
( 1794)           !$acc host_data use_device (DEV)
( 1795) # 1796 "field_helper_module.F90"
( 1796)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :), DEV (:, :, :, :), ISIZE)
( 1797) # 1798 "field_helper_module.F90"
( 1798)           !$acc end host_data
( 1799)         ENDIF
( 1800)     END SUBROUTINE
( 1801) # 1802 "field_helper_module.F90"
( 1802)   END SUBROUTINE FIELD_INT4D_COPY
( 1803) # 1804 "field_helper_module.F90"
( 1804)   FUNCTION FIELD_INT4D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 1805)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1806)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1807)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 93

( 1808)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1809) # 1810 "field_helper_module.F90"
( 1810)     IF (ASSOCIATED (SELF)) THEN
( 1811)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 1812)         CALL FIELD_INT4D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 1813)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 1814)       ENDIF
( 1815)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%PTR (:,:,:,:)
( 1816)       IF (IAND (MODE, NWR) /= 0) THEN
( 1817)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 1818)       ENDIF
( 1819)     ELSE
( 1820)       PTR => ZDUM
( 1821)     ENDIF
( 1822) # 1823 "field_helper_module.F90"
( 1823)   END FUNCTION FIELD_INT4D_GET_HOST_DATA_
( 1824) # 1825 "field_helper_module.F90"
( 1825)   FUNCTION FIELD_INT4D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 1826)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1827)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1828) # 1829 "field_helper_module.F90"
( 1829)     PTR => FIELD_INT4D_GET_HOST_DATA_ (SELF, NRD)
( 1830) # 1831 "field_helper_module.F90"
( 1831)   END FUNCTION FIELD_INT4D_GET_HOST_DATA_RDONLY
( 1832) # 1833 "field_helper_module.F90"
( 1833)   FUNCTION FIELD_INT4D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 1834)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1835)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1836) # 1837 "field_helper_module.F90"
( 1837)     PTR => FIELD_INT4D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 1838) # 1839 "field_helper_module.F90"
( 1839)   END FUNCTION FIELD_INT4D_GET_HOST_DATA_RDWR
( 1840) # 1841 "field_helper_module.F90"
( 1841)   FUNCTION FIELD_INT4D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 1842)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1843)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 1844)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 1845)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1846) # 1847 "field_helper_module.F90"
( 1847)     IF (ASSOCIATED (SELF)) THEN
( 1848)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 1849)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 1850)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 1851)           !$acc enter data create (SELF%DEVPTR)
( 1852)         ENDIF
( 1853)         CALL FIELD_INT4D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 1854)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 1855)       ENDIF
( 1856)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%DEVPTR (:,:,:,:)
( 1857)       IF (IAND (MODE, NWR) /= 0) THEN
( 1858)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 1859)       ENDIF
( 1860)     ELSE
( 1861)       PTR => ZDUM
( 1862)     ENDIF
( 1863) # 1864 "field_helper_module.F90"
( 1864)   END FUNCTION FIELD_INT4D_GET_DEVICE_DATA_
( 1865) # 1866 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 94

( 1866)   FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 1867)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1868)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1869) # 1870 "field_helper_module.F90"
( 1870)     PTR => FIELD_INT4D_GET_DEVICE_DATA_ (SELF, NRD)
( 1871) # 1872 "field_helper_module.F90"
( 1872)   END FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDONLY
( 1873) # 1874 "field_helper_module.F90"
( 1874)   FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 1875)     TYPE(FIELD_INT4D), POINTER, INTENT (IN) :: SELF
( 1876)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:)
( 1877) # 1878 "field_helper_module.F90"
( 1878)     PTR => FIELD_INT4D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 1879) # 1880 "field_helper_module.F90"
( 1880)   END FUNCTION FIELD_INT4D_GET_DEVICE_DATA_RDWR
( 1881) # 1883 "field_helper_module.F90"
( 1883)   INTEGER (KIND=JPIM) FUNCTION FIELD_INT5D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 1884)   INTEGER(KIND=JPIM), POINTER :: PTR (:,:,:,:,:)
( 1885)   INTEGER*8 :: ISTRIDE (5)
( 1886)   INTEGER (KIND=JPIM) :: J
( 1887) # 1888 "field_helper_module.F90"
( 1888)   ISTRIDE (1) = KIND (PTR)
( 1889)   DO J = 2, 5
( 1890)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 1891)   ENDDO
( 1892) # 1893 "field_helper_module.F90"
( 1893)   JDIM = 0
( 1894)   IF (LOC (PTR (2, 1, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 1895)     RETURN
( 1896)   ENDIF
( 1897) # 1898 "field_helper_module.F90"
( 1898)   JDIM = 1
( 1899) # 1900 "field_helper_module.F90"
( 1900)   IF (LOC (PTR (1, 2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 1901)     RETURN
( 1902)   ENDIF
( 1903) # 1904 "field_helper_module.F90"
( 1904)   JDIM = 2
( 1905) # 1906 "field_helper_module.F90"
( 1906)   IF (LOC (PTR (1, 1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 1907)     RETURN
( 1908)   ENDIF
( 1909) # 1910 "field_helper_module.F90"
( 1910)   JDIM = 3
( 1911) # 1912 "field_helper_module.F90"
( 1912)   IF (LOC (PTR (1, 1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 1913)     RETURN
( 1914)   ENDIF
( 1915) # 1916 "field_helper_module.F90"
( 1916)   JDIM = 4
( 1917) # 1918 "field_helper_module.F90"
( 1918)   IF (LOC (PTR (1, 1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (5)) THEN
( 1919)     RETURN
( 1920)   ENDIF
( 1921) # 1922 "field_helper_module.F90"
( 1922)   JDIM = 5
( 1923) # 1924 "field_helper_module.F90"
( 1924)   END FUNCTION FIELD_INT5D_GET_LAST_CONTIGUOUS_DIMENSION






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 95

( 1925) # 1926 "field_helper_module.F90"
( 1926)   SUBROUTINE FIELD_INT5D_COPY (HST, DEV, KDIR)
( 1927)   INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1928)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1929)   INTEGER (KIND=JPIM) :: JDIM
( 1930) # 1931 "field_helper_module.F90"
( 1931)   JDIM = FIELD_INT5D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 1932) # 1933 "field_helper_module.F90"
( 1933)   SELECT CASE (JDIM)
( 1934)     CASE (0)
( 1935)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1936)     CASE (1)
( 1937)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1938)     CASE (2)
( 1939)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 1940)     CASE (3)
( 1941)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 1942)     CASE (4)
( 1943)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 1944)     CASE (5)
( 1945)       CALL COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 1946)   END SELECT
( 1947) # 1948 "field_helper_module.F90"
( 1948)   CONTAINS
( 1949) # 1950 "field_helper_module.F90"
( 1950)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 1951) # 1952 "field_helper_module.F90"
( 1952)     USE OPENACC
( 1953) # 1954 "field_helper_module.F90"
( 1954)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1955)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1956)     INTEGER (KIND=JPIM) :: ISIZE
( 1957)     INTEGER :: J, J1, J2, J3, J4, J5
( 1958) # 1959 "field_helper_module.F90"
( 1959)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 1960)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1961)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1962)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1963)             DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 1964)               ISIZE = KIND (HST)
( 1965)               IF (KDIR == NH2D) THEN
( 1966)                 !$acc host_data use_device (DEV)
( 1967) # 1968 "field_helper_module.F90"
( 1968)                 CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4, J5), HST (J1, J2, J3, J4, J5), ISIZE)
( 1969) # 1970 "field_helper_module.F90"
( 1970)                 !$acc end host_data
( 1971)               ELSEIF (KDIR == ND2H) THEN
( 1972)                 !$acc host_data use_device (DEV)
( 1973) # 1974 "field_helper_module.F90"
( 1974)                 CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4, J5), DEV (J1, J2, J3, J4, J5), ISIZE)
( 1975) # 1976 "field_helper_module.F90"
( 1976)                 !$acc end host_data
( 1977)               ENDIF
( 1978)             ENDDO
( 1979)           ENDDO
( 1980)         ENDDO
( 1981)       ENDDO
( 1982)     ENDDO






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 96

( 1983)     END SUBROUTINE
( 1984) # 1985 "field_helper_module.F90"
( 1985)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 1986) # 1987 "field_helper_module.F90"
( 1987)     USE OPENACC
( 1988) # 1989 "field_helper_module.F90"
( 1989)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 1990)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 1991)     INTEGER (KIND=JPIM) :: ISIZE
( 1992)     INTEGER :: J, J2, J3, J4, J5
( 1993) # 1994 "field_helper_module.F90"
( 1994)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 1995)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 1996)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 1997)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 1998)             ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4, J5))
( 1999)             IF (KDIR == NH2D) THEN
( 2000)               !$acc host_data use_device (DEV)
( 2001) # 2002 "field_helper_module.F90"
( 2002)               CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4, J5), HST (:, J2, J3, J4, J5), ISIZE)
( 2003) # 2004 "field_helper_module.F90"
( 2004)               !$acc end host_data
( 2005)             ELSEIF (KDIR == ND2H) THEN
( 2006)               !$acc host_data use_device (DEV)
( 2007) # 2008 "field_helper_module.F90"
( 2008)               CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4, J5), DEV (:, J2, J3, J4, J5), ISIZE)
( 2009) # 2010 "field_helper_module.F90"
( 2010)               !$acc end host_data
( 2011)             ENDIF
( 2012)           ENDDO
( 2013)         ENDDO
( 2014)       ENDDO
( 2015)     ENDDO
( 2016)     END SUBROUTINE
( 2017) # 2018 "field_helper_module.F90"
( 2018)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2019) # 2020 "field_helper_module.F90"
( 2020)     USE OPENACC
( 2021) # 2022 "field_helper_module.F90"
( 2022)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2023)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2024)     INTEGER (KIND=JPIM) :: ISIZE
( 2025)     INTEGER :: J, J3, J4, J5
( 2026) # 2027 "field_helper_module.F90"
( 2027)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 2028)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2029)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2030)           ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4, J5))
( 2031)           IF (KDIR == NH2D) THEN
( 2032)             !$acc host_data use_device (DEV)
( 2033) # 2034 "field_helper_module.F90"
( 2034)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4, J5), HST (:, :, J3, J4, J5), ISIZE)
( 2035) # 2036 "field_helper_module.F90"
( 2036)             !$acc end host_data
( 2037)           ELSEIF (KDIR == ND2H) THEN
( 2038)             !$acc host_data use_device (DEV)
( 2039) # 2040 "field_helper_module.F90"
( 2040)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4, J5), DEV (:, :, J3, J4, J5), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 97

( 2041) # 2042 "field_helper_module.F90"
( 2042)             !$acc end host_data
( 2043)           ENDIF
( 2044)         ENDDO
( 2045)       ENDDO
( 2046)     ENDDO
( 2047)     END SUBROUTINE
( 2048) # 2049 "field_helper_module.F90"
( 2049)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2050) # 2051 "field_helper_module.F90"
( 2051)     USE OPENACC
( 2052) # 2053 "field_helper_module.F90"
( 2053)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2054)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2055)     INTEGER (KIND=JPIM) :: ISIZE
( 2056)     INTEGER :: J, J4, J5
( 2057) # 2058 "field_helper_module.F90"
( 2058)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 2059)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2060)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4, J5))
( 2061)         IF (KDIR == NH2D) THEN
( 2062)           !$acc host_data use_device (DEV)
( 2063) # 2064 "field_helper_module.F90"
( 2064)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4, J5), HST (:, :, :, J4, J5), ISIZE)
( 2065) # 2066 "field_helper_module.F90"
( 2066)           !$acc end host_data
( 2067)         ELSEIF (KDIR == ND2H) THEN
( 2068)           !$acc host_data use_device (DEV)
( 2069) # 2070 "field_helper_module.F90"
( 2070)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4, J5), DEV (:, :, :, J4, J5), ISIZE)
( 2071) # 2072 "field_helper_module.F90"
( 2072)           !$acc end host_data
( 2073)         ENDIF
( 2074)       ENDDO
( 2075)     ENDDO
( 2076)     END SUBROUTINE
( 2077) # 2078 "field_helper_module.F90"
( 2078)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 2079) # 2080 "field_helper_module.F90"
( 2080)     USE OPENACC
( 2081) # 2082 "field_helper_module.F90"
( 2082)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2083)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2084)     INTEGER (KIND=JPIM) :: ISIZE
( 2085)     INTEGER :: J, J5
( 2086) # 2087 "field_helper_module.F90"
( 2087)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 2088)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, J5))
( 2089)       IF (KDIR == NH2D) THEN
( 2090)         !$acc host_data use_device (DEV)
( 2091) # 2092 "field_helper_module.F90"
( 2092)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, J5), HST (:, :, :, :, J5), ISIZE)
( 2093) # 2094 "field_helper_module.F90"
( 2094)         !$acc end host_data
( 2095)       ELSEIF (KDIR == ND2H) THEN
( 2096)         !$acc host_data use_device (DEV)
( 2097) # 2098 "field_helper_module.F90"
( 2098)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, J5), DEV (:, :, :, :, J5), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 98

( 2099) # 2100 "field_helper_module.F90"
( 2100)         !$acc end host_data
( 2101)       ENDIF
( 2102)     ENDDO
( 2103)     END SUBROUTINE
( 2104) # 2105 "field_helper_module.F90"
( 2105)     SUBROUTINE COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 2106) # 2107 "field_helper_module.F90"
( 2107)     USE OPENACC
( 2108) # 2109 "field_helper_module.F90"
( 2109)     INTEGER(KIND=JPIM), POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2110)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2111)     INTEGER (KIND=JPIM) :: ISIZE
( 2112)     INTEGER :: J
( 2113) # 2114 "field_helper_module.F90"
( 2114)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, :))
( 2115)         IF (KDIR == NH2D) THEN
( 2116)           !$acc host_data use_device (DEV)
( 2117) # 2118 "field_helper_module.F90"
( 2118)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, :), HST (:, :, :, :, :), ISIZE)
( 2119) # 2120 "field_helper_module.F90"
( 2120)           !$acc end host_data
( 2121)         ELSEIF (KDIR == ND2H) THEN
( 2122)           !$acc host_data use_device (DEV)
( 2123) # 2124 "field_helper_module.F90"
( 2124)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, :), DEV (:, :, :, :, :), ISIZE)
( 2125) # 2126 "field_helper_module.F90"
( 2126)           !$acc end host_data
( 2127)         ENDIF
( 2128)     END SUBROUTINE
( 2129) # 2130 "field_helper_module.F90"
( 2130)   END SUBROUTINE FIELD_INT5D_COPY
( 2131) # 2132 "field_helper_module.F90"
( 2132)   FUNCTION FIELD_INT5D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2133)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2134)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2135)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 2136)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2137) # 2138 "field_helper_module.F90"
( 2138)     IF (ASSOCIATED (SELF)) THEN
( 2139)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2140)         CALL FIELD_INT5D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2141)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2142)       ENDIF
( 2143)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%PTR (:,:,:,:,:)
( 2144)       IF (IAND (MODE, NWR) /= 0) THEN
( 2145)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2146)       ENDIF
( 2147)     ELSE
( 2148)       PTR => ZDUM
( 2149)     ENDIF
( 2150) # 2151 "field_helper_module.F90"
( 2151)   END FUNCTION FIELD_INT5D_GET_HOST_DATA_
( 2152) # 2153 "field_helper_module.F90"
( 2153)   FUNCTION FIELD_INT5D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2154)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2155)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2156) # 2157 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 99

( 2157)     PTR => FIELD_INT5D_GET_HOST_DATA_ (SELF, NRD)
( 2158) # 2159 "field_helper_module.F90"
( 2159)   END FUNCTION FIELD_INT5D_GET_HOST_DATA_RDONLY
( 2160) # 2161 "field_helper_module.F90"
( 2161)   FUNCTION FIELD_INT5D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2162)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2163)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2164) # 2165 "field_helper_module.F90"
( 2165)     PTR => FIELD_INT5D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2166) # 2167 "field_helper_module.F90"
( 2167)   END FUNCTION FIELD_INT5D_GET_HOST_DATA_RDWR
( 2168) # 2169 "field_helper_module.F90"
( 2169)   FUNCTION FIELD_INT5D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2170)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2171)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2172)     INTEGER(KIND=JPIM), TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 2173)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2174) # 2175 "field_helper_module.F90"
( 2175)     IF (ASSOCIATED (SELF)) THEN
( 2176)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2177)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2178)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2179)           !$acc enter data create (SELF%DEVPTR)
( 2180)         ENDIF
( 2181)         CALL FIELD_INT5D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2182)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2183)       ENDIF
( 2184)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%DEVPTR (:,:,:,:,:)
( 2185)       IF (IAND (MODE, NWR) /= 0) THEN
( 2186)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2187)       ENDIF
( 2188)     ELSE
( 2189)       PTR => ZDUM
( 2190)     ENDIF
( 2191) # 2192 "field_helper_module.F90"
( 2192)   END FUNCTION FIELD_INT5D_GET_DEVICE_DATA_
( 2193) # 2194 "field_helper_module.F90"
( 2194)   FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2195)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2196)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2197) # 2198 "field_helper_module.F90"
( 2198)     PTR => FIELD_INT5D_GET_DEVICE_DATA_ (SELF, NRD)
( 2199) # 2200 "field_helper_module.F90"
( 2200)   END FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDONLY
( 2201) # 2202 "field_helper_module.F90"
( 2202)   FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2203)     TYPE(FIELD_INT5D), POINTER, INTENT (IN) :: SELF
( 2204)     INTEGER(KIND=JPIM), POINTER :: PTR(:,:,:,:,:)
( 2205) # 2206 "field_helper_module.F90"
( 2206)     PTR => FIELD_INT5D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2207) # 2208 "field_helper_module.F90"
( 2208)   END FUNCTION FIELD_INT5D_GET_DEVICE_DATA_RDWR
( 2209) # 2211 "field_helper_module.F90"
( 2211)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG2D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2212)   LOGICAL, POINTER :: PTR (:,:)
( 2213)   INTEGER*8 :: ISTRIDE (2)
( 2214)   INTEGER (KIND=JPIM) :: J
( 2215) # 2216 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 100

( 2216)   ISTRIDE (1) = KIND (PTR)
( 2217)   DO J = 2, 2
( 2218)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2219)   ENDDO
( 2220) # 2221 "field_helper_module.F90"
( 2221)   JDIM = 0
( 2222)   IF (LOC (PTR (2, 1)) - LOC (PTR (1, 1)) /= ISTRIDE (1)) THEN
( 2223)     RETURN
( 2224)   ENDIF
( 2225) # 2226 "field_helper_module.F90"
( 2226)   JDIM = 1
( 2227) # 2228 "field_helper_module.F90"
( 2228)   IF (LOC (PTR (1, 2)) - LOC (PTR (1, 1)) /= ISTRIDE (2)) THEN
( 2229)     RETURN
( 2230)   ENDIF
( 2231) # 2232 "field_helper_module.F90"
( 2232)   JDIM = 2
( 2233) # 2234 "field_helper_module.F90"
( 2234)   END FUNCTION FIELD_LOG2D_GET_LAST_CONTIGUOUS_DIMENSION
( 2235) # 2236 "field_helper_module.F90"
( 2236)   SUBROUTINE FIELD_LOG2D_COPY (HST, DEV, KDIR)
( 2237)   LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2238)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2239)   INTEGER (KIND=JPIM) :: JDIM
( 2240) # 2241 "field_helper_module.F90"
( 2241)   JDIM = FIELD_LOG2D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2242) # 2243 "field_helper_module.F90"
( 2243)   SELECT CASE (JDIM)
( 2244)     CASE (0)
( 2245)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2246)     CASE (1)
( 2247)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2248)     CASE (2)
( 2249)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2250)   END SELECT
( 2251) # 2252 "field_helper_module.F90"
( 2252)   CONTAINS
( 2253) # 2254 "field_helper_module.F90"
( 2254)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2255) # 2256 "field_helper_module.F90"
( 2256)     USE OPENACC
( 2257) # 2258 "field_helper_module.F90"
( 2258)     LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2259)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2260)     INTEGER (KIND=JPIM) :: ISIZE
( 2261)     INTEGER :: J, J1, J2
( 2262) # 2263 "field_helper_module.F90"
( 2263)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2264)       DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 2265)         ISIZE = KIND (HST)
( 2266)         IF (KDIR == NH2D) THEN
( 2267)           !$acc host_data use_device (DEV)
( 2268) # 2269 "field_helper_module.F90"
( 2269)           CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2), HST (J1, J2), ISIZE)
( 2270) # 2271 "field_helper_module.F90"
( 2271)           !$acc end host_data
( 2272)         ELSEIF (KDIR == ND2H) THEN
( 2273)           !$acc host_data use_device (DEV)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 101

( 2274) # 2275 "field_helper_module.F90"
( 2275)           CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2), DEV (J1, J2), ISIZE)
( 2276) # 2277 "field_helper_module.F90"
( 2277)           !$acc end host_data
( 2278)         ENDIF
( 2279)       ENDDO
( 2280)     ENDDO
( 2281)     END SUBROUTINE
( 2282) # 2283 "field_helper_module.F90"
( 2283)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2284) # 2285 "field_helper_module.F90"
( 2285)     USE OPENACC
( 2286) # 2287 "field_helper_module.F90"
( 2287)     LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2288)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2289)     INTEGER (KIND=JPIM) :: ISIZE
( 2290)     INTEGER :: J, J2
( 2291) # 2292 "field_helper_module.F90"
( 2292)     DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2293)       ISIZE = KIND (HST) * SIZE (HST (:, J2))
( 2294)       IF (KDIR == NH2D) THEN
( 2295)         !$acc host_data use_device (DEV)
( 2296) # 2297 "field_helper_module.F90"
( 2297)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2), HST (:, J2), ISIZE)
( 2298) # 2299 "field_helper_module.F90"
( 2299)         !$acc end host_data
( 2300)       ELSEIF (KDIR == ND2H) THEN
( 2301)         !$acc host_data use_device (DEV)
( 2302) # 2303 "field_helper_module.F90"
( 2303)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2), DEV (:, J2), ISIZE)
( 2304) # 2305 "field_helper_module.F90"
( 2305)         !$acc end host_data
( 2306)       ENDIF
( 2307)     ENDDO
( 2308)     END SUBROUTINE
( 2309) # 2310 "field_helper_module.F90"
( 2310)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2311) # 2312 "field_helper_module.F90"
( 2312)     USE OPENACC
( 2313) # 2314 "field_helper_module.F90"
( 2314)     LOGICAL, POINTER :: HST (:,:), DEV (:,:)
( 2315)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2316)     INTEGER (KIND=JPIM) :: ISIZE
( 2317)     INTEGER :: J
( 2318) # 2319 "field_helper_module.F90"
( 2319)         ISIZE = KIND (HST) * SIZE (HST (:, :))
( 2320)         IF (KDIR == NH2D) THEN
( 2321)           !$acc host_data use_device (DEV)
( 2322) # 2323 "field_helper_module.F90"
( 2323)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :), HST (:, :), ISIZE)
( 2324) # 2325 "field_helper_module.F90"
( 2325)           !$acc end host_data
( 2326)         ELSEIF (KDIR == ND2H) THEN
( 2327)           !$acc host_data use_device (DEV)
( 2328) # 2329 "field_helper_module.F90"
( 2329)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :), DEV (:, :), ISIZE)
( 2330) # 2331 "field_helper_module.F90"
( 2331)           !$acc end host_data






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 102

( 2332)         ENDIF
( 2333)     END SUBROUTINE
( 2334) # 2335 "field_helper_module.F90"
( 2335)   END SUBROUTINE FIELD_LOG2D_COPY
( 2336) # 2337 "field_helper_module.F90"
( 2337)   FUNCTION FIELD_LOG2D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2338)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2339)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2340)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1)
( 2341)     LOGICAL, POINTER :: PTR(:,:)
( 2342) # 2343 "field_helper_module.F90"
( 2343)     IF (ASSOCIATED (SELF)) THEN
( 2344)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2345)         CALL FIELD_LOG2D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2346)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2347)       ENDIF
( 2348)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%PTR (:,:)
( 2349)       IF (IAND (MODE, NWR) /= 0) THEN
( 2350)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2351)       ENDIF
( 2352)     ELSE
( 2353)       PTR => ZDUM
( 2354)     ENDIF
( 2355) # 2356 "field_helper_module.F90"
( 2356)   END FUNCTION FIELD_LOG2D_GET_HOST_DATA_
( 2357) # 2358 "field_helper_module.F90"
( 2358)   FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2359)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2360)     LOGICAL, POINTER :: PTR(:,:)
( 2361) # 2362 "field_helper_module.F90"
( 2362)     PTR => FIELD_LOG2D_GET_HOST_DATA_ (SELF, NRD)
( 2363) # 2364 "field_helper_module.F90"
( 2364)   END FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDONLY
( 2365) # 2366 "field_helper_module.F90"
( 2366)   FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2367)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2368)     LOGICAL, POINTER :: PTR(:,:)
( 2369) # 2370 "field_helper_module.F90"
( 2370)     PTR => FIELD_LOG2D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2371) # 2372 "field_helper_module.F90"
( 2372)   END FUNCTION FIELD_LOG2D_GET_HOST_DATA_RDWR
( 2373) # 2374 "field_helper_module.F90"
( 2374)   FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2375)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2376)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2377)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1)
( 2378)     LOGICAL, POINTER :: PTR(:,:)
( 2379) # 2380 "field_helper_module.F90"
( 2380)     IF (ASSOCIATED (SELF)) THEN
( 2381)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2382)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2383)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2384)           !$acc enter data create (SELF%DEVPTR)
( 2385)         ENDIF
( 2386)         CALL FIELD_LOG2D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2387)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2388)       ENDIF
( 2389)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):) => SELF%DEVPTR (:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 103

( 2390)       IF (IAND (MODE, NWR) /= 0) THEN
( 2391)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2392)       ENDIF
( 2393)     ELSE
( 2394)       PTR => ZDUM
( 2395)     ENDIF
( 2396) # 2397 "field_helper_module.F90"
( 2397)   END FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_
( 2398) # 2399 "field_helper_module.F90"
( 2399)   FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2400)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2401)     LOGICAL, POINTER :: PTR(:,:)
( 2402) # 2403 "field_helper_module.F90"
( 2403)     PTR => FIELD_LOG2D_GET_DEVICE_DATA_ (SELF, NRD)
( 2404) # 2405 "field_helper_module.F90"
( 2405)   END FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDONLY
( 2406) # 2407 "field_helper_module.F90"
( 2407)   FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2408)     TYPE(FIELD_LOG2D), POINTER, INTENT (IN) :: SELF
( 2409)     LOGICAL, POINTER :: PTR(:,:)
( 2410) # 2411 "field_helper_module.F90"
( 2411)     PTR => FIELD_LOG2D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2412) # 2413 "field_helper_module.F90"
( 2413)   END FUNCTION FIELD_LOG2D_GET_DEVICE_DATA_RDWR
( 2414) # 2416 "field_helper_module.F90"
( 2416)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG3D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2417)   LOGICAL, POINTER :: PTR (:,:,:)
( 2418)   INTEGER*8 :: ISTRIDE (3)
( 2419)   INTEGER (KIND=JPIM) :: J
( 2420) # 2421 "field_helper_module.F90"
( 2421)   ISTRIDE (1) = KIND (PTR)
( 2422)   DO J = 2, 3
( 2423)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2424)   ENDDO
( 2425) # 2426 "field_helper_module.F90"
( 2426)   JDIM = 0
( 2427)   IF (LOC (PTR (2, 1, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (1)) THEN
( 2428)     RETURN
( 2429)   ENDIF
( 2430) # 2431 "field_helper_module.F90"
( 2431)   JDIM = 1
( 2432) # 2433 "field_helper_module.F90"
( 2433)   IF (LOC (PTR (1, 2, 1)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (2)) THEN
( 2434)     RETURN
( 2435)   ENDIF
( 2436) # 2437 "field_helper_module.F90"
( 2437)   JDIM = 2
( 2438) # 2439 "field_helper_module.F90"
( 2439)   IF (LOC (PTR (1, 1, 2)) - LOC (PTR (1, 1, 1)) /= ISTRIDE (3)) THEN
( 2440)     RETURN
( 2441)   ENDIF
( 2442) # 2443 "field_helper_module.F90"
( 2443)   JDIM = 3
( 2444) # 2445 "field_helper_module.F90"
( 2445)   END FUNCTION FIELD_LOG3D_GET_LAST_CONTIGUOUS_DIMENSION
( 2446) # 2447 "field_helper_module.F90"
( 2447)   SUBROUTINE FIELD_LOG3D_COPY (HST, DEV, KDIR)
( 2448)   LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 104

( 2449)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2450)   INTEGER (KIND=JPIM) :: JDIM
( 2451) # 2452 "field_helper_module.F90"
( 2452)   JDIM = FIELD_LOG3D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2453) # 2454 "field_helper_module.F90"
( 2454)   SELECT CASE (JDIM)
( 2455)     CASE (0)
( 2456)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2457)     CASE (1)
( 2458)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2459)     CASE (2)
( 2460)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2461)     CASE (3)
( 2462)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2463)   END SELECT
( 2464) # 2465 "field_helper_module.F90"
( 2465)   CONTAINS
( 2466) # 2467 "field_helper_module.F90"
( 2467)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2468) # 2469 "field_helper_module.F90"
( 2469)     USE OPENACC
( 2470) # 2471 "field_helper_module.F90"
( 2471)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2472)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2473)     INTEGER (KIND=JPIM) :: ISIZE
( 2474)     INTEGER :: J, J1, J2, J3
( 2475) # 2476 "field_helper_module.F90"
( 2476)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2477)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2478)         DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 2479)           ISIZE = KIND (HST)
( 2480)           IF (KDIR == NH2D) THEN
( 2481)             !$acc host_data use_device (DEV)
( 2482) # 2483 "field_helper_module.F90"
( 2483)             CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3), HST (J1, J2, J3), ISIZE)
( 2484) # 2485 "field_helper_module.F90"
( 2485)             !$acc end host_data
( 2486)           ELSEIF (KDIR == ND2H) THEN
( 2487)             !$acc host_data use_device (DEV)
( 2488) # 2489 "field_helper_module.F90"
( 2489)             CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3), DEV (J1, J2, J3), ISIZE)
( 2490) # 2491 "field_helper_module.F90"
( 2491)             !$acc end host_data
( 2492)           ENDIF
( 2493)         ENDDO
( 2494)       ENDDO
( 2495)     ENDDO
( 2496)     END SUBROUTINE
( 2497) # 2498 "field_helper_module.F90"
( 2498)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2499) # 2500 "field_helper_module.F90"
( 2500)     USE OPENACC
( 2501) # 2502 "field_helper_module.F90"
( 2502)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2503)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2504)     INTEGER (KIND=JPIM) :: ISIZE
( 2505)     INTEGER :: J, J2, J3
( 2506) # 2507 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 105

( 2507)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2508)       DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2509)         ISIZE = KIND (HST) * SIZE (HST (:, J2, J3))
( 2510)         IF (KDIR == NH2D) THEN
( 2511)           !$acc host_data use_device (DEV)
( 2512) # 2513 "field_helper_module.F90"
( 2513)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3), HST (:, J2, J3), ISIZE)
( 2514) # 2515 "field_helper_module.F90"
( 2515)           !$acc end host_data
( 2516)         ELSEIF (KDIR == ND2H) THEN
( 2517)           !$acc host_data use_device (DEV)
( 2518) # 2519 "field_helper_module.F90"
( 2519)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3), DEV (:, J2, J3), ISIZE)
( 2520) # 2521 "field_helper_module.F90"
( 2521)           !$acc end host_data
( 2522)         ENDIF
( 2523)       ENDDO
( 2524)     ENDDO
( 2525)     END SUBROUTINE
( 2526) # 2527 "field_helper_module.F90"
( 2527)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2528) # 2529 "field_helper_module.F90"
( 2529)     USE OPENACC
( 2530) # 2531 "field_helper_module.F90"
( 2531)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2532)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2533)     INTEGER (KIND=JPIM) :: ISIZE
( 2534)     INTEGER :: J, J3
( 2535) # 2536 "field_helper_module.F90"
( 2536)     DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2537)       ISIZE = KIND (HST) * SIZE (HST (:, :, J3))
( 2538)       IF (KDIR == NH2D) THEN
( 2539)         !$acc host_data use_device (DEV)
( 2540) # 2541 "field_helper_module.F90"
( 2541)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3), HST (:, :, J3), ISIZE)
( 2542) # 2543 "field_helper_module.F90"
( 2543)         !$acc end host_data
( 2544)       ELSEIF (KDIR == ND2H) THEN
( 2545)         !$acc host_data use_device (DEV)
( 2546) # 2547 "field_helper_module.F90"
( 2547)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3), DEV (:, :, J3), ISIZE)
( 2548) # 2549 "field_helper_module.F90"
( 2549)         !$acc end host_data
( 2550)       ENDIF
( 2551)     ENDDO
( 2552)     END SUBROUTINE
( 2553) # 2554 "field_helper_module.F90"
( 2554)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2555) # 2556 "field_helper_module.F90"
( 2556)     USE OPENACC
( 2557) # 2558 "field_helper_module.F90"
( 2558)     LOGICAL, POINTER :: HST (:,:,:), DEV (:,:,:)
( 2559)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2560)     INTEGER (KIND=JPIM) :: ISIZE
( 2561)     INTEGER :: J
( 2562) # 2563 "field_helper_module.F90"
( 2563)         ISIZE = KIND (HST) * SIZE (HST (:, :, :))
( 2564)         IF (KDIR == NH2D) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 106

( 2565)           !$acc host_data use_device (DEV)
( 2566) # 2567 "field_helper_module.F90"
( 2567)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :), HST (:, :, :), ISIZE)
( 2568) # 2569 "field_helper_module.F90"
( 2569)           !$acc end host_data
( 2570)         ELSEIF (KDIR == ND2H) THEN
( 2571)           !$acc host_data use_device (DEV)
( 2572) # 2573 "field_helper_module.F90"
( 2573)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :), DEV (:, :, :), ISIZE)
( 2574) # 2575 "field_helper_module.F90"
( 2575)           !$acc end host_data
( 2576)         ENDIF
( 2577)     END SUBROUTINE
( 2578) # 2579 "field_helper_module.F90"
( 2579)   END SUBROUTINE FIELD_LOG3D_COPY
( 2580) # 2581 "field_helper_module.F90"
( 2581)   FUNCTION FIELD_LOG3D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2582)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2583)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2584)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1)
( 2585)     LOGICAL, POINTER :: PTR(:,:,:)
( 2586) # 2587 "field_helper_module.F90"
( 2587)     IF (ASSOCIATED (SELF)) THEN
( 2588)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2589)         CALL FIELD_LOG3D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2590)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2591)       ENDIF
( 2592)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%PTR (:,:,:)
( 2593)       IF (IAND (MODE, NWR) /= 0) THEN
( 2594)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2595)       ENDIF
( 2596)     ELSE
( 2597)       PTR => ZDUM
( 2598)     ENDIF
( 2599) # 2600 "field_helper_module.F90"
( 2600)   END FUNCTION FIELD_LOG3D_GET_HOST_DATA_
( 2601) # 2602 "field_helper_module.F90"
( 2602)   FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2603)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2604)     LOGICAL, POINTER :: PTR(:,:,:)
( 2605) # 2606 "field_helper_module.F90"
( 2606)     PTR => FIELD_LOG3D_GET_HOST_DATA_ (SELF, NRD)
( 2607) # 2608 "field_helper_module.F90"
( 2608)   END FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDONLY
( 2609) # 2610 "field_helper_module.F90"
( 2610)   FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2611)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2612)     LOGICAL, POINTER :: PTR(:,:,:)
( 2613) # 2614 "field_helper_module.F90"
( 2614)     PTR => FIELD_LOG3D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2615) # 2616 "field_helper_module.F90"
( 2616)   END FUNCTION FIELD_LOG3D_GET_HOST_DATA_RDWR
( 2617) # 2618 "field_helper_module.F90"
( 2618)   FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2619)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2620)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2621)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1)
( 2622)     LOGICAL, POINTER :: PTR(:,:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 107

( 2623) # 2624 "field_helper_module.F90"
( 2624)     IF (ASSOCIATED (SELF)) THEN
( 2625)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2626)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2627)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2628)           !$acc enter data create (SELF%DEVPTR)
( 2629)         ENDIF
( 2630)         CALL FIELD_LOG3D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2631)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2632)       ENDIF
( 2633)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):) => SELF%DEVPTR (:,:,:)
( 2634)       IF (IAND (MODE, NWR) /= 0) THEN
( 2635)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2636)       ENDIF
( 2637)     ELSE
( 2638)       PTR => ZDUM
( 2639)     ENDIF
( 2640) # 2641 "field_helper_module.F90"
( 2641)   END FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_
( 2642) # 2643 "field_helper_module.F90"
( 2643)   FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2644)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2645)     LOGICAL, POINTER :: PTR(:,:,:)
( 2646) # 2647 "field_helper_module.F90"
( 2647)     PTR => FIELD_LOG3D_GET_DEVICE_DATA_ (SELF, NRD)
( 2648) # 2649 "field_helper_module.F90"
( 2649)   END FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDONLY
( 2650) # 2651 "field_helper_module.F90"
( 2651)   FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2652)     TYPE(FIELD_LOG3D), POINTER, INTENT (IN) :: SELF
( 2653)     LOGICAL, POINTER :: PTR(:,:,:)
( 2654) # 2655 "field_helper_module.F90"
( 2655)     PTR => FIELD_LOG3D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2656) # 2657 "field_helper_module.F90"
( 2657)   END FUNCTION FIELD_LOG3D_GET_DEVICE_DATA_RDWR
( 2658) # 2660 "field_helper_module.F90"
( 2660)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG4D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2661)   LOGICAL, POINTER :: PTR (:,:,:,:)
( 2662)   INTEGER*8 :: ISTRIDE (4)
( 2663)   INTEGER (KIND=JPIM) :: J
( 2664) # 2665 "field_helper_module.F90"
( 2665)   ISTRIDE (1) = KIND (PTR)
( 2666)   DO J = 2, 4
( 2667)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2668)   ENDDO
( 2669) # 2670 "field_helper_module.F90"
( 2670)   JDIM = 0
( 2671)   IF (LOC (PTR (2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 2672)     RETURN
( 2673)   ENDIF
( 2674) # 2675 "field_helper_module.F90"
( 2675)   JDIM = 1
( 2676) # 2677 "field_helper_module.F90"
( 2677)   IF (LOC (PTR (1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 2678)     RETURN
( 2679)   ENDIF
( 2680) # 2681 "field_helper_module.F90"
( 2681)   JDIM = 2






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 108

( 2682) # 2683 "field_helper_module.F90"
( 2683)   IF (LOC (PTR (1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 2684)     RETURN
( 2685)   ENDIF
( 2686) # 2687 "field_helper_module.F90"
( 2687)   JDIM = 3
( 2688) # 2689 "field_helper_module.F90"
( 2689)   IF (LOC (PTR (1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 2690)     RETURN
( 2691)   ENDIF
( 2692) # 2693 "field_helper_module.F90"
( 2693)   JDIM = 4
( 2694) # 2695 "field_helper_module.F90"
( 2695)   END FUNCTION FIELD_LOG4D_GET_LAST_CONTIGUOUS_DIMENSION
( 2696) # 2697 "field_helper_module.F90"
( 2697)   SUBROUTINE FIELD_LOG4D_COPY (HST, DEV, KDIR)
( 2698)   LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2699)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2700)   INTEGER (KIND=JPIM) :: JDIM
( 2701) # 2702 "field_helper_module.F90"
( 2702)   JDIM = FIELD_LOG4D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2703) # 2704 "field_helper_module.F90"
( 2704)   SELECT CASE (JDIM)
( 2705)     CASE (0)
( 2706)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2707)     CASE (1)
( 2708)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2709)     CASE (2)
( 2710)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2711)     CASE (3)
( 2712)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2713)     CASE (4)
( 2714)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 2715)   END SELECT
( 2716) # 2717 "field_helper_module.F90"
( 2717)   CONTAINS
( 2718) # 2719 "field_helper_module.F90"
( 2719)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2720) # 2721 "field_helper_module.F90"
( 2721)     USE OPENACC
( 2722) # 2723 "field_helper_module.F90"
( 2723)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2724)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2725)     INTEGER (KIND=JPIM) :: ISIZE
( 2726)     INTEGER :: J, J1, J2, J3, J4
( 2727) # 2728 "field_helper_module.F90"
( 2728)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2729)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2730)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2731)           DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 2732)             ISIZE = KIND (HST)
( 2733)             IF (KDIR == NH2D) THEN
( 2734)               !$acc host_data use_device (DEV)
( 2735) # 2736 "field_helper_module.F90"
( 2736)               CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4), HST (J1, J2, J3, J4), ISIZE)
( 2737) # 2738 "field_helper_module.F90"
( 2738)               !$acc end host_data
( 2739)             ELSEIF (KDIR == ND2H) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 109

( 2740)               !$acc host_data use_device (DEV)
( 2741) # 2742 "field_helper_module.F90"
( 2742)               CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4), DEV (J1, J2, J3, J4), ISIZE)
( 2743) # 2744 "field_helper_module.F90"
( 2744)               !$acc end host_data
( 2745)             ENDIF
( 2746)           ENDDO
( 2747)         ENDDO
( 2748)       ENDDO
( 2749)     ENDDO
( 2750)     END SUBROUTINE
( 2751) # 2752 "field_helper_module.F90"
( 2752)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 2753) # 2754 "field_helper_module.F90"
( 2754)     USE OPENACC
( 2755) # 2756 "field_helper_module.F90"
( 2756)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2757)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2758)     INTEGER (KIND=JPIM) :: ISIZE
( 2759)     INTEGER :: J, J2, J3, J4
( 2760) # 2761 "field_helper_module.F90"
( 2761)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2762)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2763)         DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 2764)           ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4))
( 2765)           IF (KDIR == NH2D) THEN
( 2766)             !$acc host_data use_device (DEV)
( 2767) # 2768 "field_helper_module.F90"
( 2768)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4), HST (:, J2, J3, J4), ISIZE)
( 2769) # 2770 "field_helper_module.F90"
( 2770)             !$acc end host_data
( 2771)           ELSEIF (KDIR == ND2H) THEN
( 2772)             !$acc host_data use_device (DEV)
( 2773) # 2774 "field_helper_module.F90"
( 2774)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4), DEV (:, J2, J3, J4), ISIZE)
( 2775) # 2776 "field_helper_module.F90"
( 2776)             !$acc end host_data
( 2777)           ENDIF
( 2778)         ENDDO
( 2779)       ENDDO
( 2780)     ENDDO
( 2781)     END SUBROUTINE
( 2782) # 2783 "field_helper_module.F90"
( 2783)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 2784) # 2785 "field_helper_module.F90"
( 2785)     USE OPENACC
( 2786) # 2787 "field_helper_module.F90"
( 2787)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2788)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2789)     INTEGER (KIND=JPIM) :: ISIZE
( 2790)     INTEGER :: J, J3, J4
( 2791) # 2792 "field_helper_module.F90"
( 2792)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2793)       DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 2794)         ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4))
( 2795)         IF (KDIR == NH2D) THEN
( 2796)           !$acc host_data use_device (DEV)
( 2797) # 2798 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 110

( 2798)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4), HST (:, :, J3, J4), ISIZE)
( 2799) # 2800 "field_helper_module.F90"
( 2800)           !$acc end host_data
( 2801)         ELSEIF (KDIR == ND2H) THEN
( 2802)           !$acc host_data use_device (DEV)
( 2803) # 2804 "field_helper_module.F90"
( 2804)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4), DEV (:, :, J3, J4), ISIZE)
( 2805) # 2806 "field_helper_module.F90"
( 2806)           !$acc end host_data
( 2807)         ENDIF
( 2808)       ENDDO
( 2809)     ENDDO
( 2810)     END SUBROUTINE
( 2811) # 2812 "field_helper_module.F90"
( 2812)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 2813) # 2814 "field_helper_module.F90"
( 2814)     USE OPENACC
( 2815) # 2816 "field_helper_module.F90"
( 2816)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2817)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2818)     INTEGER (KIND=JPIM) :: ISIZE
( 2819)     INTEGER :: J, J4
( 2820) # 2821 "field_helper_module.F90"
( 2821)     DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 2822)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4))
( 2823)       IF (KDIR == NH2D) THEN
( 2824)         !$acc host_data use_device (DEV)
( 2825) # 2826 "field_helper_module.F90"
( 2826)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4), HST (:, :, :, J4), ISIZE)
( 2827) # 2828 "field_helper_module.F90"
( 2828)         !$acc end host_data
( 2829)       ELSEIF (KDIR == ND2H) THEN
( 2830)         !$acc host_data use_device (DEV)
( 2831) # 2832 "field_helper_module.F90"
( 2832)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4), DEV (:, :, :, J4), ISIZE)
( 2833) # 2834 "field_helper_module.F90"
( 2834)         !$acc end host_data
( 2835)       ENDIF
( 2836)     ENDDO
( 2837)     END SUBROUTINE
( 2838) # 2839 "field_helper_module.F90"
( 2839)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 2840) # 2841 "field_helper_module.F90"
( 2841)     USE OPENACC
( 2842) # 2843 "field_helper_module.F90"
( 2843)     LOGICAL, POINTER :: HST (:,:,:,:), DEV (:,:,:,:)
( 2844)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2845)     INTEGER (KIND=JPIM) :: ISIZE
( 2846)     INTEGER :: J
( 2847) # 2848 "field_helper_module.F90"
( 2848)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :))
( 2849)         IF (KDIR == NH2D) THEN
( 2850)           !$acc host_data use_device (DEV)
( 2851) # 2852 "field_helper_module.F90"
( 2852)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :), HST (:, :, :, :), ISIZE)
( 2853) # 2854 "field_helper_module.F90"
( 2854)           !$acc end host_data
( 2855)         ELSEIF (KDIR == ND2H) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 111

( 2856)           !$acc host_data use_device (DEV)
( 2857) # 2858 "field_helper_module.F90"
( 2858)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :), DEV (:, :, :, :), ISIZE)
( 2859) # 2860 "field_helper_module.F90"
( 2860)           !$acc end host_data
( 2861)         ENDIF
( 2862)     END SUBROUTINE
( 2863) # 2864 "field_helper_module.F90"
( 2864)   END SUBROUTINE FIELD_LOG4D_COPY
( 2865) # 2866 "field_helper_module.F90"
( 2866)   FUNCTION FIELD_LOG4D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 2867)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2868)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2869)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 2870)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2871) # 2872 "field_helper_module.F90"
( 2872)     IF (ASSOCIATED (SELF)) THEN
( 2873)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 2874)         CALL FIELD_LOG4D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 2875)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 2876)       ENDIF
( 2877)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%PTR (:,:,:,:)
( 2878)       IF (IAND (MODE, NWR) /= 0) THEN
( 2879)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 2880)       ENDIF
( 2881)     ELSE
( 2882)       PTR => ZDUM
( 2883)     ENDIF
( 2884) # 2885 "field_helper_module.F90"
( 2885)   END FUNCTION FIELD_LOG4D_GET_HOST_DATA_
( 2886) # 2887 "field_helper_module.F90"
( 2887)   FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 2888)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2889)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2890) # 2891 "field_helper_module.F90"
( 2891)     PTR => FIELD_LOG4D_GET_HOST_DATA_ (SELF, NRD)
( 2892) # 2893 "field_helper_module.F90"
( 2893)   END FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDONLY
( 2894) # 2895 "field_helper_module.F90"
( 2895)   FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 2896)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2897)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2898) # 2899 "field_helper_module.F90"
( 2899)     PTR => FIELD_LOG4D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 2900) # 2901 "field_helper_module.F90"
( 2901)   END FUNCTION FIELD_LOG4D_GET_HOST_DATA_RDWR
( 2902) # 2903 "field_helper_module.F90"
( 2903)   FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 2904)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2905)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 2906)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1)
( 2907)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2908) # 2909 "field_helper_module.F90"
( 2909)     IF (ASSOCIATED (SELF)) THEN
( 2910)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 2911)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 2912)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 2913)           !$acc enter data create (SELF%DEVPTR)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 112

( 2914)         ENDIF
( 2915)         CALL FIELD_LOG4D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 2916)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 2917)       ENDIF
( 2918)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):) => SELF%DEVPTR (:,:,:,:)
( 2919)       IF (IAND (MODE, NWR) /= 0) THEN
( 2920)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 2921)       ENDIF
( 2922)     ELSE
( 2923)       PTR => ZDUM
( 2924)     ENDIF
( 2925) # 2926 "field_helper_module.F90"
( 2926)   END FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_
( 2927) # 2928 "field_helper_module.F90"
( 2928)   FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 2929)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2930)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2931) # 2932 "field_helper_module.F90"
( 2932)     PTR => FIELD_LOG4D_GET_DEVICE_DATA_ (SELF, NRD)
( 2933) # 2934 "field_helper_module.F90"
( 2934)   END FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDONLY
( 2935) # 2936 "field_helper_module.F90"
( 2936)   FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 2937)     TYPE(FIELD_LOG4D), POINTER, INTENT (IN) :: SELF
( 2938)     LOGICAL, POINTER :: PTR(:,:,:,:)
( 2939) # 2940 "field_helper_module.F90"
( 2940)     PTR => FIELD_LOG4D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 2941) # 2942 "field_helper_module.F90"
( 2942)   END FUNCTION FIELD_LOG4D_GET_DEVICE_DATA_RDWR
( 2943) # 2945 "field_helper_module.F90"
( 2945)   INTEGER (KIND=JPIM) FUNCTION FIELD_LOG5D_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
( 2946)   LOGICAL, POINTER :: PTR (:,:,:,:,:)
( 2947)   INTEGER*8 :: ISTRIDE (5)
( 2948)   INTEGER (KIND=JPIM) :: J
( 2949) # 2950 "field_helper_module.F90"
( 2950)   ISTRIDE (1) = KIND (PTR)
( 2951)   DO J = 2, 5
( 2952)     ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
( 2953)   ENDDO
( 2954) # 2955 "field_helper_module.F90"
( 2955)   JDIM = 0
( 2956)   IF (LOC (PTR (2, 1, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (1)) THEN
( 2957)     RETURN
( 2958)   ENDIF
( 2959) # 2960 "field_helper_module.F90"
( 2960)   JDIM = 1
( 2961) # 2962 "field_helper_module.F90"
( 2962)   IF (LOC (PTR (1, 2, 1, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (2)) THEN
( 2963)     RETURN
( 2964)   ENDIF
( 2965) # 2966 "field_helper_module.F90"
( 2966)   JDIM = 2
( 2967) # 2968 "field_helper_module.F90"
( 2968)   IF (LOC (PTR (1, 1, 2, 1, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (3)) THEN
( 2969)     RETURN
( 2970)   ENDIF
( 2971) # 2972 "field_helper_module.F90"
( 2972)   JDIM = 3






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 113

( 2973) # 2974 "field_helper_module.F90"
( 2974)   IF (LOC (PTR (1, 1, 1, 2, 1)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (4)) THEN
( 2975)     RETURN
( 2976)   ENDIF
( 2977) # 2978 "field_helper_module.F90"
( 2978)   JDIM = 4
( 2979) # 2980 "field_helper_module.F90"
( 2980)   IF (LOC (PTR (1, 1, 1, 1, 2)) - LOC (PTR (1, 1, 1, 1, 1)) /= ISTRIDE (5)) THEN
( 2981)     RETURN
( 2982)   ENDIF
( 2983) # 2984 "field_helper_module.F90"
( 2984)   JDIM = 5
( 2985) # 2986 "field_helper_module.F90"
( 2986)   END FUNCTION FIELD_LOG5D_GET_LAST_CONTIGUOUS_DIMENSION
( 2987) # 2988 "field_helper_module.F90"
( 2988)   SUBROUTINE FIELD_LOG5D_COPY (HST, DEV, KDIR)
( 2989)   LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 2990)   INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 2991)   INTEGER (KIND=JPIM) :: JDIM
( 2992) # 2993 "field_helper_module.F90"
( 2993)   JDIM = FIELD_LOG5D_GET_LAST_CONTIGUOUS_DIMENSION (HST)
( 2994) # 2995 "field_helper_module.F90"
( 2995)   SELECT CASE (JDIM)
( 2996)     CASE (0)
( 2997)       CALL COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 2998)     CASE (1)
( 2999)       CALL COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 3000)     CASE (2)
( 3001)       CALL COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 3002)     CASE (3)
( 3003)       CALL COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 3004)     CASE (4)
( 3005)       CALL COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 3006)     CASE (5)
( 3007)       CALL COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 3008)   END SELECT
( 3009) # 3010 "field_helper_module.F90"
( 3010)   CONTAINS
( 3011) # 3012 "field_helper_module.F90"
( 3012)     SUBROUTINE COPY_DIM0_CONTIGUOUS (HST, DEV, KDIR)
( 3013) # 3014 "field_helper_module.F90"
( 3014)     USE OPENACC
( 3015) # 3016 "field_helper_module.F90"
( 3016)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3017)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3018)     INTEGER (KIND=JPIM) :: ISIZE
( 3019)     INTEGER :: J, J1, J2, J3, J4, J5
( 3020) # 3021 "field_helper_module.F90"
( 3021)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3022)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3023)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 3024)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 3025)             DO J1 = LBOUND (HST, 1), UBOUND (HST, 1)
( 3026)               ISIZE = KIND (HST)
( 3027)               IF (KDIR == NH2D) THEN
( 3028)                 !$acc host_data use_device (DEV)
( 3029) # 3030 "field_helper_module.F90"
( 3030)                 CALL ACC_MEMCPY_TO_DEVICE (DEV (J1, J2, J3, J4, J5), HST (J1, J2, J3, J4, J5), ISIZE)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 114

( 3031) # 3032 "field_helper_module.F90"
( 3032)                 !$acc end host_data
( 3033)               ELSEIF (KDIR == ND2H) THEN
( 3034)                 !$acc host_data use_device (DEV)
( 3035) # 3036 "field_helper_module.F90"
( 3036)                 CALL ACC_MEMCPY_FROM_DEVICE (HST (J1, J2, J3, J4, J5), DEV (J1, J2, J3, J4, J5), ISIZE)
( 3037) # 3038 "field_helper_module.F90"
( 3038)                 !$acc end host_data
( 3039)               ENDIF
( 3040)             ENDDO
( 3041)           ENDDO
( 3042)         ENDDO
( 3043)       ENDDO
( 3044)     ENDDO
( 3045)     END SUBROUTINE
( 3046) # 3047 "field_helper_module.F90"
( 3047)     SUBROUTINE COPY_DIM1_CONTIGUOUS (HST, DEV, KDIR)
( 3048) # 3049 "field_helper_module.F90"
( 3049)     USE OPENACC
( 3050) # 3051 "field_helper_module.F90"
( 3051)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3052)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3053)     INTEGER (KIND=JPIM) :: ISIZE
( 3054)     INTEGER :: J, J2, J3, J4, J5
( 3055) # 3056 "field_helper_module.F90"
( 3056)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3057)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3058)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 3059)           DO J2 = LBOUND (HST, 2), UBOUND (HST, 2)
( 3060)             ISIZE = KIND (HST) * SIZE (HST (:, J2, J3, J4, J5))
( 3061)             IF (KDIR == NH2D) THEN
( 3062)               !$acc host_data use_device (DEV)
( 3063) # 3064 "field_helper_module.F90"
( 3064)               CALL ACC_MEMCPY_TO_DEVICE (DEV (:, J2, J3, J4, J5), HST (:, J2, J3, J4, J5), ISIZE)
( 3065) # 3066 "field_helper_module.F90"
( 3066)               !$acc end host_data
( 3067)             ELSEIF (KDIR == ND2H) THEN
( 3068)               !$acc host_data use_device (DEV)
( 3069) # 3070 "field_helper_module.F90"
( 3070)               CALL ACC_MEMCPY_FROM_DEVICE (HST (:, J2, J3, J4, J5), DEV (:, J2, J3, J4, J5), ISIZE)
( 3071) # 3072 "field_helper_module.F90"
( 3072)               !$acc end host_data
( 3073)             ENDIF
( 3074)           ENDDO
( 3075)         ENDDO
( 3076)       ENDDO
( 3077)     ENDDO
( 3078)     END SUBROUTINE
( 3079) # 3080 "field_helper_module.F90"
( 3080)     SUBROUTINE COPY_DIM2_CONTIGUOUS (HST, DEV, KDIR)
( 3081) # 3082 "field_helper_module.F90"
( 3082)     USE OPENACC
( 3083) # 3084 "field_helper_module.F90"
( 3084)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3085)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3086)     INTEGER (KIND=JPIM) :: ISIZE
( 3087)     INTEGER :: J, J3, J4, J5
( 3088) # 3089 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 115

( 3089)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3090)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3091)         DO J3 = LBOUND (HST, 3), UBOUND (HST, 3)
( 3092)           ISIZE = KIND (HST) * SIZE (HST (:, :, J3, J4, J5))
( 3093)           IF (KDIR == NH2D) THEN
( 3094)             !$acc host_data use_device (DEV)
( 3095) # 3096 "field_helper_module.F90"
( 3096)             CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, J3, J4, J5), HST (:, :, J3, J4, J5), ISIZE)
( 3097) # 3098 "field_helper_module.F90"
( 3098)             !$acc end host_data
( 3099)           ELSEIF (KDIR == ND2H) THEN
( 3100)             !$acc host_data use_device (DEV)
( 3101) # 3102 "field_helper_module.F90"
( 3102)             CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, J3, J4, J5), DEV (:, :, J3, J4, J5), ISIZE)
( 3103) # 3104 "field_helper_module.F90"
( 3104)             !$acc end host_data
( 3105)           ENDIF
( 3106)         ENDDO
( 3107)       ENDDO
( 3108)     ENDDO
( 3109)     END SUBROUTINE
( 3110) # 3111 "field_helper_module.F90"
( 3111)     SUBROUTINE COPY_DIM3_CONTIGUOUS (HST, DEV, KDIR)
( 3112) # 3113 "field_helper_module.F90"
( 3113)     USE OPENACC
( 3114) # 3115 "field_helper_module.F90"
( 3115)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3116)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3117)     INTEGER (KIND=JPIM) :: ISIZE
( 3118)     INTEGER :: J, J4, J5
( 3119) # 3120 "field_helper_module.F90"
( 3120)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3121)       DO J4 = LBOUND (HST, 4), UBOUND (HST, 4)
( 3122)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, J4, J5))
( 3123)         IF (KDIR == NH2D) THEN
( 3124)           !$acc host_data use_device (DEV)
( 3125) # 3126 "field_helper_module.F90"
( 3126)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, J4, J5), HST (:, :, :, J4, J5), ISIZE)
( 3127) # 3128 "field_helper_module.F90"
( 3128)           !$acc end host_data
( 3129)         ELSEIF (KDIR == ND2H) THEN
( 3130)           !$acc host_data use_device (DEV)
( 3131) # 3132 "field_helper_module.F90"
( 3132)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, J4, J5), DEV (:, :, :, J4, J5), ISIZE)
( 3133) # 3134 "field_helper_module.F90"
( 3134)           !$acc end host_data
( 3135)         ENDIF
( 3136)       ENDDO
( 3137)     ENDDO
( 3138)     END SUBROUTINE
( 3139) # 3140 "field_helper_module.F90"
( 3140)     SUBROUTINE COPY_DIM4_CONTIGUOUS (HST, DEV, KDIR)
( 3141) # 3142 "field_helper_module.F90"
( 3142)     USE OPENACC
( 3143) # 3144 "field_helper_module.F90"
( 3144)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3145)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3146)     INTEGER (KIND=JPIM) :: ISIZE






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 116

( 3147)     INTEGER :: J, J5
( 3148) # 3149 "field_helper_module.F90"
( 3149)     DO J5 = LBOUND (HST, 5), UBOUND (HST, 5)
( 3150)       ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, J5))
( 3151)       IF (KDIR == NH2D) THEN
( 3152)         !$acc host_data use_device (DEV)
( 3153) # 3154 "field_helper_module.F90"
( 3154)         CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, J5), HST (:, :, :, :, J5), ISIZE)
( 3155) # 3156 "field_helper_module.F90"
( 3156)         !$acc end host_data
( 3157)       ELSEIF (KDIR == ND2H) THEN
( 3158)         !$acc host_data use_device (DEV)
( 3159) # 3160 "field_helper_module.F90"
( 3160)         CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, J5), DEV (:, :, :, :, J5), ISIZE)
( 3161) # 3162 "field_helper_module.F90"
( 3162)         !$acc end host_data
( 3163)       ENDIF
( 3164)     ENDDO
( 3165)     END SUBROUTINE
( 3166) # 3167 "field_helper_module.F90"
( 3167)     SUBROUTINE COPY_DIM5_CONTIGUOUS (HST, DEV, KDIR)
( 3168) # 3169 "field_helper_module.F90"
( 3169)     USE OPENACC
( 3170) # 3171 "field_helper_module.F90"
( 3171)     LOGICAL, POINTER :: HST (:,:,:,:,:), DEV (:,:,:,:,:)
( 3172)     INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
( 3173)     INTEGER (KIND=JPIM) :: ISIZE
( 3174)     INTEGER :: J
( 3175) # 3176 "field_helper_module.F90"
( 3176)         ISIZE = KIND (HST) * SIZE (HST (:, :, :, :, :))
( 3177)         IF (KDIR == NH2D) THEN
( 3178)           !$acc host_data use_device (DEV)
( 3179) # 3180 "field_helper_module.F90"
( 3180)           CALL ACC_MEMCPY_TO_DEVICE (DEV (:, :, :, :, :), HST (:, :, :, :, :), ISIZE)
( 3181) # 3182 "field_helper_module.F90"
( 3182)           !$acc end host_data
( 3183)         ELSEIF (KDIR == ND2H) THEN
( 3184)           !$acc host_data use_device (DEV)
( 3185) # 3186 "field_helper_module.F90"
( 3186)           CALL ACC_MEMCPY_FROM_DEVICE (HST (:, :, :, :, :), DEV (:, :, :, :, :), ISIZE)
( 3187) # 3188 "field_helper_module.F90"
( 3188)           !$acc end host_data
( 3189)         ENDIF
( 3190)     END SUBROUTINE
( 3191) # 3192 "field_helper_module.F90"
( 3192)   END SUBROUTINE FIELD_LOG5D_COPY
( 3193) # 3194 "field_helper_module.F90"
( 3194)   FUNCTION FIELD_LOG5D_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
( 3195)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3196)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 3197)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 3198)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3199) # 3200 "field_helper_module.F90"
( 3200)     IF (ASSOCIATED (SELF)) THEN
( 3201)       IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
( 3202)         CALL FIELD_LOG5D_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
( 3203)         SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
( 3204)       ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 117

( 3205)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%PTR (:,:,:,:,:)
( 3206)       IF (IAND (MODE, NWR) /= 0) THEN
( 3207)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
( 3208)       ENDIF
( 3209)     ELSE
( 3210)       PTR => ZDUM
( 3211)     ENDIF
( 3212) # 3213 "field_helper_module.F90"
( 3213)   END FUNCTION FIELD_LOG5D_GET_HOST_DATA_
( 3214) # 3215 "field_helper_module.F90"
( 3215)   FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
( 3216)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3217)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3218) # 3219 "field_helper_module.F90"
( 3219)     PTR => FIELD_LOG5D_GET_HOST_DATA_ (SELF, NRD)
( 3220) # 3221 "field_helper_module.F90"
( 3221)   END FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDONLY
( 3222) # 3223 "field_helper_module.F90"
( 3223)   FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
( 3224)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3225)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3226) # 3227 "field_helper_module.F90"
( 3227)     PTR => FIELD_LOG5D_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))
( 3228) # 3229 "field_helper_module.F90"
( 3229)   END FUNCTION FIELD_LOG5D_GET_HOST_DATA_RDWR
( 3230) # 3231 "field_helper_module.F90"
( 3231)   FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
( 3232)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3233)     INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
( 3234)     LOGICAL, TARGET, SAVE :: ZDUM (1, 1, 1, 1, 1)
( 3235)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3236) # 3237 "field_helper_module.F90"
( 3237)     IF (ASSOCIATED (SELF)) THEN
( 3238)       IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
( 3239)         IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
( 3240)           ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
( 3241)           !$acc enter data create (SELF%DEVPTR)
( 3242)         ENDIF
( 3243)         CALL FIELD_LOG5D_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
( 3244)         SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
( 3245)       ENDIF
( 3246)       PTR (SELF%LBOUNDS(1):, SELF%LBOUNDS(2):, SELF%LBOUNDS(3):, SELF%LBOUNDS(4):, SELF%LBOUNDS(5):) => SELF%DEVPTR (:,:,:,:,:)
( 3247)       IF (IAND (MODE, NWR) /= 0) THEN
( 3248)         SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
( 3249)       ENDIF
( 3250)     ELSE
( 3251)       PTR => ZDUM
( 3252)     ENDIF
( 3253) # 3254 "field_helper_module.F90"
( 3254)   END FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_
( 3255) # 3256 "field_helper_module.F90"
( 3256)   FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
( 3257)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3258)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3259) # 3260 "field_helper_module.F90"
( 3260)     PTR => FIELD_LOG5D_GET_DEVICE_DATA_ (SELF, NRD)
( 3261) # 3262 "field_helper_module.F90"
( 3262)   END FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDONLY






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 118

( 3263) # 3264 "field_helper_module.F90"
( 3264)   FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
( 3265)     TYPE(FIELD_LOG5D), POINTER, INTENT (IN) :: SELF
( 3266)     LOGICAL, POINTER :: PTR(:,:,:,:,:)
( 3267) # 3268 "field_helper_module.F90"
( 3268)     PTR => FIELD_LOG5D_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))
( 3269) # 3270 "field_helper_module.F90"
( 3270)   END FUNCTION FIELD_LOG5D_GET_DEVICE_DATA_RDWR
( 3271) # 3274 "field_helper_module.F90"
( 3274)   SUBROUTINE CREATE_TEMPORARY_2D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3275) # 3276 "field_helper_module.F90"
( 3276)     TYPE(FIELD_2D), POINTER :: FIELD_PTR
( 3277)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (2)
( 3278)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)
( 3279)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3280)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3281)     INTEGER(KIND=JPIM) :: ISIZE (2)
( 3282) # 3283 "field_helper_module.F90"
( 3283)     ISIZE = UBOUNDS
( 3284)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3285) # 3286 "field_helper_module.F90"
( 3286)     ALLOCATE(FIELD_PTR)
( 3287)     NBLOCKS = UBOUNDS (2)
( 3288)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:2-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3289) # 3290 "field_helper_module.F90"
( 3290)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3291)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3292) # 3293 "field_helper_module.F90"
( 3293)   END SUBROUTINE CREATE_TEMPORARY_2D_LU
( 3294) # 3295 "field_helper_module.F90"
( 3295)   SUBROUTINE CREATE_TEMPORARY_3D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3296) # 3297 "field_helper_module.F90"
( 3297)     TYPE(FIELD_3D), POINTER :: FIELD_PTR
( 3298)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (3)
( 3299)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)
( 3300)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3301)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3302)     INTEGER(KIND=JPIM) :: ISIZE (3)
( 3303) # 3304 "field_helper_module.F90"
( 3304)     ISIZE = UBOUNDS
( 3305)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3306) # 3307 "field_helper_module.F90"
( 3307)     ALLOCATE(FIELD_PTR)
( 3308)     NBLOCKS = UBOUNDS (3)
( 3309)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:3-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3310) # 3311 "field_helper_module.F90"
( 3311)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3312)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3313) # 3314 "field_helper_module.F90"
( 3314)   END SUBROUTINE CREATE_TEMPORARY_3D_LU
( 3315) # 3316 "field_helper_module.F90"
( 3316)   SUBROUTINE CREATE_TEMPORARY_4D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3317) # 3318 "field_helper_module.F90"
( 3318)     TYPE(FIELD_4D), POINTER :: FIELD_PTR
( 3319)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (4)
( 3320)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (4)
( 3321)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3322)     INTEGER(KIND=JPIM) :: NBLOCKS






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 119

( 3323)     INTEGER(KIND=JPIM) :: ISIZE (4)
( 3324) # 3325 "field_helper_module.F90"
( 3325)     ISIZE = UBOUNDS
( 3326)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3327) # 3328 "field_helper_module.F90"
( 3328)     ALLOCATE(FIELD_PTR)
( 3329)     NBLOCKS = UBOUNDS (4)
( 3330)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:4-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3331) # 3332 "field_helper_module.F90"
( 3332)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3333)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3334) # 3335 "field_helper_module.F90"
( 3335)   END SUBROUTINE CREATE_TEMPORARY_4D_LU
( 3336) # 3337 "field_helper_module.F90"
( 3337)   SUBROUTINE CREATE_TEMPORARY_5D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3338) # 3339 "field_helper_module.F90"
( 3339)     TYPE(FIELD_5D), POINTER :: FIELD_PTR
( 3340)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (5)
( 3341)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (5)
( 3342)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3343)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3344)     INTEGER(KIND=JPIM) :: ISIZE (5)
( 3345) # 3346 "field_helper_module.F90"
( 3346)     ISIZE = UBOUNDS
( 3347)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3348) # 3349 "field_helper_module.F90"
( 3349)     ALLOCATE(FIELD_PTR)
( 3350)     NBLOCKS = UBOUNDS (5)
( 3351)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:5-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3352) # 3353 "field_helper_module.F90"
( 3353)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3354)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3355) # 3356 "field_helper_module.F90"
( 3356)   END SUBROUTINE CREATE_TEMPORARY_5D_LU
( 3357) # 3358 "field_helper_module.F90"
( 3358)   SUBROUTINE CREATE_TEMPORARY_INT2D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3359) # 3360 "field_helper_module.F90"
( 3360)     TYPE(FIELD_INT2D), POINTER :: FIELD_PTR
( 3361)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (2)
( 3362)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)
( 3363)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3364)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3365)     INTEGER(KIND=JPIM) :: ISIZE (2)
( 3366) # 3367 "field_helper_module.F90"
( 3367)     ISIZE = UBOUNDS
( 3368)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3369) # 3370 "field_helper_module.F90"
( 3370)     ALLOCATE(FIELD_PTR)
( 3371)     NBLOCKS = UBOUNDS (2)
( 3372)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:2-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3373) # 3374 "field_helper_module.F90"
( 3374)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3375)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3376) # 3377 "field_helper_module.F90"
( 3377)   END SUBROUTINE CREATE_TEMPORARY_INT2D_LU
( 3378) # 3379 "field_helper_module.F90"
( 3379)   SUBROUTINE CREATE_TEMPORARY_INT3D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3380) # 3381 "field_helper_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 120

( 3381)     TYPE(FIELD_INT3D), POINTER :: FIELD_PTR
( 3382)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (3)
( 3383)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)
( 3384)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3385)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3386)     INTEGER(KIND=JPIM) :: ISIZE (3)
( 3387) # 3388 "field_helper_module.F90"
( 3388)     ISIZE = UBOUNDS
( 3389)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3390) # 3391 "field_helper_module.F90"
( 3391)     ALLOCATE(FIELD_PTR)
( 3392)     NBLOCKS = UBOUNDS (3)
( 3393)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:3-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3394) # 3395 "field_helper_module.F90"
( 3395)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3396)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3397) # 3398 "field_helper_module.F90"
( 3398)   END SUBROUTINE CREATE_TEMPORARY_INT3D_LU
( 3399) # 3400 "field_helper_module.F90"
( 3400)   SUBROUTINE CREATE_TEMPORARY_LOG2D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 
( 3401) # 3402 "field_helper_module.F90"
( 3402)     TYPE(FIELD_LOG2D), POINTER :: FIELD_PTR
( 3403)     INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (2)
( 3404)     INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)
( 3405)     LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
( 3406)     INTEGER(KIND=JPIM) :: NBLOCKS
( 3407)     INTEGER(KIND=JPIM) :: ISIZE (2)
( 3408) # 3409 "field_helper_module.F90"
( 3409)     ISIZE = UBOUNDS
( 3410)     IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1
( 3411) # 3412 "field_helper_module.F90"
( 3412)     ALLOCATE(FIELD_PTR)
( 3413)     NBLOCKS = UBOUNDS (2)
( 3414)     CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:2-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
( 3415) # 3416 "field_helper_module.F90"
( 3416)     FIELD_PTR%ISTATUS = NHSTFRESH
( 3417)     FIELD_PTR%PTR => FIELD_PTR%DATA
( 3418) # 3419 "field_helper_module.F90"
( 3419)   END SUBROUTINE CREATE_TEMPORARY_LOG2D_LU
( 3420) # 3422 "field_helper_module.F90"
( 3422) END MODULE FIELD_HELPER_MODULE
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 213)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 250)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 457)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 494)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 742)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 779)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1070)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1107)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1275)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1312)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1519)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1556)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1804)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 1841)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2132)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2169)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2337)






NVFORTRAN (Version     23.1)          02/24/2023  13:53:51      page 121

NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2374)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2581)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2618)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2866)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 2903)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 3194)
NVFORTRAN-W-0194-INTENT(IN) argument cannot be defined - self (field_helper_module.F90: 3231)
