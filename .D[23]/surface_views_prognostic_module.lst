


NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: surface_views_prognostic_module.F90

(    1) 
(    2) MODULE SURFACE_VIEWS_PROGNOSTIC_MODULE
(    3)   ! The SURFACE_VIEWS type contains namespaced access to groups of
(    4)   ! array pointers according to individual surface variable groups.
(    5)   !
(    6)   !
(    7)   ! Variable naming conventions
(    8)   ! ---------------------------
(    9)   ! The top-level type `SURFACE_VIEWS_TYPE` holds multiple group
(   10)   ! types, each prefixed with `GSP_` for prognostic and `GSD_` for
(   11)   ! diagnostic variable groups.
(   12)   !
(   13)   ! Each group type holds a list of array views (pointers to
(   14)   ! sub-sections of the gobal array), each prefixed with `P` to
(   15)   ! indicate a thread-local view pointer. Data views of prognostic
(   16)   ! variables have an additional suffix that indicates the time index
(   17)   ! (eg.  `_T0`, `_T1` or `_T9`). The backend storage for each of
(   18)   ! these view pointers is provided by `FIELD_2D/FIELD_3D` objects, a
(   19)   ! reference to which is also stored on the group types and prefixed
(   20)   ! with `F_`.
(   21) 
(   22) USE PARKIND1, ONLY: JPIM, JPRB
(   23) USE FIELD_MODULE, ONLY: FIELD_2D, FIELD_3D, FIELD_4D, FIELD_2D_PTR, &
(   24)  &                      FIELD_3D_PTR, FIELD_2D_VIEW, FIELD_3D_VIEW
(   25) ! Using global imports here, since fypp notation breaks cmake's dependency analysis
(   26) USE SURFACE_VARIABLES_MOD
(   27) USE YOMDYN, ONLY : TDYN
(   28) 
(   29) IMPLICIT NONE
(   30) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 3

(   31) TYPE SURFACE_VIEW_GROUP_SOILB
(   32)   REAL(KIND=JPRB), POINTER :: PT_T0(:,:)   ! temperature
(   33)   REAL(KIND=JPRB), POINTER :: PT_T1(:,:)   ! temperature
(   34)   REAL(KIND=JPRB), POINTER :: PT_T9(:,:)   ! temperature
(   35) !>REAL(KIND=JPRB)          :: PT_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   36) !>REAL(KIND=JPRB)          :: PT_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   37) !>REAL(KIND=JPRB)          :: PT_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   38)   REAL(KIND=JPRB), POINTER :: PQ_T0(:,:)   ! liquid water content
(   39)   REAL(KIND=JPRB), POINTER :: PQ_T1(:,:)   ! liquid water content
(   40)   REAL(KIND=JPRB), POINTER :: PQ_T9(:,:)   ! liquid water content
(   41) !>REAL(KIND=JPRB)          :: PQ_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   42) !>REAL(KIND=JPRB)          :: PQ_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   43) !>REAL(KIND=JPRB)          :: PQ_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   44)   REAL(KIND=JPRB), POINTER :: PTL_T0(:,:)   ! ice water content (for MF)
(   45)   REAL(KIND=JPRB), POINTER :: PTL_T1(:,:)   ! ice water content (for MF)
(   46)   REAL(KIND=JPRB), POINTER :: PTL_T9(:,:)   ! ice water content (for MF)
(   47) !>REAL(KIND=JPRB)          :: PTL_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   48) !>REAL(KIND=JPRB)          :: PTL_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   49) !>REAL(KIND=JPRB)          :: PTL_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   50)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(   51) 
(   52)   TYPE(SURFACE_VARIABLE_GROUP_SOILB), POINTER :: VARIABLE_GROUP
(   53)   TYPE(FIELD_3D), POINTER :: F_T_T0=>NULL(), F_T_T1=>NULL(), F_T_T9=>NULL()
(   54)   TYPE(FIELD_3D), POINTER :: F_Q_T0=>NULL(), F_Q_T1=>NULL(), F_Q_T9=>NULL()
(   55)   TYPE(FIELD_3D), POINTER :: F_TL_T0=>NULL(), F_TL_T1=>NULL(), F_TL_T9=>NULL()
(   56)   TYPE(FIELD_4D), POINTER :: F_GROUP
(   57) 
(   58) CONTAINS
(   59)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SOILB_INIT
(   60)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SOILB_UPDATE_VIEW
(   61)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_SOILB_SET9TO0
(   62)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_SOILB_SET1TO9
(   63)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_SOILB_SET1TO0
(   64)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_SOILB_SET0TO1
(   65)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_SOILB_PHTFILT
(   66) END TYPE SURFACE_VIEW_GROUP_SOILB
(   67) 
(   68) TYPE SURFACE_VIEW_GROUP_SNOWG
(   69)   REAL(KIND=JPRB), POINTER :: PF_T0(:,:)   ! content of surface snow
(   70)   REAL(KIND=JPRB), POINTER :: PF_T1(:,:)   ! content of surface snow
(   71)   REAL(KIND=JPRB), POINTER :: PF_T9(:,:)   ! content of surface snow
(   72) !>REAL(KIND=JPRB)          :: PF_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   73) !>REAL(KIND=JPRB)          :: PF_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   74) !>REAL(KIND=JPRB)          :: PF_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   75)   REAL(KIND=JPRB), POINTER :: PA_T0(:,:)   ! snow albedo
(   76)   REAL(KIND=JPRB), POINTER :: PA_T1(:,:)   ! snow albedo
(   77)   REAL(KIND=JPRB), POINTER :: PA_T9(:,:)   ! snow albedo
(   78) !>REAL(KIND=JPRB)          :: PA_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   79) !>REAL(KIND=JPRB)          :: PA_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   80) !>REAL(KIND=JPRB)          :: PA_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   81)   REAL(KIND=JPRB), POINTER :: PR_T0(:,:)   ! snow density
(   82)   REAL(KIND=JPRB), POINTER :: PR_T1(:,:)   ! snow density
(   83)   REAL(KIND=JPRB), POINTER :: PR_T9(:,:)   ! snow density
(   84) !>REAL(KIND=JPRB)          :: PR_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   85) !>REAL(KIND=JPRB)          :: PR_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   86) !>REAL(KIND=JPRB)          :: PR_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   87)   REAL(KIND=JPRB), POINTER :: PT_T0(:,:)   ! total albedo (diagnostic for MF for LVGSN)
(   88)   REAL(KIND=JPRB), POINTER :: PT_T1(:,:)   ! total albedo (diagnostic for MF for LVGSN)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 4

(   89)   REAL(KIND=JPRB), POINTER :: PT_T9(:,:)   ! total albedo (diagnostic for MF for LVGSN)
(   90) !>REAL(KIND=JPRB)          :: PT_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   91) !>REAL(KIND=JPRB)          :: PT_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   92) !>REAL(KIND=JPRB)          :: PT_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   93)   REAL(KIND=JPRB), POINTER :: PW_T0(:,:)   ! Liquid water content
(   94)   REAL(KIND=JPRB), POINTER :: PW_T1(:,:)   ! Liquid water content
(   95)   REAL(KIND=JPRB), POINTER :: PW_T9(:,:)   ! Liquid water content
(   96) !>REAL(KIND=JPRB)          :: PW_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   97) !>REAL(KIND=JPRB)          :: PW_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   98) !>REAL(KIND=JPRB)          :: PW_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   99)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  100) 
(  101)   TYPE(SURFACE_VARIABLE_GROUP_SNOWG), POINTER :: VARIABLE_GROUP
(  102)   TYPE(FIELD_3D), POINTER :: F_F_T0=>NULL(), F_F_T1=>NULL(), F_F_T9=>NULL()
(  103)   TYPE(FIELD_3D), POINTER :: F_A_T0=>NULL(), F_A_T1=>NULL(), F_A_T9=>NULL()
(  104)   TYPE(FIELD_3D), POINTER :: F_R_T0=>NULL(), F_R_T1=>NULL(), F_R_T9=>NULL()
(  105)   TYPE(FIELD_3D), POINTER :: F_T_T0=>NULL(), F_T_T1=>NULL(), F_T_T9=>NULL()
(  106)   TYPE(FIELD_3D), POINTER :: F_W_T0=>NULL(), F_W_T1=>NULL(), F_W_T9=>NULL()
(  107)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  108) 
(  109) CONTAINS
(  110)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SNOWG_INIT
(  111)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SNOWG_UPDATE_VIEW
(  112)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_SNOWG_SET9TO0
(  113)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_SNOWG_SET1TO9
(  114)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_SNOWG_SET1TO0
(  115)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_SNOWG_SET0TO1
(  116)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_SNOWG_PHTFILT
(  117) END TYPE SURFACE_VIEW_GROUP_SNOWG
(  118) 
(  119) TYPE SURFACE_VIEW_GROUP_LAKEB
(  120)   REAL(KIND=JPRB), POINTER :: PLICT_T0(:)   ! lake ice temperature
(  121)   REAL(KIND=JPRB), POINTER :: PLICT_T1(:)   ! lake ice temperature
(  122)   REAL(KIND=JPRB), POINTER :: PLICT_T9(:)   ! lake ice temperature
(  123) !>REAL(KIND=JPRB)          :: PLICT_T0 (YDCPG_OPTS%KLON)
(  124) !>REAL(KIND=JPRB)          :: PLICT_T1 (YDCPG_OPTS%KLON)
(  125) !>REAL(KIND=JPRB)          :: PLICT_T9 (YDCPG_OPTS%KLON)
(  126)   REAL(KIND=JPRB), POINTER :: PLMLT_T0(:)   ! lake mixed-layer temperature
(  127)   REAL(KIND=JPRB), POINTER :: PLMLT_T1(:)   ! lake mixed-layer temperature
(  128)   REAL(KIND=JPRB), POINTER :: PLMLT_T9(:)   ! lake mixed-layer temperature
(  129) !>REAL(KIND=JPRB)          :: PLMLT_T0 (YDCPG_OPTS%KLON)
(  130) !>REAL(KIND=JPRB)          :: PLMLT_T1 (YDCPG_OPTS%KLON)
(  131) !>REAL(KIND=JPRB)          :: PLMLT_T9 (YDCPG_OPTS%KLON)
(  132)   REAL(KIND=JPRB), POINTER :: PLTLT_T0(:)   ! lake total layer temperature
(  133)   REAL(KIND=JPRB), POINTER :: PLTLT_T1(:)   ! lake total layer temperature
(  134)   REAL(KIND=JPRB), POINTER :: PLTLT_T9(:)   ! lake total layer temperature
(  135) !>REAL(KIND=JPRB)          :: PLTLT_T0 (YDCPG_OPTS%KLON)
(  136) !>REAL(KIND=JPRB)          :: PLTLT_T1 (YDCPG_OPTS%KLON)
(  137) !>REAL(KIND=JPRB)          :: PLTLT_T9 (YDCPG_OPTS%KLON)
(  138)   REAL(KIND=JPRB), POINTER :: PLBLT_T0(:)   ! lake bottom layer temperature
(  139)   REAL(KIND=JPRB), POINTER :: PLBLT_T1(:)   ! lake bottom layer temperature
(  140)   REAL(KIND=JPRB), POINTER :: PLBLT_T9(:)   ! lake bottom layer temperature
(  141) !>REAL(KIND=JPRB)          :: PLBLT_T0 (YDCPG_OPTS%KLON)
(  142) !>REAL(KIND=JPRB)          :: PLBLT_T1 (YDCPG_OPTS%KLON)
(  143) !>REAL(KIND=JPRB)          :: PLBLT_T9 (YDCPG_OPTS%KLON)
(  144)   REAL(KIND=JPRB), POINTER :: PLSHF_T0(:)   ! lake shape factor
(  145)   REAL(KIND=JPRB), POINTER :: PLSHF_T1(:)   ! lake shape factor
(  146)   REAL(KIND=JPRB), POINTER :: PLSHF_T9(:)   ! lake shape factor






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 5

(  147) !>REAL(KIND=JPRB)          :: PLSHF_T0 (YDCPG_OPTS%KLON)
(  148) !>REAL(KIND=JPRB)          :: PLSHF_T1 (YDCPG_OPTS%KLON)
(  149) !>REAL(KIND=JPRB)          :: PLSHF_T9 (YDCPG_OPTS%KLON)
(  150)   REAL(KIND=JPRB), POINTER :: PLICD_T0(:)   ! lake ice depth
(  151)   REAL(KIND=JPRB), POINTER :: PLICD_T1(:)   ! lake ice depth
(  152)   REAL(KIND=JPRB), POINTER :: PLICD_T9(:)   ! lake ice depth
(  153) !>REAL(KIND=JPRB)          :: PLICD_T0 (YDCPG_OPTS%KLON)
(  154) !>REAL(KIND=JPRB)          :: PLICD_T1 (YDCPG_OPTS%KLON)
(  155) !>REAL(KIND=JPRB)          :: PLICD_T9 (YDCPG_OPTS%KLON)
(  156)   REAL(KIND=JPRB), POINTER :: PLMLD_T0(:)   ! lake mixed-layer depth
(  157)   REAL(KIND=JPRB), POINTER :: PLMLD_T1(:)   ! lake mixed-layer depth
(  158)   REAL(KIND=JPRB), POINTER :: PLMLD_T9(:)   ! lake mixed-layer depth
(  159) !>REAL(KIND=JPRB)          :: PLMLD_T0 (YDCPG_OPTS%KLON)
(  160) !>REAL(KIND=JPRB)          :: PLMLD_T1 (YDCPG_OPTS%KLON)
(  161) !>REAL(KIND=JPRB)          :: PLMLD_T9 (YDCPG_OPTS%KLON)
(  162)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  163) 
(  164)   TYPE(SURFACE_VARIABLE_GROUP_LAKEB), POINTER :: VARIABLE_GROUP
(  165)   TYPE(FIELD_2D), POINTER :: F_LICT_T0=>NULL(), F_LICT_T1=>NULL(), F_LICT_T9=>NULL()
(  166)   TYPE(FIELD_2D), POINTER :: F_LMLT_T0=>NULL(), F_LMLT_T1=>NULL(), F_LMLT_T9=>NULL()
(  167)   TYPE(FIELD_2D), POINTER :: F_LTLT_T0=>NULL(), F_LTLT_T1=>NULL(), F_LTLT_T9=>NULL()
(  168)   TYPE(FIELD_2D), POINTER :: F_LBLT_T0=>NULL(), F_LBLT_T1=>NULL(), F_LBLT_T9=>NULL()
(  169)   TYPE(FIELD_2D), POINTER :: F_LSHF_T0=>NULL(), F_LSHF_T1=>NULL(), F_LSHF_T9=>NULL()
(  170)   TYPE(FIELD_2D), POINTER :: F_LICD_T0=>NULL(), F_LICD_T1=>NULL(), F_LICD_T9=>NULL()
(  171)   TYPE(FIELD_2D), POINTER :: F_LMLD_T0=>NULL(), F_LMLD_T1=>NULL(), F_LMLD_T9=>NULL()
(  172)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  173) 
(  174) CONTAINS
(  175)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_LAKEB_INIT
(  176)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_LAKEB_UPDATE_VIEW
(  177)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_LAKEB_SET9TO0
(  178)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_LAKEB_SET1TO9
(  179)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_LAKEB_SET1TO0
(  180)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_LAKEB_SET0TO1
(  181)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_LAKEB_PHTFILT
(  182) END TYPE SURFACE_VIEW_GROUP_LAKEB
(  183) 
(  184) TYPE SURFACE_VIEW_GROUP_RESVR
(  185)   REAL(KIND=JPRB), POINTER :: PT_T0(:)   ! skin temperature (Ts)
(  186)   REAL(KIND=JPRB), POINTER :: PT_T1(:)   ! skin temperature (Ts)
(  187)   REAL(KIND=JPRB), POINTER :: PT_T9(:)   ! skin temperature (Ts)
(  188) !>REAL(KIND=JPRB)          :: PT_T0 (YDCPG_OPTS%KLON)
(  189) !>REAL(KIND=JPRB)          :: PT_T1 (YDCPG_OPTS%KLON)
(  190) !>REAL(KIND=JPRB)          :: PT_T9 (YDCPG_OPTS%KLON)
(  191)   REAL(KIND=JPRB), POINTER :: PW_T0(:)   ! skin water content (Wskin) at ECMWF superficial reservoir water content (Ws) at M
(  192)   REAL(KIND=JPRB), POINTER :: PW_T1(:)   ! skin water content (Wskin) at ECMWF superficial reservoir water content (Ws) at M
(  193)   REAL(KIND=JPRB), POINTER :: PW_T9(:)   ! skin water content (Wskin) at ECMWF superficial reservoir water content (Ws) at M
(  194) !>REAL(KIND=JPRB)          :: PW_T0 (YDCPG_OPTS%KLON)
(  195) !>REAL(KIND=JPRB)          :: PW_T1 (YDCPG_OPTS%KLON)
(  196) !>REAL(KIND=JPRB)          :: PW_T9 (YDCPG_OPTS%KLON)
(  197)   REAL(KIND=JPRB), POINTER :: PFC_T0(:)   ! skin water content (Wl) at MF
(  198)   REAL(KIND=JPRB), POINTER :: PFC_T1(:)   ! skin water content (Wl) at MF
(  199)   REAL(KIND=JPRB), POINTER :: PFC_T9(:)   ! skin water content (Wl) at MF
(  200) !>REAL(KIND=JPRB)          :: PFC_T0 (YDCPG_OPTS%KLON)
(  201) !>REAL(KIND=JPRB)          :: PFC_T1 (YDCPG_OPTS%KLON)
(  202) !>REAL(KIND=JPRB)          :: PFC_T9 (YDCPG_OPTS%KLON)
(  203)   REAL(KIND=JPRB), POINTER :: PIC_T0(:)   ! superficial reservoir ice
(  204)   REAL(KIND=JPRB), POINTER :: PIC_T1(:)   ! superficial reservoir ice






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 6

(  205)   REAL(KIND=JPRB), POINTER :: PIC_T9(:)   ! superficial reservoir ice
(  206) !>REAL(KIND=JPRB)          :: PIC_T0 (YDCPG_OPTS%KLON)
(  207) !>REAL(KIND=JPRB)          :: PIC_T1 (YDCPG_OPTS%KLON)
(  208) !>REAL(KIND=JPRB)          :: PIC_T9 (YDCPG_OPTS%KLON)
(  209)   REAL(KIND=JPRB), POINTER :: PFP1_T0(:)   ! interpolated Ts for 2nd part of 927-FULLPOS
(  210)   REAL(KIND=JPRB), POINTER :: PFP1_T1(:)   ! interpolated Ts for 2nd part of 927-FULLPOS
(  211)   REAL(KIND=JPRB), POINTER :: PFP1_T9(:)   ! interpolated Ts for 2nd part of 927-FULLPOS
(  212) !>REAL(KIND=JPRB)          :: PFP1_T0 (YDCPG_OPTS%KLON)
(  213) !>REAL(KIND=JPRB)          :: PFP1_T1 (YDCPG_OPTS%KLON)
(  214) !>REAL(KIND=JPRB)          :: PFP1_T9 (YDCPG_OPTS%KLON)
(  215)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  216) 
(  217)   TYPE(SURFACE_VARIABLE_GROUP_RESVR), POINTER :: VARIABLE_GROUP
(  218)   TYPE(FIELD_2D), POINTER :: F_T_T0=>NULL(), F_T_T1=>NULL(), F_T_T9=>NULL()
(  219)   TYPE(FIELD_2D), POINTER :: F_W_T0=>NULL(), F_W_T1=>NULL(), F_W_T9=>NULL()
(  220)   TYPE(FIELD_2D), POINTER :: F_FC_T0=>NULL(), F_FC_T1=>NULL(), F_FC_T9=>NULL()
(  221)   TYPE(FIELD_2D), POINTER :: F_IC_T0=>NULL(), F_IC_T1=>NULL(), F_IC_T9=>NULL()
(  222)   TYPE(FIELD_2D), POINTER :: F_FP1_T0=>NULL(), F_FP1_T1=>NULL(), F_FP1_T9=>NULL()
(  223)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  224) 
(  225) CONTAINS
(  226)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_RESVR_INIT
(  227)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_RESVR_UPDATE_VIEW
(  228)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_RESVR_SET9TO0
(  229)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_RESVR_SET1TO9
(  230)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_RESVR_SET1TO0
(  231)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_RESVR_SET0TO1
(  232)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_RESVR_PHTFILT
(  233) END TYPE SURFACE_VIEW_GROUP_RESVR
(  234) 
(  235) TYPE SURFACE_VIEW_GROUP_CLS
(  236)   REAL(KIND=JPRB), POINTER :: PTCLS_T0(:)   ! 2m temperature
(  237)   REAL(KIND=JPRB), POINTER :: PTCLS_T1(:)   ! 2m temperature
(  238)   REAL(KIND=JPRB), POINTER :: PTCLS_T9(:)   ! 2m temperature
(  239) !>REAL(KIND=JPRB)          :: PTCLS_T0 (YDCPG_OPTS%KLON)
(  240) !>REAL(KIND=JPRB)          :: PTCLS_T1 (YDCPG_OPTS%KLON)
(  241) !>REAL(KIND=JPRB)          :: PTCLS_T9 (YDCPG_OPTS%KLON)
(  242)   REAL(KIND=JPRB), POINTER :: PHUCLS_T0(:)   ! 2m humidity
(  243)   REAL(KIND=JPRB), POINTER :: PHUCLS_T1(:)   ! 2m humidity
(  244)   REAL(KIND=JPRB), POINTER :: PHUCLS_T9(:)   ! 2m humidity
(  245) !>REAL(KIND=JPRB)          :: PHUCLS_T0 (YDCPG_OPTS%KLON)
(  246) !>REAL(KIND=JPRB)          :: PHUCLS_T1 (YDCPG_OPTS%KLON)
(  247) !>REAL(KIND=JPRB)          :: PHUCLS_T9 (YDCPG_OPTS%KLON)
(  248)   REAL(KIND=JPRB), POINTER :: PUCLS_T0(:)   ! 10m U-wind
(  249)   REAL(KIND=JPRB), POINTER :: PUCLS_T1(:)   ! 10m U-wind
(  250)   REAL(KIND=JPRB), POINTER :: PUCLS_T9(:)   ! 10m U-wind
(  251) !>REAL(KIND=JPRB)          :: PUCLS_T0 (YDCPG_OPTS%KLON)
(  252) !>REAL(KIND=JPRB)          :: PUCLS_T1 (YDCPG_OPTS%KLON)
(  253) !>REAL(KIND=JPRB)          :: PUCLS_T9 (YDCPG_OPTS%KLON)
(  254)   REAL(KIND=JPRB), POINTER :: PVCLS_T0(:)   ! 10m V-wind
(  255)   REAL(KIND=JPRB), POINTER :: PVCLS_T1(:)   ! 10m V-wind
(  256)   REAL(KIND=JPRB), POINTER :: PVCLS_T9(:)   ! 10m V-wind
(  257) !>REAL(KIND=JPRB)          :: PVCLS_T0 (YDCPG_OPTS%KLON)
(  258) !>REAL(KIND=JPRB)          :: PVCLS_T1 (YDCPG_OPTS%KLON)
(  259) !>REAL(KIND=JPRB)          :: PVCLS_T9 (YDCPG_OPTS%KLON)
(  260)   REAL(KIND=JPRB), POINTER :: PNUCLS_T0(:)   ! 10m neutral U-wind
(  261)   REAL(KIND=JPRB), POINTER :: PNUCLS_T1(:)   ! 10m neutral U-wind
(  262)   REAL(KIND=JPRB), POINTER :: PNUCLS_T9(:)   ! 10m neutral U-wind






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 7

(  263) !>REAL(KIND=JPRB)          :: PNUCLS_T0 (YDCPG_OPTS%KLON)
(  264) !>REAL(KIND=JPRB)          :: PNUCLS_T1 (YDCPG_OPTS%KLON)
(  265) !>REAL(KIND=JPRB)          :: PNUCLS_T9 (YDCPG_OPTS%KLON)
(  266)   REAL(KIND=JPRB), POINTER :: PNVCLS_T0(:)   ! 10m neutral V-wind
(  267)   REAL(KIND=JPRB), POINTER :: PNVCLS_T1(:)   ! 10m neutral V-wind
(  268)   REAL(KIND=JPRB), POINTER :: PNVCLS_T9(:)   ! 10m neutral V-wind
(  269) !>REAL(KIND=JPRB)          :: PNVCLS_T0 (YDCPG_OPTS%KLON)
(  270) !>REAL(KIND=JPRB)          :: PNVCLS_T1 (YDCPG_OPTS%KLON)
(  271) !>REAL(KIND=JPRB)          :: PNVCLS_T9 (YDCPG_OPTS%KLON)
(  272)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  273) 
(  274)   TYPE(SURFACE_VARIABLE_GROUP_CLS), POINTER :: VARIABLE_GROUP
(  275)   TYPE(FIELD_2D), POINTER :: F_TCLS_T0=>NULL(), F_TCLS_T1=>NULL(), F_TCLS_T9=>NULL()
(  276)   TYPE(FIELD_2D), POINTER :: F_HUCLS_T0=>NULL(), F_HUCLS_T1=>NULL(), F_HUCLS_T9=>NULL()
(  277)   TYPE(FIELD_2D), POINTER :: F_UCLS_T0=>NULL(), F_UCLS_T1=>NULL(), F_UCLS_T9=>NULL()
(  278)   TYPE(FIELD_2D), POINTER :: F_VCLS_T0=>NULL(), F_VCLS_T1=>NULL(), F_VCLS_T9=>NULL()
(  279)   TYPE(FIELD_2D), POINTER :: F_NUCLS_T0=>NULL(), F_NUCLS_T1=>NULL(), F_NUCLS_T9=>NULL()
(  280)   TYPE(FIELD_2D), POINTER :: F_NVCLS_T0=>NULL(), F_NVCLS_T1=>NULL(), F_NVCLS_T9=>NULL()
(  281)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  282) 
(  283) CONTAINS
(  284)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_CLS_INIT
(  285)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_CLS_UPDATE_VIEW
(  286)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_CLS_SET9TO0
(  287)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_CLS_SET1TO9
(  288)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_CLS_SET1TO0
(  289)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_CLS_SET0TO1
(  290)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_CLS_PHTFILT
(  291) END TYPE SURFACE_VIEW_GROUP_CLS
(  292) 
(  293) TYPE SURFACE_VIEW_GROUP_OML
(  294)   REAL(KIND=JPRB), POINTER :: PTO_T0(:,:)   ! temperature
(  295)   REAL(KIND=JPRB), POINTER :: PTO_T1(:,:)   ! temperature
(  296)   REAL(KIND=JPRB), POINTER :: PTO_T9(:,:)   ! temperature
(  297) !>REAL(KIND=JPRB)          :: PTO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  298) !>REAL(KIND=JPRB)          :: PTO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  299) !>REAL(KIND=JPRB)          :: PTO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  300)   REAL(KIND=JPRB), POINTER :: PSO_T0(:,:)   ! salinity
(  301)   REAL(KIND=JPRB), POINTER :: PSO_T1(:,:)   ! salinity
(  302)   REAL(KIND=JPRB), POINTER :: PSO_T9(:,:)   ! salinity
(  303) !>REAL(KIND=JPRB)          :: PSO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  304) !>REAL(KIND=JPRB)          :: PSO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  305) !>REAL(KIND=JPRB)          :: PSO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  306)   REAL(KIND=JPRB), POINTER :: PUO_T0(:,:)   ! U velocity
(  307)   REAL(KIND=JPRB), POINTER :: PUO_T1(:,:)   ! U velocity
(  308)   REAL(KIND=JPRB), POINTER :: PUO_T9(:,:)   ! U velocity
(  309) !>REAL(KIND=JPRB)          :: PUO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  310) !>REAL(KIND=JPRB)          :: PUO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  311) !>REAL(KIND=JPRB)          :: PUO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  312)   REAL(KIND=JPRB), POINTER :: PVO_T0(:,:)   ! V velocity
(  313)   REAL(KIND=JPRB), POINTER :: PVO_T1(:,:)   ! V velocity
(  314)   REAL(KIND=JPRB), POINTER :: PVO_T9(:,:)   ! V velocity
(  315) !>REAL(KIND=JPRB)          :: PVO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  316) !>REAL(KIND=JPRB)          :: PVO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  317) !>REAL(KIND=JPRB)          :: PVO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  318)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  319) 
(  320)   TYPE(SURFACE_VARIABLE_GROUP_OML), POINTER :: VARIABLE_GROUP






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 8

(  321)   TYPE(FIELD_3D), POINTER :: F_TO_T0=>NULL(), F_TO_T1=>NULL(), F_TO_T9=>NULL()
(  322)   TYPE(FIELD_3D), POINTER :: F_SO_T0=>NULL(), F_SO_T1=>NULL(), F_SO_T9=>NULL()
(  323)   TYPE(FIELD_3D), POINTER :: F_UO_T0=>NULL(), F_UO_T1=>NULL(), F_UO_T9=>NULL()
(  324)   TYPE(FIELD_3D), POINTER :: F_VO_T0=>NULL(), F_VO_T1=>NULL(), F_VO_T9=>NULL()
(  325)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  326) 
(  327) CONTAINS
(  328)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_OML_INIT
(  329)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_OML_UPDATE_VIEW
(  330)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_OML_SET9TO0
(  331)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_OML_SET1TO9
(  332)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_OML_SET1TO0
(  333)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_OML_SET0TO1
(  334)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_OML_PHTFILT
(  335) END TYPE SURFACE_VIEW_GROUP_OML
(  336) 
(  337) TYPE SURFACE_VIEW_GROUP_EXTRP
(  338)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  339) 
(  340)   TYPE(SURFACE_VARIABLE_GROUP_EXTRP), POINTER :: VARIABLE_GROUP
(  341)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  342) 
(  343) CONTAINS
(  344)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_EXTRP_INIT
(  345)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_EXTRP_UPDATE_VIEW
(  346)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_EXTRP_SET9TO0
(  347)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_EXTRP_SET1TO9
(  348)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_EXTRP_SET1TO0
(  349)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_EXTRP_SET0TO1
(  350)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_EXTRP_PHTFILT
(  351) END TYPE SURFACE_VIEW_GROUP_EXTRP
(  352) 
(  353) TYPE SURFACE_VIEW_GROUP_XTRP2
(  354)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  355) 
(  356)   TYPE(SURFACE_VARIABLE_GROUP_XTRP2), POINTER :: VARIABLE_GROUP
(  357)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  358) 
(  359) CONTAINS
(  360)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_XTRP2_INIT
(  361)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_XTRP2_UPDATE_VIEW
(  362)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_XTRP2_SET9TO0
(  363)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_XTRP2_SET1TO9
(  364)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_XTRP2_SET1TO0
(  365)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_XTRP2_SET0TO1
(  366)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_XTRP2_PHTFILT
(  367) END TYPE SURFACE_VIEW_GROUP_XTRP2
(  368) 
(  369) TYPE SURFACE_VIEW_GROUP_CANRI
(  370)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  371) 
(  372)   TYPE(SURFACE_VARIABLE_GROUP_CANRI), POINTER :: VARIABLE_GROUP
(  373)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  374) 
(  375) CONTAINS
(  376)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_CANRI_INIT
(  377)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_CANRI_UPDATE_VIEW
(  378)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_CANRI_SET9TO0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 9

(  379)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_CANRI_SET1TO9
(  380)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_CANRI_SET1TO0
(  381)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_CANRI_SET0TO1
(  382)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_CANRI_PHTFILT
(  383) END TYPE SURFACE_VIEW_GROUP_CANRI
(  384) 
(  385) 
(  386) CONTAINS
(  387) 
(  388)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_INIT(SELF, VARIABLE_GROUP)
(  389)     ! Constructor of the array view type for a surface variable group
(  390)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  391)     TYPE(SURFACE_VARIABLE_GROUP_SOILB), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  392) 
(  393)     ! Create a view per timestep field for each prognostic variable
(  394)     SELF%F_T_T0 => VARIABLE_GROUP%VT%FT0
(  395)     SELF%F_T_T1 => VARIABLE_GROUP%VT%FT1
(  396)     SELF%F_T_T9 => VARIABLE_GROUP%VT%FT9
(  397)     SELF%F_Q_T0 => VARIABLE_GROUP%VQ%FT0
(  398)     SELF%F_Q_T1 => VARIABLE_GROUP%VQ%FT1
(  399)     SELF%F_Q_T9 => VARIABLE_GROUP%VQ%FT9
(  400)     SELF%F_TL_T0 => VARIABLE_GROUP%VTL%FT0
(  401)     SELF%F_TL_T1 => VARIABLE_GROUP%VTL%FT1
(  402)     SELF%F_TL_T9 => VARIABLE_GROUP%VTL%FT9
(  403)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  404)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  405)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_INIT
(  406) 
(  407)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  408)     ! Extract local array views from field objects
(  409)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  410)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  411) 
(  412)     ! Set up the view pointer for each timestep field
(  413)     SELF%PT_T0 => SELF%F_T_T0%GET_VIEW(BLOCK_INDEX)
(  414)     SELF%PT_T1 => SELF%F_T_T1%GET_VIEW(BLOCK_INDEX)
(  415)     SELF%PT_T9 => SELF%F_T_T9%GET_VIEW(BLOCK_INDEX)
(  416)     SELF%PQ_T0 => SELF%F_Q_T0%GET_VIEW(BLOCK_INDEX)
(  417)     SELF%PQ_T1 => SELF%F_Q_T1%GET_VIEW(BLOCK_INDEX)
(  418)     SELF%PQ_T9 => SELF%F_Q_T9%GET_VIEW(BLOCK_INDEX)
(  419)     SELF%PTL_T0 => SELF%F_TL_T0%GET_VIEW(BLOCK_INDEX)
(  420)     SELF%PTL_T1 => SELF%F_TL_T1%GET_VIEW(BLOCK_INDEX)
(  421)     SELF%PTL_T9 => SELF%F_TL_T9%GET_VIEW(BLOCK_INDEX)
(  422) 
(  423)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  424)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_UPDATE_VIEW
(  425) 
(  426)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_INIT(SELF, VARIABLE_GROUP)
(  427)     ! Constructor of the array view type for a surface variable group
(  428)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  429)     TYPE(SURFACE_VARIABLE_GROUP_SNOWG), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  430) 
(  431)     ! Create a view per timestep field for each prognostic variable
(  432)     SELF%F_F_T0 => VARIABLE_GROUP%VF%FT0
(  433)     SELF%F_F_T1 => VARIABLE_GROUP%VF%FT1
(  434)     SELF%F_F_T9 => VARIABLE_GROUP%VF%FT9
(  435)     SELF%F_A_T0 => VARIABLE_GROUP%VA%FT0
(  436)     SELF%F_A_T1 => VARIABLE_GROUP%VA%FT1






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 10

(  437)     SELF%F_A_T9 => VARIABLE_GROUP%VA%FT9
(  438)     SELF%F_R_T0 => VARIABLE_GROUP%VR%FT0
(  439)     SELF%F_R_T1 => VARIABLE_GROUP%VR%FT1
(  440)     SELF%F_R_T9 => VARIABLE_GROUP%VR%FT9
(  441)     SELF%F_T_T0 => VARIABLE_GROUP%VT%FT0
(  442)     SELF%F_T_T1 => VARIABLE_GROUP%VT%FT1
(  443)     SELF%F_T_T9 => VARIABLE_GROUP%VT%FT9
(  444)     SELF%F_W_T0 => VARIABLE_GROUP%VW%FT0
(  445)     SELF%F_W_T1 => VARIABLE_GROUP%VW%FT1
(  446)     SELF%F_W_T9 => VARIABLE_GROUP%VW%FT9
(  447)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  448)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  449)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_INIT
(  450) 
(  451)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  452)     ! Extract local array views from field objects
(  453)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  454)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  455) 
(  456)     ! Set up the view pointer for each timestep field
(  457)     SELF%PF_T0 => SELF%F_F_T0%GET_VIEW(BLOCK_INDEX)
(  458)     SELF%PF_T1 => SELF%F_F_T1%GET_VIEW(BLOCK_INDEX)
(  459)     SELF%PF_T9 => SELF%F_F_T9%GET_VIEW(BLOCK_INDEX)
(  460)     SELF%PA_T0 => SELF%F_A_T0%GET_VIEW(BLOCK_INDEX)
(  461)     SELF%PA_T1 => SELF%F_A_T1%GET_VIEW(BLOCK_INDEX)
(  462)     SELF%PA_T9 => SELF%F_A_T9%GET_VIEW(BLOCK_INDEX)
(  463)     SELF%PR_T0 => SELF%F_R_T0%GET_VIEW(BLOCK_INDEX)
(  464)     SELF%PR_T1 => SELF%F_R_T1%GET_VIEW(BLOCK_INDEX)
(  465)     SELF%PR_T9 => SELF%F_R_T9%GET_VIEW(BLOCK_INDEX)
(  466)     SELF%PT_T0 => SELF%F_T_T0%GET_VIEW(BLOCK_INDEX)
(  467)     SELF%PT_T1 => SELF%F_T_T1%GET_VIEW(BLOCK_INDEX)
(  468)     SELF%PT_T9 => SELF%F_T_T9%GET_VIEW(BLOCK_INDEX)
(  469)     SELF%PW_T0 => SELF%F_W_T0%GET_VIEW(BLOCK_INDEX)
(  470)     SELF%PW_T1 => SELF%F_W_T1%GET_VIEW(BLOCK_INDEX)
(  471)     SELF%PW_T9 => SELF%F_W_T9%GET_VIEW(BLOCK_INDEX)
(  472) 
(  473)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  474)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_UPDATE_VIEW
(  475) 
(  476)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_INIT(SELF, VARIABLE_GROUP)
(  477)     ! Constructor of the array view type for a surface variable group
(  478)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  479)     TYPE(SURFACE_VARIABLE_GROUP_LAKEB), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  480) 
(  481)     ! Create a view per timestep field for each prognostic variable
(  482)     SELF%F_LICT_T0 => VARIABLE_GROUP%VLICT%FT0
(  483)     SELF%F_LICT_T1 => VARIABLE_GROUP%VLICT%FT1
(  484)     SELF%F_LICT_T9 => VARIABLE_GROUP%VLICT%FT9
(  485)     SELF%F_LMLT_T0 => VARIABLE_GROUP%VLMLT%FT0
(  486)     SELF%F_LMLT_T1 => VARIABLE_GROUP%VLMLT%FT1
(  487)     SELF%F_LMLT_T9 => VARIABLE_GROUP%VLMLT%FT9
(  488)     SELF%F_LTLT_T0 => VARIABLE_GROUP%VLTLT%FT0
(  489)     SELF%F_LTLT_T1 => VARIABLE_GROUP%VLTLT%FT1
(  490)     SELF%F_LTLT_T9 => VARIABLE_GROUP%VLTLT%FT9
(  491)     SELF%F_LBLT_T0 => VARIABLE_GROUP%VLBLT%FT0
(  492)     SELF%F_LBLT_T1 => VARIABLE_GROUP%VLBLT%FT1
(  493)     SELF%F_LBLT_T9 => VARIABLE_GROUP%VLBLT%FT9
(  494)     SELF%F_LSHF_T0 => VARIABLE_GROUP%VLSHF%FT0






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 11

(  495)     SELF%F_LSHF_T1 => VARIABLE_GROUP%VLSHF%FT1
(  496)     SELF%F_LSHF_T9 => VARIABLE_GROUP%VLSHF%FT9
(  497)     SELF%F_LICD_T0 => VARIABLE_GROUP%VLICD%FT0
(  498)     SELF%F_LICD_T1 => VARIABLE_GROUP%VLICD%FT1
(  499)     SELF%F_LICD_T9 => VARIABLE_GROUP%VLICD%FT9
(  500)     SELF%F_LMLD_T0 => VARIABLE_GROUP%VLMLD%FT0
(  501)     SELF%F_LMLD_T1 => VARIABLE_GROUP%VLMLD%FT1
(  502)     SELF%F_LMLD_T9 => VARIABLE_GROUP%VLMLD%FT9
(  503)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  504)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  505)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_INIT
(  506) 
(  507)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  508)     ! Extract local array views from field objects
(  509)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  510)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  511) 
(  512)     ! Set up the view pointer for each timestep field
(  513)     SELF%PLICT_T0 => SELF%F_LICT_T0%GET_VIEW(BLOCK_INDEX)
(  514)     SELF%PLICT_T1 => SELF%F_LICT_T1%GET_VIEW(BLOCK_INDEX)
(  515)     SELF%PLICT_T9 => SELF%F_LICT_T9%GET_VIEW(BLOCK_INDEX)
(  516)     SELF%PLMLT_T0 => SELF%F_LMLT_T0%GET_VIEW(BLOCK_INDEX)
(  517)     SELF%PLMLT_T1 => SELF%F_LMLT_T1%GET_VIEW(BLOCK_INDEX)
(  518)     SELF%PLMLT_T9 => SELF%F_LMLT_T9%GET_VIEW(BLOCK_INDEX)
(  519)     SELF%PLTLT_T0 => SELF%F_LTLT_T0%GET_VIEW(BLOCK_INDEX)
(  520)     SELF%PLTLT_T1 => SELF%F_LTLT_T1%GET_VIEW(BLOCK_INDEX)
(  521)     SELF%PLTLT_T9 => SELF%F_LTLT_T9%GET_VIEW(BLOCK_INDEX)
(  522)     SELF%PLBLT_T0 => SELF%F_LBLT_T0%GET_VIEW(BLOCK_INDEX)
(  523)     SELF%PLBLT_T1 => SELF%F_LBLT_T1%GET_VIEW(BLOCK_INDEX)
(  524)     SELF%PLBLT_T9 => SELF%F_LBLT_T9%GET_VIEW(BLOCK_INDEX)
(  525)     SELF%PLSHF_T0 => SELF%F_LSHF_T0%GET_VIEW(BLOCK_INDEX)
(  526)     SELF%PLSHF_T1 => SELF%F_LSHF_T1%GET_VIEW(BLOCK_INDEX)
(  527)     SELF%PLSHF_T9 => SELF%F_LSHF_T9%GET_VIEW(BLOCK_INDEX)
(  528)     SELF%PLICD_T0 => SELF%F_LICD_T0%GET_VIEW(BLOCK_INDEX)
(  529)     SELF%PLICD_T1 => SELF%F_LICD_T1%GET_VIEW(BLOCK_INDEX)
(  530)     SELF%PLICD_T9 => SELF%F_LICD_T9%GET_VIEW(BLOCK_INDEX)
(  531)     SELF%PLMLD_T0 => SELF%F_LMLD_T0%GET_VIEW(BLOCK_INDEX)
(  532)     SELF%PLMLD_T1 => SELF%F_LMLD_T1%GET_VIEW(BLOCK_INDEX)
(  533)     SELF%PLMLD_T9 => SELF%F_LMLD_T9%GET_VIEW(BLOCK_INDEX)
(  534) 
(  535)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  536)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_UPDATE_VIEW
(  537) 
(  538)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_INIT(SELF, VARIABLE_GROUP)
(  539)     ! Constructor of the array view type for a surface variable group
(  540)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
(  541)     TYPE(SURFACE_VARIABLE_GROUP_RESVR), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  542) 
(  543)     ! Create a view per timestep field for each prognostic variable
(  544)     SELF%F_T_T0 => VARIABLE_GROUP%VT%FT0
(  545)     SELF%F_T_T1 => VARIABLE_GROUP%VT%FT1
(  546)     SELF%F_T_T9 => VARIABLE_GROUP%VT%FT9
(  547)     SELF%F_W_T0 => VARIABLE_GROUP%VW%FT0
(  548)     SELF%F_W_T1 => VARIABLE_GROUP%VW%FT1
(  549)     SELF%F_W_T9 => VARIABLE_GROUP%VW%FT9
(  550)     SELF%F_FC_T0 => VARIABLE_GROUP%VFC%FT0
(  551)     SELF%F_FC_T1 => VARIABLE_GROUP%VFC%FT1
(  552)     SELF%F_FC_T9 => VARIABLE_GROUP%VFC%FT9






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 12

(  553)     SELF%F_IC_T0 => VARIABLE_GROUP%VIC%FT0
(  554)     SELF%F_IC_T1 => VARIABLE_GROUP%VIC%FT1
(  555)     SELF%F_IC_T9 => VARIABLE_GROUP%VIC%FT9
(  556)     SELF%F_FP1_T0 => VARIABLE_GROUP%VFP1%FT0
(  557)     SELF%F_FP1_T1 => VARIABLE_GROUP%VFP1%FT1
(  558)     SELF%F_FP1_T9 => VARIABLE_GROUP%VFP1%FT9
(  559)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  560)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  561)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_INIT
(  562) 
(  563)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  564)     ! Extract local array views from field objects
(  565)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
(  566)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  567) 
(  568)     ! Set up the view pointer for each timestep field
(  569)     SELF%PT_T0 => SELF%F_T_T0%GET_VIEW(BLOCK_INDEX)
(  570)     SELF%PT_T1 => SELF%F_T_T1%GET_VIEW(BLOCK_INDEX)
(  571)     SELF%PT_T9 => SELF%F_T_T9%GET_VIEW(BLOCK_INDEX)
(  572)     SELF%PW_T0 => SELF%F_W_T0%GET_VIEW(BLOCK_INDEX)
(  573)     SELF%PW_T1 => SELF%F_W_T1%GET_VIEW(BLOCK_INDEX)
(  574)     SELF%PW_T9 => SELF%F_W_T9%GET_VIEW(BLOCK_INDEX)
(  575)     SELF%PFC_T0 => SELF%F_FC_T0%GET_VIEW(BLOCK_INDEX)
(  576)     SELF%PFC_T1 => SELF%F_FC_T1%GET_VIEW(BLOCK_INDEX)
(  577)     SELF%PFC_T9 => SELF%F_FC_T9%GET_VIEW(BLOCK_INDEX)
(  578)     SELF%PIC_T0 => SELF%F_IC_T0%GET_VIEW(BLOCK_INDEX)
(  579)     SELF%PIC_T1 => SELF%F_IC_T1%GET_VIEW(BLOCK_INDEX)
(  580)     SELF%PIC_T9 => SELF%F_IC_T9%GET_VIEW(BLOCK_INDEX)
(  581)     SELF%PFP1_T0 => SELF%F_FP1_T0%GET_VIEW(BLOCK_INDEX)
(  582)     SELF%PFP1_T1 => SELF%F_FP1_T1%GET_VIEW(BLOCK_INDEX)
(  583)     SELF%PFP1_T9 => SELF%F_FP1_T9%GET_VIEW(BLOCK_INDEX)
(  584) 
(  585)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  586)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_UPDATE_VIEW
(  587) 
(  588)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_INIT(SELF, VARIABLE_GROUP)
(  589)     ! Constructor of the array view type for a surface variable group
(  590)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
(  591)     TYPE(SURFACE_VARIABLE_GROUP_CLS), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  592) 
(  593)     ! Create a view per timestep field for each prognostic variable
(  594)     SELF%F_TCLS_T0 => VARIABLE_GROUP%VTCLS%FT0
(  595)     SELF%F_TCLS_T1 => VARIABLE_GROUP%VTCLS%FT1
(  596)     SELF%F_TCLS_T9 => VARIABLE_GROUP%VTCLS%FT9
(  597)     SELF%F_HUCLS_T0 => VARIABLE_GROUP%VHUCLS%FT0
(  598)     SELF%F_HUCLS_T1 => VARIABLE_GROUP%VHUCLS%FT1
(  599)     SELF%F_HUCLS_T9 => VARIABLE_GROUP%VHUCLS%FT9
(  600)     SELF%F_UCLS_T0 => VARIABLE_GROUP%VUCLS%FT0
(  601)     SELF%F_UCLS_T1 => VARIABLE_GROUP%VUCLS%FT1
(  602)     SELF%F_UCLS_T9 => VARIABLE_GROUP%VUCLS%FT9
(  603)     SELF%F_VCLS_T0 => VARIABLE_GROUP%VVCLS%FT0
(  604)     SELF%F_VCLS_T1 => VARIABLE_GROUP%VVCLS%FT1
(  605)     SELF%F_VCLS_T9 => VARIABLE_GROUP%VVCLS%FT9
(  606)     SELF%F_NUCLS_T0 => VARIABLE_GROUP%VNUCLS%FT0
(  607)     SELF%F_NUCLS_T1 => VARIABLE_GROUP%VNUCLS%FT1
(  608)     SELF%F_NUCLS_T9 => VARIABLE_GROUP%VNUCLS%FT9
(  609)     SELF%F_NVCLS_T0 => VARIABLE_GROUP%VNVCLS%FT0
(  610)     SELF%F_NVCLS_T1 => VARIABLE_GROUP%VNVCLS%FT1






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 13

(  611)     SELF%F_NVCLS_T9 => VARIABLE_GROUP%VNVCLS%FT9
(  612)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  613)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  614)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_INIT
(  615) 
(  616)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  617)     ! Extract local array views from field objects
(  618)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
(  619)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  620) 
(  621)     ! Set up the view pointer for each timestep field
(  622)     SELF%PTCLS_T0 => SELF%F_TCLS_T0%GET_VIEW(BLOCK_INDEX)
(  623)     SELF%PTCLS_T1 => SELF%F_TCLS_T1%GET_VIEW(BLOCK_INDEX)
(  624)     SELF%PTCLS_T9 => SELF%F_TCLS_T9%GET_VIEW(BLOCK_INDEX)
(  625)     SELF%PHUCLS_T0 => SELF%F_HUCLS_T0%GET_VIEW(BLOCK_INDEX)
(  626)     SELF%PHUCLS_T1 => SELF%F_HUCLS_T1%GET_VIEW(BLOCK_INDEX)
(  627)     SELF%PHUCLS_T9 => SELF%F_HUCLS_T9%GET_VIEW(BLOCK_INDEX)
(  628)     SELF%PUCLS_T0 => SELF%F_UCLS_T0%GET_VIEW(BLOCK_INDEX)
(  629)     SELF%PUCLS_T1 => SELF%F_UCLS_T1%GET_VIEW(BLOCK_INDEX)
(  630)     SELF%PUCLS_T9 => SELF%F_UCLS_T9%GET_VIEW(BLOCK_INDEX)
(  631)     SELF%PVCLS_T0 => SELF%F_VCLS_T0%GET_VIEW(BLOCK_INDEX)
(  632)     SELF%PVCLS_T1 => SELF%F_VCLS_T1%GET_VIEW(BLOCK_INDEX)
(  633)     SELF%PVCLS_T9 => SELF%F_VCLS_T9%GET_VIEW(BLOCK_INDEX)
(  634)     SELF%PNUCLS_T0 => SELF%F_NUCLS_T0%GET_VIEW(BLOCK_INDEX)
(  635)     SELF%PNUCLS_T1 => SELF%F_NUCLS_T1%GET_VIEW(BLOCK_INDEX)
(  636)     SELF%PNUCLS_T9 => SELF%F_NUCLS_T9%GET_VIEW(BLOCK_INDEX)
(  637)     SELF%PNVCLS_T0 => SELF%F_NVCLS_T0%GET_VIEW(BLOCK_INDEX)
(  638)     SELF%PNVCLS_T1 => SELF%F_NVCLS_T1%GET_VIEW(BLOCK_INDEX)
(  639)     SELF%PNVCLS_T9 => SELF%F_NVCLS_T9%GET_VIEW(BLOCK_INDEX)
(  640) 
(  641)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  642)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_UPDATE_VIEW
(  643) 
(  644)   SUBROUTINE SURFACE_VIEW_GROUP_OML_INIT(SELF, VARIABLE_GROUP)
(  645)     ! Constructor of the array view type for a surface variable group
(  646)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
(  647)     TYPE(SURFACE_VARIABLE_GROUP_OML), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  648) 
(  649)     ! Create a view per timestep field for each prognostic variable
(  650)     SELF%F_TO_T0 => VARIABLE_GROUP%VTO%FT0
(  651)     SELF%F_TO_T1 => VARIABLE_GROUP%VTO%FT1
(  652)     SELF%F_TO_T9 => VARIABLE_GROUP%VTO%FT9
(  653)     SELF%F_SO_T0 => VARIABLE_GROUP%VSO%FT0
(  654)     SELF%F_SO_T1 => VARIABLE_GROUP%VSO%FT1
(  655)     SELF%F_SO_T9 => VARIABLE_GROUP%VSO%FT9
(  656)     SELF%F_UO_T0 => VARIABLE_GROUP%VUO%FT0
(  657)     SELF%F_UO_T1 => VARIABLE_GROUP%VUO%FT1
(  658)     SELF%F_UO_T9 => VARIABLE_GROUP%VUO%FT9
(  659)     SELF%F_VO_T0 => VARIABLE_GROUP%VVO%FT0
(  660)     SELF%F_VO_T1 => VARIABLE_GROUP%VVO%FT1
(  661)     SELF%F_VO_T9 => VARIABLE_GROUP%VVO%FT9
(  662)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  663)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  664)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_INIT
(  665) 
(  666)   SUBROUTINE SURFACE_VIEW_GROUP_OML_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  667)     ! Extract local array views from field objects
(  668)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 14

(  669)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  670) 
(  671)     ! Set up the view pointer for each timestep field
(  672)     SELF%PTO_T0 => SELF%F_TO_T0%GET_VIEW(BLOCK_INDEX)
(  673)     SELF%PTO_T1 => SELF%F_TO_T1%GET_VIEW(BLOCK_INDEX)
(  674)     SELF%PTO_T9 => SELF%F_TO_T9%GET_VIEW(BLOCK_INDEX)
(  675)     SELF%PSO_T0 => SELF%F_SO_T0%GET_VIEW(BLOCK_INDEX)
(  676)     SELF%PSO_T1 => SELF%F_SO_T1%GET_VIEW(BLOCK_INDEX)
(  677)     SELF%PSO_T9 => SELF%F_SO_T9%GET_VIEW(BLOCK_INDEX)
(  678)     SELF%PUO_T0 => SELF%F_UO_T0%GET_VIEW(BLOCK_INDEX)
(  679)     SELF%PUO_T1 => SELF%F_UO_T1%GET_VIEW(BLOCK_INDEX)
(  680)     SELF%PUO_T9 => SELF%F_UO_T9%GET_VIEW(BLOCK_INDEX)
(  681)     SELF%PVO_T0 => SELF%F_VO_T0%GET_VIEW(BLOCK_INDEX)
(  682)     SELF%PVO_T1 => SELF%F_VO_T1%GET_VIEW(BLOCK_INDEX)
(  683)     SELF%PVO_T9 => SELF%F_VO_T9%GET_VIEW(BLOCK_INDEX)
(  684) 
(  685)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  686)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_UPDATE_VIEW
(  687) 
(  688)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_INIT(SELF, VARIABLE_GROUP)
(  689)     ! Constructor of the array view type for a surface variable group
(  690)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
(  691)     TYPE(SURFACE_VARIABLE_GROUP_EXTRP), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  692) 
(  693)     ! Create a view per timestep field for each prognostic variable
(  694)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  695)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  696)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_INIT
(  697) 
(  698)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  699)     ! Extract local array views from field objects
(  700)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
(  701)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  702) 
(  703)     ! Set up the view pointer for each timestep field
(  704) 
(  705)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  706)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_UPDATE_VIEW
(  707) 
(  708)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_INIT(SELF, VARIABLE_GROUP)
(  709)     ! Constructor of the array view type for a surface variable group
(  710)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
(  711)     TYPE(SURFACE_VARIABLE_GROUP_XTRP2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  712) 
(  713)     ! Create a view per timestep field for each prognostic variable
(  714)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  715)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  716)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_INIT
(  717) 
(  718)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  719)     ! Extract local array views from field objects
(  720)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
(  721)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  722) 
(  723)     ! Set up the view pointer for each timestep field
(  724) 
(  725)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  726)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_UPDATE_VIEW






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 15

(  727) 
(  728)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_INIT(SELF, VARIABLE_GROUP)
(  729)     ! Constructor of the array view type for a surface variable group
(  730)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
(  731)     TYPE(SURFACE_VARIABLE_GROUP_CANRI), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  732) 
(  733)     ! Create a view per timestep field for each prognostic variable
(  734)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  735)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  736)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_INIT
(  737) 
(  738)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  739)     ! Extract local array views from field objects
(  740)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
(  741)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  742) 
(  743)     ! Set up the view pointer for each timestep field
(  744) 
(  745)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  746)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_UPDATE_VIEW
(  747) 
(  748) 
(  749) 
(  750)   ! Timestepping utility subroutines for prognostics variables
(  751)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET9TO0(SELF)
(  752)     ! Field update operation for timestepping schemes
(  753)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  754) 
(  755)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  756)       SELF%PT_T9(:,:) = SELF%PT_T0(:,:)
(  757)     END IF
(  758)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  759)       SELF%PQ_T9(:,:) = SELF%PQ_T0(:,:)
(  760)     END IF
(  761)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  762)       SELF%PTL_T9(:,:) = SELF%PTL_T0(:,:)
(  763)     END IF
(  764)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET9TO0
(  765) 
(  766)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO9(SELF)
(  767)     ! Field update operation for timestepping schemes
(  768)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  769) 
(  770)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  771)       SELF%PT_T1(:,:) = SELF%PT_T9(:,:)
(  772)     END IF
(  773)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  774)       SELF%PQ_T1(:,:) = SELF%PQ_T9(:,:)
(  775)     END IF
(  776)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  777)       SELF%PTL_T1(:,:) = SELF%PTL_T9(:,:)
(  778)     END IF
(  779)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO9
(  780) 
(  781)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO0(SELF)
(  782)     ! Field update operation for timestepping schemes
(  783)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  784) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 16

(  785)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  786)       SELF%PT_T1(:,:) = SELF%PT_T0(:,:)
(  787)     END IF
(  788)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  789)       SELF%PQ_T1(:,:) = SELF%PQ_T0(:,:)
(  790)     END IF
(  791)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  792)       SELF%PTL_T1(:,:) = SELF%PTL_T0(:,:)
(  793)     END IF
(  794)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO0
(  795) 
(  796)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET0TO1(SELF)
(  797)     ! Field update operation for timestepping schemes
(  798)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  799) 
(  800)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  801)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  802)     END IF
(  803)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  804)       SELF%PQ_T0(:,:) = SELF%PQ_T1(:,:)
(  805)     END IF
(  806)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  807)       SELF%PTL_T0(:,:) = SELF%PTL_T1(:,:)
(  808)     END IF
(  809)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET0TO1
(  810) 
(  811)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_PHTFILT(SELF, YDDYN)
(  812)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  813)     TYPE(TDYN), INTENT(IN) :: YDDYN
(  814)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
(  815) 
(  816)     REPSP1 = YDDYN%REPSP1
(  817)     ZZPHY = 1.0_JPRB - REPSP1
(  818) 
(  819)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  820)       SELF%PT_T9(:,:) = REPSP1*SELF%PT_T1(:,:) &
(  821)        &                                      + ZZPHY*SELF%PT_T0(:,:)
(  822)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  823)     END IF
(  824)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  825)       SELF%PQ_T9(:,:) = REPSP1*SELF%PQ_T1(:,:) &
(  826)        &                                      + ZZPHY*SELF%PQ_T0(:,:)
(  827)       SELF%PQ_T0(:,:) = SELF%PQ_T1(:,:)
(  828)     END IF
(  829)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  830)       SELF%PTL_T9(:,:) = REPSP1*SELF%PTL_T1(:,:) &
(  831)        &                                      + ZZPHY*SELF%PTL_T0(:,:)
(  832)       SELF%PTL_T0(:,:) = SELF%PTL_T1(:,:)
(  833)     END IF
(  834)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_PHTFILT
(  835) 
(  836)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET9TO0(SELF)
(  837)     ! Field update operation for timestepping schemes
(  838)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  839) 
(  840)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  841)       SELF%PF_T9(:,:) = SELF%PF_T0(:,:)
(  842)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 17

(  843)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  844)       SELF%PA_T9(:,:) = SELF%PA_T0(:,:)
(  845)     END IF
(  846)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  847)       SELF%PR_T9(:,:) = SELF%PR_T0(:,:)
(  848)     END IF
(  849)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  850)       SELF%PT_T9(:,:) = SELF%PT_T0(:,:)
(  851)     END IF
(  852)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  853)       SELF%PW_T9(:,:) = SELF%PW_T0(:,:)
(  854)     END IF
(  855)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET9TO0
(  856) 
(  857)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO9(SELF)
(  858)     ! Field update operation for timestepping schemes
(  859)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  860) 
(  861)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  862)       SELF%PF_T1(:,:) = SELF%PF_T9(:,:)
(  863)     END IF
(  864)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  865)       SELF%PA_T1(:,:) = SELF%PA_T9(:,:)
(  866)     END IF
(  867)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  868)       SELF%PR_T1(:,:) = SELF%PR_T9(:,:)
(  869)     END IF
(  870)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  871)       SELF%PT_T1(:,:) = SELF%PT_T9(:,:)
(  872)     END IF
(  873)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  874)       SELF%PW_T1(:,:) = SELF%PW_T9(:,:)
(  875)     END IF
(  876)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO9
(  877) 
(  878)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO0(SELF)
(  879)     ! Field update operation for timestepping schemes
(  880)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  881) 
(  882)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  883)       SELF%PF_T1(:,:) = SELF%PF_T0(:,:)
(  884)     END IF
(  885)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  886)       SELF%PA_T1(:,:) = SELF%PA_T0(:,:)
(  887)     END IF
(  888)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  889)       SELF%PR_T1(:,:) = SELF%PR_T0(:,:)
(  890)     END IF
(  891)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  892)       SELF%PT_T1(:,:) = SELF%PT_T0(:,:)
(  893)     END IF
(  894)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  895)       SELF%PW_T1(:,:) = SELF%PW_T0(:,:)
(  896)     END IF
(  897)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO0
(  898) 
(  899)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET0TO1(SELF)
(  900)     ! Field update operation for timestepping schemes






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 18

(  901)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  902) 
(  903)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  904)       SELF%PF_T0(:,:) = SELF%PF_T1(:,:)
(  905)     END IF
(  906)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  907)       SELF%PA_T0(:,:) = SELF%PA_T1(:,:)
(  908)     END IF
(  909)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  910)       SELF%PR_T0(:,:) = SELF%PR_T1(:,:)
(  911)     END IF
(  912)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  913)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  914)     END IF
(  915)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  916)       SELF%PW_T0(:,:) = SELF%PW_T1(:,:)
(  917)     END IF
(  918)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET0TO1
(  919) 
(  920)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_PHTFILT(SELF, YDDYN)
(  921)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  922)     TYPE(TDYN), INTENT(IN) :: YDDYN
(  923)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
(  924) 
(  925)     REPSP1 = YDDYN%REPSP1
(  926)     ZZPHY = 1.0_JPRB - REPSP1
(  927) 
(  928)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  929)       SELF%PF_T9(:,:) = REPSP1*SELF%PF_T1(:,:) &
(  930)        &                                      + ZZPHY*SELF%PF_T0(:,:)
(  931)       SELF%PF_T0(:,:) = SELF%PF_T1(:,:)
(  932)     END IF
(  933)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  934)       SELF%PA_T9(:,:) = REPSP1*SELF%PA_T1(:,:) &
(  935)        &                                      + ZZPHY*SELF%PA_T0(:,:)
(  936)       SELF%PA_T0(:,:) = SELF%PA_T1(:,:)
(  937)     END IF
(  938)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  939)       SELF%PR_T9(:,:) = REPSP1*SELF%PR_T1(:,:) &
(  940)        &                                      + ZZPHY*SELF%PR_T0(:,:)
(  941)       SELF%PR_T0(:,:) = SELF%PR_T1(:,:)
(  942)     END IF
(  943)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  944)       SELF%PT_T9(:,:) = REPSP1*SELF%PT_T1(:,:) &
(  945)        &                                      + ZZPHY*SELF%PT_T0(:,:)
(  946)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  947)     END IF
(  948)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  949)       SELF%PW_T9(:,:) = REPSP1*SELF%PW_T1(:,:) &
(  950)        &                                      + ZZPHY*SELF%PW_T0(:,:)
(  951)       SELF%PW_T0(:,:) = SELF%PW_T1(:,:)
(  952)     END IF
(  953)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_PHTFILT
(  954) 
(  955)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET9TO0(SELF)
(  956)     ! Field update operation for timestepping schemes
(  957)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  958) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 19

(  959)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
(  960)       SELF%PLICT_T9(:) = SELF%PLICT_T0(:)
(  961)     END IF
(  962)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
(  963)       SELF%PLMLT_T9(:) = SELF%PLMLT_T0(:)
(  964)     END IF
(  965)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
(  966)       SELF%PLTLT_T9(:) = SELF%PLTLT_T0(:)
(  967)     END IF
(  968)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
(  969)       SELF%PLBLT_T9(:) = SELF%PLBLT_T0(:)
(  970)     END IF
(  971)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
(  972)       SELF%PLSHF_T9(:) = SELF%PLSHF_T0(:)
(  973)     END IF
(  974)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
(  975)       SELF%PLICD_T9(:) = SELF%PLICD_T0(:)
(  976)     END IF
(  977)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
(  978)       SELF%PLMLD_T9(:) = SELF%PLMLD_T0(:)
(  979)     END IF
(  980)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET9TO0
(  981) 
(  982)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO9(SELF)
(  983)     ! Field update operation for timestepping schemes
(  984)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  985) 
(  986)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
(  987)       SELF%PLICT_T1(:) = SELF%PLICT_T9(:)
(  988)     END IF
(  989)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
(  990)       SELF%PLMLT_T1(:) = SELF%PLMLT_T9(:)
(  991)     END IF
(  992)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
(  993)       SELF%PLTLT_T1(:) = SELF%PLTLT_T9(:)
(  994)     END IF
(  995)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
(  996)       SELF%PLBLT_T1(:) = SELF%PLBLT_T9(:)
(  997)     END IF
(  998)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
(  999)       SELF%PLSHF_T1(:) = SELF%PLSHF_T9(:)
( 1000)     END IF
( 1001)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1002)       SELF%PLICD_T1(:) = SELF%PLICD_T9(:)
( 1003)     END IF
( 1004)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1005)       SELF%PLMLD_T1(:) = SELF%PLMLD_T9(:)
( 1006)     END IF
( 1007)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO9
( 1008) 
( 1009)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO0(SELF)
( 1010)     ! Field update operation for timestepping schemes
( 1011)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
( 1012) 
( 1013)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
( 1014)       SELF%PLICT_T1(:) = SELF%PLICT_T0(:)
( 1015)     END IF
( 1016)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 20

( 1017)       SELF%PLMLT_T1(:) = SELF%PLMLT_T0(:)
( 1018)     END IF
( 1019)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
( 1020)       SELF%PLTLT_T1(:) = SELF%PLTLT_T0(:)
( 1021)     END IF
( 1022)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
( 1023)       SELF%PLBLT_T1(:) = SELF%PLBLT_T0(:)
( 1024)     END IF
( 1025)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
( 1026)       SELF%PLSHF_T1(:) = SELF%PLSHF_T0(:)
( 1027)     END IF
( 1028)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1029)       SELF%PLICD_T1(:) = SELF%PLICD_T0(:)
( 1030)     END IF
( 1031)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1032)       SELF%PLMLD_T1(:) = SELF%PLMLD_T0(:)
( 1033)     END IF
( 1034)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO0
( 1035) 
( 1036)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET0TO1(SELF)
( 1037)     ! Field update operation for timestepping schemes
( 1038)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
( 1039) 
( 1040)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
( 1041)       SELF%PLICT_T0(:) = SELF%PLICT_T1(:)
( 1042)     END IF
( 1043)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
( 1044)       SELF%PLMLT_T0(:) = SELF%PLMLT_T1(:)
( 1045)     END IF
( 1046)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
( 1047)       SELF%PLTLT_T0(:) = SELF%PLTLT_T1(:)
( 1048)     END IF
( 1049)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
( 1050)       SELF%PLBLT_T0(:) = SELF%PLBLT_T1(:)
( 1051)     END IF
( 1052)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
( 1053)       SELF%PLSHF_T0(:) = SELF%PLSHF_T1(:)
( 1054)     END IF
( 1055)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1056)       SELF%PLICD_T0(:) = SELF%PLICD_T1(:)
( 1057)     END IF
( 1058)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1059)       SELF%PLMLD_T0(:) = SELF%PLMLD_T1(:)
( 1060)     END IF
( 1061)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET0TO1
( 1062) 
( 1063)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_PHTFILT(SELF, YDDYN)
( 1064)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
( 1065)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1066)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1067) 
( 1068)     REPSP1 = YDDYN%REPSP1
( 1069)     ZZPHY = 1.0_JPRB - REPSP1
( 1070) 
( 1071)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
( 1072)       SELF%PLICT_T9(:) = REPSP1*SELF%PLICT_T1(:) &
( 1073)        &                                      + ZZPHY*SELF%PLICT_T0(:)
( 1074)       SELF%PLICT_T0(:) = SELF%PLICT_T1(:)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 21

( 1075)     END IF
( 1076)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
( 1077)       SELF%PLMLT_T9(:) = REPSP1*SELF%PLMLT_T1(:) &
( 1078)        &                                      + ZZPHY*SELF%PLMLT_T0(:)
( 1079)       SELF%PLMLT_T0(:) = SELF%PLMLT_T1(:)
( 1080)     END IF
( 1081)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
( 1082)       SELF%PLTLT_T9(:) = REPSP1*SELF%PLTLT_T1(:) &
( 1083)        &                                      + ZZPHY*SELF%PLTLT_T0(:)
( 1084)       SELF%PLTLT_T0(:) = SELF%PLTLT_T1(:)
( 1085)     END IF
( 1086)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
( 1087)       SELF%PLBLT_T9(:) = REPSP1*SELF%PLBLT_T1(:) &
( 1088)        &                                      + ZZPHY*SELF%PLBLT_T0(:)
( 1089)       SELF%PLBLT_T0(:) = SELF%PLBLT_T1(:)
( 1090)     END IF
( 1091)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
( 1092)       SELF%PLSHF_T9(:) = REPSP1*SELF%PLSHF_T1(:) &
( 1093)        &                                      + ZZPHY*SELF%PLSHF_T0(:)
( 1094)       SELF%PLSHF_T0(:) = SELF%PLSHF_T1(:)
( 1095)     END IF
( 1096)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1097)       SELF%PLICD_T9(:) = REPSP1*SELF%PLICD_T1(:) &
( 1098)        &                                      + ZZPHY*SELF%PLICD_T0(:)
( 1099)       SELF%PLICD_T0(:) = SELF%PLICD_T1(:)
( 1100)     END IF
( 1101)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1102)       SELF%PLMLD_T9(:) = REPSP1*SELF%PLMLD_T1(:) &
( 1103)        &                                      + ZZPHY*SELF%PLMLD_T0(:)
( 1104)       SELF%PLMLD_T0(:) = SELF%PLMLD_T1(:)
( 1105)     END IF
( 1106)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_PHTFILT
( 1107) 
( 1108)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET9TO0(SELF)
( 1109)     ! Field update operation for timestepping schemes
( 1110)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1111) 
( 1112)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1113)       SELF%PT_T9(:) = SELF%PT_T0(:)
( 1114)     END IF
( 1115)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1116)       SELF%PW_T9(:) = SELF%PW_T0(:)
( 1117)     END IF
( 1118)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1119)       SELF%PFC_T9(:) = SELF%PFC_T0(:)
( 1120)     END IF
( 1121)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1122)       SELF%PIC_T9(:) = SELF%PIC_T0(:)
( 1123)     END IF
( 1124)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1125)       SELF%PFP1_T9(:) = SELF%PFP1_T0(:)
( 1126)     END IF
( 1127)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET9TO0
( 1128) 
( 1129)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO9(SELF)
( 1130)     ! Field update operation for timestepping schemes
( 1131)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1132) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 22

( 1133)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1134)       SELF%PT_T1(:) = SELF%PT_T9(:)
( 1135)     END IF
( 1136)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1137)       SELF%PW_T1(:) = SELF%PW_T9(:)
( 1138)     END IF
( 1139)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1140)       SELF%PFC_T1(:) = SELF%PFC_T9(:)
( 1141)     END IF
( 1142)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1143)       SELF%PIC_T1(:) = SELF%PIC_T9(:)
( 1144)     END IF
( 1145)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1146)       SELF%PFP1_T1(:) = SELF%PFP1_T9(:)
( 1147)     END IF
( 1148)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO9
( 1149) 
( 1150)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO0(SELF)
( 1151)     ! Field update operation for timestepping schemes
( 1152)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1153) 
( 1154)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1155)       SELF%PT_T1(:) = SELF%PT_T0(:)
( 1156)     END IF
( 1157)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1158)       SELF%PW_T1(:) = SELF%PW_T0(:)
( 1159)     END IF
( 1160)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1161)       SELF%PFC_T1(:) = SELF%PFC_T0(:)
( 1162)     END IF
( 1163)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1164)       SELF%PIC_T1(:) = SELF%PIC_T0(:)
( 1165)     END IF
( 1166)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1167)       SELF%PFP1_T1(:) = SELF%PFP1_T0(:)
( 1168)     END IF
( 1169)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO0
( 1170) 
( 1171)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET0TO1(SELF)
( 1172)     ! Field update operation for timestepping schemes
( 1173)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1174) 
( 1175)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1176)       SELF%PT_T0(:) = SELF%PT_T1(:)
( 1177)     END IF
( 1178)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1179)       SELF%PW_T0(:) = SELF%PW_T1(:)
( 1180)     END IF
( 1181)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1182)       SELF%PFC_T0(:) = SELF%PFC_T1(:)
( 1183)     END IF
( 1184)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1185)       SELF%PIC_T0(:) = SELF%PIC_T1(:)
( 1186)     END IF
( 1187)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1188)       SELF%PFP1_T0(:) = SELF%PFP1_T1(:)
( 1189)     END IF
( 1190)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET0TO1






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 23

( 1191) 
( 1192)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_PHTFILT(SELF, YDDYN)
( 1193)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1194)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1195)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1196) 
( 1197)     REPSP1 = YDDYN%REPSP1
( 1198)     ZZPHY = 1.0_JPRB - REPSP1
( 1199) 
( 1200)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1201)       SELF%PT_T9(:) = REPSP1*SELF%PT_T1(:) &
( 1202)        &                                      + ZZPHY*SELF%PT_T0(:)
( 1203)       SELF%PT_T0(:) = SELF%PT_T1(:)
( 1204)     END IF
( 1205)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1206)       SELF%PW_T9(:) = REPSP1*SELF%PW_T1(:) &
( 1207)        &                                      + ZZPHY*SELF%PW_T0(:)
( 1208)       SELF%PW_T0(:) = SELF%PW_T1(:)
( 1209)     END IF
( 1210)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1211)       SELF%PFC_T9(:) = REPSP1*SELF%PFC_T1(:) &
( 1212)        &                                      + ZZPHY*SELF%PFC_T0(:)
( 1213)       SELF%PFC_T0(:) = SELF%PFC_T1(:)
( 1214)     END IF
( 1215)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1216)       SELF%PIC_T9(:) = REPSP1*SELF%PIC_T1(:) &
( 1217)        &                                      + ZZPHY*SELF%PIC_T0(:)
( 1218)       SELF%PIC_T0(:) = SELF%PIC_T1(:)
( 1219)     END IF
( 1220)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1221)       SELF%PFP1_T9(:) = REPSP1*SELF%PFP1_T1(:) &
( 1222)        &                                      + ZZPHY*SELF%PFP1_T0(:)
( 1223)       SELF%PFP1_T0(:) = SELF%PFP1_T1(:)
( 1224)     END IF
( 1225)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_PHTFILT
( 1226) 
( 1227)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET9TO0(SELF)
( 1228)     ! Field update operation for timestepping schemes
( 1229)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1230) 
( 1231)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1232)       SELF%PTCLS_T9(:) = SELF%PTCLS_T0(:)
( 1233)     END IF
( 1234)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1235)       SELF%PHUCLS_T9(:) = SELF%PHUCLS_T0(:)
( 1236)     END IF
( 1237)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1238)       SELF%PUCLS_T9(:) = SELF%PUCLS_T0(:)
( 1239)     END IF
( 1240)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1241)       SELF%PVCLS_T9(:) = SELF%PVCLS_T0(:)
( 1242)     END IF
( 1243)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1244)       SELF%PNUCLS_T9(:) = SELF%PNUCLS_T0(:)
( 1245)     END IF
( 1246)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1247)       SELF%PNVCLS_T9(:) = SELF%PNVCLS_T0(:)
( 1248)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 24

( 1249)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET9TO0
( 1250) 
( 1251)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO9(SELF)
( 1252)     ! Field update operation for timestepping schemes
( 1253)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1254) 
( 1255)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1256)       SELF%PTCLS_T1(:) = SELF%PTCLS_T9(:)
( 1257)     END IF
( 1258)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1259)       SELF%PHUCLS_T1(:) = SELF%PHUCLS_T9(:)
( 1260)     END IF
( 1261)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1262)       SELF%PUCLS_T1(:) = SELF%PUCLS_T9(:)
( 1263)     END IF
( 1264)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1265)       SELF%PVCLS_T1(:) = SELF%PVCLS_T9(:)
( 1266)     END IF
( 1267)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1268)       SELF%PNUCLS_T1(:) = SELF%PNUCLS_T9(:)
( 1269)     END IF
( 1270)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1271)       SELF%PNVCLS_T1(:) = SELF%PNVCLS_T9(:)
( 1272)     END IF
( 1273)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO9
( 1274) 
( 1275)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO0(SELF)
( 1276)     ! Field update operation for timestepping schemes
( 1277)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1278) 
( 1279)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1280)       SELF%PTCLS_T1(:) = SELF%PTCLS_T0(:)
( 1281)     END IF
( 1282)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1283)       SELF%PHUCLS_T1(:) = SELF%PHUCLS_T0(:)
( 1284)     END IF
( 1285)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1286)       SELF%PUCLS_T1(:) = SELF%PUCLS_T0(:)
( 1287)     END IF
( 1288)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1289)       SELF%PVCLS_T1(:) = SELF%PVCLS_T0(:)
( 1290)     END IF
( 1291)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1292)       SELF%PNUCLS_T1(:) = SELF%PNUCLS_T0(:)
( 1293)     END IF
( 1294)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1295)       SELF%PNVCLS_T1(:) = SELF%PNVCLS_T0(:)
( 1296)     END IF
( 1297)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO0
( 1298) 
( 1299)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET0TO1(SELF)
( 1300)     ! Field update operation for timestepping schemes
( 1301)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1302) 
( 1303)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1304)       SELF%PTCLS_T0(:) = SELF%PTCLS_T1(:)
( 1305)     END IF
( 1306)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 25

( 1307)       SELF%PHUCLS_T0(:) = SELF%PHUCLS_T1(:)
( 1308)     END IF
( 1309)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1310)       SELF%PUCLS_T0(:) = SELF%PUCLS_T1(:)
( 1311)     END IF
( 1312)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1313)       SELF%PVCLS_T0(:) = SELF%PVCLS_T1(:)
( 1314)     END IF
( 1315)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1316)       SELF%PNUCLS_T0(:) = SELF%PNUCLS_T1(:)
( 1317)     END IF
( 1318)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1319)       SELF%PNVCLS_T0(:) = SELF%PNVCLS_T1(:)
( 1320)     END IF
( 1321)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET0TO1
( 1322) 
( 1323)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_PHTFILT(SELF, YDDYN)
( 1324)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1325)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1326)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1327) 
( 1328)     REPSP1 = YDDYN%REPSP1
( 1329)     ZZPHY = 1.0_JPRB - REPSP1
( 1330) 
( 1331)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1332)       SELF%PTCLS_T9(:) = REPSP1*SELF%PTCLS_T1(:) &
( 1333)        &                                      + ZZPHY*SELF%PTCLS_T0(:)
( 1334)       SELF%PTCLS_T0(:) = SELF%PTCLS_T1(:)
( 1335)     END IF
( 1336)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1337)       SELF%PHUCLS_T9(:) = REPSP1*SELF%PHUCLS_T1(:) &
( 1338)        &                                      + ZZPHY*SELF%PHUCLS_T0(:)
( 1339)       SELF%PHUCLS_T0(:) = SELF%PHUCLS_T1(:)
( 1340)     END IF
( 1341)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1342)       SELF%PUCLS_T9(:) = REPSP1*SELF%PUCLS_T1(:) &
( 1343)        &                                      + ZZPHY*SELF%PUCLS_T0(:)
( 1344)       SELF%PUCLS_T0(:) = SELF%PUCLS_T1(:)
( 1345)     END IF
( 1346)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1347)       SELF%PVCLS_T9(:) = REPSP1*SELF%PVCLS_T1(:) &
( 1348)        &                                      + ZZPHY*SELF%PVCLS_T0(:)
( 1349)       SELF%PVCLS_T0(:) = SELF%PVCLS_T1(:)
( 1350)     END IF
( 1351)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1352)       SELF%PNUCLS_T9(:) = REPSP1*SELF%PNUCLS_T1(:) &
( 1353)        &                                      + ZZPHY*SELF%PNUCLS_T0(:)
( 1354)       SELF%PNUCLS_T0(:) = SELF%PNUCLS_T1(:)
( 1355)     END IF
( 1356)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1357)       SELF%PNVCLS_T9(:) = REPSP1*SELF%PNVCLS_T1(:) &
( 1358)        &                                      + ZZPHY*SELF%PNVCLS_T0(:)
( 1359)       SELF%PNVCLS_T0(:) = SELF%PNVCLS_T1(:)
( 1360)     END IF
( 1361)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_PHTFILT
( 1362) 
( 1363)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET9TO0(SELF)
( 1364)     ! Field update operation for timestepping schemes






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 26

( 1365)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1366) 
( 1367)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1368)       SELF%PTO_T9(:,:) = SELF%PTO_T0(:,:)
( 1369)     END IF
( 1370)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1371)       SELF%PSO_T9(:,:) = SELF%PSO_T0(:,:)
( 1372)     END IF
( 1373)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1374)       SELF%PUO_T9(:,:) = SELF%PUO_T0(:,:)
( 1375)     END IF
( 1376)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1377)       SELF%PVO_T9(:,:) = SELF%PVO_T0(:,:)
( 1378)     END IF
( 1379)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET9TO0
( 1380) 
( 1381)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO9(SELF)
( 1382)     ! Field update operation for timestepping schemes
( 1383)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1384) 
( 1385)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1386)       SELF%PTO_T1(:,:) = SELF%PTO_T9(:,:)
( 1387)     END IF
( 1388)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1389)       SELF%PSO_T1(:,:) = SELF%PSO_T9(:,:)
( 1390)     END IF
( 1391)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1392)       SELF%PUO_T1(:,:) = SELF%PUO_T9(:,:)
( 1393)     END IF
( 1394)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1395)       SELF%PVO_T1(:,:) = SELF%PVO_T9(:,:)
( 1396)     END IF
( 1397)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO9
( 1398) 
( 1399)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO0(SELF)
( 1400)     ! Field update operation for timestepping schemes
( 1401)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1402) 
( 1403)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1404)       SELF%PTO_T1(:,:) = SELF%PTO_T0(:,:)
( 1405)     END IF
( 1406)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1407)       SELF%PSO_T1(:,:) = SELF%PSO_T0(:,:)
( 1408)     END IF
( 1409)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1410)       SELF%PUO_T1(:,:) = SELF%PUO_T0(:,:)
( 1411)     END IF
( 1412)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1413)       SELF%PVO_T1(:,:) = SELF%PVO_T0(:,:)
( 1414)     END IF
( 1415)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO0
( 1416) 
( 1417)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET0TO1(SELF)
( 1418)     ! Field update operation for timestepping schemes
( 1419)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1420) 
( 1421)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1422)       SELF%PTO_T0(:,:) = SELF%PTO_T1(:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 27

( 1423)     END IF
( 1424)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1425)       SELF%PSO_T0(:,:) = SELF%PSO_T1(:,:)
( 1426)     END IF
( 1427)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1428)       SELF%PUO_T0(:,:) = SELF%PUO_T1(:,:)
( 1429)     END IF
( 1430)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1431)       SELF%PVO_T0(:,:) = SELF%PVO_T1(:,:)
( 1432)     END IF
( 1433)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET0TO1
( 1434) 
( 1435)   SUBROUTINE SURFACE_VIEW_GROUP_OML_PHTFILT(SELF, YDDYN)
( 1436)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1437)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1438)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1439) 
( 1440)     REPSP1 = YDDYN%REPSP1
( 1441)     ZZPHY = 1.0_JPRB - REPSP1
( 1442) 
( 1443)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1444)       SELF%PTO_T9(:,:) = REPSP1*SELF%PTO_T1(:,:) &
( 1445)        &                                      + ZZPHY*SELF%PTO_T0(:,:)
( 1446)       SELF%PTO_T0(:,:) = SELF%PTO_T1(:,:)
( 1447)     END IF
( 1448)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1449)       SELF%PSO_T9(:,:) = REPSP1*SELF%PSO_T1(:,:) &
( 1450)        &                                      + ZZPHY*SELF%PSO_T0(:,:)
( 1451)       SELF%PSO_T0(:,:) = SELF%PSO_T1(:,:)
( 1452)     END IF
( 1453)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1454)       SELF%PUO_T9(:,:) = REPSP1*SELF%PUO_T1(:,:) &
( 1455)        &                                      + ZZPHY*SELF%PUO_T0(:,:)
( 1456)       SELF%PUO_T0(:,:) = SELF%PUO_T1(:,:)
( 1457)     END IF
( 1458)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1459)       SELF%PVO_T9(:,:) = REPSP1*SELF%PVO_T1(:,:) &
( 1460)        &                                      + ZZPHY*SELF%PVO_T0(:,:)
( 1461)       SELF%PVO_T0(:,:) = SELF%PVO_T1(:,:)
( 1462)     END IF
( 1463)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_PHTFILT
( 1464) 
( 1465)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET9TO0(SELF)
( 1466)     ! Field update operation for timestepping schemes
( 1467)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1468) 
( 1469)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET9TO0
( 1470) 
( 1471)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO9(SELF)
( 1472)     ! Field update operation for timestepping schemes
( 1473)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1474) 
( 1475)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO9
( 1476) 
( 1477)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO0(SELF)
( 1478)     ! Field update operation for timestepping schemes
( 1479)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1480) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 28

( 1481)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO0
( 1482) 
( 1483)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET0TO1(SELF)
( 1484)     ! Field update operation for timestepping schemes
( 1485)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1486) 
( 1487)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET0TO1
( 1488) 
( 1489)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_PHTFILT(SELF, YDDYN)
( 1490)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1491)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1492)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1493) 
( 1494)     REPSP1 = YDDYN%REPSP1
( 1495)     ZZPHY = 1.0_JPRB - REPSP1
( 1496) 
( 1497)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_PHTFILT
( 1498) 
( 1499)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET9TO0(SELF)
( 1500)     ! Field update operation for timestepping schemes
( 1501)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1502) 
( 1503)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET9TO0
( 1504) 
( 1505)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO9(SELF)
( 1506)     ! Field update operation for timestepping schemes
( 1507)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1508) 
( 1509)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO9
( 1510) 
( 1511)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO0(SELF)
( 1512)     ! Field update operation for timestepping schemes
( 1513)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1514) 
( 1515)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO0
( 1516) 
( 1517)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET0TO1(SELF)
( 1518)     ! Field update operation for timestepping schemes
( 1519)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1520) 
( 1521)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET0TO1
( 1522) 
( 1523)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_PHTFILT(SELF, YDDYN)
( 1524)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1525)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1526)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1527) 
( 1528)     REPSP1 = YDDYN%REPSP1
( 1529)     ZZPHY = 1.0_JPRB - REPSP1
( 1530) 
( 1531)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_PHTFILT
( 1532) 
( 1533)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET9TO0(SELF)
( 1534)     ! Field update operation for timestepping schemes
( 1535)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1536) 
( 1537)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET9TO0
( 1538) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 29

( 1539)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO9(SELF)
( 1540)     ! Field update operation for timestepping schemes
( 1541)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1542) 
( 1543)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO9
( 1544) 
( 1545)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO0(SELF)
( 1546)     ! Field update operation for timestepping schemes
( 1547)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1548) 
( 1549)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO0
( 1550) 
( 1551)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET0TO1(SELF)
( 1552)     ! Field update operation for timestepping schemes
( 1553)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1554) 
( 1555)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET0TO1
( 1556) 
( 1557)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_PHTFILT(SELF, YDDYN)
( 1558)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1559)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1560)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1561) 
( 1562)     REPSP1 = YDDYN%REPSP1
( 1563)     ZZPHY = 1.0_JPRB - REPSP1
( 1564) 
( 1565)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_PHTFILT
( 1566) 
( 1567) 
( 1568) END MODULE SURFACE_VIEWS_PROGNOSTIC_MODULE
( 1569) 
( 1570) 
( 1571) 































NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 30

(    1) # 1 "surface_views_prognostic_module.F90"
(    1) # 2 "surface_views_prognostic_module.F90"
(    2) MODULE SURFACE_VIEWS_PROGNOSTIC_MODULE
(    3)   ! The SURFACE_VIEWS type contains namespaced access to groups of
(    4)   ! array pointers according to individual surface variable groups.
(    5)   !
(    6)   !
(    7)   ! Variable naming conventions
(    8)   ! ---------------------------
(    9)   ! The top-level type `SURFACE_VIEWS_TYPE` holds multiple group
(   10)   ! types, each prefixed with `GSP_` for prognostic and `GSD_` for
(   11)   ! diagnostic variable groups.
(   12)   !
(   13)   ! Each group type holds a list of array views (pointers to
(   14)   ! sub-sections of the gobal array), each prefixed with `P` to
(   15)   ! indicate a thread-local view pointer. Data views of prognostic
(   16)   ! variables have an additional suffix that indicates the time index
(   17)   ! (eg.  `_T0`, `_T1` or `_T9`). The backend storage for each of
(   18)   ! these view pointers is provided by `FIELD_2D/FIELD_3D` objects, a
(   19)   ! reference to which is also stored on the group types and prefixed
(   20)   ! with `F_`.
(   21) # 22 "surface_views_prognostic_module.F90"
(   22) USE PARKIND1, ONLY: JPIM, JPRB
(   23) USE FIELD_MODULE, ONLY: FIELD_2D, FIELD_3D, FIELD_4D, FIELD_2D_PTR, &
(   24)  &                      FIELD_3D_PTR, FIELD_2D_VIEW, FIELD_3D_VIEW
(   25) ! Using global imports here, since fypp notation breaks cmake's dependency analysis
(   26) USE SURFACE_VARIABLES_MOD
(   27) USE YOMDYN, ONLY : TDYN
(   28) # 29 "surface_views_prognostic_module.F90"
(   29) IMPLICIT NONE
(   30) # 31 "surface_views_prognostic_module.F90"
(   31) TYPE SURFACE_VIEW_GROUP_SOILB
(   32)   REAL(KIND=JPRB), POINTER :: PT_T0(:,:)   ! temperature
(   33)   REAL(KIND=JPRB), POINTER :: PT_T1(:,:)   ! temperature
(   34)   REAL(KIND=JPRB), POINTER :: PT_T9(:,:)   ! temperature
(   35) !>REAL(KIND=JPRB)          :: PT_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   36) !>REAL(KIND=JPRB)          :: PT_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   37) !>REAL(KIND=JPRB)          :: PT_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   38)   REAL(KIND=JPRB), POINTER :: PQ_T0(:,:)   ! liquid water content
(   39)   REAL(KIND=JPRB), POINTER :: PQ_T1(:,:)   ! liquid water content
(   40)   REAL(KIND=JPRB), POINTER :: PQ_T9(:,:)   ! liquid water content
(   41) !>REAL(KIND=JPRB)          :: PQ_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   42) !>REAL(KIND=JPRB)          :: PQ_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   43) !>REAL(KIND=JPRB)          :: PQ_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   44)   REAL(KIND=JPRB), POINTER :: PTL_T0(:,:)   ! ice water content (for MF)
(   45)   REAL(KIND=JPRB), POINTER :: PTL_T1(:,:)   ! ice water content (for MF)
(   46)   REAL(KIND=JPRB), POINTER :: PTL_T9(:,:)   ! ice water content (for MF)
(   47) !>REAL(KIND=JPRB)          :: PTL_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   48) !>REAL(KIND=JPRB)          :: PTL_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   49) !>REAL(KIND=JPRB)          :: PTL_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SBD%NLEVS)
(   50)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(   51) # 52 "surface_views_prognostic_module.F90"
(   52)   TYPE(SURFACE_VARIABLE_GROUP_SOILB), POINTER :: VARIABLE_GROUP
(   53)   TYPE(FIELD_3D), POINTER :: F_T_T0=>NULL(), F_T_T1=>NULL(), F_T_T9=>NULL()
(   54)   TYPE(FIELD_3D), POINTER :: F_Q_T0=>NULL(), F_Q_T1=>NULL(), F_Q_T9=>NULL()
(   55)   TYPE(FIELD_3D), POINTER :: F_TL_T0=>NULL(), F_TL_T1=>NULL(), F_TL_T9=>NULL()
(   56)   TYPE(FIELD_4D), POINTER :: F_GROUP
(   57) # 58 "surface_views_prognostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 31

(   58) CONTAINS
(   59)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SOILB_INIT
(   60)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SOILB_UPDATE_VIEW
(   61)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_SOILB_SET9TO0
(   62)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_SOILB_SET1TO9
(   63)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_SOILB_SET1TO0
(   64)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_SOILB_SET0TO1
(   65)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_SOILB_PHTFILT
(   66) END TYPE SURFACE_VIEW_GROUP_SOILB
(   67) # 68 "surface_views_prognostic_module.F90"
(   68) TYPE SURFACE_VIEW_GROUP_SNOWG
(   69)   REAL(KIND=JPRB), POINTER :: PF_T0(:,:)   ! content of surface snow
(   70)   REAL(KIND=JPRB), POINTER :: PF_T1(:,:)   ! content of surface snow
(   71)   REAL(KIND=JPRB), POINTER :: PF_T9(:,:)   ! content of surface snow
(   72) !>REAL(KIND=JPRB)          :: PF_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   73) !>REAL(KIND=JPRB)          :: PF_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   74) !>REAL(KIND=JPRB)          :: PF_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   75)   REAL(KIND=JPRB), POINTER :: PA_T0(:,:)   ! snow albedo
(   76)   REAL(KIND=JPRB), POINTER :: PA_T1(:,:)   ! snow albedo
(   77)   REAL(KIND=JPRB), POINTER :: PA_T9(:,:)   ! snow albedo
(   78) !>REAL(KIND=JPRB)          :: PA_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   79) !>REAL(KIND=JPRB)          :: PA_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   80) !>REAL(KIND=JPRB)          :: PA_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   81)   REAL(KIND=JPRB), POINTER :: PR_T0(:,:)   ! snow density
(   82)   REAL(KIND=JPRB), POINTER :: PR_T1(:,:)   ! snow density
(   83)   REAL(KIND=JPRB), POINTER :: PR_T9(:,:)   ! snow density
(   84) !>REAL(KIND=JPRB)          :: PR_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   85) !>REAL(KIND=JPRB)          :: PR_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   86) !>REAL(KIND=JPRB)          :: PR_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   87)   REAL(KIND=JPRB), POINTER :: PT_T0(:,:)   ! total albedo (diagnostic for MF for LVGSN)
(   88)   REAL(KIND=JPRB), POINTER :: PT_T1(:,:)   ! total albedo (diagnostic for MF for LVGSN)
(   89)   REAL(KIND=JPRB), POINTER :: PT_T9(:,:)   ! total albedo (diagnostic for MF for LVGSN)
(   90) !>REAL(KIND=JPRB)          :: PT_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   91) !>REAL(KIND=JPRB)          :: PT_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   92) !>REAL(KIND=JPRB)          :: PT_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   93)   REAL(KIND=JPRB), POINTER :: PW_T0(:,:)   ! Liquid water content
(   94)   REAL(KIND=JPRB), POINTER :: PW_T1(:,:)   ! Liquid water content
(   95)   REAL(KIND=JPRB), POINTER :: PW_T9(:,:)   ! Liquid water content
(   96) !>REAL(KIND=JPRB)          :: PW_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   97) !>REAL(KIND=JPRB)          :: PW_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   98) !>REAL(KIND=JPRB)          :: PW_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_SGD%NLEVS)
(   99)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  100) # 101 "surface_views_prognostic_module.F90"
(  101)   TYPE(SURFACE_VARIABLE_GROUP_SNOWG), POINTER :: VARIABLE_GROUP
(  102)   TYPE(FIELD_3D), POINTER :: F_F_T0=>NULL(), F_F_T1=>NULL(), F_F_T9=>NULL()
(  103)   TYPE(FIELD_3D), POINTER :: F_A_T0=>NULL(), F_A_T1=>NULL(), F_A_T9=>NULL()
(  104)   TYPE(FIELD_3D), POINTER :: F_R_T0=>NULL(), F_R_T1=>NULL(), F_R_T9=>NULL()
(  105)   TYPE(FIELD_3D), POINTER :: F_T_T0=>NULL(), F_T_T1=>NULL(), F_T_T9=>NULL()
(  106)   TYPE(FIELD_3D), POINTER :: F_W_T0=>NULL(), F_W_T1=>NULL(), F_W_T9=>NULL()
(  107)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  108) # 109 "surface_views_prognostic_module.F90"
(  109) CONTAINS
(  110)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_SNOWG_INIT
(  111)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_SNOWG_UPDATE_VIEW
(  112)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_SNOWG_SET9TO0
(  113)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_SNOWG_SET1TO9
(  114)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_SNOWG_SET1TO0
(  115)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_SNOWG_SET0TO1






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 32

(  116)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_SNOWG_PHTFILT
(  117) END TYPE SURFACE_VIEW_GROUP_SNOWG
(  118) # 119 "surface_views_prognostic_module.F90"
(  119) TYPE SURFACE_VIEW_GROUP_LAKEB
(  120)   REAL(KIND=JPRB), POINTER :: PLICT_T0(:)   ! lake ice temperature
(  121)   REAL(KIND=JPRB), POINTER :: PLICT_T1(:)   ! lake ice temperature
(  122)   REAL(KIND=JPRB), POINTER :: PLICT_T9(:)   ! lake ice temperature
(  123) !>REAL(KIND=JPRB)          :: PLICT_T0 (YDCPG_OPTS%KLON)
(  124) !>REAL(KIND=JPRB)          :: PLICT_T1 (YDCPG_OPTS%KLON)
(  125) !>REAL(KIND=JPRB)          :: PLICT_T9 (YDCPG_OPTS%KLON)
(  126)   REAL(KIND=JPRB), POINTER :: PLMLT_T0(:)   ! lake mixed-layer temperature
(  127)   REAL(KIND=JPRB), POINTER :: PLMLT_T1(:)   ! lake mixed-layer temperature
(  128)   REAL(KIND=JPRB), POINTER :: PLMLT_T9(:)   ! lake mixed-layer temperature
(  129) !>REAL(KIND=JPRB)          :: PLMLT_T0 (YDCPG_OPTS%KLON)
(  130) !>REAL(KIND=JPRB)          :: PLMLT_T1 (YDCPG_OPTS%KLON)
(  131) !>REAL(KIND=JPRB)          :: PLMLT_T9 (YDCPG_OPTS%KLON)
(  132)   REAL(KIND=JPRB), POINTER :: PLTLT_T0(:)   ! lake total layer temperature
(  133)   REAL(KIND=JPRB), POINTER :: PLTLT_T1(:)   ! lake total layer temperature
(  134)   REAL(KIND=JPRB), POINTER :: PLTLT_T9(:)   ! lake total layer temperature
(  135) !>REAL(KIND=JPRB)          :: PLTLT_T0 (YDCPG_OPTS%KLON)
(  136) !>REAL(KIND=JPRB)          :: PLTLT_T1 (YDCPG_OPTS%KLON)
(  137) !>REAL(KIND=JPRB)          :: PLTLT_T9 (YDCPG_OPTS%KLON)
(  138)   REAL(KIND=JPRB), POINTER :: PLBLT_T0(:)   ! lake bottom layer temperature
(  139)   REAL(KIND=JPRB), POINTER :: PLBLT_T1(:)   ! lake bottom layer temperature
(  140)   REAL(KIND=JPRB), POINTER :: PLBLT_T9(:)   ! lake bottom layer temperature
(  141) !>REAL(KIND=JPRB)          :: PLBLT_T0 (YDCPG_OPTS%KLON)
(  142) !>REAL(KIND=JPRB)          :: PLBLT_T1 (YDCPG_OPTS%KLON)
(  143) !>REAL(KIND=JPRB)          :: PLBLT_T9 (YDCPG_OPTS%KLON)
(  144)   REAL(KIND=JPRB), POINTER :: PLSHF_T0(:)   ! lake shape factor
(  145)   REAL(KIND=JPRB), POINTER :: PLSHF_T1(:)   ! lake shape factor
(  146)   REAL(KIND=JPRB), POINTER :: PLSHF_T9(:)   ! lake shape factor
(  147) !>REAL(KIND=JPRB)          :: PLSHF_T0 (YDCPG_OPTS%KLON)
(  148) !>REAL(KIND=JPRB)          :: PLSHF_T1 (YDCPG_OPTS%KLON)
(  149) !>REAL(KIND=JPRB)          :: PLSHF_T9 (YDCPG_OPTS%KLON)
(  150)   REAL(KIND=JPRB), POINTER :: PLICD_T0(:)   ! lake ice depth
(  151)   REAL(KIND=JPRB), POINTER :: PLICD_T1(:)   ! lake ice depth
(  152)   REAL(KIND=JPRB), POINTER :: PLICD_T9(:)   ! lake ice depth
(  153) !>REAL(KIND=JPRB)          :: PLICD_T0 (YDCPG_OPTS%KLON)
(  154) !>REAL(KIND=JPRB)          :: PLICD_T1 (YDCPG_OPTS%KLON)
(  155) !>REAL(KIND=JPRB)          :: PLICD_T9 (YDCPG_OPTS%KLON)
(  156)   REAL(KIND=JPRB), POINTER :: PLMLD_T0(:)   ! lake mixed-layer depth
(  157)   REAL(KIND=JPRB), POINTER :: PLMLD_T1(:)   ! lake mixed-layer depth
(  158)   REAL(KIND=JPRB), POINTER :: PLMLD_T9(:)   ! lake mixed-layer depth
(  159) !>REAL(KIND=JPRB)          :: PLMLD_T0 (YDCPG_OPTS%KLON)
(  160) !>REAL(KIND=JPRB)          :: PLMLD_T1 (YDCPG_OPTS%KLON)
(  161) !>REAL(KIND=JPRB)          :: PLMLD_T9 (YDCPG_OPTS%KLON)
(  162)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  163) # 164 "surface_views_prognostic_module.F90"
(  164)   TYPE(SURFACE_VARIABLE_GROUP_LAKEB), POINTER :: VARIABLE_GROUP
(  165)   TYPE(FIELD_2D), POINTER :: F_LICT_T0=>NULL(), F_LICT_T1=>NULL(), F_LICT_T9=>NULL()
(  166)   TYPE(FIELD_2D), POINTER :: F_LMLT_T0=>NULL(), F_LMLT_T1=>NULL(), F_LMLT_T9=>NULL()
(  167)   TYPE(FIELD_2D), POINTER :: F_LTLT_T0=>NULL(), F_LTLT_T1=>NULL(), F_LTLT_T9=>NULL()
(  168)   TYPE(FIELD_2D), POINTER :: F_LBLT_T0=>NULL(), F_LBLT_T1=>NULL(), F_LBLT_T9=>NULL()
(  169)   TYPE(FIELD_2D), POINTER :: F_LSHF_T0=>NULL(), F_LSHF_T1=>NULL(), F_LSHF_T9=>NULL()
(  170)   TYPE(FIELD_2D), POINTER :: F_LICD_T0=>NULL(), F_LICD_T1=>NULL(), F_LICD_T9=>NULL()
(  171)   TYPE(FIELD_2D), POINTER :: F_LMLD_T0=>NULL(), F_LMLD_T1=>NULL(), F_LMLD_T9=>NULL()
(  172)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  173) # 174 "surface_views_prognostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 33

(  174) CONTAINS
(  175)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_LAKEB_INIT
(  176)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_LAKEB_UPDATE_VIEW
(  177)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_LAKEB_SET9TO0
(  178)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_LAKEB_SET1TO9
(  179)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_LAKEB_SET1TO0
(  180)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_LAKEB_SET0TO1
(  181)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_LAKEB_PHTFILT
(  182) END TYPE SURFACE_VIEW_GROUP_LAKEB
(  183) # 184 "surface_views_prognostic_module.F90"
(  184) TYPE SURFACE_VIEW_GROUP_RESVR
(  185)   REAL(KIND=JPRB), POINTER :: PT_T0(:)   ! skin temperature (Ts)
(  186)   REAL(KIND=JPRB), POINTER :: PT_T1(:)   ! skin temperature (Ts)
(  187)   REAL(KIND=JPRB), POINTER :: PT_T9(:)   ! skin temperature (Ts)
(  188) !>REAL(KIND=JPRB)          :: PT_T0 (YDCPG_OPTS%KLON)
(  189) !>REAL(KIND=JPRB)          :: PT_T1 (YDCPG_OPTS%KLON)
(  190) !>REAL(KIND=JPRB)          :: PT_T9 (YDCPG_OPTS%KLON)
(  191)   REAL(KIND=JPRB), POINTER :: PW_T0(:)   ! skin water content (Wskin) at ECMWF superficial reservoir water content (Ws) at MF
(  192)   REAL(KIND=JPRB), POINTER :: PW_T1(:)   ! skin water content (Wskin) at ECMWF superficial reservoir water content (Ws) at MF
(  193)   REAL(KIND=JPRB), POINTER :: PW_T9(:)   ! skin water content (Wskin) at ECMWF superficial reservoir water content (Ws) at MF
(  194) !>REAL(KIND=JPRB)          :: PW_T0 (YDCPG_OPTS%KLON)
(  195) !>REAL(KIND=JPRB)          :: PW_T1 (YDCPG_OPTS%KLON)
(  196) !>REAL(KIND=JPRB)          :: PW_T9 (YDCPG_OPTS%KLON)
(  197)   REAL(KIND=JPRB), POINTER :: PFC_T0(:)   ! skin water content (Wl) at MF
(  198)   REAL(KIND=JPRB), POINTER :: PFC_T1(:)   ! skin water content (Wl) at MF
(  199)   REAL(KIND=JPRB), POINTER :: PFC_T9(:)   ! skin water content (Wl) at MF
(  200) !>REAL(KIND=JPRB)          :: PFC_T0 (YDCPG_OPTS%KLON)
(  201) !>REAL(KIND=JPRB)          :: PFC_T1 (YDCPG_OPTS%KLON)
(  202) !>REAL(KIND=JPRB)          :: PFC_T9 (YDCPG_OPTS%KLON)
(  203)   REAL(KIND=JPRB), POINTER :: PIC_T0(:)   ! superficial reservoir ice
(  204)   REAL(KIND=JPRB), POINTER :: PIC_T1(:)   ! superficial reservoir ice
(  205)   REAL(KIND=JPRB), POINTER :: PIC_T9(:)   ! superficial reservoir ice
(  206) !>REAL(KIND=JPRB)          :: PIC_T0 (YDCPG_OPTS%KLON)
(  207) !>REAL(KIND=JPRB)          :: PIC_T1 (YDCPG_OPTS%KLON)
(  208) !>REAL(KIND=JPRB)          :: PIC_T9 (YDCPG_OPTS%KLON)
(  209)   REAL(KIND=JPRB), POINTER :: PFP1_T0(:)   ! interpolated Ts for 2nd part of 927-FULLPOS
(  210)   REAL(KIND=JPRB), POINTER :: PFP1_T1(:)   ! interpolated Ts for 2nd part of 927-FULLPOS
(  211)   REAL(KIND=JPRB), POINTER :: PFP1_T9(:)   ! interpolated Ts for 2nd part of 927-FULLPOS
(  212) !>REAL(KIND=JPRB)          :: PFP1_T0 (YDCPG_OPTS%KLON)
(  213) !>REAL(KIND=JPRB)          :: PFP1_T1 (YDCPG_OPTS%KLON)
(  214) !>REAL(KIND=JPRB)          :: PFP1_T9 (YDCPG_OPTS%KLON)
(  215)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  216) # 217 "surface_views_prognostic_module.F90"
(  217)   TYPE(SURFACE_VARIABLE_GROUP_RESVR), POINTER :: VARIABLE_GROUP
(  218)   TYPE(FIELD_2D), POINTER :: F_T_T0=>NULL(), F_T_T1=>NULL(), F_T_T9=>NULL()
(  219)   TYPE(FIELD_2D), POINTER :: F_W_T0=>NULL(), F_W_T1=>NULL(), F_W_T9=>NULL()
(  220)   TYPE(FIELD_2D), POINTER :: F_FC_T0=>NULL(), F_FC_T1=>NULL(), F_FC_T9=>NULL()
(  221)   TYPE(FIELD_2D), POINTER :: F_IC_T0=>NULL(), F_IC_T1=>NULL(), F_IC_T9=>NULL()
(  222)   TYPE(FIELD_2D), POINTER :: F_FP1_T0=>NULL(), F_FP1_T1=>NULL(), F_FP1_T9=>NULL()
(  223)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  224) # 225 "surface_views_prognostic_module.F90"
(  225) CONTAINS
(  226)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_RESVR_INIT
(  227)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_RESVR_UPDATE_VIEW
(  228)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_RESVR_SET9TO0
(  229)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_RESVR_SET1TO9
(  230)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_RESVR_SET1TO0
(  231)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_RESVR_SET0TO1






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 34

(  232)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_RESVR_PHTFILT
(  233) END TYPE SURFACE_VIEW_GROUP_RESVR
(  234) # 235 "surface_views_prognostic_module.F90"
(  235) TYPE SURFACE_VIEW_GROUP_CLS
(  236)   REAL(KIND=JPRB), POINTER :: PTCLS_T0(:)   ! 2m temperature
(  237)   REAL(KIND=JPRB), POINTER :: PTCLS_T1(:)   ! 2m temperature
(  238)   REAL(KIND=JPRB), POINTER :: PTCLS_T9(:)   ! 2m temperature
(  239) !>REAL(KIND=JPRB)          :: PTCLS_T0 (YDCPG_OPTS%KLON)
(  240) !>REAL(KIND=JPRB)          :: PTCLS_T1 (YDCPG_OPTS%KLON)
(  241) !>REAL(KIND=JPRB)          :: PTCLS_T9 (YDCPG_OPTS%KLON)
(  242)   REAL(KIND=JPRB), POINTER :: PHUCLS_T0(:)   ! 2m humidity
(  243)   REAL(KIND=JPRB), POINTER :: PHUCLS_T1(:)   ! 2m humidity
(  244)   REAL(KIND=JPRB), POINTER :: PHUCLS_T9(:)   ! 2m humidity
(  245) !>REAL(KIND=JPRB)          :: PHUCLS_T0 (YDCPG_OPTS%KLON)
(  246) !>REAL(KIND=JPRB)          :: PHUCLS_T1 (YDCPG_OPTS%KLON)
(  247) !>REAL(KIND=JPRB)          :: PHUCLS_T9 (YDCPG_OPTS%KLON)
(  248)   REAL(KIND=JPRB), POINTER :: PUCLS_T0(:)   ! 10m U-wind
(  249)   REAL(KIND=JPRB), POINTER :: PUCLS_T1(:)   ! 10m U-wind
(  250)   REAL(KIND=JPRB), POINTER :: PUCLS_T9(:)   ! 10m U-wind
(  251) !>REAL(KIND=JPRB)          :: PUCLS_T0 (YDCPG_OPTS%KLON)
(  252) !>REAL(KIND=JPRB)          :: PUCLS_T1 (YDCPG_OPTS%KLON)
(  253) !>REAL(KIND=JPRB)          :: PUCLS_T9 (YDCPG_OPTS%KLON)
(  254)   REAL(KIND=JPRB), POINTER :: PVCLS_T0(:)   ! 10m V-wind
(  255)   REAL(KIND=JPRB), POINTER :: PVCLS_T1(:)   ! 10m V-wind
(  256)   REAL(KIND=JPRB), POINTER :: PVCLS_T9(:)   ! 10m V-wind
(  257) !>REAL(KIND=JPRB)          :: PVCLS_T0 (YDCPG_OPTS%KLON)
(  258) !>REAL(KIND=JPRB)          :: PVCLS_T1 (YDCPG_OPTS%KLON)
(  259) !>REAL(KIND=JPRB)          :: PVCLS_T9 (YDCPG_OPTS%KLON)
(  260)   REAL(KIND=JPRB), POINTER :: PNUCLS_T0(:)   ! 10m neutral U-wind
(  261)   REAL(KIND=JPRB), POINTER :: PNUCLS_T1(:)   ! 10m neutral U-wind
(  262)   REAL(KIND=JPRB), POINTER :: PNUCLS_T9(:)   ! 10m neutral U-wind
(  263) !>REAL(KIND=JPRB)          :: PNUCLS_T0 (YDCPG_OPTS%KLON)
(  264) !>REAL(KIND=JPRB)          :: PNUCLS_T1 (YDCPG_OPTS%KLON)
(  265) !>REAL(KIND=JPRB)          :: PNUCLS_T9 (YDCPG_OPTS%KLON)
(  266)   REAL(KIND=JPRB), POINTER :: PNVCLS_T0(:)   ! 10m neutral V-wind
(  267)   REAL(KIND=JPRB), POINTER :: PNVCLS_T1(:)   ! 10m neutral V-wind
(  268)   REAL(KIND=JPRB), POINTER :: PNVCLS_T9(:)   ! 10m neutral V-wind
(  269) !>REAL(KIND=JPRB)          :: PNVCLS_T0 (YDCPG_OPTS%KLON)
(  270) !>REAL(KIND=JPRB)          :: PNVCLS_T1 (YDCPG_OPTS%KLON)
(  271) !>REAL(KIND=JPRB)          :: PNVCLS_T9 (YDCPG_OPTS%KLON)
(  272)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  273) # 274 "surface_views_prognostic_module.F90"
(  274)   TYPE(SURFACE_VARIABLE_GROUP_CLS), POINTER :: VARIABLE_GROUP
(  275)   TYPE(FIELD_2D), POINTER :: F_TCLS_T0=>NULL(), F_TCLS_T1=>NULL(), F_TCLS_T9=>NULL()
(  276)   TYPE(FIELD_2D), POINTER :: F_HUCLS_T0=>NULL(), F_HUCLS_T1=>NULL(), F_HUCLS_T9=>NULL()
(  277)   TYPE(FIELD_2D), POINTER :: F_UCLS_T0=>NULL(), F_UCLS_T1=>NULL(), F_UCLS_T9=>NULL()
(  278)   TYPE(FIELD_2D), POINTER :: F_VCLS_T0=>NULL(), F_VCLS_T1=>NULL(), F_VCLS_T9=>NULL()
(  279)   TYPE(FIELD_2D), POINTER :: F_NUCLS_T0=>NULL(), F_NUCLS_T1=>NULL(), F_NUCLS_T9=>NULL()
(  280)   TYPE(FIELD_2D), POINTER :: F_NVCLS_T0=>NULL(), F_NVCLS_T1=>NULL(), F_NVCLS_T9=>NULL()
(  281)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  282) # 283 "surface_views_prognostic_module.F90"
(  283) CONTAINS
(  284)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_CLS_INIT
(  285)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_CLS_UPDATE_VIEW
(  286)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_CLS_SET9TO0
(  287)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_CLS_SET1TO9
(  288)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_CLS_SET1TO0
(  289)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_CLS_SET0TO1






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 35

(  290)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_CLS_PHTFILT
(  291) END TYPE SURFACE_VIEW_GROUP_CLS
(  292) # 293 "surface_views_prognostic_module.F90"
(  293) TYPE SURFACE_VIEW_GROUP_OML
(  294)   REAL(KIND=JPRB), POINTER :: PTO_T0(:,:)   ! temperature
(  295)   REAL(KIND=JPRB), POINTER :: PTO_T1(:,:)   ! temperature
(  296)   REAL(KIND=JPRB), POINTER :: PTO_T9(:,:)   ! temperature
(  297) !>REAL(KIND=JPRB)          :: PTO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  298) !>REAL(KIND=JPRB)          :: PTO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  299) !>REAL(KIND=JPRB)          :: PTO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  300)   REAL(KIND=JPRB), POINTER :: PSO_T0(:,:)   ! salinity
(  301)   REAL(KIND=JPRB), POINTER :: PSO_T1(:,:)   ! salinity
(  302)   REAL(KIND=JPRB), POINTER :: PSO_T9(:,:)   ! salinity
(  303) !>REAL(KIND=JPRB)          :: PSO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  304) !>REAL(KIND=JPRB)          :: PSO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  305) !>REAL(KIND=JPRB)          :: PSO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  306)   REAL(KIND=JPRB), POINTER :: PUO_T0(:,:)   ! U velocity
(  307)   REAL(KIND=JPRB), POINTER :: PUO_T1(:,:)   ! U velocity
(  308)   REAL(KIND=JPRB), POINTER :: PUO_T9(:,:)   ! U velocity
(  309) !>REAL(KIND=JPRB)          :: PUO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  310) !>REAL(KIND=JPRB)          :: PUO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  311) !>REAL(KIND=JPRB)          :: PUO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  312)   REAL(KIND=JPRB), POINTER :: PVO_T0(:,:)   ! V velocity
(  313)   REAL(KIND=JPRB), POINTER :: PVO_T1(:,:)   ! V velocity
(  314)   REAL(KIND=JPRB), POINTER :: PVO_T9(:,:)   ! V velocity
(  315) !>REAL(KIND=JPRB)          :: PVO_T0 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  316) !>REAL(KIND=JPRB)          :: PVO_T1 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  317) !>REAL(KIND=JPRB)          :: PVO_T9 (YDCPG_OPTS%KLON, YDCPG_OPTS%YRSURF_DIMS%YSP_OMD%NLEVS)
(  318)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  319) # 320 "surface_views_prognostic_module.F90"
(  320)   TYPE(SURFACE_VARIABLE_GROUP_OML), POINTER :: VARIABLE_GROUP
(  321)   TYPE(FIELD_3D), POINTER :: F_TO_T0=>NULL(), F_TO_T1=>NULL(), F_TO_T9=>NULL()
(  322)   TYPE(FIELD_3D), POINTER :: F_SO_T0=>NULL(), F_SO_T1=>NULL(), F_SO_T9=>NULL()
(  323)   TYPE(FIELD_3D), POINTER :: F_UO_T0=>NULL(), F_UO_T1=>NULL(), F_UO_T9=>NULL()
(  324)   TYPE(FIELD_3D), POINTER :: F_VO_T0=>NULL(), F_VO_T1=>NULL(), F_VO_T9=>NULL()
(  325)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  326) # 327 "surface_views_prognostic_module.F90"
(  327) CONTAINS
(  328)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_OML_INIT
(  329)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_OML_UPDATE_VIEW
(  330)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_OML_SET9TO0
(  331)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_OML_SET1TO9
(  332)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_OML_SET1TO0
(  333)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_OML_SET0TO1
(  334)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_OML_PHTFILT
(  335) END TYPE SURFACE_VIEW_GROUP_OML
(  336) # 337 "surface_views_prognostic_module.F90"
(  337) TYPE SURFACE_VIEW_GROUP_EXTRP
(  338)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:,:)
(  339) # 340 "surface_views_prognostic_module.F90"
(  340)   TYPE(SURFACE_VARIABLE_GROUP_EXTRP), POINTER :: VARIABLE_GROUP
(  341)   TYPE(FIELD_4D), POINTER :: F_GROUP
(  342) # 343 "surface_views_prognostic_module.F90"
(  343) CONTAINS
(  344)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_EXTRP_INIT
(  345)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_EXTRP_UPDATE_VIEW
(  346)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_EXTRP_SET9TO0
(  347)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_EXTRP_SET1TO9






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 36

(  348)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_EXTRP_SET1TO0
(  349)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_EXTRP_SET0TO1
(  350)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_EXTRP_PHTFILT
(  351) END TYPE SURFACE_VIEW_GROUP_EXTRP
(  352) # 353 "surface_views_prognostic_module.F90"
(  353) TYPE SURFACE_VIEW_GROUP_XTRP2
(  354)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  355) # 356 "surface_views_prognostic_module.F90"
(  356)   TYPE(SURFACE_VARIABLE_GROUP_XTRP2), POINTER :: VARIABLE_GROUP
(  357)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  358) # 359 "surface_views_prognostic_module.F90"
(  359) CONTAINS
(  360)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_XTRP2_INIT
(  361)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_XTRP2_UPDATE_VIEW
(  362)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_XTRP2_SET9TO0
(  363)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_XTRP2_SET1TO9
(  364)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_XTRP2_SET1TO0
(  365)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_XTRP2_SET0TO1
(  366)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_XTRP2_PHTFILT
(  367) END TYPE SURFACE_VIEW_GROUP_XTRP2
(  368) # 369 "surface_views_prognostic_module.F90"
(  369) TYPE SURFACE_VIEW_GROUP_CANRI
(  370)   REAL(KIND=JPRB), POINTER :: PGROUP(:,:)
(  371) # 372 "surface_views_prognostic_module.F90"
(  372)   TYPE(SURFACE_VARIABLE_GROUP_CANRI), POINTER :: VARIABLE_GROUP
(  373)   TYPE(FIELD_3D), POINTER :: F_GROUP
(  374) # 375 "surface_views_prognostic_module.F90"
(  375) CONTAINS
(  376)   PROCEDURE :: INIT => SURFACE_VIEW_GROUP_CANRI_INIT
(  377)   PROCEDURE :: UPDATE_VIEW => SURFACE_VIEW_GROUP_CANRI_UPDATE_VIEW
(  378)   PROCEDURE :: SET9TO0 => SURFACE_VIEW_GROUP_CANRI_SET9TO0
(  379)   PROCEDURE :: SET1TO9 => SURFACE_VIEW_GROUP_CANRI_SET1TO9
(  380)   PROCEDURE :: SET1TO0 => SURFACE_VIEW_GROUP_CANRI_SET1TO0
(  381)   PROCEDURE :: SET0TO1 => SURFACE_VIEW_GROUP_CANRI_SET0TO1
(  382)   PROCEDURE :: PHTFILT => SURFACE_VIEW_GROUP_CANRI_PHTFILT
(  383) END TYPE SURFACE_VIEW_GROUP_CANRI
(  384) # 386 "surface_views_prognostic_module.F90"
(  386) CONTAINS
(  387) # 388 "surface_views_prognostic_module.F90"
(  388)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_INIT(SELF, VARIABLE_GROUP)
(  389)     ! Constructor of the array view type for a surface variable group
(  390)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  391)     TYPE(SURFACE_VARIABLE_GROUP_SOILB), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  392) # 393 "surface_views_prognostic_module.F90"
(  393)     ! Create a view per timestep field for each prognostic variable
(  394)     SELF%F_T_T0 => VARIABLE_GROUP%VT%FT0
(  395)     SELF%F_T_T1 => VARIABLE_GROUP%VT%FT1
(  396)     SELF%F_T_T9 => VARIABLE_GROUP%VT%FT9
(  397)     SELF%F_Q_T0 => VARIABLE_GROUP%VQ%FT0
(  398)     SELF%F_Q_T1 => VARIABLE_GROUP%VQ%FT1
(  399)     SELF%F_Q_T9 => VARIABLE_GROUP%VQ%FT9
(  400)     SELF%F_TL_T0 => VARIABLE_GROUP%VTL%FT0
(  401)     SELF%F_TL_T1 => VARIABLE_GROUP%VTL%FT1
(  402)     SELF%F_TL_T9 => VARIABLE_GROUP%VTL%FT9
(  403)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  404)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  405)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_INIT
(  406) # 407 "surface_views_prognostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 37

(  407)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  408)     ! Extract local array views from field objects
(  409)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  410)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  411) # 412 "surface_views_prognostic_module.F90"
(  412)     ! Set up the view pointer for each timestep field
(  413)     SELF%PT_T0 => SELF%F_T_T0%GET_VIEW(BLOCK_INDEX)
(  414)     SELF%PT_T1 => SELF%F_T_T1%GET_VIEW(BLOCK_INDEX)
(  415)     SELF%PT_T9 => SELF%F_T_T9%GET_VIEW(BLOCK_INDEX)
(  416)     SELF%PQ_T0 => SELF%F_Q_T0%GET_VIEW(BLOCK_INDEX)
(  417)     SELF%PQ_T1 => SELF%F_Q_T1%GET_VIEW(BLOCK_INDEX)
(  418)     SELF%PQ_T9 => SELF%F_Q_T9%GET_VIEW(BLOCK_INDEX)
(  419)     SELF%PTL_T0 => SELF%F_TL_T0%GET_VIEW(BLOCK_INDEX)
(  420)     SELF%PTL_T1 => SELF%F_TL_T1%GET_VIEW(BLOCK_INDEX)
(  421)     SELF%PTL_T9 => SELF%F_TL_T9%GET_VIEW(BLOCK_INDEX)
(  422) # 423 "surface_views_prognostic_module.F90"
(  423)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  424)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_UPDATE_VIEW
(  425) # 426 "surface_views_prognostic_module.F90"
(  426)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_INIT(SELF, VARIABLE_GROUP)
(  427)     ! Constructor of the array view type for a surface variable group
(  428)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  429)     TYPE(SURFACE_VARIABLE_GROUP_SNOWG), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  430) # 431 "surface_views_prognostic_module.F90"
(  431)     ! Create a view per timestep field for each prognostic variable
(  432)     SELF%F_F_T0 => VARIABLE_GROUP%VF%FT0
(  433)     SELF%F_F_T1 => VARIABLE_GROUP%VF%FT1
(  434)     SELF%F_F_T9 => VARIABLE_GROUP%VF%FT9
(  435)     SELF%F_A_T0 => VARIABLE_GROUP%VA%FT0
(  436)     SELF%F_A_T1 => VARIABLE_GROUP%VA%FT1
(  437)     SELF%F_A_T9 => VARIABLE_GROUP%VA%FT9
(  438)     SELF%F_R_T0 => VARIABLE_GROUP%VR%FT0
(  439)     SELF%F_R_T1 => VARIABLE_GROUP%VR%FT1
(  440)     SELF%F_R_T9 => VARIABLE_GROUP%VR%FT9
(  441)     SELF%F_T_T0 => VARIABLE_GROUP%VT%FT0
(  442)     SELF%F_T_T1 => VARIABLE_GROUP%VT%FT1
(  443)     SELF%F_T_T9 => VARIABLE_GROUP%VT%FT9
(  444)     SELF%F_W_T0 => VARIABLE_GROUP%VW%FT0
(  445)     SELF%F_W_T1 => VARIABLE_GROUP%VW%FT1
(  446)     SELF%F_W_T9 => VARIABLE_GROUP%VW%FT9
(  447)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  448)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  449)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_INIT
(  450) # 451 "surface_views_prognostic_module.F90"
(  451)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  452)     ! Extract local array views from field objects
(  453)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  454)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  455) # 456 "surface_views_prognostic_module.F90"
(  456)     ! Set up the view pointer for each timestep field
(  457)     SELF%PF_T0 => SELF%F_F_T0%GET_VIEW(BLOCK_INDEX)
(  458)     SELF%PF_T1 => SELF%F_F_T1%GET_VIEW(BLOCK_INDEX)
(  459)     SELF%PF_T9 => SELF%F_F_T9%GET_VIEW(BLOCK_INDEX)
(  460)     SELF%PA_T0 => SELF%F_A_T0%GET_VIEW(BLOCK_INDEX)
(  461)     SELF%PA_T1 => SELF%F_A_T1%GET_VIEW(BLOCK_INDEX)
(  462)     SELF%PA_T9 => SELF%F_A_T9%GET_VIEW(BLOCK_INDEX)
(  463)     SELF%PR_T0 => SELF%F_R_T0%GET_VIEW(BLOCK_INDEX)
(  464)     SELF%PR_T1 => SELF%F_R_T1%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 38

(  465)     SELF%PR_T9 => SELF%F_R_T9%GET_VIEW(BLOCK_INDEX)
(  466)     SELF%PT_T0 => SELF%F_T_T0%GET_VIEW(BLOCK_INDEX)
(  467)     SELF%PT_T1 => SELF%F_T_T1%GET_VIEW(BLOCK_INDEX)
(  468)     SELF%PT_T9 => SELF%F_T_T9%GET_VIEW(BLOCK_INDEX)
(  469)     SELF%PW_T0 => SELF%F_W_T0%GET_VIEW(BLOCK_INDEX)
(  470)     SELF%PW_T1 => SELF%F_W_T1%GET_VIEW(BLOCK_INDEX)
(  471)     SELF%PW_T9 => SELF%F_W_T9%GET_VIEW(BLOCK_INDEX)
(  472) # 473 "surface_views_prognostic_module.F90"
(  473)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  474)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_UPDATE_VIEW
(  475) # 476 "surface_views_prognostic_module.F90"
(  476)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_INIT(SELF, VARIABLE_GROUP)
(  477)     ! Constructor of the array view type for a surface variable group
(  478)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  479)     TYPE(SURFACE_VARIABLE_GROUP_LAKEB), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  480) # 481 "surface_views_prognostic_module.F90"
(  481)     ! Create a view per timestep field for each prognostic variable
(  482)     SELF%F_LICT_T0 => VARIABLE_GROUP%VLICT%FT0
(  483)     SELF%F_LICT_T1 => VARIABLE_GROUP%VLICT%FT1
(  484)     SELF%F_LICT_T9 => VARIABLE_GROUP%VLICT%FT9
(  485)     SELF%F_LMLT_T0 => VARIABLE_GROUP%VLMLT%FT0
(  486)     SELF%F_LMLT_T1 => VARIABLE_GROUP%VLMLT%FT1
(  487)     SELF%F_LMLT_T9 => VARIABLE_GROUP%VLMLT%FT9
(  488)     SELF%F_LTLT_T0 => VARIABLE_GROUP%VLTLT%FT0
(  489)     SELF%F_LTLT_T1 => VARIABLE_GROUP%VLTLT%FT1
(  490)     SELF%F_LTLT_T9 => VARIABLE_GROUP%VLTLT%FT9
(  491)     SELF%F_LBLT_T0 => VARIABLE_GROUP%VLBLT%FT0
(  492)     SELF%F_LBLT_T1 => VARIABLE_GROUP%VLBLT%FT1
(  493)     SELF%F_LBLT_T9 => VARIABLE_GROUP%VLBLT%FT9
(  494)     SELF%F_LSHF_T0 => VARIABLE_GROUP%VLSHF%FT0
(  495)     SELF%F_LSHF_T1 => VARIABLE_GROUP%VLSHF%FT1
(  496)     SELF%F_LSHF_T9 => VARIABLE_GROUP%VLSHF%FT9
(  497)     SELF%F_LICD_T0 => VARIABLE_GROUP%VLICD%FT0
(  498)     SELF%F_LICD_T1 => VARIABLE_GROUP%VLICD%FT1
(  499)     SELF%F_LICD_T9 => VARIABLE_GROUP%VLICD%FT9
(  500)     SELF%F_LMLD_T0 => VARIABLE_GROUP%VLMLD%FT0
(  501)     SELF%F_LMLD_T1 => VARIABLE_GROUP%VLMLD%FT1
(  502)     SELF%F_LMLD_T9 => VARIABLE_GROUP%VLMLD%FT9
(  503)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  504)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  505)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_INIT
(  506) # 507 "surface_views_prognostic_module.F90"
(  507)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  508)     ! Extract local array views from field objects
(  509)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  510)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  511) # 512 "surface_views_prognostic_module.F90"
(  512)     ! Set up the view pointer for each timestep field
(  513)     SELF%PLICT_T0 => SELF%F_LICT_T0%GET_VIEW(BLOCK_INDEX)
(  514)     SELF%PLICT_T1 => SELF%F_LICT_T1%GET_VIEW(BLOCK_INDEX)
(  515)     SELF%PLICT_T9 => SELF%F_LICT_T9%GET_VIEW(BLOCK_INDEX)
(  516)     SELF%PLMLT_T0 => SELF%F_LMLT_T0%GET_VIEW(BLOCK_INDEX)
(  517)     SELF%PLMLT_T1 => SELF%F_LMLT_T1%GET_VIEW(BLOCK_INDEX)
(  518)     SELF%PLMLT_T9 => SELF%F_LMLT_T9%GET_VIEW(BLOCK_INDEX)
(  519)     SELF%PLTLT_T0 => SELF%F_LTLT_T0%GET_VIEW(BLOCK_INDEX)
(  520)     SELF%PLTLT_T1 => SELF%F_LTLT_T1%GET_VIEW(BLOCK_INDEX)
(  521)     SELF%PLTLT_T9 => SELF%F_LTLT_T9%GET_VIEW(BLOCK_INDEX)
(  522)     SELF%PLBLT_T0 => SELF%F_LBLT_T0%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 39

(  523)     SELF%PLBLT_T1 => SELF%F_LBLT_T1%GET_VIEW(BLOCK_INDEX)
(  524)     SELF%PLBLT_T9 => SELF%F_LBLT_T9%GET_VIEW(BLOCK_INDEX)
(  525)     SELF%PLSHF_T0 => SELF%F_LSHF_T0%GET_VIEW(BLOCK_INDEX)
(  526)     SELF%PLSHF_T1 => SELF%F_LSHF_T1%GET_VIEW(BLOCK_INDEX)
(  527)     SELF%PLSHF_T9 => SELF%F_LSHF_T9%GET_VIEW(BLOCK_INDEX)
(  528)     SELF%PLICD_T0 => SELF%F_LICD_T0%GET_VIEW(BLOCK_INDEX)
(  529)     SELF%PLICD_T1 => SELF%F_LICD_T1%GET_VIEW(BLOCK_INDEX)
(  530)     SELF%PLICD_T9 => SELF%F_LICD_T9%GET_VIEW(BLOCK_INDEX)
(  531)     SELF%PLMLD_T0 => SELF%F_LMLD_T0%GET_VIEW(BLOCK_INDEX)
(  532)     SELF%PLMLD_T1 => SELF%F_LMLD_T1%GET_VIEW(BLOCK_INDEX)
(  533)     SELF%PLMLD_T9 => SELF%F_LMLD_T9%GET_VIEW(BLOCK_INDEX)
(  534) # 535 "surface_views_prognostic_module.F90"
(  535)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  536)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_UPDATE_VIEW
(  537) # 538 "surface_views_prognostic_module.F90"
(  538)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_INIT(SELF, VARIABLE_GROUP)
(  539)     ! Constructor of the array view type for a surface variable group
(  540)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
(  541)     TYPE(SURFACE_VARIABLE_GROUP_RESVR), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  542) # 543 "surface_views_prognostic_module.F90"
(  543)     ! Create a view per timestep field for each prognostic variable
(  544)     SELF%F_T_T0 => VARIABLE_GROUP%VT%FT0
(  545)     SELF%F_T_T1 => VARIABLE_GROUP%VT%FT1
(  546)     SELF%F_T_T9 => VARIABLE_GROUP%VT%FT9
(  547)     SELF%F_W_T0 => VARIABLE_GROUP%VW%FT0
(  548)     SELF%F_W_T1 => VARIABLE_GROUP%VW%FT1
(  549)     SELF%F_W_T9 => VARIABLE_GROUP%VW%FT9
(  550)     SELF%F_FC_T0 => VARIABLE_GROUP%VFC%FT0
(  551)     SELF%F_FC_T1 => VARIABLE_GROUP%VFC%FT1
(  552)     SELF%F_FC_T9 => VARIABLE_GROUP%VFC%FT9
(  553)     SELF%F_IC_T0 => VARIABLE_GROUP%VIC%FT0
(  554)     SELF%F_IC_T1 => VARIABLE_GROUP%VIC%FT1
(  555)     SELF%F_IC_T9 => VARIABLE_GROUP%VIC%FT9
(  556)     SELF%F_FP1_T0 => VARIABLE_GROUP%VFP1%FT0
(  557)     SELF%F_FP1_T1 => VARIABLE_GROUP%VFP1%FT1
(  558)     SELF%F_FP1_T9 => VARIABLE_GROUP%VFP1%FT9
(  559)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  560)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  561)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_INIT
(  562) # 563 "surface_views_prognostic_module.F90"
(  563)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  564)     ! Extract local array views from field objects
(  565)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
(  566)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  567) # 568 "surface_views_prognostic_module.F90"
(  568)     ! Set up the view pointer for each timestep field
(  569)     SELF%PT_T0 => SELF%F_T_T0%GET_VIEW(BLOCK_INDEX)
(  570)     SELF%PT_T1 => SELF%F_T_T1%GET_VIEW(BLOCK_INDEX)
(  571)     SELF%PT_T9 => SELF%F_T_T9%GET_VIEW(BLOCK_INDEX)
(  572)     SELF%PW_T0 => SELF%F_W_T0%GET_VIEW(BLOCK_INDEX)
(  573)     SELF%PW_T1 => SELF%F_W_T1%GET_VIEW(BLOCK_INDEX)
(  574)     SELF%PW_T9 => SELF%F_W_T9%GET_VIEW(BLOCK_INDEX)
(  575)     SELF%PFC_T0 => SELF%F_FC_T0%GET_VIEW(BLOCK_INDEX)
(  576)     SELF%PFC_T1 => SELF%F_FC_T1%GET_VIEW(BLOCK_INDEX)
(  577)     SELF%PFC_T9 => SELF%F_FC_T9%GET_VIEW(BLOCK_INDEX)
(  578)     SELF%PIC_T0 => SELF%F_IC_T0%GET_VIEW(BLOCK_INDEX)
(  579)     SELF%PIC_T1 => SELF%F_IC_T1%GET_VIEW(BLOCK_INDEX)
(  580)     SELF%PIC_T9 => SELF%F_IC_T9%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 40

(  581)     SELF%PFP1_T0 => SELF%F_FP1_T0%GET_VIEW(BLOCK_INDEX)
(  582)     SELF%PFP1_T1 => SELF%F_FP1_T1%GET_VIEW(BLOCK_INDEX)
(  583)     SELF%PFP1_T9 => SELF%F_FP1_T9%GET_VIEW(BLOCK_INDEX)
(  584) # 585 "surface_views_prognostic_module.F90"
(  585)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  586)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_UPDATE_VIEW
(  587) # 588 "surface_views_prognostic_module.F90"
(  588)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_INIT(SELF, VARIABLE_GROUP)
(  589)     ! Constructor of the array view type for a surface variable group
(  590)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
(  591)     TYPE(SURFACE_VARIABLE_GROUP_CLS), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  592) # 593 "surface_views_prognostic_module.F90"
(  593)     ! Create a view per timestep field for each prognostic variable
(  594)     SELF%F_TCLS_T0 => VARIABLE_GROUP%VTCLS%FT0
(  595)     SELF%F_TCLS_T1 => VARIABLE_GROUP%VTCLS%FT1
(  596)     SELF%F_TCLS_T9 => VARIABLE_GROUP%VTCLS%FT9
(  597)     SELF%F_HUCLS_T0 => VARIABLE_GROUP%VHUCLS%FT0
(  598)     SELF%F_HUCLS_T1 => VARIABLE_GROUP%VHUCLS%FT1
(  599)     SELF%F_HUCLS_T9 => VARIABLE_GROUP%VHUCLS%FT9
(  600)     SELF%F_UCLS_T0 => VARIABLE_GROUP%VUCLS%FT0
(  601)     SELF%F_UCLS_T1 => VARIABLE_GROUP%VUCLS%FT1
(  602)     SELF%F_UCLS_T9 => VARIABLE_GROUP%VUCLS%FT9
(  603)     SELF%F_VCLS_T0 => VARIABLE_GROUP%VVCLS%FT0
(  604)     SELF%F_VCLS_T1 => VARIABLE_GROUP%VVCLS%FT1
(  605)     SELF%F_VCLS_T9 => VARIABLE_GROUP%VVCLS%FT9
(  606)     SELF%F_NUCLS_T0 => VARIABLE_GROUP%VNUCLS%FT0
(  607)     SELF%F_NUCLS_T1 => VARIABLE_GROUP%VNUCLS%FT1
(  608)     SELF%F_NUCLS_T9 => VARIABLE_GROUP%VNUCLS%FT9
(  609)     SELF%F_NVCLS_T0 => VARIABLE_GROUP%VNVCLS%FT0
(  610)     SELF%F_NVCLS_T1 => VARIABLE_GROUP%VNVCLS%FT1
(  611)     SELF%F_NVCLS_T9 => VARIABLE_GROUP%VNVCLS%FT9
(  612)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  613)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  614)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_INIT
(  615) # 616 "surface_views_prognostic_module.F90"
(  616)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  617)     ! Extract local array views from field objects
(  618)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
(  619)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  620) # 621 "surface_views_prognostic_module.F90"
(  621)     ! Set up the view pointer for each timestep field
(  622)     SELF%PTCLS_T0 => SELF%F_TCLS_T0%GET_VIEW(BLOCK_INDEX)
(  623)     SELF%PTCLS_T1 => SELF%F_TCLS_T1%GET_VIEW(BLOCK_INDEX)
(  624)     SELF%PTCLS_T9 => SELF%F_TCLS_T9%GET_VIEW(BLOCK_INDEX)
(  625)     SELF%PHUCLS_T0 => SELF%F_HUCLS_T0%GET_VIEW(BLOCK_INDEX)
(  626)     SELF%PHUCLS_T1 => SELF%F_HUCLS_T1%GET_VIEW(BLOCK_INDEX)
(  627)     SELF%PHUCLS_T9 => SELF%F_HUCLS_T9%GET_VIEW(BLOCK_INDEX)
(  628)     SELF%PUCLS_T0 => SELF%F_UCLS_T0%GET_VIEW(BLOCK_INDEX)
(  629)     SELF%PUCLS_T1 => SELF%F_UCLS_T1%GET_VIEW(BLOCK_INDEX)
(  630)     SELF%PUCLS_T9 => SELF%F_UCLS_T9%GET_VIEW(BLOCK_INDEX)
(  631)     SELF%PVCLS_T0 => SELF%F_VCLS_T0%GET_VIEW(BLOCK_INDEX)
(  632)     SELF%PVCLS_T1 => SELF%F_VCLS_T1%GET_VIEW(BLOCK_INDEX)
(  633)     SELF%PVCLS_T9 => SELF%F_VCLS_T9%GET_VIEW(BLOCK_INDEX)
(  634)     SELF%PNUCLS_T0 => SELF%F_NUCLS_T0%GET_VIEW(BLOCK_INDEX)
(  635)     SELF%PNUCLS_T1 => SELF%F_NUCLS_T1%GET_VIEW(BLOCK_INDEX)
(  636)     SELF%PNUCLS_T9 => SELF%F_NUCLS_T9%GET_VIEW(BLOCK_INDEX)
(  637)     SELF%PNVCLS_T0 => SELF%F_NVCLS_T0%GET_VIEW(BLOCK_INDEX)
(  638)     SELF%PNVCLS_T1 => SELF%F_NVCLS_T1%GET_VIEW(BLOCK_INDEX)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 41

(  639)     SELF%PNVCLS_T9 => SELF%F_NVCLS_T9%GET_VIEW(BLOCK_INDEX)
(  640) # 641 "surface_views_prognostic_module.F90"
(  641)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  642)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_UPDATE_VIEW
(  643) # 644 "surface_views_prognostic_module.F90"
(  644)   SUBROUTINE SURFACE_VIEW_GROUP_OML_INIT(SELF, VARIABLE_GROUP)
(  645)     ! Constructor of the array view type for a surface variable group
(  646)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
(  647)     TYPE(SURFACE_VARIABLE_GROUP_OML), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  648) # 649 "surface_views_prognostic_module.F90"
(  649)     ! Create a view per timestep field for each prognostic variable
(  650)     SELF%F_TO_T0 => VARIABLE_GROUP%VTO%FT0
(  651)     SELF%F_TO_T1 => VARIABLE_GROUP%VTO%FT1
(  652)     SELF%F_TO_T9 => VARIABLE_GROUP%VTO%FT9
(  653)     SELF%F_SO_T0 => VARIABLE_GROUP%VSO%FT0
(  654)     SELF%F_SO_T1 => VARIABLE_GROUP%VSO%FT1
(  655)     SELF%F_SO_T9 => VARIABLE_GROUP%VSO%FT9
(  656)     SELF%F_UO_T0 => VARIABLE_GROUP%VUO%FT0
(  657)     SELF%F_UO_T1 => VARIABLE_GROUP%VUO%FT1
(  658)     SELF%F_UO_T9 => VARIABLE_GROUP%VUO%FT9
(  659)     SELF%F_VO_T0 => VARIABLE_GROUP%VVO%FT0
(  660)     SELF%F_VO_T1 => VARIABLE_GROUP%VVO%FT1
(  661)     SELF%F_VO_T9 => VARIABLE_GROUP%VVO%FT9
(  662)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  663)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  664)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_INIT
(  665) # 666 "surface_views_prognostic_module.F90"
(  666)   SUBROUTINE SURFACE_VIEW_GROUP_OML_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  667)     ! Extract local array views from field objects
(  668)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
(  669)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  670) # 671 "surface_views_prognostic_module.F90"
(  671)     ! Set up the view pointer for each timestep field
(  672)     SELF%PTO_T0 => SELF%F_TO_T0%GET_VIEW(BLOCK_INDEX)
(  673)     SELF%PTO_T1 => SELF%F_TO_T1%GET_VIEW(BLOCK_INDEX)
(  674)     SELF%PTO_T9 => SELF%F_TO_T9%GET_VIEW(BLOCK_INDEX)
(  675)     SELF%PSO_T0 => SELF%F_SO_T0%GET_VIEW(BLOCK_INDEX)
(  676)     SELF%PSO_T1 => SELF%F_SO_T1%GET_VIEW(BLOCK_INDEX)
(  677)     SELF%PSO_T9 => SELF%F_SO_T9%GET_VIEW(BLOCK_INDEX)
(  678)     SELF%PUO_T0 => SELF%F_UO_T0%GET_VIEW(BLOCK_INDEX)
(  679)     SELF%PUO_T1 => SELF%F_UO_T1%GET_VIEW(BLOCK_INDEX)
(  680)     SELF%PUO_T9 => SELF%F_UO_T9%GET_VIEW(BLOCK_INDEX)
(  681)     SELF%PVO_T0 => SELF%F_VO_T0%GET_VIEW(BLOCK_INDEX)
(  682)     SELF%PVO_T1 => SELF%F_VO_T1%GET_VIEW(BLOCK_INDEX)
(  683)     SELF%PVO_T9 => SELF%F_VO_T9%GET_VIEW(BLOCK_INDEX)
(  684) # 685 "surface_views_prognostic_module.F90"
(  685)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  686)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_UPDATE_VIEW
(  687) # 688 "surface_views_prognostic_module.F90"
(  688)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_INIT(SELF, VARIABLE_GROUP)
(  689)     ! Constructor of the array view type for a surface variable group
(  690)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
(  691)     TYPE(SURFACE_VARIABLE_GROUP_EXTRP), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  692) # 693 "surface_views_prognostic_module.F90"
(  693)     ! Create a view per timestep field for each prognostic variable
(  694)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  695)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  696)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_INIT






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 42

(  697) # 698 "surface_views_prognostic_module.F90"
(  698)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  699)     ! Extract local array views from field objects
(  700)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
(  701)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  702) # 703 "surface_views_prognostic_module.F90"
(  703)     ! Set up the view pointer for each timestep field
(  704) # 705 "surface_views_prognostic_module.F90"
(  705)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  706)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_UPDATE_VIEW
(  707) # 708 "surface_views_prognostic_module.F90"
(  708)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_INIT(SELF, VARIABLE_GROUP)
(  709)     ! Constructor of the array view type for a surface variable group
(  710)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
(  711)     TYPE(SURFACE_VARIABLE_GROUP_XTRP2), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  712) # 713 "surface_views_prognostic_module.F90"
(  713)     ! Create a view per timestep field for each prognostic variable
(  714)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  715)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  716)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_INIT
(  717) # 718 "surface_views_prognostic_module.F90"
(  718)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  719)     ! Extract local array views from field objects
(  720)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
(  721)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  722) # 723 "surface_views_prognostic_module.F90"
(  723)     ! Set up the view pointer for each timestep field
(  724) # 725 "surface_views_prognostic_module.F90"
(  725)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  726)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_UPDATE_VIEW
(  727) # 728 "surface_views_prognostic_module.F90"
(  728)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_INIT(SELF, VARIABLE_GROUP)
(  729)     ! Constructor of the array view type for a surface variable group
(  730)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
(  731)     TYPE(SURFACE_VARIABLE_GROUP_CANRI), TARGET, INTENT(INOUT) :: VARIABLE_GROUP
(  732) # 733 "surface_views_prognostic_module.F90"
(  733)     ! Create a view per timestep field for each prognostic variable
(  734)     SELF%VARIABLE_GROUP => VARIABLE_GROUP
(  735)     SELF%F_GROUP => VARIABLE_GROUP%F_GROUP
(  736)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_INIT
(  737) # 738 "surface_views_prognostic_module.F90"
(  738)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_UPDATE_VIEW(SELF, BLOCK_INDEX)
(  739)     ! Extract local array views from field objects
(  740)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
(  741)     INTEGER(KIND=JPIM), INTENT(IN) :: BLOCK_INDEX
(  742) # 743 "surface_views_prognostic_module.F90"
(  743)     ! Set up the view pointer for each timestep field
(  744) # 745 "surface_views_prognostic_module.F90"
(  745)     IF (ASSOCIATED(SELF%F_GROUP))  SELF%PGROUP => SELF%F_GROUP%GET_VIEW(BLOCK_INDEX)
(  746)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_UPDATE_VIEW
(  747) # 750 "surface_views_prognostic_module.F90"
(  750)   ! Timestepping utility subroutines for prognostics variables
(  751)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET9TO0(SELF)
(  752)     ! Field update operation for timestepping schemes
(  753)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  754) # 755 "surface_views_prognostic_module.F90"
(  755)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  756)       SELF%PT_T9(:,:) = SELF%PT_T0(:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 43

(  757)     END IF
(  758)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  759)       SELF%PQ_T9(:,:) = SELF%PQ_T0(:,:)
(  760)     END IF
(  761)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  762)       SELF%PTL_T9(:,:) = SELF%PTL_T0(:,:)
(  763)     END IF
(  764)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET9TO0
(  765) # 766 "surface_views_prognostic_module.F90"
(  766)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO9(SELF)
(  767)     ! Field update operation for timestepping schemes
(  768)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  769) # 770 "surface_views_prognostic_module.F90"
(  770)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  771)       SELF%PT_T1(:,:) = SELF%PT_T9(:,:)
(  772)     END IF
(  773)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  774)       SELF%PQ_T1(:,:) = SELF%PQ_T9(:,:)
(  775)     END IF
(  776)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  777)       SELF%PTL_T1(:,:) = SELF%PTL_T9(:,:)
(  778)     END IF
(  779)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO9
(  780) # 781 "surface_views_prognostic_module.F90"
(  781)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO0(SELF)
(  782)     ! Field update operation for timestepping schemes
(  783)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  784) # 785 "surface_views_prognostic_module.F90"
(  785)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  786)       SELF%PT_T1(:,:) = SELF%PT_T0(:,:)
(  787)     END IF
(  788)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  789)       SELF%PQ_T1(:,:) = SELF%PQ_T0(:,:)
(  790)     END IF
(  791)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  792)       SELF%PTL_T1(:,:) = SELF%PTL_T0(:,:)
(  793)     END IF
(  794)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET1TO0
(  795) # 796 "surface_views_prognostic_module.F90"
(  796)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET0TO1(SELF)
(  797)     ! Field update operation for timestepping schemes
(  798)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  799) # 800 "surface_views_prognostic_module.F90"
(  800)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  801)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  802)     END IF
(  803)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  804)       SELF%PQ_T0(:,:) = SELF%PQ_T1(:,:)
(  805)     END IF
(  806)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  807)       SELF%PTL_T0(:,:) = SELF%PTL_T1(:,:)
(  808)     END IF
(  809)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_SET0TO1
(  810) # 811 "surface_views_prognostic_module.F90"
(  811)   SUBROUTINE SURFACE_VIEW_GROUP_SOILB_PHTFILT(SELF, YDDYN)
(  812)     CLASS(SURFACE_VIEW_GROUP_SOILB) :: SELF
(  813)     TYPE(TDYN), INTENT(IN) :: YDDYN
(  814)     REAL(KIND=JPRB) :: REPSP1, ZZPHY






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 44

(  815) # 816 "surface_views_prognostic_module.F90"
(  816)     REPSP1 = YDDYN%REPSP1
(  817)     ZZPHY = 1.0_JPRB - REPSP1
(  818) # 819 "surface_views_prognostic_module.F90"
(  819)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  820)       SELF%PT_T9(:,:) = REPSP1*SELF%PT_T1(:,:) &
(  821)        &                                      + ZZPHY*SELF%PT_T0(:,:)
(  822)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  823)     END IF
(  824)     IF (SELF%VARIABLE_GROUP%VQ%LACTIVE) THEN
(  825)       SELF%PQ_T9(:,:) = REPSP1*SELF%PQ_T1(:,:) &
(  826)        &                                      + ZZPHY*SELF%PQ_T0(:,:)
(  827)       SELF%PQ_T0(:,:) = SELF%PQ_T1(:,:)
(  828)     END IF
(  829)     IF (SELF%VARIABLE_GROUP%VTL%LACTIVE) THEN
(  830)       SELF%PTL_T9(:,:) = REPSP1*SELF%PTL_T1(:,:) &
(  831)        &                                      + ZZPHY*SELF%PTL_T0(:,:)
(  832)       SELF%PTL_T0(:,:) = SELF%PTL_T1(:,:)
(  833)     END IF
(  834)   END SUBROUTINE SURFACE_VIEW_GROUP_SOILB_PHTFILT
(  835) # 836 "surface_views_prognostic_module.F90"
(  836)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET9TO0(SELF)
(  837)     ! Field update operation for timestepping schemes
(  838)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  839) # 840 "surface_views_prognostic_module.F90"
(  840)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  841)       SELF%PF_T9(:,:) = SELF%PF_T0(:,:)
(  842)     END IF
(  843)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  844)       SELF%PA_T9(:,:) = SELF%PA_T0(:,:)
(  845)     END IF
(  846)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  847)       SELF%PR_T9(:,:) = SELF%PR_T0(:,:)
(  848)     END IF
(  849)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  850)       SELF%PT_T9(:,:) = SELF%PT_T0(:,:)
(  851)     END IF
(  852)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  853)       SELF%PW_T9(:,:) = SELF%PW_T0(:,:)
(  854)     END IF
(  855)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET9TO0
(  856) # 857 "surface_views_prognostic_module.F90"
(  857)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO9(SELF)
(  858)     ! Field update operation for timestepping schemes
(  859)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  860) # 861 "surface_views_prognostic_module.F90"
(  861)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  862)       SELF%PF_T1(:,:) = SELF%PF_T9(:,:)
(  863)     END IF
(  864)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  865)       SELF%PA_T1(:,:) = SELF%PA_T9(:,:)
(  866)     END IF
(  867)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  868)       SELF%PR_T1(:,:) = SELF%PR_T9(:,:)
(  869)     END IF
(  870)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  871)       SELF%PT_T1(:,:) = SELF%PT_T9(:,:)
(  872)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 45

(  873)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  874)       SELF%PW_T1(:,:) = SELF%PW_T9(:,:)
(  875)     END IF
(  876)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO9
(  877) # 878 "surface_views_prognostic_module.F90"
(  878)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO0(SELF)
(  879)     ! Field update operation for timestepping schemes
(  880)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  881) # 882 "surface_views_prognostic_module.F90"
(  882)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  883)       SELF%PF_T1(:,:) = SELF%PF_T0(:,:)
(  884)     END IF
(  885)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  886)       SELF%PA_T1(:,:) = SELF%PA_T0(:,:)
(  887)     END IF
(  888)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  889)       SELF%PR_T1(:,:) = SELF%PR_T0(:,:)
(  890)     END IF
(  891)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  892)       SELF%PT_T1(:,:) = SELF%PT_T0(:,:)
(  893)     END IF
(  894)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  895)       SELF%PW_T1(:,:) = SELF%PW_T0(:,:)
(  896)     END IF
(  897)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET1TO0
(  898) # 899 "surface_views_prognostic_module.F90"
(  899)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET0TO1(SELF)
(  900)     ! Field update operation for timestepping schemes
(  901)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  902) # 903 "surface_views_prognostic_module.F90"
(  903)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  904)       SELF%PF_T0(:,:) = SELF%PF_T1(:,:)
(  905)     END IF
(  906)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  907)       SELF%PA_T0(:,:) = SELF%PA_T1(:,:)
(  908)     END IF
(  909)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  910)       SELF%PR_T0(:,:) = SELF%PR_T1(:,:)
(  911)     END IF
(  912)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  913)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  914)     END IF
(  915)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  916)       SELF%PW_T0(:,:) = SELF%PW_T1(:,:)
(  917)     END IF
(  918)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_SET0TO1
(  919) # 920 "surface_views_prognostic_module.F90"
(  920)   SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_PHTFILT(SELF, YDDYN)
(  921)     CLASS(SURFACE_VIEW_GROUP_SNOWG) :: SELF
(  922)     TYPE(TDYN), INTENT(IN) :: YDDYN
(  923)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
(  924) # 925 "surface_views_prognostic_module.F90"
(  925)     REPSP1 = YDDYN%REPSP1
(  926)     ZZPHY = 1.0_JPRB - REPSP1
(  927) # 928 "surface_views_prognostic_module.F90"
(  928)     IF (SELF%VARIABLE_GROUP%VF%LACTIVE) THEN
(  929)       SELF%PF_T9(:,:) = REPSP1*SELF%PF_T1(:,:) &
(  930)        &                                      + ZZPHY*SELF%PF_T0(:,:)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 46

(  931)       SELF%PF_T0(:,:) = SELF%PF_T1(:,:)
(  932)     END IF
(  933)     IF (SELF%VARIABLE_GROUP%VA%LACTIVE) THEN
(  934)       SELF%PA_T9(:,:) = REPSP1*SELF%PA_T1(:,:) &
(  935)        &                                      + ZZPHY*SELF%PA_T0(:,:)
(  936)       SELF%PA_T0(:,:) = SELF%PA_T1(:,:)
(  937)     END IF
(  938)     IF (SELF%VARIABLE_GROUP%VR%LACTIVE) THEN
(  939)       SELF%PR_T9(:,:) = REPSP1*SELF%PR_T1(:,:) &
(  940)        &                                      + ZZPHY*SELF%PR_T0(:,:)
(  941)       SELF%PR_T0(:,:) = SELF%PR_T1(:,:)
(  942)     END IF
(  943)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
(  944)       SELF%PT_T9(:,:) = REPSP1*SELF%PT_T1(:,:) &
(  945)        &                                      + ZZPHY*SELF%PT_T0(:,:)
(  946)       SELF%PT_T0(:,:) = SELF%PT_T1(:,:)
(  947)     END IF
(  948)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
(  949)       SELF%PW_T9(:,:) = REPSP1*SELF%PW_T1(:,:) &
(  950)        &                                      + ZZPHY*SELF%PW_T0(:,:)
(  951)       SELF%PW_T0(:,:) = SELF%PW_T1(:,:)
(  952)     END IF
(  953)   END SUBROUTINE SURFACE_VIEW_GROUP_SNOWG_PHTFILT
(  954) # 955 "surface_views_prognostic_module.F90"
(  955)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET9TO0(SELF)
(  956)     ! Field update operation for timestepping schemes
(  957)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  958) # 959 "surface_views_prognostic_module.F90"
(  959)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
(  960)       SELF%PLICT_T9(:) = SELF%PLICT_T0(:)
(  961)     END IF
(  962)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
(  963)       SELF%PLMLT_T9(:) = SELF%PLMLT_T0(:)
(  964)     END IF
(  965)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
(  966)       SELF%PLTLT_T9(:) = SELF%PLTLT_T0(:)
(  967)     END IF
(  968)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
(  969)       SELF%PLBLT_T9(:) = SELF%PLBLT_T0(:)
(  970)     END IF
(  971)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
(  972)       SELF%PLSHF_T9(:) = SELF%PLSHF_T0(:)
(  973)     END IF
(  974)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
(  975)       SELF%PLICD_T9(:) = SELF%PLICD_T0(:)
(  976)     END IF
(  977)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
(  978)       SELF%PLMLD_T9(:) = SELF%PLMLD_T0(:)
(  979)     END IF
(  980)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET9TO0
(  981) # 982 "surface_views_prognostic_module.F90"
(  982)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO9(SELF)
(  983)     ! Field update operation for timestepping schemes
(  984)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
(  985) # 986 "surface_views_prognostic_module.F90"
(  986)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
(  987)       SELF%PLICT_T1(:) = SELF%PLICT_T9(:)
(  988)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 47

(  989)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
(  990)       SELF%PLMLT_T1(:) = SELF%PLMLT_T9(:)
(  991)     END IF
(  992)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
(  993)       SELF%PLTLT_T1(:) = SELF%PLTLT_T9(:)
(  994)     END IF
(  995)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
(  996)       SELF%PLBLT_T1(:) = SELF%PLBLT_T9(:)
(  997)     END IF
(  998)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
(  999)       SELF%PLSHF_T1(:) = SELF%PLSHF_T9(:)
( 1000)     END IF
( 1001)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1002)       SELF%PLICD_T1(:) = SELF%PLICD_T9(:)
( 1003)     END IF
( 1004)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1005)       SELF%PLMLD_T1(:) = SELF%PLMLD_T9(:)
( 1006)     END IF
( 1007)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO9
( 1008) # 1009 "surface_views_prognostic_module.F90"
( 1009)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO0(SELF)
( 1010)     ! Field update operation for timestepping schemes
( 1011)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
( 1012) # 1013 "surface_views_prognostic_module.F90"
( 1013)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
( 1014)       SELF%PLICT_T1(:) = SELF%PLICT_T0(:)
( 1015)     END IF
( 1016)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
( 1017)       SELF%PLMLT_T1(:) = SELF%PLMLT_T0(:)
( 1018)     END IF
( 1019)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
( 1020)       SELF%PLTLT_T1(:) = SELF%PLTLT_T0(:)
( 1021)     END IF
( 1022)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
( 1023)       SELF%PLBLT_T1(:) = SELF%PLBLT_T0(:)
( 1024)     END IF
( 1025)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
( 1026)       SELF%PLSHF_T1(:) = SELF%PLSHF_T0(:)
( 1027)     END IF
( 1028)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1029)       SELF%PLICD_T1(:) = SELF%PLICD_T0(:)
( 1030)     END IF
( 1031)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1032)       SELF%PLMLD_T1(:) = SELF%PLMLD_T0(:)
( 1033)     END IF
( 1034)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET1TO0
( 1035) # 1036 "surface_views_prognostic_module.F90"
( 1036)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET0TO1(SELF)
( 1037)     ! Field update operation for timestepping schemes
( 1038)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
( 1039) # 1040 "surface_views_prognostic_module.F90"
( 1040)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
( 1041)       SELF%PLICT_T0(:) = SELF%PLICT_T1(:)
( 1042)     END IF
( 1043)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
( 1044)       SELF%PLMLT_T0(:) = SELF%PLMLT_T1(:)
( 1045)     END IF
( 1046)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 48

( 1047)       SELF%PLTLT_T0(:) = SELF%PLTLT_T1(:)
( 1048)     END IF
( 1049)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
( 1050)       SELF%PLBLT_T0(:) = SELF%PLBLT_T1(:)
( 1051)     END IF
( 1052)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
( 1053)       SELF%PLSHF_T0(:) = SELF%PLSHF_T1(:)
( 1054)     END IF
( 1055)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1056)       SELF%PLICD_T0(:) = SELF%PLICD_T1(:)
( 1057)     END IF
( 1058)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1059)       SELF%PLMLD_T0(:) = SELF%PLMLD_T1(:)
( 1060)     END IF
( 1061)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_SET0TO1
( 1062) # 1063 "surface_views_prognostic_module.F90"
( 1063)   SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_PHTFILT(SELF, YDDYN)
( 1064)     CLASS(SURFACE_VIEW_GROUP_LAKEB) :: SELF
( 1065)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1066)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1067) # 1068 "surface_views_prognostic_module.F90"
( 1068)     REPSP1 = YDDYN%REPSP1
( 1069)     ZZPHY = 1.0_JPRB - REPSP1
( 1070) # 1071 "surface_views_prognostic_module.F90"
( 1071)     IF (SELF%VARIABLE_GROUP%VLICT%LACTIVE) THEN
( 1072)       SELF%PLICT_T9(:) = REPSP1*SELF%PLICT_T1(:) &
( 1073)        &                                      + ZZPHY*SELF%PLICT_T0(:)
( 1074)       SELF%PLICT_T0(:) = SELF%PLICT_T1(:)
( 1075)     END IF
( 1076)     IF (SELF%VARIABLE_GROUP%VLMLT%LACTIVE) THEN
( 1077)       SELF%PLMLT_T9(:) = REPSP1*SELF%PLMLT_T1(:) &
( 1078)        &                                      + ZZPHY*SELF%PLMLT_T0(:)
( 1079)       SELF%PLMLT_T0(:) = SELF%PLMLT_T1(:)
( 1080)     END IF
( 1081)     IF (SELF%VARIABLE_GROUP%VLTLT%LACTIVE) THEN
( 1082)       SELF%PLTLT_T9(:) = REPSP1*SELF%PLTLT_T1(:) &
( 1083)        &                                      + ZZPHY*SELF%PLTLT_T0(:)
( 1084)       SELF%PLTLT_T0(:) = SELF%PLTLT_T1(:)
( 1085)     END IF
( 1086)     IF (SELF%VARIABLE_GROUP%VLBLT%LACTIVE) THEN
( 1087)       SELF%PLBLT_T9(:) = REPSP1*SELF%PLBLT_T1(:) &
( 1088)        &                                      + ZZPHY*SELF%PLBLT_T0(:)
( 1089)       SELF%PLBLT_T0(:) = SELF%PLBLT_T1(:)
( 1090)     END IF
( 1091)     IF (SELF%VARIABLE_GROUP%VLSHF%LACTIVE) THEN
( 1092)       SELF%PLSHF_T9(:) = REPSP1*SELF%PLSHF_T1(:) &
( 1093)        &                                      + ZZPHY*SELF%PLSHF_T0(:)
( 1094)       SELF%PLSHF_T0(:) = SELF%PLSHF_T1(:)
( 1095)     END IF
( 1096)     IF (SELF%VARIABLE_GROUP%VLICD%LACTIVE) THEN
( 1097)       SELF%PLICD_T9(:) = REPSP1*SELF%PLICD_T1(:) &
( 1098)        &                                      + ZZPHY*SELF%PLICD_T0(:)
( 1099)       SELF%PLICD_T0(:) = SELF%PLICD_T1(:)
( 1100)     END IF
( 1101)     IF (SELF%VARIABLE_GROUP%VLMLD%LACTIVE) THEN
( 1102)       SELF%PLMLD_T9(:) = REPSP1*SELF%PLMLD_T1(:) &
( 1103)        &                                      + ZZPHY*SELF%PLMLD_T0(:)
( 1104)       SELF%PLMLD_T0(:) = SELF%PLMLD_T1(:)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 49

( 1105)     END IF
( 1106)   END SUBROUTINE SURFACE_VIEW_GROUP_LAKEB_PHTFILT
( 1107) # 1108 "surface_views_prognostic_module.F90"
( 1108)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET9TO0(SELF)
( 1109)     ! Field update operation for timestepping schemes
( 1110)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1111) # 1112 "surface_views_prognostic_module.F90"
( 1112)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1113)       SELF%PT_T9(:) = SELF%PT_T0(:)
( 1114)     END IF
( 1115)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1116)       SELF%PW_T9(:) = SELF%PW_T0(:)
( 1117)     END IF
( 1118)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1119)       SELF%PFC_T9(:) = SELF%PFC_T0(:)
( 1120)     END IF
( 1121)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1122)       SELF%PIC_T9(:) = SELF%PIC_T0(:)
( 1123)     END IF
( 1124)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1125)       SELF%PFP1_T9(:) = SELF%PFP1_T0(:)
( 1126)     END IF
( 1127)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET9TO0
( 1128) # 1129 "surface_views_prognostic_module.F90"
( 1129)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO9(SELF)
( 1130)     ! Field update operation for timestepping schemes
( 1131)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1132) # 1133 "surface_views_prognostic_module.F90"
( 1133)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1134)       SELF%PT_T1(:) = SELF%PT_T9(:)
( 1135)     END IF
( 1136)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1137)       SELF%PW_T1(:) = SELF%PW_T9(:)
( 1138)     END IF
( 1139)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1140)       SELF%PFC_T1(:) = SELF%PFC_T9(:)
( 1141)     END IF
( 1142)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1143)       SELF%PIC_T1(:) = SELF%PIC_T9(:)
( 1144)     END IF
( 1145)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1146)       SELF%PFP1_T1(:) = SELF%PFP1_T9(:)
( 1147)     END IF
( 1148)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO9
( 1149) # 1150 "surface_views_prognostic_module.F90"
( 1150)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO0(SELF)
( 1151)     ! Field update operation for timestepping schemes
( 1152)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1153) # 1154 "surface_views_prognostic_module.F90"
( 1154)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1155)       SELF%PT_T1(:) = SELF%PT_T0(:)
( 1156)     END IF
( 1157)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1158)       SELF%PW_T1(:) = SELF%PW_T0(:)
( 1159)     END IF
( 1160)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1161)       SELF%PFC_T1(:) = SELF%PFC_T0(:)
( 1162)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 50

( 1163)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1164)       SELF%PIC_T1(:) = SELF%PIC_T0(:)
( 1165)     END IF
( 1166)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1167)       SELF%PFP1_T1(:) = SELF%PFP1_T0(:)
( 1168)     END IF
( 1169)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET1TO0
( 1170) # 1171 "surface_views_prognostic_module.F90"
( 1171)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET0TO1(SELF)
( 1172)     ! Field update operation for timestepping schemes
( 1173)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1174) # 1175 "surface_views_prognostic_module.F90"
( 1175)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1176)       SELF%PT_T0(:) = SELF%PT_T1(:)
( 1177)     END IF
( 1178)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1179)       SELF%PW_T0(:) = SELF%PW_T1(:)
( 1180)     END IF
( 1181)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1182)       SELF%PFC_T0(:) = SELF%PFC_T1(:)
( 1183)     END IF
( 1184)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1185)       SELF%PIC_T0(:) = SELF%PIC_T1(:)
( 1186)     END IF
( 1187)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN
( 1188)       SELF%PFP1_T0(:) = SELF%PFP1_T1(:)
( 1189)     END IF
( 1190)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_SET0TO1
( 1191) # 1192 "surface_views_prognostic_module.F90"
( 1192)   SUBROUTINE SURFACE_VIEW_GROUP_RESVR_PHTFILT(SELF, YDDYN)
( 1193)     CLASS(SURFACE_VIEW_GROUP_RESVR) :: SELF
( 1194)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1195)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1196) # 1197 "surface_views_prognostic_module.F90"
( 1197)     REPSP1 = YDDYN%REPSP1
( 1198)     ZZPHY = 1.0_JPRB - REPSP1
( 1199) # 1200 "surface_views_prognostic_module.F90"
( 1200)     IF (SELF%VARIABLE_GROUP%VT%LACTIVE) THEN
( 1201)       SELF%PT_T9(:) = REPSP1*SELF%PT_T1(:) &
( 1202)        &                                      + ZZPHY*SELF%PT_T0(:)
( 1203)       SELF%PT_T0(:) = SELF%PT_T1(:)
( 1204)     END IF
( 1205)     IF (SELF%VARIABLE_GROUP%VW%LACTIVE) THEN
( 1206)       SELF%PW_T9(:) = REPSP1*SELF%PW_T1(:) &
( 1207)        &                                      + ZZPHY*SELF%PW_T0(:)
( 1208)       SELF%PW_T0(:) = SELF%PW_T1(:)
( 1209)     END IF
( 1210)     IF (SELF%VARIABLE_GROUP%VFC%LACTIVE) THEN
( 1211)       SELF%PFC_T9(:) = REPSP1*SELF%PFC_T1(:) &
( 1212)        &                                      + ZZPHY*SELF%PFC_T0(:)
( 1213)       SELF%PFC_T0(:) = SELF%PFC_T1(:)
( 1214)     END IF
( 1215)     IF (SELF%VARIABLE_GROUP%VIC%LACTIVE) THEN
( 1216)       SELF%PIC_T9(:) = REPSP1*SELF%PIC_T1(:) &
( 1217)        &                                      + ZZPHY*SELF%PIC_T0(:)
( 1218)       SELF%PIC_T0(:) = SELF%PIC_T1(:)
( 1219)     END IF
( 1220)     IF (SELF%VARIABLE_GROUP%VFP1%LACTIVE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 51

( 1221)       SELF%PFP1_T9(:) = REPSP1*SELF%PFP1_T1(:) &
( 1222)        &                                      + ZZPHY*SELF%PFP1_T0(:)
( 1223)       SELF%PFP1_T0(:) = SELF%PFP1_T1(:)
( 1224)     END IF
( 1225)   END SUBROUTINE SURFACE_VIEW_GROUP_RESVR_PHTFILT
( 1226) # 1227 "surface_views_prognostic_module.F90"
( 1227)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET9TO0(SELF)
( 1228)     ! Field update operation for timestepping schemes
( 1229)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1230) # 1231 "surface_views_prognostic_module.F90"
( 1231)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1232)       SELF%PTCLS_T9(:) = SELF%PTCLS_T0(:)
( 1233)     END IF
( 1234)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1235)       SELF%PHUCLS_T9(:) = SELF%PHUCLS_T0(:)
( 1236)     END IF
( 1237)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1238)       SELF%PUCLS_T9(:) = SELF%PUCLS_T0(:)
( 1239)     END IF
( 1240)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1241)       SELF%PVCLS_T9(:) = SELF%PVCLS_T0(:)
( 1242)     END IF
( 1243)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1244)       SELF%PNUCLS_T9(:) = SELF%PNUCLS_T0(:)
( 1245)     END IF
( 1246)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1247)       SELF%PNVCLS_T9(:) = SELF%PNVCLS_T0(:)
( 1248)     END IF
( 1249)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET9TO0
( 1250) # 1251 "surface_views_prognostic_module.F90"
( 1251)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO9(SELF)
( 1252)     ! Field update operation for timestepping schemes
( 1253)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1254) # 1255 "surface_views_prognostic_module.F90"
( 1255)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1256)       SELF%PTCLS_T1(:) = SELF%PTCLS_T9(:)
( 1257)     END IF
( 1258)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1259)       SELF%PHUCLS_T1(:) = SELF%PHUCLS_T9(:)
( 1260)     END IF
( 1261)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1262)       SELF%PUCLS_T1(:) = SELF%PUCLS_T9(:)
( 1263)     END IF
( 1264)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1265)       SELF%PVCLS_T1(:) = SELF%PVCLS_T9(:)
( 1266)     END IF
( 1267)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1268)       SELF%PNUCLS_T1(:) = SELF%PNUCLS_T9(:)
( 1269)     END IF
( 1270)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1271)       SELF%PNVCLS_T1(:) = SELF%PNVCLS_T9(:)
( 1272)     END IF
( 1273)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO9
( 1274) # 1275 "surface_views_prognostic_module.F90"
( 1275)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO0(SELF)
( 1276)     ! Field update operation for timestepping schemes
( 1277)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1278) # 1279 "surface_views_prognostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 52

( 1279)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1280)       SELF%PTCLS_T1(:) = SELF%PTCLS_T0(:)
( 1281)     END IF
( 1282)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1283)       SELF%PHUCLS_T1(:) = SELF%PHUCLS_T0(:)
( 1284)     END IF
( 1285)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1286)       SELF%PUCLS_T1(:) = SELF%PUCLS_T0(:)
( 1287)     END IF
( 1288)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1289)       SELF%PVCLS_T1(:) = SELF%PVCLS_T0(:)
( 1290)     END IF
( 1291)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1292)       SELF%PNUCLS_T1(:) = SELF%PNUCLS_T0(:)
( 1293)     END IF
( 1294)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1295)       SELF%PNVCLS_T1(:) = SELF%PNVCLS_T0(:)
( 1296)     END IF
( 1297)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET1TO0
( 1298) # 1299 "surface_views_prognostic_module.F90"
( 1299)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET0TO1(SELF)
( 1300)     ! Field update operation for timestepping schemes
( 1301)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1302) # 1303 "surface_views_prognostic_module.F90"
( 1303)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1304)       SELF%PTCLS_T0(:) = SELF%PTCLS_T1(:)
( 1305)     END IF
( 1306)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN
( 1307)       SELF%PHUCLS_T0(:) = SELF%PHUCLS_T1(:)
( 1308)     END IF
( 1309)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1310)       SELF%PUCLS_T0(:) = SELF%PUCLS_T1(:)
( 1311)     END IF
( 1312)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1313)       SELF%PVCLS_T0(:) = SELF%PVCLS_T1(:)
( 1314)     END IF
( 1315)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1316)       SELF%PNUCLS_T0(:) = SELF%PNUCLS_T1(:)
( 1317)     END IF
( 1318)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1319)       SELF%PNVCLS_T0(:) = SELF%PNVCLS_T1(:)
( 1320)     END IF
( 1321)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_SET0TO1
( 1322) # 1323 "surface_views_prognostic_module.F90"
( 1323)   SUBROUTINE SURFACE_VIEW_GROUP_CLS_PHTFILT(SELF, YDDYN)
( 1324)     CLASS(SURFACE_VIEW_GROUP_CLS) :: SELF
( 1325)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1326)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1327) # 1328 "surface_views_prognostic_module.F90"
( 1328)     REPSP1 = YDDYN%REPSP1
( 1329)     ZZPHY = 1.0_JPRB - REPSP1
( 1330) # 1331 "surface_views_prognostic_module.F90"
( 1331)     IF (SELF%VARIABLE_GROUP%VTCLS%LACTIVE) THEN
( 1332)       SELF%PTCLS_T9(:) = REPSP1*SELF%PTCLS_T1(:) &
( 1333)        &                                      + ZZPHY*SELF%PTCLS_T0(:)
( 1334)       SELF%PTCLS_T0(:) = SELF%PTCLS_T1(:)
( 1335)     END IF
( 1336)     IF (SELF%VARIABLE_GROUP%VHUCLS%LACTIVE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 53

( 1337)       SELF%PHUCLS_T9(:) = REPSP1*SELF%PHUCLS_T1(:) &
( 1338)        &                                      + ZZPHY*SELF%PHUCLS_T0(:)
( 1339)       SELF%PHUCLS_T0(:) = SELF%PHUCLS_T1(:)
( 1340)     END IF
( 1341)     IF (SELF%VARIABLE_GROUP%VUCLS%LACTIVE) THEN
( 1342)       SELF%PUCLS_T9(:) = REPSP1*SELF%PUCLS_T1(:) &
( 1343)        &                                      + ZZPHY*SELF%PUCLS_T0(:)
( 1344)       SELF%PUCLS_T0(:) = SELF%PUCLS_T1(:)
( 1345)     END IF
( 1346)     IF (SELF%VARIABLE_GROUP%VVCLS%LACTIVE) THEN
( 1347)       SELF%PVCLS_T9(:) = REPSP1*SELF%PVCLS_T1(:) &
( 1348)        &                                      + ZZPHY*SELF%PVCLS_T0(:)
( 1349)       SELF%PVCLS_T0(:) = SELF%PVCLS_T1(:)
( 1350)     END IF
( 1351)     IF (SELF%VARIABLE_GROUP%VNUCLS%LACTIVE) THEN
( 1352)       SELF%PNUCLS_T9(:) = REPSP1*SELF%PNUCLS_T1(:) &
( 1353)        &                                      + ZZPHY*SELF%PNUCLS_T0(:)
( 1354)       SELF%PNUCLS_T0(:) = SELF%PNUCLS_T1(:)
( 1355)     END IF
( 1356)     IF (SELF%VARIABLE_GROUP%VNVCLS%LACTIVE) THEN
( 1357)       SELF%PNVCLS_T9(:) = REPSP1*SELF%PNVCLS_T1(:) &
( 1358)        &                                      + ZZPHY*SELF%PNVCLS_T0(:)
( 1359)       SELF%PNVCLS_T0(:) = SELF%PNVCLS_T1(:)
( 1360)     END IF
( 1361)   END SUBROUTINE SURFACE_VIEW_GROUP_CLS_PHTFILT
( 1362) # 1363 "surface_views_prognostic_module.F90"
( 1363)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET9TO0(SELF)
( 1364)     ! Field update operation for timestepping schemes
( 1365)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1366) # 1367 "surface_views_prognostic_module.F90"
( 1367)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1368)       SELF%PTO_T9(:,:) = SELF%PTO_T0(:,:)
( 1369)     END IF
( 1370)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1371)       SELF%PSO_T9(:,:) = SELF%PSO_T0(:,:)
( 1372)     END IF
( 1373)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1374)       SELF%PUO_T9(:,:) = SELF%PUO_T0(:,:)
( 1375)     END IF
( 1376)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1377)       SELF%PVO_T9(:,:) = SELF%PVO_T0(:,:)
( 1378)     END IF
( 1379)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET9TO0
( 1380) # 1381 "surface_views_prognostic_module.F90"
( 1381)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO9(SELF)
( 1382)     ! Field update operation for timestepping schemes
( 1383)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1384) # 1385 "surface_views_prognostic_module.F90"
( 1385)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1386)       SELF%PTO_T1(:,:) = SELF%PTO_T9(:,:)
( 1387)     END IF
( 1388)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1389)       SELF%PSO_T1(:,:) = SELF%PSO_T9(:,:)
( 1390)     END IF
( 1391)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1392)       SELF%PUO_T1(:,:) = SELF%PUO_T9(:,:)
( 1393)     END IF
( 1394)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 54

( 1395)       SELF%PVO_T1(:,:) = SELF%PVO_T9(:,:)
( 1396)     END IF
( 1397)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO9
( 1398) # 1399 "surface_views_prognostic_module.F90"
( 1399)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO0(SELF)
( 1400)     ! Field update operation for timestepping schemes
( 1401)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1402) # 1403 "surface_views_prognostic_module.F90"
( 1403)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1404)       SELF%PTO_T1(:,:) = SELF%PTO_T0(:,:)
( 1405)     END IF
( 1406)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1407)       SELF%PSO_T1(:,:) = SELF%PSO_T0(:,:)
( 1408)     END IF
( 1409)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1410)       SELF%PUO_T1(:,:) = SELF%PUO_T0(:,:)
( 1411)     END IF
( 1412)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1413)       SELF%PVO_T1(:,:) = SELF%PVO_T0(:,:)
( 1414)     END IF
( 1415)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET1TO0
( 1416) # 1417 "surface_views_prognostic_module.F90"
( 1417)   SUBROUTINE SURFACE_VIEW_GROUP_OML_SET0TO1(SELF)
( 1418)     ! Field update operation for timestepping schemes
( 1419)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1420) # 1421 "surface_views_prognostic_module.F90"
( 1421)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1422)       SELF%PTO_T0(:,:) = SELF%PTO_T1(:,:)
( 1423)     END IF
( 1424)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1425)       SELF%PSO_T0(:,:) = SELF%PSO_T1(:,:)
( 1426)     END IF
( 1427)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1428)       SELF%PUO_T0(:,:) = SELF%PUO_T1(:,:)
( 1429)     END IF
( 1430)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1431)       SELF%PVO_T0(:,:) = SELF%PVO_T1(:,:)
( 1432)     END IF
( 1433)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_SET0TO1
( 1434) # 1435 "surface_views_prognostic_module.F90"
( 1435)   SUBROUTINE SURFACE_VIEW_GROUP_OML_PHTFILT(SELF, YDDYN)
( 1436)     CLASS(SURFACE_VIEW_GROUP_OML) :: SELF
( 1437)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1438)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1439) # 1440 "surface_views_prognostic_module.F90"
( 1440)     REPSP1 = YDDYN%REPSP1
( 1441)     ZZPHY = 1.0_JPRB - REPSP1
( 1442) # 1443 "surface_views_prognostic_module.F90"
( 1443)     IF (SELF%VARIABLE_GROUP%VTO%LACTIVE) THEN
( 1444)       SELF%PTO_T9(:,:) = REPSP1*SELF%PTO_T1(:,:) &
( 1445)        &                                      + ZZPHY*SELF%PTO_T0(:,:)
( 1446)       SELF%PTO_T0(:,:) = SELF%PTO_T1(:,:)
( 1447)     END IF
( 1448)     IF (SELF%VARIABLE_GROUP%VSO%LACTIVE) THEN
( 1449)       SELF%PSO_T9(:,:) = REPSP1*SELF%PSO_T1(:,:) &
( 1450)        &                                      + ZZPHY*SELF%PSO_T0(:,:)
( 1451)       SELF%PSO_T0(:,:) = SELF%PSO_T1(:,:)
( 1452)     END IF






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 55

( 1453)     IF (SELF%VARIABLE_GROUP%VUO%LACTIVE) THEN
( 1454)       SELF%PUO_T9(:,:) = REPSP1*SELF%PUO_T1(:,:) &
( 1455)        &                                      + ZZPHY*SELF%PUO_T0(:,:)
( 1456)       SELF%PUO_T0(:,:) = SELF%PUO_T1(:,:)
( 1457)     END IF
( 1458)     IF (SELF%VARIABLE_GROUP%VVO%LACTIVE) THEN
( 1459)       SELF%PVO_T9(:,:) = REPSP1*SELF%PVO_T1(:,:) &
( 1460)        &                                      + ZZPHY*SELF%PVO_T0(:,:)
( 1461)       SELF%PVO_T0(:,:) = SELF%PVO_T1(:,:)
( 1462)     END IF
( 1463)   END SUBROUTINE SURFACE_VIEW_GROUP_OML_PHTFILT
( 1464) # 1465 "surface_views_prognostic_module.F90"
( 1465)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET9TO0(SELF)
( 1466)     ! Field update operation for timestepping schemes
( 1467)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1468) # 1469 "surface_views_prognostic_module.F90"
( 1469)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET9TO0
( 1470) # 1471 "surface_views_prognostic_module.F90"
( 1471)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO9(SELF)
( 1472)     ! Field update operation for timestepping schemes
( 1473)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1474) # 1475 "surface_views_prognostic_module.F90"
( 1475)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO9
( 1476) # 1477 "surface_views_prognostic_module.F90"
( 1477)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO0(SELF)
( 1478)     ! Field update operation for timestepping schemes
( 1479)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1480) # 1481 "surface_views_prognostic_module.F90"
( 1481)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET1TO0
( 1482) # 1483 "surface_views_prognostic_module.F90"
( 1483)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET0TO1(SELF)
( 1484)     ! Field update operation for timestepping schemes
( 1485)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1486) # 1487 "surface_views_prognostic_module.F90"
( 1487)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_SET0TO1
( 1488) # 1489 "surface_views_prognostic_module.F90"
( 1489)   SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_PHTFILT(SELF, YDDYN)
( 1490)     CLASS(SURFACE_VIEW_GROUP_EXTRP) :: SELF
( 1491)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1492)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1493) # 1494 "surface_views_prognostic_module.F90"
( 1494)     REPSP1 = YDDYN%REPSP1
( 1495)     ZZPHY = 1.0_JPRB - REPSP1
( 1496) # 1497 "surface_views_prognostic_module.F90"
( 1497)   END SUBROUTINE SURFACE_VIEW_GROUP_EXTRP_PHTFILT
( 1498) # 1499 "surface_views_prognostic_module.F90"
( 1499)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET9TO0(SELF)
( 1500)     ! Field update operation for timestepping schemes
( 1501)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1502) # 1503 "surface_views_prognostic_module.F90"
( 1503)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET9TO0
( 1504) # 1505 "surface_views_prognostic_module.F90"
( 1505)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO9(SELF)
( 1506)     ! Field update operation for timestepping schemes
( 1507)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1508) # 1509 "surface_views_prognostic_module.F90"
( 1509)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO9
( 1510) # 1511 "surface_views_prognostic_module.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 56

( 1511)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO0(SELF)
( 1512)     ! Field update operation for timestepping schemes
( 1513)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1514) # 1515 "surface_views_prognostic_module.F90"
( 1515)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET1TO0
( 1516) # 1517 "surface_views_prognostic_module.F90"
( 1517)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET0TO1(SELF)
( 1518)     ! Field update operation for timestepping schemes
( 1519)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1520) # 1521 "surface_views_prognostic_module.F90"
( 1521)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_SET0TO1
( 1522) # 1523 "surface_views_prognostic_module.F90"
( 1523)   SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_PHTFILT(SELF, YDDYN)
( 1524)     CLASS(SURFACE_VIEW_GROUP_XTRP2) :: SELF
( 1525)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1526)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1527) # 1528 "surface_views_prognostic_module.F90"
( 1528)     REPSP1 = YDDYN%REPSP1
( 1529)     ZZPHY = 1.0_JPRB - REPSP1
( 1530) # 1531 "surface_views_prognostic_module.F90"
( 1531)   END SUBROUTINE SURFACE_VIEW_GROUP_XTRP2_PHTFILT
( 1532) # 1533 "surface_views_prognostic_module.F90"
( 1533)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET9TO0(SELF)
( 1534)     ! Field update operation for timestepping schemes
( 1535)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1536) # 1537 "surface_views_prognostic_module.F90"
( 1537)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET9TO0
( 1538) # 1539 "surface_views_prognostic_module.F90"
( 1539)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO9(SELF)
( 1540)     ! Field update operation for timestepping schemes
( 1541)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1542) # 1543 "surface_views_prognostic_module.F90"
( 1543)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO9
( 1544) # 1545 "surface_views_prognostic_module.F90"
( 1545)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO0(SELF)
( 1546)     ! Field update operation for timestepping schemes
( 1547)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1548) # 1549 "surface_views_prognostic_module.F90"
( 1549)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET1TO0
( 1550) # 1551 "surface_views_prognostic_module.F90"
( 1551)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET0TO1(SELF)
( 1552)     ! Field update operation for timestepping schemes
( 1553)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1554) # 1555 "surface_views_prognostic_module.F90"
( 1555)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_SET0TO1
( 1556) # 1557 "surface_views_prognostic_module.F90"
( 1557)   SUBROUTINE SURFACE_VIEW_GROUP_CANRI_PHTFILT(SELF, YDDYN)
( 1558)     CLASS(SURFACE_VIEW_GROUP_CANRI) :: SELF
( 1559)     TYPE(TDYN), INTENT(IN) :: YDDYN
( 1560)     REAL(KIND=JPRB) :: REPSP1, ZZPHY
( 1561) # 1562 "surface_views_prognostic_module.F90"
( 1562)     REPSP1 = YDDYN%REPSP1
( 1563)     ZZPHY = 1.0_JPRB - REPSP1
( 1564) # 1565 "surface_views_prognostic_module.F90"
( 1565)   END SUBROUTINE SURFACE_VIEW_GROUP_CANRI_PHTFILT
( 1566) # 1568 "surface_views_prognostic_module.F90"
( 1568) END MODULE SURFACE_VIEWS_PROGNOSTIC_MODULE
