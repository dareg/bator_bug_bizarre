


NVFORTRAN (Version     23.1)          02/24/2023  13:31:27      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:31:27      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_trip_surface_water.F90

(    1) !depfile:trip_surface_water.F90
(    2) MODULE MODI_TRIP_SURFACE_WATER 
(    3) INTERFACE
(    4) SUBROUTINE TRIP_SURFACE_WATER (KLISTING,PTSTEP,KGRCN,KSEQ,KNEXTX,KNEXTY,KSEQMAX, &
(    5)                                OPRINT,OMASK_VEL,PLEN,PRUNOFF,                    &
(    6)                                PVEL,PHS,PSURF_STO,PSURF_STO2,PGOUT,PSIN,PSOUT,   &
(    7)                                PAREA,PQFR,PQRF,                                  &
(    8)                                PSSTO_ALL,PSSTO2_ALL,PSIN_ALL,PDRUN_ALL,          &
(    9)                                PSOUT_ALL,PVEL_ALL,PHS_ALL                        ) 
(   10) INTEGER, INTENT(IN)                  :: KLISTING
(   11) REAL, INTENT(IN)                     :: PTSTEP ! Trip timestep value (10800s)
(   12) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KGRCN  ! Flow direction (1->8)
(   13) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KSEQ   ! River sequence
(   14) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KNEXTX ! returns x and y point
(   15) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KNEXTY ! of destination grid:
(   16) INTEGER, INTENT(IN)                    :: KSEQMAX ! maximum down flow
(   17) LOGICAL, INTENT(IN)                    :: OPRINT   !Printable budget key
(   18) LOGICAL, DIMENSION(:,:), INTENT(IN)    :: OMASK_VEL  ! Variable velocity mask
(   19) REAL,    DIMENSION(:,:), INTENT(IN)    :: PLEN       ! river length       [m] 
(   20) REAL,    DIMENSION(:,:), INTENT(IN)    :: PAREA      ! Grid-cell area    [m²]
(   21) REAL,    DIMENSION(:,:), INTENT(IN)    :: PRUNOFF    ! Surface runoff from ISBA    [kg/s]
(   22) REAL,    DIMENSION(:,:), INTENT(IN)    :: PGOUT      ! ground water outflow        [kg/s]
(   23) REAL,    DIMENSION(:,:), INTENT(IN)    :: PQFR       ! Flood flow to river         [kg/s]
(   24) REAL,    DIMENSION(:,:), INTENT(IN)    :: PQRF       ! River flow to floodplain    [kg/s]
(   25) REAL,    DIMENSION(:,:), INTENT(IN)    :: PHS        ! river channel height [m]
(   26) REAL,    DIMENSION(:,:), INTENT(IN)    :: PVEL       ! River channel velocity  [m/s]
(   27) REAL,    DIMENSION(:,:), INTENT(IN)    :: PSURF_STO  ! river channel storage at t  [kg]
(   28) REAL,    DIMENSION(:,:), INTENT(INOUT) :: PSURF_STO2 ! river channel storage at t+1[kg]
(   29) REAL,    DIMENSION(:,:), INTENT(OUT)   :: PSIN  ! Inflow to the surface river reservoir [kg/s]
(   30) REAL,    DIMENSION(:,:), INTENT(OUT)   :: PSOUT ! Outflow from the surface river reservoir [kg/s]






NVFORTRAN (Version     23.1)          02/24/2023  13:31:27      page 3

(   31) REAL,                    INTENT(OUT)   :: PSSTO_ALL,PSSTO2_ALL,PSIN_ALL,    &
(   32)                                           PDRUN_ALL,PSOUT_ALL,PVEL_ALL,     &
(   33)                                           PHS_ALL 
(   34) END SUBROUTINE TRIP_SURFACE_WATER
(   35) 
(   36) END INTERFACE
(   37) END MODULE MODI_TRIP_SURFACE_WATER 

























































NVFORTRAN (Version     23.1)          02/24/2023  13:31:27      page 4

(    1) # 1 "modi_trip_surface_water.F90"
(    1) !depfile:trip_surface_water.F90
(    2) MODULE MODI_TRIP_SURFACE_WATER 
(    3) INTERFACE
(    4) SUBROUTINE TRIP_SURFACE_WATER (KLISTING,PTSTEP,KGRCN,KSEQ,KNEXTX,KNEXTY,KSEQMAX, &
(    5)                                OPRINT,OMASK_VEL,PLEN,PRUNOFF,                    &
(    6)                                PVEL,PHS,PSURF_STO,PSURF_STO2,PGOUT,PSIN,PSOUT,   &
(    7)                                PAREA,PQFR,PQRF,                                  &
(    8)                                PSSTO_ALL,PSSTO2_ALL,PSIN_ALL,PDRUN_ALL,          &
(    9)                                PSOUT_ALL,PVEL_ALL,PHS_ALL                        ) 
(   10) INTEGER, INTENT(IN)                  :: KLISTING
(   11) REAL, INTENT(IN)                     :: PTSTEP ! Trip timestep value (10800s)
(   12) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KGRCN  ! Flow direction (1->8)
(   13) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KSEQ   ! River sequence
(   14) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KNEXTX ! returns x and y point
(   15) INTEGER, DIMENSION(:,:),INTENT(IN)   :: KNEXTY ! of destination grid:
(   16) INTEGER, INTENT(IN)                    :: KSEQMAX ! maximum down flow
(   17) LOGICAL, INTENT(IN)                    :: OPRINT   !Printable budget key
(   18) LOGICAL, DIMENSION(:,:), INTENT(IN)    :: OMASK_VEL  ! Variable velocity mask
(   19) REAL,    DIMENSION(:,:), INTENT(IN)    :: PLEN       ! river length       [m] 
(   20) REAL,    DIMENSION(:,:), INTENT(IN)    :: PAREA      ! Grid-cell area    [m²]
(   21) REAL,    DIMENSION(:,:), INTENT(IN)    :: PRUNOFF    ! Surface runoff from ISBA    [kg/s]
(   22) REAL,    DIMENSION(:,:), INTENT(IN)    :: PGOUT      ! ground water outflow        [kg/s]
(   23) REAL,    DIMENSION(:,:), INTENT(IN)    :: PQFR       ! Flood flow to river         [kg/s]
(   24) REAL,    DIMENSION(:,:), INTENT(IN)    :: PQRF       ! River flow to floodplain    [kg/s]
(   25) REAL,    DIMENSION(:,:), INTENT(IN)    :: PHS        ! river channel height [m]
(   26) REAL,    DIMENSION(:,:), INTENT(IN)    :: PVEL       ! River channel velocity  [m/s]
(   27) REAL,    DIMENSION(:,:), INTENT(IN)    :: PSURF_STO  ! river channel storage at t  [kg]
(   28) REAL,    DIMENSION(:,:), INTENT(INOUT) :: PSURF_STO2 ! river channel storage at t+1[kg]
(   29) REAL,    DIMENSION(:,:), INTENT(OUT)   :: PSIN  ! Inflow to the surface river reservoir [kg/s]
(   30) REAL,    DIMENSION(:,:), INTENT(OUT)   :: PSOUT ! Outflow from the surface river reservoir [kg/s]
(   31) REAL,                    INTENT(OUT)   :: PSSTO_ALL,PSSTO2_ALL,PSIN_ALL,    &
(   32)                                           PDRUN_ALL,PSOUT_ALL,PVEL_ALL,     &
(   33)                                           PHS_ALL 
(   34) END SUBROUTINE TRIP_SURFACE_WATER
(   35) # 36 "modi_trip_surface_water.F90"
(   36) END INTERFACE
(   37) END MODULE MODI_TRIP_SURFACE_WATER 
