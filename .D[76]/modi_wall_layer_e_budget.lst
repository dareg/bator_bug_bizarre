


NVFORTRAN (Version     23.1)          02/24/2023  13:52:22      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:52:22      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_wall_layer_e_budget.F90

(    1) !depfile:wall_layer_e_budget.F90
(    2) MODULE MODI_WALL_LAYER_E_BUDGET
(    3) INTERFACE
(    4)     SUBROUTINE WALL_LAYER_E_BUDGET(TOP, T, B, PT_WL, PTS_WL_B, PTI_WL_B, PTSTEP, PDN_RD,     &
(    5)                                    PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PABS_SW_WL,  &
(    6)                                    PT_CANYON, PTS_RD, PTSNOW_RD, PTS_GD, PTS_FL,             &
(    7)                                    PLW_WA_TO_WB, PLW_R_TO_W, PLW_G_TO_W, PLW_NR_TO_W,        &
(    8)                                    PLW_WIN_TO_W, PLW_S_TO_W, PFLX_BLD_WL, PDQS_WL,           &
(    9)                                    PABS_LW_WL, PEMIT_LW_WL, PH_WL, PIMB_WL, PRADHT_IN,       &
(   10)                                    PRAD_RF_WL, PRAD_WL_WIN, PRAD_WL_FL, PRAD_WL_MA,          &
(   11)                                    PCONV_WL_BLD, PLOAD_IN_WL ) 
(   12) USE MODD_TEB_OPTION_n, ONLY : TEB_OPTIONS_t
(   13) USE MODD_TEB_n, ONLY : TEB_t
(   14) USE MODD_BEM_n, ONLY : BEM_t
(   15) TYPE(TEB_OPTIONS_t), INTENT(INOUT) :: TOP
(   16) TYPE(TEB_t), INTENT(INOUT) :: T
(   17) TYPE(BEM_t), INTENT(INOUT) :: B
(   18) REAL, DIMENSION(:,:), INTENT(INOUT) :: PT_WL    ! wall layers temperatures
(   19) REAL, DIMENSION(:),   INTENT(IN)  :: PTS_WL_B ! opposite wall surface temperature
(   20) REAL, DIMENSION(:),   INTENT(IN)  :: PTI_WL_B ! opposite wall internal temperature
(   21) REAL,               INTENT(IN)    :: PTSTEP       ! time step
(   22) REAL, DIMENSION(:), INTENT(IN)    :: PDN_RD     ! snow-covered fraction on roads
(   23) REAL, DIMENSION(:), INTENT(IN)    :: PRHOA        ! rho
(   24) REAL, DIMENSION(:), INTENT(IN)    :: PAC_WL     ! aerodynamical conductance [m/s]
(   25) REAL, DIMENSION(:), INTENT(IN)    :: PAC_BLD      ! aerodynamical conductance
(   26) REAL, DIMENSION(:), INTENT(IN)    :: PLW_RAD      ! atmospheric infrared radiation
(   27) REAL, DIMENSION(:), INTENT(IN)    :: PPS          ! pressure at the surface
(   28) REAL, DIMENSION(:), INTENT(IN)    :: PEXNS        ! surface Exner function
(   29) REAL, DIMENSION(:), INTENT(IN)    :: PABS_SW_WL ! absorbed solar radiation
(   30) REAL, DIMENSION(:), INTENT(IN)    :: PT_CANYON    ! air canyon temperature






NVFORTRAN (Version     23.1)          02/24/2023  13:52:22      page 3

(   31) REAL, DIMENSION(:), INTENT(IN)    :: PTS_RD     ! road surface temperature
(   32) REAL, DIMENSION(:), INTENT(IN)    :: PTSNOW_RD  ! road snow temperature
(   33) REAL, DIMENSION(:), INTENT(IN)    :: PTS_GD   ! green area surface temperature
(   34) REAL, DIMENSION(:), INTENT(IN)    :: PTS_FL    ! floor layers temperatures [K]
(   35) REAL, DIMENSION(:), INTENT(IN)    :: PLW_WA_TO_WB ! LW interactions wall  -> opposite wall
(   36) REAL, DIMENSION(:), INTENT(IN)    :: PLW_R_TO_W   ! LW interactions road -> wall ; DEF formulation 
(   37) REAL, DIMENSION(:), INTENT(IN)    :: PLW_G_TO_W   ! LW interactions garden -> wall ; DEF formulation
(   38) REAL, DIMENSION(:), INTENT(IN)    :: PLW_S_TO_W   ! LW interactions sky   -> wall 
(   39) REAL, DIMENSION(:), INTENT(IN)    :: PLW_NR_TO_W  ! LW interactions road(snow) -> wall 
(   40) REAL, DIMENSION(:), INTENT(IN)    :: PLW_WIN_TO_W ! Radiative heat trasfer coeff wall-window 
(   41) REAL, DIMENSION(:), INTENT(OUT)   :: PFLX_BLD_WL! flux from bld to wall
(   42) REAL, DIMENSION(:), INTENT(INOUT) :: PDQS_WL    ! heat storage inside the wall 
(   43) REAL, DIMENSION(:), INTENT(OUT)   :: PABS_LW_WL ! absorbed infrared rad. [W m-2(wall)]
(   44) REAL, DIMENSION(:), INTENT(OUT)   :: PEMIT_LW_WL  ! LW flux emitted by the wall [W m-2(wall)]
(   45) REAL, DIMENSION(:), INTENT(OUT)   :: PH_WL      ! Sensible heat flux from wall to air [W/m2(wall)]
(   46) REAL, DIMENSION(:), INTENT(OUT)   :: PIMB_WL    ! wall residual energy imbalance 
(   47) REAL, DIMENSION(:),   INTENT(IN)  :: PRADHT_IN     ! Indoor radiant heat transfer coefficient
(   48) REAL, DIMENSION(:), INTENT(IN)    :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)]
(   49) REAL, DIMENSION(:), INTENT(OUT)   :: PRAD_WL_WIN  ! rad. fluxes from wall to win  [W m-2(wall)]
(   50) REAL, DIMENSION(:), INTENT(OUT)   :: PRAD_WL_FL! rad. fluxes from wall to floor [W m-2(wall)]
(   51) REAL, DIMENSION(:), INTENT(OUT)   :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)]
(   52) REAL, DIMENSION(:), INTENT(OUT)   :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)]
(   53) REAL, DIMENSION(:), INTENT(IN)    :: PLOAD_IN_WL  ! LOAD from solar heat gain + rad int. gains  W/m2 [Wall]
(   54) END SUBROUTINE WALL_LAYER_E_BUDGET
(   55) 
(   56) END INTERFACE
(   57) END MODULE MODI_WALL_LAYER_E_BUDGET





































NVFORTRAN (Version     23.1)          02/24/2023  13:52:22      page 4

(    1) # 1 "modi_wall_layer_e_budget.F90"
(    1) !depfile:wall_layer_e_budget.F90
(    2) MODULE MODI_WALL_LAYER_E_BUDGET
(    3) INTERFACE
(    4)     SUBROUTINE WALL_LAYER_E_BUDGET(TOP, T, B, PT_WL, PTS_WL_B, PTI_WL_B, PTSTEP, PDN_RD,     &
(    5)                                    PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PABS_SW_WL,  &
(    6)                                    PT_CANYON, PTS_RD, PTSNOW_RD, PTS_GD, PTS_FL,             &
(    7)                                    PLW_WA_TO_WB, PLW_R_TO_W, PLW_G_TO_W, PLW_NR_TO_W,        &
(    8)                                    PLW_WIN_TO_W, PLW_S_TO_W, PFLX_BLD_WL, PDQS_WL,           &
(    9)                                    PABS_LW_WL, PEMIT_LW_WL, PH_WL, PIMB_WL, PRADHT_IN,       &
(   10)                                    PRAD_RF_WL, PRAD_WL_WIN, PRAD_WL_FL, PRAD_WL_MA,          &
(   11)                                    PCONV_WL_BLD, PLOAD_IN_WL ) 
(   12) USE MODD_TEB_OPTION_n, ONLY : TEB_OPTIONS_t
(   13) USE MODD_TEB_n, ONLY : TEB_t
(   14) USE MODD_BEM_n, ONLY : BEM_t
(   15) TYPE(TEB_OPTIONS_t), INTENT(INOUT) :: TOP
(   16) TYPE(TEB_t), INTENT(INOUT) :: T
(   17) TYPE(BEM_t), INTENT(INOUT) :: B
(   18) REAL, DIMENSION(:,:), INTENT(INOUT) :: PT_WL    ! wall layers temperatures
(   19) REAL, DIMENSION(:),   INTENT(IN)  :: PTS_WL_B ! opposite wall surface temperature
(   20) REAL, DIMENSION(:),   INTENT(IN)  :: PTI_WL_B ! opposite wall internal temperature
(   21) REAL,               INTENT(IN)    :: PTSTEP       ! time step
(   22) REAL, DIMENSION(:), INTENT(IN)    :: PDN_RD     ! snow-covered fraction on roads
(   23) REAL, DIMENSION(:), INTENT(IN)    :: PRHOA        ! rho
(   24) REAL, DIMENSION(:), INTENT(IN)    :: PAC_WL     ! aerodynamical conductance [m/s]
(   25) REAL, DIMENSION(:), INTENT(IN)    :: PAC_BLD      ! aerodynamical conductance
(   26) REAL, DIMENSION(:), INTENT(IN)    :: PLW_RAD      ! atmospheric infrared radiation
(   27) REAL, DIMENSION(:), INTENT(IN)    :: PPS          ! pressure at the surface
(   28) REAL, DIMENSION(:), INTENT(IN)    :: PEXNS        ! surface Exner function
(   29) REAL, DIMENSION(:), INTENT(IN)    :: PABS_SW_WL ! absorbed solar radiation
(   30) REAL, DIMENSION(:), INTENT(IN)    :: PT_CANYON    ! air canyon temperature
(   31) REAL, DIMENSION(:), INTENT(IN)    :: PTS_RD     ! road surface temperature
(   32) REAL, DIMENSION(:), INTENT(IN)    :: PTSNOW_RD  ! road snow temperature
(   33) REAL, DIMENSION(:), INTENT(IN)    :: PTS_GD   ! green area surface temperature
(   34) REAL, DIMENSION(:), INTENT(IN)    :: PTS_FL    ! floor layers temperatures [K]
(   35) REAL, DIMENSION(:), INTENT(IN)    :: PLW_WA_TO_WB ! LW interactions wall  -> opposite wall
(   36) REAL, DIMENSION(:), INTENT(IN)    :: PLW_R_TO_W   ! LW interactions road -> wall ; DEF formulation 
(   37) REAL, DIMENSION(:), INTENT(IN)    :: PLW_G_TO_W   ! LW interactions garden -> wall ; DEF formulation
(   38) REAL, DIMENSION(:), INTENT(IN)    :: PLW_S_TO_W   ! LW interactions sky   -> wall 
(   39) REAL, DIMENSION(:), INTENT(IN)    :: PLW_NR_TO_W  ! LW interactions road(snow) -> wall 
(   40) REAL, DIMENSION(:), INTENT(IN)    :: PLW_WIN_TO_W ! Radiative heat trasfer coeff wall-window 
(   41) REAL, DIMENSION(:), INTENT(OUT)   :: PFLX_BLD_WL! flux from bld to wall
(   42) REAL, DIMENSION(:), INTENT(INOUT) :: PDQS_WL    ! heat storage inside the wall 
(   43) REAL, DIMENSION(:), INTENT(OUT)   :: PABS_LW_WL ! absorbed infrared rad. [W m-2(wall)]
(   44) REAL, DIMENSION(:), INTENT(OUT)   :: PEMIT_LW_WL  ! LW flux emitted by the wall [W m-2(wall)]
(   45) REAL, DIMENSION(:), INTENT(OUT)   :: PH_WL      ! Sensible heat flux from wall to air [W/m2(wall)]
(   46) REAL, DIMENSION(:), INTENT(OUT)   :: PIMB_WL    ! wall residual energy imbalance 
(   47) REAL, DIMENSION(:),   INTENT(IN)  :: PRADHT_IN     ! Indoor radiant heat transfer coefficient
(   48) REAL, DIMENSION(:), INTENT(IN)    :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)]
(   49) REAL, DIMENSION(:), INTENT(OUT)   :: PRAD_WL_WIN  ! rad. fluxes from wall to win  [W m-2(wall)]
(   50) REAL, DIMENSION(:), INTENT(OUT)   :: PRAD_WL_FL! rad. fluxes from wall to floor [W m-2(wall)]
(   51) REAL, DIMENSION(:), INTENT(OUT)   :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)]
(   52) REAL, DIMENSION(:), INTENT(OUT)   :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)]
(   53) REAL, DIMENSION(:), INTENT(IN)    :: PLOAD_IN_WL  ! LOAD from solar heat gain + rad int. gains  W/m2 [Wall]
(   54) END SUBROUTINE WALL_LAYER_E_BUDGET
(   55) # 56 "modi_wall_layer_e_budget.F90"
(   56) END INTERFACE
(   57) END MODULE MODI_WALL_LAYER_E_BUDGET



