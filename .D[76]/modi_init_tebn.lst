


NVFORTRAN (Version     23.1)          02/24/2023  13:58:04      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:04      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_init_tebn.F90

(    1) !depfile:init_tebn.F90
(    2) MODULE MODI_INIT_TEB_n 
(    3) INTERFACE
(    4)       SUBROUTINE INIT_TEB_n (DTCO, UG, U, GCP, CHT, DTT, SB, TG, TOP, TPN,    &
(    5)                              TIR, NT, TD, BDD, BOP, DTB, NB, TM_AT, GDM, GRM, &
(    6)                              HPROGRAM, HINIT, KI, KSV, KSW, HSV, PCO2,        &
(    7)                              PRHOA, PZENITH, PAZIM, PSW_BANDS, PDIR_ALB,      &
(    8)                              PSCA_ALB, PEMIS, PTSRAD, PTSURF, KYEAR, KMONTH,  &
(    9)                              KDAY, PTIME, AT, HATMFILE, HATMFILETYPE, HTEST )  
(   10) USE MODD_DATA_COVER_n, ONLY : DATA_COVER_t
(   11) USE MODD_SURF_ATM_GRID_n, ONLY : SURF_ATM_GRID_t
(   12) USE MODD_SURF_ATM_n, ONLY : SURF_ATM_t
(   13) USE MODD_GRID_CONF_PROJ_n, ONLY : GRID_CONF_PROJ_t
(   14) USE MODD_CH_TEB_n, ONLY : CH_TEB_t
(   15) USE MODD_DATA_TEB_n, ONLY : DATA_TEB_t
(   16) USE MODD_CANOPY_n, ONLY: CANOPY_t
(   17) USE MODD_SFX_GRID_n, ONLY : GRID_t
(   18) USE MODD_TEB_OPTION_n, ONLY : TEB_OPTIONS_t
(   19) USE MODD_TEB_PANEL_n, ONLY : TEB_PANEL_t
(   20) USE MODD_TEB_IRRIG_n, ONLY : TEB_IRRIG_t
(   21) USE MODD_TEB_n, ONLY : TEB_NP_t
(   22) USE MODD_SURFEX_n, ONLY : TEB_DIAG_t, TEB_VEG_DIAG_t, TEB_GARDEN_MODEL_t, TEB_GREENROOF_MODEL_t
(   23) USE MODD_BLD_DESCRIPTION_n, ONLY : BLD_DESC_t
(   24) USE MODD_BEM_OPTION_n, ONLY : BEM_OPTIONS_t
(   25) USE MODD_DATA_BEM_n, ONLY : DATA_BEM_t
(   26) USE MODD_BEM_n, ONLY : BEM_NP_t
(   27) USE MODD_SURF_ATM_TURB_n, ONLY : SURF_ATM_TURB_t
(   28) TYPE(DATA_COVER_t), INTENT(INOUT) :: DTCO
(   29) TYPE(SURF_ATM_GRID_t), INTENT(INOUT) :: UG
(   30) TYPE(SURF_ATM_t), INTENT(INOUT) :: U






NVFORTRAN (Version     23.1)          02/24/2023  13:58:04      page 3

(   31) TYPE(GRID_CONF_PROJ_t),INTENT(INOUT) :: GCP
(   32) TYPE(CH_TEB_t), INTENT(INOUT) :: CHT 
(   33) TYPE(DATA_TEB_t), INTENT(INOUT) :: DTT
(   34) TYPE(CANOPY_t), INTENT(INOUT) :: SB
(   35) TYPE(GRID_t), INTENT(INOUT) :: TG
(   36) TYPE(TEB_OPTIONS_t), INTENT(INOUT) :: TOP
(   37) TYPE(TEB_PANEL_t), INTENT(INOUT) :: TPN
(   38) TYPE(TEB_IRRIG_t), INTENT(INOUT) :: TIR
(   39) TYPE(TEB_NP_t), INTENT(INOUT) :: NT
(   40) TYPE(TEB_DIAG_t), INTENT(INOUT) :: TD
(   41) TYPE(BLD_DESC_t), INTENT(INOUT) :: BDD
(   42) TYPE(BEM_OPTIONS_t), INTENT(INOUT) :: BOP 
(   43) TYPE(DATA_BEM_t), INTENT(INOUT) :: DTB
(   44) TYPE(BEM_NP_t), INTENT(INOUT) :: NB
(   45) TYPE(SURF_ATM_TURB_t), INTENT(INOUT) :: TM_AT         ! atmospheric turbulence parameters
(   46) TYPE(TEB_GARDEN_MODEL_t), INTENT(INOUT) :: GDM
(   47) TYPE(TEB_GREENROOF_MODEL_t), INTENT(INOUT) :: GRM
(   48)  CHARACTER(LEN=6),                   INTENT(IN)  :: HPROGRAM    ! program calling surf. schemes
(   49)  CHARACTER(LEN=3),                   INTENT(IN)  :: HINIT       ! choice of fields to initialize
(   50) INTEGER,                            INTENT(IN)  :: KI          ! number of points
(   51) INTEGER,                            INTENT(IN)  :: KSV         ! number of scalars
(   52) INTEGER,                            INTENT(IN)  :: KSW         ! number of short-wave spectral bands
(   53)  CHARACTER(LEN=6), DIMENSION(KSV),   INTENT(IN)  :: HSV         ! name of all scalar variables
(   54) REAL,             DIMENSION(KI),    INTENT(IN)  :: PCO2        ! CO2 concentration (kg/m3)
(   55) REAL,             DIMENSION(KI),    INTENT(IN)  :: PRHOA       ! air density
(   56) REAL,             DIMENSION(KI),    INTENT(IN)  :: PZENITH     ! solar zenithal angle
(   57) REAL,             DIMENSION(KI),    INTENT(IN)  :: PAZIM       ! solar azimuthal angle (rad from N, clock)
(   58) REAL,             DIMENSION(KSW),   INTENT(IN)  :: PSW_BANDS   ! middle wavelength of each band
(   59) REAL,             DIMENSION(KI,KSW),INTENT(OUT) :: PDIR_ALB    ! direct albedo for each band
(   60) REAL,             DIMENSION(KI,KSW),INTENT(OUT) :: PSCA_ALB    ! diffuse albedo for each band
(   61) REAL,             DIMENSION(KI),    INTENT(OUT) :: PEMIS       ! emissivity
(   62) REAL,             DIMENSION(KI),    INTENT(OUT) :: PTSRAD      ! radiative temperature
(   63) REAL,             DIMENSION(KI),    INTENT(OUT) :: PTSURF      ! surface effective temperature         (K)
(   64) INTEGER,                            INTENT(IN)  :: KYEAR       ! current year (UTC)
(   65) INTEGER,                            INTENT(IN)  :: KMONTH      ! current month (UTC)
(   66) INTEGER,                            INTENT(IN)  :: KDAY        ! current day (UTC)
(   67) REAL,                               INTENT(IN)  :: PTIME       ! current time since
(   68) TYPE(SURF_ATM_TURB_t), INTENT(IN) :: AT         ! atmospheric turbulence parameters
(   69)  CHARACTER(LEN=28),                  INTENT(IN)  :: HATMFILE    ! atmospheric file name
(   70)  CHARACTER(LEN=6),                   INTENT(IN)  :: HATMFILETYPE! atmospheric file type
(   71)  CHARACTER(LEN=2),                   INTENT(IN)  :: HTEST       ! must be equal to 'OK'
(   72) END SUBROUTINE INIT_TEB_n
(   73) 
(   74) END INTERFACE
(   75) END MODULE MODI_INIT_TEB_n 



















NVFORTRAN (Version     23.1)          02/24/2023  13:58:04      page 4

(    1) # 1 "modi_init_tebn.F90"
(    1) !depfile:init_tebn.F90
(    2) MODULE MODI_INIT_TEB_n 
(    3) INTERFACE
(    4)       SUBROUTINE INIT_TEB_n (DTCO, UG, U, GCP, CHT, DTT, SB, TG, TOP, TPN,    &
(    5)                              TIR, NT, TD, BDD, BOP, DTB, NB, TM_AT, GDM, GRM, &
(    6)                              HPROGRAM, HINIT, KI, KSV, KSW, HSV, PCO2,        &
(    7)                              PRHOA, PZENITH, PAZIM, PSW_BANDS, PDIR_ALB,      &
(    8)                              PSCA_ALB, PEMIS, PTSRAD, PTSURF, KYEAR, KMONTH,  &
(    9)                              KDAY, PTIME, AT, HATMFILE, HATMFILETYPE, HTEST )  
(   10) USE MODD_DATA_COVER_n, ONLY : DATA_COVER_t
(   11) USE MODD_SURF_ATM_GRID_n, ONLY : SURF_ATM_GRID_t
(   12) USE MODD_SURF_ATM_n, ONLY : SURF_ATM_t
(   13) USE MODD_GRID_CONF_PROJ_n, ONLY : GRID_CONF_PROJ_t
(   14) USE MODD_CH_TEB_n, ONLY : CH_TEB_t
(   15) USE MODD_DATA_TEB_n, ONLY : DATA_TEB_t
(   16) USE MODD_CANOPY_n, ONLY: CANOPY_t
(   17) USE MODD_SFX_GRID_n, ONLY : GRID_t
(   18) USE MODD_TEB_OPTION_n, ONLY : TEB_OPTIONS_t
(   19) USE MODD_TEB_PANEL_n, ONLY : TEB_PANEL_t
(   20) USE MODD_TEB_IRRIG_n, ONLY : TEB_IRRIG_t
(   21) USE MODD_TEB_n, ONLY : TEB_NP_t
(   22) USE MODD_SURFEX_n, ONLY : TEB_DIAG_t, TEB_VEG_DIAG_t, TEB_GARDEN_MODEL_t, TEB_GREENROOF_MODEL_t
(   23) USE MODD_BLD_DESCRIPTION_n, ONLY : BLD_DESC_t
(   24) USE MODD_BEM_OPTION_n, ONLY : BEM_OPTIONS_t
(   25) USE MODD_DATA_BEM_n, ONLY : DATA_BEM_t
(   26) USE MODD_BEM_n, ONLY : BEM_NP_t
(   27) USE MODD_SURF_ATM_TURB_n, ONLY : SURF_ATM_TURB_t
(   28) TYPE(DATA_COVER_t), INTENT(INOUT) :: DTCO
(   29) TYPE(SURF_ATM_GRID_t), INTENT(INOUT) :: UG
(   30) TYPE(SURF_ATM_t), INTENT(INOUT) :: U
(   31) TYPE(GRID_CONF_PROJ_t),INTENT(INOUT) :: GCP
(   32) TYPE(CH_TEB_t), INTENT(INOUT) :: CHT 
(   33) TYPE(DATA_TEB_t), INTENT(INOUT) :: DTT
(   34) TYPE(CANOPY_t), INTENT(INOUT) :: SB
(   35) TYPE(GRID_t), INTENT(INOUT) :: TG
(   36) TYPE(TEB_OPTIONS_t), INTENT(INOUT) :: TOP
(   37) TYPE(TEB_PANEL_t), INTENT(INOUT) :: TPN
(   38) TYPE(TEB_IRRIG_t), INTENT(INOUT) :: TIR
(   39) TYPE(TEB_NP_t), INTENT(INOUT) :: NT
(   40) TYPE(TEB_DIAG_t), INTENT(INOUT) :: TD
(   41) TYPE(BLD_DESC_t), INTENT(INOUT) :: BDD
(   42) TYPE(BEM_OPTIONS_t), INTENT(INOUT) :: BOP 
(   43) TYPE(DATA_BEM_t), INTENT(INOUT) :: DTB
(   44) TYPE(BEM_NP_t), INTENT(INOUT) :: NB
(   45) TYPE(SURF_ATM_TURB_t), INTENT(INOUT) :: TM_AT         ! atmospheric turbulence parameters
(   46) TYPE(TEB_GARDEN_MODEL_t), INTENT(INOUT) :: GDM
(   47) TYPE(TEB_GREENROOF_MODEL_t), INTENT(INOUT) :: GRM
(   48)  CHARACTER(LEN=6),                   INTENT(IN)  :: HPROGRAM    ! program calling surf. schemes
(   49)  CHARACTER(LEN=3),                   INTENT(IN)  :: HINIT       ! choice of fields to initialize
(   50) INTEGER,                            INTENT(IN)  :: KI          ! number of points
(   51) INTEGER,                            INTENT(IN)  :: KSV         ! number of scalars
(   52) INTEGER,                            INTENT(IN)  :: KSW         ! number of short-wave spectral bands
(   53)  CHARACTER(LEN=6), DIMENSION(KSV),   INTENT(IN)  :: HSV         ! name of all scalar variables
(   54) REAL,             DIMENSION(KI),    INTENT(IN)  :: PCO2        ! CO2 concentration (kg/m3)
(   55) REAL,             DIMENSION(KI),    INTENT(IN)  :: PRHOA       ! air density
(   56) REAL,             DIMENSION(KI),    INTENT(IN)  :: PZENITH     ! solar zenithal angle
(   57) REAL,             DIMENSION(KI),    INTENT(IN)  :: PAZIM       ! solar azimuthal angle (rad from N, clock)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:04      page 5

(   58) REAL,             DIMENSION(KSW),   INTENT(IN)  :: PSW_BANDS   ! middle wavelength of each band
(   59) REAL,             DIMENSION(KI,KSW),INTENT(OUT) :: PDIR_ALB    ! direct albedo for each band
(   60) REAL,             DIMENSION(KI,KSW),INTENT(OUT) :: PSCA_ALB    ! diffuse albedo for each band
(   61) REAL,             DIMENSION(KI),    INTENT(OUT) :: PEMIS       ! emissivity
(   62) REAL,             DIMENSION(KI),    INTENT(OUT) :: PTSRAD      ! radiative temperature
(   63) REAL,             DIMENSION(KI),    INTENT(OUT) :: PTSURF      ! surface effective temperature         (K)
(   64) INTEGER,                            INTENT(IN)  :: KYEAR       ! current year (UTC)
(   65) INTEGER,                            INTENT(IN)  :: KMONTH      ! current month (UTC)
(   66) INTEGER,                            INTENT(IN)  :: KDAY        ! current day (UTC)
(   67) REAL,                               INTENT(IN)  :: PTIME       ! current time since
(   68) TYPE(SURF_ATM_TURB_t), INTENT(IN) :: AT         ! atmospheric turbulence parameters
(   69)  CHARACTER(LEN=28),                  INTENT(IN)  :: HATMFILE    ! atmospheric file name
(   70)  CHARACTER(LEN=6),                   INTENT(IN)  :: HATMFILETYPE! atmospheric file type
(   71)  CHARACTER(LEN=2),                   INTENT(IN)  :: HTEST       ! must be equal to 'OK'
(   72) END SUBROUTINE INIT_TEB_n
(   73) # 74 "modi_init_tebn.F90"
(   74) END INTERFACE
(   75) END MODULE MODI_INIT_TEB_n 
