


NVFORTRAN (Version     23.1)          02/24/2023  13:34:35      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:34:35      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_prep_snow_unif.F90

(    1) !depfile:prep_snow_unif.F90
(    2) MODULE MODI_PREP_SNOW_UNIF
(    3) INTERFACE
(    4) SUBROUTINE PREP_SNOW_UNIF(KLUOUT,HSURF,PFIELD, TPTIME,  &
(    5)                           OSNOW_IDEAL,                  &
(    6)                           PUNIF_WSNOW, PUNIF_RSNOW,     &
(    7)                           PUNIF_TSNOW, PUNIF_LWCSNOW,   &
(    8)                           PUNIF_ASNOW,                  &
(    9)                           PUNIF_SG1SNOW, PUNIF_SG2SNOW, &
(   10)                           PUNIF_HISTSNOW,PUNIF_AGESNOW, &
(   11)                           PUNIF_IMPURSNOW,              &
(   12)                           KLAYER                        )  
(   13) USE MODD_TYPE_DATE_SURF, ONLY : DATE_TIME
(   14) INTEGER,            INTENT(IN)  :: KLUOUT    ! output listing logical unit
(   15)  CHARACTER(LEN=10),  INTENT(IN)  :: HSURF     ! type of field
(   16) REAL, POINTER, DIMENSION(:,:,:) :: PFIELD    ! field to interpolate horizontally
(   17) TYPE(DATE_TIME),    INTENT(IN)  :: TPTIME    ! date and time
(   18) LOGICAL,            INTENT(IN)  :: OSNOW_IDEAL
(   19) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_WSNOW ! prescribed snow content (kg/m2)
(   20) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_RSNOW ! prescribed density (kg/m3)
(   21) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_TSNOW ! prescribed temperature (K)
(   22) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_LWCSNOW ! prescribed snow liquid water content (kg/m3)
(   23) REAL,               INTENT(IN)  :: PUNIF_ASNOW ! prescribed albedo (-)
(   24) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_SG1SNOW ! 
(   25) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_SG2SNOW ! 
(   26) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_HISTSNOW ! 
(   27) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_AGESNOW ! 
(   28) REAL, DIMENSION(:,:), INTENT(IN)  :: PUNIF_IMPURSNOW ! Numbre of impurity type
(   29) INTEGER,            INTENT(IN)  :: KLAYER        ! Number of layer of output snow scheme
(   30) END SUBROUTINE PREP_SNOW_UNIF






NVFORTRAN (Version     23.1)          02/24/2023  13:34:35      page 3

(   31) 
(   32) END INTERFACE
(   33) END MODULE MODI_PREP_SNOW_UNIF





























































NVFORTRAN (Version     23.1)          02/24/2023  13:34:35      page 4

(    1) # 1 "modi_prep_snow_unif.F90"
(    1) !depfile:prep_snow_unif.F90
(    2) MODULE MODI_PREP_SNOW_UNIF
(    3) INTERFACE
(    4) SUBROUTINE PREP_SNOW_UNIF(KLUOUT,HSURF,PFIELD, TPTIME,  &
(    5)                           OSNOW_IDEAL,                  &
(    6)                           PUNIF_WSNOW, PUNIF_RSNOW,     &
(    7)                           PUNIF_TSNOW, PUNIF_LWCSNOW,   &
(    8)                           PUNIF_ASNOW,                  &
(    9)                           PUNIF_SG1SNOW, PUNIF_SG2SNOW, &
(   10)                           PUNIF_HISTSNOW,PUNIF_AGESNOW, &
(   11)                           PUNIF_IMPURSNOW,              &
(   12)                           KLAYER                        )  
(   13) USE MODD_TYPE_DATE_SURF, ONLY : DATE_TIME
(   14) INTEGER,            INTENT(IN)  :: KLUOUT    ! output listing logical unit
(   15)  CHARACTER(LEN=10),  INTENT(IN)  :: HSURF     ! type of field
(   16) REAL, POINTER, DIMENSION(:,:,:) :: PFIELD    ! field to interpolate horizontally
(   17) TYPE(DATE_TIME),    INTENT(IN)  :: TPTIME    ! date and time
(   18) LOGICAL,            INTENT(IN)  :: OSNOW_IDEAL
(   19) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_WSNOW ! prescribed snow content (kg/m2)
(   20) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_RSNOW ! prescribed density (kg/m3)
(   21) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_TSNOW ! prescribed temperature (K)
(   22) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_LWCSNOW ! prescribed snow liquid water content (kg/m3)
(   23) REAL,               INTENT(IN)  :: PUNIF_ASNOW ! prescribed albedo (-)
(   24) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_SG1SNOW ! 
(   25) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_SG2SNOW ! 
(   26) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_HISTSNOW ! 
(   27) REAL, DIMENSION(:), INTENT(IN)  :: PUNIF_AGESNOW ! 
(   28) REAL, DIMENSION(:,:), INTENT(IN)  :: PUNIF_IMPURSNOW ! Numbre of impurity type
(   29) INTEGER,            INTENT(IN)  :: KLAYER        ! Number of layer of output snow scheme
(   30) END SUBROUTINE PREP_SNOW_UNIF
(   31) # 32 "modi_prep_snow_unif.F90"
(   32) END INTERFACE
(   33) END MODULE MODI_PREP_SNOW_UNIF
