


NVFORTRAN (Version     23.1)          02/24/2023  13:52:39      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:52:39      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_regular_grid_spawn.F90

(    1) !depfile:regular_grid_spawn.F90
(    2) MODULE MODI_REGULAR_GRID_SPAWN
(    3) INTERFACE
(    4)       SUBROUTINE REGULAR_GRID_SPAWN(U,KLUOUT,                               &
(    5)                                       KL1, KIMAX1,KJMAX1,PX1,PY1,PDX1,PDY1, &
(    6)                                       KXOR, KYOR, KDXRATIO, KDYRATIO,       &
(    7)                                       KXSIZE, KYSIZE,                       &
(    8)                                       KL2, KIMAX_C_ll,KJMAX_C_ll,PX2,PY2,PDX2,PDY2  )
(    9) USE MODD_SURF_ATM_n, ONLY : SURF_ATM_t
(   10) TYPE(SURF_ATM_t), INTENT(INOUT) :: U
(   11) INTEGER,                      INTENT(IN)    :: KLUOUT     ! output listing logical unit
(   12) INTEGER,                      INTENT(IN)    :: KL1        ! total number of points KIMAX1 * KJMAX1
(   13) INTEGER,                      INTENT(IN)    :: KIMAX1     ! number of points in x direction
(   14) INTEGER,                      INTENT(IN)    :: KJMAX1     ! number of points in y direction
(   15) REAL, DIMENSION(KL1),         INTENT(IN)    :: PX1        ! X coordinate of all points
(   16) REAL, DIMENSION(KL1),         INTENT(IN)    :: PY1        ! Y coordinate of all points
(   17) REAL, DIMENSION(KL1),         INTENT(IN)    :: PDX1       ! X mesh size of all points
(   18) REAL, DIMENSION(KL1),         INTENT(IN)    :: PDY1       ! Y mesh size of all points
(   19) INTEGER,                      INTENT(IN)    :: KXOR       ! position of modified bottom left point
(   20) INTEGER,                      INTENT(IN)    :: KYOR       ! according to initial grid
(   21) INTEGER,                      INTENT(IN)    :: KXSIZE     ! number of grid meshes in initial grid to be
(   22) INTEGER,                      INTENT(IN)    :: KYSIZE     ! covered by the modified grid
(   23) INTEGER,                      INTENT(IN)    :: KDXRATIO   ! resolution ratio between modified grid
(   24) INTEGER,                      INTENT(IN)    :: KDYRATIO   ! and initial grid
(   25) INTEGER,                      INTENT(IN)    :: KL2        ! total number of points KIMAX_C_ll * KJMAX_C_ll
(   26) INTEGER,                      INTENT(INOUT)    :: KIMAX_C_ll     ! number of points in x direction (glb on entry, lcl on exi
(   27) INTEGER,                      INTENT(INOUT)    :: KJMAX_C_ll     ! number of points in y direction (glb on entry, lcl on exi
(   28) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PX2        ! X coordinate of all points
(   29) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PY2        ! Y coordinate of all points
(   30) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PDX2       ! X mesh size of all points






NVFORTRAN (Version     23.1)          02/24/2023  13:52:39      page 3

(   31) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PDY2       ! Y mesh size of all points
(   32) END SUBROUTINE REGULAR_GRID_SPAWN
(   33) 
(   34) END INTERFACE
(   35) END MODULE MODI_REGULAR_GRID_SPAWN



























































NVFORTRAN (Version     23.1)          02/24/2023  13:52:39      page 4

(    1) # 1 "modi_regular_grid_spawn.F90"
(    1) !depfile:regular_grid_spawn.F90
(    2) MODULE MODI_REGULAR_GRID_SPAWN
(    3) INTERFACE
(    4)       SUBROUTINE REGULAR_GRID_SPAWN(U,KLUOUT,                               &
(    5)                                       KL1, KIMAX1,KJMAX1,PX1,PY1,PDX1,PDY1, &
(    6)                                       KXOR, KYOR, KDXRATIO, KDYRATIO,       &
(    7)                                       KXSIZE, KYSIZE,                       &
(    8)                                       KL2, KIMAX_C_ll,KJMAX_C_ll,PX2,PY2,PDX2,PDY2  )
(    9) USE MODD_SURF_ATM_n, ONLY : SURF_ATM_t
(   10) TYPE(SURF_ATM_t), INTENT(INOUT) :: U
(   11) INTEGER,                      INTENT(IN)    :: KLUOUT     ! output listing logical unit
(   12) INTEGER,                      INTENT(IN)    :: KL1        ! total number of points KIMAX1 * KJMAX1
(   13) INTEGER,                      INTENT(IN)    :: KIMAX1     ! number of points in x direction
(   14) INTEGER,                      INTENT(IN)    :: KJMAX1     ! number of points in y direction
(   15) REAL, DIMENSION(KL1),         INTENT(IN)    :: PX1        ! X coordinate of all points
(   16) REAL, DIMENSION(KL1),         INTENT(IN)    :: PY1        ! Y coordinate of all points
(   17) REAL, DIMENSION(KL1),         INTENT(IN)    :: PDX1       ! X mesh size of all points
(   18) REAL, DIMENSION(KL1),         INTENT(IN)    :: PDY1       ! Y mesh size of all points
(   19) INTEGER,                      INTENT(IN)    :: KXOR       ! position of modified bottom left point
(   20) INTEGER,                      INTENT(IN)    :: KYOR       ! according to initial grid
(   21) INTEGER,                      INTENT(IN)    :: KXSIZE     ! number of grid meshes in initial grid to be
(   22) INTEGER,                      INTENT(IN)    :: KYSIZE     ! covered by the modified grid
(   23) INTEGER,                      INTENT(IN)    :: KDXRATIO   ! resolution ratio between modified grid
(   24) INTEGER,                      INTENT(IN)    :: KDYRATIO   ! and initial grid
(   25) INTEGER,                      INTENT(IN)    :: KL2        ! total number of points KIMAX_C_ll * KJMAX_C_ll
(   26) INTEGER,                      INTENT(INOUT)    :: KIMAX_C_ll     ! number of points in x direction (glb on entry, lcl on exit)
(   27) INTEGER,                      INTENT(INOUT)    :: KJMAX_C_ll     ! number of points in y direction (glb on entry, lcl on exit)
(   28) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PX2        ! X coordinate of all points
(   29) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PY2        ! Y coordinate of all points
(   30) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PDX2       ! X mesh size of all points
(   31) REAL, DIMENSION(:),ALLOCATABLE,         INTENT(OUT)   :: PDY2       ! Y mesh size of all points
(   32) END SUBROUTINE REGULAR_GRID_SPAWN
(   33) # 34 "modi_regular_grid_spawn.F90"
(   34) END INTERFACE
(   35) END MODULE MODI_REGULAR_GRID_SPAWN
