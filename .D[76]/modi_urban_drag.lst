


NVFORTRAN (Version     23.1)          02/24/2023  13:51:04      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:51:04      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_urban_drag.F90

(    1) !depfile:urban_drag.F90
(    2) MODULE MODI_URBAN_DRAG
(    3) INTERFACE
(    4)     SUBROUTINE URBAN_DRAG(TOP, T, B, HIMPLICIT_WIND, PTSTEP, PT_CANYON, PQ_CANYON,  &
(    5)                           PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN,    &
(    6)                           PTS_ROOF, PTS_ROAD, PTS_WALL, PTS_GARDEN,                 &
(    7)                           PDELT_SNOW_ROOF, PDELT_SNOW_ROAD,  PEXNS, PEXNA, PTA,     &
(    8)                           PQA, PPS, PRHOA,PZREF, PUREF, PVMOD, PWS_ROOF_MAX,        &
(    9)                           PWS_ROAD_MAX, PPEW_A_COEF, PPEW_B_COEF,                   &
(   10)                           PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, AT, PQSAT_ROOF,   &
(   11)                           PQSAT_ROAD, PDELT_ROOF, PDELT_ROAD, PCD, PCDN, PAC_ROOF,  &
(   12)                           PAC_ROOF_WAT, PAC_WALL, PAC_ROAD, PAC_ROAD_WAT, PAC_TOP,  &
(   13)                           PAC_GARDEN, PRI, PUW_ROAD, PUW_ROOF, PDUWDU_ROAD,         &
(   14)                           PDUWDU_ROOF, PUSTAR_TOWN, PAC_WIN ) 
(   15) USE MODD_TEB_OPTION_n, ONLY : TEB_OPTIONS_t
(   16) USE MODD_TEB_n, ONLY : TEB_t
(   17) USE MODD_BEM_n, ONLY : BEM_t
(   18) USE MODD_SURF_ATM_TURB_n, ONLY : SURF_ATM_TURB_t
(   19) TYPE(TEB_OPTIONS_t), INTENT(INOUT) :: TOP
(   20) TYPE(TEB_t), INTENT(INOUT) :: T
(   21) TYPE(BEM_t), INTENT(INOUT) :: B
(   22) TYPE(SURF_ATM_TURB_t), INTENT(IN) :: AT               ! atmospheric turbulence parameters
(   23)  CHARACTER(LEN=*),     INTENT(IN) :: HIMPLICIT_WIND   ! wind implicitation option
(   24) REAL,               INTENT(IN)    :: PTSTEP         ! time-step
(   25) REAL, DIMENSION(:), INTENT(IN)    :: PT_CANYON      ! canyon air temperature
(   26) REAL, DIMENSION(:), INTENT(IN)    :: PQ_CANYON      ! canyon air specific humidity.
(   27) REAL, DIMENSION(:), INTENT(IN)    :: PU_CANYON      ! hor. wind in canyon
(   28) REAL, DIMENSION(:), INTENT(IN)    :: PU_LOWCAN      ! wind near the road
(   29) REAL, DIMENSION(:), INTENT(IN)    :: PT_LOWCAN      ! temp. near the road
(   30) REAL, DIMENSION(:), INTENT(IN)    :: PQ_LOWCAN      ! hum. near the road






NVFORTRAN (Version     23.1)          02/24/2023  13:51:04      page 3

(   31) REAL, DIMENSION(:), INTENT(IN)    :: PZ_LOWCAN      ! height of atm. var. near the road
(   32) REAL, DIMENSION(:), INTENT(IN)    :: PTS_ROOF       ! surface temperature
(   33) REAL, DIMENSION(:), INTENT(IN)    :: PTS_ROAD       ! surface temperature
(   34) REAL, DIMENSION(:), INTENT(IN)    :: PTS_WALL       ! surface temperature
(   35) REAL, DIMENSION(:), INTENT(IN)    :: PTS_GARDEN     ! surface temperature
(   36) REAL, DIMENSION(:), INTENT(IN)    :: PDELT_SNOW_ROOF! fraction of snow on roof
(   37) REAL, DIMENSION(:), INTENT(IN)    :: PDELT_SNOW_ROAD! fraction of snow on road
(   38) REAL, DIMENSION(:), INTENT(IN)    :: PEXNS          ! surface exner function
(   39) REAL, DIMENSION(:), INTENT(IN)    :: PTA            ! temperature at the lowest level
(   40) REAL, DIMENSION(:), INTENT(IN)    :: PQA            ! specific humidity
(   41) REAL, DIMENSION(:), INTENT(IN)    :: PVMOD          ! module of the horizontal wind
(   42) REAL, DIMENSION(:), INTENT(IN)    :: PPS            ! pressure at the surface
(   43) REAL, DIMENSION(:), INTENT(IN)    :: PEXNA          ! exner function
(   44) REAL, DIMENSION(:), INTENT(IN)    :: PRHOA          ! air density
(   45) REAL, DIMENSION(:), INTENT(IN)    :: PZREF          ! reference height of the first
(   46) REAL, DIMENSION(:), INTENT(IN)    :: PUREF          ! reference height of the first
(   47) REAL, DIMENSION(:), INTENT(IN)    :: PWS_ROOF_MAX   ! maximum deepness of roof
(   48) REAL, DIMENSION(:), INTENT(IN)    :: PWS_ROAD_MAX   ! and water reservoirs (kg/m2)
(   49) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_A_COEF    ! implicit coefficients (m2s/kg)
(   50) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_B_COEF    ! for wind coupling     (m/s)
(   51) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling (m2s/kg)
(   52) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road (m/s)
(   53) REAL, DIMENSION(:), INTENT(OUT)   :: PQSAT_ROOF     ! qsat(Ts)
(   54) REAL, DIMENSION(:), INTENT(OUT)   :: PQSAT_ROAD     ! qsat(Ts)
(   55) REAL, DIMENSION(:), INTENT(OUT)   :: PDELT_ROOF     ! water fraction on
(   56) REAL, DIMENSION(:), INTENT(OUT)   :: PDELT_ROAD     ! snow-free surfaces
(   57) REAL, DIMENSION(:), INTENT(OUT)   :: PCD            ! drag coefficient
(   58) REAL, DIMENSION(:), INTENT(OUT)   :: PCDN           ! neutral drag coefficient
(   59) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROOF       ! aerodynamical conductance
(   60) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROOF_WAT   ! aerodynamical conductance (for water)
(   61) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_WALL       ! aerodynamical conductance
(   62) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROAD       ! aerodynamical conductance
(   63) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROAD_WAT   ! aerodynamical conductance
(   64) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_TOP        ! aerodynamical conductance
(   65) REAL, DIMENSION(:), INTENT(IN)    :: PAC_GARDEN     ! aerodynamical conductance
(   66) REAL, DIMENSION(:), INTENT(OUT)   :: PRI            ! Town Richardson number
(   67) REAL, DIMENSION(:), INTENT(OUT)   :: PUW_ROAD       ! Momentum flux for roads
(   68) REAL, DIMENSION(:), INTENT(OUT)   :: PUW_ROOF       ! Momentum flux for roofs
(   69) REAL, DIMENSION(:), INTENT(OUT)   :: PDUWDU_ROAD    ! 
(   70) REAL, DIMENSION(:), INTENT(OUT)   :: PDUWDU_ROOF    ! 
(   71) REAL, DIMENSION(:), INTENT(OUT)   :: PUSTAR_TOWN    ! Fraction velocity for town
(   72) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_WIN        ! aerodynamical conductance for window
(   73) END SUBROUTINE URBAN_DRAG
(   74) 
(   75) END INTERFACE
(   76) END MODULE MODI_URBAN_DRAG


















NVFORTRAN (Version     23.1)          02/24/2023  13:51:04      page 4

(    1) # 1 "modi_urban_drag.F90"
(    1) !depfile:urban_drag.F90
(    2) MODULE MODI_URBAN_DRAG
(    3) INTERFACE
(    4)     SUBROUTINE URBAN_DRAG(TOP, T, B, HIMPLICIT_WIND, PTSTEP, PT_CANYON, PQ_CANYON,  &
(    5)                           PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN,    &
(    6)                           PTS_ROOF, PTS_ROAD, PTS_WALL, PTS_GARDEN,                 &
(    7)                           PDELT_SNOW_ROOF, PDELT_SNOW_ROAD,  PEXNS, PEXNA, PTA,     &
(    8)                           PQA, PPS, PRHOA,PZREF, PUREF, PVMOD, PWS_ROOF_MAX,        &
(    9)                           PWS_ROAD_MAX, PPEW_A_COEF, PPEW_B_COEF,                   &
(   10)                           PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, AT, PQSAT_ROOF,   &
(   11)                           PQSAT_ROAD, PDELT_ROOF, PDELT_ROAD, PCD, PCDN, PAC_ROOF,  &
(   12)                           PAC_ROOF_WAT, PAC_WALL, PAC_ROAD, PAC_ROAD_WAT, PAC_TOP,  &
(   13)                           PAC_GARDEN, PRI, PUW_ROAD, PUW_ROOF, PDUWDU_ROAD,         &
(   14)                           PDUWDU_ROOF, PUSTAR_TOWN, PAC_WIN ) 
(   15) USE MODD_TEB_OPTION_n, ONLY : TEB_OPTIONS_t
(   16) USE MODD_TEB_n, ONLY : TEB_t
(   17) USE MODD_BEM_n, ONLY : BEM_t
(   18) USE MODD_SURF_ATM_TURB_n, ONLY : SURF_ATM_TURB_t
(   19) TYPE(TEB_OPTIONS_t), INTENT(INOUT) :: TOP
(   20) TYPE(TEB_t), INTENT(INOUT) :: T
(   21) TYPE(BEM_t), INTENT(INOUT) :: B
(   22) TYPE(SURF_ATM_TURB_t), INTENT(IN) :: AT               ! atmospheric turbulence parameters
(   23)  CHARACTER(LEN=*),     INTENT(IN) :: HIMPLICIT_WIND   ! wind implicitation option
(   24) REAL,               INTENT(IN)    :: PTSTEP         ! time-step
(   25) REAL, DIMENSION(:), INTENT(IN)    :: PT_CANYON      ! canyon air temperature
(   26) REAL, DIMENSION(:), INTENT(IN)    :: PQ_CANYON      ! canyon air specific humidity.
(   27) REAL, DIMENSION(:), INTENT(IN)    :: PU_CANYON      ! hor. wind in canyon
(   28) REAL, DIMENSION(:), INTENT(IN)    :: PU_LOWCAN      ! wind near the road
(   29) REAL, DIMENSION(:), INTENT(IN)    :: PT_LOWCAN      ! temp. near the road
(   30) REAL, DIMENSION(:), INTENT(IN)    :: PQ_LOWCAN      ! hum. near the road
(   31) REAL, DIMENSION(:), INTENT(IN)    :: PZ_LOWCAN      ! height of atm. var. near the road
(   32) REAL, DIMENSION(:), INTENT(IN)    :: PTS_ROOF       ! surface temperature
(   33) REAL, DIMENSION(:), INTENT(IN)    :: PTS_ROAD       ! surface temperature
(   34) REAL, DIMENSION(:), INTENT(IN)    :: PTS_WALL       ! surface temperature
(   35) REAL, DIMENSION(:), INTENT(IN)    :: PTS_GARDEN     ! surface temperature
(   36) REAL, DIMENSION(:), INTENT(IN)    :: PDELT_SNOW_ROOF! fraction of snow on roof
(   37) REAL, DIMENSION(:), INTENT(IN)    :: PDELT_SNOW_ROAD! fraction of snow on road
(   38) REAL, DIMENSION(:), INTENT(IN)    :: PEXNS          ! surface exner function
(   39) REAL, DIMENSION(:), INTENT(IN)    :: PTA            ! temperature at the lowest level
(   40) REAL, DIMENSION(:), INTENT(IN)    :: PQA            ! specific humidity
(   41) REAL, DIMENSION(:), INTENT(IN)    :: PVMOD          ! module of the horizontal wind
(   42) REAL, DIMENSION(:), INTENT(IN)    :: PPS            ! pressure at the surface
(   43) REAL, DIMENSION(:), INTENT(IN)    :: PEXNA          ! exner function
(   44) REAL, DIMENSION(:), INTENT(IN)    :: PRHOA          ! air density
(   45) REAL, DIMENSION(:), INTENT(IN)    :: PZREF          ! reference height of the first
(   46) REAL, DIMENSION(:), INTENT(IN)    :: PUREF          ! reference height of the first
(   47) REAL, DIMENSION(:), INTENT(IN)    :: PWS_ROOF_MAX   ! maximum deepness of roof
(   48) REAL, DIMENSION(:), INTENT(IN)    :: PWS_ROAD_MAX   ! and water reservoirs (kg/m2)
(   49) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_A_COEF    ! implicit coefficients (m2s/kg)
(   50) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_B_COEF    ! for wind coupling     (m/s)
(   51) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling (m2s/kg)
(   52) REAL, DIMENSION(:), INTENT(IN)    :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road (m/s)
(   53) REAL, DIMENSION(:), INTENT(OUT)   :: PQSAT_ROOF     ! qsat(Ts)
(   54) REAL, DIMENSION(:), INTENT(OUT)   :: PQSAT_ROAD     ! qsat(Ts)
(   55) REAL, DIMENSION(:), INTENT(OUT)   :: PDELT_ROOF     ! water fraction on
(   56) REAL, DIMENSION(:), INTENT(OUT)   :: PDELT_ROAD     ! snow-free surfaces
(   57) REAL, DIMENSION(:), INTENT(OUT)   :: PCD            ! drag coefficient






NVFORTRAN (Version     23.1)          02/24/2023  13:51:04      page 5

(   58) REAL, DIMENSION(:), INTENT(OUT)   :: PCDN           ! neutral drag coefficient
(   59) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROOF       ! aerodynamical conductance
(   60) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROOF_WAT   ! aerodynamical conductance (for water)
(   61) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_WALL       ! aerodynamical conductance
(   62) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROAD       ! aerodynamical conductance
(   63) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_ROAD_WAT   ! aerodynamical conductance
(   64) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_TOP        ! aerodynamical conductance
(   65) REAL, DIMENSION(:), INTENT(IN)    :: PAC_GARDEN     ! aerodynamical conductance
(   66) REAL, DIMENSION(:), INTENT(OUT)   :: PRI            ! Town Richardson number
(   67) REAL, DIMENSION(:), INTENT(OUT)   :: PUW_ROAD       ! Momentum flux for roads
(   68) REAL, DIMENSION(:), INTENT(OUT)   :: PUW_ROOF       ! Momentum flux for roofs
(   69) REAL, DIMENSION(:), INTENT(OUT)   :: PDUWDU_ROAD    ! 
(   70) REAL, DIMENSION(:), INTENT(OUT)   :: PDUWDU_ROOF    ! 
(   71) REAL, DIMENSION(:), INTENT(OUT)   :: PUSTAR_TOWN    ! Fraction velocity for town
(   72) REAL, DIMENSION(:), INTENT(OUT)   :: PAC_WIN        ! aerodynamical conductance for window
(   73) END SUBROUTINE URBAN_DRAG
(   74) # 75 "modi_urban_drag.F90"
(   75) END INTERFACE
(   76) END MODULE MODI_URBAN_DRAG
