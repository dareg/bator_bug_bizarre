


NVFORTRAN (Version     23.1)          02/24/2023  13:32:40      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:32:40      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: modi_snow_cover_1layer.F90

(    1) !depfile:snow_cover_1layer.F90
(    2) MODULE MODI_SNOW_COVER_1LAYER
(    3) INTERFACE
(    4)     SUBROUTINE SNOW_COVER_1LAYER(PTSTEP, PANSMIN, PANSMAX, PTODRY, PRHOSMIN, PRHOSMAX,   &
(    5)                                  PRHOFOLD, OALL_MELT, PDRAIN_TIME, PWCRN, PZ0SN, PZ0HSN, &
(    6)                                  TPSNOW, PTG, PTG_COEFA, PTG_COEFB, PABS_SW, PLW1, PLW2, &
(    7)                                  PTA, PQA, PVMOD, PPS, PRHOA, PSR, PZREF, PUREF, PRNSNOW,&
(    8)                                  PHSNOW, PLESNOW, PGSNOW, PMELT, PDQS_SNOW, PABS_LW  )  
(    9) USE MODD_TYPE_SNOW, ONLY : SURF_SNOW
(   10) REAL,                 INTENT(IN)    :: PTSTEP   ! time step
(   11) REAL,                 INTENT(IN)    :: PANSMIN  ! minimum snow albedo
(   12) REAL,                 INTENT(IN)    :: PANSMAX  ! maximum snow albedo
(   13) REAL,                 INTENT(IN)    :: PTODRY   ! snow albedo decreasing constant
(   14) REAL,                 INTENT(IN)    :: PRHOSMIN ! minimum snow density
(   15) REAL,                 INTENT(IN)    :: PRHOSMAX ! maximum snow density
(   16) REAL,                 INTENT(IN)    :: PRHOFOLD ! snow density increasing constant
(   17) LOGICAL,              INTENT(IN)    :: OALL_MELT! T --> all snow runs off if
(   18) REAL,                 INTENT(IN)    :: PDRAIN_TIME ! drainage folding time (days)
(   19) REAL,                 INTENT(IN)    :: PWCRN    ! critical snow amount necessary
(   20) REAL,                 INTENT(IN)    :: PZ0SN    ! snow roughness length for momentum
(   21) REAL,                 INTENT(IN)    :: PZ0HSN   ! snow roughness length for heat
(   22) TYPE(SURF_SNOW), INTENT(INOUT) :: TPSNOW
(   23) REAL, DIMENSION(:), INTENT(IN)    :: PTG      ! underlying ground temperature
(   24) REAL, DIMENSION(:), INTENT(IN)    :: PTG_COEFA! underlying ground temperature
(   25) REAL, DIMENSION(:), INTENT(IN)    :: PTG_COEFB! implicit terms
(   26) REAL, DIMENSION(:), INTENT(IN)    :: PABS_SW  ! absorbed SW energy (Wm-2)
(   27) REAL, DIMENSION(:), INTENT(IN)    :: PLW1     ! LW coef independant of TSNOW
(   28) REAL, DIMENSION(:), INTENT(IN)    :: PLW2     ! LW coef dependant   of TSNOW
(   29) REAL, DIMENSION(:), INTENT(IN)    :: PTA      ! temperature at the lowest level
(   30) REAL, DIMENSION(:), INTENT(IN)    :: PQA      ! specific humidity






NVFORTRAN (Version     23.1)          02/24/2023  13:32:40      page 3

(   31) REAL, DIMENSION(:), INTENT(IN)    :: PVMOD    ! module of the horizontal wind
(   32) REAL, DIMENSION(:), INTENT(IN)    :: PPS      ! pressure at the surface
(   33) REAL, DIMENSION(:), INTENT(IN)    :: PRHOA    ! air density
(   34) REAL, DIMENSION(:), INTENT(IN)    :: PSR      ! snow rate
(   35) REAL, DIMENSION(:), INTENT(IN)    :: PZREF    ! reference height of the first
(   36) REAL, DIMENSION(:), INTENT(IN)    :: PUREF    ! reference height of the first
(   37) REAL, DIMENSION(:), INTENT(OUT)   :: PRNSNOW  ! net radiation over snow
(   38) REAL, DIMENSION(:), INTENT(OUT)   :: PHSNOW   ! sensible heat flux over snow
(   39) REAL, DIMENSION(:), INTENT(OUT)   :: PLESNOW  ! latent heat flux over snow
(   40) REAL, DIMENSION(:), INTENT(OUT)   :: PGSNOW   ! flux under the snow
(   41) REAL, DIMENSION(:), INTENT(OUT)   :: PMELT    ! snow melting rate (kg/m2/s)
(   42) REAL, DIMENSION(:), INTENT(OUT)   :: PDQS_SNOW! heat storage inside snow
(   43) REAL, DIMENSION(:), INTENT(OUT)   :: PABS_LW ! absorbed LW rad by snow (W/m2)
(   44) END SUBROUTINE SNOW_COVER_1LAYER
(   45) 
(   46) END INTERFACE
(   47) END MODULE MODI_SNOW_COVER_1LAYER















































NVFORTRAN (Version     23.1)          02/24/2023  13:32:40      page 4

(    1) # 1 "modi_snow_cover_1layer.F90"
(    1) !depfile:snow_cover_1layer.F90
(    2) MODULE MODI_SNOW_COVER_1LAYER
(    3) INTERFACE
(    4)     SUBROUTINE SNOW_COVER_1LAYER(PTSTEP, PANSMIN, PANSMAX, PTODRY, PRHOSMIN, PRHOSMAX,   &
(    5)                                  PRHOFOLD, OALL_MELT, PDRAIN_TIME, PWCRN, PZ0SN, PZ0HSN, &
(    6)                                  TPSNOW, PTG, PTG_COEFA, PTG_COEFB, PABS_SW, PLW1, PLW2, &
(    7)                                  PTA, PQA, PVMOD, PPS, PRHOA, PSR, PZREF, PUREF, PRNSNOW,&
(    8)                                  PHSNOW, PLESNOW, PGSNOW, PMELT, PDQS_SNOW, PABS_LW  )  
(    9) USE MODD_TYPE_SNOW, ONLY : SURF_SNOW
(   10) REAL,                 INTENT(IN)    :: PTSTEP   ! time step
(   11) REAL,                 INTENT(IN)    :: PANSMIN  ! minimum snow albedo
(   12) REAL,                 INTENT(IN)    :: PANSMAX  ! maximum snow albedo
(   13) REAL,                 INTENT(IN)    :: PTODRY   ! snow albedo decreasing constant
(   14) REAL,                 INTENT(IN)    :: PRHOSMIN ! minimum snow density
(   15) REAL,                 INTENT(IN)    :: PRHOSMAX ! maximum snow density
(   16) REAL,                 INTENT(IN)    :: PRHOFOLD ! snow density increasing constant
(   17) LOGICAL,              INTENT(IN)    :: OALL_MELT! T --> all snow runs off if
(   18) REAL,                 INTENT(IN)    :: PDRAIN_TIME ! drainage folding time (days)
(   19) REAL,                 INTENT(IN)    :: PWCRN    ! critical snow amount necessary
(   20) REAL,                 INTENT(IN)    :: PZ0SN    ! snow roughness length for momentum
(   21) REAL,                 INTENT(IN)    :: PZ0HSN   ! snow roughness length for heat
(   22) TYPE(SURF_SNOW), INTENT(INOUT) :: TPSNOW
(   23) REAL, DIMENSION(:), INTENT(IN)    :: PTG      ! underlying ground temperature
(   24) REAL, DIMENSION(:), INTENT(IN)    :: PTG_COEFA! underlying ground temperature
(   25) REAL, DIMENSION(:), INTENT(IN)    :: PTG_COEFB! implicit terms
(   26) REAL, DIMENSION(:), INTENT(IN)    :: PABS_SW  ! absorbed SW energy (Wm-2)
(   27) REAL, DIMENSION(:), INTENT(IN)    :: PLW1     ! LW coef independant of TSNOW
(   28) REAL, DIMENSION(:), INTENT(IN)    :: PLW2     ! LW coef dependant   of TSNOW
(   29) REAL, DIMENSION(:), INTENT(IN)    :: PTA      ! temperature at the lowest level
(   30) REAL, DIMENSION(:), INTENT(IN)    :: PQA      ! specific humidity
(   31) REAL, DIMENSION(:), INTENT(IN)    :: PVMOD    ! module of the horizontal wind
(   32) REAL, DIMENSION(:), INTENT(IN)    :: PPS      ! pressure at the surface
(   33) REAL, DIMENSION(:), INTENT(IN)    :: PRHOA    ! air density
(   34) REAL, DIMENSION(:), INTENT(IN)    :: PSR      ! snow rate
(   35) REAL, DIMENSION(:), INTENT(IN)    :: PZREF    ! reference height of the first
(   36) REAL, DIMENSION(:), INTENT(IN)    :: PUREF    ! reference height of the first
(   37) REAL, DIMENSION(:), INTENT(OUT)   :: PRNSNOW  ! net radiation over snow
(   38) REAL, DIMENSION(:), INTENT(OUT)   :: PHSNOW   ! sensible heat flux over snow
(   39) REAL, DIMENSION(:), INTENT(OUT)   :: PLESNOW  ! latent heat flux over snow
(   40) REAL, DIMENSION(:), INTENT(OUT)   :: PGSNOW   ! flux under the snow
(   41) REAL, DIMENSION(:), INTENT(OUT)   :: PMELT    ! snow melting rate (kg/m2/s)
(   42) REAL, DIMENSION(:), INTENT(OUT)   :: PDQS_SNOW! heat storage inside snow
(   43) REAL, DIMENSION(:), INTENT(OUT)   :: PABS_LW ! absorbed LW rad by snow (W/m2)
(   44) END SUBROUTINE SNOW_COVER_1LAYER
(   45) # 46 "modi_snow_cover_1layer.F90"
(   46) END INTERFACE
(   47) END MODULE MODI_SNOW_COVER_1LAYER
