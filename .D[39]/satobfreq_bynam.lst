


NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: satobfreq_bynam.F90

(    1) SUBROUTINE SATOBFREQ_BYNAM(KREADMODE,CDSERIES,FREQ,ID_FREQ)
(    2) USE PARKIND1  ,ONLY : JPIM   ,JPRD
(    3) USE YOMHOOK   ,ONLY : LHOOK  ,DR_HOOK
(    4) 
(    5) !**** SUBROUTINE SATOBFREQ_BYNAM - CHANNEL ID FROM CHANNEL FREQUENCY FOR SATOB
(    6) !
(    7) !          CHRISTOPHE PAYAN, METEO-FRANCE          12/FEB/2010
(    8) !
(    9) !     PURPOSE
(   10) !     -------
(   11) !     
(   12) !     WITH THE INTRODUCTION OF SATOBS FROM SEVERAL CHANNELS WITHIN THE SAME BAND 
(   13) !     IT GETS NECESSARY TO DISTINGUISH THESE FREQUENCIES WITHIN THE COMPUTATIONAL
(   14) !     METHOD. THEREFORE A FREQUENCY ID FOR EACH BAND IS CHOSEN. 
(   15) !     THE FREQUENCY ID IS DETERMINED IN THIS ROUTINE FOR EACH SATELLITE HAVING MORE 
(   16) !     ONE FREQUENCY PER BAND (COMPUTATIONAL METHOD). IT STARTS WITH METEOSAT SECOND 
(   17) !     GENERATION (MSG) AND GOES-N, GOES-M SERIES.
(   18) !
(   19) !     INSPIRED FROM SATOBFREQ CALLED BY SUBROUTINES bufr2odb_satob (odb/bufr2odb) AND buxtract (obstat/src)
(   20) !     SATOBFREQ_BYNAM ALLOWS TO MANAGE FREQUENCIES BY SATELLITE SERIES BY NAMELIST.
(   21) !     A SERIES IS A LIST OF SATELLITES HAVING SAME CHANNEL FREQUENCIES, FIXED BY USERS.
(   22) !     WE TRY TO LINK THESE SUBJECTIVE LISTS WITH COMMON NAMES OF SERIES AS MSG OR GOES-M.
(   23) !     THIS SHOULD BE MORE FLEXIBLE THAN SATOBFREQ, NEW SATELLITES MAY BE MANAGED BY NAMELIST.
(   24) !
(   25) !     INTERFACE
(   26) !     ---------
(   27) !
(   28) !     ***CALL*SATOBFREQ_BYNAM(KREADMODE,CDSERIES,FREQ,ID_FREQ)
(   29) !     WHERE KREADMODE= 0 INITIALISATION MADE ,1 WO NAMELIST ,2 WITH NAMELIST ,OTHER CALL ABOR1
(   30) !           CDSERIES = SATELLITE SERIES IDENTIFIER






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 3

(   31) !           FREQ     = CHANNEL FREQUENCY 
(   32) !           ID_FREQ  = ID (NUMBER) OF THE FREQUENCY WITHIN THE BAND
(   33) !
(   34) !     SATOBFREQ_BYNAM IS CALLED BY SUBROUTINE bator_decodbufr_mod (odb/pandor/module)
(   35) !
(   36) !*    METHOD
(   37) !     ------
(   38) !     
(   39) !     THE CHANNEL FREQUENCY IS COMPARED WITH THE KNOWN VALUES. IF A CHANNEL FREQUENCY 
(   40) !     CAN NOT BE SORTED, THE ID_FREQ KEEPS ZERO AND THIS CHANNEL WILL BE BLACKLISTED BY
(   41) !     THE 'notin' COMMAND IN THE BLACKLIST.
(   42) !
(   43) !     KNOWN SERIES:
(   44) !       'MSG'      :    MET8,9          SATIDS:  55, 56
(   45) !       'GOES-M'   :    GOES10,11,12,13,14    SATIDS: 254,255,256,257,258
(   46) !       'GOES-P'   :    GOES15          SATID:  259
(   47) !       'HTG'      :    HIMAWARI8,9     SATIDS: 173, 174
(   48) !       'GOES-R'   :    GOES16,17,18,19 SATID:  270, 271, 272, 273
(   49) !
(   50) !*    EXTERNALS
(   51) !     ---------
(   52) 
(   53) !**   MODIFICATIONS
(   54) !     -------------
(   55) !     17/11/2011  C. Payan MF: GOES-M and GOES-N grouped in GOES-M, same characteristics
(   56) !                   and for saving one rank, GOES-P added, base 37t1_bf.03 and 38_main
(   57) !     27/11/2018  C. Payan MF: GOES-P, HTG, GOES-R added, base 46_main 
(   58) 
(   59) IMPLICIT NONE
(   60) 
(   61) CHARACTER(LEN=*)   ,INTENT(IN)    :: CDSERIES
(   62) REAL(KIND=JPRD)    ,INTENT(IN)    :: FREQ                ! Hz
(   63) INTEGER(KIND=JPIM) ,INTENT(OUT)   :: ID_FREQ
(   64) INTEGER(KIND=JPIM) ,INTENT(INOUT) :: KREADMODE
(   65) 
(   66) INTEGER(KIND=JPIM) ,PARAMETER     :: JPMXSERIES=10 ,JPMXFREQ=15 ,JPMXWRITE=50
(   67) REAL(KIND=JPRD)    ,PARAMETER     :: epsilon=0.00001D+15 ! Hz
(   68) 
(   69) INTEGER(KIND=JPIM)                :: xx ,jx
(   70) INTEGER(KIND=JPIM)                :: INAM
(   71) REAL(KIND=JPRD)                   :: ZCLUM
(   72) REAL(KIND=JPRD) :: ZHOOK_HANDLE
(   73) 
(   74) TYPE SATOBFREQ_MAP
(   75)   CHARACTER(LEN=10)                    :: CLSERIES_MAP
(   76)   REAL(KIND=JPRD)    ,DIMENSION(1:JPMXFREQ)  :: ZFREQ_MAP
(   77)   INTEGER(KIND=JPIM) ,DIMENSION(1:JPMXFREQ)  :: IFREQ_MAP
(   78)   CHARACTER(LEN=15)  ,DIMENSION(1:JPMXFREQ)  :: CLABEL
(   79) END TYPE SATOBFREQ_MAP
(   80) 
(   81) TYPE(SATOBFREQ_MAP)  ,DIMENSION(1:JPMXSERIES) ,SAVE :: TS_SERIES
(   82) INTEGER(KIND=JPIM)   ,SAVE :: JXSERIES ,JXFREQ(1:JPMXFREQ)
(   83) INTEGER(KIND=JPIM)   ,SAVE :: IOUT ,IWRITE
(   84) 
(   85) CHARACTER(LEN=180)                           :: CLFMT
(   86) 
(   87) NAMELIST / NAMSATFREQ / TS_SERIES
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 4

(   89) #include "abor1.intfb.h"
(   90) 
(   91) !--------------------------------------------------------------------------------------
(   92) 
(   93) IF (LHOOK) CALL DR_HOOK('SATOBFREQ_BYNAM',0,ZHOOK_HANDLE)
(   94) 
(   95) IF (ANY(KREADMODE==(/1,2/))) THEN
(   96) ! Initialization in the first call (kreadmode in (1,2))
(   97) 
(   98)   ! Logical unit standard output 
(   99)   IOUT=6
(  100) 
(  101)   ! Light velocity
(  102)   ZCLUM=299792458._JPRD
(  103) 
(  104)   ! TS_SERIES
(  105)   DO xx=1,10
(  106)     TS_SERIES(xx) = SATOBFREQ_MAP('MAP_TBD',-9._JPRD,-9_JPIM,'LABEL_TBD')
(  107)   ENDDO
(  108) 
(  109)   TS_SERIES(1)%CLSERIES_MAP='MSG'
(  110)   TS_SERIES(1)%ZFREQ_MAP(1:8)=(/0.4721142137D15,0.3997233D15,0.3701142000D15,0.479668D14 &
(  111) & ,0.407881D14,0.344589D14,0.310344D14,0.277586D14/)
(  112)   TS_SERIES(1)%IFREQ_MAP(1:8)=(/1,3,2,1,2,1,2,3/)
(  113)   ! digit in CLABEL must be equal to IFREQ_MAP (see [ifs|arp]/var/suamv.F90)  
(  114)   TS_SERIES(1)%CLABEL(1:8)=(/'VIS1','VIS3','VIS2',' WV1',' WV2',' IR1',' IR2',' IR3'/)
(  115) 
(  116)   TS_SERIES(2)%CLSERIES_MAP='GOES-M'
(  117)   TS_SERIES(2)%ZFREQ_MAP(1:7)=(/0.461538D15,0.405405D14,0.428571D14,0.441176D14,0.280374D14,0.768699D14,0.461219D14/)
(  118)   TS_SERIES(2)%IFREQ_MAP(1:7)=(/1,1,2,3,1,2,3/)
(  119)   TS_SERIES(2)%CLABEL(1:7)=(/'VIS1',' WV1',' WV2',' WV3',' IR1',' IR2',' WV3'/)
(  120) 
(  121)   TS_SERIES(3)%CLSERIES_MAP='GOES-P'
(  122)   TS_SERIES(3)%ZFREQ_MAP(1:6)=(/0.461538D15,0.405405D14,0.428571D14,0.461219D14,0.280374D14,0.768699D14/)
(  123)   TS_SERIES(3)%IFREQ_MAP(1:6)=(/1,1,2,3,1,2/)
(  124)   TS_SERIES(3)%CLABEL(1:6)=(/'VIS1',' WV1',' WV2',' WV3',' IR1',' IR2'/)
(  125)   
(  126)   TS_SERIES(4)%CLSERIES_MAP='HTG'
(  127)   TS_SERIES(4)%ZFREQ_MAP(1:5)=(/0.46842570D15,0.41067400D14,0.43448100D14,0.48353600D14,0.28826100D14/)
(  128)   TS_SERIES(4)%IFREQ_MAP(1:5)=(/1,1,2,3,1/)
(  129)   TS_SERIES(4)%CLABEL(1:5)=(/'VIS1',' WV1',' WV2',' WV3',' IR1'/)
(  130) 
(  131)   TS_SERIES(5)%CLSERIES_MAP='GOES-R'
(  132)   TS_SERIES(5)%ZFREQ_MAP(1:6)=(/0.4684257D+15,0.408437D+14,0.431356D+14,0.484317D+14,0.267672D+14,0.768699D+14/)
(  133)   TS_SERIES(5)%IFREQ_MAP(1:6)=(/1,1,2,3,1,2/)
(  134)   TS_SERIES(5)%CLABEL(1:6)=(/'VIS1',' WV1',' WV2',' WV3',' IR1',' IR2'/)
(  135) 
(  136)   KREADMODE=KREADMODE-1
(  137) 
(  138)   ! If allowed, update by namelist
(  139)   IF (KREADMODE==1) THEN
(  140)     INAM=14
(  141)     OPEN (INAM,FILE='NAMELIST',STATUS='OLD',FORM='FORMATTED',ERR=901)
(  142)     READ (INAM,NAMSATFREQ,ERR=902,END=903)
(  143) 901 CONTINUE
(  144)     CLOSE(INAM)
(  145)     KREADMODE=KREADMODE-1
(  146)   ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 5

(  147) 
(  148)   ! Now all is initialized, we can fix JXSERIES and JXFREQ
(  149)   DO xx=1,JPMXSERIES
(  150)     IF (trim(TS_SERIES(xx)%CLSERIES_MAP)=='MAP_TBD') EXIT
(  151)     DO jx=1,JPMXFREQ
(  152)       IF (TS_SERIES(xx)%ZFREQ_MAP(jx)==-9_JPRD) EXIT
(  153)     ENDDO
(  154)     JXFREQ(xx)=jx-1
(  155)   ENDDO
(  156)   JXSERIES=xx-1
(  157)   
(  158)   ! Prints for being sure to know what we do
(  159)   WRITE(IOUT,*)'SATOBFREQ_BYNAM: satellite series and frequencies taken into account:'
(  160)   DO xx=1,JXSERIES
(  161)     WRITE(IOUT,*)trim(TS_SERIES(xx)%CLSERIES_MAP),':'
(  162)     WRITE(CLFMT,FMT="('(1X,''  Freq (Hz):'',',I2,'(E18.10,'',''),/&
(  163)                   &    ,1X,''WL (m*1e-6):'',',I2,'(F18.1 ,'',''),/&
(  164)                   &    ,1X,''     FreqId:'',',I2,'(I18   ,'',''),/&
(  165)                   &    ,1X,''LabelFreqId:'',',I2,'(A18   ,'','')   )')") &
(  166)                   & MAX(1,JXFREQ(xx)),MAX(1,JXFREQ(xx)),MAX(1,JXFREQ(xx)),MAX(1,JXFREQ(xx))
(  167)     WRITE(IOUT,FMT=CLFMT)TS_SERIES(xx)%ZFREQ_MAP(1:JXFREQ(xx))       &
(  168)                       & ,NINT(ZCLUM/TS_SERIES(xx)%ZFREQ_MAP(1:JXFREQ(xx))*1e7)/10._JPRD &
(  169)                       & ,TS_SERIES(xx)%IFREQ_MAP(1:JXFREQ(xx))       &
(  170)                       & ,(trim(TS_SERIES(xx)%CLABEL(jx)),jx=1,jxfreq(xx))
(  171)   ENDDO
(  172) 
(  173) ELSEIF(KREADMODE/=0) THEN
(  174)   CALL ABOR1('SATOBFREQ_BYNAM: KREADMODE NOTIN (0,1,2)')
(  175) ENDIF
(  176) 
(  177) ID_FREQ=0
(  178) 
(  179) IF (CDSERIES/='TBD') THEN
(  180)   FreqToId: DO xx=1,JXSERIES
(  181)     IF (CDSERIES==trim(TS_SERIES(xx)%CLSERIES_MAP)) THEN
(  182)       DO jx=1,JXFREQ(xx)
(  183)         IF (FREQ.GT.TS_SERIES(xx)%ZFREQ_MAP(jx)-epsilon.AND.FREQ.LT.TS_SERIES(xx)%ZFREQ_MAP(jx)+epsilon) THEN
(  184)           ID_FREQ=TS_SERIES(xx)%IFREQ_MAP(jx)
(  185)           EXIT FreqToId
(  186)         ENDIF
(  187)       ENDDO  
(  188)     ENDIF
(  189)   ENDDO FreqToId
(  190)   IF (ID_FREQ==0.AND.IWRITE.LT.JPMXWRITE) THEN
(  191)     WRITE(IOUT,FMT='(3A,E18.10)') '%E SATOBFREQ_BYNAM: channel frequency for ',CDSERIES,' has not been recognized, freq=',FR
(  192)     !-- Avoids to pollute output too much
(  193)     IWRITE=IWRITE+1
(  194)   ENDIF  
(  195) ENDIF
(  196) 
(  197) IF (LHOOK) CALL DR_HOOK('SATOBFREQ_BYNAM',1,ZHOOK_HANDLE)
(  198) RETURN
(  199) 
(  200) !---------- Error handling ------------------
(  201) 902  CONTINUE
(  202) CALL ABOR1('SATOBFREQ_BYNAM : NAMELIST - READING ERROR')
(  203) 
(  204) 903  CONTINUE






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 6

(  205) CALL ABOR1('SATOBFREQ_BYNAM : NAMELIST - END OF FILE WITHOUT NAMSATFREQ')
(  206) 
(  207) END SUBROUTINE SATOBFREQ_BYNAM





























































NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 7

(    1) # 1 "satobfreq_bynam.F90"
(    1) SUBROUTINE SATOBFREQ_BYNAM(KREADMODE,CDSERIES,FREQ,ID_FREQ)
(    2) USE PARKIND1  ,ONLY : JPIM   ,JPRD
(    3) USE YOMHOOK   ,ONLY : LHOOK  ,DR_HOOK
(    4) # 5 "satobfreq_bynam.F90"
(    5) !**** SUBROUTINE SATOBFREQ_BYNAM - CHANNEL ID FROM CHANNEL FREQUENCY FOR SATOB
(    6) !
(    7) !          CHRISTOPHE PAYAN, METEO-FRANCE          12/FEB/2010
(    8) !
(    9) !     PURPOSE
(   10) !     -------
(   11) !     
(   12) !     WITH THE INTRODUCTION OF SATOBS FROM SEVERAL CHANNELS WITHIN THE SAME BAND 
(   13) !     IT GETS NECESSARY TO DISTINGUISH THESE FREQUENCIES WITHIN THE COMPUTATIONAL
(   14) !     METHOD. THEREFORE A FREQUENCY ID FOR EACH BAND IS CHOSEN. 
(   15) !     THE FREQUENCY ID IS DETERMINED IN THIS ROUTINE FOR EACH SATELLITE HAVING MORE 
(   16) !     ONE FREQUENCY PER BAND (COMPUTATIONAL METHOD). IT STARTS WITH METEOSAT SECOND 
(   17) !     GENERATION (MSG) AND GOES-N, GOES-M SERIES.
(   18) !
(   19) !     INSPIRED FROM SATOBFREQ CALLED BY SUBROUTINES bufr2odb_satob (odb/bufr2odb) AND buxtract (obstat/src)
(   20) !     SATOBFREQ_BYNAM ALLOWS TO MANAGE FREQUENCIES BY SATELLITE SERIES BY NAMELIST.
(   21) !     A SERIES IS A LIST OF SATELLITES HAVING SAME CHANNEL FREQUENCIES, FIXED BY USERS.
(   22) !     WE TRY TO LINK THESE SUBJECTIVE LISTS WITH COMMON NAMES OF SERIES AS MSG OR GOES-M.
(   23) !     THIS SHOULD BE MORE FLEXIBLE THAN SATOBFREQ, NEW SATELLITES MAY BE MANAGED BY NAMELIST.
(   24) !
(   25) !     INTERFACE
(   26) !     ---------
(   27) !
(   28) !     ***CALL*SATOBFREQ_BYNAM(KREADMODE,CDSERIES,FREQ,ID_FREQ)
(   29) !     WHERE KREADMODE= 0 INITIALISATION MADE ,1 WO NAMELIST ,2 WITH NAMELIST ,OTHER CALL ABOR1
(   30) !           CDSERIES = SATELLITE SERIES IDENTIFIER
(   31) !           FREQ     = CHANNEL FREQUENCY 
(   32) !           ID_FREQ  = ID (NUMBER) OF THE FREQUENCY WITHIN THE BAND
(   33) !
(   34) !     SATOBFREQ_BYNAM IS CALLED BY SUBROUTINE bator_decodbufr_mod (odb/pandor/module)
(   35) !
(   36) !*    METHOD
(   37) !     ------
(   38) !     
(   39) !     THE CHANNEL FREQUENCY IS COMPARED WITH THE KNOWN VALUES. IF A CHANNEL FREQUENCY 
(   40) !     CAN NOT BE SORTED, THE ID_FREQ KEEPS ZERO AND THIS CHANNEL WILL BE BLACKLISTED BY
(   41) !     THE 'notin' COMMAND IN THE BLACKLIST.
(   42) !
(   43) !     KNOWN SERIES:
(   44) !       'MSG'      :    MET8,9          SATIDS:  55, 56
(   45) !       'GOES-M'   :    GOES10,11,12,13,14    SATIDS: 254,255,256,257,258
(   46) !       'GOES-P'   :    GOES15          SATID:  259
(   47) !       'HTG'      :    HIMAWARI8,9     SATIDS: 173, 174
(   48) !       'GOES-R'   :    GOES16,17,18,19 SATID:  270, 271, 272, 273
(   49) !
(   50) !*    EXTERNALS
(   51) !     ---------
(   52) # 53 "satobfreq_bynam.F90"
(   53) !**   MODIFICATIONS
(   54) !     -------------
(   55) !     17/11/2011  C. Payan MF: GOES-M and GOES-N grouped in GOES-M, same characteristics
(   56) !                   and for saving one rank, GOES-P added, base 37t1_bf.03 and 38_main
(   57) !     27/11/2018  C. Payan MF: GOES-P, HTG, GOES-R added, base 46_main 






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 8

(   58) # 59 "satobfreq_bynam.F90"
(   59) IMPLICIT NONE
(   60) # 61 "satobfreq_bynam.F90"
(   61) CHARACTER(LEN=*)   ,INTENT(IN)    :: CDSERIES
(   62) REAL(KIND=JPRD)    ,INTENT(IN)    :: FREQ                ! Hz
(   63) INTEGER(KIND=JPIM) ,INTENT(OUT)   :: ID_FREQ
(   64) INTEGER(KIND=JPIM) ,INTENT(INOUT) :: KREADMODE
(   65) # 66 "satobfreq_bynam.F90"
(   66) INTEGER(KIND=JPIM) ,PARAMETER     :: JPMXSERIES=10 ,JPMXFREQ=15 ,JPMXWRITE=50
(   67) REAL(KIND=JPRD)    ,PARAMETER     :: epsilon=0.00001D+15 ! Hz
(   68) # 69 "satobfreq_bynam.F90"
(   69) INTEGER(KIND=JPIM)                :: xx ,jx
(   70) INTEGER(KIND=JPIM)                :: INAM
(   71) REAL(KIND=JPRD)                   :: ZCLUM
(   72) REAL(KIND=JPRD) :: ZHOOK_HANDLE
(   73) # 74 "satobfreq_bynam.F90"
(   74) TYPE SATOBFREQ_MAP
(   75)   CHARACTER(LEN=10)                    :: CLSERIES_MAP
(   76)   REAL(KIND=JPRD)    ,DIMENSION(1:JPMXFREQ)  :: ZFREQ_MAP
(   77)   INTEGER(KIND=JPIM) ,DIMENSION(1:JPMXFREQ)  :: IFREQ_MAP
(   78)   CHARACTER(LEN=15)  ,DIMENSION(1:JPMXFREQ)  :: CLABEL
(   79) END TYPE SATOBFREQ_MAP
(   80) # 81 "satobfreq_bynam.F90"
(   81) TYPE(SATOBFREQ_MAP)  ,DIMENSION(1:JPMXSERIES) ,SAVE :: TS_SERIES
(   82) INTEGER(KIND=JPIM)   ,SAVE :: JXSERIES ,JXFREQ(1:JPMXFREQ)
(   83) INTEGER(KIND=JPIM)   ,SAVE :: IOUT ,IWRITE
(   84) # 85 "satobfreq_bynam.F90"
(   85) CHARACTER(LEN=180)                           :: CLFMT
(   86) # 87 "satobfreq_bynam.F90"
(   87) NAMELIST / NAMSATFREQ / TS_SERIES
(   88) # 89 "satobfreq_bynam.F90"
(   89) # 1 ".D[61]/abor1.intfb.h"
(    1) INTERFACE
(    2) # 3 ".D[61]/abor1.intfb.h"
(    3) SUBROUTINE ABOR1(CDTEXT)
(    4) CHARACTER(LEN=*), INTENT(IN) :: CDTEXT
(    5) END SUBROUTINE ABOR1
(    6) # 7 ".D[61]/abor1.intfb.h"
(    7) SUBROUTINE ABOR1FL(CDFILE, KLINENUM, CDTEXT)
(    8) USE PARKIND1  ,ONLY : JPIM
(    9) CHARACTER(LEN=*), INTENT(IN) :: CDFILE,CDTEXT
(   10) INTEGER(KIND=JPIM), INTENT(IN) :: KLINENUM
(   11) END SUBROUTINE ABOR1FL
(   12) # 13 ".D[61]/abor1.intfb.h"
(   13) SUBROUTINE ABOR1_EXCEPTION_HANDLER()
(   14) END SUBROUTINE ABOR1_EXCEPTION_HANDLER
(   15) # 16 ".D[61]/abor1.intfb.h"
(   16) END INTERFACE
(   17) # 90 "satobfreq_bynam.F90"
(   90) # 91 "satobfreq_bynam.F90"
(   91) !--------------------------------------------------------------------------------------
(   92) # 93 "satobfreq_bynam.F90"
(   93) IF (LHOOK) CALL DR_HOOK('SATOBFREQ_BYNAM',0,ZHOOK_HANDLE)
(   94) # 95 "satobfreq_bynam.F90"
(   95) IF (ANY(KREADMODE==(/1,2/))) THEN
(   96) ! Initialization in the first call (kreadmode in (1,2))
(   97) # 98 "satobfreq_bynam.F90"
(   98)   ! Logical unit standard output 






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 9

(   99)   IOUT=6
(  100) # 101 "satobfreq_bynam.F90"
(  101)   ! Light velocity
(  102)   ZCLUM=299792458._JPRD
(  103) # 104 "satobfreq_bynam.F90"
(  104)   ! TS_SERIES
(  105)   DO xx=1,10
(  106)     TS_SERIES(xx) = SATOBFREQ_MAP('MAP_TBD',-9._JPRD,-9_JPIM,'LABEL_TBD')
(  107)   ENDDO
(  108) # 109 "satobfreq_bynam.F90"
(  109)   TS_SERIES(1)%CLSERIES_MAP='MSG'
(  110)   TS_SERIES(1)%ZFREQ_MAP(1:8)=(/0.4721142137D15,0.3997233D15,0.3701142000D15,0.479668D14 &
(  111) & ,0.407881D14,0.344589D14,0.310344D14,0.277586D14/)
(  112)   TS_SERIES(1)%IFREQ_MAP(1:8)=(/1,3,2,1,2,1,2,3/)
(  113)   ! digit in CLABEL must be equal to IFREQ_MAP (see [ifs|arp]/var/suamv.F90)  
(  114)   TS_SERIES(1)%CLABEL(1:8)=(/'VIS1','VIS3','VIS2',' WV1',' WV2',' IR1',' IR2',' IR3'/)
(  115) # 116 "satobfreq_bynam.F90"
(  116)   TS_SERIES(2)%CLSERIES_MAP='GOES-M'
(  117)   TS_SERIES(2)%ZFREQ_MAP(1:7)=(/0.461538D15,0.405405D14,0.428571D14,0.441176D14,0.280374D14,0.768699D14,0.461219D14/)
(  118)   TS_SERIES(2)%IFREQ_MAP(1:7)=(/1,1,2,3,1,2,3/)
(  119)   TS_SERIES(2)%CLABEL(1:7)=(/'VIS1',' WV1',' WV2',' WV3',' IR1',' IR2',' WV3'/)
(  120) # 121 "satobfreq_bynam.F90"
(  121)   TS_SERIES(3)%CLSERIES_MAP='GOES-P'
(  122)   TS_SERIES(3)%ZFREQ_MAP(1:6)=(/0.461538D15,0.405405D14,0.428571D14,0.461219D14,0.280374D14,0.768699D14/)
(  123)   TS_SERIES(3)%IFREQ_MAP(1:6)=(/1,1,2,3,1,2/)
(  124)   TS_SERIES(3)%CLABEL(1:6)=(/'VIS1',' WV1',' WV2',' WV3',' IR1',' IR2'/)
(  125)   
(  126)   TS_SERIES(4)%CLSERIES_MAP='HTG'
(  127)   TS_SERIES(4)%ZFREQ_MAP(1:5)=(/0.46842570D15,0.41067400D14,0.43448100D14,0.48353600D14,0.28826100D14/)
(  128)   TS_SERIES(4)%IFREQ_MAP(1:5)=(/1,1,2,3,1/)
(  129)   TS_SERIES(4)%CLABEL(1:5)=(/'VIS1',' WV1',' WV2',' WV3',' IR1'/)
(  130) # 131 "satobfreq_bynam.F90"
(  131)   TS_SERIES(5)%CLSERIES_MAP='GOES-R'
(  132)   TS_SERIES(5)%ZFREQ_MAP(1:6)=(/0.4684257D+15,0.408437D+14,0.431356D+14,0.484317D+14,0.267672D+14,0.768699D+14/)
(  133)   TS_SERIES(5)%IFREQ_MAP(1:6)=(/1,1,2,3,1,2/)
(  134)   TS_SERIES(5)%CLABEL(1:6)=(/'VIS1',' WV1',' WV2',' WV3',' IR1',' IR2'/)
(  135) # 136 "satobfreq_bynam.F90"
(  136)   KREADMODE=KREADMODE-1
(  137) # 138 "satobfreq_bynam.F90"
(  138)   ! If allowed, update by namelist
(  139)   IF (KREADMODE==1) THEN
(  140)     INAM=14
(  141)     OPEN (INAM,FILE='NAMELIST',STATUS='OLD',FORM='FORMATTED',ERR=901)
(  142)     READ (INAM,NAMSATFREQ,ERR=902,END=903)
(  143) 901 CONTINUE
(  144)     CLOSE(INAM)
(  145)     KREADMODE=KREADMODE-1
(  146)   ENDIF
(  147) # 148 "satobfreq_bynam.F90"
(  148)   ! Now all is initialized, we can fix JXSERIES and JXFREQ
(  149)   DO xx=1,JPMXSERIES
(  150)     IF (trim(TS_SERIES(xx)%CLSERIES_MAP)=='MAP_TBD') EXIT
(  151)     DO jx=1,JPMXFREQ
(  152)       IF (TS_SERIES(xx)%ZFREQ_MAP(jx)==-9_JPRD) EXIT
(  153)     ENDDO
(  154)     JXFREQ(xx)=jx-1
(  155)   ENDDO
(  156)   JXSERIES=xx-1






NVFORTRAN (Version     23.1)          02/24/2023  13:44:14      page 10

(  157)   
(  158)   ! Prints for being sure to know what we do
(  159)   WRITE(IOUT,*)'SATOBFREQ_BYNAM: satellite series and frequencies taken into account:'
(  160)   DO xx=1,JXSERIES
(  161)     WRITE(IOUT,*)trim(TS_SERIES(xx)%CLSERIES_MAP),':'
(  162)     WRITE(CLFMT,FMT="('(1X,''  Freq (Hz):'',',I2,'(E18.10,'',''),/&
(  163)                   &    ,1X,''WL (m*1e-6):'',',I2,'(F18.1 ,'',''),/&
(  164)                   &    ,1X,''     FreqId:'',',I2,'(I18   ,'',''),/&
(  165)                   &    ,1X,''LabelFreqId:'',',I2,'(A18   ,'','')   )')") &
(  166)                   & MAX(1,JXFREQ(xx)),MAX(1,JXFREQ(xx)),MAX(1,JXFREQ(xx)),MAX(1,JXFREQ(xx))
(  167)     WRITE(IOUT,FMT=CLFMT)TS_SERIES(xx)%ZFREQ_MAP(1:JXFREQ(xx))       &
(  168)                       & ,NINT(ZCLUM/TS_SERIES(xx)%ZFREQ_MAP(1:JXFREQ(xx))*1e7)/10._JPRD &
(  169)                       & ,TS_SERIES(xx)%IFREQ_MAP(1:JXFREQ(xx))       &
(  170)                       & ,(trim(TS_SERIES(xx)%CLABEL(jx)),jx=1,jxfreq(xx))
(  171)   ENDDO
(  172) # 173 "satobfreq_bynam.F90"
(  173) ELSEIF(KREADMODE/=0) THEN
(  174)   CALL ABOR1('SATOBFREQ_BYNAM: KREADMODE NOTIN (0,1,2)')
(  175) ENDIF
(  176) # 177 "satobfreq_bynam.F90"
(  177) ID_FREQ=0
(  178) # 179 "satobfreq_bynam.F90"
(  179) IF (CDSERIES/='TBD') THEN
(  180)   FreqToId: DO xx=1,JXSERIES
(  181)     IF (CDSERIES==trim(TS_SERIES(xx)%CLSERIES_MAP)) THEN
(  182)       DO jx=1,JXFREQ(xx)
(  183)         IF (FREQ.GT.TS_SERIES(xx)%ZFREQ_MAP(jx)-epsilon.AND.FREQ.LT.TS_SERIES(xx)%ZFREQ_MAP(jx)+epsilon) THEN
(  184)           ID_FREQ=TS_SERIES(xx)%IFREQ_MAP(jx)
(  185)           EXIT FreqToId
(  186)         ENDIF
(  187)       ENDDO  
(  188)     ENDIF
(  189)   ENDDO FreqToId
(  190)   IF (ID_FREQ==0.AND.IWRITE.LT.JPMXWRITE) THEN
(  191)     WRITE(IOUT,FMT='(3A,E18.10)') '%E SATOBFREQ_BYNAM: channel frequency for ',CDSERIES,' has not been recognized, freq=',FREQ
(  192)     !-- Avoids to pollute output too much
(  193)     IWRITE=IWRITE+1
(  194)   ENDIF  
(  195) ENDIF
(  196) # 197 "satobfreq_bynam.F90"
(  197) IF (LHOOK) CALL DR_HOOK('SATOBFREQ_BYNAM',1,ZHOOK_HANDLE)
(  198) RETURN
(  199) # 200 "satobfreq_bynam.F90"
(  200) !---------- Error handling ------------------
(  201) 902  CONTINUE
(  202) CALL ABOR1('SATOBFREQ_BYNAM : NAMELIST - READING ERROR')
(  203) # 204 "satobfreq_bynam.F90"
(  204) 903  CONTINUE
(  205) CALL ABOR1('SATOBFREQ_BYNAM : NAMELIST - END OF FILE WITHOUT NAMSATFREQ')
(  206) # 207 "satobfreq_bynam.F90"
(  207) END SUBROUTINE SATOBFREQ_BYNAM
