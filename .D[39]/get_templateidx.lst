


NVFORTRAN (Version     23.1)          02/24/2023  13:39:02      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:39:02      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: get_templateidx.F90

(    1) subroutine get_templateidx(ksubtype,ktdlen,ktdlst,kdlen,kdata,ktemplate,ktemplateidx)
(    2) USE PARKIND1  ,ONLY : JPIM     ,JPRD
(    3) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(    4) 
(    5) 
(    6) !**** *get_templateidx*
(    7) 
(    8) 
(    9) !     Purpose.
(   10) !     --------
(   11) 
(   12) 
(   13) 
(   14) 
(   15) !**   Interface.
(   16) !     ----------
(   17) 
(   18) 
(   19) !     Method.
(   20) !     -------
(   21) 
(   22) 
(   23) 
(   24) 
(   25) 
(   26) !     Externals.
(   27) !     ----------
(   28) 
(   29) 
(   30) 






NVFORTRAN (Version     23.1)          02/24/2023  13:39:02      page 3

(   31) !     Reference.
(   32) !     ----------
(   33) 
(   34) 
(   35) 
(   36) !     Author.
(   37) !     -------
(   38) 
(   39) !          M. Dragosavac    *ECMWF*
(   40) 
(   41) 
(   42) !     Modifications.
(   43) !     --------------
(   44) 
(   45) !          NONE.
(   46) !---------------------------------------------------------------------------
(   47) 
(   48) implicit none
(   49) 
(   50) ! subroutine arguments
(   51) 
(   52) INTEGER(KIND=JPIM)              ,intent(inout) :: ksubtype
(   53) INTEGER(KIND=JPIM)              ,intent(inout) :: ktdlen
(   54) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: ktdlst
(   55) INTEGER(KIND=JPIM)              ,intent(inout) :: kdlen
(   56) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: kdata
(   57) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: ktemplate
(   58) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: ktemplateidx
(   59) 
(   60) 
(   61) ! Local variables
(   62) 
(   63) INTEGER(KIND=JPIM)               :: i,j
(   64) INTEGER(KIND=JPIM)               :: k
(   65) INTEGER(KIND=JPIM),parameter     :: kelem=40000
(   66) INTEGER(KIND=JPIM), dimension(kelem):: ktdexp
(   67) INTEGER(KIND=JPIM), dimension(40) ::ksec1
(   68) character(len=64), dimension(kelem):: cnames
(   69) character(len=24), dimension(kelem):: cunits
(   70) INTEGER(KIND=JPIM)               :: kerr
(   71) INTEGER(KIND=JPIM)               :: ktdexl
(   72) REAL(KIND=JPRD) :: ZHOOK_HANDLE
(   73) 
(   74) IF (LHOOK) CALL DR_HOOK('GET_TEMPLATEIDX',0,ZHOOK_HANDLE)
(   75) kerr=0
(   76) k=0
(   77) ksec1=0
(   78) ksec1(7)=ksubtype
(   79) ksec1(8)=1
(   80) ksec1(15)=13
(   81) ksec1(3)=98
(   82) ksec1(2)=3
(   83) 
(   84) call buxdes(k,ksec1,ktdlen,ktdlst,kdlen,kdata,kelem, &
(   85)  & ktdexl,ktdexp,cnames,cunits,kerr) 
(   86) if(kerr /= 0) then
(   87)   print*,'buxdes error ',kerr
(   88)   do i=1,kdlen






NVFORTRAN (Version     23.1)          02/24/2023  13:39:02      page 4

(   89)     write(*,*) i, kdata(i)
(   90)   ENDDO
(   91) 
(   92)   do i=1,ktdlen
(   93)     write(*,*) i, ktdlst(i)
(   94)   ENDDO
(   95)   call bexit(2)
(   96) ENDIF
(   97) 
(   98) !  do i=1,ktdexl
(   99) !    write(*,*) i, ktdexp(i)
(  100) !  end do
(  101) 
(  102) 
(  103) ktemplateidx=0
(  104) 
(  105) do i=1,size(ktemplate)
(  106)   do j=1,ktdexl
(  107) 
(  108)     if(ktemplate(i) == ktdexp(j)) then
(  109)       ktemplateidx(i)=j
(  110)       exit
(  111)     ENDIF
(  112) 
(  113)   ENDDO
(  114) ENDDO
(  115) IF (LHOOK) CALL DR_HOOK('GET_TEMPLATEIDX',1,ZHOOK_HANDLE)
(  116) 
(  117) 
(  118) 
(  119) end subroutine get_templateidx

































NVFORTRAN (Version     23.1)          02/24/2023  13:39:02      page 5

(    1) # 1 "get_templateidx.F90"
(    1) subroutine get_templateidx(ksubtype,ktdlen,ktdlst,kdlen,kdata,ktemplate,ktemplateidx)
(    2) USE PARKIND1  ,ONLY : JPIM     ,JPRD
(    3) USE YOMHOOK   ,ONLY : LHOOK,   DR_HOOK
(    4) # 6 "get_templateidx.F90"
(    6) !**** *get_templateidx*
(    7) # 9 "get_templateidx.F90"
(    9) !     Purpose.
(   10) !     --------
(   11) # 15 "get_templateidx.F90"
(   15) !**   Interface.
(   16) !     ----------
(   17) # 19 "get_templateidx.F90"
(   19) !     Method.
(   20) !     -------
(   21) # 26 "get_templateidx.F90"
(   26) !     Externals.
(   27) !     ----------
(   28) # 31 "get_templateidx.F90"
(   31) !     Reference.
(   32) !     ----------
(   33) # 36 "get_templateidx.F90"
(   36) !     Author.
(   37) !     -------
(   38) # 39 "get_templateidx.F90"
(   39) !          M. Dragosavac    *ECMWF*
(   40) # 42 "get_templateidx.F90"
(   42) !     Modifications.
(   43) !     --------------
(   44) # 45 "get_templateidx.F90"
(   45) !          NONE.
(   46) !---------------------------------------------------------------------------
(   47) # 48 "get_templateidx.F90"
(   48) implicit none
(   49) # 50 "get_templateidx.F90"
(   50) ! subroutine arguments
(   51) # 52 "get_templateidx.F90"
(   52) INTEGER(KIND=JPIM)              ,intent(inout) :: ksubtype
(   53) INTEGER(KIND=JPIM)              ,intent(inout) :: ktdlen
(   54) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: ktdlst
(   55) INTEGER(KIND=JPIM)              ,intent(inout) :: kdlen
(   56) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: kdata
(   57) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: ktemplate
(   58) INTEGER(KIND=JPIM), dimension(:),intent(inout) :: ktemplateidx
(   59) # 61 "get_templateidx.F90"
(   61) ! Local variables
(   62) # 63 "get_templateidx.F90"
(   63) INTEGER(KIND=JPIM)               :: i,j
(   64) INTEGER(KIND=JPIM)               :: k
(   65) INTEGER(KIND=JPIM),parameter     :: kelem=40000
(   66) INTEGER(KIND=JPIM), dimension(kelem):: ktdexp
(   67) INTEGER(KIND=JPIM), dimension(40) ::ksec1
(   68) character(len=64), dimension(kelem):: cnames
(   69) character(len=24), dimension(kelem):: cunits
(   70) INTEGER(KIND=JPIM)               :: kerr
(   71) INTEGER(KIND=JPIM)               :: ktdexl
(   72) REAL(KIND=JPRD) :: ZHOOK_HANDLE
(   73) # 74 "get_templateidx.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:39:02      page 6

(   74) IF (LHOOK) CALL DR_HOOK('GET_TEMPLATEIDX',0,ZHOOK_HANDLE)
(   75) kerr=0
(   76) k=0
(   77) ksec1=0
(   78) ksec1(7)=ksubtype
(   79) ksec1(8)=1
(   80) ksec1(15)=13
(   81) ksec1(3)=98
(   82) ksec1(2)=3
(   83) # 84 "get_templateidx.F90"
(   84) call buxdes(k,ksec1,ktdlen,ktdlst,kdlen,kdata,kelem, &
(   85)  & ktdexl,ktdexp,cnames,cunits,kerr) 
(   86) if(kerr /= 0) then
(   87)   print*,'buxdes error ',kerr
(   88)   do i=1,kdlen
(   89)     write(*,*) i, kdata(i)
(   90)   ENDDO
(   91) # 92 "get_templateidx.F90"
(   92)   do i=1,ktdlen
(   93)     write(*,*) i, ktdlst(i)
(   94)   ENDDO
(   95)   call bexit(2)
(   96) ENDIF
(   97) # 98 "get_templateidx.F90"
(   98) !  do i=1,ktdexl
(   99) !    write(*,*) i, ktdexp(i)
(  100) !  end do
(  101) # 103 "get_templateidx.F90"
(  103) ktemplateidx=0
(  104) # 105 "get_templateidx.F90"
(  105) do i=1,size(ktemplate)
(  106)   do j=1,ktdexl
(  107) # 108 "get_templateidx.F90"
(  108)     if(ktemplate(i) == ktdexp(j)) then
(  109)       ktemplateidx(i)=j
(  110)       exit
(  111)     ENDIF
(  112) # 113 "get_templateidx.F90"
(  113)   ENDDO
(  114) ENDDO
(  115) IF (LHOOK) CALL DR_HOOK('GET_TEMPLATEIDX',1,ZHOOK_HANDLE)
(  116) # 119 "get_templateidx.F90"
(  119) end subroutine get_templateidx
