


NVFORTRAN (Version     23.1)          02/24/2023  13:34:15      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:34:15      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: geosangl.F90

(    1) SUBROUTINE geosangl(lat,lon,satlon,satlat,satalt,zenith)
(    2) 
(    3) ! Computes zenith angle for geostationnary satellite
(    4) ! NB: assumes that the grid point is in the
(    5) !     sight of the satellite (i.e. angle defined!)
(    6) !
(    7) ! Initial version:
(    8) !	F. Chevallier  	February 2000
(    9) 
(   10) USE PARKIND1  ,ONLY : JPIM     ,JPRD
(   11) 
(   12) IMPLICIT NONE
(   13) 
(   14) !
(   15) ! Arguments
(   16) !
(   17) REAL(KIND=JPRD) :: lat    ! grid point latitude      (deg)
(   18) REAL(KIND=JPRD) :: lon    ! grid point longitude     (deg)
(   19) REAL(KIND=JPRD) :: satlon ! satellite longitude       (deg)
(   20) REAL(KIND=JPRD) :: satlat ! satellite latitude        (deg)
(   21) REAL(KIND=JPRD) :: satalt ! satellite altitude       (km)
(   22) REAL(KIND=JPRD) :: zenith ! zenith angle             (deg)
(   23) !
(   24) ! Local variables
(   25) !
(   26) REAL(KIND=JPRD), parameter :: rearth = 6378.170_JPRD   ! earth equatorial radius (km)
(   27) REAL(KIND=JPRD) :: pi
(   28) REAL(KIND=JPRD) :: rlat, rlon, rsatlon, rsatlat    ! angles in radians
(   29) REAL(KIND=JPRD) :: ds, a , rm, rl, tb, b, z        ! for trigonometry
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:34:15      page 3

(   31) 
(   32) pi  = acos(-1._JPRD)
(   33) 
(   34) ! conversion to radians
(   35) rsatlon = satlon  /180._JPRD*pi
(   36) rsatlat = satlat  /180._JPRD*pi
(   37) rlon = lon/180._JPRD*pi
(   38) rlat = lat/180._JPRD*pi
(   39) 
(   40) !Distance on the ground
(   41) ds = rearth * 2._JPRD * &
(   42)      asin(((1._JPRD-sin(rlat)*sin(rsatlat) -  &
(   43)      cos(rlat)*cos(rsatlat)*cos( rlon - rsatlon ))/2._JPRD)**(.5_JPRD))
(   44) 
(   45) !Easy trigonometry
(   46) a = ds / rearth
(   47) rl = rearth * sin(a)
(   48) rm = rearth * cos(a)
(   49) tb = rl / (rearth + satalt - rm)
(   50) b = atan(tb)
(   51) z = a + b
(   52) 
(   53) zenith = z/pi*180._JPRD  !! in degrees
(   54) 
(   55) END SUBROUTINE geosangl







































NVFORTRAN (Version     23.1)          02/24/2023  13:34:15      page 4

(    1) # 1 "geosangl.F90"
(    1) SUBROUTINE geosangl(lat,lon,satlon,satlat,satalt,zenith)
(    2) # 3 "geosangl.F90"
(    3) ! Computes zenith angle for geostationnary satellite
(    4) ! NB: assumes that the grid point is in the
(    5) !     sight of the satellite (i.e. angle defined!)
(    6) !
(    7) ! Initial version:
(    8) !	F. Chevallier  	February 2000
(    9) # 10 "geosangl.F90"
(   10) USE PARKIND1  ,ONLY : JPIM     ,JPRD
(   11) # 12 "geosangl.F90"
(   12) IMPLICIT NONE
(   13) # 14 "geosangl.F90"
(   14) !
(   15) ! Arguments
(   16) !
(   17) REAL(KIND=JPRD) :: lat    ! grid point latitude      (deg)
(   18) REAL(KIND=JPRD) :: lon    ! grid point longitude     (deg)
(   19) REAL(KIND=JPRD) :: satlon ! satellite longitude       (deg)
(   20) REAL(KIND=JPRD) :: satlat ! satellite latitude        (deg)
(   21) REAL(KIND=JPRD) :: satalt ! satellite altitude       (km)
(   22) REAL(KIND=JPRD) :: zenith ! zenith angle             (deg)
(   23) !
(   24) ! Local variables
(   25) !
(   26) REAL(KIND=JPRD), parameter :: rearth = 6378.170_JPRD   ! earth equatorial radius (km)
(   27) REAL(KIND=JPRD) :: pi
(   28) REAL(KIND=JPRD) :: rlat, rlon, rsatlon, rsatlat    ! angles in radians
(   29) REAL(KIND=JPRD) :: ds, a , rm, rl, tb, b, z        ! for trigonometry
(   30) !
(   31) # 32 "geosangl.F90"
(   32) pi  = acos(-1._JPRD)
(   33) # 34 "geosangl.F90"
(   34) ! conversion to radians
(   35) rsatlon = satlon  /180._JPRD*pi
(   36) rsatlat = satlat  /180._JPRD*pi
(   37) rlon = lon/180._JPRD*pi
(   38) rlat = lat/180._JPRD*pi
(   39) # 40 "geosangl.F90"
(   40) !Distance on the ground
(   41) ds = rearth * 2._JPRD * &
(   42)      asin(((1._JPRD-sin(rlat)*sin(rsatlat) -  &
(   43)      cos(rlat)*cos(rsatlat)*cos( rlon - rsatlon ))/2._JPRD)**(.5_JPRD))
(   44) # 45 "geosangl.F90"
(   45) !Easy trigonometry
(   46) a = ds / rearth
(   47) rl = rearth * sin(a)
(   48) rm = rearth * cos(a)
(   49) tb = rl / (rearth + satalt - rm)
(   50) b = atan(tb)
(   51) z = a + b
(   52) # 53 "geosangl.F90"
(   53) zenith = z/pi*180._JPRD  !! in degrees
(   54) # 55 "geosangl.F90"
(   55) END SUBROUTINE geosangl
