SET $NMXUPD = 4 ; 
SET $NMXENKF = 120 ; 
SET $NMXENDA = 100 ; 
SET $NMXFCDIAG = 20 ; 
SET $NUMAUX = 9 ; 
SET $NUMTHBOX = 3 ; 
SET $NUMEV = 1 ; 
SET $NUMDIAG = 1 ; 
RESET ALIGN ; 

ALIGN ( body , surfbody_feedback ) ; 

ALIGN ( body , errstat , update [ 1 : $NMXUPD ] , fcdiagnostic_body [ 1 : $NMXFCDIAG ] , conv_body , scatt_body , ssmi_body , gbrad_body , radar_body , resat_averaging_kernel , auxiliary_body , allsky_body , radiance_body , gnssro_body , raingg_body ) ; 

ALIGN ( body , enkf [ 1 : $NMXENKF ] ) ; 

ALIGN ( body , enda [ 1 : $NMXENDA ] ) ; 

ALIGN ( body , surfbody_feedback [ 1 : $NMXENDA ] ) ; 

RESET ONELOOPER ; 

ALIGN ( hdr , fcdiagnostic ) ; 

ONELOOPER ( index , hdr ) ; 

ONELOOPER ( hdr , auxiliary ) ; 

ONELOOPER ( hdr , ensemble ) ; 

ONELOOPER ( hdr , sat ) ; 

ONELOOPER ( hdr , modsurf ) ; 

ONELOOPER ( hdr , gbrad ) ; 

ONELOOPER ( hdr , raingg ) ; 

ONELOOPER ( hdr , conv ) ; 

ONELOOPER ( sat , radiance , ssmi , scatt , satob , resat , limb , radar , radar_station , smos , gnssro , aeolus_hdr ) ; 

ONELOOPER ( radiance , allsky , cloud_sink , collocated_imager_information , surfemiss ) ; 

SET $MDI = 2147483647 ; 
SET $SYNOP = 1 ; 
SET $AIREP = 2 ; 
SET $SATOB = 3 ; 
SET $DRIBU = 4 ; 
SET $BUYO = 4 ; 
SET $TEMP = 5 ; 
SET $PILOT = 6 ; 
SET $SATEM = 7 ; 
SET $PAOB = 8 ; 
SET $SCATT = 9 ; 
SET $LIMB = 10 ; 
SET $ISAC = 11 ; 
SET $RALT = 12 ; 
SET $RADAR = 13 ; 
SET $GBRAD = 14 ; 
SET $LIDAR = 15 ; 
SET $ALLSKY = 16 ; 
SET $RAINGG = 17 ; 
SET $IMSIMS = 18 ; 
SET $REO3 = 206 ; 
SET $RESAT = 206 ; 
SET $ATOVS = 210 ; 
SET $RTOVS = 211 ; 
SET $TOVS = 212 ; 
SET $SSMI = 215 ; 
SET $TCWC = 214 ; 
SET $RADRR = 3 ; 
SET $AEOLUS = 187 ; 
SET $satem500 = 86 ; 
SET $satem250 = 186 ; 
SET $rad1c = 210 ; 
SET $gpsro = 250 ; 
SET $lrad = 251 ; 
SET synop_land = 11 ; 
SET synop_land_auto = 14 ; 
SET add_land_surface = 17 ; 
SET synop_rg1h = 39001 ; 
SET synop_rg3h = 39002 ; 
SET synop_rg6h = 39003 ; 
SET synop_rg12h = 39004 ; 
SET synop_rg24h = 39005 ; 
SET $u = 3 ; 
SET $v = 4 ; 
SET $z = 1 ; 
SET $dz = 57 ; 
SET $rh = 29 ; 
SET $pwc = 9 ; 
SET $rh2m = 58 ; 
SET $t = 2 ; 
SET $td = 59 ; 
SET $t2m = 39 ; 
SET $td2m = 40 ; 
SET $ts = 11 ; 
SET $ptend = 30 ; 
SET $w = 60 ; 
SET $ww = 61 ; 
SET $vv = 62 ; 
SET $ch = 63 ; 
SET $cm = 64 ; 
SET $cl = 65 ; 
SET $nh = 66 ; 
SET $nn = 67 ; 
SET $hshs = 68 ; 
SET $c = 69 ; 
SET $ns = 70 ; 
SET $sdepth = 71 ; 
SET $e = 72 ; 
SET $tgtg = 73 ; 
SET $spsp1 = 74 ; 
SET $spsp2 = 75 ; 
SET $rs = 76 ; 
SET $eses = 77 ; 
SET $is = 78 ; 
SET $trtr = 79 ; 
SET $rr = 80 ; 
SET $jj = 81 ; 
SET $vs = 82 ; 
SET $ds = 83 ; 
SET $hwhw = 84 ; 
SET $pwpw = 85 ; 
SET $dwdw = 86 ; 
SET $gclg = 87 ; 
SET $rhlc = 88 ; 
SET $rhmc = 89 ; 
SET $rhhc = 90 ; 
SET $n = 91 ; 
SET $sfall = 92 ; 
SET $ps = 110 ; 
SET $dd = 111 ; 
SET $ff = 112 ; 
SET $rawbt = 119 ; 
SET $rawra = 120 ; 
SET $satcl = 121 ; 
SET $scatss = 122 ; 
SET $du = 5 ; 
SET $dv = 6 ; 
SET $u10m = 41 ; 
SET $v10m = 42 ; 
SET $rhlay = 19 ; 
SET $cllqw = 123 ; 
SET $scatv = 124 ; 
SET $scatu = 125 ; 
SET $q = 7 ; 
SET $scatwd = 126 ; 
SET $scatws = 127 ; 
SET $vsp = 8 ; 
SET $vt = 56 ; 
SET $o3lay = 206 ; 
SET $height = 156 ; 
SET $1dvar = 215 ; 
SET $w2 = 160 ; 
SET $cpt = 130 ; 
SET $tsts = 12 ; 
SET $refl = 192 ; 
SET $apdss = 128 ; 
SET $bend_angle = 162 ; 
SET $los = 187 ; 
SET $aerod = 174 ; 
SET $limb_radiance = 163 ; 
SET $chem1 = 181 ; 
SET $chem2 = 182 ; 
SET $chem3 = 183 ; 
SET $chem4 = 184 ; 
SET $chem5 = 185 ; 
SET $cod = 175 ; 
SET $rao = 176 ; 
SET $od = 177 ; 
SET $rfltnc = 178 ; 
SET $nsoilm = 179 ; 
SET $soilm = 180 ; 
SET $flgt_phase = 201 ; 
SET $height_assignment_method = 211 ; 
SET $dopp = 195 ; 
SET $ghg1 = 186 ; 
SET $ghg2 = 188 ; 
SET $ghg3 = 189 ; 
SET $bt_real = 190 ; 
SET $bt_imaginary = 191 ; 
SET $prc = 202 ; 
SET $lnprc = 203 ; 
SET $libksc = 222 ; 
SET $ralt_swh = 220 ; 
SET $ralt_sws = 221 ; 
SET $rawbt_clear = 193 ; 
SET $rawbt_cloudy = 194 ; 
SET $binary_snow_cover = 223 ; 
SET $salinity = 224 ; 
SET $potential_temp = 225 ; 
SET $humidity_mixing_ratio = 226 ; 
SET $airframe_icing = 227 ; 
SET $turbulence_index = 228 ; 
SET $lidar_aerosol_extinction = 236 ; 
SET $lidar_cloud_backscatter = 237 ; 
SET $lidar_cloud_extinction = 238 ; 
SET $cloud_radar_reflectivity = 239 ; 
SET $q2m = 281 ; 
SET $pstation = 107 ; 
SET $pmsl = 108 ; 
SET $pstandard = 109 ; 
SET $vert_vv = 218 ; 
SET $max_wind_shear1 = 219 ; 
SET $tot_zen_delay = 229 ; 
SET $tot_zen_delay_err = 230 ; 
SET $cloud_top_temp = 231 ; 
SET $rawsca = 233 ; 
SET $cloud_top_press = 235 ; 
SET $mean_freq = 241 ; 
SET $u_amb = 242 ; 
SET $v_amb = 243 ; 
SET $lwp = 244 ; 
SET $tcwv = 245 ; 
SET $theta = 225 ; 
SET $cloud_frac_clear = 247 ; 
SET $rawbt_hirs = 248 ; 
SET $rawbt_amsu = 249 ; 
SET $rawbt_hirs20 = 250 ; 
SET $sea_ice = 253 ; 
SET $cloud_frac_covered = 257 ; 
SET $level_mixing_ratio = 258 ; 
SET $radial_velocity = 259 ; 
SET $cloud_ice_water = 260 ; 
SET $wind_gust = 261 ; 
SET $mass_density = 262 ; 
SET $atmosphere_number = 263 ; 
SET $lightning = 265 ; 
SET $level_cloud = 266 ; 
SET $rawbt_amsr_89ghz = 267 ; 
SET $max_wind_shear2 = 268 ; 
SET $lower_layer_p = 269 ; 
SET $upper_layer_p = 270 ; 
SET $cloud_cover = 271 ; 
SET $depth = 272 ; 
SET $ssh = 273 ; 
SET $rawbt_mwts = 274 ; 
SET $rawbt_mwhs = 275 ; 
SET $pressure = 1 ; 
SET $gpheight = 2 ; 
SET $tovs_cha = 3 ; 
SET $scat_cha = 4 ; 
SET $modlevno = 5 ; 
SET $imp_param = 6 ; 
SET $cha_number = 7 ; 
SET $cha_wavelength = 8 ; 
SET $cha_frequency = 9 ; 
SET $ocean_depth = 10 ; 
SET $derived_pressure = 11 ; 
SET $amb_wind_num = 12 ; 
SET $cloud_top_pressure = 13 ; 
SET $tangent_height = 14 ; 
SET $model_pressure = 15 ; 
SET $psealev = 0 ; 
SET $pstalev = 1 ; 
SET $g850hpa = 2 ; 
SET $g700hpa = 3 ; 
SET $p500gpm = 4 ; 
SET $p1000gpm = 5 ; 
SET $p2000gpm = 6 ; 
SET $p3000gpm = 7 ; 
SET $p4000gpm = 8 ; 
SET $g900hpa = 9 ; 
SET $g1000hpa = 10 ; 
SET $g500hpa = 11 ; 
SET $g925hpa = 12 ; 
SET $hirs = 0 ; 
SET $msu = 1 ; 
SET $ssu = 2 ; 
SET $amsua = 3 ; 
SET $amsub = 4 ; 
SET $tmi = 9 ; 
SET $ssmis = 10 ; 
SET $iasi = 16 ; 
SET $amsre = 17 ; 
SET $amsr2 = 63 ; 
SET $mwri = 18 ; 
SET $atms = 19 ; 
SET $meteosat = 20 ; 
SET $iras = 26 ; 
SET $mwts = 27 ; 
SET $mwhs = 28 ; 
SET $gmi = 71 ; 
SET $BG = 1 ; 
SET $ADJ = 2 ; 
CREATE TYPE report_rdbflag_t AS ( 
lat_humon bit1 , 
lat_QCsub bit1 , 
lat_override bit1 , 
lat_flag bit2 , 
lat_HQC_flag bit1 , 
lon_humon bit1 , 
lon_QCsub bit1 , 
lon_override bit1 , 
lon_flag bit2 , 
lon_HQC_flag bit1 , 
date_humon bit1 , 
date_QCsub bit1 , 
date_override bit1 , 
date_flag bit2 , 
date_HQC_flag bit1 , 
time_humon bit1 , 
time_QCsub bit1 , 
time_override bit1 , 
time_flag bit2 , 
time_HQC_flag bit1 , 
stalt_humon bit1 , 
stalt_QCsub bit1 , 
stalt_override bit1 , 
stalt_flag bit2 , 
stalt_HQC_flag bit1 , 
roll_angle_quality bit1 , 
) ; 

CREATE TYPE status_t AS ( 
active bit1 , 
passive bit1 , 
rejected bit1 , 
blacklisted bit1 , 
use_emiskf_only bit1 , 
) ; 

CREATE TYPE datum_rdbflag_t AS ( 
press_humon bit1 , 
press_QCsub bit1 , 
press_override bit1 , 
press_flag bit2 , 
press_HQC_flag bit1 , 
press_judged_prev_an bit2 , 
press_used_prev_an bit1 , 
_press_unused_6 bit6 , 
varno_humon bit1 , 
varno_QCsub bit1 , 
varno_override bit1 , 
varno_flag bit2 , 
varno_HQC_flag bit1 , 
varno_judged_prev_an bit2 , 
varno_used_prev_an bit1 , 
) ; 

CREATE TYPE datum_flag_t AS ( 
final bit4 , 
fg bit4 , 
depar bit4 , 
varQC bit4 , 
blacklist bit4 , 
ups bit1 , 
uvt bit1 , 
uhu bit1 , 
ut2 bit1 , 
uh2 bit1 , 
uv1 bit1 , 
urr bit1 , 
usn bit1 , 
usst bit1 , 
) ; 

CREATE TYPE level_t AS ( 
maxwind bit1 , 
tropopause bit1 , 
D_part bit1 , 
C_part bit1 , 
B_part bit1 , 
A_part bit1 , 
surface bit1 , 
signwind bit1 , 
signtemp bit1 , 
) ; 

CREATE TYPE report_event1_t AS ( 
no_data bit1 , 
all_rejected bit1 , 
bad_practice bit1 , 
rdb_rejected bit1 , 
redundant bit1 , 
stalt_missing bit1 , 
QC_failed bit1 , 
overcast_ir bit1 , 
thinned bit1 , 
latlon_corrected bit1 , 
stalt_corrected bit1 , 
) ; 

CREATE TYPE report_event2_t AS ( 
) ; 

CREATE TYPE report_blacklist_t AS ( 
obstype bit1 , 
statid bit1 , 
codetype bit1 , 
instype bit1 , 
date bit1 , 
time bit1 , 
lat bit1 , 
lon bit1 , 
stalt bit1 , 
scanpos bit1 , 
retrtype bit1 , 
QI_fc bit1 , 
RFF bit1 , 
QI_nofc bit1 , 
modoro bit1 , 
lsmask bit1 , 
rlsmask bit1 , 
modPS bit1 , 
modTS bit1 , 
modT2M bit1 , 
modtop bit1 , 
sensor bit1 , 
fov bit1 , 
satza bit1 , 
andate bit1 , 
antime bit1 , 
solar_elevation bit1 , 
quality_retrieval bit1 , 
cloud_cover bit1 , 
cloud_top_pressure bit1 , 
product_type bit1 , 
sonde_type bit1 , 
) ; 

CREATE TYPE datum_event1_t AS ( 
vertco_missing bit1 , 
obsvalue_missing bit1 , 
fg_missing bit1 , 
rdb_rejected bit1 , 
assim_cld_flag bit1 , 
bad_practice bit1 , 
vertpos_outrange bit1 , 
fg2big bit1 , 
depar2big bit1 , 
obs_error2big bit1 , 
datum_redundant bit1 , 
level_redundant bit1 , 
not_analysis_varno bit1 , 
duplicate bit1 , 
levels2many bit1 , 
level_selection bit1 , 
vertco_consistency bit1 , 
vertco_type_changed bit1 , 
combined_flagging bit1 , 
report_rejected bit1 , 
varQC_performed bit1 , 
obserror_increased bit1 , 
contam_cld_flag bit1 , 
contam_rain_flag bit1 , 
contam_aerosol_flag bit1 , 
bad_emissivity bit1 , 
model_cld_flag bit1 , 
contam_trgas_flag bit1 , 
land_sensitivity bit1 , 
) ; 

CREATE TYPE datum_event2_t AS ( 
) ; 

CREATE TYPE datum_sfc_event_t AS ( 
statid bit1 , 
lsmask bit1 , 
stalt_missing bit1 , 
obsvalue_missing bit1 , 
fg_missing bit1 , 
fg2big bit1 , 
not_analysis_varno bit1 , 
redundant bit1 , 
report_rejected bit1 , 
) ; 

CREATE TYPE datum_blacklist_t AS ( 
varno bit1 , 
vertco_type bit1 , 
press bit1 , 
press_rl bit1 , 
ppcode bit1 , 
obsvalue bit1 , 
fg_depar bit1 , 
obs_error bit1 , 
fg_error bit1 , 
winchan_dep bit1 , 
obs_t bit1 , 
elevation bit1 , 
winchan_dep2 bit1 , 
tausfc bit1 , 
csr_pclear bit1 , 
) ; 

CREATE TYPE aeolus_hdrflag_t AS ( 
nadir_location bit1 , 
orbit_predicted bit1 , 
omit_from_EE bit1 , 
) ; 

CREATE TABLE desc AS ( 
expver string , 
class pk1int , 
stream pk1int , 
type pk1int , 
andate YYYYMMDD , 
antime HHMMSS , 
inidate YYYYMMDD , 
initime HHMMSS , 
creadate YYYYMMDD , 
creatime HHMMSS , 
creaby string , 
moddate YYYYMMDD , 
modtime HHMMSS , 
modby string , 
mxup_traj pk1int , 
numtsl pk1int , 
poolmask @LINK , 
timeslot_index @LINK , 
fcdiagnostic @LINK , 
latlon_rad pk1int , 
enda_member pk1int , 
) ; 

CREATE TABLE poolmask AS ( 
timeslot pk1int , 
obstype pk1int , 
codetype pk1int , 
sensor pk1int , 
bufrtype pk1int , 
subtype pk1int , 
poolno pk1int , 
hdr_count pk1int , 
body_count pk1int , 
max_bodylen pk1int , 
) ; 

CREATE TABLE timeslot_index AS ( 
timeslot pk1int , 
model_timestep pk1int , 
enddate YYYYMMDD , 
endtime HHMMSS , 
index @LINK , 
) ; 

CREATE TABLE index AS ( 
target pk1int , 
procid pk1int , 
timeslot pk1int , 
kset pk1int , 
abnob pk1int , 
mapomm pk1int , 
maptovscv pk1int , 
hdr @LINK , 
) ; 

CREATE TABLE hdr AS ( 
seqno pk1int , 
subseqno pk1int , 
reportno pk1int , 
bufrtype pk1int , 
subtype pk1int , 
subsetno pk9int , 
groupid pk1int , 
reportype pk1int , 
obstype pk1int , 
codetype pk1int , 
sensor pk1int , 
retrtype pk1int , 
instrument_type pk1int , 
stalt pk9real , 
date YYYYMMDD , 
time HHMMSS , 
rdbdate YYYYMMDD , 
rdbtime HHMMSS , 
distribtype pk1int , 
distribid pk1int , 
gp_dist pk9real , 
gp_number pk1int , 
numlev pk1int , 
numactiveb pk1int , 
checksum pk9real , 
sortbox pk1int , 
areatype pk1int , 
report_status STATUS_t , 
report_event1 REPORT_EVENT1_t , 
report_rdbflag REPORT_RDBFLAG_t , 
report_blacklist REPORT_BLACKLIST_t , 
report_event2 REPORT_EVENT2_t , 
thinningkey [ $NUMTHBOX ] pk9real , 
thinningtimekey pk9real , 
sitedep pk1int , 
source string , 
lat pk9real , 
lon pk9real , 
trlat pk9real , 
trlon pk9real , 
modsurf @LINK , 
statid string , 
conv @LINK , 
sat @LINK , 
body @LINK , 
errstat @LINK , 
update [ 1 : $NMXUPD ] @LINK , 
auxiliary @LINK , 
ensemble @LINK , 
gbrad @LINK , 
raingg @LINK , 
surfbody_feedback @LINK , 
window_offset pk1int , 
) ; 

CREATE TABLE ensemble AS ( 
nensemble pk1int , 
enkf [ 1 : $NMXENKF ] @LINK , 
enda [ 1 : $NMXENDA ] @LINK , 
surfbody_feedback [ 1 : $NMXENDA ] @LINK , 
) ; 

CREATE TABLE enkf [ 1 : $NMXENKF ] AS ( 
member pk1int , 
hprior pk9real , 
) ; 

CREATE TABLE enda [ 1 : $NMXENDA ] AS ( 
member pk1int , 
report_status STATUS_t , 
report_event1 REPORT_EVENT1_t , 
obsvalue pk9real , 
datum_anflag DATUM_FLAG_t , 
datum_status TYPEOF ( report_status@hdr ) , 
datum_event1 DATUM_EVENT1_t , 
biascorr pk9real , 
biascorr_fg pk9real , 
an_depar pk9real , 
fg_depar pk9real , 
qc_pge pk9real , 
final_obs_error pk9real , 
obs_error pk9real , 
fg_error pk9real , 
skintemp [ $NMXUPD + 1 ] pk9real , 
) ; 

CREATE TABLE surfbody_feedback [ 1 : $NMXENDA ] AS ( 
datum_status TYPEOF ( report_status@hdr ) , 
datum_sfc_event datum_sfc_event_t , 
an_depar pk9real , 
fg_depar pk9real , 
snow_depth pk9real , 
snow_density pk9real , 
lsm pk9real , 
) ; 

CREATE TABLE fcdiagnostic AS ( 
max_fcdiag pk1int , 
fcdiagnostic_body [ $NMXFCDIAG ] @LINK , 
) ; 

CREATE TABLE fcdiagnostic_body [ 1 : $NMXFCDIAG ] AS ( 
fc_depar pk9real , 
fc_step YYYYMMDD , 
) ; 

CREATE TABLE gbrad AS ( 
report_rrflag pk1int , 
gbrad_body @LINK , 
) ; 

CREATE TABLE gbrad_body AS ( 
rrvalue pk9real , 
rrvaluetl pk9real , 
rrvaluead pk9real , 
) ; 

CREATE TABLE raingg AS ( 
report_rrflag pk1int , 
raingg_body @LINK , 
) ; 

CREATE TABLE raingg_body AS ( 
rrvalue pk9real , 
rrvaluetl pk9real , 
rrvaluead pk9real , 
) ; 

CREATE TABLE conv AS ( 
flight_phase pk1int , 
flight_dp_o_dt pk9real , 
anemoht pk9real , 
baroht pk9real , 
station_type pk1int , 
sonde_type pk1int , 
collection_identifier pk1int , 
country pk1int , 
unique_identifier pk1int , 
timeseries_index pk1int , 
heading pk9real , 
aircraft_type string , 
conv_body @LINK , 
) ; 

CREATE TABLE conv_body AS ( 
ppcode pk1int , 
level LEVEL_t , 
datum_qcflag pk1int , 
) ; 

CREATE TABLE sat AS ( 
satellite_identifier pk1int , 
satellite_instrument pk1int , 
zenith pk9real , 
azimuth pk9real , 
solar_zenith pk9real , 
solar_azimuth pk9real , 
range pk9real , 
arg_lat pk9real , 
lsm_fov pk9real , 
gen_centre pk1int , 
gen_subcentre pk1int , 
datastream pk1int , 
radiance @LINK , 
resat @LINK , 
gnssro @LINK , 
satob @LINK , 
limb @LINK , 
ssmi @LINK , 
smos @LINK , 
scatt @LINK , 
aeolus_hdr @LINK , 
radar_station @LINK , 
radar @LINK , 
) ; 

CREATE TABLE modsurf AS ( 
lsm pk9real , 
seaice pk9real , 
orography pk9real , 
snow_depth pk9real , 
t2m pk9real , 
albedo pk9real , 
windspeed10m pk9real , 
u10m pk9real , 
v10m pk9real , 
surface_class pk1int , 
tsfc pk9real , 
) ; 

CREATE TABLE surfbody_feedback AS ( 
datum_status TYPEOF ( report_status@hdr ) , 
datum_sfc_event datum_sfc_event_t , 
an_depar pk9real , 
fg_depar pk9real , 
snow_depth pk9real , 
snow_density pk9real , 
lsm pk9real , 
) ; 

CREATE TABLE radiance AS ( 
scanline pk1int , 
scanpos pk1int , 
orbit pk1int , 
typesurf pk1int , 
corr_version pk1int , 
cldcover pk1int , 
cldptop [ 1 : 3 ] pk9real , 
cldne [ 1 : 3 ] pk9real , 
skintemper pk9real , 
skintemp [ $NMXUPD + 1 ] pk9real , 
scatterindex_89_157 pk9real , 
scatterindex_23_89 pk9real , 
scatterindex_23_165 pk9real , 
lwp_obs pk9real , 
asr_pclear pk1int , 
asr_pcloudy pk1int , 
asr_pcloudy_low pk1int , 
asr_pcloudy_middle pk1int , 
asr_pcloudy_high pk1int , 
allsky @LINK , 
cloud_sink @LINK , 
collocated_imager_information @LINK , 
radiance_body @LINK , 
) ; 

CREATE TABLE radiance_body AS ( 
csr_pclear pk9real , 
cld_fg_depar pk9real , 
rank_cld pk9real , 
tausfc pk9real , 
skintemp_retr pk9real , 
tbclear pk9real , 
emis_rtin pk9real , 
emis_atlas pk9real , 
emis_atlas_error pk9real , 
emis_retr pk9real , 
emis_fg pk9real , 
cold_nedt pk9real , 
warm_nedt pk9real , 
channel_qc pk1int , 
nobs_averaged pk1int , 
stdev_averaged pk9real , 
zenith_by_channel pk9real , 
dust_aod_ir pk9real , 
) ; 

CREATE TABLE allsky AS ( 
fg_rain_rate pk9real , 
fg_snow_rate pk9real , 
fg_tcwv pk9real , 
fg_cwp pk9real , 
fg_iwp pk9real , 
fg_rwp pk9real , 
fg_swp pk9real , 
fg_rttov_cld_fraction pk9real , 
fg_theta700 pk9real , 
fg_thetasfc pk9real , 
fg_uth pk9real , 
fg_conv pk9real , 
fg_pbl pk9real , 
an_rain_rate pk9real , 
an_snow_rate pk9real , 
an_tcwv pk9real , 
an_cwp pk9real , 
an_iwp pk9real , 
an_rwp pk9real , 
an_swp pk9real , 
an_rttov_cld_fraction pk9real , 
an_theta700 pk9real , 
an_thetasfc pk9real , 
an_uth pk9real , 
an_conv pk9real , 
an_pbl pk9real , 
gnorm_10mwind pk9real , 
gnorm_skintemp pk9real , 
gnorm_temp pk9real , 
gnorm_q pk9real , 
gnorm_rainflux pk9real , 
gnorm_snowflux pk9real , 
gnorm_clw pk9real , 
gnorm_ciw pk9real , 
gnorm_cc pk9real , 
ob_p19 pk9real , 
fg_p19 pk9real , 
an_p19 pk9real , 
ob_p37 pk9real , 
fg_p37 pk9real , 
an_p37 pk9real , 
report_tbcloud pk1int , 
allsky_body @LINK , 
) ; 

CREATE TABLE allsky_body AS ( 
tbvalue pk9real , 
tbvaluetl pk9real , 
tbvaluead pk9real , 
datum_tbflag pk1int , 
) ; 

CREATE TABLE cloud_sink AS ( 
ctop [ $NMXUPD ] pk9real , 
camt [ $NMXUPD ] pk9real , 
ctopbg pk9real , 
ctoper pk9real , 
ctopinc pk9real , 
camtbg pk9real , 
camter pk9real , 
camtinc pk9real , 
) ; 

CREATE TABLE collocated_imager_information AS ( 
avhrr_mean_ir pk9real , 
avhrr_stddev_ir pk9real , 
avhrr_stddev_ir2 pk9real , 
avhrr_num_clusters pk9real , 
avhrr_mean_vis pk9real , 
avhrr_stddev_vis pk9real , 
avhrr_max_cluster pk9real , 
avhrr_coldest_cluster_ir pk9real , 
avhrr_warmest_cluster_ir pk9real , 
avhrr_largest_cluster_ir pk9real , 
provider_qc pk1int , 
avhrr_frac_cl1 pk9real , 
avhrr_frac_cl2 pk9real , 
avhrr_frac_cl3 pk9real , 
avhrr_frac_cl4 pk9real , 
avhrr_frac_cl5 pk9real , 
avhrr_frac_cl6 pk9real , 
avhrr_frac_cl7 pk9real , 
avhrr_m_ir1_cl1 pk9real , 
avhrr_m_ir1_cl2 pk9real , 
avhrr_m_ir1_cl3 pk9real , 
avhrr_m_ir1_cl4 pk9real , 
avhrr_m_ir1_cl5 pk9real , 
avhrr_m_ir1_cl6 pk9real , 
avhrr_m_ir1_cl7 pk9real , 
avhrr_m_ir2_cl1 pk9real , 
avhrr_m_ir2_cl2 pk9real , 
avhrr_m_ir2_cl3 pk9real , 
avhrr_m_ir2_cl4 pk9real , 
avhrr_m_ir2_cl5 pk9real , 
avhrr_m_ir2_cl6 pk9real , 
avhrr_m_ir2_cl7 pk9real , 
avhrr_fg_ir1 pk9real , 
avhrr_fg_ir2 pk9real , 
avhrr_cloud_flag pk1int , 
) ; 

CREATE TABLE auxiliary AS ( 
report_aux [ $NUMAUX ] pk9real , 
auxiliary_body @LINK , 
) ; 

CREATE TABLE auxiliary_body AS ( 
datum_aux [ $NUMAUX ] pk9real , 
) ; 

SET $resat_retrtype_ak = 1 ; 
SET $resat_retrtype = 0 ; 
-- The following depends on resat data, so watch for it!
SET $mx_ak = 50 ; 
CREATE TABLE resat AS ( 
instrument_type pk1int , 
product_type pk1int , 
lat_fovcorner [ 1 : 4 ] pk9real , 
lon_fovcorner [ 1 : 4 ] pk9real , 
solar_elevation pk9real , 
scanpos pk1int , 
cloud_cover pk9real , 
cloud_top_press pk9real , 
quality_retrieval pk1int , 
number_layers pk1int , 
resat_averaging_kernel @LINK , 
snow_ice_indicator pk1int , 
surface_type_indicator pk1int , 
methane_correction pk9real , 
surface_height pk9real , 
retrsource pk1int , 
) ; 

CREATE TABLE resat_averaging_kernel AS ( 
nak pk1int , 
wak [ $mx_ak ] pk9real , 
pak [ $mx_ak ] pk9real , 
apak [ $mx_ak ] pk9real , 
) ; 

CREATE TABLE gnssro AS ( 
radcurv pk9real , 
undulation pk9real , 
gnssro_body @LINK , 
) ; 

CREATE TABLE gnssro_body AS ( 
obs_dndz pk9real , 
obs_refractivity pk9real , 
bg_dndz pk9real , 
bg_refractivity pk9real , 
bg_layerno pk9real , 
obs_tvalue pk9real , 
obs_zvalue pk9real , 
bg_tvalue pk9real , 
) ; 

CREATE TABLE satob AS ( 
comp_method pk1int , 
instdata pk1int , 
dataproc pk1int , 
QI_fc pk1int , 
QI_nofc pk1int , 
RFF pk1int , 
EE pk9real , 
segment_size_x pk9real , 
segment_size_y pk9real , 
chan_freq pk9real , 
tb pk9real , 
t pk9real , 
shear pk9real , 
t200 pk9real , 
t500 pk9real , 
top_mean_t pk9real , 
top_wv pk9real , 
dt_by_dp pk9real , 
p_best pk9real , 
u_best pk9real , 
v_best pk9real , 
dd_best pk9real , 
ff_best pk9real , 
p_old pk9real , 
u_old pk9real , 
v_old pk9real , 
height_assignment_method pk1int , 
tracer_correlation_method pk1int , 
land_sea pk1int , 
tracking_error_u pk9real , 
tracking_error_v pk9real , 
h_assignment_error_u pk9real , 
h_assignment_error_v pk9real , 
error_in_h_assignment pk9real , 
) ; 

CREATE TABLE scatt AS ( 
cellno pk1int , 
nretr_amb pk1int , 
prodflag pk1int , 
wvc_qf pk1int , 
scatt_body @LINK , 
) ; 

CREATE TABLE scatt_body AS ( 
azimuth pk9real , 
incidence pk9real , 
Kp pk9real , 
invresid pk9real , 
dirskill pk9real , 
mpc pk1int , 
Kp_qf pk1int , 
ambig_select pk1int , 
sigma0_qf pk1int , 
sigma0_sm pk9real , 
soilmoist_sd pk9real , 
soilmoist_cf pk1int , 
soilmoist_pf pk1int , 
land_fraction pk9real , 
wetland_fraction pk9real , 
topo_complex pk9real , 
likelihood pk9real , 
) ; 

CREATE TABLE ssmi AS ( 
iterno_conv_1dvar pk1int , 
simno_conv_1dvar pk1int , 
failure_1dvar pk1int , 
epsg_1dvar pk9real , 
minim_status_1dvar pk1int , 
surfpress [ 1 ] pk9real , 
skintemp [ 1 ] pk9real , 
u10m [ 2 ] pk9real , 
v10m [ 2 ] pk9real , 
prec_st [ 2 ] pk9real , 
prec_cv [ 2 ] pk9real , 
cost pk9real , 
sfc_rain_3d_fg pk9real , 
sfc_snow_3d_fg pk9real , 
sfc_rain_3d_an pk9real , 
sfc_snow_3d_an pk9real , 
rwp [ 4 ] pk9real , 
swp [ 4 ] pk9real , 
cwp [ 4 ] pk9real , 
iwp [ 4 ] pk9real , 
ssmi_body @LINK , 
) ; 

CREATE TABLE ssmi_body AS ( 
tcwv_fg pk9real , 
tcwv_fg_err pk9real , 
radcost pk9real , 
rad_obs pk9real , 
rad_fg_depar pk9real , 
rad_an_depar pk9real , 
rad_obs_err pk9real , 
rad_bias pk9real , 
rad_fg_3d pk9real , 
rad_4dan pk9real , 
frequency pk9real , 
bandwidth pk9real , 
polarisation pk9real , 
press pk9real , 
temp [ 2 ] pk9real , 
q [ 2 ] pk9real , 
rain [ 2 ] pk9real , 
snow [ 2 ] pk9real , 
) ; 

CREATE TABLE smos AS ( 
snapshot_id pk1int , 
grid_point_id pk1int , 
electron_count pk9real , 
sun_bt pk9real , 
snapshot_acc pk9real , 
rad_acc_pure pk9real , 
rad_acc_cross pk9real , 
footprint_axis [ 2 ] pk9real , 
polarisation pk1int , 
water_fraction pk9real , 
incidence_angle pk9real , 
faradey_rot_angle pk9real , 
pixel_rot_angle pk9real , 
info pk1int , 
snapshot_quality pk1int , 
report_tbflag pk1int , 
tbvalue pk9real , 
nobs_averaged pk1int , 
stdev_averaged pk9real , 
) ; 

CREATE TABLE radar_station AS ( 
ident pk1int , 
type string , 
lat pk9real , 
lon pk9real , 
stalt pk9real , 
antenht pk9real , 
beamwidth pk9real , 
frequency pk9real , 
) ; 

SET $mx_radar_niv = 15 ; 
CREATE TABLE radar AS ( 
iternoconv_1dv pk1int , 
failure_1dv pk1int , 
qmod [ $mx_radar_niv ] pk9real , 
zsimp [ $mx_radar_niv ] pk9real , 
radar_body @LINK , 
) ; 

CREATE TABLE radar_body AS ( 
flgdyn pk1int , 
time HHMMSS , 
distance pk9real , 
elevation pk9real , 
polarisation pk9real , 
anaprop pk1int , 
reflcost pk9real , 
azimuth pk9real , 
press pk9real , 
temp [ 2 ] pk9real , 
q [ 2 ] pk9real , 
temp_1dv pk9real , 
q_1dv pk9real , 
) ; 

-- The following depends on rtlimb instruments (jpmxtan in mod_rtlimb_cparam),
-- so watch for it!
SET $mx_limb_tan = 17 ; 
CREATE TABLE limb AS ( 
ntan pk1int , 
ztan [ $mx_limb_tan ] pk9real , 
ptan [ $mx_limb_tan ] pk9real , 
thtan [ $mx_limb_tan ] pk9real , 
cloud_index [ $mx_limb_tan ] pk9real , 
window_rad [ $mx_limb_tan ] pk9real , 
) ; 

CREATE TABLE body AS ( 
entryno pk1int , 
obsvalue pk9real , 
varno pk1int , 
vertco_type pk1int , 
vertco_reference_1 pk9real , 
vertco_reference_2 pk9real , 
datum_anflag DATUM_FLAG_t , 
datum_status TYPEOF ( report_status@hdr ) , 
datum_event1 DATUM_EVENT1_t , 
datum_rdbflag DATUM_RDBFLAG_t , 
datum_blacklist DATUM_BLACKLIST_t , 
datum_event2 DATUM_EVENT2_t , 
varbc_ix pk1int , 
biascorr pk9real , 
biascorr_fg pk9real , 
tbcorr pk9real , 
bias_volatility pk9real , 
wdeff_bcorr pk9real , 
an_depar pk9real , 
fg_depar pk9real , 
actual_depar pk9real , 
actual_ndbiascorr pk9real , 
qc_a pk9real , 
qc_l pk9real , 
qc_pge pk9real , 
fc_sens_obs pk9real , 
an_sens_obs pk9real , 
jacobian_peak pk9real , 
jacobian_peakl pk9real , 
jacobian_hpeak pk9real , 
jacobian_hpeakl pk9real , 
mf_vertco_type pk1int , 
mf_log_p pk9real , 
mf_stddev pk9real , 
nlayer pk1int , 
) ; 

CREATE TABLE errstat AS ( 
final_obs_error pk9real , 
obs_error pk9real , 
repres_error pk9real , 
pers_error pk9real , 
fg_error pk9real , 
eda_spread pk9real , 
obs_ak_error pk9real , 
obs_corr_ev [ $NUMEV ] pk9real , 
obs_corr_mask pk1int , 
obs_corr_diag [ $NUMDIAG ] pk9real , 
) ; 

CREATE TABLE update [ 1 : $NMXUPD ] AS ( 
hires pk9real , 
lores pk9real , 
datum_tbflag_hires pk1int , 
datum_status_hires TYPEOF ( report_status@hdr ) , 
obs_diags [ 1 : 3 ] pk9real , 
) ; 

CREATE TABLE aeolus_hdr AS ( 
aeolus_hdrflag aeolus_hdrflag_t , 
aeolus_auxmet @LINK , 
aeolus_l2c @LINK , 
aeolus_l2b @LINK , 
) ; 

CREATE TABLE aeolus_auxmet AS ( 
lev pk9real , 
ptop pk9real , 
pnom pk9real , 
ztop pk9real , 
znom pk9real , 
u pk9real , 
v pk9real , 
t pk9real , 
rh pk9real , 
q pk9real , 
cc pk9real , 
clwc pk9real , 
ciwc pk9real , 
error_t pk9real , 
error_rh pk9real , 
error_p pk9real , 
) ; 

CREATE TABLE aeolus_l2c AS ( 
hlos_ob_err pk9real , 
hlos_fg pk9real , 
u_fg pk9real , 
u_fg_err pk9real , 
v_fg pk9real , 
v_fg_err pk9real , 
hlos_fg_err pk9real , 
hlos_an pk9real , 
hlos_an_err pk9real , 
u_an pk9real , 
v_an pk9real , 
) ; 

CREATE TABLE aeolus_l2b AS ( 
t_ref pk9real , 
p_ref pk9real , 
beta pk9real , 
dhlos_dt pk9real , 
dhlos_dp pk9real , 
dhlos_dbeta pk9real , 
horiz_length pk9real , 
vert_length pk9real , 
conf_flag pk1int , 
) ; 

;
