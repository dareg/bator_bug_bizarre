


NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fanion.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FANION_MT64                                                &
(    4) &                     (FA,  KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,     &
(    5) &                      LDEXIS, LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(    6) USE FA_MOD, ONLY : FA_COM
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !      Sous-programme renseignant sur l'EXISTENCE et les CARACTERISTI-
(   13) !     QUES eventuelles d'un Article de type CHAMP dans un Fichier ARPEGE
(   14) !       ( LDEXIS est le "fanion" leve si l'article existe )
(   15) !**
(   16) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   17) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   18) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   19) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   20) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   21) !                LDEXIS (Sortie) ==> Vrai si l'article de type CHAMP
(   22) !                                    existe bien dans le Fichier;
(   23) !                LDCOSP (Sortie) ==> Vrai si le champ est represente
(   24) !                                    par des coefficients spectraux;
(   25) !                KNGRIB (Sortie) ==> Niveau de codage GRIB;
(   26) !    Si KNGRIB vaut -1,0,1,2,3, alors les arguments de sortie ont la 
(   27) !    signification suivante:
(   28) !                KNARG1 (Sortie) ==> Nombre de bits de codage eventuel;
(   29) !                KNARG2 (Sortie) ==> Sous-troncature non codee   " -le;
(   30) !                KNARG3 (Sortie) ==> Puissance de laplacien eventuelle.






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 3

(   31) !    Si KNGRIB vaut 4, alors les arguments de sortie ont la signification
(   32) !    suivante:
(   33) !                KNARG1 (Sortie) ==> Taille de la couronne a conserver
(   34) !                KNARG2 (Sortie) ==> Nombre de bits utilises pour le codage
(   35) !                KNARG3 (Sortie) ==> Inutilise
(   36) !             
(   37) !
(   38) !        KNARG1 n'a de sens que si l'article existe et a ete code;
(   39) !     de meme pour KNARG2 et KNARG3, qui ne sont applicables qu'a un
(   40) !     champ represente en coefficients spectraux.
(   41) !        Les arguments de sortie n'ayant pas de sens sont mis a
(   42) !     0 pour les entiers, .FALSE. pour les logiques.
(   43) !
(   44) !
(   45) !
(   46) TYPE(FA_COM) :: FA
(   47) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIVAU, KNGRIB
(   48) INTEGER (KIND=JPLIKB) KNARG1, KNARG2, KNARG3
(   49) !
(   50) INTEGER (KIND=JPLIKB) IREP, ILPRFU, ILSUFU, ILNOMU
(   51) INTEGER (KIND=JPLIKB) ILONGA, IRANG, INIMES
(   52) INTEGER (KIND=JPLIKB) ILPREF, ILSUFF, IPOSEX
(   53) INTEGER (KIND=JPLIKB) IRANGC, ILCHAM
(   54) !
(   55) INTEGER (KIND=JPLIKB) IVALCO (5)
(   56) INTEGER (KIND=JPLIKB)  IB1PAR (3)
(   57) !
(   58) LOGICAL LLVERF, LLRLFI, LDCOSP, LDEXIS, LLTEMP, LLNOMU, LLMLAM
(   59) !
(   60) CHARACTER CDPREF*(*), CDSUFF*(*)
(   61) CHARACTER CLPREF*(FA%JPXNOM), CLSUFF*(FA%JPXSUF)
(   62) !
(   63) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   64) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   65) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   66) LOGICAL                  LLFATA
(   67) 
(   68) !**
(   69) !     1.  -  CONTROLES ET INITIALISATIONS.
(   70) !-----------------------------------------------------------------------
(   71) !
(   72) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   73) IF (LHOOK) CALL DR_HOOK('FANION_MT',0,ZHOOK_HANDLE)
(   74) IREP=0
(   75) LLVERF=.FALSE.
(   76) LLTEMP=.FALSE.
(   77) LLRLFI=.FALSE.
(   78) LLNOMU=.FALSE.
(   79) ILPRFU=INT (LEN (CDPREF), JPLIKB)
(   80) ILSUFU=INT (LEN (CDSUFF), JPLIKB)
(   81) LDEXIS=.FALSE.
(   82) LDCOSP=.FALSE.
(   83) KNGRIB=0
(   84) KNARG1=0
(   85) KNARG2=0
(   86) KNARG3=0
(   87) CALL FANUMU_MT64                 &
(   88) &               (FA, KNUMER,IRANG)






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 4

(   89) !
(   90) IF (IRANG.EQ.0) THEN
(   91)   IREP=-51
(   92)   GOTO 1001
(   93) ENDIF
(   94) !
(   95) !         Verrouillage eventuel du fichier.
(   96) !
(   97) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   98) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   99) LLVERF=FA%LFAMUL
(  100) !
(  101) IF (FA%FICHIER(IRANG)%LCREAF) GOTO 1001
(  102) !**
(  103) !     2.  -  FABRICATION DU NOM D'ARTICLE VIA LE SOUS-PROGRAMME "FANFAR"
(  104) !            ( controles de CDPREF, KNIVAU, CDSUFF inclus )
(  105) !-----------------------------------------------------------------------
(  106) !
(  107) CALL FANFAR_MT64                                             &
(  108) &               (FA, IREP,IRANG,CDPREF,KNIVAU,CDSUFF,CLNOMA, &
(  109) &                IB1PAR,ILPRFU,ILSUFU,ILNOMU)
(  110) IF (IREP.NE.0) GOTO 1001
(  111) LLNOMU=.TRUE.
(  112) !**
(  113) !     3.  -  RECHERCHE DE L'ARTICLE SUR LE FICHIER, LECTURE PARTIELLE.
(  114) !-----------------------------------------------------------------------
(  115) !
(  116) CALL LFINFO_MT64                                       &
(  117) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  118) &             ILONGA,IPOSEX)
(  119) LLRLFI=IREP.NE.0
(  120) IF (LLRLFI.OR.ILONGA.EQ.0) GOTO 1001
(  121) LDEXIS=.TRUE.
(  122) !
(  123) IF (ILONGA.GT.FA%JPXCHA+2) THEN
(  124)   IREP=-90
(  125)   GOTO 1001
(  126) ENDIF
(  127) !
(  128) IF (FA%FICHIER(IRANG)%LERRFA) THEN
(  129) !
(  130) !        Le fichier est gere en mode "toute erreur est fatale".
(  131) !     Ce mode etant normalement couple au mode correspondant du logiciel
(  132) !     LFI, on va temporairement annuler l'option LFI afin de pouvoir
(  133) !     faire une lecture partielle de l'entete de l'article Champ.
(  134) !
(  135)   CALL LFIERF_MT64                             &
(  136) &                 (FA%LFI, IREP,KNUMER,.FALSE.)
(  137)   LLRLFI=IREP.NE.0
(  138)   IF (LLRLFI) GOTO 1001
(  139)   LLTEMP=.TRUE.
(  140) ENDIF
(  141) !
(  142) CALL LFILEC_MT64                                       &
(  143) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  144) &               IVALCO,5_JPLIKB )
(  145) !
(  146) IF (IREP.EQ.0) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 5

(  147)   IREP=-93
(  148)   GOTO 1001
(  149) ELSEIF (IREP.NE.-21) THEN
(  150)   LLRLFI=.TRUE.
(  151)   GOTO 1001
(  152) ELSEIF ((IVALCO(1).LT.-2 .OR. IVALCO(1).GT.4 .OR.                   &
(  153) &       (IVALCO(2).LT.0  .OR. IVALCO(2).GT.1 .OR.                   &
(  154) &       (IVALCO(1).GT.0 .AND. IVALCO(2).EQ.1 .AND. IVALCO(4).LT.0)))&
(  155) & .AND. (.NOT. FALGRA (IVALCO(1)))) THEN
(  156)   IREP=-91
(  157)   GOTO 1001
(  158) ELSE
(  159)   IREP=0
(  160)   KNGRIB=IVALCO(1)
(  161)   LDCOSP=IVALCO(2).EQ.1
(  162) ENDIF
(  163) !
(  164) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  165) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(  166) !
(  167) IF (LDCOSP) THEN
(  168)   IF (LLMLAM) THEN
(  169)      ILCHAM=FA%CADRE(IRANGC)%NSFLAM
(  170)   ELSE
(  171)      IF (KNGRIB.EQ.3 .OR. KNGRIB.EQ.-1) THEN
(  172)        ILCHAM=(1+FA%CADRE(IRANGC)%MTRONC)*(2+FA%CADRE(IRANGC)%MTRONC)
(  173)      ELSE
(  174)        ILCHAM=(1+FA%CADRE(IRANGC)%MTRONC)**2
(  175)      ENDIF
(  176)   ENDIF
(  177) ELSE
(  178)   ILCHAM=FA%CADRE(IRANGC)%NVAPDG
(  179) ENDIF
(  180) !
(  181) IF (KNGRIB.EQ.-1 .OR. KNGRIB.EQ.0) THEN
(  182) !
(  183) !          Cas ou il n'y a aucun codage... controle longueur d'article
(  184) !
(  185)   IF (ILONGA.LT.(ILCHAM+2)) THEN
(  186)     IREP=-93
(  187)     GOTO 1001
(  188)   ELSEIF (ILONGA.GT.(ILCHAM+2)) THEN
(  189)     IREP=-94
(  190)     IF (LLMOER(IREP,IRANG)) GOTO 1001
(  191)   ENDIF
(  192) !
(  193) ELSEIF (KNGRIB.EQ.-2) THEN
(  194)   IF (ILONGA .LT. ((ILCHAM+1)/2+2)) THEN
(  195)     IREP=-93
(  196)     GOTO 1001
(  197)   ELSEIF (ILONGA .GT. ((ILCHAM+1)/2+2)) THEN
(  198)     IREP=-94
(  199)     IF (LLMOER(IREP,IRANG)) GOTO 1001
(  200)   ENDIF
(  201) ELSEIF (KNGRIB.EQ.4) THEN
(  202)   KNARG1=IVALCO(3)
(  203)   KNARG2=IVALCO(4)
(  204) ELSEIF (FALGRA (KNGRIB)) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 6

(  205)   LDCOSP=IVALCO(2).EQ.1
(  206)   KNARG1=IVALCO(3)
(  207) ELSE
(  208) !
(  209) !        Cas avec codage GRIB (standard ou non).
(  210) !
(  211)   KNARG1=IVALCO(3)
(  212) !
(  213)   IF (LDCOSP) THEN
(  214)     KNARG2=IVALCO(4)
(  215)     KNARG3=IVALCO(5)
(  216) !
(  217)     IF (KNGRIB.EQ.2.AND.ILONGA.LT.(5+(1+KNARG2)**2)) THEN
(  218)       IREP=-93
(  219)       GOTO 1001
(  220)     ENDIF
(  221) !
(  222)   ENDIF
(  223) !
(  224) ENDIF
(  225) !**
(  226) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  227) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  228) !-----------------------------------------------------------------------
(  229) !
(  230) 1001 CONTINUE
(  231) !
(  232) IF (LLTEMP) THEN
(  233) !
(  234) !         On remet le fichier en mode "toute erreur fatale" au niveau
(  235) !     du logiciel LFI.
(  236) !
(  237)   CALL LFIERF_MT64                            &
(  238) &                 (FA%LFI, IREP,KNUMER,.TRUE.)
(  239)   LLRLFI=IREP.NE.0
(  240) ENDIF
(  241) !
(  242) KREP=IREP
(  243) LLFATA=LLMOER (IREP,IRANG)
(  244) !
(  245) !        Deverrouillage eventuel du fichier.
(  246) !
(  247) IF (LLVERF) CALL LFIVER_MT64                                &
(  248) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  249) !
(  250) IF (LLFATA) THEN
(  251)   INIMES=2
(  252) ELSE
(  253)   INIMES=IXNVMS(IRANG)
(  254) ENDIF
(  255) !
(  256) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  257)   IF (LHOOK) CALL DR_HOOK('FANION_MT',1,ZHOOK_HANDLE)
(  258)   RETURN
(  259) ENDIF
(  260) !
(  261) CLNSPR='FANION'
(  262) !






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 7

(  263) IF (ILPRFU.GE.1) THEN
(  264)   ILPREF=MIN (ILPRFU,INT (LEN (CLPREF), JPLIKB))
(  265)   CLPREF(1:ILPREF)=CDPREF(1:ILPREF)
(  266) ELSE
(  267)   ILPREF=8
(  268)   CLPREF(1:ILPREF)=FA%CHAINC(:ILPREF)
(  269) ENDIF
(  270) !
(  271) IF (ILSUFU.GE.1) THEN
(  272)   ILSUFF=MIN (ILSUFU,INT (LEN (CLSUFF), JPLIKB))
(  273)   CLSUFF(1:ILSUFF)=CDSUFF(1:ILSUFF)
(  274) ELSE
(  275)   ILSUFF=8
(  276)   CLSUFF(1:ILSUFF)=FA%CHAINC(:ILSUFF)
(  277) ENDIF
(  278) !
(  279) IF (.NOT.LLNOMU) THEN
(  280)   ILNOMU=MIN (ILPREF,FA%NCPCAD)
(  281)   CLNOMA(1:ILNOMU)=CLPREF(1:ILPREF)
(  282) ENDIF
(  283) !
(  284) WRITE (UNIT=CLMESS,                                              &
(  285) &       FMT='(''ARGUMENTS:'',I4,'','',I3,'','''''',A,            &
(  286) &       '''''','',I6,'','''''',A,'''''', LDEXIS= '',L1,          &
(  287) &       '', LDCOSP= '',L1,'', KNGRIB='',I2,'', KNARG1='',I3,     &
(  288) &       '',KNARG2='',I3,'',KNARG3='',I6)')                       &
(  289) &   KREP,KNUMER,CLPREF(1:ILPREF),KNIVAU,CLSUFF(1:ILSUFF),LDEXIS, &
(  290) &   LDCOSP,KNGRIB,KNARG1,KNARG2,KNARG3
(  291) CALL FAIPAR_MT64                                       &
(  292) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  293) &                CLNSPR,CLNOMA(1:ILNOMU),LLRLFI)
(  294) !
(  295) IF (LHOOK) CALL DR_HOOK('FANION_MT',1,ZHOOK_HANDLE)
(  296) 
(  297) CONTAINS
(  298) 
(  299) #include "facom2.llmoer.h"
(  300) #include "facom2.ixnvms.h"
(  301) #include "falgra.h"
(  302) 
(  303) END SUBROUTINE FANION_MT64
(  304) 
(  305) 
(  306) 
(  307) ! Oct-2012 P. Marguinaud 64b LFI
(  308) SUBROUTINE FANION64                                        &
(  309) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  310) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  311) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  312) &                  FA_COM_DEFAULT_INIT,  &
(  313) &                  NEW_FA_DEFAULT
(  314) USE LFI_PRECISION
(  315) IMPLICIT NONE
(  316) ! Arguments
(  317) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  318) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  319) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  320) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 8

(  321) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  322) LOGICAL                LDEXIS                                 !   OUT
(  323) LOGICAL                LDCOSP                                 !   OUT
(  324) INTEGER (KIND=JPLIKB)  KNGRIB                                 !   OUT
(  325) INTEGER (KIND=JPLIKB)  KNARG1                                 !   OUT
(  326) INTEGER (KIND=JPLIKB)  KNARG2                                 !   OUT
(  327) INTEGER (KIND=JPLIKB)  KNARG3                                 !   OUT
(  328) 
(  329) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  330) 
(  331) CALL FANION_MT64                                               &
(  332) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  333) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  334) 
(  335) END SUBROUTINE FANION64
(  336) 
(  337) SUBROUTINE FANION                                          &
(  338) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  339) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  340) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  341) &                  FA_COM_DEFAULT_INIT,  &
(  342) &                  NEW_FA_DEFAULT
(  343) USE LFI_PRECISION
(  344) IMPLICIT NONE
(  345) ! Arguments
(  346) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  347) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  348) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  349) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  350) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  351) LOGICAL                LDEXIS                                 !   OUT
(  352) LOGICAL                LDCOSP                                 !   OUT
(  353) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  354) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  355) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  356) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  357) 
(  358) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  359) 
(  360) CALL FANION_MT                                                 &
(  361) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  362) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  363) 
(  364) END SUBROUTINE FANION
(  365) 
(  366) SUBROUTINE FANION_MT                                           &
(  367) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  368) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  369) USE FA_MOD, ONLY : FA_COM
(  370) USE LFI_PRECISION
(  371) IMPLICIT NONE
(  372) ! Arguments
(  373) TYPE (FA_COM)          FA                                     ! INOUT
(  374) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  375) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  376) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  377) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  378) CHARACTER (LEN=*)      CDSUFF                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 9

(  379) LOGICAL                LDEXIS                                 !   OUT
(  380) LOGICAL                LDCOSP                                 !   OUT
(  381) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  382) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  383) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  384) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  385) ! Local integers
(  386) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  387) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  388) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  389) INTEGER (KIND=JPLIKB)  INGRIB                                 !   OUT
(  390) INTEGER (KIND=JPLIKB)  INARG1                                 !   OUT
(  391) INTEGER (KIND=JPLIKB)  INARG2                                 !   OUT
(  392) INTEGER (KIND=JPLIKB)  INARG3                                 !   OUT
(  393) ! Convert arguments
(  394) 
(  395) INUMER     = INT (    KNUMER, JPLIKB)
(  396) INIVAU     = INT (    KNIVAU, JPLIKB)
(  397) 
(  398) CALL FANION_MT64                                               &
(  399) &           (FA, IREP, INUMER, CDPREF, INIVAU, CDSUFF, LDEXIS, &
(  400) &           LDCOSP, INGRIB, INARG1, INARG2, INARG3)
(  401) 
(  402) KREP       = INT (      IREP, JPLIKM)
(  403) KNGRIB     = INT (    INGRIB, JPLIKM)
(  404) KNARG1     = INT (    INARG1, JPLIKM)
(  405) KNARG2     = INT (    INARG2, JPLIKM)
(  406) KNARG3     = INT (    INARG3, JPLIKM)
(  407) 
(  408) END SUBROUTINE FANION_MT
(  409) 
(  410) !INTF KREP            OUT 
(  411) !INTF KNUMER        IN    
(  412) !INTF CDPREF        IN    
(  413) !INTF KNIVAU        IN    
(  414) !INTF CDSUFF        IN    
(  415) !INTF LDEXIS          OUT 
(  416) !INTF LDCOSP          OUT 
(  417) !INTF KNGRIB          OUT 
(  418) !INTF KNARG1          OUT 
(  419) !INTF KNARG2          OUT 
(  420) !INTF KNARG3          OUT 






















NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 10

(    1) # 1 "fanion.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FANION_MT64                                                &
(    4) &                     (FA,  KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,     &
(    5) &                      LDEXIS, LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(    6) USE FA_MOD, ONLY : FA_COM
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !      Sous-programme renseignant sur l'EXISTENCE et les CARACTERISTI-
(   13) !     QUES eventuelles d'un Article de type CHAMP dans un Fichier ARPEGE
(   14) !       ( LDEXIS est le "fanion" leve si l'article existe )
(   15) !**
(   16) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   17) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   18) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   19) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   20) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   21) !                LDEXIS (Sortie) ==> Vrai si l'article de type CHAMP
(   22) !                                    existe bien dans le Fichier;
(   23) !                LDCOSP (Sortie) ==> Vrai si le champ est represente
(   24) !                                    par des coefficients spectraux;
(   25) !                KNGRIB (Sortie) ==> Niveau de codage GRIB;
(   26) !    Si KNGRIB vaut -1,0,1,2,3, alors les arguments de sortie ont la 
(   27) !    signification suivante:
(   28) !                KNARG1 (Sortie) ==> Nombre de bits de codage eventuel;
(   29) !                KNARG2 (Sortie) ==> Sous-troncature non codee   " -le;
(   30) !                KNARG3 (Sortie) ==> Puissance de laplacien eventuelle.
(   31) !    Si KNGRIB vaut 4, alors les arguments de sortie ont la signification
(   32) !    suivante:
(   33) !                KNARG1 (Sortie) ==> Taille de la couronne a conserver
(   34) !                KNARG2 (Sortie) ==> Nombre de bits utilises pour le codage
(   35) !                KNARG3 (Sortie) ==> Inutilise
(   36) !             
(   37) !
(   38) !        KNARG1 n'a de sens que si l'article existe et a ete code;
(   39) !     de meme pour KNARG2 et KNARG3, qui ne sont applicables qu'a un
(   40) !     champ represente en coefficients spectraux.
(   41) !        Les arguments de sortie n'ayant pas de sens sont mis a
(   42) !     0 pour les entiers, .FALSE. pour les logiques.
(   43) !
(   44) !
(   45) !
(   46) TYPE(FA_COM) :: FA
(   47) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIVAU, KNGRIB
(   48) INTEGER (KIND=JPLIKB) KNARG1, KNARG2, KNARG3
(   49) !
(   50) INTEGER (KIND=JPLIKB) IREP, ILPRFU, ILSUFU, ILNOMU
(   51) INTEGER (KIND=JPLIKB) ILONGA, IRANG, INIMES
(   52) INTEGER (KIND=JPLIKB) ILPREF, ILSUFF, IPOSEX
(   53) INTEGER (KIND=JPLIKB) IRANGC, ILCHAM
(   54) !
(   55) INTEGER (KIND=JPLIKB) IVALCO (5)
(   56) INTEGER (KIND=JPLIKB)  IB1PAR (3)
(   57) !






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 11

(   58) LOGICAL LLVERF, LLRLFI, LDCOSP, LDEXIS, LLTEMP, LLNOMU, LLMLAM
(   59) !
(   60) CHARACTER CDPREF*(*), CDSUFF*(*)
(   61) CHARACTER CLPREF*(FA%JPXNOM), CLSUFF*(FA%JPXSUF)
(   62) !
(   63) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   64) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   65) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   66) LOGICAL                  LLFATA
(   67) # 68 "fanion.F90"
(   68) !**
(   69) !     1.  -  CONTROLES ET INITIALISATIONS.
(   70) !-----------------------------------------------------------------------
(   71) !
(   72) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   73) IF (LHOOK) CALL DR_HOOK('FANION_MT',0,ZHOOK_HANDLE)
(   74) IREP=0
(   75) LLVERF=.FALSE.
(   76) LLTEMP=.FALSE.
(   77) LLRLFI=.FALSE.
(   78) LLNOMU=.FALSE.
(   79) ILPRFU=INT (LEN (CDPREF), JPLIKB)
(   80) ILSUFU=INT (LEN (CDSUFF), JPLIKB)
(   81) LDEXIS=.FALSE.
(   82) LDCOSP=.FALSE.
(   83) KNGRIB=0
(   84) KNARG1=0
(   85) KNARG2=0
(   86) KNARG3=0
(   87) CALL FANUMU_MT64                 &
(   88) &               (FA, KNUMER,IRANG)
(   89) !
(   90) IF (IRANG.EQ.0) THEN
(   91)   IREP=-51
(   92)   GOTO 1001
(   93) ENDIF
(   94) !
(   95) !         Verrouillage eventuel du fichier.
(   96) !
(   97) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   98) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   99) LLVERF=FA%LFAMUL
(  100) !
(  101) IF (FA%FICHIER(IRANG)%LCREAF) GOTO 1001
(  102) !**
(  103) !     2.  -  FABRICATION DU NOM D'ARTICLE VIA LE SOUS-PROGRAMME "FANFAR"
(  104) !            ( controles de CDPREF, KNIVAU, CDSUFF inclus )
(  105) !-----------------------------------------------------------------------
(  106) !
(  107) CALL FANFAR_MT64                                             &
(  108) &               (FA, IREP,IRANG,CDPREF,KNIVAU,CDSUFF,CLNOMA, &
(  109) &                IB1PAR,ILPRFU,ILSUFU,ILNOMU)
(  110) IF (IREP.NE.0) GOTO 1001
(  111) LLNOMU=.TRUE.
(  112) !**
(  113) !     3.  -  RECHERCHE DE L'ARTICLE SUR LE FICHIER, LECTURE PARTIELLE.
(  114) !-----------------------------------------------------------------------
(  115) !






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 12

(  116) CALL LFINFO_MT64                                       &
(  117) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  118) &             ILONGA,IPOSEX)
(  119) LLRLFI=IREP.NE.0
(  120) IF (LLRLFI.OR.ILONGA.EQ.0) GOTO 1001
(  121) LDEXIS=.TRUE.
(  122) !
(  123) IF (ILONGA.GT.FA%JPXCHA+2) THEN
(  124)   IREP=-90
(  125)   GOTO 1001
(  126) ENDIF
(  127) !
(  128) IF (FA%FICHIER(IRANG)%LERRFA) THEN
(  129) !
(  130) !        Le fichier est gere en mode "toute erreur est fatale".
(  131) !     Ce mode etant normalement couple au mode correspondant du logiciel
(  132) !     LFI, on va temporairement annuler l'option LFI afin de pouvoir
(  133) !     faire une lecture partielle de l'entete de l'article Champ.
(  134) !
(  135)   CALL LFIERF_MT64                             &
(  136) &                 (FA%LFI, IREP,KNUMER,.FALSE.)
(  137)   LLRLFI=IREP.NE.0
(  138)   IF (LLRLFI) GOTO 1001
(  139)   LLTEMP=.TRUE.
(  140) ENDIF
(  141) !
(  142) CALL LFILEC_MT64                                       &
(  143) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  144) &               IVALCO,5_JPLIKB )
(  145) !
(  146) IF (IREP.EQ.0) THEN
(  147)   IREP=-93
(  148)   GOTO 1001
(  149) ELSEIF (IREP.NE.-21) THEN
(  150)   LLRLFI=.TRUE.
(  151)   GOTO 1001
(  152) ELSEIF ((IVALCO(1).LT.-2 .OR. IVALCO(1).GT.4 .OR.                   &
(  153) &       (IVALCO(2).LT.0  .OR. IVALCO(2).GT.1 .OR.                   &
(  154) &       (IVALCO(1).GT.0 .AND. IVALCO(2).EQ.1 .AND. IVALCO(4).LT.0)))&
(  155) & .AND. (.NOT. FALGRA (IVALCO(1)))) THEN
(  156)   IREP=-91
(  157)   GOTO 1001
(  158) ELSE
(  159)   IREP=0
(  160)   KNGRIB=IVALCO(1)
(  161)   LDCOSP=IVALCO(2).EQ.1
(  162) ENDIF
(  163) !
(  164) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  165) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(  166) !
(  167) IF (LDCOSP) THEN
(  168)   IF (LLMLAM) THEN
(  169)      ILCHAM=FA%CADRE(IRANGC)%NSFLAM
(  170)   ELSE
(  171)      IF (KNGRIB.EQ.3 .OR. KNGRIB.EQ.-1) THEN
(  172)        ILCHAM=(1+FA%CADRE(IRANGC)%MTRONC)*(2+FA%CADRE(IRANGC)%MTRONC)
(  173)      ELSE






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 13

(  174)        ILCHAM=(1+FA%CADRE(IRANGC)%MTRONC)**2
(  175)      ENDIF
(  176)   ENDIF
(  177) ELSE
(  178)   ILCHAM=FA%CADRE(IRANGC)%NVAPDG
(  179) ENDIF
(  180) !
(  181) IF (KNGRIB.EQ.-1 .OR. KNGRIB.EQ.0) THEN
(  182) !
(  183) !          Cas ou il n'y a aucun codage... controle longueur d'article
(  184) !
(  185)   IF (ILONGA.LT.(ILCHAM+2)) THEN
(  186)     IREP=-93
(  187)     GOTO 1001
(  188)   ELSEIF (ILONGA.GT.(ILCHAM+2)) THEN
(  189)     IREP=-94
(  190)     IF (LLMOER(IREP,IRANG)) GOTO 1001
(  191)   ENDIF
(  192) !
(  193) ELSEIF (KNGRIB.EQ.-2) THEN
(  194)   IF (ILONGA .LT. ((ILCHAM+1)/2+2)) THEN
(  195)     IREP=-93
(  196)     GOTO 1001
(  197)   ELSEIF (ILONGA .GT. ((ILCHAM+1)/2+2)) THEN
(  198)     IREP=-94
(  199)     IF (LLMOER(IREP,IRANG)) GOTO 1001
(  200)   ENDIF
(  201) ELSEIF (KNGRIB.EQ.4) THEN
(  202)   KNARG1=IVALCO(3)
(  203)   KNARG2=IVALCO(4)
(  204) ELSEIF (FALGRA (KNGRIB)) THEN
(  205)   LDCOSP=IVALCO(2).EQ.1
(  206)   KNARG1=IVALCO(3)
(  207) ELSE
(  208) !
(  209) !        Cas avec codage GRIB (standard ou non).
(  210) !
(  211)   KNARG1=IVALCO(3)
(  212) !
(  213)   IF (LDCOSP) THEN
(  214)     KNARG2=IVALCO(4)
(  215)     KNARG3=IVALCO(5)
(  216) !
(  217)     IF (KNGRIB.EQ.2.AND.ILONGA.LT.(5+(1+KNARG2)**2)) THEN
(  218)       IREP=-93
(  219)       GOTO 1001
(  220)     ENDIF
(  221) !
(  222)   ENDIF
(  223) !
(  224) ENDIF
(  225) !**
(  226) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  227) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  228) !-----------------------------------------------------------------------
(  229) !
(  230) 1001 CONTINUE
(  231) !






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 14

(  232) IF (LLTEMP) THEN
(  233) !
(  234) !         On remet le fichier en mode "toute erreur fatale" au niveau
(  235) !     du logiciel LFI.
(  236) !
(  237)   CALL LFIERF_MT64                            &
(  238) &                 (FA%LFI, IREP,KNUMER,.TRUE.)
(  239)   LLRLFI=IREP.NE.0
(  240) ENDIF
(  241) !
(  242) KREP=IREP
(  243) LLFATA=LLMOER (IREP,IRANG)
(  244) !
(  245) !        Deverrouillage eventuel du fichier.
(  246) !
(  247) IF (LLVERF) CALL LFIVER_MT64                                &
(  248) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  249) !
(  250) IF (LLFATA) THEN
(  251)   INIMES=2
(  252) ELSE
(  253)   INIMES=IXNVMS(IRANG)
(  254) ENDIF
(  255) !
(  256) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  257)   IF (LHOOK) CALL DR_HOOK('FANION_MT',1,ZHOOK_HANDLE)
(  258)   RETURN
(  259) ENDIF
(  260) !
(  261) CLNSPR='FANION'
(  262) !
(  263) IF (ILPRFU.GE.1) THEN
(  264)   ILPREF=MIN (ILPRFU,INT (LEN (CLPREF), JPLIKB))
(  265)   CLPREF(1:ILPREF)=CDPREF(1:ILPREF)
(  266) ELSE
(  267)   ILPREF=8
(  268)   CLPREF(1:ILPREF)=FA%CHAINC(:ILPREF)
(  269) ENDIF
(  270) !
(  271) IF (ILSUFU.GE.1) THEN
(  272)   ILSUFF=MIN (ILSUFU,INT (LEN (CLSUFF), JPLIKB))
(  273)   CLSUFF(1:ILSUFF)=CDSUFF(1:ILSUFF)
(  274) ELSE
(  275)   ILSUFF=8
(  276)   CLSUFF(1:ILSUFF)=FA%CHAINC(:ILSUFF)
(  277) ENDIF
(  278) !
(  279) IF (.NOT.LLNOMU) THEN
(  280)   ILNOMU=MIN (ILPREF,FA%NCPCAD)
(  281)   CLNOMA(1:ILNOMU)=CLPREF(1:ILPREF)
(  282) ENDIF
(  283) !
(  284) WRITE (UNIT=CLMESS,                                              &
(  285) &       FMT='(''ARGUMENTS:'',I4,'','',I3,'','''''',A,            &
(  286) &       '''''','',I6,'','''''',A,'''''', LDEXIS= '',L1,          &
(  287) &       '', LDCOSP= '',L1,'', KNGRIB='',I2,'', KNARG1='',I3,     &
(  288) &       '',KNARG2='',I3,'',KNARG3='',I6)')                       &
(  289) &   KREP,KNUMER,CLPREF(1:ILPREF),KNIVAU,CLSUFF(1:ILSUFF),LDEXIS, &






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 15

(  290) &   LDCOSP,KNGRIB,KNARG1,KNARG2,KNARG3
(  291) CALL FAIPAR_MT64                                       &
(  292) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  293) &                CLNSPR,CLNOMA(1:ILNOMU),LLRLFI)
(  294) !
(  295) IF (LHOOK) CALL DR_HOOK('FANION_MT',1,ZHOOK_HANDLE)
(  296) # 297 "fanion.F90"
(  297) CONTAINS
(  298) # 299 "fanion.F90"
(  299) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 300 "fanion.F90"
(  300) # 300 "fanion.F90"
(  300) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 301 "fanion.F90"
(  301) # 301 "fanion.F90"
(  301) # 1 ".D[27]/falgra.h"
(    1) LOGICAL FUNCTION FALGRA (KNGRIB)
(    2) !****
(    3) !    Cette fonction renvoie une valeur vraie si la methode d'encodage passee en argument fait appel a grib_api
(    4) !**
(    5) !    Arguments : KNGRIB (Entree) ==> Methode d'encodage
(    6) !
(    7) !
(    8) INTEGER (KIND=JPLIKB) KNGRIB
(    9) INTEGER (KIND=JPLIKB) INGRIB_SP, INGRIB_GP
(   10) LOGICAL LLFALGRA_SP, LLFALGRA_GP
(   11) # 12 ".D[27]/falgra.h"
(   12) FALGRA = .FALSE.
(   13) # 14 ".D[27]/falgra.h"
(   14) IF (100 <= KNGRIB .AND. KNGRIB <= 200) THEN
(   15) # 16 ".D[27]/falgra.h"
(   16)   INGRIB_SP = FALGRA_SP (KNGRIB)
(   17)   INGRIB_GP = FALGRA_GP (KNGRIB)
(   18)   






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 16

(   19)   LLFALGRA_SP = &
(   20)    & (INGRIB_SP - 100 ==  1) .OR. &      ! GRIB2 complex packing (bug)
(   21)    & (INGRIB_SP - 100 ==  2) .OR. &      ! GRIB0 
(   22)    & (INGRIB_SP - 100 ==  3)             ! GRIB2 complex packing
(   23)   
(   24)   LLFALGRA_GP = &
(   25)    & ((INGRIB_GP-100) / 20 ==  1) .OR. & ! GRIB2 simple packing
(   26)    & ((INGRIB_GP-100) / 20 ==  2) .OR. & ! GRIB2 second order packing
(   27)    & ((INGRIB_GP-100) / 20 ==  3) .OR. & ! GRIB1 simple packing
(   28)    & ((INGRIB_GP-100) / 20 ==  4) .OR. & ! GRIB1 second order packing
(   29)    & ((INGRIB_GP-100) / 20 ==  5)        ! GRIB2 complex packing
(   30)    
(   31) # 32 ".D[27]/falgra.h"
(   32)   IF (LLFALGRA_GP .AND. LLFALGRA_SP) THEN
(   33)     FALGRA = .TRUE.
(   34)   ELSEIF (LLFALGRA_GP) THEN
(   35)     FALGRA = INGRIB_SP == 100
(   36)   ELSEIF (LLFALGRA_SP) THEN
(   37)     FALGRA = INGRIB_GP == 100
(   38)   ENDIF
(   39) # 40 ".D[27]/falgra.h"
(   40) ENDIF
(   41) # 42 ".D[27]/falgra.h"
(   42) END FUNCTION FALGRA
(   43) # 44 ".D[27]/falgra.h"
(   44) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_SP (KNGRIB)
(   45) INTEGER (KIND=JPLIKB) KNGRIB
(   46) FALGRA_SP = 100+MODULO ((KNGRIB-100),20)
(   47) END FUNCTION FALGRA_SP
(   48) # 49 ".D[27]/falgra.h"
(   49) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_GP (KNGRIB)
(   50) INTEGER (KIND=JPLIKB) KNGRIB
(   51) FALGRA_GP = 100+20*((KNGRIB-100)/20)
(   52) END FUNCTION FALGRA_GP
(   53) # 54 ".D[27]/falgra.h"
(   54) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_ED (KNGRIB)
(   55) INTEGER (KIND=JPLIKB) KNGRIB
(   56) # 57 ".D[27]/falgra.h"
(   57) SELECT CASE (KNGRIB)
(   58)   CASE (160, 180)
(   59)     FALGRA_ED = 1
(   60)   CASE DEFAULT
(   61)     FALGRA_ED = 2
(   62) END SELECT 
(   63) # 64 ".D[27]/falgra.h"
(   64) END FUNCTION FALGRA_ED
(   65) # 302 "fanion.F90"
(  302) # 303 "fanion.F90"
(  303) END SUBROUTINE FANION_MT64
(  304) # 307 "fanion.F90"
(  307) ! Oct-2012 P. Marguinaud 64b LFI
(  308) SUBROUTINE FANION64                                        &
(  309) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  310) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  311) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  312) &                  FA_COM_DEFAULT_INIT,  &
(  313) &                  NEW_FA_DEFAULT
(  314) USE LFI_PRECISION






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 17

(  315) IMPLICIT NONE
(  316) ! Arguments
(  317) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  318) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  319) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  320) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  321) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  322) LOGICAL                LDEXIS                                 !   OUT
(  323) LOGICAL                LDCOSP                                 !   OUT
(  324) INTEGER (KIND=JPLIKB)  KNGRIB                                 !   OUT
(  325) INTEGER (KIND=JPLIKB)  KNARG1                                 !   OUT
(  326) INTEGER (KIND=JPLIKB)  KNARG2                                 !   OUT
(  327) INTEGER (KIND=JPLIKB)  KNARG3                                 !   OUT
(  328) # 329 "fanion.F90"
(  329) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  330) # 331 "fanion.F90"
(  331) CALL FANION_MT64                                               &
(  332) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  333) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  334) # 335 "fanion.F90"
(  335) END SUBROUTINE FANION64
(  336) # 337 "fanion.F90"
(  337) SUBROUTINE FANION                                          &
(  338) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  339) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  340) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  341) &                  FA_COM_DEFAULT_INIT,  &
(  342) &                  NEW_FA_DEFAULT
(  343) USE LFI_PRECISION
(  344) IMPLICIT NONE
(  345) ! Arguments
(  346) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  347) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  348) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  349) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  350) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  351) LOGICAL                LDEXIS                                 !   OUT
(  352) LOGICAL                LDCOSP                                 !   OUT
(  353) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  354) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  355) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  356) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  357) # 358 "fanion.F90"
(  358) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  359) # 360 "fanion.F90"
(  360) CALL FANION_MT                                                 &
(  361) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  362) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  363) # 364 "fanion.F90"
(  364) END SUBROUTINE FANION
(  365) # 366 "fanion.F90"
(  366) SUBROUTINE FANION_MT                                           &
(  367) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDEXIS, &
(  368) &           LDCOSP, KNGRIB, KNARG1, KNARG2, KNARG3)
(  369) USE FA_MOD, ONLY : FA_COM
(  370) USE LFI_PRECISION
(  371) IMPLICIT NONE
(  372) ! Arguments






NVFORTRAN (Version     23.1)          02/24/2023  13:55:02      page 18

(  373) TYPE (FA_COM)          FA                                     ! INOUT
(  374) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  375) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  376) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  377) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  378) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  379) LOGICAL                LDEXIS                                 !   OUT
(  380) LOGICAL                LDCOSP                                 !   OUT
(  381) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  382) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  383) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  384) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  385) ! Local integers
(  386) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  387) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  388) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  389) INTEGER (KIND=JPLIKB)  INGRIB                                 !   OUT
(  390) INTEGER (KIND=JPLIKB)  INARG1                                 !   OUT
(  391) INTEGER (KIND=JPLIKB)  INARG2                                 !   OUT
(  392) INTEGER (KIND=JPLIKB)  INARG3                                 !   OUT
(  393) ! Convert arguments
(  394) # 395 "fanion.F90"
(  395) INUMER     = INT (    KNUMER, JPLIKB)
(  396) INIVAU     = INT (    KNIVAU, JPLIKB)
(  397) # 398 "fanion.F90"
(  398) CALL FANION_MT64                                               &
(  399) &           (FA, IREP, INUMER, CDPREF, INIVAU, CDSUFF, LDEXIS, &
(  400) &           LDCOSP, INGRIB, INARG1, INARG2, INARG3)
(  401) # 402 "fanion.F90"
(  402) KREP       = INT (      IREP, JPLIKM)
(  403) KNGRIB     = INT (    INGRIB, JPLIKM)
(  404) KNARG1     = INT (    INARG1, JPLIKM)
(  405) KNARG2     = INT (    INARG2, JPLIKM)
(  406) KNARG3     = INT (    INARG3, JPLIKM)
(  407) # 408 "fanion.F90"
(  408) END SUBROUTINE FANION_MT
(  409) # 410 "fanion.F90"
(  410) !INTF KREP            OUT 
(  411) !INTF KNUMER        IN    
(  412) !INTF CDPREF        IN    
(  413) !INTF KNIVAU        IN    
(  414) !INTF CDSUFF        IN    
(  415) !INTF LDEXIS          OUT 
(  416) !INTF LDCOSP          OUT 
(  417) !INTF KNGRIB          OUT 
(  418) !INTF KNARG1          OUT 
(  419) !INTF KNARG2          OUT 
(  420) !INTF KNARG3          OUT 
