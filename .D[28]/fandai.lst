


NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fandai.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FANDAI_MT64                                  &
(    4) &                     (FA,  KREP, KRANG, KDATEF, KDATXF, LDMODA )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL, &
(    6)                  & JD_YEA, JD_MON, JD_DAY, & 
(    7)                  & JD_HOU, JD_MIN, JD_TUN, & 
(    8)                  & JD_THO,         JD_IAN, &
(    9)                  & JD_CU1, JD_CU2,         &
(   10)                  & JD_DEX,         JD_SEM, &
(   11)                  & JD_SET, JD_CE1, JD_CE2, &
(   12)                  & JD_TST, JD_FMT
(   13) 
(   14) USE PARKIND1, ONLY : JPRB
(   15) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   16) USE LFI_PRECISION
(   17) IMPLICIT NONE
(   18) !****
(   19) !      Sous-programme INTERNE du logiciel de Fichiers ARPEGE:
(   20) !     Definition d'une (Nouvelle) Date.
(   21) !**
(   22) !    Arguments : KREP   (Sortie)        ==> Code-reponse du sous-programme;
(   23) !                KRANG  (Entree)        ==> Rang de l'unite logique;
(   24) !     (Tableau)  KDATEF (Entree/Sortie) ==> Date elle-meme (FA%JPLDAT mots).
(   25) !                KDATXF (Entree)        ==> Date etendue
(   26) !                LDMODA (Sortie)        ==> Vrai s'il y a modification d'une
(   27) !                                           date deja definie.
(   28) !*
(   29) !       En mode multi-taches, il doit y avoir verrouillage du fichier
(   30) !     concerne avant l'appel au sous-programme.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 3

(   31) !
(   32) !
(   33) !
(   34) TYPE(FA_COM) :: FA
(   35) INTEGER (KIND=JPLIKB) KREP, KRANG
(   36) INTEGER (KIND=JPLIKB) KDATEF (FA%JPLDAT)
(   37) INTEGER (KIND=JPLIKB) KDATXF (FA%JPLDAT)
(   38) !
(   39) INTEGER (KIND=JPLIKB) IMI123, IMAX69, IMINIM
(   40) INTEGER (KIND=JPLIKB) J, ILMOIS, INIMES, INUMER
(   41) INTEGER (KIND=JPLIKB) ISECMAX
(   42) !
(   43) LOGICAL LDMODA
(   44) !
(   45) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   46) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   47) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   48) LOGICAL                  LLFATA
(   49) 
(   50) !**
(   51) !     1.  -  CONTROLES DES PARAMETRES D'APPEL.
(   52) !-----------------------------------------------------------------------
(   53) !
(   54) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   55) IF (LHOOK) CALL DR_HOOK('FANDAI_MT',0,ZHOOK_HANDLE)
(   56) CLACTI=''
(   57) LDMODA=.FALSE.
(   58) KREP=0
(   59) !
(   60) IF (KRANG.LE.0.OR.KRANG.GT.FA%JPNXFA) THEN
(   61)   KREP=-66
(   62)   GOTO 1001
(   63) ENDIF
(   64) 
(   65) IF (KDATXF (JD_DEX-FA%JPLDAT) > 0) THEN
(   66) 
(   67) !
(   68) !         Controle de la Date etendue.
(   69) !
(   70)   IF (ANY (KDATXF < 0)) KREP=-82
(   71) 
(   72)   IF (KDATEF (JD_HOU) < 0 .AND. KDATEF (JD_MIN) < 0) THEN
(   73)     KDATEF (JD_HOU) = KDATXF (JD_SEM-FA%JPLDAT) / 3600
(   74)     KDATEF (JD_MIN) = KDATXF (JD_SEM-FA%JPLDAT) / 60
(   75)   ENDIF
(   76)  
(   77) !
(   78) !         Controle de la coherence de la date et de la date etendue
(   79) !
(   80)   IF (KDATXF (JD_FMT-FA%JPLDAT) > 0) THEN
(   81)     ISECMAX = 60
(   82)   ELSE
(   83)     ISECMAX = 3600
(   84)   ENDIF
(   85) 
(   86)   IF (ABS (KDATEF (JD_HOU) * 3600 + KDATEF (JD_MIN) * 60 - KDATXF (JD_SEM-FA%JPLDAT)) > ISECMAX) KREP=-82
(   87) 
(   88)   CALL FANDAI_CMPSEC (KDATEF (JD_TUN), KDATEF (JD_THO), KDATXF (JD_SET-FA%JPLDAT))






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 4

(   89)   CALL FANDAI_CMPSEC (KDATEF (JD_TUN), KDATEF (JD_CU1), KDATXF (JD_CE1-FA%JPLDAT))
(   90)   CALL FANDAI_CMPSEC (KDATEF (JD_TUN), KDATEF (JD_CU2), KDATXF (JD_CE2-FA%JPLDAT))
(   91) 
(   92)   IF (KREP /= 0) GOTO 1001
(   93) ENDIF
(   94) 
(   95) !
(   96) !         Controle de la Date proprement dite.
(   97) !
(   98) IMI123=MIN (KDATEF(JD_YEA),KDATEF(JD_MON),KDATEF(JD_DAY))
(   99) IMAX69=MAX (KDATEF(JD_TUN),KDATEF(JD_IAN))
(  100) IMINIM=KDATEF(JD_YEA)
(  101) !
(  102) DO J=2,FA%JPLDAT
(  103) IMINIM=MIN (IMINIM,KDATEF(J))
(  104) ENDDO
(  105) !
(  106) IF (IMINIM.LT.0.OR.IMI123.LE.0.OR.KDATEF(JD_MON).GT.12.OR.                    &
(  107) &   KDATEF(JD_DAY).GT.31.OR.KDATEF(JD_HOU).GE.24.OR.KDATEF(JD_MIN).GE.60.OR.  &
(  108) &   IMAX69.GE.255.OR.                                                         &
(  109) & (KDATEF(JD_CU1).LE.KDATEF(JD_CU2).AND.(KDATEF(JD_CU1)*KDATEF(JD_CU2)).NE.0)) THEN
(  110) !
(  111) !        Erreur de syntaxe.
(  112) !
(  113)   KREP=-82
(  114)   GOTO 1001
(  115) ELSEIF ((KDATEF(JD_MON).GT.7.OR.MOD (KDATEF(JD_MON),2_JPLIKB ).EQ.0).AND.  &
(  116) &       (KDATEF(JD_MON).LE.7.OR.MOD (KDATEF(JD_MON),2_JPLIKB ).EQ.1)) THEN
(  117) !
(  118) !        Controle de coherence (annee,mois,jour).
(  119) !
(  120)   IF (KDATEF(JD_MON).EQ.2) THEN
(  121)     ILMOIS=28+MAX (0_JPLIKB ,1-MOD (KDATEF(JD_YEA),4_JPLIKB ))
(  122)   ELSE
(  123)     ILMOIS=30
(  124)   ENDIF
(  125) !
(  126)   IF (KDATEF(JD_DAY).GT.ILMOIS) THEN
(  127)     KREP=-82
(  128)     GOTO 1001
(  129)   ENDIF
(  130) !
(  131) ENDIF
(  132) 
(  133) 
(  134) IF (KDATXF (JD_DEX-FA%JPLDAT) == 0) THEN
(  135)   
(  136) !
(  137) !        Calcul de la date etendue si elle n'est pas definie
(  138) !
(  139)   KDATXF (JD_DEX-FA%JPLDAT) = 1
(  140)   KDATXF (JD_SEM-FA%JPLDAT) = KDATEF (JD_HOU) * 3600 + KDATEF (JD_MIN) * 60
(  141) 
(  142)   CALL FANDAI_SETSEC (KDATEF (JD_TUN), KDATEF (JD_THO), KDATXF (JD_SET-FA%JPLDAT))
(  143)   CALL FANDAI_SETSEC (KDATEF (JD_TUN), KDATEF (JD_CU1), KDATXF (JD_CE1-FA%JPLDAT))
(  144)   CALL FANDAI_SETSEC (KDATEF (JD_TUN), KDATEF (JD_CU2), KDATXF (JD_CE2-FA%JPLDAT))
(  145)   KDATXF (JD_TST-FA%JPLDAT) = 1800
(  146) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 5

(  147) ENDIF
(  148) 
(  149) !**
(  150) !     2.  -  SI DATE DEJA DEFINIE, COMPARAISON ANCIENNE/NOUVELLE.
(  151) !-----------------------------------------------------------------------
(  152) !
(  153) IF (.NOT. FA%FICHIER(KRANG)%LCREAF) THEN
(  154) !
(  155)   DO J=1,FA%JPLDAT
(  156) !
(  157)   IF (FA%FICHIER(KRANG)%MADATE(J).NE.KDATEF(J)) THEN
(  158)     LDMODA=.TRUE.
(  159)     GOTO 300
(  160)   ENDIF
(  161) !
(  162)   ENDDO
(  163) !
(  164)   DO J=1,FA%JPLDAT
(  165) !
(  166)   IF (FA%FICHIER(KRANG)%MADATX(J).NE.KDATXF(J)) THEN
(  167)     LDMODA=.TRUE.
(  168)     GOTO 300
(  169)   ENDIF
(  170) !
(  171)   ENDDO
(  172) !
(  173) !         Si on arrive ici, il y a redefinition a l'identique.
(  174) !
(  175)   GOTO 1001
(  176) ENDIF
(  177) !**
(  178) !     3.  -  SI NECESSAIRE, MISE A JOUR DU TABLEAU "FA%MADATE".
(  179) !-----------------------------------------------------------------------
(  180) !
(  181) 300 CONTINUE
(  182) !
(  183) FA%FICHIER(KRANG)%MADATE (:) = KDATEF (:)
(  184) FA%FICHIER(KRANG)%MADATX (:) = KDATXF (:)
(  185) !**
(  186) !    10.  -  PHASE TERMINALE : MESSAGERIE EVENTUELLE,
(  187) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  188) !-----------------------------------------------------------------------
(  189) !
(  190) 1001 CONTINUE
(  191) LLFATA=LLMOER (KREP,KRANG)
(  192) !
(  193) IF (FA%LFAMOP.OR.LLFATA) THEN
(  194)   INIMES=2
(  195)   CLNSPR='FANDAI'
(  196)   INUMER=JPNIIL
(  197)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KRANG='',I4,    &
(  198) &       '', KDATEF(1:5)='',I5,2(''/'',I2),I3,'':'',I2.2,    &
(  199) &       '', KDATEF(7:8)='',I6,''-'',I6,'', KDATXF='',11I6,  &
(  200) &       '', LDMODA= '',L1)') &
(  201) &     KREP,KRANG,(KDATEF(J),J=1,5),(KDATEF(J),J=7,8),KDATXF,&
(  202) &     LDMODA
(  203)   CALL FAIPAR_MT64                                      &
(  204) &               (FA, INUMER,INIMES,KREP,.FALSE.,CLMESS, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 6

(  205) &                CLNSPR,CLACTI, .FALSE.)
(  206) ENDIF
(  207) !
(  208) IF (LHOOK) CALL DR_HOOK('FANDAI_MT',1,ZHOOK_HANDLE)
(  209) 
(  210) CONTAINS
(  211) 
(  212) SUBROUTINE FANDAI_SETSEC (KDATEF6, KDATEFX, KSECS)
(  213) 
(  214) INTEGER (KIND=JPLIKB), INTENT (IN)    :: KDATEF6
(  215) INTEGER (KIND=JPLIKB), INTENT (IN)    :: KDATEFX
(  216) INTEGER (KIND=JPLIKB), INTENT (INOUT) :: KSECS
(  217) 
(  218) SELECT CASE (KDATEF6)
(  219)   CASE (1)
(  220)     KSECS = KDATEFX * 3600
(  221)   CASE (2)
(  222)     KSECS = KDATEFX * 3600 * 24
(  223)   CASE DEFAULT
(  224)     KSECS = -1
(  225) END SELECT
(  226) 
(  227) END SUBROUTINE FANDAI_SETSEC
(  228) 
(  229) SUBROUTINE FANDAI_CMPSEC (KDATEF6, KDATEFX, KSECS)
(  230) 
(  231) INTEGER (KIND=JPLIKB), INTENT (INOUT) :: KDATEF6
(  232) INTEGER (KIND=JPLIKB), INTENT (INOUT) :: KDATEFX
(  233) INTEGER (KIND=JPLIKB), INTENT (IN)    :: KSECS
(  234) 
(  235) IF (KDATEF6 < 0) THEN
(  236)   IF (KSECS < 65000) THEN
(  237)     KDATEF6 = 1
(  238)   ELSE
(  239)     KDATEF6 = 2
(  240)   ENDIF
(  241) ENDIF
(  242) 
(  243) IF (KDATEFX < 0) THEN
(  244) 
(  245)   SELECT CASE (KDATEF6)
(  246)     CASE (1)
(  247)       KDATEFX = NINT (REAL (KSECS, JPDBLR) / 3600._JPDBLR)
(  248)     CASE (2)
(  249)       KDATEFX = NINT (REAL (KSECS, JPDBLR) / 3600._JPDBLR) / 24
(  250)     CASE DEFAULT
(  251)       KREP=-82
(  252)   END SELECT
(  253) 
(  254) ENDIF
(  255) 
(  256) SELECT CASE (KDATEF6)
(  257)   CASE (1)
(  258)     IF (ABS (KDATEFX * 3600 - KSECS) > 3600) THEN
(  259)       KREP=-82
(  260)     ENDIF
(  261)   CASE (2)
(  262)     IF (ABS (KDATEFX * 3600 * 24 - KSECS) > 3600 * 24) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 7

(  263)       KREP=-82
(  264)     ENDIF
(  265)   CASE DEFAULT
(  266)     KREP=-82
(  267) END SELECT
(  268) 
(  269) END SUBROUTINE FANDAI_CMPSEC
(  270) 
(  271) #include "facom2.llmoer.h"
(  272) 
(  273) END SUBROUTINE FANDAI_MT64
(  274) 




















































NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 8

(    1) # 1 "fandai.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FANDAI_MT64                                  &
(    4) &                     (FA,  KREP, KRANG, KDATEF, KDATXF, LDMODA )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL, &
(    6)                  & JD_YEA, JD_MON, JD_DAY, & 
(    7)                  & JD_HOU, JD_MIN, JD_TUN, & 
(    8)                  & JD_THO,         JD_IAN, &
(    9)                  & JD_CU1, JD_CU2,         &
(   10)                  & JD_DEX,         JD_SEM, &
(   11)                  & JD_SET, JD_CE1, JD_CE2, &
(   12)                  & JD_TST, JD_FMT
(   13) # 14 "fandai.F90"
(   14) USE PARKIND1, ONLY : JPRB
(   15) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   16) USE LFI_PRECISION
(   17) IMPLICIT NONE
(   18) !****
(   19) !      Sous-programme INTERNE du logiciel de Fichiers ARPEGE:
(   20) !     Definition d'une (Nouvelle) Date.
(   21) !**
(   22) !    Arguments : KREP   (Sortie)        ==> Code-reponse du sous-programme;
(   23) !                KRANG  (Entree)        ==> Rang de l'unite logique;
(   24) !     (Tableau)  KDATEF (Entree/Sortie) ==> Date elle-meme (FA%JPLDAT mots).
(   25) !                KDATXF (Entree)        ==> Date etendue
(   26) !                LDMODA (Sortie)        ==> Vrai s'il y a modification d'une
(   27) !                                           date deja definie.
(   28) !*
(   29) !       En mode multi-taches, il doit y avoir verrouillage du fichier
(   30) !     concerne avant l'appel au sous-programme.
(   31) !
(   32) !
(   33) !
(   34) TYPE(FA_COM) :: FA
(   35) INTEGER (KIND=JPLIKB) KREP, KRANG
(   36) INTEGER (KIND=JPLIKB) KDATEF (FA%JPLDAT)
(   37) INTEGER (KIND=JPLIKB) KDATXF (FA%JPLDAT)
(   38) !
(   39) INTEGER (KIND=JPLIKB) IMI123, IMAX69, IMINIM
(   40) INTEGER (KIND=JPLIKB) J, ILMOIS, INIMES, INUMER
(   41) INTEGER (KIND=JPLIKB) ISECMAX
(   42) !
(   43) LOGICAL LDMODA
(   44) !
(   45) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   46) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   47) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   48) LOGICAL                  LLFATA
(   49) # 50 "fandai.F90"
(   50) !**
(   51) !     1.  -  CONTROLES DES PARAMETRES D'APPEL.
(   52) !-----------------------------------------------------------------------
(   53) !
(   54) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   55) IF (LHOOK) CALL DR_HOOK('FANDAI_MT',0,ZHOOK_HANDLE)
(   56) CLACTI=''
(   57) LDMODA=.FALSE.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 9

(   58) KREP=0
(   59) !
(   60) IF (KRANG.LE.0.OR.KRANG.GT.FA%JPNXFA) THEN
(   61)   KREP=-66
(   62)   GOTO 1001
(   63) ENDIF
(   64) # 65 "fandai.F90"
(   65) IF (KDATXF (JD_DEX-FA%JPLDAT) > 0) THEN
(   66) # 67 "fandai.F90"
(   67) !
(   68) !         Controle de la Date etendue.
(   69) !
(   70)   IF (ANY (KDATXF < 0)) KREP=-82
(   71) # 72 "fandai.F90"
(   72)   IF (KDATEF (JD_HOU) < 0 .AND. KDATEF (JD_MIN) < 0) THEN
(   73)     KDATEF (JD_HOU) = KDATXF (JD_SEM-FA%JPLDAT) / 3600
(   74)     KDATEF (JD_MIN) = KDATXF (JD_SEM-FA%JPLDAT) / 60
(   75)   ENDIF
(   76)  
(   77) !
(   78) !         Controle de la coherence de la date et de la date etendue
(   79) !
(   80)   IF (KDATXF (JD_FMT-FA%JPLDAT) > 0) THEN
(   81)     ISECMAX = 60
(   82)   ELSE
(   83)     ISECMAX = 3600
(   84)   ENDIF
(   85) # 86 "fandai.F90"
(   86)   IF (ABS (KDATEF (JD_HOU) * 3600 + KDATEF (JD_MIN) * 60 - KDATXF (JD_SEM-FA%JPLDAT)) > ISECMAX) KREP=-82
(   87) # 88 "fandai.F90"
(   88)   CALL FANDAI_CMPSEC (KDATEF (JD_TUN), KDATEF (JD_THO), KDATXF (JD_SET-FA%JPLDAT))
(   89)   CALL FANDAI_CMPSEC (KDATEF (JD_TUN), KDATEF (JD_CU1), KDATXF (JD_CE1-FA%JPLDAT))
(   90)   CALL FANDAI_CMPSEC (KDATEF (JD_TUN), KDATEF (JD_CU2), KDATXF (JD_CE2-FA%JPLDAT))
(   91) # 92 "fandai.F90"
(   92)   IF (KREP /= 0) GOTO 1001
(   93) ENDIF
(   94) # 95 "fandai.F90"
(   95) !
(   96) !         Controle de la Date proprement dite.
(   97) !
(   98) IMI123=MIN (KDATEF(JD_YEA),KDATEF(JD_MON),KDATEF(JD_DAY))
(   99) IMAX69=MAX (KDATEF(JD_TUN),KDATEF(JD_IAN))
(  100) IMINIM=KDATEF(JD_YEA)
(  101) !
(  102) DO J=2,FA%JPLDAT
(  103) IMINIM=MIN (IMINIM,KDATEF(J))
(  104) ENDDO
(  105) !
(  106) IF (IMINIM.LT.0.OR.IMI123.LE.0.OR.KDATEF(JD_MON).GT.12.OR.                    &
(  107) &   KDATEF(JD_DAY).GT.31.OR.KDATEF(JD_HOU).GE.24.OR.KDATEF(JD_MIN).GE.60.OR.  &
(  108) &   IMAX69.GE.255.OR.                                                         &
(  109) & (KDATEF(JD_CU1).LE.KDATEF(JD_CU2).AND.(KDATEF(JD_CU1)*KDATEF(JD_CU2)).NE.0)) THEN
(  110) !
(  111) !        Erreur de syntaxe.
(  112) !
(  113)   KREP=-82
(  114)   GOTO 1001
(  115) ELSEIF ((KDATEF(JD_MON).GT.7.OR.MOD (KDATEF(JD_MON),2_JPLIKB ).EQ.0).AND.  &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 10

(  116) &       (KDATEF(JD_MON).LE.7.OR.MOD (KDATEF(JD_MON),2_JPLIKB ).EQ.1)) THEN
(  117) !
(  118) !        Controle de coherence (annee,mois,jour).
(  119) !
(  120)   IF (KDATEF(JD_MON).EQ.2) THEN
(  121)     ILMOIS=28+MAX (0_JPLIKB ,1-MOD (KDATEF(JD_YEA),4_JPLIKB ))
(  122)   ELSE
(  123)     ILMOIS=30
(  124)   ENDIF
(  125) !
(  126)   IF (KDATEF(JD_DAY).GT.ILMOIS) THEN
(  127)     KREP=-82
(  128)     GOTO 1001
(  129)   ENDIF
(  130) !
(  131) ENDIF
(  132) # 134 "fandai.F90"
(  134) IF (KDATXF (JD_DEX-FA%JPLDAT) == 0) THEN
(  135)   
(  136) !
(  137) !        Calcul de la date etendue si elle n'est pas definie
(  138) !
(  139)   KDATXF (JD_DEX-FA%JPLDAT) = 1
(  140)   KDATXF (JD_SEM-FA%JPLDAT) = KDATEF (JD_HOU) * 3600 + KDATEF (JD_MIN) * 60
(  141) # 142 "fandai.F90"
(  142)   CALL FANDAI_SETSEC (KDATEF (JD_TUN), KDATEF (JD_THO), KDATXF (JD_SET-FA%JPLDAT))
(  143)   CALL FANDAI_SETSEC (KDATEF (JD_TUN), KDATEF (JD_CU1), KDATXF (JD_CE1-FA%JPLDAT))
(  144)   CALL FANDAI_SETSEC (KDATEF (JD_TUN), KDATEF (JD_CU2), KDATXF (JD_CE2-FA%JPLDAT))
(  145)   KDATXF (JD_TST-FA%JPLDAT) = 1800
(  146) # 147 "fandai.F90"
(  147) ENDIF
(  148) # 149 "fandai.F90"
(  149) !**
(  150) !     2.  -  SI DATE DEJA DEFINIE, COMPARAISON ANCIENNE/NOUVELLE.
(  151) !-----------------------------------------------------------------------
(  152) !
(  153) IF (.NOT. FA%FICHIER(KRANG)%LCREAF) THEN
(  154) !
(  155)   DO J=1,FA%JPLDAT
(  156) !
(  157)   IF (FA%FICHIER(KRANG)%MADATE(J).NE.KDATEF(J)) THEN
(  158)     LDMODA=.TRUE.
(  159)     GOTO 300
(  160)   ENDIF
(  161) !
(  162)   ENDDO
(  163) !
(  164)   DO J=1,FA%JPLDAT
(  165) !
(  166)   IF (FA%FICHIER(KRANG)%MADATX(J).NE.KDATXF(J)) THEN
(  167)     LDMODA=.TRUE.
(  168)     GOTO 300
(  169)   ENDIF
(  170) !
(  171)   ENDDO
(  172) !
(  173) !         Si on arrive ici, il y a redefinition a l'identique.
(  174) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 11

(  175)   GOTO 1001
(  176) ENDIF
(  177) !**
(  178) !     3.  -  SI NECESSAIRE, MISE A JOUR DU TABLEAU "FA%MADATE".
(  179) !-----------------------------------------------------------------------
(  180) !
(  181) 300 CONTINUE
(  182) !
(  183) FA%FICHIER(KRANG)%MADATE (:) = KDATEF (:)
(  184) FA%FICHIER(KRANG)%MADATX (:) = KDATXF (:)
(  185) !**
(  186) !    10.  -  PHASE TERMINALE : MESSAGERIE EVENTUELLE,
(  187) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  188) !-----------------------------------------------------------------------
(  189) !
(  190) 1001 CONTINUE
(  191) LLFATA=LLMOER (KREP,KRANG)
(  192) !
(  193) IF (FA%LFAMOP.OR.LLFATA) THEN
(  194)   INIMES=2
(  195)   CLNSPR='FANDAI'
(  196)   INUMER=JPNIIL
(  197)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KRANG='',I4,    &
(  198) &       '', KDATEF(1:5)='',I5,2(''/'',I2),I3,'':'',I2.2,    &
(  199) &       '', KDATEF(7:8)='',I6,''-'',I6,'', KDATXF='',11I6,  &
(  200) &       '', LDMODA= '',L1)') &
(  201) &     KREP,KRANG,(KDATEF(J),J=1,5),(KDATEF(J),J=7,8),KDATXF,&
(  202) &     LDMODA
(  203)   CALL FAIPAR_MT64                                      &
(  204) &               (FA, INUMER,INIMES,KREP,.FALSE.,CLMESS, &
(  205) &                CLNSPR,CLACTI, .FALSE.)
(  206) ENDIF
(  207) !
(  208) IF (LHOOK) CALL DR_HOOK('FANDAI_MT',1,ZHOOK_HANDLE)
(  209) # 210 "fandai.F90"
(  210) CONTAINS
(  211) # 212 "fandai.F90"
(  212) SUBROUTINE FANDAI_SETSEC (KDATEF6, KDATEFX, KSECS)
(  213) # 214 "fandai.F90"
(  214) INTEGER (KIND=JPLIKB), INTENT (IN)    :: KDATEF6
(  215) INTEGER (KIND=JPLIKB), INTENT (IN)    :: KDATEFX
(  216) INTEGER (KIND=JPLIKB), INTENT (INOUT) :: KSECS
(  217) # 218 "fandai.F90"
(  218) SELECT CASE (KDATEF6)
(  219)   CASE (1)
(  220)     KSECS = KDATEFX * 3600
(  221)   CASE (2)
(  222)     KSECS = KDATEFX * 3600 * 24
(  223)   CASE DEFAULT
(  224)     KSECS = -1
(  225) END SELECT
(  226) # 227 "fandai.F90"
(  227) END SUBROUTINE FANDAI_SETSEC
(  228) # 229 "fandai.F90"
(  229) SUBROUTINE FANDAI_CMPSEC (KDATEF6, KDATEFX, KSECS)
(  230) # 231 "fandai.F90"
(  231) INTEGER (KIND=JPLIKB), INTENT (INOUT) :: KDATEF6
(  232) INTEGER (KIND=JPLIKB), INTENT (INOUT) :: KDATEFX






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 12

(  233) INTEGER (KIND=JPLIKB), INTENT (IN)    :: KSECS
(  234) # 235 "fandai.F90"
(  235) IF (KDATEF6 < 0) THEN
(  236)   IF (KSECS < 65000) THEN
(  237)     KDATEF6 = 1
(  238)   ELSE
(  239)     KDATEF6 = 2
(  240)   ENDIF
(  241) ENDIF
(  242) # 243 "fandai.F90"
(  243) IF (KDATEFX < 0) THEN
(  244) # 245 "fandai.F90"
(  245)   SELECT CASE (KDATEF6)
(  246)     CASE (1)
(  247)       KDATEFX = NINT (REAL (KSECS, JPDBLR) / 3600._JPDBLR)
(  248)     CASE (2)
(  249)       KDATEFX = NINT (REAL (KSECS, JPDBLR) / 3600._JPDBLR) / 24
(  250)     CASE DEFAULT
(  251)       KREP=-82
(  252)   END SELECT
(  253) # 254 "fandai.F90"
(  254) ENDIF
(  255) # 256 "fandai.F90"
(  256) SELECT CASE (KDATEF6)
(  257)   CASE (1)
(  258)     IF (ABS (KDATEFX * 3600 - KSECS) > 3600) THEN
(  259)       KREP=-82
(  260)     ENDIF
(  261)   CASE (2)
(  262)     IF (ABS (KDATEFX * 3600 * 24 - KSECS) > 3600 * 24) THEN
(  263)       KREP=-82
(  264)     ENDIF
(  265)   CASE DEFAULT
(  266)     KREP=-82
(  267) END SELECT
(  268) # 269 "fandai.F90"
(  269) END SUBROUTINE FANDAI_CMPSEC
(  270) # 271 "fandai.F90"
(  271) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 272 "fandai.F90"
(  272) # 273 "fandai.F90"
(  273) END SUBROUTINE FANDAI_MT64
