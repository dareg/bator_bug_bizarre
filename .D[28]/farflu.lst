


NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: farflu.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FARFLU_MT64                                     &
(    4) &                     (FA,  KXNIVV, KXTRON, KXLATI, KXLONG )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme servant a specifier des Limites Utilisateur
(   12) !     en termes de Resolutions horizontale et verticale, valides
(   13) !     globalement pour tous les Fichiers et Cadres ARPEGE.
(   14) !            ( Resolution Fichiers - Limites Utilisateur )
(   15) !**
(   16) !        Arguments : KXNIVV ==> Nombre maximum de niveaux verticaux;
(   17) !  (tous d'Entree)   KXTRON ==> Troncature maximum;
(   18) !                    KXLATI ==> Nombre maximum de latitudes pole a pole;
(   19) !                    KXLONG ==> Nombre maxi de longitudes par parallele.
(   20) !*
(   21) !        S'il y a des cadres deja definis (dynamiquement ou non) avec
(   22) !     des valeurs correspondantes plus grandes, cela provoque une erreur
(   23) !     globale.
(   24) !        Si les valeurs donnees en argument depassent les limites cor-
(   25) !     repondantes du logiciel, elles sont ecretees, avec un message.
(   26) !        Une messagerie de niveau 1 est emise dans le cas normal ou
(   27) !     ci-dessus.
(   28) !
(   29) !
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 3

(   31) TYPE(FA_COM) :: FA
(   32) INTEGER (KIND=JPLIKB) KXNIVV, KXTRON, KXLATI, KXLONG
(   33) !
(   34) INTEGER (KIND=JPLIKB) INUMER, INIMES, IREP, IMINIM
(   35) INTEGER (KIND=JPLIKB) IXNIVV, IXTRON, IXLATI, J
(   36) INTEGER (KIND=JPLIKB) IXLONG, IRANGC
(   37) !
(   38) LOGICAL LLDEPA, LLVERG
(   39) !
(   40) !
(   41) !
(   42) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   43) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   44) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   45) LOGICAL                  LLFATA
(   46) 
(   47) !**
(   48) !     1.  -  SI PREMIERE UTILISATION, APPEL AU SOUS-PROGRAMME "FARINE".
(   49) !-----------------------------------------------------------------------
(   50) !
(   51) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   52) IF (LHOOK) CALL DR_HOOK('FARFLU_MT',0,ZHOOK_HANDLE)
(   53) CLACTI=''
(   54) IF (FA%FARFLU_LLPREA) THEN
(   55)   CALL FARINE_MT64              &
(   56) &                 (FA, 2_JPLIKB )
(   57)   FA%FARFLU_LLPREA=.FALSE.
(   58) ENDIF
(   59) !**
(   60) !     2.  -  CONTROLES.
(   61) !-----------------------------------------------------------------------
(   62) !
(   63) IMINIM=MIN (KXNIVV,KXTRON,KXLATI,KXLONG)
(   64) !
(   65) IF (IMINIM.LE.0) THEN
(   66)   LLVERG=.FALSE.
(   67)   LLDEPA=.FALSE.
(   68)   IREP=-64
(   69)   GOTO 1001
(   70) ELSE
(   71)   LLDEPA=KXNIVV.GT.FA%JPXNIV.OR.KXTRON.GT.FA%JPXTRO.OR. &
(   72) &         KXLATI.GT.FA%JPXLAT.OR.KXLONG.GT.FA%JPXLON
(   73)   IXNIVV=MIN (KXNIVV,FA%JPXNIV)
(   74)   IXTRON=MIN (KXTRON,FA%JPXTRO)
(   75)   IXLATI=MIN (KXLATI,FA%JPXLAT)
(   76)   IXLONG=MIN (KXLONG,FA%JPXLON)
(   77) ENDIF
(   78) !
(   79) !             Verrouillage global, si necessaire.
(   80) !
(   81) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(   82) &                              (FA%LFI, FA%VRGLAS,'ON')
(   83) LLVERG=FA%LFAMUL
(   84) !
(   85) IF (IXTRON.LE.FA%NSTROI) THEN
(   86)   IREP=-99
(   87)   GOTO 1001
(   88) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 4

(   89) !
(   90) !        Controles vis-a-vis des cadres deja definis, s'il y en a.
(   91) !
(   92) DO J=1,FA%NCADEF
(   93) IRANGC=FA%NCAIND(J)
(   94) !
(   95) IF (FA%CADRE(IRANGC)%MTRONC.GT.IXTRON) THEN
(   96)   IREP=-104
(   97)   GOTO 1001
(   98) ELSEIF (FA%CADRE(IRANGC)%NNIVER.GT.IXNIVV) THEN
(   99)   IREP=-105
(  100)   GOTO 1001
(  101) ELSEIF (FA%CADRE(IRANGC)%NLATIT.GT.IXLATI) THEN
(  102)   IREP=-106
(  103)   GOTO 1001
(  104) ELSEIF (FA%CADRE(IRANGC)%NXLOPA.GT.IXLONG) THEN
(  105)   IREP=-107
(  106)   GOTO 1001
(  107) ENDIF
(  108) !
(  109) ENDDO
(  110) !**
(  111) !     3.  -  MODIFICATION DES LIMITES USAGER.
(  112) !-----------------------------------------------------------------------
(  113) !
(  114) FA%NXNIVV=IXNIVV
(  115) FA%NXTRON=IXTRON
(  116) FA%NXLATI=IXLATI
(  117) FA%NXLONG=IXLONG
(  118) IREP=0
(  119) !**
(  120) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  121) !            VIA LE sous-programme "FAIPAR" .
(  122) !-----------------------------------------------------------------------
(  123) !
(  124) 1001 CONTINUE
(  125) !
(  126) !          Deverrouillage global eventuel.
(  127) !
(  128) IF (LLVERG) CALL LFIVER_MT64                         &
(  129) &                           (FA%LFI, FA%VRGLAS,'OFF')
(  130) !
(  131) LLFATA=IREP.NE.0.AND.FA%NRFAGA.NE.2
(  132) !
(  133) IF (LLFATA) THEN
(  134)   INIMES=2
(  135) ELSEIF (FA%NIMSGA.EQ.0) THEN
(  136)   IF (LHOOK) CALL DR_HOOK('FARFLU_MT',1,ZHOOK_HANDLE)
(  137)   RETURN
(  138) ELSE
(  139)   INIMES=FA%NIMSGA
(  140) ENDIF
(  141) !
(  142) CLNSPR='FARFLU'
(  143) INUMER=JPNIIL
(  144) !
(  145) IF (INIMES.EQ.2) THEN
(  146)   WRITE (UNIT=CLMESS,FMT='(''KXNIVV='',I4,'', KXTRON='',I4, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 5

(  147) &         '', KXLATI='',I4,'', KXLONG='',I4)')               &
(  148) &     KXNIVV,KXTRON,KXLATI,KXLONG
(  149)   CALL FAIPAR_MT64                                     &
(  150) &                 (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(  151) &               CLNSPR,CLACTI,.FALSE.)
(  152) ENDIF
(  153) !
(  154) IF (INIMES.GE.1) THEN
(  155) !
(  156)   IF (LLDEPA) THEN
(  157)     WRITE (UNIT=CLMESS,FMT=                                       &
(  158) &   '(''LIMITES USAGER (***ECRETEES***): FA%NXNIVV='',I4,          &
(  159) &   '', FA%NXTRON='',I4,'', FA%NXLATI='',I4,'', FA%NXLONG='',I4)') &
(  160) &     FA%NXNIVV,FA%NXTRON,FA%NXLATI,FA%NXLONG
(  161)   ELSE
(  162)     WRITE (UNIT=CLMESS,FMT=                                        &
(  163) &    '(''LIMITES USAGER EFFECTIVES: FA%NXNIVV='',I4,                &
(  164) &    '', FA%NXTRON='',I4,'', FA%NXLATI='',I4,'', FA%NXLONG='',I4)') &
(  165) &     FA%NXNIVV,FA%NXTRON,FA%NXLATI,FA%NXLONG
(  166)   ENDIF
(  167) !
(  168)   CALL FAIPAR_MT64                                      &
(  169) &                 (FA, INUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  170) &               CLNSPR,CLACTI,.FALSE.)
(  171) ENDIF
(  172) !
(  173) IF (LHOOK) CALL DR_HOOK('FARFLU_MT',1,ZHOOK_HANDLE)
(  174) END SUBROUTINE FARFLU_MT64
(  175) 
(  176) 
(  177) 
(  178) ! Oct-2012 P. Marguinaud 64b LFI
(  179) SUBROUTINE FARFLU64                        &
(  180) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(  181) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  182) &                   FA_COM_DEFAULT_INIT,  &
(  183) &                   NEW_FA_DEFAULT
(  184) USE LFI_PRECISION
(  185) IMPLICIT NONE
(  186) ! Arguments
(  187) INTEGER (KIND=JPLIKB)  KXNIVV                                 ! IN   
(  188) INTEGER (KIND=JPLIKB)  KXTRON                                 ! IN   
(  189) INTEGER (KIND=JPLIKB)  KXLATI                                 ! IN   
(  190) INTEGER (KIND=JPLIKB)  KXLONG                                 ! IN   
(  191) 
(  192) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  193) 
(  194) CALL FARFLU_MT64                               &
(  195) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  196) 
(  197) END SUBROUTINE FARFLU64
(  198) 
(  199) SUBROUTINE FARFLU                          &
(  200) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(  201) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  202) &                   FA_COM_DEFAULT_INIT,  &
(  203) &                   NEW_FA_DEFAULT
(  204) USE LFI_PRECISION






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 6

(  205) IMPLICIT NONE
(  206) ! Arguments
(  207) INTEGER (KIND=JPLIKM)  KXNIVV                                 ! IN   
(  208) INTEGER (KIND=JPLIKM)  KXTRON                                 ! IN   
(  209) INTEGER (KIND=JPLIKM)  KXLATI                                 ! IN   
(  210) INTEGER (KIND=JPLIKM)  KXLONG                                 ! IN   
(  211) 
(  212) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  213) 
(  214) CALL FARFLU_MT                                 &
(  215) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  216) 
(  217) END SUBROUTINE FARFLU
(  218) 
(  219) SUBROUTINE FARFLU_MT                           &
(  220) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  221) USE FA_MOD, ONLY : FA_COM
(  222) USE LFI_PRECISION
(  223) IMPLICIT NONE
(  224) ! Arguments
(  225) TYPE (FA_COM)          FA                                     ! INOUT
(  226) INTEGER (KIND=JPLIKM)  KXNIVV                                 ! IN   
(  227) INTEGER (KIND=JPLIKM)  KXTRON                                 ! IN   
(  228) INTEGER (KIND=JPLIKM)  KXLATI                                 ! IN   
(  229) INTEGER (KIND=JPLIKM)  KXLONG                                 ! IN   
(  230) ! Local integers
(  231) INTEGER (KIND=JPLIKB)  IXNIVV                                 ! IN   
(  232) INTEGER (KIND=JPLIKB)  IXTRON                                 ! IN   
(  233) INTEGER (KIND=JPLIKB)  IXLATI                                 ! IN   
(  234) INTEGER (KIND=JPLIKB)  IXLONG                                 ! IN   
(  235) ! Convert arguments
(  236) 
(  237) IXNIVV     = INT (    KXNIVV, JPLIKB)
(  238) IXTRON     = INT (    KXTRON, JPLIKB)
(  239) IXLATI     = INT (    KXLATI, JPLIKB)
(  240) IXLONG     = INT (    KXLONG, JPLIKB)
(  241) 
(  242) CALL FARFLU_MT64                               &
(  243) &           (FA, IXNIVV, IXTRON, IXLATI, IXLONG)
(  244) 
(  245) 
(  246) END SUBROUTINE FARFLU_MT
(  247) 
(  248) !INTF KXNIVV        IN    
(  249) !INTF KXTRON        IN    
(  250) !INTF KXLATI        IN    
(  251) !INTF KXLONG        IN    

















NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 7

(    1) # 1 "farflu.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FARFLU_MT64                                     &
(    4) &                     (FA,  KXNIVV, KXTRON, KXLATI, KXLONG )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme servant a specifier des Limites Utilisateur
(   12) !     en termes de Resolutions horizontale et verticale, valides
(   13) !     globalement pour tous les Fichiers et Cadres ARPEGE.
(   14) !            ( Resolution Fichiers - Limites Utilisateur )
(   15) !**
(   16) !        Arguments : KXNIVV ==> Nombre maximum de niveaux verticaux;
(   17) !  (tous d'Entree)   KXTRON ==> Troncature maximum;
(   18) !                    KXLATI ==> Nombre maximum de latitudes pole a pole;
(   19) !                    KXLONG ==> Nombre maxi de longitudes par parallele.
(   20) !*
(   21) !        S'il y a des cadres deja definis (dynamiquement ou non) avec
(   22) !     des valeurs correspondantes plus grandes, cela provoque une erreur
(   23) !     globale.
(   24) !        Si les valeurs donnees en argument depassent les limites cor-
(   25) !     repondantes du logiciel, elles sont ecretees, avec un message.
(   26) !        Une messagerie de niveau 1 est emise dans le cas normal ou
(   27) !     ci-dessus.
(   28) !
(   29) !
(   30) !
(   31) TYPE(FA_COM) :: FA
(   32) INTEGER (KIND=JPLIKB) KXNIVV, KXTRON, KXLATI, KXLONG
(   33) !
(   34) INTEGER (KIND=JPLIKB) INUMER, INIMES, IREP, IMINIM
(   35) INTEGER (KIND=JPLIKB) IXNIVV, IXTRON, IXLATI, J
(   36) INTEGER (KIND=JPLIKB) IXLONG, IRANGC
(   37) !
(   38) LOGICAL LLDEPA, LLVERG
(   39) !
(   40) !
(   41) !
(   42) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   43) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   44) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   45) LOGICAL                  LLFATA
(   46) # 47 "farflu.F90"
(   47) !**
(   48) !     1.  -  SI PREMIERE UTILISATION, APPEL AU SOUS-PROGRAMME "FARINE".
(   49) !-----------------------------------------------------------------------
(   50) !
(   51) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   52) IF (LHOOK) CALL DR_HOOK('FARFLU_MT',0,ZHOOK_HANDLE)
(   53) CLACTI=''
(   54) IF (FA%FARFLU_LLPREA) THEN
(   55)   CALL FARINE_MT64              &
(   56) &                 (FA, 2_JPLIKB )
(   57)   FA%FARFLU_LLPREA=.FALSE.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 8

(   58) ENDIF
(   59) !**
(   60) !     2.  -  CONTROLES.
(   61) !-----------------------------------------------------------------------
(   62) !
(   63) IMINIM=MIN (KXNIVV,KXTRON,KXLATI,KXLONG)
(   64) !
(   65) IF (IMINIM.LE.0) THEN
(   66)   LLVERG=.FALSE.
(   67)   LLDEPA=.FALSE.
(   68)   IREP=-64
(   69)   GOTO 1001
(   70) ELSE
(   71)   LLDEPA=KXNIVV.GT.FA%JPXNIV.OR.KXTRON.GT.FA%JPXTRO.OR. &
(   72) &         KXLATI.GT.FA%JPXLAT.OR.KXLONG.GT.FA%JPXLON
(   73)   IXNIVV=MIN (KXNIVV,FA%JPXNIV)
(   74)   IXTRON=MIN (KXTRON,FA%JPXTRO)
(   75)   IXLATI=MIN (KXLATI,FA%JPXLAT)
(   76)   IXLONG=MIN (KXLONG,FA%JPXLON)
(   77) ENDIF
(   78) !
(   79) !             Verrouillage global, si necessaire.
(   80) !
(   81) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(   82) &                              (FA%LFI, FA%VRGLAS,'ON')
(   83) LLVERG=FA%LFAMUL
(   84) !
(   85) IF (IXTRON.LE.FA%NSTROI) THEN
(   86)   IREP=-99
(   87)   GOTO 1001
(   88) ENDIF
(   89) !
(   90) !        Controles vis-a-vis des cadres deja definis, s'il y en a.
(   91) !
(   92) DO J=1,FA%NCADEF
(   93) IRANGC=FA%NCAIND(J)
(   94) !
(   95) IF (FA%CADRE(IRANGC)%MTRONC.GT.IXTRON) THEN
(   96)   IREP=-104
(   97)   GOTO 1001
(   98) ELSEIF (FA%CADRE(IRANGC)%NNIVER.GT.IXNIVV) THEN
(   99)   IREP=-105
(  100)   GOTO 1001
(  101) ELSEIF (FA%CADRE(IRANGC)%NLATIT.GT.IXLATI) THEN
(  102)   IREP=-106
(  103)   GOTO 1001
(  104) ELSEIF (FA%CADRE(IRANGC)%NXLOPA.GT.IXLONG) THEN
(  105)   IREP=-107
(  106)   GOTO 1001
(  107) ENDIF
(  108) !
(  109) ENDDO
(  110) !**
(  111) !     3.  -  MODIFICATION DES LIMITES USAGER.
(  112) !-----------------------------------------------------------------------
(  113) !
(  114) FA%NXNIVV=IXNIVV
(  115) FA%NXTRON=IXTRON






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 9

(  116) FA%NXLATI=IXLATI
(  117) FA%NXLONG=IXLONG
(  118) IREP=0
(  119) !**
(  120) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  121) !            VIA LE sous-programme "FAIPAR" .
(  122) !-----------------------------------------------------------------------
(  123) !
(  124) 1001 CONTINUE
(  125) !
(  126) !          Deverrouillage global eventuel.
(  127) !
(  128) IF (LLVERG) CALL LFIVER_MT64                         &
(  129) &                           (FA%LFI, FA%VRGLAS,'OFF')
(  130) !
(  131) LLFATA=IREP.NE.0.AND.FA%NRFAGA.NE.2
(  132) !
(  133) IF (LLFATA) THEN
(  134)   INIMES=2
(  135) ELSEIF (FA%NIMSGA.EQ.0) THEN
(  136)   IF (LHOOK) CALL DR_HOOK('FARFLU_MT',1,ZHOOK_HANDLE)
(  137)   RETURN
(  138) ELSE
(  139)   INIMES=FA%NIMSGA
(  140) ENDIF
(  141) !
(  142) CLNSPR='FARFLU'
(  143) INUMER=JPNIIL
(  144) !
(  145) IF (INIMES.EQ.2) THEN
(  146)   WRITE (UNIT=CLMESS,FMT='(''KXNIVV='',I4,'', KXTRON='',I4, &
(  147) &         '', KXLATI='',I4,'', KXLONG='',I4)')               &
(  148) &     KXNIVV,KXTRON,KXLATI,KXLONG
(  149)   CALL FAIPAR_MT64                                     &
(  150) &                 (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(  151) &               CLNSPR,CLACTI,.FALSE.)
(  152) ENDIF
(  153) !
(  154) IF (INIMES.GE.1) THEN
(  155) !
(  156)   IF (LLDEPA) THEN
(  157)     WRITE (UNIT=CLMESS,FMT=                                       &
(  158) &   '(''LIMITES USAGER (***ECRETEES***): FA%NXNIVV='',I4,          &
(  159) &   '', FA%NXTRON='',I4,'', FA%NXLATI='',I4,'', FA%NXLONG='',I4)') &
(  160) &     FA%NXNIVV,FA%NXTRON,FA%NXLATI,FA%NXLONG
(  161)   ELSE
(  162)     WRITE (UNIT=CLMESS,FMT=                                        &
(  163) &    '(''LIMITES USAGER EFFECTIVES: FA%NXNIVV='',I4,                &
(  164) &    '', FA%NXTRON='',I4,'', FA%NXLATI='',I4,'', FA%NXLONG='',I4)') &
(  165) &     FA%NXNIVV,FA%NXTRON,FA%NXLATI,FA%NXLONG
(  166)   ENDIF
(  167) !
(  168)   CALL FAIPAR_MT64                                      &
(  169) &                 (FA, INUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  170) &               CLNSPR,CLACTI,.FALSE.)
(  171) ENDIF
(  172) !
(  173) IF (LHOOK) CALL DR_HOOK('FARFLU_MT',1,ZHOOK_HANDLE)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 10

(  174) END SUBROUTINE FARFLU_MT64
(  175) # 178 "farflu.F90"
(  178) ! Oct-2012 P. Marguinaud 64b LFI
(  179) SUBROUTINE FARFLU64                        &
(  180) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(  181) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  182) &                   FA_COM_DEFAULT_INIT,  &
(  183) &                   NEW_FA_DEFAULT
(  184) USE LFI_PRECISION
(  185) IMPLICIT NONE
(  186) ! Arguments
(  187) INTEGER (KIND=JPLIKB)  KXNIVV                                 ! IN   
(  188) INTEGER (KIND=JPLIKB)  KXTRON                                 ! IN   
(  189) INTEGER (KIND=JPLIKB)  KXLATI                                 ! IN   
(  190) INTEGER (KIND=JPLIKB)  KXLONG                                 ! IN   
(  191) # 192 "farflu.F90"
(  192) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  193) # 194 "farflu.F90"
(  194) CALL FARFLU_MT64                               &
(  195) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  196) # 197 "farflu.F90"
(  197) END SUBROUTINE FARFLU64
(  198) # 199 "farflu.F90"
(  199) SUBROUTINE FARFLU                          &
(  200) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(  201) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  202) &                   FA_COM_DEFAULT_INIT,  &
(  203) &                   NEW_FA_DEFAULT
(  204) USE LFI_PRECISION
(  205) IMPLICIT NONE
(  206) ! Arguments
(  207) INTEGER (KIND=JPLIKM)  KXNIVV                                 ! IN   
(  208) INTEGER (KIND=JPLIKM)  KXTRON                                 ! IN   
(  209) INTEGER (KIND=JPLIKM)  KXLATI                                 ! IN   
(  210) INTEGER (KIND=JPLIKM)  KXLONG                                 ! IN   
(  211) # 212 "farflu.F90"
(  212) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  213) # 214 "farflu.F90"
(  214) CALL FARFLU_MT                                 &
(  215) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  216) # 217 "farflu.F90"
(  217) END SUBROUTINE FARFLU
(  218) # 219 "farflu.F90"
(  219) SUBROUTINE FARFLU_MT                           &
(  220) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  221) USE FA_MOD, ONLY : FA_COM
(  222) USE LFI_PRECISION
(  223) IMPLICIT NONE
(  224) ! Arguments
(  225) TYPE (FA_COM)          FA                                     ! INOUT
(  226) INTEGER (KIND=JPLIKM)  KXNIVV                                 ! IN   
(  227) INTEGER (KIND=JPLIKM)  KXTRON                                 ! IN   
(  228) INTEGER (KIND=JPLIKM)  KXLATI                                 ! IN   
(  229) INTEGER (KIND=JPLIKM)  KXLONG                                 ! IN   
(  230) ! Local integers
(  231) INTEGER (KIND=JPLIKB)  IXNIVV                                 ! IN   
(  232) INTEGER (KIND=JPLIKB)  IXTRON                                 ! IN   
(  233) INTEGER (KIND=JPLIKB)  IXLATI                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:54:50      page 11

(  234) INTEGER (KIND=JPLIKB)  IXLONG                                 ! IN   
(  235) ! Convert arguments
(  236) # 237 "farflu.F90"
(  237) IXNIVV     = INT (    KXNIVV, JPLIKB)
(  238) IXTRON     = INT (    KXTRON, JPLIKB)
(  239) IXLATI     = INT (    KXLATI, JPLIKB)
(  240) IXLONG     = INT (    KXLONG, JPLIKB)
(  241) # 242 "farflu.F90"
(  242) CALL FARFLU_MT64                               &
(  243) &           (FA, IXNIVV, IXTRON, IXLATI, IXLONG)
(  244) # 246 "farflu.F90"
(  246) END SUBROUTINE FARFLU_MT
(  247) # 248 "farflu.F90"
(  248) !INTF KXNIVV        IN    
(  249) !INTF KXTRON        IN    
(  250) !INTF KXLATI        IN    
(  251) !INTF KXLONG        IN    
