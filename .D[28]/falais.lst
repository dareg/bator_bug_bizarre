


NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: falais.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FALAIS_MT64                                           &
(    4) &                     (FA,  KREP, KNUMER, CDNOMA, KDONNE, KLONGD )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme de lecture d'un article de donnees non assimila-
(   12) !     bles a un champ horizontal sur un fichier ARPEGE.
(   13) !       ( Lecture d'un Article Integre Simplement, non code )
(   14) !**
(   15) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   16) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   17) !                CDNOMA (Entree) ==> Nom de l'article;
(   18) !    ( Tableau ) KDONNE (Sortie) ==> Donnees a ecrire;
(   19) !                KLONGD (Entree) ==> Nombre de mots a ecrire.
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KREP, KNUMER, KLONGD
(   25) !
(   26) INTEGER (KIND=JPLIKB) ILCDNO, IREP, IRANG
(   27) INTEGER (KIND=JPLIKB) ILNOMA, INIMES, ILACTI
(   28) !
(   29) INTEGER (KIND=JPLIKB) KDONNE (KLONGD)
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 3

(   31) LOGICAL LLVERF, LLRLFI
(   32) !
(   33) CHARACTER CDNOMA*(*)
(   34) !
(   35) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   36) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   37) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   38) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   39) LOGICAL                  LLFATA
(   40) 
(   41) !**
(   42) !     1.  -  CONTROLES ET INITIALISATIONS.
(   43) !-----------------------------------------------------------------------
(   44) !
(   45) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   46) IF (LHOOK) CALL DR_HOOK('FALAIS_MT64',0,ZHOOK_HANDLE)
(   47) CLACTI=''
(   48) LLVERF=.FALSE.
(   49) LLRLFI=.FALSE.
(   50) ILCDNO=INT (LEN (CDNOMA), JPLIKB)
(   51) CALL FANUMU_MT64                 &
(   52) &               (FA, KNUMER,IRANG)
(   53) !
(   54) IF (IRANG.EQ.0) THEN
(   55)   IREP=-51
(   56)   GOTO 1001
(   57) ELSEIF (KLONGD.LE.0) THEN
(   58)   IREP=-64
(   59)   GOTO 1001
(   60) ELSEIF (ILCDNO.LE.0) THEN
(   61)   IREP=-65
(   62)   GOTO 1001
(   63) ENDIF
(   64) !
(   65) !         Verrouillage eventuel du fichier.
(   66) !
(   67) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   68) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   69) LLVERF=FA%LFAMUL
(   70) !
(   71) IF (FA%FICHIER(IRANG)%LCREAF) THEN
(   72)   IREP=-85
(   73)   GOTO 1001
(   74) ELSEIF (CDNOMA.EQ.FA%CPCACH.OR.CDNOMA.EQ.FA%CPCADI.OR. &
(   75) &    CDNOMA.EQ.FA%CPCAFS.OR.CDNOMA.EQ.FA%CPCARP.OR.     &
(   76) &    CDNOMA.EQ.FA%CPDATE.OR.CDNOMA.EQ.FA%CPDATX) THEN
(   77)   IREP=-111
(   78)   GOTO 1001
(   79) ENDIF
(   80) !**
(   81) !     2.  -  LECTURE DE L'ARTICLE DE DONNEES SUR LE FICHIER.
(   82) !-----------------------------------------------------------------------
(   83) !
(   84) ILNOMA=MIN ( FA%NCPCAD, INT (LEN (CDNOMA), JPLIKB) )
(   85) CLNOMA(1:ILNOMA)=CDNOMA(1:ILNOMA)
(   86) !
(   87) CALL LFILEC_MT64                                      &
(   88) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMA), &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 4

(   89) &                KDONNE,KLONGD)
(   90) LLRLFI=IREP.NE.0
(   91) !**
(   92) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   93) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(   94) !-----------------------------------------------------------------------
(   95) !
(   96) 1001 CONTINUE
(   97) KREP=IREP
(   98) LLFATA=LLMOER (IREP,IRANG)
(   99) !
(  100) !        Deverrouillage eventuel du fichier.
(  101) !
(  102) IF (LLVERF) CALL LFIVER_MT64                                &
(  103) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  104) !
(  105) IF (LLFATA) THEN
(  106)   INIMES=2
(  107) ELSE
(  108)   INIMES=IXNVMS(IRANG)
(  109) ENDIF
(  110) !
(  111) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  112)   IF (LHOOK) CALL DR_HOOK('FALAIS_MT64',1,ZHOOK_HANDLE)
(  113)   RETURN
(  114) ENDIF
(  115) !
(  116) CLNSPR='FALAIS'
(  117) !
(  118) IF (IREP.NE.-65) THEN
(  119)   ILACTI=MIN (ILCDNO,FA%NCPCAD)
(  120)   CLACTI(1:ILACTI)=CDNOMA(:ILACTI)
(  121) ELSE
(  122)   ILACTI=8
(  123)   CLACTI(1:ILACTI)=FA%CHAINC(:ILACTI)
(  124) ENDIF
(  125) !
(  126) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(  127) &       '', CDNOMA='''''',A,'''''', KLONGD='',I8)')      &
(  128) &   KREP,KNUMER,CLACTI(1:ILACTI),KLONGD
(  129) CALL FAIPAR_MT64                                     &
(  130) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  131) &                CLNSPR,CLACTI(1:ILACTI),LLRLFI)
(  132) !
(  133) IF (LHOOK) CALL DR_HOOK('FALAIS_MT64',1,ZHOOK_HANDLE)
(  134) 
(  135) CONTAINS
(  136) 
(  137) #include "facom2.llmoer.h"
(  138) #include "facom2.ixnvms.h"
(  139) 
(  140) END SUBROUTINE FALAIS_MT64
(  141) 
(  142) 
(  143) 
(  144) ! Oct-2012 P. Marguinaud 64b LFI
(  145) SUBROUTINE FALAIS64                              &
(  146) &           (KREP, KNUMER, CDNOMA, KDONNE, KLONGD)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 5

(  147) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  148) &                   FA_COM_DEFAULT_INIT,  &
(  149) &                   NEW_FA_DEFAULT
(  150) USE LFI_PRECISION
(  151) IMPLICIT NONE
(  152) ! Arguments
(  153) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  154) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  155) CHARACTER (LEN=*)      CDNOMA                                 ! IN   
(  156) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(  157) INTEGER (KIND=JPLIKB)  KDONNE     (KLONGD)                    ! IN   
(  158) 
(  159) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  160) 
(  161) CALL FALAIS_MT64                                     &
(  162) &           (FA, KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  163) 
(  164) END SUBROUTINE FALAIS64
(  165) 
(  166) SUBROUTINE FALAIS                                &
(  167) &           (KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  168) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  169) &                   FA_COM_DEFAULT_INIT,  &
(  170) &                   NEW_FA_DEFAULT
(  171) USE LFI_PRECISION
(  172) IMPLICIT NONE
(  173) ! Arguments
(  174) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  175) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  176) CHARACTER (LEN=*)      CDNOMA                                 ! IN   
(  177) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  178) INTEGER (KIND=JPLIKM)  KDONNE     (KLONGD)                    ! IN   
(  179) 
(  180) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  181) 
(  182) CALL FALAIS_MT                                       &
(  183) &           (FA, KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  184) 
(  185) END SUBROUTINE FALAIS
(  186) 
(  187) SUBROUTINE FALAIS_MT                                 &
(  188) &           (FA, KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  189) USE FA_MOD, ONLY : FA_COM
(  190) USE LFI_PRECISION
(  191) IMPLICIT NONE
(  192) ! Arguments
(  193) TYPE (FA_COM)          FA                                     ! INOUT
(  194) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  195) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  196) CHARACTER (LEN=*)      CDNOMA                                 ! IN   
(  197) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  198) INTEGER (KIND=JPLIKB)  KDONNE     (KLONGD)                    ! IN   
(  199) ! Local integers
(  200) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  201) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  202) INTEGER (KIND=JPLIKB)  ILONGD                                 ! IN   
(  203) ! Convert arguments
(  204) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 6

(  205) INUMER     = INT (    KNUMER, JPLIKB)
(  206) ILONGD     = INT (    KLONGD, JPLIKB)
(  207) 
(  208) CALL FALAIS_MT64                                     &
(  209) &           (FA, IREP, INUMER, CDNOMA, KDONNE, ILONGD)
(  210) 
(  211) KREP       = INT (      IREP, JPLIKM)
(  212) 
(  213) END SUBROUTINE FALAIS_MT
(  214) 
(  215) !INTF KREP            OUT                               
(  216) !INTF KNUMER        IN                                  
(  217) !INTF CDNOMA        IN                                  
(  218) !INTF KDONNE        IN    DIMS=KLONGD                   
(  219) !INTF KLONGD        IN                                  

















































NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 7

(    1) # 1 "falais.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FALAIS_MT64                                           &
(    4) &                     (FA,  KREP, KNUMER, CDNOMA, KDONNE, KLONGD )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme de lecture d'un article de donnees non assimila-
(   12) !     bles a un champ horizontal sur un fichier ARPEGE.
(   13) !       ( Lecture d'un Article Integre Simplement, non code )
(   14) !**
(   15) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   16) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   17) !                CDNOMA (Entree) ==> Nom de l'article;
(   18) !    ( Tableau ) KDONNE (Sortie) ==> Donnees a ecrire;
(   19) !                KLONGD (Entree) ==> Nombre de mots a ecrire.
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KREP, KNUMER, KLONGD
(   25) !
(   26) INTEGER (KIND=JPLIKB) ILCDNO, IREP, IRANG
(   27) INTEGER (KIND=JPLIKB) ILNOMA, INIMES, ILACTI
(   28) !
(   29) INTEGER (KIND=JPLIKB) KDONNE (KLONGD)
(   30) !
(   31) LOGICAL LLVERF, LLRLFI
(   32) !
(   33) CHARACTER CDNOMA*(*)
(   34) !
(   35) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   36) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   37) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   38) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   39) LOGICAL                  LLFATA
(   40) # 41 "falais.F90"
(   41) !**
(   42) !     1.  -  CONTROLES ET INITIALISATIONS.
(   43) !-----------------------------------------------------------------------
(   44) !
(   45) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   46) IF (LHOOK) CALL DR_HOOK('FALAIS_MT64',0,ZHOOK_HANDLE)
(   47) CLACTI=''
(   48) LLVERF=.FALSE.
(   49) LLRLFI=.FALSE.
(   50) ILCDNO=INT (LEN (CDNOMA), JPLIKB)
(   51) CALL FANUMU_MT64                 &
(   52) &               (FA, KNUMER,IRANG)
(   53) !
(   54) IF (IRANG.EQ.0) THEN
(   55)   IREP=-51
(   56)   GOTO 1001
(   57) ELSEIF (KLONGD.LE.0) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 8

(   58)   IREP=-64
(   59)   GOTO 1001
(   60) ELSEIF (ILCDNO.LE.0) THEN
(   61)   IREP=-65
(   62)   GOTO 1001
(   63) ENDIF
(   64) !
(   65) !         Verrouillage eventuel du fichier.
(   66) !
(   67) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   68) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   69) LLVERF=FA%LFAMUL
(   70) !
(   71) IF (FA%FICHIER(IRANG)%LCREAF) THEN
(   72)   IREP=-85
(   73)   GOTO 1001
(   74) ELSEIF (CDNOMA.EQ.FA%CPCACH.OR.CDNOMA.EQ.FA%CPCADI.OR. &
(   75) &    CDNOMA.EQ.FA%CPCAFS.OR.CDNOMA.EQ.FA%CPCARP.OR.     &
(   76) &    CDNOMA.EQ.FA%CPDATE.OR.CDNOMA.EQ.FA%CPDATX) THEN
(   77)   IREP=-111
(   78)   GOTO 1001
(   79) ENDIF
(   80) !**
(   81) !     2.  -  LECTURE DE L'ARTICLE DE DONNEES SUR LE FICHIER.
(   82) !-----------------------------------------------------------------------
(   83) !
(   84) ILNOMA=MIN ( FA%NCPCAD, INT (LEN (CDNOMA), JPLIKB) )
(   85) CLNOMA(1:ILNOMA)=CDNOMA(1:ILNOMA)
(   86) !
(   87) CALL LFILEC_MT64                                      &
(   88) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMA), &
(   89) &                KDONNE,KLONGD)
(   90) LLRLFI=IREP.NE.0
(   91) !**
(   92) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   93) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(   94) !-----------------------------------------------------------------------
(   95) !
(   96) 1001 CONTINUE
(   97) KREP=IREP
(   98) LLFATA=LLMOER (IREP,IRANG)
(   99) !
(  100) !        Deverrouillage eventuel du fichier.
(  101) !
(  102) IF (LLVERF) CALL LFIVER_MT64                                &
(  103) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  104) !
(  105) IF (LLFATA) THEN
(  106)   INIMES=2
(  107) ELSE
(  108)   INIMES=IXNVMS(IRANG)
(  109) ENDIF
(  110) !
(  111) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  112)   IF (LHOOK) CALL DR_HOOK('FALAIS_MT64',1,ZHOOK_HANDLE)
(  113)   RETURN
(  114) ENDIF
(  115) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 9

(  116) CLNSPR='FALAIS'
(  117) !
(  118) IF (IREP.NE.-65) THEN
(  119)   ILACTI=MIN (ILCDNO,FA%NCPCAD)
(  120)   CLACTI(1:ILACTI)=CDNOMA(:ILACTI)
(  121) ELSE
(  122)   ILACTI=8
(  123)   CLACTI(1:ILACTI)=FA%CHAINC(:ILACTI)
(  124) ENDIF
(  125) !
(  126) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(  127) &       '', CDNOMA='''''',A,'''''', KLONGD='',I8)')      &
(  128) &   KREP,KNUMER,CLACTI(1:ILACTI),KLONGD
(  129) CALL FAIPAR_MT64                                     &
(  130) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  131) &                CLNSPR,CLACTI(1:ILACTI),LLRLFI)
(  132) !
(  133) IF (LHOOK) CALL DR_HOOK('FALAIS_MT64',1,ZHOOK_HANDLE)
(  134) # 135 "falais.F90"
(  135) CONTAINS
(  136) # 137 "falais.F90"
(  137) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 138 "falais.F90"
(  138) # 138 "falais.F90"
(  138) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 139 "falais.F90"
(  139) # 140 "falais.F90"
(  140) END SUBROUTINE FALAIS_MT64
(  141) # 144 "falais.F90"
(  144) ! Oct-2012 P. Marguinaud 64b LFI
(  145) SUBROUTINE FALAIS64                              &
(  146) &           (KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  147) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  148) &                   FA_COM_DEFAULT_INIT,  &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 10

(  149) &                   NEW_FA_DEFAULT
(  150) USE LFI_PRECISION
(  151) IMPLICIT NONE
(  152) ! Arguments
(  153) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  154) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  155) CHARACTER (LEN=*)      CDNOMA                                 ! IN   
(  156) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(  157) INTEGER (KIND=JPLIKB)  KDONNE     (KLONGD)                    ! IN   
(  158) # 159 "falais.F90"
(  159) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  160) # 161 "falais.F90"
(  161) CALL FALAIS_MT64                                     &
(  162) &           (FA, KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  163) # 164 "falais.F90"
(  164) END SUBROUTINE FALAIS64
(  165) # 166 "falais.F90"
(  166) SUBROUTINE FALAIS                                &
(  167) &           (KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  168) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  169) &                   FA_COM_DEFAULT_INIT,  &
(  170) &                   NEW_FA_DEFAULT
(  171) USE LFI_PRECISION
(  172) IMPLICIT NONE
(  173) ! Arguments
(  174) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  175) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  176) CHARACTER (LEN=*)      CDNOMA                                 ! IN   
(  177) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  178) INTEGER (KIND=JPLIKM)  KDONNE     (KLONGD)                    ! IN   
(  179) # 180 "falais.F90"
(  180) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  181) # 182 "falais.F90"
(  182) CALL FALAIS_MT                                       &
(  183) &           (FA, KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  184) # 185 "falais.F90"
(  185) END SUBROUTINE FALAIS
(  186) # 187 "falais.F90"
(  187) SUBROUTINE FALAIS_MT                                 &
(  188) &           (FA, KREP, KNUMER, CDNOMA, KDONNE, KLONGD)
(  189) USE FA_MOD, ONLY : FA_COM
(  190) USE LFI_PRECISION
(  191) IMPLICIT NONE
(  192) ! Arguments
(  193) TYPE (FA_COM)          FA                                     ! INOUT
(  194) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  195) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  196) CHARACTER (LEN=*)      CDNOMA                                 ! IN   
(  197) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  198) INTEGER (KIND=JPLIKB)  KDONNE     (KLONGD)                    ! IN   
(  199) ! Local integers
(  200) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  201) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  202) INTEGER (KIND=JPLIKB)  ILONGD                                 ! IN   
(  203) ! Convert arguments
(  204) # 205 "falais.F90"
(  205) INUMER     = INT (    KNUMER, JPLIKB)
(  206) ILONGD     = INT (    KLONGD, JPLIKB)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 11

(  207) # 208 "falais.F90"
(  208) CALL FALAIS_MT64                                     &
(  209) &           (FA, IREP, INUMER, CDNOMA, KDONNE, ILONGD)
(  210) # 211 "falais.F90"
(  211) KREP       = INT (      IREP, JPLIKM)
(  212) # 213 "falais.F90"
(  213) END SUBROUTINE FALAIS_MT
(  214) # 215 "falais.F90"
(  215) !INTF KREP            OUT                               
(  216) !INTF KNUMER        IN                                  
(  217) !INTF CDNOMA        IN                                  
(  218) !INTF KDONNE        IN    DIMS=KLONGD                   
(  219) !INTF KLONGD        IN                                  
