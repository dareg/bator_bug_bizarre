


NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fatcha.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FATCHA_MT64                                              &
(    4) &                     (FA,  KREP, CDNOMC,  LDCOSP, KLCHAM)
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme du logiciel de Fichiers ARPEGE:
(   12) !      recuperation de la taille d'un champ horizontal
(   13) !**
(   14) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   15) !                CDNOMC (Entree) ==> Nom du cadre
(   16) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   17) !                                    par des coefficients spectraux;
(   18) !                KLCHAM (Sortie) ==> Taille du champ
(   19) !*
(   20) !       En mode multi-taches, il doit y avoir verrouillage du fichier
(   21) !     concerne avant l'appel au sous-programme.
(   22) !
(   23) !
(   24) TYPE(FA_COM)   :: FA
(   25) INTEGER (KIND=JPLIKB) KREP, KLCHAM
(   26) CHARACTER(LEN=*) CDNOMC
(   27) LOGICAL LDCOSP
(   28) !
(   29) INTEGER (KIND=JPLIKB) ITRONC
(   30) INTEGER (KIND=JPLIKB) IRANGC, INIMES, INUMER






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 3

(   31) !
(   32) LOGICAL LLMLAM
(   33) !
(   34) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   35) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   36) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   37) LOGICAL                  LLFATA
(   38) 
(   39) !**
(   40) !     1.  -  CONTROLES ET INITIALISATIONS.
(   41) !-----------------------------------------------------------------------
(   42) !
(   43) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   44) IF (LHOOK) CALL DR_HOOK('FATCHA_MT',0,ZHOOK_HANDLE)
(   45) 
(   46) KREP=0
(   47) 
(   48) CALL FANUCA_MT64 (FA, CDNOMC, IRANGC, .FALSE.)
(   49) 
(   50) IF (IRANGC.EQ.0) THEN
(   51)   KREP=-51
(   52)   GOTO 1001
(   53) ENDIF
(   54) 
(   55) CLACTI=''
(   56) 
(   57) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   58) ITRONC=FA%CADRE(IRANGC)%MTRONC
(   59) !
(   60) IF (LDCOSP) THEN
(   61)   IF (LLMLAM) THEN
(   62)     KLCHAM=FA%CADRE(IRANGC)%NSFLAM
(   63)   ELSE
(   64)     KLCHAM=(1+ITRONC)*(2+ITRONC)
(   65)   ENDIF
(   66) ELSE
(   67)   KLCHAM=FA%CADRE(IRANGC)%NVAPDG
(   68) ENDIF
(   69) 
(   70) 1001 CONTINUE
(   71) 
(   72) LLFATA = .TRUE.
(   73) 
(   74) IF (FA%LFAMOP.OR.LLFATA) THEN
(   75)   INIMES=2
(   76)   CLNSPR='FATCHA'
(   77)   INUMER=JPNIIL
(   78) !
(   79)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I5,                  &
(   80) &        '', LDCOSP= '',L1, '', KLCHAM='',I6)')           &
(   81) &        KREP, LDCOSP, KLCHAM
(   82)   CALL FAIPAR_MT64                                        &
(   83) &                 (FA, INUMER,INIMES,KREP,.FALSE.,CLMESS, &
(   84) &                  CLNSPR,CLACTI,.FALSE.)
(   85) ENDIF
(   86) !
(   87) IF (LHOOK) CALL DR_HOOK('FATCHA_MT',1,ZHOOK_HANDLE)
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 4

(   89) CONTAINS
(   90) 
(   91) #include "facom2.llmoer.h"
(   92) 
(   93) END SUBROUTINE
(   94) 
(   95) SUBROUTINE FATCHAT64 (KREP, CDNOMC, LDCOSP, KLCHAM)
(   96) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   97) &                  FA_COM_DEFAULT_INIT,  &
(   98) &                  NEW_FA_DEFAULT
(   99) USE LFI_PRECISION
(  100) IMPLICIT NONE
(  101) INTEGER (KIND=JPLIKB) KREP, KLCHAM
(  102) CHARACTER(LEN=*) CDNOMC
(  103) LOGICAL LDCOSP
(  104) 
(  105) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  106) 
(  107) CALL FATCHA_MT64 (FA,  KREP, CDNOMC,  LDCOSP, KLCHAM)
(  108) 
(  109) END SUBROUTINE
(  110) 
(  111) SUBROUTINE FATCHA (KREP, CDNOMC, LDCOSP, KLCHAM)
(  112) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  113) &                  FA_COM_DEFAULT_INIT,  &
(  114) &                  NEW_FA_DEFAULT
(  115) USE LFI_PRECISION
(  116) IMPLICIT NONE
(  117) INTEGER (KIND=JPLIKM) KREP, KLCHAM
(  118) CHARACTER(LEN=*) CDNOMC
(  119) LOGICAL LDCOSP
(  120) 
(  121) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  122) 
(  123) CALL FATCHA_MT (FA,  KREP, CDNOMC,  LDCOSP, KLCHAM)
(  124) 
(  125) END SUBROUTINE
(  126) 
(  127) SUBROUTINE FATCHA_MT (FA, KREP, CDNOMC, LDCOSP, KLCHAM)
(  128) USE FA_MOD, ONLY : FA_COM
(  129) USE LFI_PRECISION
(  130) IMPLICIT NONE
(  131) TYPE (FA_COM)         FA
(  132) INTEGER (KIND=JPLIKM) KREP, KLCHAM
(  133) CHARACTER(LEN=*)      CDNOMC
(  134) LOGICAL               LDCOSP
(  135) 
(  136) INTEGER (KIND=JPLIKB) IREP, ILCHAM
(  137) 
(  138) 
(  139) CALL FATCHA_MT64 (FA, IREP, CDNOMC,  LDCOSP, ILCHAM)
(  140) 
(  141) KREP   = INT (  IREP, JPLIKM)
(  142) KLCHAM = INT (ILCHAM, JPLIKM)
(  143) 
(  144) END SUBROUTINE
(  145) 
(  146) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 5

(  147) !INTF KREP            OUT                                                              
(  148) !INTF CDNOMC        IN                                                                 
(  149) !INTF LDCOSP        IN                                                                 
(  150) !INTF KLCHAM          OUT                                                              
(  151) 



























































NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 6

(    1) # 1 "fatcha.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FATCHA_MT64                                              &
(    4) &                     (FA,  KREP, CDNOMC,  LDCOSP, KLCHAM)
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme du logiciel de Fichiers ARPEGE:
(   12) !      recuperation de la taille d'un champ horizontal
(   13) !**
(   14) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   15) !                CDNOMC (Entree) ==> Nom du cadre
(   16) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   17) !                                    par des coefficients spectraux;
(   18) !                KLCHAM (Sortie) ==> Taille du champ
(   19) !*
(   20) !       En mode multi-taches, il doit y avoir verrouillage du fichier
(   21) !     concerne avant l'appel au sous-programme.
(   22) !
(   23) !
(   24) TYPE(FA_COM)   :: FA
(   25) INTEGER (KIND=JPLIKB) KREP, KLCHAM
(   26) CHARACTER(LEN=*) CDNOMC
(   27) LOGICAL LDCOSP
(   28) !
(   29) INTEGER (KIND=JPLIKB) ITRONC
(   30) INTEGER (KIND=JPLIKB) IRANGC, INIMES, INUMER
(   31) !
(   32) LOGICAL LLMLAM
(   33) !
(   34) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   35) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   36) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   37) LOGICAL                  LLFATA
(   38) # 39 "fatcha.F90"
(   39) !**
(   40) !     1.  -  CONTROLES ET INITIALISATIONS.
(   41) !-----------------------------------------------------------------------
(   42) !
(   43) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   44) IF (LHOOK) CALL DR_HOOK('FATCHA_MT',0,ZHOOK_HANDLE)
(   45) # 46 "fatcha.F90"
(   46) KREP=0
(   47) # 48 "fatcha.F90"
(   48) CALL FANUCA_MT64 (FA, CDNOMC, IRANGC, .FALSE.)
(   49) # 50 "fatcha.F90"
(   50) IF (IRANGC.EQ.0) THEN
(   51)   KREP=-51
(   52)   GOTO 1001
(   53) ENDIF
(   54) # 55 "fatcha.F90"
(   55) CLACTI=''
(   56) # 57 "fatcha.F90"
(   57) LLMLAM=FA%CADRE(IRANGC)%LIMLAM






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 7

(   58) ITRONC=FA%CADRE(IRANGC)%MTRONC
(   59) !
(   60) IF (LDCOSP) THEN
(   61)   IF (LLMLAM) THEN
(   62)     KLCHAM=FA%CADRE(IRANGC)%NSFLAM
(   63)   ELSE
(   64)     KLCHAM=(1+ITRONC)*(2+ITRONC)
(   65)   ENDIF
(   66) ELSE
(   67)   KLCHAM=FA%CADRE(IRANGC)%NVAPDG
(   68) ENDIF
(   69) # 70 "fatcha.F90"
(   70) 1001 CONTINUE
(   71) # 72 "fatcha.F90"
(   72) LLFATA = .TRUE.
(   73) # 74 "fatcha.F90"
(   74) IF (FA%LFAMOP.OR.LLFATA) THEN
(   75)   INIMES=2
(   76)   CLNSPR='FATCHA'
(   77)   INUMER=JPNIIL
(   78) !
(   79)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I5,                  &
(   80) &        '', LDCOSP= '',L1, '', KLCHAM='',I6)')           &
(   81) &        KREP, LDCOSP, KLCHAM
(   82)   CALL FAIPAR_MT64                                        &
(   83) &                 (FA, INUMER,INIMES,KREP,.FALSE.,CLMESS, &
(   84) &                  CLNSPR,CLACTI,.FALSE.)
(   85) ENDIF
(   86) !
(   87) IF (LHOOK) CALL DR_HOOK('FATCHA_MT',1,ZHOOK_HANDLE)
(   88) # 89 "fatcha.F90"
(   89) CONTAINS
(   90) # 91 "fatcha.F90"
(   91) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 92 "fatcha.F90"
(   92) # 93 "fatcha.F90"
(   93) END SUBROUTINE
(   94) # 95 "fatcha.F90"
(   95) SUBROUTINE FATCHAT64 (KREP, CDNOMC, LDCOSP, KLCHAM)
(   96) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   97) &                  FA_COM_DEFAULT_INIT,  &
(   98) &                  NEW_FA_DEFAULT
(   99) USE LFI_PRECISION
(  100) IMPLICIT NONE
(  101) INTEGER (KIND=JPLIKB) KREP, KLCHAM
(  102) CHARACTER(LEN=*) CDNOMC






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 8

(  103) LOGICAL LDCOSP
(  104) # 105 "fatcha.F90"
(  105) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  106) # 107 "fatcha.F90"
(  107) CALL FATCHA_MT64 (FA,  KREP, CDNOMC,  LDCOSP, KLCHAM)
(  108) # 109 "fatcha.F90"
(  109) END SUBROUTINE
(  110) # 111 "fatcha.F90"
(  111) SUBROUTINE FATCHA (KREP, CDNOMC, LDCOSP, KLCHAM)
(  112) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  113) &                  FA_COM_DEFAULT_INIT,  &
(  114) &                  NEW_FA_DEFAULT
(  115) USE LFI_PRECISION
(  116) IMPLICIT NONE
(  117) INTEGER (KIND=JPLIKM) KREP, KLCHAM
(  118) CHARACTER(LEN=*) CDNOMC
(  119) LOGICAL LDCOSP
(  120) # 121 "fatcha.F90"
(  121) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  122) # 123 "fatcha.F90"
(  123) CALL FATCHA_MT (FA,  KREP, CDNOMC,  LDCOSP, KLCHAM)
(  124) # 125 "fatcha.F90"
(  125) END SUBROUTINE
(  126) # 127 "fatcha.F90"
(  127) SUBROUTINE FATCHA_MT (FA, KREP, CDNOMC, LDCOSP, KLCHAM)
(  128) USE FA_MOD, ONLY : FA_COM
(  129) USE LFI_PRECISION
(  130) IMPLICIT NONE
(  131) TYPE (FA_COM)         FA
(  132) INTEGER (KIND=JPLIKM) KREP, KLCHAM
(  133) CHARACTER(LEN=*)      CDNOMC
(  134) LOGICAL               LDCOSP
(  135) # 136 "fatcha.F90"
(  136) INTEGER (KIND=JPLIKB) IREP, ILCHAM
(  137) # 139 "fatcha.F90"
(  139) CALL FATCHA_MT64 (FA, IREP, CDNOMC,  LDCOSP, ILCHAM)
(  140) # 141 "fatcha.F90"
(  141) KREP   = INT (  IREP, JPLIKM)
(  142) KLCHAM = INT (ILCHAM, JPLIKM)
(  143) # 144 "fatcha.F90"
(  144) END SUBROUTINE
(  145) # 147 "fatcha.F90"
(  147) !INTF KREP            OUT                                                              
(  148) !INTF CDNOMC        IN                                                                 
(  149) !INTF LDCOSP        IN                                                                 
(  150) !INTF KLCHAM          OUT                                                              
