


NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fainoc.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAINOC_MT64            &
(    4) &                     (FA,  KRANG )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme permet d'INterpreter, pour un fichier ARPEGE
(   12) !     ouvert, les Options par defaut (-1) du Codage GRIB des champs:
(   13) !     FA%NBFPDG(KRANG), FA%NBFCSP(KRANG), FA%NSTROF(KRANG), FA%NPUFLA(KRANG).
(   14) !     Cette routine doit etre appelee par FAITOU ou FANOUV ou FAGOTE
(   15) !     pour ne pas laisser le defaut -1 lors du decodage ou du codage
(   16) !     GRIB.
(   17) !
(   18) !**
(   19) !     Arguments : KRANG  (Entree) ==> Rang de l'unite logique;
(   20) !
(   21) !
(   22) !
(   23) !
(   24) TYPE(FA_COM) :: FA
(   25) INTEGER (KIND=JPLIKB) KRANG
(   26) !
(   27) INTEGER (KIND=JPLIKB) IRANGC, ITRONC, INBITS
(   28) INTEGER (KIND=JPLIKB) ITYPTR, IAUXIL, IREP, INIMES
(   29) INTEGER (KIND=JPLIKB) INUMER
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 3

(   31) LOGICAL LLVERF, LLMLAM
(   32) !
(   33) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) 
(   36) !**
(   37) !     1.  -  INITIALISATIONS PREALABLES.
(   38) !-----------------------------------------------------------------------
(   39) !
(   40) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   41) IF (LHOOK) CALL DR_HOOK('FAINOC_MT',0,ZHOOK_HANDLE)
(   42) LLVERF=.FALSE.
(   43) !
(   44) !         Verrouillage eventuel du fichier.
(   45) !
(   46) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   47) &                              (FA%LFI, FA%FICHIER(KRANG)%VRFICH,'ON')
(   48) LLVERF=FA%LFAMUL
(   49) !
(   50) IRANGC=FA%FICHIER(KRANG)%NUCADR
(   51) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   52) ITRONC=FA%CADRE(IRANGC)%MTRONC
(   53) ITYPTR=FA%CADRE(IRANGC)%NTYPTR
(   54) !
(   55) !**
(   56) !     2.  -  INTERPRETATION DES OPTIONS PAR DEFAUT.
(   57) !-----------------------------------------------------------------------
(   58) !
(   59) ! On distingue le cas ARPEGE du cas ALADIN (LLMLAM=.T.).
(   60) !
(   61) !
(   62) ! Evaluation du nombre de bits par valeur point-de-grille
(   63) !
(   64) IF (FA%FICHIER(KRANG)%NBFPDG.LT.0) THEN
(   65)   IF (LLMLAM) THEN
(   66)     FA%FICHIER(KRANG)%NBFPDG=16
(   67)   ELSE
(   68)     FA%FICHIER(KRANG)%NBFPDG=16
(   69)   ENDIF
(   70) ENDIF
(   71) !
(   72) ! Evaluation du nombre de bits par partie reelle/imagin. de coeff. spectral
(   73) !
(   74) IF (FA%FICHIER(KRANG)%NBFCSP.LT.0) THEN
(   75)   IF (LLMLAM) THEN
(   76)     FA%FICHIER(KRANG)%NBFCSP=18
(   77)   ELSE
(   78)     FA%FICHIER(KRANG)%NBFCSP=16
(   79)   ENDIF
(   80) ENDIF
(   81) !
(   82) ! Evaluation de la sous-troncature non compactee
(   83) !
(   84) IF (FA%FICHIER(KRANG)%NSTROF.LT.0) THEN
(   85)   INBITS=FA%FICHIER(KRANG)%NBFCSP
(   86)   IF (LLMLAM) THEN
(   87)     IAUXIL=MAX ( ITRONC, -ITYPTR )
(   88)     IAUXIL=MAX ( 10_JPLIKB , ((1+IAUXIL)*25)/(10*INBITS),  &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 4

(   89) &               (1+IAUXIL)/10 )
(   90)     IAUXIL=MIN ( IAUXIL, ITRONC-1, -ITYPTR-1 )
(   91)     FA%FICHIER(KRANG)%NSTROF=IAUXIL
(   92)   ELSE
(   93)     IAUXIL=MAX ( 10_JPLIKB , 480/INBITS-10, (1+ITRONC)/10 )
(   94)     IAUXIL=MIN ( IAUXIL, ITRONC-1 )
(   95)     FA%FICHIER(KRANG)%NSTROF=IAUXIL
(   96)   ENDIF
(   97) ENDIF
(   98) !
(   99) ! Evaluation de la puissance de laplacien
(  100) !
(  101) IF (FA%FICHIER(KRANG)%NPUFLA.LT.0) THEN
(  102)   IF (LLMLAM) THEN
(  103)     FA%FICHIER(KRANG)%NPUFLA=2
(  104)   ELSE
(  105)     FA%FICHIER(KRANG)%NPUFLA=1
(  106)   ENDIF
(  107) ENDIF
(  108) !**
(  109) !    10.  -  PHASE TERMINALE : MESSAGERIE,
(  110) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  111) !-----------------------------------------------------------------------
(  112) !
(  113) !
(  114) !        Deverrouillage eventuel du fichier.
(  115) !
(  116) IF (LLVERF) CALL LFIVER_MT64                                &
(  117) &                           (FA%LFI, FA%FICHIER(KRANG)%VRFICH,'OFF')
(  118) !
(  119) IF (IXNVMS(KRANG).NE.2)  THEN 
(  120)   IF (LHOOK) CALL DR_HOOK('FAINOC_MT',1,ZHOOK_HANDLE)
(  121)   RETURN
(  122) ENDIF
(  123) !
(  124) INUMER=JPNIIL
(  125) INIMES=IXNVMS (KRANG)
(  126) IREP=0
(  127) CLNSPR='FAINOC'
(  128) WRITE (UNIT=CLMESS,FMT='(''KRANG='',I4)') KRANG
(  129) CALL FAIPAR_MT64                                      &
(  130) &               (FA, INUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  131) &                CLNSPR,' ',.FALSE.)
(  132) !
(  133) IF (LHOOK) CALL DR_HOOK('FAINOC_MT',1,ZHOOK_HANDLE)
(  134) 
(  135) CONTAINS
(  136) 
(  137) #include "facom2.ixnvms.h"
(  138) 
(  139) END SUBROUTINE FAINOC_MT64
(  140) 
(  141) 
(  142) 
(  143) ! Oct-2012 P. Marguinaud 64b LFI
(  144) SUBROUTINE FAINOC64           &
(  145) &           (KRANG)
(  146) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 5

(  147) &                   FA_COM_DEFAULT_INIT,  &
(  148) &                   NEW_FA_DEFAULT
(  149) USE LFI_PRECISION
(  150) IMPLICIT NONE
(  151) ! Arguments
(  152) INTEGER (KIND=JPLIKB)  KRANG                                  ! IN   
(  153) 
(  154) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  155) 
(  156) CALL FAINOC_MT64           &
(  157) &           (FA, KRANG)
(  158) 
(  159) END SUBROUTINE FAINOC64
(  160) 
(  161) SUBROUTINE FAINOC             &
(  162) &           (KRANG)
(  163) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  164) &                   FA_COM_DEFAULT_INIT,  &
(  165) &                   NEW_FA_DEFAULT
(  166) USE LFI_PRECISION
(  167) IMPLICIT NONE
(  168) ! Arguments
(  169) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  170) 
(  171) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  172) 
(  173) CALL FAINOC_MT             &
(  174) &           (FA, KRANG)
(  175) 
(  176) END SUBROUTINE FAINOC
(  177) 
(  178) SUBROUTINE FAINOC_MT             &
(  179) &           (FA, KRANG)
(  180) USE FA_MOD, ONLY : FA_COM
(  181) USE LFI_PRECISION
(  182) IMPLICIT NONE
(  183) ! Arguments
(  184) TYPE (FA_COM)          FA                                     ! INOUT
(  185) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  186) ! Local integers
(  187) INTEGER (KIND=JPLIKB)  IRANG                                  ! IN   
(  188) ! Convert arguments
(  189) 
(  190) IRANG      = INT (     KRANG, JPLIKB)
(  191) 
(  192) CALL FAINOC_MT64           &
(  193) &           (FA, IRANG)
(  194) 
(  195) 
(  196) END SUBROUTINE FAINOC_MT
(  197) 
(  198) !INTF KRANG         IN    












NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 6

(    1) # 1 "fainoc.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAINOC_MT64            &
(    4) &                     (FA,  KRANG )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme permet d'INterpreter, pour un fichier ARPEGE
(   12) !     ouvert, les Options par defaut (-1) du Codage GRIB des champs:
(   13) !     FA%NBFPDG(KRANG), FA%NBFCSP(KRANG), FA%NSTROF(KRANG), FA%NPUFLA(KRANG).
(   14) !     Cette routine doit etre appelee par FAITOU ou FANOUV ou FAGOTE
(   15) !     pour ne pas laisser le defaut -1 lors du decodage ou du codage
(   16) !     GRIB.
(   17) !
(   18) !**
(   19) !     Arguments : KRANG  (Entree) ==> Rang de l'unite logique;
(   20) !
(   21) !
(   22) !
(   23) !
(   24) TYPE(FA_COM) :: FA
(   25) INTEGER (KIND=JPLIKB) KRANG
(   26) !
(   27) INTEGER (KIND=JPLIKB) IRANGC, ITRONC, INBITS
(   28) INTEGER (KIND=JPLIKB) ITYPTR, IAUXIL, IREP, INIMES
(   29) INTEGER (KIND=JPLIKB) INUMER
(   30) !
(   31) LOGICAL LLVERF, LLMLAM
(   32) !
(   33) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) # 36 "fainoc.F90"
(   36) !**
(   37) !     1.  -  INITIALISATIONS PREALABLES.
(   38) !-----------------------------------------------------------------------
(   39) !
(   40) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   41) IF (LHOOK) CALL DR_HOOK('FAINOC_MT',0,ZHOOK_HANDLE)
(   42) LLVERF=.FALSE.
(   43) !
(   44) !         Verrouillage eventuel du fichier.
(   45) !
(   46) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   47) &                              (FA%LFI, FA%FICHIER(KRANG)%VRFICH,'ON')
(   48) LLVERF=FA%LFAMUL
(   49) !
(   50) IRANGC=FA%FICHIER(KRANG)%NUCADR
(   51) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   52) ITRONC=FA%CADRE(IRANGC)%MTRONC
(   53) ITYPTR=FA%CADRE(IRANGC)%NTYPTR
(   54) !
(   55) !**
(   56) !     2.  -  INTERPRETATION DES OPTIONS PAR DEFAUT.
(   57) !-----------------------------------------------------------------------






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 7

(   58) !
(   59) ! On distingue le cas ARPEGE du cas ALADIN (LLMLAM=.T.).
(   60) !
(   61) !
(   62) ! Evaluation du nombre de bits par valeur point-de-grille
(   63) !
(   64) IF (FA%FICHIER(KRANG)%NBFPDG.LT.0) THEN
(   65)   IF (LLMLAM) THEN
(   66)     FA%FICHIER(KRANG)%NBFPDG=16
(   67)   ELSE
(   68)     FA%FICHIER(KRANG)%NBFPDG=16
(   69)   ENDIF
(   70) ENDIF
(   71) !
(   72) ! Evaluation du nombre de bits par partie reelle/imagin. de coeff. spectral
(   73) !
(   74) IF (FA%FICHIER(KRANG)%NBFCSP.LT.0) THEN
(   75)   IF (LLMLAM) THEN
(   76)     FA%FICHIER(KRANG)%NBFCSP=18
(   77)   ELSE
(   78)     FA%FICHIER(KRANG)%NBFCSP=16
(   79)   ENDIF
(   80) ENDIF
(   81) !
(   82) ! Evaluation de la sous-troncature non compactee
(   83) !
(   84) IF (FA%FICHIER(KRANG)%NSTROF.LT.0) THEN
(   85)   INBITS=FA%FICHIER(KRANG)%NBFCSP
(   86)   IF (LLMLAM) THEN
(   87)     IAUXIL=MAX ( ITRONC, -ITYPTR )
(   88)     IAUXIL=MAX ( 10_JPLIKB , ((1+IAUXIL)*25)/(10*INBITS),  &
(   89) &               (1+IAUXIL)/10 )
(   90)     IAUXIL=MIN ( IAUXIL, ITRONC-1, -ITYPTR-1 )
(   91)     FA%FICHIER(KRANG)%NSTROF=IAUXIL
(   92)   ELSE
(   93)     IAUXIL=MAX ( 10_JPLIKB , 480/INBITS-10, (1+ITRONC)/10 )
(   94)     IAUXIL=MIN ( IAUXIL, ITRONC-1 )
(   95)     FA%FICHIER(KRANG)%NSTROF=IAUXIL
(   96)   ENDIF
(   97) ENDIF
(   98) !
(   99) ! Evaluation de la puissance de laplacien
(  100) !
(  101) IF (FA%FICHIER(KRANG)%NPUFLA.LT.0) THEN
(  102)   IF (LLMLAM) THEN
(  103)     FA%FICHIER(KRANG)%NPUFLA=2
(  104)   ELSE
(  105)     FA%FICHIER(KRANG)%NPUFLA=1
(  106)   ENDIF
(  107) ENDIF
(  108) !**
(  109) !    10.  -  PHASE TERMINALE : MESSAGERIE,
(  110) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  111) !-----------------------------------------------------------------------
(  112) !
(  113) !
(  114) !        Deverrouillage eventuel du fichier.
(  115) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 8

(  116) IF (LLVERF) CALL LFIVER_MT64                                &
(  117) &                           (FA%LFI, FA%FICHIER(KRANG)%VRFICH,'OFF')
(  118) !
(  119) IF (IXNVMS(KRANG).NE.2)  THEN 
(  120)   IF (LHOOK) CALL DR_HOOK('FAINOC_MT',1,ZHOOK_HANDLE)
(  121)   RETURN
(  122) ENDIF
(  123) !
(  124) INUMER=JPNIIL
(  125) INIMES=IXNVMS (KRANG)
(  126) IREP=0
(  127) CLNSPR='FAINOC'
(  128) WRITE (UNIT=CLMESS,FMT='(''KRANG='',I4)') KRANG
(  129) CALL FAIPAR_MT64                                      &
(  130) &               (FA, INUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  131) &                CLNSPR,' ',.FALSE.)
(  132) !
(  133) IF (LHOOK) CALL DR_HOOK('FAINOC_MT',1,ZHOOK_HANDLE)
(  134) # 135 "fainoc.F90"
(  135) CONTAINS
(  136) # 137 "fainoc.F90"
(  137) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 138 "fainoc.F90"
(  138) # 139 "fainoc.F90"
(  139) END SUBROUTINE FAINOC_MT64
(  140) # 143 "fainoc.F90"
(  143) ! Oct-2012 P. Marguinaud 64b LFI
(  144) SUBROUTINE FAINOC64           &
(  145) &           (KRANG)
(  146) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  147) &                   FA_COM_DEFAULT_INIT,  &
(  148) &                   NEW_FA_DEFAULT
(  149) USE LFI_PRECISION
(  150) IMPLICIT NONE
(  151) ! Arguments
(  152) INTEGER (KIND=JPLIKB)  KRANG                                  ! IN   
(  153) # 154 "fainoc.F90"
(  154) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  155) # 156 "fainoc.F90"
(  156) CALL FAINOC_MT64           &
(  157) &           (FA, KRANG)
(  158) # 159 "fainoc.F90"
(  159) END SUBROUTINE FAINOC64
(  160) # 161 "fainoc.F90"
(  161) SUBROUTINE FAINOC             &
(  162) &           (KRANG)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:30      page 9

(  163) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  164) &                   FA_COM_DEFAULT_INIT,  &
(  165) &                   NEW_FA_DEFAULT
(  166) USE LFI_PRECISION
(  167) IMPLICIT NONE
(  168) ! Arguments
(  169) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  170) # 171 "fainoc.F90"
(  171) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  172) # 173 "fainoc.F90"
(  173) CALL FAINOC_MT             &
(  174) &           (FA, KRANG)
(  175) # 176 "fainoc.F90"
(  176) END SUBROUTINE FAINOC
(  177) # 178 "fainoc.F90"
(  178) SUBROUTINE FAINOC_MT             &
(  179) &           (FA, KRANG)
(  180) USE FA_MOD, ONLY : FA_COM
(  181) USE LFI_PRECISION
(  182) IMPLICIT NONE
(  183) ! Arguments
(  184) TYPE (FA_COM)          FA                                     ! INOUT
(  185) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  186) ! Local integers
(  187) INTEGER (KIND=JPLIKB)  IRANG                                  ! IN   
(  188) ! Convert arguments
(  189) # 190 "fainoc.F90"
(  190) IRANG      = INT (     KRANG, JPLIKB)
(  191) # 192 "fainoc.F90"
(  192) CALL FAINOC_MT64           &
(  193) &           (FA, IRANG)
(  194) # 196 "fainoc.F90"
(  196) END SUBROUTINE FAINOC_MT
(  197) # 198 "fainoc.F90"
(  198) !INTF KRANG         IN    
