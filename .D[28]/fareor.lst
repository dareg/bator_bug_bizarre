


NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fareor.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAREOR_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme de REORDONNANCEMENT des coefficients d'un champ horizontal spectral
(   12) !      destine a etre ecrit sur un fichier ARPEGE/ALADIN, ou bien qui vient
(   13) !      d'etre lu.
(   14) !
(   15) !**
(   16) !    Arguments : KREP   (Sortie)        ==> Code-reponse du sous-programme;
(   17) !                KNUMER (Entree)        ==> Numero de l'unite logique;
(   18) !    ( Tableau ) PCHAMM (Entree/Sortie) ==> Valeurs du champ, rangement modele
(   19) !    ( Tableau ) PCHAMF (Entree/Sortie) ==> Valeurs du champ, rangement fichier
(   20) !                LDFTOM (Entree)        ==> Fichier vers modele (T), modele vers
(   21) !                                           fichier (F)
(   22) !
(   23) !
(   24) TYPE(FA_COM) :: FA
(   25) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   26) !
(   27) REAL (KIND=JPDBLR) PCHAMM (*), PCHAMF (*)
(   28) !
(   29) LOGICAL LDFTOM
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 3

(   31) INTEGER (KIND=JPLIKB) IRANG, IRANGC, INIMES
(   32) INTEGER (KIND=JPLIKB) ISMAX
(   33) INTEGER (KIND=JPLIKB), POINTER :: IISMAX (:), IDIM0GG (:)
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   36) LOGICAL LLMLAM, LLFATA, LLRLFI
(   37) 
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) IF (LHOOK) CALL DR_HOOK('FAREOR_MT64',0,ZHOOK_HANDLE)
(   40) 
(   41) KREP = 0
(   42) LLRLFI = .FALSE.
(   43) 
(   44) CALL FANUMU_MT64 (FA, KNUMER,IRANG)
(   45) 
(   46) IF (IRANG .EQ. 0) THEN
(   47)   KREP = -51
(   48)   GOTO 1001
(   49) ENDIF
(   50) 
(   51) IRANGC=FA%FICHIER(IRANG)%NUCADR
(   52) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   53) 
(   54) ISMAX   =  FA%CADRE(IRANGC)%NSMAX     
(   55) IISMAX  => FA%CADRE(IRANGC)%NISMAX     
(   56) IDIM0GG => FA%CADRE(IRANGC)%NDIM0GG
(   57) 
(   58) IF (LLMLAM) THEN
(   59)   CALL FAREOR_LAM
(   60) ELSE
(   61)   CALL FAREOR_GLO
(   62) ENDIF
(   63) 
(   64) 1001 CONTINUE
(   65) 
(   66) LLFATA=LLMOER (KREP,IRANG)
(   67) 
(   68) IF (LLFATA) THEN
(   69)   INIMES=2
(   70) ELSE
(   71)   INIMES=IXNVMS(IRANG)
(   72) ENDIF
(   73) 
(   74) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(   75)   IF (LHOOK) CALL DR_HOOK('FAREOR_MT64',1,ZHOOK_HANDLE)
(   76)   RETURN
(   77) ENDIF
(   78) 
(   79) CLNSPR='FAREOR'
(   80) 
(   81) WRITE (UNIT=CLMESS,FMT='(''KREP='',I5,'', KNUMER='',I3)') &
(   82) &   KREP,KNUMER
(   83) 
(   84) CALL FAIPAR_MT64                                       &
(   85) &               (FA, KNUMER,INIMES,KREP,LLFATA,CLMESS, &
(   86) &                CLNSPR, '',LLRLFI)
(   87) 
(   88) IF (LHOOK) CALL DR_HOOK('FAREOR_MT64',1,ZHOOK_HANDLE)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 4

(   89) 
(   90) CONTAINS
(   91) 
(   92) SUBROUTINE FAREOR_LAM
(   93) 
(   94) INTEGER (KIND=JPLIKB) :: II, ISP, JM, JN
(   95) 
(   96) II=0
(   97) IF (LDFTOM) THEN
(   98)   DO JN=0,ISMAX
(   99)     DO JM=0,IISMAX(JN)
(  100)       ISP=IDIM0GG(JM)+4*JN
(  101)       II=II+4
(  102)       PCHAMM(ISP:ISP+3)=PCHAMF(II-3:II)
(  103)     ENDDO
(  104)   ENDDO
(  105) ELSE
(  106)   DO JN=0,ISMAX  
(  107)     DO JM=0,IISMAX(JN)
(  108)       ISP=IDIM0GG(JM)+4*JN
(  109)       II=II+4
(  110)       PCHAMF(II-3:II)=PCHAMM(ISP:ISP+3)
(  111)     ENDDO
(  112)   ENDDO
(  113) ENDIF
(  114) 
(  115) END SUBROUTINE FAREOR_LAM
(  116) 
(  117) SUBROUTINE FAREOR_GLO
(  118) 
(  119) INTEGER(KIND=JPLIKB) :: II, IM, ISP, JM, JN
(  120) 
(  121) IF (LDFTOM) THEN
(  122)   II=0
(  123)   DO JN=0,ISMAX
(  124)     DO JM=-JN,-1
(  125)       ISP=IDIM0GG(-JM)+(JN+JM)*2 +1
(  126)       II = II + 1
(  127)       PCHAMM(ISP)=PCHAMF(II)
(  128)     ENDDO
(  129)     ISP=IDIM0GG(0)+JN*2
(  130)     II = II + 1
(  131)     PCHAMM(ISP)=PCHAMF(II)
(  132)     PCHAMM(ISP+1)=0.0_JPRB
(  133)     DO JM=1,JN
(  134)       ISP=IDIM0GG(JM)+(JN-JM)*2
(  135)       II = II + 1
(  136)       PCHAMM(ISP)=PCHAMF(II)
(  137)     ENDDO
(  138)   ENDDO
(  139) ELSE
(  140)   II=0
(  141)   DO JN=0,ISMAX
(  142)     DO JM=-JN,JN
(  143)       IM=ABS(JM)
(  144)       IF (JM < 0) THEN
(  145)         ISP=IDIM0GG(IM)+(JN-IM)*2 +1
(  146)       ELSE






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 5

(  147)         ISP=IDIM0GG(IM)+(JN-IM)*2
(  148)       ENDIF
(  149)       II = II + 1
(  150)       PCHAMF(II)=PCHAMM(ISP)
(  151)     ENDDO
(  152)   ENDDO
(  153) ENDIF
(  154) 
(  155) END SUBROUTINE FAREOR_GLO
(  156) 
(  157) 
(  158) #include "facom2.llmoer.h"
(  159) #include "facom2.ixnvms.h"
(  160) 
(  161) END SUBROUTINE FAREOR_MT64
(  162) 
(  163) ! Oct-2012 P. Marguinaud 64b LFI
(  164) SUBROUTINE FAREOR64                                      &
(  165) &                     (KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  166) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  167) &                  FA_COM_DEFAULT_INIT,  &
(  168) &                  NEW_FA_DEFAULT
(  169) USE LFI_PRECISION
(  170) IMPLICIT NONE
(  171) ! Arguments
(  172) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  173) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  174) REAL (KIND=JPDBLR)     PCHAMM     (*)                         ! INOUT
(  175) REAL (KIND=JPDBLR)     PCHAMF     (*)                         ! INOUT
(  176) LOGICAL                LDFTOM                                 ! IN   
(  177) 
(  178) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  179) 
(  180) CALL FAREOR_MT64                                             &
(  181) &                     (FA,  KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  182) 
(  183) END SUBROUTINE FAREOR64
(  184) 
(  185) SUBROUTINE FAREOR                                        &
(  186) &                     (KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  187) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  188) &                  FA_COM_DEFAULT_INIT,  &
(  189) &                  NEW_FA_DEFAULT
(  190) USE LFI_PRECISION
(  191) IMPLICIT NONE
(  192) ! Arguments
(  193) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  194) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  195) REAL (KIND=JPDBLR)  PCHAMM     (*)                            ! INOUT
(  196) REAL (KIND=JPDBLR)  PCHAMF     (*)                            ! INOUT
(  197) LOGICAL                LDFTOM                                 ! IN   
(  198) 
(  199) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  200) 
(  201) CALL FAREOR_MT                                                 &
(  202) &                     (FA,  KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  203) 
(  204) END SUBROUTINE FAREOR






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 6

(  205) 
(  206) SUBROUTINE FAREOR_MT                                         &
(  207) &                     (FA, KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  208) USE FA_MOD, ONLY : FA_COM
(  209) USE LFI_PRECISION
(  210) IMPLICIT NONE
(  211) ! Arguments
(  212) TYPE(FA_COM)           FA
(  213) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  214) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  215) REAL (KIND=JPDBLR)  PCHAMM     (*)                            ! INOUT
(  216) REAL (KIND=JPDBLR)  PCHAMF     (*)                            ! INOUT
(  217) LOGICAL                LDFTOM                                 ! IN   
(  218) ! Local integers
(  219) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  220) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  221) ! Convert arguments
(  222) 
(  223) INUMER     = INT (    KNUMER, JPLIKB)
(  224) 
(  225) CALL FAREOR_MT64                                             &
(  226) &                     (FA, IREP, INUMER, PCHAMM, PCHAMF, LDFTOM)
(  227) 
(  228) KREP       = INT (      IREP, JPLIKM)
(  229) 
(  230) END SUBROUTINE FAREOR_MT
(  231) 
(  232) !INTF KREP            OUT                                                              
(  233) !INTF KNUMER        IN                                                                 
(  234) !INTF PCHAMM        INOUT DIMS=*                         KIND=JPDBLR                   
(  235) !INTF PCHAMF        INOUT DIMS=*                         KIND=JPDBLR                   
(  236) !INTF LDCOSP        IN                                                                 
(  237) 































NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 7

(    1) # 1 "fareor.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAREOR_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme de REORDONNANCEMENT des coefficients d'un champ horizontal spectral
(   12) !      destine a etre ecrit sur un fichier ARPEGE/ALADIN, ou bien qui vient
(   13) !      d'etre lu.
(   14) !
(   15) !**
(   16) !    Arguments : KREP   (Sortie)        ==> Code-reponse du sous-programme;
(   17) !                KNUMER (Entree)        ==> Numero de l'unite logique;
(   18) !    ( Tableau ) PCHAMM (Entree/Sortie) ==> Valeurs du champ, rangement modele
(   19) !    ( Tableau ) PCHAMF (Entree/Sortie) ==> Valeurs du champ, rangement fichier
(   20) !                LDFTOM (Entree)        ==> Fichier vers modele (T), modele vers
(   21) !                                           fichier (F)
(   22) !
(   23) !
(   24) TYPE(FA_COM) :: FA
(   25) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   26) !
(   27) REAL (KIND=JPDBLR) PCHAMM (*), PCHAMF (*)
(   28) !
(   29) LOGICAL LDFTOM
(   30) !
(   31) INTEGER (KIND=JPLIKB) IRANG, IRANGC, INIMES
(   32) INTEGER (KIND=JPLIKB) ISMAX
(   33) INTEGER (KIND=JPLIKB), POINTER :: IISMAX (:), IDIM0GG (:)
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   36) LOGICAL LLMLAM, LLFATA, LLRLFI
(   37) # 38 "fareor.F90"
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) IF (LHOOK) CALL DR_HOOK('FAREOR_MT64',0,ZHOOK_HANDLE)
(   40) # 41 "fareor.F90"
(   41) KREP = 0
(   42) LLRLFI = .FALSE.
(   43) # 44 "fareor.F90"
(   44) CALL FANUMU_MT64 (FA, KNUMER,IRANG)
(   45) # 46 "fareor.F90"
(   46) IF (IRANG .EQ. 0) THEN
(   47)   KREP = -51
(   48)   GOTO 1001
(   49) ENDIF
(   50) # 51 "fareor.F90"
(   51) IRANGC=FA%FICHIER(IRANG)%NUCADR
(   52) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   53) # 54 "fareor.F90"
(   54) ISMAX   =  FA%CADRE(IRANGC)%NSMAX     
(   55) IISMAX  => FA%CADRE(IRANGC)%NISMAX     
(   56) IDIM0GG => FA%CADRE(IRANGC)%NDIM0GG
(   57) # 58 "fareor.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 8

(   58) IF (LLMLAM) THEN
(   59)   CALL FAREOR_LAM
(   60) ELSE
(   61)   CALL FAREOR_GLO
(   62) ENDIF
(   63) # 64 "fareor.F90"
(   64) 1001 CONTINUE
(   65) # 66 "fareor.F90"
(   66) LLFATA=LLMOER (KREP,IRANG)
(   67) # 68 "fareor.F90"
(   68) IF (LLFATA) THEN
(   69)   INIMES=2
(   70) ELSE
(   71)   INIMES=IXNVMS(IRANG)
(   72) ENDIF
(   73) # 74 "fareor.F90"
(   74) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(   75)   IF (LHOOK) CALL DR_HOOK('FAREOR_MT64',1,ZHOOK_HANDLE)
(   76)   RETURN
(   77) ENDIF
(   78) # 79 "fareor.F90"
(   79) CLNSPR='FAREOR'
(   80) # 81 "fareor.F90"
(   81) WRITE (UNIT=CLMESS,FMT='(''KREP='',I5,'', KNUMER='',I3)') &
(   82) &   KREP,KNUMER
(   83) # 84 "fareor.F90"
(   84) CALL FAIPAR_MT64                                       &
(   85) &               (FA, KNUMER,INIMES,KREP,LLFATA,CLMESS, &
(   86) &                CLNSPR, '',LLRLFI)
(   87) # 88 "fareor.F90"
(   88) IF (LHOOK) CALL DR_HOOK('FAREOR_MT64',1,ZHOOK_HANDLE)
(   89) # 90 "fareor.F90"
(   90) CONTAINS
(   91) # 92 "fareor.F90"
(   92) SUBROUTINE FAREOR_LAM
(   93) # 94 "fareor.F90"
(   94) INTEGER (KIND=JPLIKB) :: II, ISP, JM, JN
(   95) # 96 "fareor.F90"
(   96) II=0
(   97) IF (LDFTOM) THEN
(   98)   DO JN=0,ISMAX
(   99)     DO JM=0,IISMAX(JN)
(  100)       ISP=IDIM0GG(JM)+4*JN
(  101)       II=II+4
(  102)       PCHAMM(ISP:ISP+3)=PCHAMF(II-3:II)
(  103)     ENDDO
(  104)   ENDDO
(  105) ELSE
(  106)   DO JN=0,ISMAX  
(  107)     DO JM=0,IISMAX(JN)
(  108)       ISP=IDIM0GG(JM)+4*JN
(  109)       II=II+4
(  110)       PCHAMF(II-3:II)=PCHAMM(ISP:ISP+3)
(  111)     ENDDO
(  112)   ENDDO
(  113) ENDIF
(  114) # 115 "fareor.F90"
(  115) END SUBROUTINE FAREOR_LAM






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 9

(  116) # 117 "fareor.F90"
(  117) SUBROUTINE FAREOR_GLO
(  118) # 119 "fareor.F90"
(  119) INTEGER(KIND=JPLIKB) :: II, IM, ISP, JM, JN
(  120) # 121 "fareor.F90"
(  121) IF (LDFTOM) THEN
(  122)   II=0
(  123)   DO JN=0,ISMAX
(  124)     DO JM=-JN,-1
(  125)       ISP=IDIM0GG(-JM)+(JN+JM)*2 +1
(  126)       II = II + 1
(  127)       PCHAMM(ISP)=PCHAMF(II)
(  128)     ENDDO
(  129)     ISP=IDIM0GG(0)+JN*2
(  130)     II = II + 1
(  131)     PCHAMM(ISP)=PCHAMF(II)
(  132)     PCHAMM(ISP+1)=0.0_JPRB
(  133)     DO JM=1,JN
(  134)       ISP=IDIM0GG(JM)+(JN-JM)*2
(  135)       II = II + 1
(  136)       PCHAMM(ISP)=PCHAMF(II)
(  137)     ENDDO
(  138)   ENDDO
(  139) ELSE
(  140)   II=0
(  141)   DO JN=0,ISMAX
(  142)     DO JM=-JN,JN
(  143)       IM=ABS(JM)
(  144)       IF (JM < 0) THEN
(  145)         ISP=IDIM0GG(IM)+(JN-IM)*2 +1
(  146)       ELSE
(  147)         ISP=IDIM0GG(IM)+(JN-IM)*2
(  148)       ENDIF
(  149)       II = II + 1
(  150)       PCHAMF(II)=PCHAMM(ISP)
(  151)     ENDDO
(  152)   ENDDO
(  153) ENDIF
(  154) # 155 "fareor.F90"
(  155) END SUBROUTINE FAREOR_GLO
(  156) # 158 "fareor.F90"
(  158) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 159 "fareor.F90"
(  159) # 159 "fareor.F90"
(  159) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 10

(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 160 "fareor.F90"
(  160) # 161 "fareor.F90"
(  161) END SUBROUTINE FAREOR_MT64
(  162) # 163 "fareor.F90"
(  163) ! Oct-2012 P. Marguinaud 64b LFI
(  164) SUBROUTINE FAREOR64                                      &
(  165) &                     (KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  166) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  167) &                  FA_COM_DEFAULT_INIT,  &
(  168) &                  NEW_FA_DEFAULT
(  169) USE LFI_PRECISION
(  170) IMPLICIT NONE
(  171) ! Arguments
(  172) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  173) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  174) REAL (KIND=JPDBLR)     PCHAMM     (*)                         ! INOUT
(  175) REAL (KIND=JPDBLR)     PCHAMF     (*)                         ! INOUT
(  176) LOGICAL                LDFTOM                                 ! IN   
(  177) # 178 "fareor.F90"
(  178) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  179) # 180 "fareor.F90"
(  180) CALL FAREOR_MT64                                             &
(  181) &                     (FA,  KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  182) # 183 "fareor.F90"
(  183) END SUBROUTINE FAREOR64
(  184) # 185 "fareor.F90"
(  185) SUBROUTINE FAREOR                                        &
(  186) &                     (KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  187) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  188) &                  FA_COM_DEFAULT_INIT,  &
(  189) &                  NEW_FA_DEFAULT
(  190) USE LFI_PRECISION
(  191) IMPLICIT NONE
(  192) ! Arguments
(  193) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  194) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  195) REAL (KIND=JPDBLR)  PCHAMM     (*)                            ! INOUT
(  196) REAL (KIND=JPDBLR)  PCHAMF     (*)                            ! INOUT
(  197) LOGICAL                LDFTOM                                 ! IN   
(  198) # 199 "fareor.F90"
(  199) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  200) # 201 "fareor.F90"
(  201) CALL FAREOR_MT                                                 &
(  202) &                     (FA,  KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  203) # 204 "fareor.F90"
(  204) END SUBROUTINE FAREOR
(  205) # 206 "fareor.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 11

(  206) SUBROUTINE FAREOR_MT                                         &
(  207) &                     (FA, KREP, KNUMER, PCHAMM, PCHAMF, LDFTOM)
(  208) USE FA_MOD, ONLY : FA_COM
(  209) USE LFI_PRECISION
(  210) IMPLICIT NONE
(  211) ! Arguments
(  212) TYPE(FA_COM)           FA
(  213) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  214) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  215) REAL (KIND=JPDBLR)  PCHAMM     (*)                            ! INOUT
(  216) REAL (KIND=JPDBLR)  PCHAMF     (*)                            ! INOUT
(  217) LOGICAL                LDFTOM                                 ! IN   
(  218) ! Local integers
(  219) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  220) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  221) ! Convert arguments
(  222) # 223 "fareor.F90"
(  223) INUMER     = INT (    KNUMER, JPLIKB)
(  224) # 225 "fareor.F90"
(  225) CALL FAREOR_MT64                                             &
(  226) &                     (FA, IREP, INUMER, PCHAMM, PCHAMF, LDFTOM)
(  227) # 228 "fareor.F90"
(  228) KREP       = INT (      IREP, JPLIKM)
(  229) # 230 "fareor.F90"
(  230) END SUBROUTINE FAREOR_MT
(  231) # 232 "fareor.F90"
(  232) !INTF KREP            OUT                                                              
(  233) !INTF KNUMER        IN                                                                 
(  234) !INTF PCHAMM        INOUT DIMS=*                         KIND=JPDBLR                   
(  235) !INTF PCHAMF        INOUT DIMS=*                         KIND=JPDBLR                   
(  236) !INTF LDCOSP        IN                                                                 
