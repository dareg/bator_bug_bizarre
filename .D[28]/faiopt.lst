


NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: faiopt.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAIOPT_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU,  &
(    5) &                      LDERFA, LDIMST, KNIMES, CDNOMC)
(    6) USE FA_MOD, ONLY : FA_COM
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !        Sous-programme de recuperation des options d'OUVERTURE d'une unite 
(   13) !     logique "Fichier ARPEGE".
(   14) !     Il s'agit d'un fichier indexe, traite par le logiciel LFI.
(   15) !
(   16) !**
(   17) !     ARGUMENTS : Ce sont les memes que pour "FAITOU", sauf KNBARP
(   18) !                 et KNBARI qui ont ete retires
(   19) !
(   20) !                 KREP   (Sortie) ==> Code-reponse du sous-programme;
(   21) !                 KNUMER (Entree) ==> Numero de l'unite logique;
(   22) !                 LDNOMM (Sortie) ==> Vrai si l'unite logique doit etre
(   23) !                                     associee a un NOM de Fichier EXP-
(   24) !                                     LICITE lors de l'"OPEN" FORTRAN;
(   25) !                 CDNOMF (Sortie) ==> Nom de fichier explicite, si
(   26) !                                     *LDNOMM* est VRAI - Meme si ce
(   27) !                                     n'est pas le cas, ce *DOIT* ETRE
(   28) !                                     UN OBJET DE TYPE "CHARACTER" .
(   29) !                 CDSTTU (Sortie) ==> "STATUS" pour l'"OPEN" FORTRAN
(   30) !                                     ('OLD','NEW','UNKNOWN','SCRATCH')






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 3

(   31) !                                     par defaut, mettre 'UNKNOWN';
(   32) !                 LDERFA (Sortie) ==> Option d'erreur fatale;
(   33) !                 LDIMST (Sortie) ==> Option impression de Statistiques
(   34) !                                     au moment de la fermeture;
(   35) !                 KNIMES (Sortie) ==> Niveau de la Messagerie (0,1 ou 2)
(   36) !                                     ( 0==>Rien, 2==>Tout )
(   37) !                 CDNOMC (Sortie) ==> Nom du CADRE associe au fichier.
(   38) !*
(   39) !     N.B. :  Pour un fichier en mode creation, ce cadre doit avoir ete
(   40) !          defini au prealable (via le sous-programme FACADE, ou par
(   41) !          l'ouverture d'un fichier preexistant).
(   42) !             Pour un fichier ARPEGE preexistant, le cadre est lu sur le
(   43) !          fichier; s'il etait deja defini auparavant, il y a controle
(   44) !          de coherence entre les deux versions du cadre.
(   45) !
(   46) !
(   47) TYPE(FA_COM) :: FA
(   48) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIMES
(   49) !
(   50) CHARACTER CPNOMD*(*)
(   51) PARAMETER ( CPNOMD='%%%%% FICHIER SANS NOM %%%%%' )
(   52) !
(   53) INTEGER (KIND=JPLIKB) IRANG, IRANGC
(   54) LOGICAL LDNOMM, LDERFA, LDIMST
(   55) INTEGER (KIND=JPLIKB) IREP
(   56) !
(   57) CHARACTER CDNOMF*(*), CDSTTU*(*), CDNOMC*(*)
(   58) !
(   59) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   60) 
(   61) IF (LHOOK) CALL DR_HOOK('FAIOPT_MT',0,ZHOOK_HANDLE)
(   62) 
(   63) IREP=0
(   64) IRANG=0
(   65) CALL FANUMU_MT64                  &
(   66) &               (FA, KNUMER, IRANG)
(   67) 
(   68) IF (IRANG .EQ. 0) THEN
(   69)   IREP=-1
(   70)   GOTO 1001
(   71) ENDIF
(   72) 
(   73) IRANGC=FA%FICHIER(IRANG)%NUCADR
(   74) CDNOMC=FA%CADRE(IRANGC)%CNOMCA
(   75) LDNOMM=FA%FICHIER(IRANG)%LNOMME
(   76) KNIMES=FA%FICHIER(IRANG)%NIVOMS
(   77) LDERFA=FA%FICHIER(IRANG)%LERRFA
(   78) CDNOMF=CPNOMD
(   79) CDSTTU=''
(   80) LDIMST=.FALSE.
(   81) 
(   82) IF (LDNOMM) THEN
(   83)   CALL LFIOPT_MT64                                        &
(   84) &                 (FA%LFI, IREP, KNUMER, LDNOMM, CDNOMF,  &
(   85) &                  CDSTTU, LDERFA, LDIMST, KNIMES)
(   86) 
(   87)   IF (IREP .NE. 0) GOTO 1001
(   88) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 4

(   89) 
(   90) 1001 CONTINUE
(   91) KREP=IREP
(   92) IF (LHOOK) CALL DR_HOOK('FAIOPT_MT',1,ZHOOK_HANDLE)
(   93) END SUBROUTINE FAIOPT_MT64
(   94) 
(   95) 
(   96) 
(   97) 
(   98) ! Oct-2012 P. Marguinaud 64b LFI
(   99) SUBROUTINE FAIOPT64                                      &
(  100) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  101) &           LDIMST, KNIMES, CDNOMC)
(  102) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  103) &                   FA_COM_DEFAULT_INIT,  &
(  104) &                   NEW_FA_DEFAULT
(  105) USE LFI_PRECISION
(  106) IMPLICIT NONE
(  107) ! Arguments
(  108) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  109) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  110) LOGICAL                LDNOMM                                 !   OUT
(  111) CHARACTER (LEN=*)      CDNOMF                                 !   OUT
(  112) CHARACTER (LEN=*)      CDSTTU                                 !   OUT
(  113) LOGICAL                LDERFA                                 !   OUT
(  114) LOGICAL                LDIMST                                 !   OUT
(  115) INTEGER (KIND=JPLIKB)  KNIMES                                 !   OUT
(  116) CHARACTER (LEN=*)      CDNOMC                                 !   OUT
(  117) 
(  118) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  119) 
(  120) CALL FAIOPT_MT64                                             &
(  121) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  122) &           LDIMST, KNIMES, CDNOMC)
(  123) 
(  124) END SUBROUTINE FAIOPT64
(  125) 
(  126) SUBROUTINE FAIOPT                                        &
(  127) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  128) &           LDIMST, KNIMES, CDNOMC)
(  129) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  130) &                   FA_COM_DEFAULT_INIT,  &
(  131) &                   NEW_FA_DEFAULT
(  132) USE LFI_PRECISION
(  133) IMPLICIT NONE
(  134) ! Arguments
(  135) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  136) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  137) LOGICAL                LDNOMM                                 !   OUT
(  138) CHARACTER (LEN=*)      CDNOMF                                 !   OUT
(  139) CHARACTER (LEN=*)      CDSTTU                                 !   OUT
(  140) LOGICAL                LDERFA                                 !   OUT
(  141) LOGICAL                LDIMST                                 !   OUT
(  142) INTEGER (KIND=JPLIKM)  KNIMES                                 !   OUT
(  143) CHARACTER (LEN=*)      CDNOMC                                 !   OUT
(  144) 
(  145) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  146) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 5

(  147) CALL FAIOPT_MT                                               &
(  148) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  149) &           LDIMST, KNIMES, CDNOMC)
(  150) 
(  151) END SUBROUTINE FAIOPT
(  152) 
(  153) SUBROUTINE FAIOPT_MT                                         &
(  154) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  155) &           LDIMST, KNIMES, CDNOMC)
(  156) USE FA_MOD, ONLY : FA_COM
(  157) USE LFI_PRECISION
(  158) IMPLICIT NONE
(  159) ! Arguments
(  160) TYPE (FA_COM)          FA                                     ! INOUT
(  161) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  162) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  163) LOGICAL                LDNOMM                                 !   OUT
(  164) CHARACTER (LEN=*)      CDNOMF                                 !   OUT
(  165) CHARACTER (LEN=*)      CDSTTU                                 !   OUT
(  166) LOGICAL                LDERFA                                 !   OUT
(  167) LOGICAL                LDIMST                                 !   OUT
(  168) INTEGER (KIND=JPLIKM)  KNIMES                                 !   OUT
(  169) CHARACTER (LEN=*)      CDNOMC                                 !   OUT
(  170) ! Local integers
(  171) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  172) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  173) INTEGER (KIND=JPLIKB)  INIMES                                 !   OUT
(  174) ! Convert arguments
(  175) 
(  176) INUMER     = INT (    KNUMER, JPLIKB)
(  177) 
(  178) CALL FAIOPT_MT64                                             &
(  179) &           (FA, IREP, INUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  180) &           LDIMST, INIMES, CDNOMC)
(  181) 
(  182) KREP       = INT (      IREP, JPLIKM)
(  183) KNIMES     = INT (    INIMES, JPLIKM)
(  184) 
(  185) END SUBROUTINE FAIOPT_MT
(  186) 
(  187) !INTF KREP            OUT 
(  188) !INTF KNUMER        IN    
(  189) !INTF LDNOMM          OUT 
(  190) !INTF CDNOMF          OUT 
(  191) !INTF CDSTTU          OUT 
(  192) !INTF LDERFA          OUT 
(  193) !INTF LDIMST          OUT 
(  194) !INTF KNIMES          OUT 
(  195) !INTF CDNOMC          OUT 















NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 6

(    1) # 1 "faiopt.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAIOPT_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU,  &
(    5) &                      LDERFA, LDIMST, KNIMES, CDNOMC)
(    6) USE FA_MOD, ONLY : FA_COM
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !        Sous-programme de recuperation des options d'OUVERTURE d'une unite 
(   13) !     logique "Fichier ARPEGE".
(   14) !     Il s'agit d'un fichier indexe, traite par le logiciel LFI.
(   15) !
(   16) !**
(   17) !     ARGUMENTS : Ce sont les memes que pour "FAITOU", sauf KNBARP
(   18) !                 et KNBARI qui ont ete retires
(   19) !
(   20) !                 KREP   (Sortie) ==> Code-reponse du sous-programme;
(   21) !                 KNUMER (Entree) ==> Numero de l'unite logique;
(   22) !                 LDNOMM (Sortie) ==> Vrai si l'unite logique doit etre
(   23) !                                     associee a un NOM de Fichier EXP-
(   24) !                                     LICITE lors de l'"OPEN" FORTRAN;
(   25) !                 CDNOMF (Sortie) ==> Nom de fichier explicite, si
(   26) !                                     *LDNOMM* est VRAI - Meme si ce
(   27) !                                     n'est pas le cas, ce *DOIT* ETRE
(   28) !                                     UN OBJET DE TYPE "CHARACTER" .
(   29) !                 CDSTTU (Sortie) ==> "STATUS" pour l'"OPEN" FORTRAN
(   30) !                                     ('OLD','NEW','UNKNOWN','SCRATCH')
(   31) !                                     par defaut, mettre 'UNKNOWN';
(   32) !                 LDERFA (Sortie) ==> Option d'erreur fatale;
(   33) !                 LDIMST (Sortie) ==> Option impression de Statistiques
(   34) !                                     au moment de la fermeture;
(   35) !                 KNIMES (Sortie) ==> Niveau de la Messagerie (0,1 ou 2)
(   36) !                                     ( 0==>Rien, 2==>Tout )
(   37) !                 CDNOMC (Sortie) ==> Nom du CADRE associe au fichier.
(   38) !*
(   39) !     N.B. :  Pour un fichier en mode creation, ce cadre doit avoir ete
(   40) !          defini au prealable (via le sous-programme FACADE, ou par
(   41) !          l'ouverture d'un fichier preexistant).
(   42) !             Pour un fichier ARPEGE preexistant, le cadre est lu sur le
(   43) !          fichier; s'il etait deja defini auparavant, il y a controle
(   44) !          de coherence entre les deux versions du cadre.
(   45) !
(   46) !
(   47) TYPE(FA_COM) :: FA
(   48) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIMES
(   49) !
(   50) CHARACTER CPNOMD*(*)
(   51) PARAMETER ( CPNOMD='%%%%% FICHIER SANS NOM %%%%%' )
(   52) !
(   53) INTEGER (KIND=JPLIKB) IRANG, IRANGC
(   54) LOGICAL LDNOMM, LDERFA, LDIMST
(   55) INTEGER (KIND=JPLIKB) IREP
(   56) !
(   57) CHARACTER CDNOMF*(*), CDSTTU*(*), CDNOMC*(*)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 7

(   58) !
(   59) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   60) # 61 "faiopt.F90"
(   61) IF (LHOOK) CALL DR_HOOK('FAIOPT_MT',0,ZHOOK_HANDLE)
(   62) # 63 "faiopt.F90"
(   63) IREP=0
(   64) IRANG=0
(   65) CALL FANUMU_MT64                  &
(   66) &               (FA, KNUMER, IRANG)
(   67) # 68 "faiopt.F90"
(   68) IF (IRANG .EQ. 0) THEN
(   69)   IREP=-1
(   70)   GOTO 1001
(   71) ENDIF
(   72) # 73 "faiopt.F90"
(   73) IRANGC=FA%FICHIER(IRANG)%NUCADR
(   74) CDNOMC=FA%CADRE(IRANGC)%CNOMCA
(   75) LDNOMM=FA%FICHIER(IRANG)%LNOMME
(   76) KNIMES=FA%FICHIER(IRANG)%NIVOMS
(   77) LDERFA=FA%FICHIER(IRANG)%LERRFA
(   78) CDNOMF=CPNOMD
(   79) CDSTTU=''
(   80) LDIMST=.FALSE.
(   81) # 82 "faiopt.F90"
(   82) IF (LDNOMM) THEN
(   83)   CALL LFIOPT_MT64                                        &
(   84) &                 (FA%LFI, IREP, KNUMER, LDNOMM, CDNOMF,  &
(   85) &                  CDSTTU, LDERFA, LDIMST, KNIMES)
(   86) # 87 "faiopt.F90"
(   87)   IF (IREP .NE. 0) GOTO 1001
(   88) ENDIF
(   89) # 90 "faiopt.F90"
(   90) 1001 CONTINUE
(   91) KREP=IREP
(   92) IF (LHOOK) CALL DR_HOOK('FAIOPT_MT',1,ZHOOK_HANDLE)
(   93) END SUBROUTINE FAIOPT_MT64
(   94) # 98 "faiopt.F90"
(   98) ! Oct-2012 P. Marguinaud 64b LFI
(   99) SUBROUTINE FAIOPT64                                      &
(  100) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  101) &           LDIMST, KNIMES, CDNOMC)
(  102) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  103) &                   FA_COM_DEFAULT_INIT,  &
(  104) &                   NEW_FA_DEFAULT
(  105) USE LFI_PRECISION
(  106) IMPLICIT NONE
(  107) ! Arguments
(  108) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  109) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  110) LOGICAL                LDNOMM                                 !   OUT
(  111) CHARACTER (LEN=*)      CDNOMF                                 !   OUT
(  112) CHARACTER (LEN=*)      CDSTTU                                 !   OUT
(  113) LOGICAL                LDERFA                                 !   OUT
(  114) LOGICAL                LDIMST                                 !   OUT
(  115) INTEGER (KIND=JPLIKB)  KNIMES                                 !   OUT
(  116) CHARACTER (LEN=*)      CDNOMC                                 !   OUT
(  117) # 118 "faiopt.F90"
(  118) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 8

(  119) # 120 "faiopt.F90"
(  120) CALL FAIOPT_MT64                                             &
(  121) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  122) &           LDIMST, KNIMES, CDNOMC)
(  123) # 124 "faiopt.F90"
(  124) END SUBROUTINE FAIOPT64
(  125) # 126 "faiopt.F90"
(  126) SUBROUTINE FAIOPT                                        &
(  127) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  128) &           LDIMST, KNIMES, CDNOMC)
(  129) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  130) &                   FA_COM_DEFAULT_INIT,  &
(  131) &                   NEW_FA_DEFAULT
(  132) USE LFI_PRECISION
(  133) IMPLICIT NONE
(  134) ! Arguments
(  135) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  136) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  137) LOGICAL                LDNOMM                                 !   OUT
(  138) CHARACTER (LEN=*)      CDNOMF                                 !   OUT
(  139) CHARACTER (LEN=*)      CDSTTU                                 !   OUT
(  140) LOGICAL                LDERFA                                 !   OUT
(  141) LOGICAL                LDIMST                                 !   OUT
(  142) INTEGER (KIND=JPLIKM)  KNIMES                                 !   OUT
(  143) CHARACTER (LEN=*)      CDNOMC                                 !   OUT
(  144) # 145 "faiopt.F90"
(  145) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  146) # 147 "faiopt.F90"
(  147) CALL FAIOPT_MT                                               &
(  148) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  149) &           LDIMST, KNIMES, CDNOMC)
(  150) # 151 "faiopt.F90"
(  151) END SUBROUTINE FAIOPT
(  152) # 153 "faiopt.F90"
(  153) SUBROUTINE FAIOPT_MT                                         &
(  154) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  155) &           LDIMST, KNIMES, CDNOMC)
(  156) USE FA_MOD, ONLY : FA_COM
(  157) USE LFI_PRECISION
(  158) IMPLICIT NONE
(  159) ! Arguments
(  160) TYPE (FA_COM)          FA                                     ! INOUT
(  161) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  162) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  163) LOGICAL                LDNOMM                                 !   OUT
(  164) CHARACTER (LEN=*)      CDNOMF                                 !   OUT
(  165) CHARACTER (LEN=*)      CDSTTU                                 !   OUT
(  166) LOGICAL                LDERFA                                 !   OUT
(  167) LOGICAL                LDIMST                                 !   OUT
(  168) INTEGER (KIND=JPLIKM)  KNIMES                                 !   OUT
(  169) CHARACTER (LEN=*)      CDNOMC                                 !   OUT
(  170) ! Local integers
(  171) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  172) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  173) INTEGER (KIND=JPLIKB)  INIMES                                 !   OUT
(  174) ! Convert arguments
(  175) # 176 "faiopt.F90"
(  176) INUMER     = INT (    KNUMER, JPLIKB)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:33      page 9

(  177) # 178 "faiopt.F90"
(  178) CALL FAIOPT_MT64                                             &
(  179) &           (FA, IREP, INUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  180) &           LDIMST, INIMES, CDNOMC)
(  181) # 182 "faiopt.F90"
(  182) KREP       = INT (      IREP, JPLIKM)
(  183) KNIMES     = INT (    INIMES, JPLIKM)
(  184) # 185 "faiopt.F90"
(  185) END SUBROUTINE FAIOPT_MT
(  186) # 187 "faiopt.F90"
(  187) !INTF KREP            OUT 
(  188) !INTF KNUMER        IN    
(  189) !INTF LDNOMM          OUT 
(  190) !INTF CDNOMF          OUT 
(  191) !INTF CDSTTU          OUT 
(  192) !INTF LDERFA          OUT 
(  193) !INTF LDIMST          OUT 
(  194) !INTF KNIMES          OUT 
(  195) !INTF CDNOMC          OUT 
