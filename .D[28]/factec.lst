


NVFORTRAN (Version     23.1)          02/24/2023  13:55:01      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:55:01      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: factec.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACTEC_MT64                                      &
(    4) &                     (FA, KREP, PA, KNBIT, KDEC, KE, KNUTIL)
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme de calcul du FACTeur d'EChelle binaire associe
(   12) !     a un champ d'amplitude donnee, code sur KNBIT bits.
(   13) !**
(   14) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   15) !                PA     (Entree) ==> Amplitude du champ a compacter;
(   16) !                KNBIT  (Entree) ==> Nb de bits servant au compactage;
(   17) !                KDEC   (Entree) ==> Facteur d'echelle decimal;
(   18) !                KE     (Sortie) ==> Facteur d'echelle binaire;
(   19) !                KNUTIL (Sortie) ==> Nombre d'entiers utilises pour
(   20) !                                    representer le champ.
(   21) !
(   22) !     Modifications:
(   23) !
(   24) TYPE(FA_COM) :: FA
(   25) REAL (KIND=JPDBLR) PA
(   26) INTEGER (KIND=JPLIKB) KREP, KNBIT, KDEC, KE, KNUTIL
(   27) !
(   28) REAL (KIND=JPDBLR) ZTWO, ZHALF, ZTEN
(   29) 
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:55:01      page 3

(   31) !**
(   32) !     1.  -  CONTROLES ET INITIALISATIONS.
(   33) !-----------------------------------------------------------------------
(   34) !
(   35) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   36) IF (LHOOK) CALL DR_HOOK('FACTEC_MT',0,ZHOOK_HANDLE)
(   37) ZTWO   = 2._JPDBLR
(   38) ZHALF  = 0.5_JPDBLR
(   39) ZTEN   = 10._JPDBLR
(   40) KREP   = 0
(   41) KE     = 0
(   42) KNUTIL = 0
(   43) IF (KNBIT.LE.0 .OR. KNBIT.GT.64) THEN
(   44)   KREP=-1
(   45)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   46)   WRITE (UNIT=FA%NULOUT,FMT=*)                               &
(   47) &         '**** FACTEC: ERROR, bits number out of range 1-64'
(   48)   WRITE (UNIT=FA%NULOUT,FMT=*)'****         KNBIT = ',KNBIT
(   49)   WRITE (UNIT=FA%NULOUT,FMT=*)                                 &
(   50) &         '****         Binary scale factor is not computed !!'
(   51)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   52)   GOTO 1001
(   53) ENDIF
(   54) IF ( ABS(PA).LT.TINY(PA) ) THEN
(   55)   WRITE (UNIT=FA%NULOUT,FMT=*)'----'
(   56)   WRITE (UNIT=FA%NULOUT,FMT=*)                              &
(   57) &         '---- FACTEC: Warning, the range of the field is', &
(   58) &         ' considered as zero'
(   59)   WRITE (UNIT=FA%NULOUT,FMT=*)'----'
(   60)   KE = 0
(   61)   KNUTIL = 1
(   62)   GOTO 1001
(   63) ENDIF
(   64) IF ( ABS(LOG10(ABS(PA))+REAL (KDEC, JPDBLR))  &
(   65) &     .GE. REAL (RANGE(PA), JPDBLR) ) THEN
(   66)   KREP=-1
(   67)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   68)   WRITE (UNIT=FA%NULOUT,FMT=*)                                  &
(   69) &                '**** FACTEC: ERROR, PA*10**KDEC exceeds real', &
(   70) &                'representation of KIND=',JPDBLR
(   71)   WRITE (UNIT=FA%NULOUT,FMT=*)                              &
(   72) &         '****         LOG10(ABS(PA)), KDEC, RANGE(PA) = ', &
(   73) &         LOG10(ABS(PA)), KDEC, RANGE(PA)
(   74)   WRITE (UNIT=FA%NULOUT,FMT=*)                                 &
(   75) &         '****         Binary scale factor is not computed !!'
(   76)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   77)   GOTO 1001
(   78) ENDIF
(   79) !
(   80) !**
(   81) !     2.  -  CALCUL DU FACTEUR D'ECHELLE BINAIRE
(   82) !-----------------------------------------------------------------------
(   83) !
(   84) KE = FLOOR( LOG( (PA*10._8**KDEC) /                 &
(   85) &                 (2._8**KNBIT-0.5_8) )/LOG(2._8),  &
(   86) &                 KIND=JPLIKB ) + 1
(   87) KNUTIL = FLOOR( 0.5_8 + PA*(10._8**KDEC)*(2._8**(-KE)), &
(   88) &                KIND=JPLIKB )






NVFORTRAN (Version     23.1)          02/24/2023  13:55:01      page 4

(   89) 
(   90) 1001 CONTINUE
(   91) 
(   92) IF (LHOOK) CALL DR_HOOK('FACTEC_MT',1,ZHOOK_HANDLE)
(   93) END SUBROUTINE
(   94) 
(   95) 
(   96) !INTF KREP            OUT 
(   97) !INTF PA            IN    
(   98) !INTF KNBIT         IN    
(   99) !INTF KDEC          IN    
(  100) !INTF KE              OUT 
(  101) !INTF KNUTIL          OUT 



















































NVFORTRAN (Version     23.1)          02/24/2023  13:55:01      page 5

(    1) # 1 "factec.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACTEC_MT64                                      &
(    4) &                     (FA, KREP, PA, KNBIT, KDEC, KE, KNUTIL)
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme de calcul du FACTeur d'EChelle binaire associe
(   12) !     a un champ d'amplitude donnee, code sur KNBIT bits.
(   13) !**
(   14) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   15) !                PA     (Entree) ==> Amplitude du champ a compacter;
(   16) !                KNBIT  (Entree) ==> Nb de bits servant au compactage;
(   17) !                KDEC   (Entree) ==> Facteur d'echelle decimal;
(   18) !                KE     (Sortie) ==> Facteur d'echelle binaire;
(   19) !                KNUTIL (Sortie) ==> Nombre d'entiers utilises pour
(   20) !                                    representer le champ.
(   21) !
(   22) !     Modifications:
(   23) !
(   24) TYPE(FA_COM) :: FA
(   25) REAL (KIND=JPDBLR) PA
(   26) INTEGER (KIND=JPLIKB) KREP, KNBIT, KDEC, KE, KNUTIL
(   27) !
(   28) REAL (KIND=JPDBLR) ZTWO, ZHALF, ZTEN
(   29) # 30 "factec.F90"
(   30) !
(   31) !**
(   32) !     1.  -  CONTROLES ET INITIALISATIONS.
(   33) !-----------------------------------------------------------------------
(   34) !
(   35) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   36) IF (LHOOK) CALL DR_HOOK('FACTEC_MT',0,ZHOOK_HANDLE)
(   37) ZTWO   = 2._JPDBLR
(   38) ZHALF  = 0.5_JPDBLR
(   39) ZTEN   = 10._JPDBLR
(   40) KREP   = 0
(   41) KE     = 0
(   42) KNUTIL = 0
(   43) IF (KNBIT.LE.0 .OR. KNBIT.GT.64) THEN
(   44)   KREP=-1
(   45)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   46)   WRITE (UNIT=FA%NULOUT,FMT=*)                               &
(   47) &         '**** FACTEC: ERROR, bits number out of range 1-64'
(   48)   WRITE (UNIT=FA%NULOUT,FMT=*)'****         KNBIT = ',KNBIT
(   49)   WRITE (UNIT=FA%NULOUT,FMT=*)                                 &
(   50) &         '****         Binary scale factor is not computed !!'
(   51)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   52)   GOTO 1001
(   53) ENDIF
(   54) IF ( ABS(PA).LT.TINY(PA) ) THEN
(   55)   WRITE (UNIT=FA%NULOUT,FMT=*)'----'
(   56)   WRITE (UNIT=FA%NULOUT,FMT=*)                              &
(   57) &         '---- FACTEC: Warning, the range of the field is', &






NVFORTRAN (Version     23.1)          02/24/2023  13:55:01      page 6

(   58) &         ' considered as zero'
(   59)   WRITE (UNIT=FA%NULOUT,FMT=*)'----'
(   60)   KE = 0
(   61)   KNUTIL = 1
(   62)   GOTO 1001
(   63) ENDIF
(   64) IF ( ABS(LOG10(ABS(PA))+REAL (KDEC, JPDBLR))  &
(   65) &     .GE. REAL (RANGE(PA), JPDBLR) ) THEN
(   66)   KREP=-1
(   67)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   68)   WRITE (UNIT=FA%NULOUT,FMT=*)                                  &
(   69) &                '**** FACTEC: ERROR, PA*10**KDEC exceeds real', &
(   70) &                'representation of KIND=',JPDBLR
(   71)   WRITE (UNIT=FA%NULOUT,FMT=*)                              &
(   72) &         '****         LOG10(ABS(PA)), KDEC, RANGE(PA) = ', &
(   73) &         LOG10(ABS(PA)), KDEC, RANGE(PA)
(   74)   WRITE (UNIT=FA%NULOUT,FMT=*)                                 &
(   75) &         '****         Binary scale factor is not computed !!'
(   76)   WRITE (UNIT=FA%NULOUT,FMT=*)'****'
(   77)   GOTO 1001
(   78) ENDIF
(   79) !
(   80) !**
(   81) !     2.  -  CALCUL DU FACTEUR D'ECHELLE BINAIRE
(   82) !-----------------------------------------------------------------------
(   83) !
(   84) KE = FLOOR( LOG( (PA*10._8**KDEC) /                 &
(   85) &                 (2._8**KNBIT-0.5_8) )/LOG(2._8),  &
(   86) &                 KIND=JPLIKB ) + 1
(   87) KNUTIL = FLOOR( 0.5_8 + PA*(10._8**KDEC)*(2._8**(-KE)), &
(   88) &                KIND=JPLIKB )
(   89) # 90 "factec.F90"
(   90) 1001 CONTINUE
(   91) # 92 "factec.F90"
(   92) IF (LHOOK) CALL DR_HOOK('FACTEC_MT',1,ZHOOK_HANDLE)
(   93) END SUBROUTINE
(   94) # 96 "factec.F90"
(   96) !INTF KREP            OUT 
(   97) !INTF PA            IN    
(   98) !INTF KNBIT         IN    
(   99) !INTF KDEC          IN    
(  100) !INTF KE              OUT 
(  101) !INTF KNUTIL          OUT 
