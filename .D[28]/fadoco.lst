


NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fadoco.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FADOCO_MT64                                              &
(    4) &                     (FA,  KREP,   KNUMER, CDPREF, KNIVAU, CDSUFF, &
(    5) &                      LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,      &
(    6) &                      PCHAMP, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM, FAGR1TAB, JPPRCM
(    8) USE PARKIND1, ONLY : JPRB
(    9) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   10) USE LFI_PRECISION
(   11) IMPLICIT NONE
(   12) !
(   13) !****
(   14) !      Sous-programme de controle et de DECODAGE d'un CHAMP HORIZONTAL
(   15) !      venant d'etre lu sur un fichier ARPEGE/ALADIN, avec reordonnement
(   16) !      des coefficients spectraux, le cas echeant.
(   17) !       ( DECOdage de donnees )
(   18) !**
(   19) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   20) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   21) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   22) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   23) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   24) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   25) !                                    par des coefficients spectraux;
(   26) !                CDNOMA (Sortie) ==> Nom de l'article-champ lu;
(   27) !                KLNOMA (Sortie) ==> Nombre de caracteres utiles dans
(   28) !                                    CDNOMA;
(   29) !    ( Tableau ) PVALCO (Entree) ==> Donnees issues de la lecture;
(   30) !                KLONGD (Entree) ==> Nombre de valeurs (mots de 64 bits






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 3

(   31) !                                    en principe) lues;
(   32) !    ( Tableau ) PCHAMP (Sortie) ==> Valeurs REELLES du champ lu (ordre du
(   33) !                                    modele).
(   34) !                LDUNDF (Sortie) ==> Vrai si ce champ a des valeurs 
(   35) !                                    indefinies
(   36) !                PUNDF  (Sortie) ==> Dans le cas ou LDUNDF est vrai,
(   37) !                                    valeur non definie
(   38) !
(   39) !    Remarques:
(   40) !
(   41) !    - PVALCO est type entier, et doit avoir une longueur
(   42) !      suffisante pour stocker les donnees codees. Le dimensionnement
(   43) !      "tous terrains" est (2+ILCHAM), qui permet le cas echeant de
(   44) !      stocker un champ a pleine resolution sans codage effectif.
(   45) !      (ILCHAM est le nombre de valeurs du champ a decoder)
(   46) !
(   47) !    - CDNOMA doit avoir au moins FA%JPXNOM caracteres.
(   48) !
(   49) !
(   50) TYPE(FA_COM)           FA
(   51) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   52) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   53) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   54) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   55) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   56) LOGICAL                LDCOSP                                 ! IN   
(   57) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   58) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   59) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(   60) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(   61) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(   62) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(   63) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(   64) !
(   65) REAL (KIND=JPDBLR), ALLOCATABLE :: ZCHAMP (:)
(   66) INTEGER (KIND=JPLIKB) IRANG, IRANGC, INIMES
(   67) INTEGER (KIND=JPLIKB) ISMAX, IMSMAX
(   68) INTEGER (KIND=JPLIKB) INGRIB
(   69) INTEGER (KIND=JPLIKB) IREP
(   70) LOGICAL LLREORD
(   71) !
(   72) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   73) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   74) LOGICAL                  LLFATA
(   75) LOGICAL                  LLRLFI
(   76) LOGICAL               :: LLUNDF
(   77) REAL (KIND=JPDBLR)    :: ZUNDF 
(   78) TYPE (FAGR1TAB)       :: YLGR1TAB
(   79) 
(   80) !**
(   81) !     1.  -  CONTROLES ET INITIALISATIONS.
(   82) !-----------------------------------------------------------------------
(   83) !
(   84) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   85) IF (LHOOK) CALL DR_HOOK('FADOCO_MT',0,ZHOOK_HANDLE)
(   86) 
(   87) LLUNDF = .FALSE.
(   88) IF (PRESENT (LDUNDF   )) LLUNDF   = LDUNDF 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 4

(   89) ZUNDF  = 0._JPDBLR
(   90) IF (PRESENT (PUNDF    )) ZUNDF    = PUNDF  
(   91) 
(   92) IREP=0
(   93) LLRLFI=.FALSE.
(   94) KLNOMA=0
(   95) 
(   96) CALL FANUMU_MT64                 &
(   97) &               (FA, KNUMER,IRANG)
(   98) !
(   99) IF (IRANG.EQ.0) THEN
(  100)   IREP=-51
(  101)   GOTO 1001
(  102)   CDNOMA=' '
(  103) ENDIF
(  104) 
(  105) INGRIB=TRANSFER (PVALCO (1:JPPRCM), INGRIB)
(  106) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  107) LLREORD = LDCOSP .AND. (.NOT.(INGRIB==-1 .OR. INGRIB==3 .OR. FALGRA (INGRIB)))
(  108) 
(  109) IF (LLREORD) THEN
(  110)   ISMAX  = FA%CADRE(IRANGC)%NSMAX     
(  111)   IMSMAX = FA%CADRE(IRANGC)%NMSMAX     
(  112)   ALLOCATE (ZCHAMP (4 * (IMSMAX+1) * (ISMAX+1))) ! Assez grand
(  113) 
(  114)   CALL FADEC1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, &
(  115)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,   &
(  116)                   & ZCHAMP, LLUNDF, ZUNDF, YLGR1TAB)
(  117) 
(  118)   IF (IREP /= 0) GOTO 1001
(  119)   CALL FAREOR_MT64 (FA, IREP, KNUMER, PCHAMP, ZCHAMP, .TRUE.)
(  120)   IF (IREP /= 0) GOTO 1001
(  121)   DEALLOCATE (ZCHAMP)
(  122) ELSE
(  123)   CALL FADEC1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, &
(  124)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,   &
(  125)                   & PCHAMP, LLUNDF, ZUNDF, YLGR1TAB)
(  126) ENDIF
(  127) 
(  128) 1001 CONTINUE
(  129) KREP=IREP
(  130) LLFATA=LLMOER (IREP,IRANG)
(  131) !
(  132) IF (LLFATA) THEN
(  133)   INIMES=2
(  134) ELSE
(  135)   INIMES=IXNVMS(IRANG)
(  136) ENDIF
(  137) !
(  138) 
(  139) IF (PRESENT (LDUNDF  )) LDUNDF   = LLUNDF 
(  140) IF (PRESENT (PUNDF   )) PUNDF    = ZUNDF  
(  141) 
(  142) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  143)   IF (LHOOK) CALL DR_HOOK('FADOCO_MT',1,ZHOOK_HANDLE)
(  144)   RETURN
(  145) ENDIF
(  146) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 5

(  147) CLNSPR='FADOCO'
(  148) !
(  149) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,         &
(  150) &       '', CDPREF='''''',A,'''''', KNIVAU='',I6,               &
(  151) &       '', CDSUFF='''''',A,'''''', LDCOSP= '',L1)')            &
(  152) &   KREP,KNUMER,TRIM (CDPREF),KNIVAU,TRIM (CDSUFF),LDCOSP
(  153) CALL FAIPAR_MT64                                       &
(  154) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  155) &                CLNSPR,TRIM (CDNOMA))
(  156) !
(  157) IF (LHOOK) CALL DR_HOOK('FADOCO_MT',1,ZHOOK_HANDLE)
(  158) 
(  159) CONTAINS
(  160) 
(  161) #include "facom2.llmoer.h"
(  162) #include "facom2.ixnvms.h"
(  163) #include "falgra.h"
(  164) 
(  165) END SUBROUTINE FADOCO_MT64
(  166) 
(  167) ! Oct-2012 P. Marguinaud 64b LFI
(  168) SUBROUTINE FADOCO64                                        &
(  169) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  170) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,       &
(  171) &            LDUNDF, PUNDF)
(  172) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  173) &                  FA_COM_DEFAULT_INIT,  &
(  174) &                  NEW_FA_DEFAULT
(  175) USE LFI_PRECISION
(  176) IMPLICIT NONE
(  177) ! Arguments
(  178) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  179) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  180) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  181) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  182) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  183) LOGICAL                LDCOSP                                 ! IN   
(  184) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  185) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(  186) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(  187) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(  188) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(  189) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(  190) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(  191) 
(  192) #include "fadoco_mt64.h"
(  193) 
(  194) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  195) 
(  196) CALL FADOCO_MT64                                               &
(  197) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  198) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(  199) &            LDUNDF, PUNDF)
(  200) 
(  201) END SUBROUTINE FADOCO64
(  202) 
(  203) SUBROUTINE FADOCO                                          &
(  204) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 6

(  205) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,       &
(  206) &            LDUNDF, PUNDF)
(  207) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  208) &                  FA_COM_DEFAULT_INIT,  &
(  209) &                  NEW_FA_DEFAULT
(  210) USE LFI_PRECISION
(  211) IMPLICIT NONE
(  212) ! Arguments
(  213) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  214) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  215) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  216) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  217) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  218) LOGICAL                LDCOSP                                 ! IN   
(  219) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  220) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  221) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(  222) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  223) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(  224) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(  225) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(  226) 
(  227) #include "fadoco_mt.h"
(  228) 
(  229) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  230) 
(  231) CALL FADOCO_MT                                                 &
(  232) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  233) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(  234) &            LDUNDF, PUNDF)
(  235) 
(  236) END SUBROUTINE FADOCO
(  237) 
(  238) SUBROUTINE FADOCO_MT                                           &
(  239) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  240) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(  241) &            LDUNDF, PUNDF)
(  242) USE FA_MOD, ONLY : FA_COM
(  243) USE LFI_PRECISION
(  244) IMPLICIT NONE
(  245) ! Arguments
(  246) TYPE (FA_COM)          FA                                     ! INOUT
(  247) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  248) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  249) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  250) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  251) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  252) LOGICAL                LDCOSP                                 ! IN   
(  253) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  254) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  255) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(  256) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  257) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(  258) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(  259) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(  260) 
(  261) #include "fadoco_mt64.h"
(  262) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 7

(  263) ! Local integers
(  264) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  265) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  266) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  267) INTEGER (KIND=JPLIKB)  ILNOMA                                 !   OUT
(  268) INTEGER (KIND=JPLIKB)  ILONGD                                 ! IN   
(  269) ! Convert arguments
(  270) 
(  271) INUMER     = INT (    KNUMER, JPLIKB)
(  272) INIVAU     = INT (    KNIVAU, JPLIKB)
(  273) ILONGD     = INT (    KLONGD, JPLIKB)
(  274) 
(  275) CALL FADOCO_MT64                                               &
(  276) &           (FA, IREP, INUMER, CDPREF, INIVAU, CDSUFF, LDCOSP, &
(  277) &            CDNOMA, ILNOMA, PVALCO, ILONGD, PCHAMP,           &
(  278) &            LDUNDF, PUNDF)
(  279) 
(  280) KREP       = INT (      IREP, JPLIKM)
(  281) KLNOMA     = INT (    ILNOMA, JPLIKM)
(  282) 
(  283) 
(  284) END SUBROUTINE FADOCO_MT
(  285) 
(  286) !INTF KREP            OUT                                                              
(  287) !INTF KNUMER        IN                                                                 
(  288) !INTF CDPREF        IN                                                                 
(  289) !INTF KNIVAU        IN                                                                 
(  290) !INTF CDSUFF        IN                                                                 
(  291) !INTF LDCOSP        IN                                                                 
(  292) !INTF CDNOMA          OUT                                                              
(  293) !INTF KLNOMA          OUT                                                              
(  294) !INTF PVALCO        IN    DIMS=*                         KIND=JPDBLR                   
(  295) !INTF KLONGD        IN                                                                 
(  296) !INTF PCHAMP          OUT DIMS=*                                                       
(  297) !INTF LDUNDF        INOUT                                                              
(  298) !INTF PUNDF         INOUT                                                              
(  299) 



























NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 8

(    1) # 1 "fadoco.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FADOCO_MT64                                              &
(    4) &                     (FA,  KREP,   KNUMER, CDPREF, KNIVAU, CDSUFF, &
(    5) &                      LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,      &
(    6) &                      PCHAMP, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM, FAGR1TAB, JPPRCM
(    8) USE PARKIND1, ONLY : JPRB
(    9) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   10) USE LFI_PRECISION
(   11) IMPLICIT NONE
(   12) !
(   13) !****
(   14) !      Sous-programme de controle et de DECODAGE d'un CHAMP HORIZONTAL
(   15) !      venant d'etre lu sur un fichier ARPEGE/ALADIN, avec reordonnement
(   16) !      des coefficients spectraux, le cas echeant.
(   17) !       ( DECOdage de donnees )
(   18) !**
(   19) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   20) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   21) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   22) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   23) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   24) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   25) !                                    par des coefficients spectraux;
(   26) !                CDNOMA (Sortie) ==> Nom de l'article-champ lu;
(   27) !                KLNOMA (Sortie) ==> Nombre de caracteres utiles dans
(   28) !                                    CDNOMA;
(   29) !    ( Tableau ) PVALCO (Entree) ==> Donnees issues de la lecture;
(   30) !                KLONGD (Entree) ==> Nombre de valeurs (mots de 64 bits
(   31) !                                    en principe) lues;
(   32) !    ( Tableau ) PCHAMP (Sortie) ==> Valeurs REELLES du champ lu (ordre du
(   33) !                                    modele).
(   34) !                LDUNDF (Sortie) ==> Vrai si ce champ a des valeurs 
(   35) !                                    indefinies
(   36) !                PUNDF  (Sortie) ==> Dans le cas ou LDUNDF est vrai,
(   37) !                                    valeur non definie
(   38) !
(   39) !    Remarques:
(   40) !
(   41) !    - PVALCO est type entier, et doit avoir une longueur
(   42) !      suffisante pour stocker les donnees codees. Le dimensionnement
(   43) !      "tous terrains" est (2+ILCHAM), qui permet le cas echeant de
(   44) !      stocker un champ a pleine resolution sans codage effectif.
(   45) !      (ILCHAM est le nombre de valeurs du champ a decoder)
(   46) !
(   47) !    - CDNOMA doit avoir au moins FA%JPXNOM caracteres.
(   48) !
(   49) !
(   50) TYPE(FA_COM)           FA
(   51) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   52) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   53) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   54) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   55) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   56) LOGICAL                LDCOSP                                 ! IN   
(   57) CHARACTER (LEN=*)      CDNOMA                                 !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 9

(   58) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   59) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(   60) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(   61) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(   62) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(   63) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(   64) !
(   65) REAL (KIND=JPDBLR), ALLOCATABLE :: ZCHAMP (:)
(   66) INTEGER (KIND=JPLIKB) IRANG, IRANGC, INIMES
(   67) INTEGER (KIND=JPLIKB) ISMAX, IMSMAX
(   68) INTEGER (KIND=JPLIKB) INGRIB
(   69) INTEGER (KIND=JPLIKB) IREP
(   70) LOGICAL LLREORD
(   71) !
(   72) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   73) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   74) LOGICAL                  LLFATA
(   75) LOGICAL                  LLRLFI
(   76) LOGICAL               :: LLUNDF
(   77) REAL (KIND=JPDBLR)    :: ZUNDF 
(   78) TYPE (FAGR1TAB)       :: YLGR1TAB
(   79) # 80 "fadoco.F90"
(   80) !**
(   81) !     1.  -  CONTROLES ET INITIALISATIONS.
(   82) !-----------------------------------------------------------------------
(   83) !
(   84) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   85) IF (LHOOK) CALL DR_HOOK('FADOCO_MT',0,ZHOOK_HANDLE)
(   86) # 87 "fadoco.F90"
(   87) LLUNDF = .FALSE.
(   88) IF (PRESENT (LDUNDF   )) LLUNDF   = LDUNDF 
(   89) ZUNDF  = 0._JPDBLR
(   90) IF (PRESENT (PUNDF    )) ZUNDF    = PUNDF  
(   91) # 92 "fadoco.F90"
(   92) IREP=0
(   93) LLRLFI=.FALSE.
(   94) KLNOMA=0
(   95) # 96 "fadoco.F90"
(   96) CALL FANUMU_MT64                 &
(   97) &               (FA, KNUMER,IRANG)
(   98) !
(   99) IF (IRANG.EQ.0) THEN
(  100)   IREP=-51
(  101)   GOTO 1001
(  102)   CDNOMA=' '
(  103) ENDIF
(  104) # 105 "fadoco.F90"
(  105) INGRIB=TRANSFER (PVALCO (1:JPPRCM), INGRIB)
(  106) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  107) LLREORD = LDCOSP .AND. (.NOT.(INGRIB==-1 .OR. INGRIB==3 .OR. FALGRA (INGRIB)))
(  108) # 109 "fadoco.F90"
(  109) IF (LLREORD) THEN
(  110)   ISMAX  = FA%CADRE(IRANGC)%NSMAX     
(  111)   IMSMAX = FA%CADRE(IRANGC)%NMSMAX     
(  112)   ALLOCATE (ZCHAMP (4 * (IMSMAX+1) * (ISMAX+1))) ! Assez grand
(  113) # 114 "fadoco.F90"
(  114)   CALL FADEC1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, &
(  115)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,   &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 10

(  116)                   & ZCHAMP, LLUNDF, ZUNDF, YLGR1TAB)
(  117) # 118 "fadoco.F90"
(  118)   IF (IREP /= 0) GOTO 1001
(  119)   CALL FAREOR_MT64 (FA, IREP, KNUMER, PCHAMP, ZCHAMP, .TRUE.)
(  120)   IF (IREP /= 0) GOTO 1001
(  121)   DEALLOCATE (ZCHAMP)
(  122) ELSE
(  123)   CALL FADEC1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, &
(  124)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,   &
(  125)                   & PCHAMP, LLUNDF, ZUNDF, YLGR1TAB)
(  126) ENDIF
(  127) # 128 "fadoco.F90"
(  128) 1001 CONTINUE
(  129) KREP=IREP
(  130) LLFATA=LLMOER (IREP,IRANG)
(  131) !
(  132) IF (LLFATA) THEN
(  133)   INIMES=2
(  134) ELSE
(  135)   INIMES=IXNVMS(IRANG)
(  136) ENDIF
(  137) !
(  138) # 139 "fadoco.F90"
(  139) IF (PRESENT (LDUNDF  )) LDUNDF   = LLUNDF 
(  140) IF (PRESENT (PUNDF   )) PUNDF    = ZUNDF  
(  141) # 142 "fadoco.F90"
(  142) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  143)   IF (LHOOK) CALL DR_HOOK('FADOCO_MT',1,ZHOOK_HANDLE)
(  144)   RETURN
(  145) ENDIF
(  146) !
(  147) CLNSPR='FADOCO'
(  148) !
(  149) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,         &
(  150) &       '', CDPREF='''''',A,'''''', KNIVAU='',I6,               &
(  151) &       '', CDSUFF='''''',A,'''''', LDCOSP= '',L1)')            &
(  152) &   KREP,KNUMER,TRIM (CDPREF),KNIVAU,TRIM (CDSUFF),LDCOSP
(  153) CALL FAIPAR_MT64                                       &
(  154) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  155) &                CLNSPR,TRIM (CDNOMA))
(  156) !
(  157) IF (LHOOK) CALL DR_HOOK('FADOCO_MT',1,ZHOOK_HANDLE)
(  158) # 159 "fadoco.F90"
(  159) CONTAINS
(  160) # 161 "fadoco.F90"
(  161) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 11

(   13) # 162 "fadoco.F90"
(  162) # 162 "fadoco.F90"
(  162) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 163 "fadoco.F90"
(  163) # 163 "fadoco.F90"
(  163) # 1 ".D[27]/falgra.h"
(    1) LOGICAL FUNCTION FALGRA (KNGRIB)
(    2) !****
(    3) !    Cette fonction renvoie une valeur vraie si la methode d'encodage passee en argument fait appel a grib_api
(    4) !**
(    5) !    Arguments : KNGRIB (Entree) ==> Methode d'encodage
(    6) !
(    7) !
(    8) INTEGER (KIND=JPLIKB) KNGRIB
(    9) INTEGER (KIND=JPLIKB) INGRIB_SP, INGRIB_GP
(   10) LOGICAL LLFALGRA_SP, LLFALGRA_GP
(   11) # 12 ".D[27]/falgra.h"
(   12) FALGRA = .FALSE.
(   13) # 14 ".D[27]/falgra.h"
(   14) IF (100 <= KNGRIB .AND. KNGRIB <= 200) THEN
(   15) # 16 ".D[27]/falgra.h"
(   16)   INGRIB_SP = FALGRA_SP (KNGRIB)
(   17)   INGRIB_GP = FALGRA_GP (KNGRIB)
(   18)   
(   19)   LLFALGRA_SP = &
(   20)    & (INGRIB_SP - 100 ==  1) .OR. &      ! GRIB2 complex packing (bug)
(   21)    & (INGRIB_SP - 100 ==  2) .OR. &      ! GRIB0 
(   22)    & (INGRIB_SP - 100 ==  3)             ! GRIB2 complex packing
(   23)   
(   24)   LLFALGRA_GP = &
(   25)    & ((INGRIB_GP-100) / 20 ==  1) .OR. & ! GRIB2 simple packing
(   26)    & ((INGRIB_GP-100) / 20 ==  2) .OR. & ! GRIB2 second order packing
(   27)    & ((INGRIB_GP-100) / 20 ==  3) .OR. & ! GRIB1 simple packing
(   28)    & ((INGRIB_GP-100) / 20 ==  4) .OR. & ! GRIB1 second order packing
(   29)    & ((INGRIB_GP-100) / 20 ==  5)        ! GRIB2 complex packing
(   30)    
(   31) # 32 ".D[27]/falgra.h"
(   32)   IF (LLFALGRA_GP .AND. LLFALGRA_SP) THEN
(   33)     FALGRA = .TRUE.
(   34)   ELSEIF (LLFALGRA_GP) THEN
(   35)     FALGRA = INGRIB_SP == 100
(   36)   ELSEIF (LLFALGRA_SP) THEN
(   37)     FALGRA = INGRIB_GP == 100
(   38)   ENDIF
(   39) # 40 ".D[27]/falgra.h"
(   40) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 12

(   41) # 42 ".D[27]/falgra.h"
(   42) END FUNCTION FALGRA
(   43) # 44 ".D[27]/falgra.h"
(   44) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_SP (KNGRIB)
(   45) INTEGER (KIND=JPLIKB) KNGRIB
(   46) FALGRA_SP = 100+MODULO ((KNGRIB-100),20)
(   47) END FUNCTION FALGRA_SP
(   48) # 49 ".D[27]/falgra.h"
(   49) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_GP (KNGRIB)
(   50) INTEGER (KIND=JPLIKB) KNGRIB
(   51) FALGRA_GP = 100+20*((KNGRIB-100)/20)
(   52) END FUNCTION FALGRA_GP
(   53) # 54 ".D[27]/falgra.h"
(   54) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_ED (KNGRIB)
(   55) INTEGER (KIND=JPLIKB) KNGRIB
(   56) # 57 ".D[27]/falgra.h"
(   57) SELECT CASE (KNGRIB)
(   58)   CASE (160, 180)
(   59)     FALGRA_ED = 1
(   60)   CASE DEFAULT
(   61)     FALGRA_ED = 2
(   62) END SELECT 
(   63) # 64 ".D[27]/falgra.h"
(   64) END FUNCTION FALGRA_ED
(   65) # 164 "fadoco.F90"
(  164) # 165 "fadoco.F90"
(  165) END SUBROUTINE FADOCO_MT64
(  166) # 167 "fadoco.F90"
(  167) ! Oct-2012 P. Marguinaud 64b LFI
(  168) SUBROUTINE FADOCO64                                        &
(  169) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  170) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,       &
(  171) &            LDUNDF, PUNDF)
(  172) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  173) &                  FA_COM_DEFAULT_INIT,  &
(  174) &                  NEW_FA_DEFAULT
(  175) USE LFI_PRECISION
(  176) IMPLICIT NONE
(  177) ! Arguments
(  178) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  179) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  180) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  181) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  182) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  183) LOGICAL                LDCOSP                                 ! IN   
(  184) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  185) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(  186) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(  187) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(  188) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(  189) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(  190) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(  191) # 192 "fadoco.F90"
(  192) # 1 ".D[27]/fadoco_mt64.h"
(    1) INTERFACE
(    2) # 3 ".D[27]/fadoco_mt64.h"
(    3) SUBROUTINE FADOCO_MT64                                              &
(    4) &                     (FA,  KREP,   KNUMER, CDPREF, KNIVAU, CDSUFF, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 13

(    5) &                      LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,      &
(    6) &                      PCHAMP, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) TYPE(FA_COM)           FA
(   11) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   12) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   13) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   14) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   15) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   16) LOGICAL                LDCOSP                                 ! IN   
(   17) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   18) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   19) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(   20) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(   21) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(   22) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(   23) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(   24) END SUBROUTINE
(   25) # 26 ".D[27]/fadoco_mt64.h"
(   26) END INTERFACE
(   27) # 193 "fadoco.F90"
(  193) # 194 "fadoco.F90"
(  194) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  195) # 196 "fadoco.F90"
(  196) CALL FADOCO_MT64                                               &
(  197) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  198) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(  199) &            LDUNDF, PUNDF)
(  200) # 201 "fadoco.F90"
(  201) END SUBROUTINE FADOCO64
(  202) # 203 "fadoco.F90"
(  203) SUBROUTINE FADOCO                                          &
(  204) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  205) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,       &
(  206) &            LDUNDF, PUNDF)
(  207) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  208) &                  FA_COM_DEFAULT_INIT,  &
(  209) &                  NEW_FA_DEFAULT
(  210) USE LFI_PRECISION
(  211) IMPLICIT NONE
(  212) ! Arguments
(  213) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  214) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  215) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  216) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  217) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  218) LOGICAL                LDCOSP                                 ! IN   
(  219) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  220) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  221) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(  222) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  223) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(  224) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(  225) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(  226) # 227 "fadoco.F90"
(  227) # 1 ".D[27]/fadoco_mt.h"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 14

(    1) INTERFACE
(    2) # 3 ".D[27]/fadoco_mt.h"
(    3) SUBROUTINE FADOCO_MT                                           &
(    4) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(    5) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(    6) &            LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) ! Arguments
(   11) TYPE (FA_COM)          FA                                     ! INOUT
(   12) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(   13) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(   14) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   15) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(   16) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   17) LOGICAL                LDCOSP                                 ! IN   
(   18) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   19) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(   20) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(   21) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(   22) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(   23) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(   24) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(   25) END SUBROUTINE
(   26) # 27 ".D[27]/fadoco_mt.h"
(   27) END INTERFACE
(   28) # 228 "fadoco.F90"
(  228) # 229 "fadoco.F90"
(  229) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  230) # 231 "fadoco.F90"
(  231) CALL FADOCO_MT                                                 &
(  232) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  233) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(  234) &            LDUNDF, PUNDF)
(  235) # 236 "fadoco.F90"
(  236) END SUBROUTINE FADOCO
(  237) # 238 "fadoco.F90"
(  238) SUBROUTINE FADOCO_MT                                           &
(  239) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, LDCOSP, &
(  240) &            CDNOMA, KLNOMA, PVALCO, KLONGD, PCHAMP,           &
(  241) &            LDUNDF, PUNDF)
(  242) USE FA_MOD, ONLY : FA_COM
(  243) USE LFI_PRECISION
(  244) IMPLICIT NONE
(  245) ! Arguments
(  246) TYPE (FA_COM)          FA                                     ! INOUT
(  247) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  248) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  249) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  250) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  251) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  252) LOGICAL                LDCOSP                                 ! IN   
(  253) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  254) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  255) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(  256) INTEGER (KIND=JPLIKM)  KLONGD                                 ! IN   
(  257) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 15

(  258) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(  259) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(  260) # 261 "fadoco.F90"
(  261) # 1 ".D[27]/fadoco_mt64.h"
(    1) INTERFACE
(    2) # 3 ".D[27]/fadoco_mt64.h"
(    3) SUBROUTINE FADOCO_MT64                                              &
(    4) &                     (FA,  KREP,   KNUMER, CDPREF, KNIVAU, CDSUFF, &
(    5) &                      LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,      &
(    6) &                      PCHAMP, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) TYPE(FA_COM)           FA
(   11) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   12) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   13) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   14) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   15) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   16) LOGICAL                LDCOSP                                 ! IN   
(   17) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   18) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   19) REAL (KIND=JPDBLR)     PVALCO     (*)                         ! IN   
(   20) INTEGER (KIND=JPLIKB)  KLONGD                                 ! IN   
(   21) REAL (KIND=JPDBLR)     PCHAMP     (*)                         !   OUT
(   22) LOGICAL,               OPTIONAL :: LDUNDF                     !   OUT
(   23) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      !   OUT
(   24) END SUBROUTINE
(   25) # 26 ".D[27]/fadoco_mt64.h"
(   26) END INTERFACE
(   27) # 262 "fadoco.F90"
(  262) # 263 "fadoco.F90"
(  263) ! Local integers
(  264) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  265) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  266) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  267) INTEGER (KIND=JPLIKB)  ILNOMA                                 !   OUT
(  268) INTEGER (KIND=JPLIKB)  ILONGD                                 ! IN   
(  269) ! Convert arguments
(  270) # 271 "fadoco.F90"
(  271) INUMER     = INT (    KNUMER, JPLIKB)
(  272) INIVAU     = INT (    KNIVAU, JPLIKB)
(  273) ILONGD     = INT (    KLONGD, JPLIKB)
(  274) # 275 "fadoco.F90"
(  275) CALL FADOCO_MT64                                               &
(  276) &           (FA, IREP, INUMER, CDPREF, INIVAU, CDSUFF, LDCOSP, &
(  277) &            CDNOMA, ILNOMA, PVALCO, ILONGD, PCHAMP,           &
(  278) &            LDUNDF, PUNDF)
(  279) # 280 "fadoco.F90"
(  280) KREP       = INT (      IREP, JPLIKM)
(  281) KLNOMA     = INT (    ILNOMA, JPLIKM)
(  282) # 284 "fadoco.F90"
(  284) END SUBROUTINE FADOCO_MT
(  285) # 286 "fadoco.F90"
(  286) !INTF KREP            OUT                                                              
(  287) !INTF KNUMER        IN                                                                 
(  288) !INTF CDPREF        IN                                                                 
(  289) !INTF KNIVAU        IN                                                                 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:08      page 16

(  290) !INTF CDSUFF        IN                                                                 
(  291) !INTF LDCOSP        IN                                                                 
(  292) !INTF CDNOMA          OUT                                                              
(  293) !INTF KLNOMA          OUT                                                              
(  294) !INTF PVALCO        IN    DIMS=*                         KIND=JPDBLR                   
(  295) !INTF KLONGD        IN                                                                 
(  296) !INTF PCHAMP          OUT DIMS=*                                                       
(  297) !INTF LDUNDF        INOUT                                                              
(  298) !INTF PUNDF         INOUT                                                              
