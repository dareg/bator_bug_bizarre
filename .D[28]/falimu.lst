


NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: falimu.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FALIMU_MT64                                     &
(    4) &                     (FA,  KXNIVV, KXTRON, KXLATI, KXLONG )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme servant a obtenir les valeurs courantes
(   12) !     des LIMites Utilisateur en termes de Resolutions horizontale
(   13) !     et verticale, valides globalement pour tous les Fichiers et Cadres
(   14) !     ARPEGE manipules par le programme utilisateur.
(   15) !**
(   16) !        Arguments : KXNIVV ==> Nombre maximum de niveaux verticaux;
(   17) !  (tous de Sortie)  KXTRON ==> Troncature maximum;
(   18) !                    KXLATI ==> Nombre maximum de latitudes pole a pole;
(   19) !                    KXLONG ==> Nombre maxi de longitudes par parallele.
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KXNIVV, KXTRON, KXLATI, KXLONG
(   25) !
(   26) INTEGER (KIND=JPLIKB) INUMER, INIMES, IREP
(   27) !
(   28) LOGICAL LLVERG
(   29) !
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 3

(   31) !
(   32) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   33) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) LOGICAL                  LLFATA
(   36) 
(   37) !**
(   38) !     1.  -  SI PREMIERE UTILISATION, APPEL AU SOUS-PROGRAMME "FARINE".
(   39) !-----------------------------------------------------------------------
(   40) !
(   41) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   42) IF (LHOOK) CALL DR_HOOK('FALIMU_MT',0,ZHOOK_HANDLE)
(   43) CLACTI=''
(   44) IF (FA%FALIMU_LLPREA) THEN
(   45)   CALL FARINE_MT64              &
(   46) &                 (FA, 2_JPLIKB )
(   47)   FA%FALIMU_LLPREA=.FALSE.
(   48) ENDIF
(   49) !
(   50) !             Verrouillage global, si necessaire.
(   51) !
(   52) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(   53) &                              (FA%LFI, FA%VRGLAS,'ON')
(   54) LLVERG=FA%LFAMUL
(   55) !**
(   56) !     2.  -  RECOPIE DES VALEURS EN COMMON DANS LES ARGUMENTS.
(   57) !-----------------------------------------------------------------------
(   58) !
(   59) KXNIVV=FA%NXNIVV
(   60) KXTRON=FA%NXTRON
(   61) KXLATI=FA%NXLATI
(   62) KXLONG=FA%NXLONG
(   63) !**
(   64) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   65) !            VIA LE sous-programme "FAIPAR" .
(   66) !-----------------------------------------------------------------------
(   67) !
(   68) !
(   69) !          Deverrouillage global eventuel.
(   70) !
(   71) IF (LLVERG) CALL LFIVER_MT64                         &
(   72) &                           (FA%LFI, FA%VRGLAS,'OFF')
(   73) !
(   74) IF (FA%NIMSGA.EQ.2) THEN
(   75)   IREP=0
(   76)   INIMES=2
(   77)   CLNSPR='FALIMU'
(   78)   INUMER=JPNIIL
(   79)   WRITE (UNIT=CLMESS,FMT='(''KXNIVV='',I4,'', KXTRON='',I4, &
(   80) &         '', KXLATI='',I4,'', KXLONG='',I4)')               &
(   81) &     KXNIVV,KXTRON,KXLATI,KXLONG
(   82)   CALL FAIPAR_MT64                                     &
(   83) &                 (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(   84) &               CLNSPR,CLACTI,.FALSE.)
(   85) ENDIF
(   86) !
(   87) IF (LHOOK) CALL DR_HOOK('FALIMU_MT',1,ZHOOK_HANDLE)
(   88) END SUBROUTINE FALIMU_MT64






NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 4

(   89) 
(   90) 
(   91) 
(   92) ! Oct-2012 P. Marguinaud 64b LFI
(   93) SUBROUTINE FALIMU64                        &
(   94) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(   95) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   96) &                   FA_COM_DEFAULT_INIT,  &
(   97) &                   NEW_FA_DEFAULT
(   98) USE LFI_PRECISION
(   99) IMPLICIT NONE
(  100) ! Arguments
(  101) INTEGER (KIND=JPLIKB)  KXNIVV                                 !   OUT
(  102) INTEGER (KIND=JPLIKB)  KXTRON                                 !   OUT
(  103) INTEGER (KIND=JPLIKB)  KXLATI                                 !   OUT
(  104) INTEGER (KIND=JPLIKB)  KXLONG                                 !   OUT
(  105) 
(  106) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  107) 
(  108) CALL FALIMU_MT64                               &
(  109) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  110) 
(  111) END SUBROUTINE FALIMU64
(  112) 
(  113) SUBROUTINE FALIMU                          &
(  114) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(  115) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  116) &                   FA_COM_DEFAULT_INIT,  &
(  117) &                   NEW_FA_DEFAULT
(  118) USE LFI_PRECISION
(  119) IMPLICIT NONE
(  120) ! Arguments
(  121) INTEGER (KIND=JPLIKM)  KXNIVV                                 !   OUT
(  122) INTEGER (KIND=JPLIKM)  KXTRON                                 !   OUT
(  123) INTEGER (KIND=JPLIKM)  KXLATI                                 !   OUT
(  124) INTEGER (KIND=JPLIKM)  KXLONG                                 !   OUT
(  125) 
(  126) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  127) 
(  128) CALL FALIMU_MT                                 &
(  129) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  130) 
(  131) END SUBROUTINE FALIMU
(  132) 
(  133) SUBROUTINE FALIMU_MT                           &
(  134) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  135) USE FA_MOD, ONLY : FA_COM
(  136) USE LFI_PRECISION
(  137) IMPLICIT NONE
(  138) ! Arguments
(  139) TYPE (FA_COM)          FA                                     ! INOUT
(  140) INTEGER (KIND=JPLIKM)  KXNIVV                                 !   OUT
(  141) INTEGER (KIND=JPLIKM)  KXTRON                                 !   OUT
(  142) INTEGER (KIND=JPLIKM)  KXLATI                                 !   OUT
(  143) INTEGER (KIND=JPLIKM)  KXLONG                                 !   OUT
(  144) ! Local integers
(  145) INTEGER (KIND=JPLIKB)  IXNIVV                                 !   OUT
(  146) INTEGER (KIND=JPLIKB)  IXTRON                                 !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 5

(  147) INTEGER (KIND=JPLIKB)  IXLATI                                 !   OUT
(  148) INTEGER (KIND=JPLIKB)  IXLONG                                 !   OUT
(  149) ! Convert arguments
(  150) 
(  151) 
(  152) CALL FALIMU_MT64                               &
(  153) &           (FA, IXNIVV, IXTRON, IXLATI, IXLONG)
(  154) 
(  155) KXNIVV     = INT (    IXNIVV, JPLIKM)
(  156) KXTRON     = INT (    IXTRON, JPLIKM)
(  157) KXLATI     = INT (    IXLATI, JPLIKM)
(  158) KXLONG     = INT (    IXLONG, JPLIKM)
(  159) 
(  160) END SUBROUTINE FALIMU_MT
(  161) 
(  162) !INTF KXNIVV          OUT 
(  163) !INTF KXTRON          OUT 
(  164) !INTF KXLATI          OUT 
(  165) !INTF KXLONG          OUT 













































NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 6

(    1) # 1 "falimu.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FALIMU_MT64                                     &
(    4) &                     (FA,  KXNIVV, KXTRON, KXLATI, KXLONG )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme servant a obtenir les valeurs courantes
(   12) !     des LIMites Utilisateur en termes de Resolutions horizontale
(   13) !     et verticale, valides globalement pour tous les Fichiers et Cadres
(   14) !     ARPEGE manipules par le programme utilisateur.
(   15) !**
(   16) !        Arguments : KXNIVV ==> Nombre maximum de niveaux verticaux;
(   17) !  (tous de Sortie)  KXTRON ==> Troncature maximum;
(   18) !                    KXLATI ==> Nombre maximum de latitudes pole a pole;
(   19) !                    KXLONG ==> Nombre maxi de longitudes par parallele.
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KXNIVV, KXTRON, KXLATI, KXLONG
(   25) !
(   26) INTEGER (KIND=JPLIKB) INUMER, INIMES, IREP
(   27) !
(   28) LOGICAL LLVERG
(   29) !
(   30) !
(   31) !
(   32) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   33) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) LOGICAL                  LLFATA
(   36) # 37 "falimu.F90"
(   37) !**
(   38) !     1.  -  SI PREMIERE UTILISATION, APPEL AU SOUS-PROGRAMME "FARINE".
(   39) !-----------------------------------------------------------------------
(   40) !
(   41) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   42) IF (LHOOK) CALL DR_HOOK('FALIMU_MT',0,ZHOOK_HANDLE)
(   43) CLACTI=''
(   44) IF (FA%FALIMU_LLPREA) THEN
(   45)   CALL FARINE_MT64              &
(   46) &                 (FA, 2_JPLIKB )
(   47)   FA%FALIMU_LLPREA=.FALSE.
(   48) ENDIF
(   49) !
(   50) !             Verrouillage global, si necessaire.
(   51) !
(   52) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(   53) &                              (FA%LFI, FA%VRGLAS,'ON')
(   54) LLVERG=FA%LFAMUL
(   55) !**
(   56) !     2.  -  RECOPIE DES VALEURS EN COMMON DANS LES ARGUMENTS.
(   57) !-----------------------------------------------------------------------






NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 7

(   58) !
(   59) KXNIVV=FA%NXNIVV
(   60) KXTRON=FA%NXTRON
(   61) KXLATI=FA%NXLATI
(   62) KXLONG=FA%NXLONG
(   63) !**
(   64) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   65) !            VIA LE sous-programme "FAIPAR" .
(   66) !-----------------------------------------------------------------------
(   67) !
(   68) !
(   69) !          Deverrouillage global eventuel.
(   70) !
(   71) IF (LLVERG) CALL LFIVER_MT64                         &
(   72) &                           (FA%LFI, FA%VRGLAS,'OFF')
(   73) !
(   74) IF (FA%NIMSGA.EQ.2) THEN
(   75)   IREP=0
(   76)   INIMES=2
(   77)   CLNSPR='FALIMU'
(   78)   INUMER=JPNIIL
(   79)   WRITE (UNIT=CLMESS,FMT='(''KXNIVV='',I4,'', KXTRON='',I4, &
(   80) &         '', KXLATI='',I4,'', KXLONG='',I4)')               &
(   81) &     KXNIVV,KXTRON,KXLATI,KXLONG
(   82)   CALL FAIPAR_MT64                                     &
(   83) &                 (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(   84) &               CLNSPR,CLACTI,.FALSE.)
(   85) ENDIF
(   86) !
(   87) IF (LHOOK) CALL DR_HOOK('FALIMU_MT',1,ZHOOK_HANDLE)
(   88) END SUBROUTINE FALIMU_MT64
(   89) # 92 "falimu.F90"
(   92) ! Oct-2012 P. Marguinaud 64b LFI
(   93) SUBROUTINE FALIMU64                        &
(   94) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(   95) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   96) &                   FA_COM_DEFAULT_INIT,  &
(   97) &                   NEW_FA_DEFAULT
(   98) USE LFI_PRECISION
(   99) IMPLICIT NONE
(  100) ! Arguments
(  101) INTEGER (KIND=JPLIKB)  KXNIVV                                 !   OUT
(  102) INTEGER (KIND=JPLIKB)  KXTRON                                 !   OUT
(  103) INTEGER (KIND=JPLIKB)  KXLATI                                 !   OUT
(  104) INTEGER (KIND=JPLIKB)  KXLONG                                 !   OUT
(  105) # 106 "falimu.F90"
(  106) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  107) # 108 "falimu.F90"
(  108) CALL FALIMU_MT64                               &
(  109) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  110) # 111 "falimu.F90"
(  111) END SUBROUTINE FALIMU64
(  112) # 113 "falimu.F90"
(  113) SUBROUTINE FALIMU                          &
(  114) &           (KXNIVV, KXTRON, KXLATI, KXLONG)
(  115) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  116) &                   FA_COM_DEFAULT_INIT,  &
(  117) &                   NEW_FA_DEFAULT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:59      page 8

(  118) USE LFI_PRECISION
(  119) IMPLICIT NONE
(  120) ! Arguments
(  121) INTEGER (KIND=JPLIKM)  KXNIVV                                 !   OUT
(  122) INTEGER (KIND=JPLIKM)  KXTRON                                 !   OUT
(  123) INTEGER (KIND=JPLIKM)  KXLATI                                 !   OUT
(  124) INTEGER (KIND=JPLIKM)  KXLONG                                 !   OUT
(  125) # 126 "falimu.F90"
(  126) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  127) # 128 "falimu.F90"
(  128) CALL FALIMU_MT                                 &
(  129) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  130) # 131 "falimu.F90"
(  131) END SUBROUTINE FALIMU
(  132) # 133 "falimu.F90"
(  133) SUBROUTINE FALIMU_MT                           &
(  134) &           (FA, KXNIVV, KXTRON, KXLATI, KXLONG)
(  135) USE FA_MOD, ONLY : FA_COM
(  136) USE LFI_PRECISION
(  137) IMPLICIT NONE
(  138) ! Arguments
(  139) TYPE (FA_COM)          FA                                     ! INOUT
(  140) INTEGER (KIND=JPLIKM)  KXNIVV                                 !   OUT
(  141) INTEGER (KIND=JPLIKM)  KXTRON                                 !   OUT
(  142) INTEGER (KIND=JPLIKM)  KXLATI                                 !   OUT
(  143) INTEGER (KIND=JPLIKM)  KXLONG                                 !   OUT
(  144) ! Local integers
(  145) INTEGER (KIND=JPLIKB)  IXNIVV                                 !   OUT
(  146) INTEGER (KIND=JPLIKB)  IXTRON                                 !   OUT
(  147) INTEGER (KIND=JPLIKB)  IXLATI                                 !   OUT
(  148) INTEGER (KIND=JPLIKB)  IXLONG                                 !   OUT
(  149) ! Convert arguments
(  150) # 152 "falimu.F90"
(  152) CALL FALIMU_MT64                               &
(  153) &           (FA, IXNIVV, IXTRON, IXLATI, IXLONG)
(  154) # 155 "falimu.F90"
(  155) KXNIVV     = INT (    IXNIVV, JPLIKM)
(  156) KXTRON     = INT (    IXTRON, JPLIKM)
(  157) KXLATI     = INT (    IXLATI, JPLIKM)
(  158) KXLONG     = INT (    IXLONG, JPLIKM)
(  159) # 160 "falimu.F90"
(  160) END SUBROUTINE FALIMU_MT
(  161) # 162 "falimu.F90"
(  162) !INTF KXNIVV          OUT 
(  163) !INTF KXTRON          OUT 
(  164) !INTF KXLATI          OUT 
(  165) !INTF KXLONG          OUT 
