


NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fatale.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FATALE_MT64                           &
(    4) &                     (FA,  KREP, KNUMER, LDERFA )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme permet d'activer ou de desactiver l'option
(   12) !     rendant fatale toute erreur detectee sur un fichier particulier,
(   13) !     ouvert pour le Logiciel de Fichiers ARPEGE, de meme pour l'option
(   14) !     correspondante du logiciel LFI.
(   15) !        Cependant, tant que le niveau global d'erreur fatale *FA%NRFAGA*
(   16) !     vaut 0 ou 2, l'option propre au fichier est inoperante.
(   17) !     *FA%NRFAGA* vaut par defaut 1, et est reglable via le s/p "FANERG".
(   18) !**
(   19) !     Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   20) !                 KNUMER (Entree) ==> Numero d'Unite Logique concernee;
(   21) !                 LDERFA (Entree) ==> Option d'Erreur Fatale (Vrai=oui).
(   22) !
(   23) !
(   24) !
(   25) TYPE(FA_COM) :: FA
(   26) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   27) !
(   28) INTEGER (KIND=JPLIKB) IRANG, IREP, INIMES
(   29) !
(   30) LOGICAL LDERFA, LLRLFI






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 3

(   31) !
(   32) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   33) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) LOGICAL                  LLFATA
(   36) 
(   37) !
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) IF (LHOOK) CALL DR_HOOK('FATALE_MT',0,ZHOOK_HANDLE)
(   40) CLACTI=''
(   41) CALL FANUMU_MT64                 &
(   42) &               (FA, KNUMER,IRANG)
(   43) !
(   44) IF (IRANG.NE.0) THEN
(   45)   FA%FICHIER(IRANG)%LERRFA=LDERFA
(   46)   CALL LFIERF_MT64                            &
(   47) &                 (FA%LFI, IREP,KNUMER,LDERFA)
(   48)   LLRLFI=IREP.NE.0
(   49) ELSE
(   50)   IREP=-51
(   51)   LLRLFI=.FALSE.
(   52) ENDIF
(   53) !
(   54) LLFATA=LLMOER (IREP,IRANG)
(   55) KREP=IREP
(   56) !
(   57) IF (LLFATA.OR.IXNVMS (IRANG).EQ.2) THEN
(   58)   INIMES=2
(   59) ELSE
(   60)   IF (LHOOK) CALL DR_HOOK('FATALE_MT',1,ZHOOK_HANDLE)
(   61)   RETURN
(   62) ENDIF
(   63) !
(   64) CLNSPR='FATALE'
(   65) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(   66) &       '', LDERFA= '',L1)') KREP,KNUMER,LDERFA
(   67) CALL FAIPAR_MT64                                     &
(   68) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(   69) &             CLNSPR,CLACTI,LLRLFI)
(   70) !
(   71) IF (LHOOK) CALL DR_HOOK('FATALE_MT',1,ZHOOK_HANDLE)
(   72) 
(   73) CONTAINS
(   74) 
(   75) #include "facom2.llmoer.h"
(   76) #include "facom2.ixnvms.h"
(   77) 
(   78) END SUBROUTINE FATALE_MT64
(   79) 
(   80) 
(   81) 
(   82) ! Oct-2012 P. Marguinaud 64b LFI
(   83) SUBROUTINE FATALE64              &
(   84) &           (KREP, KNUMER, LDERFA)
(   85) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   86) &                   FA_COM_DEFAULT_INIT,  &
(   87) &                   NEW_FA_DEFAULT
(   88) USE LFI_PRECISION






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 4

(   89) IMPLICIT NONE
(   90) ! Arguments
(   91) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   92) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   93) LOGICAL                LDERFA                                 ! IN   
(   94) 
(   95) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(   96) 
(   97) CALL FATALE_MT64                     &
(   98) &           (FA, KREP, KNUMER, LDERFA)
(   99) 
(  100) END SUBROUTINE FATALE64
(  101) 
(  102) SUBROUTINE FATALE                &
(  103) &           (KREP, KNUMER, LDERFA)
(  104) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  105) &                   FA_COM_DEFAULT_INIT,  &
(  106) &                   NEW_FA_DEFAULT
(  107) USE LFI_PRECISION
(  108) IMPLICIT NONE
(  109) ! Arguments
(  110) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  111) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  112) LOGICAL                LDERFA                                 ! IN   
(  113) 
(  114) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  115) 
(  116) CALL FATALE_MT                       &
(  117) &           (FA, KREP, KNUMER, LDERFA)
(  118) 
(  119) END SUBROUTINE FATALE
(  120) 
(  121) SUBROUTINE FATALE_MT                 &
(  122) &           (FA, KREP, KNUMER, LDERFA)
(  123) USE FA_MOD, ONLY : FA_COM
(  124) USE LFI_PRECISION
(  125) IMPLICIT NONE
(  126) ! Arguments
(  127) TYPE (FA_COM)          FA                                     ! INOUT
(  128) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  129) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  130) LOGICAL                LDERFA                                 ! IN   
(  131) ! Local integers
(  132) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  133) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  134) ! Convert arguments
(  135) 
(  136) INUMER     = INT (    KNUMER, JPLIKB)
(  137) 
(  138) CALL FATALE_MT64                     &
(  139) &           (FA, IREP, INUMER, LDERFA)
(  140) 
(  141) KREP       = INT (      IREP, JPLIKM)
(  142) 
(  143) END SUBROUTINE FATALE_MT
(  144) 
(  145) !INTF KREP            OUT 
(  146) !INTF KNUMER        IN    






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 5

(  147) !INTF LDERFA        IN    































































NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 6

(    1) # 1 "fatale.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FATALE_MT64                           &
(    4) &                     (FA,  KREP, KNUMER, LDERFA )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme permet d'activer ou de desactiver l'option
(   12) !     rendant fatale toute erreur detectee sur un fichier particulier,
(   13) !     ouvert pour le Logiciel de Fichiers ARPEGE, de meme pour l'option
(   14) !     correspondante du logiciel LFI.
(   15) !        Cependant, tant que le niveau global d'erreur fatale *FA%NRFAGA*
(   16) !     vaut 0 ou 2, l'option propre au fichier est inoperante.
(   17) !     *FA%NRFAGA* vaut par defaut 1, et est reglable via le s/p "FANERG".
(   18) !**
(   19) !     Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   20) !                 KNUMER (Entree) ==> Numero d'Unite Logique concernee;
(   21) !                 LDERFA (Entree) ==> Option d'Erreur Fatale (Vrai=oui).
(   22) !
(   23) !
(   24) !
(   25) TYPE(FA_COM) :: FA
(   26) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   27) !
(   28) INTEGER (KIND=JPLIKB) IRANG, IREP, INIMES
(   29) !
(   30) LOGICAL LDERFA, LLRLFI
(   31) !
(   32) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   33) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   34) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   35) LOGICAL                  LLFATA
(   36) # 37 "fatale.F90"
(   37) !
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) IF (LHOOK) CALL DR_HOOK('FATALE_MT',0,ZHOOK_HANDLE)
(   40) CLACTI=''
(   41) CALL FANUMU_MT64                 &
(   42) &               (FA, KNUMER,IRANG)
(   43) !
(   44) IF (IRANG.NE.0) THEN
(   45)   FA%FICHIER(IRANG)%LERRFA=LDERFA
(   46)   CALL LFIERF_MT64                            &
(   47) &                 (FA%LFI, IREP,KNUMER,LDERFA)
(   48)   LLRLFI=IREP.NE.0
(   49) ELSE
(   50)   IREP=-51
(   51)   LLRLFI=.FALSE.
(   52) ENDIF
(   53) !
(   54) LLFATA=LLMOER (IREP,IRANG)
(   55) KREP=IREP
(   56) !
(   57) IF (LLFATA.OR.IXNVMS (IRANG).EQ.2) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 7

(   58)   INIMES=2
(   59) ELSE
(   60)   IF (LHOOK) CALL DR_HOOK('FATALE_MT',1,ZHOOK_HANDLE)
(   61)   RETURN
(   62) ENDIF
(   63) !
(   64) CLNSPR='FATALE'
(   65) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(   66) &       '', LDERFA= '',L1)') KREP,KNUMER,LDERFA
(   67) CALL FAIPAR_MT64                                     &
(   68) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(   69) &             CLNSPR,CLACTI,LLRLFI)
(   70) !
(   71) IF (LHOOK) CALL DR_HOOK('FATALE_MT',1,ZHOOK_HANDLE)
(   72) # 73 "fatale.F90"
(   73) CONTAINS
(   74) # 75 "fatale.F90"
(   75) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 76 "fatale.F90"
(   76) # 76 "fatale.F90"
(   76) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 77 "fatale.F90"
(   77) # 78 "fatale.F90"
(   78) END SUBROUTINE FATALE_MT64
(   79) # 82 "fatale.F90"
(   82) ! Oct-2012 P. Marguinaud 64b LFI
(   83) SUBROUTINE FATALE64              &
(   84) &           (KREP, KNUMER, LDERFA)
(   85) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   86) &                   FA_COM_DEFAULT_INIT,  &
(   87) &                   NEW_FA_DEFAULT
(   88) USE LFI_PRECISION
(   89) IMPLICIT NONE
(   90) ! Arguments






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 8

(   91) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   92) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   93) LOGICAL                LDERFA                                 ! IN   
(   94) # 95 "fatale.F90"
(   95) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(   96) # 97 "fatale.F90"
(   97) CALL FATALE_MT64                     &
(   98) &           (FA, KREP, KNUMER, LDERFA)
(   99) # 100 "fatale.F90"
(  100) END SUBROUTINE FATALE64
(  101) # 102 "fatale.F90"
(  102) SUBROUTINE FATALE                &
(  103) &           (KREP, KNUMER, LDERFA)
(  104) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  105) &                   FA_COM_DEFAULT_INIT,  &
(  106) &                   NEW_FA_DEFAULT
(  107) USE LFI_PRECISION
(  108) IMPLICIT NONE
(  109) ! Arguments
(  110) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  111) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  112) LOGICAL                LDERFA                                 ! IN   
(  113) # 114 "fatale.F90"
(  114) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  115) # 116 "fatale.F90"
(  116) CALL FATALE_MT                       &
(  117) &           (FA, KREP, KNUMER, LDERFA)
(  118) # 119 "fatale.F90"
(  119) END SUBROUTINE FATALE
(  120) # 121 "fatale.F90"
(  121) SUBROUTINE FATALE_MT                 &
(  122) &           (FA, KREP, KNUMER, LDERFA)
(  123) USE FA_MOD, ONLY : FA_COM
(  124) USE LFI_PRECISION
(  125) IMPLICIT NONE
(  126) ! Arguments
(  127) TYPE (FA_COM)          FA                                     ! INOUT
(  128) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  129) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  130) LOGICAL                LDERFA                                 ! IN   
(  131) ! Local integers
(  132) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  133) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  134) ! Convert arguments
(  135) # 136 "fatale.F90"
(  136) INUMER     = INT (    KNUMER, JPLIKB)
(  137) # 138 "fatale.F90"
(  138) CALL FATALE_MT64                     &
(  139) &           (FA, IREP, INUMER, LDERFA)
(  140) # 141 "fatale.F90"
(  141) KREP       = INT (      IREP, JPLIKM)
(  142) # 143 "fatale.F90"
(  143) END SUBROUTINE FATALE_MT
(  144) # 145 "fatale.F90"
(  145) !INTF KREP            OUT 
(  146) !INTF KNUMER        IN    
(  147) !INTF LDERFA        IN    
