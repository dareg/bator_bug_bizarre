


NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: farcis.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FARCIS_MT64                                          &
(    4) &                     (FA,  KREP, KRANG, PCHAMP, KSTRON, KPUILA )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme INTERNE du logiciel de Fichiers ARPEGE:
(   12) !     elimination de la "puissance de laplacien" d'un champ en coeffi-
(   13) !     cients spectraux issu d'un codage GRIB, de maniere a restituer
(   14) !     le champ "d'origine" (a la precision du codage pres) .
(   15) !     ( Reconstitution des CoeffIcients Spectraux )
(   16) !**
(   17) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   18) !                KRANG  (Entree) ==> Rang de l'unite logique;
(   19) !    ( Tableau ) PCHAMP (Entree ET Sortie) ==> Champ en coef. spectraux;
(   20) !                KSTRON (Entree) ==> Sous-troncature non compactee;
(   21) !                KPUILA (Entree) ==> Puissance de laplacien utilisee.
(   22) !
(   23) !      ( Les 2 derniers parametres sont ceux qui ont ete effectivement
(   24) !        utilises lors de l'ecriture du champ )
(   25) !*
(   26) !       En mode multi-taches, il doit y avoir verrouillage du fichier
(   27) !     concerne avant l'appel au sous-programme.
(   28) !
(   29) !
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 3

(   31) TYPE(FA_COM) :: FA
(   32) INTEGER (KIND=JPLIKB) KREP, KRANG, KSTRON, KPUILA
(   33) !
(   34) REAL (KIND=JPDBLR) PCHAMP (*)
(   35) !
(   36) INTEGER (KIND=JPLIKB) IRANGC, ITRONC, INUMER, IDIMNC
(   37) INTEGER (KIND=JPLIKB) ILCHAM, IMTRONC, IPUISX, J
(   38) INTEGER (KIND=JPLIKB) INDICE, JN, INDLAP, IMLIM
(   39) INTEGER (KIND=JPLIKB) IOFF, IM, JIND, IPUIS2
(   40) INTEGER (KIND=JPLIKB) IRAPOR, IPUISR, INIMES, IDEB, IFIN
(   41) !
(   42) LOGICAL LLMLAM
(   43) !
(   44) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   45) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   46) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   47) LOGICAL                  LLFATA
(   48) 
(   49) !**
(   50) !     1.  -  CONTROLES DES PARAMETRES D'APPEL, INITIALISATIONS.
(   51) !-----------------------------------------------------------------------
(   52) !
(   53) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   54) IF (LHOOK) CALL DR_HOOK('FARCIS_MT',0,ZHOOK_HANDLE)
(   55) CLACTI=''
(   56) IF (KRANG.LE.0.OR.KRANG.GT.FA%JPNXFA) THEN
(   57)   KREP=-66
(   58)   GOTO 1001
(   59) ENDIF
(   60) !
(   61) IF (FA%LIXLAP) THEN
(   62)   CALL FAIXLA_MT64           &
(   63) &                 (FA)
(   64)   FA%LIXLAP=.FALSE.
(   65) ENDIF
(   66) !
(   67) IRANGC=FA%FICHIER(KRANG)%NUCADR
(   68) ITRONC=FA%CADRE(IRANGC)%MTRONC
(   69) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   70) !
(   71) IF (LLMLAM) IMTRONC=FA%CADRE(IRANGC)%NOZPAR(2)
(   72) IF (ITRONC.LE.KSTRON) THEN
(   73)   KREP=-88
(   74)   GOTO 1001
(   75) ELSEIF (LLMLAM.AND.IMTRONC.LE.KSTRON) THEN
(   76)   KREP=-88
(   77)   GOTO 1001
(   78) ELSEIF (LLMLAM.AND.(IMTRONC.GT.3*ITRONC &
(   79) &    .OR.ITRONC.GT.3*IMTRONC)) THEN
(   80) ! Il s'agit d'un garde-fou, modifiable (ne pas oublier FAPULA et FACSIM)
(   81)   KREP=-114
(   82)   GOTO 1001
(   83) ELSE        
(   84)   KREP=0
(   85) ENDIF
(   86) !
(   87) IDIMNC=(1+KSTRON)**2
(   88) IF (LLMLAM) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 4

(   89)   ILCHAM=FA%CADRE(IRANGC)%NSFLAM
(   90) ELSE  
(   91)   ILCHAM=(1+ITRONC)**2
(   92) ENDIF  
(   93) !**
(   94) !     2.  -  RECONSTITUTION DU CHAMP "D'ORIGINE", DEBARRASSE DE LA
(   95) !            PUISSANCE DE LAPLACIEN QUI N'AFFECTE QUE LA PARTIE HORS
(   96) !            SOUS-TRONCATURE NON COMPACTEE.
(   97) !-----------------------------------------------------------------------
(   98) !
(   99) !        On essaie d'eviter l'exponentiation, en preferant multiplier
(  100) !     que diviser.
(  101) !
(  102) IF (KPUILA.NE.0) THEN
(  103) !
(  104)   IPUISX=ABS (KPUILA)
(  105) !
(  106)   IF (KPUILA.GT.0) THEN
(  107)     INDICE=1
(  108)   ELSE
(  109)     INDICE=0
(  110)   ENDIF
(  111) !
(  112)   IF (IPUISX.LE.FA%JPUILA) THEN
(  113) !
(  114)     IF (LLMLAM) THEN
(  115) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  116) !$OMP&  IF(FA%LOPENMP)
(  117)       DO JN=1,ITRONC
(  118)       IMLIM=KSTRON-JN
(  119)       IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  120) &             FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  121)       IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  122)       DO JIND=IDEB,IFIN
(  123)       IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  124)       IM=IOFF/4
(  125)       INDLAP=((JN-1)*FA%JPXTRO)+IM
(  126)       PCHAMP(JIND)=PCHAMP(JIND)*FA%XLAP2DA(INDLAP,IPUISX,INDICE)
(  127)       ENDDO
(  128)       ENDDO
(  129) !$OMP END PARALLEL DO
(  130)     ELSE
(  131)       DO J=IDIMNC+1,ILCHAM
(  132)       PCHAMP(J)=PCHAMP(J)*FA%XLAP2D(J,IPUISX,INDICE)
(  133)       ENDDO
(  134)     ENDIF
(  135)   ELSEIF (IPUISX.LE.2*FA%JPUILA) THEN
(  136)     IPUIS2=IPUISX/2
(  137) !
(  138)     IF (IPUISX.EQ.2*IPUIS2) THEN
(  139) !
(  140)       IF (LLMLAM) THEN
(  141) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  142) !$OMP&  IF(FA%LOPENMP)
(  143)         DO JN=1,ITRONC
(  144)         IMLIM=KSTRON-JN
(  145)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  146) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 5

(  147)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  148)         DO JIND=IDEB,IFIN
(  149)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  150)         IM=IOFF/4
(  151)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  152)         PCHAMP(JIND)=PCHAMP(JIND)                  &
(  153) &          *( FA%XLAP2DA(INDLAP,IPUIS2,INDICE)**2 )
(  154)         ENDDO
(  155)         ENDDO
(  156) !$OMP END PARALLEL DO
(  157)       ELSE
(  158)         DO J=IDIMNC+1,ILCHAM
(  159)         PCHAMP(J)=PCHAMP(J)*( FA%XLAP2D(J,IPUIS2,INDICE)**2 )
(  160)         ENDDO
(  161)       ENDIF
(  162) !
(  163)     ELSE
(  164) !
(  165)       IF (LLMLAM) THEN
(  166) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  167) !$OMP&  IF(FA%LOPENMP)
(  168)         DO JN=1,ITRONC
(  169)         IMLIM=KSTRON-JN
(  170)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  171) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  172)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  173)         DO JIND=IDEB,IFIN
(  174)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  175)         IM=IOFF/4
(  176)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  177)         PCHAMP(JIND)=PCHAMP(JIND)                         &
(  178) &          *( FA%XLAP2DA(INDLAP,FA%JPUILA,INDICE)          &
(  179) &            *FA%XLAP2DA(INDLAP,IPUISX-FA%JPUILA,INDICE) )
(  180)         ENDDO
(  181)         ENDDO
(  182) !$OMP END PARALLEL DO
(  183)       ELSE
(  184)         DO J=IDIMNC+1,ILCHAM
(  185)         PCHAMP(J)=PCHAMP(J)*( FA%XLAP2D(J,FA%JPUILA,INDICE)       &
(  186) &                          *FA%XLAP2D(J,IPUISX-FA%JPUILA,INDICE) )
(  187)         ENDDO
(  188)       ENDIF
(  189) !
(  190)     ENDIF
(  191) !
(  192)   ELSE
(  193)     IRAPOR=1+(IPUISX-1)/FA%JPUILA
(  194)     IPUISR=IPUISX/IRAPOR
(  195) !
(  196)     IF (IPUISX.EQ.IRAPOR*IPUISR) THEN
(  197) !
(  198)       IF (LLMLAM) THEN
(  199) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  200) !$OMP&  IF(FA%LOPENMP)
(  201)         DO JN=1,ITRONC
(  202)         IMLIM=KSTRON-JN
(  203)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  204) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 6

(  205)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  206)         DO JIND=IDEB,IFIN
(  207)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  208)         IM=IOFF/4
(  209)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  210)         PCHAMP(JIND)=PCHAMP(JIND)                        &
(  211) &           *( FA%XLAP2DA(INDLAP,IPUISR,INDICE)**IRAPOR )
(  212)         ENDDO
(  213)         ENDDO
(  214) !$OMP END PARALLEL DO
(  215)       ELSE
(  216)         DO J=IDIMNC+1,ILCHAM
(  217)         PCHAMP(J)=PCHAMP(J)*( FA%XLAP2D(J,IPUISR,INDICE)**IRAPOR )
(  218)         ENDDO
(  219)       ENDIF
(  220) !
(  221)     ELSE
(  222) !
(  223)       IF (LLMLAM) THEN
(  224) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  225) !$OMP&  IF(FA%LOPENMP)
(  226)         DO JN=1,ITRONC
(  227)         IMLIM=KSTRON-JN
(  228)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  229) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  230)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  231)         DO JIND=IDEB,IFIN
(  232)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  233)         IM=IOFF/4
(  234)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  235)         PCHAMP(JIND)=PCHAMP(JIND)                                 &
(  236) &          *( FA%XLAP2DA(INDLAP,FA%JPUILA,INDICE)**(IRAPOR-1)      &
(  237) &         *FA%XLAP2DA(INDLAP,IPUISX-FA%JPUILA*(IRAPOR-1),INDICE) )
(  238)         ENDDO
(  239)         ENDDO
(  240) !$OMP END PARALLEL DO
(  241)       ELSE
(  242)         DO J=IDIMNC+1,ILCHAM
(  243)         PCHAMP(J)=PCHAMP(J)*                                       &
(  244) &                 (FA%XLAP2D(J,FA%JPUILA,INDICE)**(IRAPOR-1)        &
(  245) &                *FA%XLAP2D(J,IPUISX-FA%JPUILA*(IRAPOR-1),INDICE) )
(  246)         ENDDO
(  247)       ENDIF
(  248) !
(  249)     ENDIF
(  250) !
(  251)   ENDIF
(  252) !
(  253) ENDIF
(  254) !**
(  255) !    10.  -  PHASE TERMINALE : MESSAGERIE EVENTUELLE,
(  256) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  257) !-----------------------------------------------------------------------
(  258) !
(  259) 1001 CONTINUE
(  260) LLFATA=LLMOER (KREP,KRANG)
(  261) !
(  262) IF (FA%LFAMOP.OR.LLFATA) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 7

(  263)   INIMES=2
(  264)   CLNSPR='FARCIS'
(  265)   INUMER=JPNIIL
(  266)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KRANG='',I4,        &
(  267) &    '', PCHAMP(1)='',G12.5,'', KSTRON='',I4,'', KPUILA='',I3)') &
(  268) &     KREP,KRANG,PCHAMP(1),KSTRON,KPUILA
(  269)   CALL FAIPAR_MT64                                      &
(  270) &                 (FA, INUMER,INIMES,KREP,.FALSE.,CLMESS, &
(  271) &               CLNSPR,CLACTI,.FALSE.)
(  272) ENDIF
(  273) !
(  274) IF (LHOOK) CALL DR_HOOK('FARCIS_MT',1,ZHOOK_HANDLE)
(  275) 
(  276) CONTAINS
(  277) 
(  278) #include "facom2.llmoer.h"
(  279) 
(  280) END SUBROUTINE FARCIS_MT64
(  281) 
(  282) 
(  283) 
(  284) ! Oct-2012 P. Marguinaud 64b LFI
(  285) SUBROUTINE FARCIS64                             &
(  286) &           (KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  287) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  288) &                   FA_COM_DEFAULT_INIT,  &
(  289) &                   NEW_FA_DEFAULT
(  290) USE LFI_PRECISION
(  291) IMPLICIT NONE
(  292) ! Arguments
(  293) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  294) INTEGER (KIND=JPLIKB)  KRANG                                  ! IN   
(  295) REAL (KIND=JPDBLR)     PCHAMP     (*)                 ! INOUT
(  296) INTEGER (KIND=JPLIKB)  KSTRON                                 ! IN   
(  297) INTEGER (KIND=JPLIKB)  KPUILA                                 ! IN   
(  298) 
(  299) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  300) 
(  301) CALL FARCIS_MT64                                    &
(  302) &           (FA, KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  303) 
(  304) END SUBROUTINE FARCIS64
(  305) 
(  306) SUBROUTINE FARCIS                               &
(  307) &           (KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  308) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  309) &                   FA_COM_DEFAULT_INIT,  &
(  310) &                   NEW_FA_DEFAULT
(  311) USE LFI_PRECISION
(  312) IMPLICIT NONE
(  313) ! Arguments
(  314) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  315) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  316) REAL (KIND=JPDBLR)     PCHAMP     (*)                 ! INOUT
(  317) INTEGER (KIND=JPLIKM)  KSTRON                                 ! IN   
(  318) INTEGER (KIND=JPLIKM)  KPUILA                                 ! IN   
(  319) 
(  320) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 8

(  321) 
(  322) CALL FARCIS_MT                                      &
(  323) &           (FA, KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  324) 
(  325) END SUBROUTINE FARCIS
(  326) 
(  327) SUBROUTINE FARCIS_MT                                &
(  328) &           (FA, KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  329) USE FA_MOD, ONLY : FA_COM
(  330) USE LFI_PRECISION
(  331) IMPLICIT NONE
(  332) ! Arguments
(  333) TYPE (FA_COM)          FA                                     ! INOUT
(  334) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  335) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  336) REAL (KIND=JPDBLR)     PCHAMP     (*)                 ! INOUT
(  337) INTEGER (KIND=JPLIKM)  KSTRON                                 ! IN   
(  338) INTEGER (KIND=JPLIKM)  KPUILA                                 ! IN   
(  339) ! Local integers
(  340) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  341) INTEGER (KIND=JPLIKB)  IRANG                                  ! IN   
(  342) INTEGER (KIND=JPLIKB)  ISTRON                                 ! IN   
(  343) INTEGER (KIND=JPLIKB)  IPUILA                                 ! IN   
(  344) ! Convert arguments
(  345) 
(  346) IRANG      = INT (     KRANG, JPLIKB)
(  347) ISTRON     = INT (    KSTRON, JPLIKB)
(  348) IPUILA     = INT (    KPUILA, JPLIKB)
(  349) 
(  350) CALL FARCIS_MT64                                    &
(  351) &           (FA, IREP, IRANG, PCHAMP, ISTRON, IPUILA)
(  352) 
(  353) KREP       = INT (      IREP, JPLIKM)
(  354) 
(  355) END SUBROUTINE FARCIS_MT
(  356) 
(  357) !INTF KREP            OUT                               
(  358) !INTF KRANG         IN                                  
(  359) !INTF PCHAMP        INOUT DIMS=FA%JPXCSP                
(  360) !INTF KSTRON        IN                                  
(  361) !INTF KPUILA        IN                                  























NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 9

(    1) # 1 "farcis.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FARCIS_MT64                                          &
(    4) &                     (FA,  KREP, KRANG, PCHAMP, KSTRON, KPUILA )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme INTERNE du logiciel de Fichiers ARPEGE:
(   12) !     elimination de la "puissance de laplacien" d'un champ en coeffi-
(   13) !     cients spectraux issu d'un codage GRIB, de maniere a restituer
(   14) !     le champ "d'origine" (a la precision du codage pres) .
(   15) !     ( Reconstitution des CoeffIcients Spectraux )
(   16) !**
(   17) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   18) !                KRANG  (Entree) ==> Rang de l'unite logique;
(   19) !    ( Tableau ) PCHAMP (Entree ET Sortie) ==> Champ en coef. spectraux;
(   20) !                KSTRON (Entree) ==> Sous-troncature non compactee;
(   21) !                KPUILA (Entree) ==> Puissance de laplacien utilisee.
(   22) !
(   23) !      ( Les 2 derniers parametres sont ceux qui ont ete effectivement
(   24) !        utilises lors de l'ecriture du champ )
(   25) !*
(   26) !       En mode multi-taches, il doit y avoir verrouillage du fichier
(   27) !     concerne avant l'appel au sous-programme.
(   28) !
(   29) !
(   30) !
(   31) TYPE(FA_COM) :: FA
(   32) INTEGER (KIND=JPLIKB) KREP, KRANG, KSTRON, KPUILA
(   33) !
(   34) REAL (KIND=JPDBLR) PCHAMP (*)
(   35) !
(   36) INTEGER (KIND=JPLIKB) IRANGC, ITRONC, INUMER, IDIMNC
(   37) INTEGER (KIND=JPLIKB) ILCHAM, IMTRONC, IPUISX, J
(   38) INTEGER (KIND=JPLIKB) INDICE, JN, INDLAP, IMLIM
(   39) INTEGER (KIND=JPLIKB) IOFF, IM, JIND, IPUIS2
(   40) INTEGER (KIND=JPLIKB) IRAPOR, IPUISR, INIMES, IDEB, IFIN
(   41) !
(   42) LOGICAL LLMLAM
(   43) !
(   44) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   45) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   46) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   47) LOGICAL                  LLFATA
(   48) # 49 "farcis.F90"
(   49) !**
(   50) !     1.  -  CONTROLES DES PARAMETRES D'APPEL, INITIALISATIONS.
(   51) !-----------------------------------------------------------------------
(   52) !
(   53) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   54) IF (LHOOK) CALL DR_HOOK('FARCIS_MT',0,ZHOOK_HANDLE)
(   55) CLACTI=''
(   56) IF (KRANG.LE.0.OR.KRANG.GT.FA%JPNXFA) THEN
(   57)   KREP=-66






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 10

(   58)   GOTO 1001
(   59) ENDIF
(   60) !
(   61) IF (FA%LIXLAP) THEN
(   62)   CALL FAIXLA_MT64           &
(   63) &                 (FA)
(   64)   FA%LIXLAP=.FALSE.
(   65) ENDIF
(   66) !
(   67) IRANGC=FA%FICHIER(KRANG)%NUCADR
(   68) ITRONC=FA%CADRE(IRANGC)%MTRONC
(   69) LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(   70) !
(   71) IF (LLMLAM) IMTRONC=FA%CADRE(IRANGC)%NOZPAR(2)
(   72) IF (ITRONC.LE.KSTRON) THEN
(   73)   KREP=-88
(   74)   GOTO 1001
(   75) ELSEIF (LLMLAM.AND.IMTRONC.LE.KSTRON) THEN
(   76)   KREP=-88
(   77)   GOTO 1001
(   78) ELSEIF (LLMLAM.AND.(IMTRONC.GT.3*ITRONC &
(   79) &    .OR.ITRONC.GT.3*IMTRONC)) THEN
(   80) ! Il s'agit d'un garde-fou, modifiable (ne pas oublier FAPULA et FACSIM)
(   81)   KREP=-114
(   82)   GOTO 1001
(   83) ELSE        
(   84)   KREP=0
(   85) ENDIF
(   86) !
(   87) IDIMNC=(1+KSTRON)**2
(   88) IF (LLMLAM) THEN
(   89)   ILCHAM=FA%CADRE(IRANGC)%NSFLAM
(   90) ELSE  
(   91)   ILCHAM=(1+ITRONC)**2
(   92) ENDIF  
(   93) !**
(   94) !     2.  -  RECONSTITUTION DU CHAMP "D'ORIGINE", DEBARRASSE DE LA
(   95) !            PUISSANCE DE LAPLACIEN QUI N'AFFECTE QUE LA PARTIE HORS
(   96) !            SOUS-TRONCATURE NON COMPACTEE.
(   97) !-----------------------------------------------------------------------
(   98) !
(   99) !        On essaie d'eviter l'exponentiation, en preferant multiplier
(  100) !     que diviser.
(  101) !
(  102) IF (KPUILA.NE.0) THEN
(  103) !
(  104)   IPUISX=ABS (KPUILA)
(  105) !
(  106)   IF (KPUILA.GT.0) THEN
(  107)     INDICE=1
(  108)   ELSE
(  109)     INDICE=0
(  110)   ENDIF
(  111) !
(  112)   IF (IPUISX.LE.FA%JPUILA) THEN
(  113) !
(  114)     IF (LLMLAM) THEN
(  115) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 11

(  116) !$OMP&  IF(FA%LOPENMP)
(  117)       DO JN=1,ITRONC
(  118)       IMLIM=KSTRON-JN
(  119)       IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  120) &             FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  121)       IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  122)       DO JIND=IDEB,IFIN
(  123)       IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  124)       IM=IOFF/4
(  125)       INDLAP=((JN-1)*FA%JPXTRO)+IM
(  126)       PCHAMP(JIND)=PCHAMP(JIND)*FA%XLAP2DA(INDLAP,IPUISX,INDICE)
(  127)       ENDDO
(  128)       ENDDO
(  129) !$OMP END PARALLEL DO
(  130)     ELSE
(  131)       DO J=IDIMNC+1,ILCHAM
(  132)       PCHAMP(J)=PCHAMP(J)*FA%XLAP2D(J,IPUISX,INDICE)
(  133)       ENDDO
(  134)     ENDIF
(  135)   ELSEIF (IPUISX.LE.2*FA%JPUILA) THEN
(  136)     IPUIS2=IPUISX/2
(  137) !
(  138)     IF (IPUISX.EQ.2*IPUIS2) THEN
(  139) !
(  140)       IF (LLMLAM) THEN
(  141) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  142) !$OMP&  IF(FA%LOPENMP)
(  143)         DO JN=1,ITRONC
(  144)         IMLIM=KSTRON-JN
(  145)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  146) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  147)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  148)         DO JIND=IDEB,IFIN
(  149)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  150)         IM=IOFF/4
(  151)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  152)         PCHAMP(JIND)=PCHAMP(JIND)                  &
(  153) &          *( FA%XLAP2DA(INDLAP,IPUIS2,INDICE)**2 )
(  154)         ENDDO
(  155)         ENDDO
(  156) !$OMP END PARALLEL DO
(  157)       ELSE
(  158)         DO J=IDIMNC+1,ILCHAM
(  159)         PCHAMP(J)=PCHAMP(J)*( FA%XLAP2D(J,IPUIS2,INDICE)**2 )
(  160)         ENDDO
(  161)       ENDIF
(  162) !
(  163)     ELSE
(  164) !
(  165)       IF (LLMLAM) THEN
(  166) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  167) !$OMP&  IF(FA%LOPENMP)
(  168)         DO JN=1,ITRONC
(  169)         IMLIM=KSTRON-JN
(  170)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  171) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  172)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  173)         DO JIND=IDEB,IFIN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 12

(  174)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  175)         IM=IOFF/4
(  176)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  177)         PCHAMP(JIND)=PCHAMP(JIND)                         &
(  178) &          *( FA%XLAP2DA(INDLAP,FA%JPUILA,INDICE)          &
(  179) &            *FA%XLAP2DA(INDLAP,IPUISX-FA%JPUILA,INDICE) )
(  180)         ENDDO
(  181)         ENDDO
(  182) !$OMP END PARALLEL DO
(  183)       ELSE
(  184)         DO J=IDIMNC+1,ILCHAM
(  185)         PCHAMP(J)=PCHAMP(J)*( FA%XLAP2D(J,FA%JPUILA,INDICE)       &
(  186) &                          *FA%XLAP2D(J,IPUISX-FA%JPUILA,INDICE) )
(  187)         ENDDO
(  188)       ENDIF
(  189) !
(  190)     ENDIF
(  191) !
(  192)   ELSE
(  193)     IRAPOR=1+(IPUISX-1)/FA%JPUILA
(  194)     IPUISR=IPUISX/IRAPOR
(  195) !
(  196)     IF (IPUISX.EQ.IRAPOR*IPUISR) THEN
(  197) !
(  198)       IF (LLMLAM) THEN
(  199) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  200) !$OMP&  IF(FA%LOPENMP)
(  201)         DO JN=1,ITRONC
(  202)         IMLIM=KSTRON-JN
(  203)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  204) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  205)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  206)         DO JIND=IDEB,IFIN
(  207)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  208)         IM=IOFF/4
(  209)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  210)         PCHAMP(JIND)=PCHAMP(JIND)                        &
(  211) &           *( FA%XLAP2DA(INDLAP,IPUISR,INDICE)**IRAPOR )
(  212)         ENDDO
(  213)         ENDDO
(  214) !$OMP END PARALLEL DO
(  215)       ELSE
(  216)         DO J=IDIMNC+1,ILCHAM
(  217)         PCHAMP(J)=PCHAMP(J)*( FA%XLAP2D(J,IPUISR,INDICE)**IRAPOR )
(  218)         ENDDO
(  219)       ENDIF
(  220) !
(  221)     ELSE
(  222) !
(  223)       IF (LLMLAM) THEN
(  224) !$OMP PARALLEL DO PRIVATE(JN,IMLIM,IDEB,IFIN,JIND,IOFF,IM,INDLAP) &
(  225) !$OMP&  IF(FA%LOPENMP)
(  226)         DO JN=1,ITRONC
(  227)         IMLIM=KSTRON-JN
(  228)         IDEB=MAX(FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4*(1+IMLIM), &
(  229) &               FA%CADRE(IRANGC)%NOZPAR(2*JN+3)+4)
(  230)         IFIN=FA%CADRE(IRANGC)%NOZPAR(2*JN+4)
(  231)         DO JIND=IDEB,IFIN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 13

(  232)         IOFF=JIND-FA%CADRE(IRANGC)%NOZPAR(2*JN+3)
(  233)         IM=IOFF/4
(  234)         INDLAP=((JN-1)*FA%JPXTRO)+IM
(  235)         PCHAMP(JIND)=PCHAMP(JIND)                                 &
(  236) &          *( FA%XLAP2DA(INDLAP,FA%JPUILA,INDICE)**(IRAPOR-1)      &
(  237) &         *FA%XLAP2DA(INDLAP,IPUISX-FA%JPUILA*(IRAPOR-1),INDICE) )
(  238)         ENDDO
(  239)         ENDDO
(  240) !$OMP END PARALLEL DO
(  241)       ELSE
(  242)         DO J=IDIMNC+1,ILCHAM
(  243)         PCHAMP(J)=PCHAMP(J)*                                       &
(  244) &                 (FA%XLAP2D(J,FA%JPUILA,INDICE)**(IRAPOR-1)        &
(  245) &                *FA%XLAP2D(J,IPUISX-FA%JPUILA*(IRAPOR-1),INDICE) )
(  246)         ENDDO
(  247)       ENDIF
(  248) !
(  249)     ENDIF
(  250) !
(  251)   ENDIF
(  252) !
(  253) ENDIF
(  254) !**
(  255) !    10.  -  PHASE TERMINALE : MESSAGERIE EVENTUELLE,
(  256) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  257) !-----------------------------------------------------------------------
(  258) !
(  259) 1001 CONTINUE
(  260) LLFATA=LLMOER (KREP,KRANG)
(  261) !
(  262) IF (FA%LFAMOP.OR.LLFATA) THEN
(  263)   INIMES=2
(  264)   CLNSPR='FARCIS'
(  265)   INUMER=JPNIIL
(  266)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KRANG='',I4,        &
(  267) &    '', PCHAMP(1)='',G12.5,'', KSTRON='',I4,'', KPUILA='',I3)') &
(  268) &     KREP,KRANG,PCHAMP(1),KSTRON,KPUILA
(  269)   CALL FAIPAR_MT64                                      &
(  270) &                 (FA, INUMER,INIMES,KREP,.FALSE.,CLMESS, &
(  271) &               CLNSPR,CLACTI,.FALSE.)
(  272) ENDIF
(  273) !
(  274) IF (LHOOK) CALL DR_HOOK('FARCIS_MT',1,ZHOOK_HANDLE)
(  275) # 276 "farcis.F90"
(  276) CONTAINS
(  277) # 278 "farcis.F90"
(  278) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 14

(   12) END FUNCTION
(   13) # 279 "farcis.F90"
(  279) # 280 "farcis.F90"
(  280) END SUBROUTINE FARCIS_MT64
(  281) # 284 "farcis.F90"
(  284) ! Oct-2012 P. Marguinaud 64b LFI
(  285) SUBROUTINE FARCIS64                             &
(  286) &           (KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  287) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  288) &                   FA_COM_DEFAULT_INIT,  &
(  289) &                   NEW_FA_DEFAULT
(  290) USE LFI_PRECISION
(  291) IMPLICIT NONE
(  292) ! Arguments
(  293) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  294) INTEGER (KIND=JPLIKB)  KRANG                                  ! IN   
(  295) REAL (KIND=JPDBLR)     PCHAMP     (*)                 ! INOUT
(  296) INTEGER (KIND=JPLIKB)  KSTRON                                 ! IN   
(  297) INTEGER (KIND=JPLIKB)  KPUILA                                 ! IN   
(  298) # 299 "farcis.F90"
(  299) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  300) # 301 "farcis.F90"
(  301) CALL FARCIS_MT64                                    &
(  302) &           (FA, KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  303) # 304 "farcis.F90"
(  304) END SUBROUTINE FARCIS64
(  305) # 306 "farcis.F90"
(  306) SUBROUTINE FARCIS                               &
(  307) &           (KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  308) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  309) &                   FA_COM_DEFAULT_INIT,  &
(  310) &                   NEW_FA_DEFAULT
(  311) USE LFI_PRECISION
(  312) IMPLICIT NONE
(  313) ! Arguments
(  314) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  315) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  316) REAL (KIND=JPDBLR)     PCHAMP     (*)                 ! INOUT
(  317) INTEGER (KIND=JPLIKM)  KSTRON                                 ! IN   
(  318) INTEGER (KIND=JPLIKM)  KPUILA                                 ! IN   
(  319) # 320 "farcis.F90"
(  320) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  321) # 322 "farcis.F90"
(  322) CALL FARCIS_MT                                      &
(  323) &           (FA, KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  324) # 325 "farcis.F90"
(  325) END SUBROUTINE FARCIS
(  326) # 327 "farcis.F90"
(  327) SUBROUTINE FARCIS_MT                                &
(  328) &           (FA, KREP, KRANG, PCHAMP, KSTRON, KPUILA)
(  329) USE FA_MOD, ONLY : FA_COM
(  330) USE LFI_PRECISION
(  331) IMPLICIT NONE
(  332) ! Arguments
(  333) TYPE (FA_COM)          FA                                     ! INOUT
(  334) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  335) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  336) REAL (KIND=JPDBLR)     PCHAMP     (*)                 ! INOUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:31      page 15

(  337) INTEGER (KIND=JPLIKM)  KSTRON                                 ! IN   
(  338) INTEGER (KIND=JPLIKM)  KPUILA                                 ! IN   
(  339) ! Local integers
(  340) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  341) INTEGER (KIND=JPLIKB)  IRANG                                  ! IN   
(  342) INTEGER (KIND=JPLIKB)  ISTRON                                 ! IN   
(  343) INTEGER (KIND=JPLIKB)  IPUILA                                 ! IN   
(  344) ! Convert arguments
(  345) # 346 "farcis.F90"
(  346) IRANG      = INT (     KRANG, JPLIKB)
(  347) ISTRON     = INT (    KSTRON, JPLIKB)
(  348) IPUILA     = INT (    KPUILA, JPLIKB)
(  349) # 350 "farcis.F90"
(  350) CALL FARCIS_MT64                                    &
(  351) &           (FA, IREP, IRANG, PCHAMP, ISTRON, IPUILA)
(  352) # 353 "farcis.F90"
(  353) KREP       = INT (      IREP, JPLIKM)
(  354) # 355 "farcis.F90"
(  355) END SUBROUTINE FARCIS_MT
(  356) # 357 "farcis.F90"
(  357) !INTF KREP            OUT                               
(  358) !INTF KRANG         IN                                  
(  359) !INTF PCHAMP        INOUT DIMS=FA%JPXCSP                
(  360) !INTF KSTRON        IN                                  
(  361) !INTF KPUILA        IN                                  
