


NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: faauto.F90

(    1) ! Jan-2011 P. Marguinaud Thread-safe FA
(    2) SUBROUTINE FAAUTO_MT64  (FA, KNUMER, LDLFI)
(    3) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    4) USE PARKIND1, ONLY : JPRB
(    5) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    6) USE LFI_PRECISION
(    7) USE SDL_MOD, ONLY : SDL_SRLABORT
(    8) IMPLICIT NONE
(    9) !****
(   10) !        Sous-programme de recherche d'une unite libre.
(   11) !
(   12) !**
(   13) !     ARGUMENTS : 
(   14) !                 KNUMER (Sortie) ==> Unite logique libre
(   15) !
(   16) !
(   17) TYPE(FA_COM) :: FA
(   18) INTEGER (KIND=JPLIKB) KNUMER
(   19) LOGICAL               LDLFI
(   20) INTEGER (KIND=JPLIKB) IRANGF
(   21) LOGICAL               LLOPEN
(   22) 
(   23) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   24) IF (LHOOK) CALL DR_HOOK('FAAUTO_MT',0,ZHOOK_HANDLE)
(   25) 
(   26) IF (ALL (FA%FICHIER%NULOGI.NE.JPNIIL)) THEN
(   27)   CALL SDL_SRLABORT
(   28) ENDIF
(   29) 
(   30) KNUMER=-1000






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 3

(   31) 
(   32) DO
(   33) 
(   34)   CALL FANUMU_MT64  (FA, KNUMER, IRANGF)
(   35) 
(   36)   IF (ASSOCIATED (FA%LFI) .AND. LDLFI) THEN
(   37)     CALL LFIPRO_MT64 (FA%LFI, KNUMER, LLOPEN)
(   38)   ELSE
(   39)     LLOPEN = .FALSE.
(   40)   ENDIF
(   41) 
(   42)   IF ((.NOT. LLOPEN) .AND. (IRANGF == 0)) EXIT
(   43) 
(   44)   KNUMER=KNUMER-1
(   45) 
(   46) ENDDO
(   47) 
(   48) IF (LHOOK) CALL DR_HOOK('FAAUTO_MT',1,ZHOOK_HANDLE)
(   49) 
(   50) END SUBROUTINE












































NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 4

(    1) # 1 "faauto.F90"
(    1) ! Jan-2011 P. Marguinaud Thread-safe FA
(    2) SUBROUTINE FAAUTO_MT64  (FA, KNUMER, LDLFI)
(    3) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    4) USE PARKIND1, ONLY : JPRB
(    5) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    6) USE LFI_PRECISION
(    7) USE SDL_MOD, ONLY : SDL_SRLABORT
(    8) IMPLICIT NONE
(    9) !****
(   10) !        Sous-programme de recherche d'une unite libre.
(   11) !
(   12) !**
(   13) !     ARGUMENTS : 
(   14) !                 KNUMER (Sortie) ==> Unite logique libre
(   15) !
(   16) !
(   17) TYPE(FA_COM) :: FA
(   18) INTEGER (KIND=JPLIKB) KNUMER
(   19) LOGICAL               LDLFI
(   20) INTEGER (KIND=JPLIKB) IRANGF
(   21) LOGICAL               LLOPEN
(   22) # 23 "faauto.F90"
(   23) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   24) IF (LHOOK) CALL DR_HOOK('FAAUTO_MT',0,ZHOOK_HANDLE)
(   25) # 26 "faauto.F90"
(   26) IF (ALL (FA%FICHIER%NULOGI.NE.JPNIIL)) THEN
(   27)   CALL SDL_SRLABORT
(   28) ENDIF
(   29) # 30 "faauto.F90"
(   30) KNUMER=-1000
(   31) # 32 "faauto.F90"
(   32) DO
(   33) # 34 "faauto.F90"
(   34)   CALL FANUMU_MT64  (FA, KNUMER, IRANGF)
(   35) # 36 "faauto.F90"
(   36)   IF (ASSOCIATED (FA%LFI) .AND. LDLFI) THEN
(   37)     CALL LFIPRO_MT64 (FA%LFI, KNUMER, LLOPEN)
(   38)   ELSE
(   39)     LLOPEN = .FALSE.
(   40)   ENDIF
(   41) # 42 "faauto.F90"
(   42)   IF ((.NOT. LLOPEN) .AND. (IRANGF == 0)) EXIT
(   43) # 44 "faauto.F90"
(   44)   KNUMER=KNUMER-1
(   45) # 46 "faauto.F90"
(   46) ENDDO
(   47) # 48 "faauto.F90"
(   48) IF (LHOOK) CALL DR_HOOK('FAAUTO_MT',1,ZHOOK_HANDLE)
(   49) # 50 "faauto.F90"
(   50) END SUBROUTINE
