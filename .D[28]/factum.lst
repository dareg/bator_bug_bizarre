


NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: factum.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACTUM_MT64             &
(    4) &                     (FA,  CDNOMC )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme servant a supprimer un cadre.
(   12) !     ( Cadre a TUer Methodiquement ? )
(   13) !**
(   14) !        Argument : CDNOMC (Entree) ==> Nom symbolique du cadre.
(   15) !
(   16) !
(   17) !
(   18) TYPE(FA_COM) :: FA
(   19) INTEGER (KIND=JPLIKB) ILCDNO, IREP, IRANGC, ILNOMC
(   20) INTEGER (KIND=JPLIKB) INIMES, INUMER, J
(   21) !
(   22) LOGICAL LLVERG
(   23) !
(   24) CHARACTER CDNOMC*(*)
(   25) !
(   26) !
(   27) !
(   28) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   29) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   30) CHARACTER(LEN=FA%JPLSPX) CLNSPR






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 3

(   31) LOGICAL                  LLFATA
(   32) 
(   33) !**
(   34) !     1.  -  INITIALISATIONS ET CONTROLES SOMMAIRES.
(   35) !-----------------------------------------------------------------------
(   36) !
(   37) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   38) IF (LHOOK) CALL DR_HOOK('FACTUM_MT',0,ZHOOK_HANDLE)
(   39) CLACTI=''
(   40) IF (FA%FACTUM_LLPREA) THEN
(   41) !
(   42) !         Initialisation eventuelle des variables globales du logiciel.
(   43) !
(   44)   CALL FARINE_MT64              &
(   45) &                 (FA, 2_JPLIKB )
(   46)   FA%FACTUM_LLPREA=.FALSE.
(   47) ENDIF
(   48) !
(   49) LLVERG=.FALSE.
(   50) ILCDNO=INT (LEN (CDNOMC), JPLIKB)
(   51) !
(   52) IF (ILCDNO.LE.0) THEN
(   53)   IREP=-65
(   54)   GOTO 1001
(   55) ELSEIF (CDNOMC.EQ.' ') THEN
(   56)   IREP=-68
(   57)   GOTO 1001
(   58) ENDIF
(   59) !
(   60) DO J=ILCDNO,1,-1
(   61) !
(   62) IF (CDNOMC(J:J).NE.' ') THEN
(   63)   ILNOMC=J
(   64)   GOTO 102
(   65) ENDIF
(   66) !
(   67) ENDDO
(   68) !
(   69) 102 CONTINUE
(   70) !
(   71) IF (ILNOMC.GT.FA%NCPCAD) THEN
(   72)   IREP=-65
(   73)   GOTO 1001
(   74) ENDIF
(   75) !             Verrouillage global, si necessaire.
(   76) !
(   77) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(   78) &                              (FA%LFI, FA%VRGLAS,'ON')
(   79) LLVERG=FA%LFAMUL
(   80) !
(   81) !          Controle d'existence du cadre specifie.
(   82) !
(   83) CALL FANUCA_MT64                          &
(   84) &               (FA, CDNOMC,IRANGC,.FALSE.)
(   85) !
(   86) IF (IRANGC.EQ.0) THEN
(   87)   IREP=-51
(   88)   GOTO 1001






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 4

(   89) ENDIF
(   90) !**
(   91) !     2.  -  SUPPRESSION PROPREMENT DITE VIA LE SOUS-PROGRAMME "FACTUI".
(   92) !-----------------------------------------------------------------------
(   93) !
(   94) CALL FACTUI_MT64                &
(   95) &               (FA, IREP,IRANGC)
(   96) !**
(   97) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   98) !            VIA LE sous-programme "FAIPAR" .
(   99) !-----------------------------------------------------------------------
(  100) !
(  101) 1001 CONTINUE
(  102) !
(  103) !          Deverrouillage global eventuel.
(  104) !
(  105) IF (LLVERG) CALL LFIVER_MT64                         &
(  106) &                           (FA%LFI, FA%VRGLAS,'OFF')
(  107) !
(  108) LLFATA=LLMOER(IREP,0_JPLIKB )
(  109) !
(  110) IF (.NOT.LLFATA.OR.FA%NIMSGA.NE.2)  THEN 
(  111)   IF (LHOOK) CALL DR_HOOK('FACTUM_MT',1,ZHOOK_HANDLE)
(  112)   RETURN
(  113) ENDIF
(  114) !
(  115) INIMES=2
(  116) CLNSPR='FACTUM'
(  117) !
(  118) IF (IREP.EQ.-65.AND.ILCDNO.LE.0) THEN
(  119)   ILNOMC=8
(  120)   CLACTI(1:ILNOMC)=FA%CHAINC(:ILNOMC)
(  121) ELSE
(  122)   ILNOMC=MIN (INT (LEN (CLACTI), JPLIKB),ILNOMC)
(  123)   CLACTI=CDNOMC(1:ILNOMC)
(  124) ENDIF
(  125) !
(  126) WRITE (UNIT=CLMESS,FMT='(''CDNOMC='''''',A,'''''''')') &
(  127) &     CLACTI(1:ILNOMC)
(  128) INUMER=JPNIIL
(  129) CALL FAIPAR_MT64                                     &
(  130) &               (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(  131) &                CLNSPR, CLACTI(1:ILNOMC),.FALSE.)
(  132) !
(  133) IF (LHOOK) CALL DR_HOOK('FACTUM_MT',1,ZHOOK_HANDLE)
(  134) 
(  135) CONTAINS
(  136) 
(  137) #include "facom2.llmoer.h"
(  138) 
(  139) END SUBROUTINE FACTUM_MT64
(  140) 
(  141) 
(  142) 
(  143) ! Oct-2012 P. Marguinaud 64b LFI
(  144) SUBROUTINE FACTUM64           &
(  145) &           (CDNOMC)
(  146) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 5

(  147) &                   FA_COM_DEFAULT_INIT,  &
(  148) &                   NEW_FA_DEFAULT
(  149) USE LFI_PRECISION
(  150) IMPLICIT NONE
(  151) ! Arguments
(  152) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  153) 
(  154) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  155) 
(  156) CALL FACTUM_MT64           &
(  157) &           (FA, CDNOMC)
(  158) 
(  159) END SUBROUTINE FACTUM64
(  160) 
(  161) SUBROUTINE FACTUM             &
(  162) &           (CDNOMC)
(  163) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  164) &                   FA_COM_DEFAULT_INIT,  &
(  165) &                   NEW_FA_DEFAULT
(  166) USE LFI_PRECISION
(  167) IMPLICIT NONE
(  168) ! Arguments
(  169) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  170) 
(  171) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  172) 
(  173) CALL FACTUM_MT             &
(  174) &           (FA, CDNOMC)
(  175) 
(  176) END SUBROUTINE FACTUM
(  177) 
(  178) SUBROUTINE FACTUM_MT             &
(  179) &           (FA, CDNOMC)
(  180) USE FA_MOD, ONLY : FA_COM
(  181) USE LFI_PRECISION
(  182) IMPLICIT NONE
(  183) ! Arguments
(  184) TYPE (FA_COM)          FA                                     ! INOUT
(  185) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  186) ! Local integers
(  187) ! Convert arguments
(  188) 
(  189) 
(  190) CALL FACTUM_MT64           &
(  191) &           (FA, CDNOMC)
(  192) 
(  193) 
(  194) END SUBROUTINE FACTUM_MT
(  195) 
(  196) !INTF CDNOMC        IN    














NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 6

(    1) # 1 "factum.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACTUM_MT64             &
(    4) &                     (FA,  CDNOMC )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme servant a supprimer un cadre.
(   12) !     ( Cadre a TUer Methodiquement ? )
(   13) !**
(   14) !        Argument : CDNOMC (Entree) ==> Nom symbolique du cadre.
(   15) !
(   16) !
(   17) !
(   18) TYPE(FA_COM) :: FA
(   19) INTEGER (KIND=JPLIKB) ILCDNO, IREP, IRANGC, ILNOMC
(   20) INTEGER (KIND=JPLIKB) INIMES, INUMER, J
(   21) !
(   22) LOGICAL LLVERG
(   23) !
(   24) CHARACTER CDNOMC*(*)
(   25) !
(   26) !
(   27) !
(   28) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   29) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   30) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   31) LOGICAL                  LLFATA
(   32) # 33 "factum.F90"
(   33) !**
(   34) !     1.  -  INITIALISATIONS ET CONTROLES SOMMAIRES.
(   35) !-----------------------------------------------------------------------
(   36) !
(   37) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   38) IF (LHOOK) CALL DR_HOOK('FACTUM_MT',0,ZHOOK_HANDLE)
(   39) CLACTI=''
(   40) IF (FA%FACTUM_LLPREA) THEN
(   41) !
(   42) !         Initialisation eventuelle des variables globales du logiciel.
(   43) !
(   44)   CALL FARINE_MT64              &
(   45) &                 (FA, 2_JPLIKB )
(   46)   FA%FACTUM_LLPREA=.FALSE.
(   47) ENDIF
(   48) !
(   49) LLVERG=.FALSE.
(   50) ILCDNO=INT (LEN (CDNOMC), JPLIKB)
(   51) !
(   52) IF (ILCDNO.LE.0) THEN
(   53)   IREP=-65
(   54)   GOTO 1001
(   55) ELSEIF (CDNOMC.EQ.' ') THEN
(   56)   IREP=-68
(   57)   GOTO 1001






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 7

(   58) ENDIF
(   59) !
(   60) DO J=ILCDNO,1,-1
(   61) !
(   62) IF (CDNOMC(J:J).NE.' ') THEN
(   63)   ILNOMC=J
(   64)   GOTO 102
(   65) ENDIF
(   66) !
(   67) ENDDO
(   68) !
(   69) 102 CONTINUE
(   70) !
(   71) IF (ILNOMC.GT.FA%NCPCAD) THEN
(   72)   IREP=-65
(   73)   GOTO 1001
(   74) ENDIF
(   75) !             Verrouillage global, si necessaire.
(   76) !
(   77) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(   78) &                              (FA%LFI, FA%VRGLAS,'ON')
(   79) LLVERG=FA%LFAMUL
(   80) !
(   81) !          Controle d'existence du cadre specifie.
(   82) !
(   83) CALL FANUCA_MT64                          &
(   84) &               (FA, CDNOMC,IRANGC,.FALSE.)
(   85) !
(   86) IF (IRANGC.EQ.0) THEN
(   87)   IREP=-51
(   88)   GOTO 1001
(   89) ENDIF
(   90) !**
(   91) !     2.  -  SUPPRESSION PROPREMENT DITE VIA LE SOUS-PROGRAMME "FACTUI".
(   92) !-----------------------------------------------------------------------
(   93) !
(   94) CALL FACTUI_MT64                &
(   95) &               (FA, IREP,IRANGC)
(   96) !**
(   97) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   98) !            VIA LE sous-programme "FAIPAR" .
(   99) !-----------------------------------------------------------------------
(  100) !
(  101) 1001 CONTINUE
(  102) !
(  103) !          Deverrouillage global eventuel.
(  104) !
(  105) IF (LLVERG) CALL LFIVER_MT64                         &
(  106) &                           (FA%LFI, FA%VRGLAS,'OFF')
(  107) !
(  108) LLFATA=LLMOER(IREP,0_JPLIKB )
(  109) !
(  110) IF (.NOT.LLFATA.OR.FA%NIMSGA.NE.2)  THEN 
(  111)   IF (LHOOK) CALL DR_HOOK('FACTUM_MT',1,ZHOOK_HANDLE)
(  112)   RETURN
(  113) ENDIF
(  114) !
(  115) INIMES=2






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 8

(  116) CLNSPR='FACTUM'
(  117) !
(  118) IF (IREP.EQ.-65.AND.ILCDNO.LE.0) THEN
(  119)   ILNOMC=8
(  120)   CLACTI(1:ILNOMC)=FA%CHAINC(:ILNOMC)
(  121) ELSE
(  122)   ILNOMC=MIN (INT (LEN (CLACTI), JPLIKB),ILNOMC)
(  123)   CLACTI=CDNOMC(1:ILNOMC)
(  124) ENDIF
(  125) !
(  126) WRITE (UNIT=CLMESS,FMT='(''CDNOMC='''''',A,'''''''')') &
(  127) &     CLACTI(1:ILNOMC)
(  128) INUMER=JPNIIL
(  129) CALL FAIPAR_MT64                                     &
(  130) &               (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(  131) &                CLNSPR, CLACTI(1:ILNOMC),.FALSE.)
(  132) !
(  133) IF (LHOOK) CALL DR_HOOK('FACTUM_MT',1,ZHOOK_HANDLE)
(  134) # 135 "factum.F90"
(  135) CONTAINS
(  136) # 137 "factum.F90"
(  137) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 138 "factum.F90"
(  138) # 139 "factum.F90"
(  139) END SUBROUTINE FACTUM_MT64
(  140) # 143 "factum.F90"
(  143) ! Oct-2012 P. Marguinaud 64b LFI
(  144) SUBROUTINE FACTUM64           &
(  145) &           (CDNOMC)
(  146) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  147) &                   FA_COM_DEFAULT_INIT,  &
(  148) &                   NEW_FA_DEFAULT
(  149) USE LFI_PRECISION
(  150) IMPLICIT NONE
(  151) ! Arguments
(  152) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  153) # 154 "factum.F90"
(  154) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  155) # 156 "factum.F90"
(  156) CALL FACTUM_MT64           &
(  157) &           (FA, CDNOMC)
(  158) # 159 "factum.F90"
(  159) END SUBROUTINE FACTUM64
(  160) # 161 "factum.F90"
(  161) SUBROUTINE FACTUM             &
(  162) &           (CDNOMC)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:21      page 9

(  163) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  164) &                   FA_COM_DEFAULT_INIT,  &
(  165) &                   NEW_FA_DEFAULT
(  166) USE LFI_PRECISION
(  167) IMPLICIT NONE
(  168) ! Arguments
(  169) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  170) # 171 "factum.F90"
(  171) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  172) # 173 "factum.F90"
(  173) CALL FACTUM_MT             &
(  174) &           (FA, CDNOMC)
(  175) # 176 "factum.F90"
(  176) END SUBROUTINE FACTUM
(  177) # 178 "factum.F90"
(  178) SUBROUTINE FACTUM_MT             &
(  179) &           (FA, CDNOMC)
(  180) USE FA_MOD, ONLY : FA_COM
(  181) USE LFI_PRECISION
(  182) IMPLICIT NONE
(  183) ! Arguments
(  184) TYPE (FA_COM)          FA                                     ! INOUT
(  185) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  186) ! Local integers
(  187) ! Convert arguments
(  188) # 190 "factum.F90"
(  190) CALL FACTUM_MT64           &
(  191) &           (FA, CDNOMC)
(  192) # 194 "factum.F90"
(  194) END SUBROUTINE FACTUM_MT
(  195) # 196 "factum.F90"
(  196) !INTF CDNOMC        IN    
