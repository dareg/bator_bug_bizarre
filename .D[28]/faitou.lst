


NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: faitou.F90

(    1) ! Jan-2013 P. Marguinaud Use JNGEOM & JNEXPL parameters
(    2) ! Oct-2012 P. Marguinaud 64b LFI
(    3) ! Jan-2011 P. Marguinaud Thread-safe FA
(    4) SUBROUTINE FAITOU_MT64                                             &
(    5) &                     (FA,  KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU,  &
(    6) &                      LDERFA, LDIMST, KNIMES, KNBARP, KNBARI,     &
(    7) &                      CDNOMC)
(    8) USE FA_MOD, ONLY : FA_COM, NEW_FICHIER, JPNIIL, JNGEOM, JNEXPL
(    9) USE PARKIND1, ONLY : JPRB
(   10) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   11) USE LFI_PRECISION
(   12) IMPLICIT NONE
(   13) !****
(   14) !        Sous-programme d'OUVERTURE d'une unite logique "Fichier ARPEGE"
(   15) !     Il s'agit d'un fichier indexe, traite par le logiciel LFI.
(   16) !
(   17) !**
(   18) !     ARGUMENTS : Ce sont les memes que pour "LFIOUV", avec CDNOMC comme
(   19) !                 argument supplementaire.
(   20) !
(   21) !                 KREP   (Sortie) ==> Code-reponse du sous-programme;
(   22) !                 KNUMER (Entree) ==> Numero de l'unite logique;
(   23) !                 LDNOMM (Entree) ==> Vrai si l'unite logique doit etre
(   24) !                                     associee a un NOM de Fichier EXP-
(   25) !                                     LICITE lors de l'"OPEN" FORTRAN;
(   26) !                 CDNOMF (Entree) ==> Nom de fichier explicite, si
(   27) !                                     *LDNOMM* est VRAI - Meme si ce
(   28) !                                     n'est pas le cas, ce *DOIT* ETRE
(   29) !                                     UN OBJET DE TYPE "CHARACTER" .
(   30) !                 CDSTTU (Entree) ==> "STATUS" pour l'"OPEN" FORTRAN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 3

(   31) !                                     ('OLD','NEW','UNKNOWN','SCRATCH')
(   32) !                                     par defaut, mettre 'UNKNOWN';
(   33) !                 LDERFA (Entree) ==> Option d'erreur fatale;
(   34) !                 LDIMST (Entree) ==> Option impression de Statistiques
(   35) !                                     au moment de la fermeture;
(   36) !                 KNIMES (Entree) ==> Niveau de la Messagerie (0,1 ou 2)
(   37) !                                     ( 0==>Rien, 2==>Tout )
(   38) !                 KNBARP (Entree) ==> Nombre d'articles logiques prevus,
(   39) !                                     ce qui n'est utilise que lors de
(   40) !                                     la Creation du fichier,
(   41) !                                     et qui n'empeche quand meme pas
(   42) !                                     d'avoir plus d'articles logiques;
(   43) !                 KNBARI (Sortie) ==> Nombre d'articles logiques de don-
(   44) !                                     nees sur le fichier, initialement.
(   45) !                                     (zero si creation)
(   46) !                 CDNOMC (Entree) ==> Nom du CADRE associe au fichier.
(   47) !*
(   48) !     N.B. :  Pour un fichier en mode creation, ce cadre doit avoir ete
(   49) !          defini au prealable (via le sous-programme FACADE, ou par
(   50) !          l'ouverture d'un fichier preexistant).
(   51) !             Pour un fichier ARPEGE preexistant, le cadre est lu sur le
(   52) !          fichier; s'il etait deja defini auparavant, il y a controle
(   53) !          de coherence entre les deux versions du cadre.
(   54) !
(   55) !
(   56) !
(   57) TYPE(FA_COM) :: FA
(   58) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIMES, KNBARP, KNBARI
(   59) !
(   60) INTEGER (KIND=JPLIKB) IRANG, IRANMS
(   61) INTEGER (KIND=JPLIKB) IREPOU, ILNOMC, ILOMIN, IREP, J
(   62) INTEGER (KIND=JPLIKB) INBARP, IRANER, IRANGC
(   63) INTEGER (KIND=JPLIKB) INPAHE, INLATI, ISULEI, INPIND
(   64) INTEGER (KIND=JPLIKB) INIVER, ILONGA
(   65) INTEGER (KIND=JPLIKB) ITRONC, ILACTI, INIMES, INXLON
(   66) INTEGER (KIND=JPLIKB) ITYPTR, IPHASE, IGARDE, IPOSEX, IPUILA
(   67) !
(   68) INTEGER (KIND=JPLIKB) IDIMEN (FA%JPCADI)
(   69) INTEGER (KIND=JPLIKB) IRDPOL (FA%JPXPAH+FA%JPXIND)
(   70) INTEGER (KIND=JPLIKB) IDATEF (FA%JPLDAT), IDATXF (FA%JPLDAT)
(   71) INTEGER (KIND=JPLIKB) ILDIMEN(FA%JPCADI),          &
(   72) &                      ILRDPOL(FA%JPXPAH+FA%JPXIND)
(   73) INTEGER (KIND=JPLIKB) ILPNVER
(   74) !
(   75) REAL (KIND=JPDBLR) ZCHMID (FA%JPCAFS), ZSINLA (FA%JPXGEO)
(   76) REAL (KIND=JPDBLR) ZHYBRI (0:(1+FA%JPXNIV)*2)
(   77) !
(   78) LOGICAL LDNOMM, LDERFA, LDIMST, LLVERG, LLNOUF, LLNOUC, LLRLFI
(   79) LOGICAL LLMODC, LLREDF, LLMODA, LLMLAM
(   80) !
(   81) CHARACTER CDNOMF*(*), CDSTTU*(*), CDNOMC*(*)
(   82) !
(   83) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   84) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   85) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   86) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   87) LOGICAL                  LLFATA
(   88) LOGICAL                  LLNEWF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 4

(   89) 
(   90) !**
(   91) !     1.  -  CONTROLES DIVERS, ET OUVERTURE DU FICHIER AU SENS "LFI".
(   92) !-----------------------------------------------------------------------
(   93) !
(   94) !     Controle sommaire sur les arguments...le reste est "sous-traite"
(   95) !     au sous-programme LFIOUV.
(   96) !
(   97) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   98) IF (LHOOK) CALL DR_HOOK('FAITOU_MT',0,ZHOOK_HANDLE)
(   99) ZHYBRI(0:(1+FA%JPXNIV)*2)=0._JPRB
(  100) CLACTI=''
(  101) LLNEWF=.FALSE.
(  102) IRANG=0
(  103) IRANER=0
(  104) IRANMS=0
(  105) IREPOU=JPNIIL
(  106) LLRLFI=.FALSE.
(  107) LLVERG=.FALSE.
(  108) ILNOMC=INT (LEN (CDNOMC), JPLIKB)
(  109) ILOMIN=MIN ( INT (LEN (CDNOMF), JPLIKB),         &
(  110) &             INT (LEN (CDSTTU), JPLIKB), ILNOMC)
(  111) !
(  112) !        L'appel ci-dessous est legerement anticipe, de maniere a
(  113) !     initialiser les variables globales du logiciel s'il s'agit
(  114) !     du premier appel a un sous-programme de ce logiciel.
(  115) !
(  116) CALL FANUMU_MT64                 &
(  117) &               (FA, KNUMER,IRANG)
(  118) !        Si KNUMER est nul, alors le numero d'unite logique est
(  119) !     attribu√© automatiquement
(  120) IF (KNUMER == 0) THEN
(  121)   CALL FAAUTO_MT64  (FA, KNUMER, .TRUE.)
(  122)   IRANG=0
(  123) ENDIF
(  124) !
(  125) IF (ILOMIN.LE.0) THEN
(  126)   IREP=-65
(  127)   GOTO 1001
(  128) ELSEIF (IRANG.NE.0) THEN
(  129) !
(  130) !            Controle de non-ouverture prealable (au sens du logiciel)
(  131) !
(  132)   IREP=-55
(  133)   IRANMS=IRANG
(  134)   GOTO 1001
(  135) ENDIF
(  136) !
(  137) !             Verrouillage global, si necessaire.
(  138) !
(  139) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(  140) &                              (FA%LFI, FA%VRGLAS,'ON')
(  141) LLVERG=FA%LFAMUL
(  142) !
(  143) !        A-t-on deja atteint le nombre limite de fichiers ARPEGE
(  144) !     ouverts simultanement ? Si non, on cherche un emplacement libre
(  145) !     dans la table FA%NULOGI (logiquement, il devrait en exister un)
(  146) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 5

(  147) IF (FA%NFIOUV.GE.FA%JPNXFA) THEN
(  148)   IREP=-56
(  149)   GOTO 1001
(  150) ELSE
(  151) !
(  152)   DO J=1,FA%JPNXFA
(  153) !
(  154)   IF (FA%FICHIER(J)%NULOGI.EQ.JPNIIL) THEN
(  155)     IRANG=J
(  156)     GOTO 102
(  157)   ENDIF
(  158) !
(  159)   ENDDO
(  160) !
(  161)   IREP=-66
(  162)   GOTO 1001
(  163) !
(  164) 102 CONTINUE
(  165) !
(  166) ENDIF
(  167) !
(  168) !              Ouverture du fichier au sens du logiciel LFI.
(  169) !     (on ajoute au nombre d'articles prevus par l'utilisateur les
(  170) !      articles constituant le cadre, la date et l'identificateur)
(  171) !
(  172) INBARP=KNBARP+7
(  173) CALL LFIOUV_MT64                                            &
(  174) &               (FA%LFI, IREPOU,KNUMER,LDNOMM,CDNOMF,CDSTTU, &
(  175) &             LDERFA,LDIMST,                                 &
(  176) &             KNIMES,INBARP,KNBARI)
(  177) !
(  178) IF (IREPOU.NE.0.AND.IREPOU.NE.-11) THEN
(  179)   IREP=IREPOU
(  180)   LLRLFI=.TRUE.
(  181)   GOTO 1001
(  182) ENDIF
(  183) !**
(  184) !     2.  -  CONTROLES SPECIFIQUES AU LOGICIEL DE FICHIERS ARPEGE.
(  185) !-----------------------------------------------------------------------
(  186) !
(  187) LLNOUF=KNBARI.EQ.0
(  188) CALL FANUCA_MT64                          &
(  189) &               (FA, CDNOMC,IRANGC,.FALSE.)
(  190) LLNOUC=IRANGC.EQ.0
(  191) !
(  192) IF (LLNOUF) THEN
(  193) !
(  194)   IF (LLNOUC) THEN
(  195)     IREP=-57
(  196)     GOTO 1001
(  197)   ELSE
(  198) !
(  199) !         Fichier en mode creation et cadre predefini... OK a ce niveau.
(  200) !
(  201) !       On ecrit les articles definissant le cadre sur le fichier,
(  202) !     ainsi qu'un article ayant pour nom l'identificateur "par defaut",
(  203) !     (en fait, le nom du cadre) de maniere a ce que cet article soit
(  204) !     sequentiellement celui qui suit le dernier article du cadre.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 6

(  205) !
(  206)     LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(  207) !          
(  208)     IDIMEN(1)=FA%CADRE(IRANGC)%MTRONC
(  209)     INLATI=FA%CADRE(IRANGC)%NLATIT
(  210)     IF (.NOT.LLMLAM) THEN
(  211)        INPAHE=(1+INLATI)/2
(  212)     ELSE
(  213)        ISULEI=FA%CADRE(IRANGC)%NOZPAR(1)
(  214) !
(  215)        INPIND=2*ISULEI+4
(  216)     ENDIF                   
(  217)     IDIMEN(2)=INLATI
(  218)     IDIMEN(3)=FA%CADRE(IRANGC)%NXLOPA
(  219)     INIVER=FA%CADRE(IRANGC)%NNIVER
(  220)     IDIMEN(4)=INIVER
(  221)     IDIMEN(5)=FA%CADRE(IRANGC)%NTYPTR
(  222)     ZCHMID(1)=FA%CADRE(IRANGC)%SSLAPO
(  223)     ZCHMID(2)=FA%CADRE(IRANGC)%SCLOPO
(  224)     ZCHMID(3)=FA%CADRE(IRANGC)%SSLOPO
(  225)     ZCHMID(4)=FA%CADRE(IRANGC)%SCODIL
(  226)     ZHYBRI(0)=FA%CADRE(IRANGC)%SPREFE
(  227)     ILNOMC=FA%CADRE(IRANGC)%NLCCAD
(  228)     CLNOMA=CDNOMC
(  229) !
(  230)     IF (.NOT.LLMLAM) THEN
(  231) !
(  232)        DO J=1,INPAHE
(  233)        IRDPOL(J)=FA%CADRE(IRANGC)%NLOPAR(J)
(  234)        IRDPOL(INPAHE+J)=FA%CADRE(IRANGC)%NOZPAR(J)
(  235)        ZSINLA(J)=FA%CADRE(IRANGC)%SINLAT(J)
(  236)        ENDDO
(  237) !
(  238)     ELSE
(  239)        DO J=1,JNGEOM
(  240)           ZSINLA(J)=FA%CADRE(IRANGC)%SINLAT(J)
(  241)        ENDDO
(  242)        DO J=1,JNEXPL
(  243)           IRDPOL(J)=FA%CADRE(IRANGC)%NLOPAR(J)
(  244)        ENDDO
(  245)        DO J=1,INPIND
(  246)           IRDPOL(JNEXPL+J)=FA%CADRE(IRANGC)%NOZPAR(J)
(  247)        ENDDO
(  248) !
(  249)     ENDIF
(  250) !
(  251)     DO J=0,INIVER
(  252)     ZHYBRI(J+1)=FA%CADRE(IRANGC)%SFOHYB(1,J)
(  253)     ZHYBRI(J+2+INIVER)=FA%CADRE(IRANGC)%SFOHYB(2,J)
(  254)     ENDDO
(  255) !
(  256)     LLRLFI=.TRUE.
(  257)     ILDIMEN=IDIMEN
(  258)     CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, FA%CPCADI, ILDIMEN, FA%JPCADI)
(  259)     IDIMEN=ILDIMEN
(  260)     IF (IREP.NE.0) GOTO 1001
(  261) !
(  262)     CALL LFIECR_RD (FA%CPCAFS, ZCHMID, FA%JPCAFS)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 7

(  263)     IF (IREP.NE.0) GOTO 1001
(  264) !
(  265)    IF (.NOT.LLMLAM) THEN
(  266) !
(  267)        ILONGA=INPAHE*2
(  268)        ILRDPOL=IRDPOL
(  269)        CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, FA%CPCARP, ILRDPOL, ILONGA)
(  270)        IRDPOL=ILRDPOL
(  271)        IF (IREP.NE.0) GOTO 1001
(  272) !
(  273)        ILONGA=INPAHE
(  274)        CALL LFIECR_RD (FA%CPCASL, ZSINLA, ILONGA)
(  275)        IF (IREP.NE.0) GOTO 1001
(  276) !
(  277)     ELSE
(  278) !
(  279)        ILONGA=JNEXPL+INPIND
(  280)        ILRDPOL=IRDPOL
(  281)        CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, FA%CPCARP, ILRDPOL, ILONGA)
(  282)        IRDPOL=ILRDPOL
(  283)        IF (IREP.NE.0) GOTO 1001
(  284) !
(  285)        ILONGA=JNGEOM
(  286)        CALL LFIECR_RD (FA%CPCASL, ZSINLA, ILONGA)
(  287)        IF (IREP.NE.0) GOTO 1001
(  288) !
(  289)     ENDIF
(  290) !           
(  291)     ILONGA=1+(1+INIVER)*2
(  292)     CALL LFIECR_RD (FA%CPCACH, ZHYBRI, ILONGA)
(  293)     IF (IREP.NE.0) GOTO 1001
(  294) !
(  295)     ILPNVER=FA%JPNVER
(  296)     CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, CLNOMA(1:ILNOMC), ILPNVER, 1_JPLIKB)
(  297)     IF (IREP.NE.0) GOTO 1001
(  298) !
(  299)     LLRLFI=.FALSE.
(  300)     GOTO 300
(  301)   ENDIF
(  302) !
(  303) ENDIF
(  304) !*
(  305) !     2.1 - Fichier preexistant...lecture et controle du Cadre "Fichier"
(  306) !-----------------------------------------------------------------------
(  307) !
(  308) CALL LFINFO_MT64                                             &
(  309) &               (FA%LFI, IREP,KNUMER,FA%CPCADI,ILONGA,IPOSEX)
(  310) !
(  311) IF (IREP.NE.0) THEN
(  312)   LLRLFI=.TRUE.
(  313)   GOTO 1001
(  314) ELSEIF (ILONGA.EQ.0) THEN
(  315)   IREP=-60
(  316)   GOTO 1001
(  317) ELSEIF (ILONGA.NE.FA%JPCADI) THEN
(  318)   IREP=-61
(  319)   GOTO 1001
(  320) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 8

(  321) !
(  322) ILDIMEN=IDIMEN
(  323) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPCADI, ILDIMEN, FA%JPCADI)
(  324) IDIMEN=ILDIMEN
(  325) !
(  326) IF (IREP.NE.0) THEN
(  327)   LLRLFI=.TRUE.
(  328)   GOTO 1001
(  329) ENDIF
(  330) !
(  331) CALL LFINFO_MT64 (FA%LFI, IREP, KNUMER, FA%CPCAFS, ILONGA, IPOSEX)
(  332) !
(  333) IF (IREP.NE.0) THEN
(  334)   LLRLFI=.TRUE.
(  335)   GOTO 1001
(  336) ELSEIF (ILONGA.EQ.0) THEN
(  337)   IREP=-60
(  338)   GOTO 1001
(  339) ELSEIF (ILONGA.NE.FA%JPCAFS) THEN
(  340)   IREP=-61
(  341)   GOTO 1001
(  342) ENDIF
(  343) !
(  344) CALL LFILEC_DR (FA%CPCAFS, ZCHMID, FA%JPCAFS)
(  345) !
(  346) IF (IREP.NE.0) THEN
(  347)   LLRLFI=.TRUE.
(  348)   GOTO 1001
(  349) ENDIF
(  350) !
(  351) !        Coherence des dimensions par rapport aux valeurs "licites",
(  352) !     que l'on doit faire avant de poursuivre les lectures.
(  353) !
(  354) IF(IDIMEN(5).LE.0) LLMLAM = .TRUE.
(  355) ITRONC=IDIMEN(1)
(  356) INLATI=IDIMEN(2)
(  357) INPAHE=(1+INLATI)/2
(  358) INXLON=IDIMEN(3)
(  359) INIVER=IDIMEN(4)
(  360) ITYPTR=IDIMEN(5)
(  361) IPHASE=1
(  362) IGARDE=1
(  363) CALL FACADI_MT64                                                    &
(  364) &              (FA, IREP,CDNOMC,ITYPTR,ZCHMID(1),ZCHMID(2),         &
(  365) &               ZCHMID(3),ZCHMID(4),ITRONC,INLATI,INXLON,IRDPOL(1), &
(  366) &               IRDPOL(FA%JPXPAH+1),ZSINLA,                         &
(  367) &               INIVER,ZHYBRI(0),ZHYBRI(1),ZHYBRI(FA%JPXNIV+2),     &
(  368) &               LLMODC,LLREDF,IPHASE,IRANGC,ILNOMC,IGARDE)
(  369) IF (IREP.NE.0) GOTO 1001
(  370) !
(  371) CALL LFINFO_MT64                                             &
(  372) &               (FA%LFI, IREP,KNUMER,FA%CPCARP,ILONGA,IPOSEX)
(  373) !
(  374) IF (IREP.NE.0) THEN
(  375)   LLRLFI=.TRUE.
(  376)   GOTO 1001
(  377) ELSEIF (ILONGA.EQ.0) THEN
(  378)   IREP=-60






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 9

(  379)   GOTO 1001
(  380) ELSEIF (ILONGA.NE.INPAHE*2) THEN
(  381)   IF (.NOT.LLMLAM) THEN
(  382)      IREP=-61
(  383)      GOTO 1001
(  384)   ENDIF    
(  385) ENDIF
(  386) !
(  387) ILRDPOL=IRDPOL
(  388) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPCARP, ILRDPOL, ILONGA)
(  389) IRDPOL=ILRDPOL
(  390) !
(  391) IF (IREP.NE.0) THEN
(  392)   LLRLFI=.TRUE.
(  393)   GOTO 1001
(  394) ENDIF
(  395) !
(  396) CALL LFINFO_MT64                                             &
(  397) &               (FA%LFI, IREP,KNUMER,FA%CPCASL,ILONGA,IPOSEX)
(  398) !
(  399) IF (IREP.NE.0) THEN
(  400)   LLRLFI=.TRUE.
(  401)   GOTO 1001
(  402) ELSEIF (ILONGA.EQ.0) THEN
(  403)   IREP=-60
(  404)   GOTO 1001
(  405) ELSEIF (ILONGA.NE.INPAHE) THEN
(  406)   IF (.NOT.LLMLAM) THEN
(  407)      IREP=-61
(  408)      GOTO 1001
(  409)   ENDIF      
(  410) ENDIF
(  411) !
(  412) CALL LFILEC_DR (FA%CPCASL, ZSINLA, ILONGA)
(  413) !
(  414) IF (IREP.NE.0) THEN
(  415)   LLRLFI=.TRUE.
(  416)   GOTO 1001
(  417) ENDIF
(  418) !
(  419) CALL LFINFO_MT64                                             &
(  420) &               (FA%LFI, IREP,KNUMER,FA%CPCACH,ILONGA,IPOSEX)
(  421) !
(  422) IF (IREP.NE.0) THEN
(  423)   LLRLFI=.TRUE.
(  424)   GOTO 1001
(  425) ELSEIF (ILONGA.EQ.0) THEN
(  426)   IREP=-60
(  427)   GOTO 1001
(  428) ELSEIF (ILONGA.NE.1+(1+INIVER)*2) THEN
(  429)   IF (.NOT.LLMLAM) THEN
(  430)      IREP=-61
(  431)      GOTO 1001
(  432)   ENDIF      
(  433) ENDIF
(  434) !
(  435) CALL LFILEC_DR (FA%CPCACH, ZHYBRI, ILONGA)
(  436) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 10

(  437) IF (IREP.NE.0) THEN
(  438)   LLRLFI=.TRUE.
(  439)   GOTO 1001
(  440) ENDIF
(  441) !
(  442) !        Tests complementaires sur les valeurs lues.
(  443) !
(  444) IPHASE=2
(  445) CALL FACADI_MT64                                                    &
(  446) &              (FA, IREP,CDNOMC,ITYPTR,ZCHMID(1),ZCHMID(2),         &
(  447) &               ZCHMID(3),ZCHMID(4),ITRONC,INLATI,INXLON,IRDPOL(1), &
(  448) &               IRDPOL(INPAHE+1),ZSINLA,                            &
(  449) &               INIVER,ZHYBRI(0),ZHYBRI(1),ZHYBRI(INIVER+2),        &
(  450) &               LLMODC,LLREDF,IPHASE,IRANGC,ILNOMC,IGARDE)
(  451) IF (IREP.NE.0) GOTO 1001
(  452) !*
(  453) !     2.2 - Fichier preexistant...l'identificateur du fichier est le
(  454) !           premier article suivant les articles du cadre.
(  455) !-----------------------------------------------------------------------
(  456) !
(  457) CALL LFICAS_MT64                                   &
(  458) &               (FA%LFI, IREP,KNUMER,CLNOMA,ILONGA, &
(  459) &                IPOSEX,.FALSE.)
(  460) !
(  461) IF (IREP.NE.0) THEN
(  462)   LLRLFI=.TRUE.
(  463)   GOTO 1001
(  464) ELSEIF (ILONGA.EQ.0) THEN
(  465)   IREP=-110
(  466)   GOTO 1001
(  467) ENDIF
(  468) !
(  469) !*
(  470) !     2.3 - Fichier preexistant...lecture et controle de l'article DATE.
(  471) !-----------------------------------------------------------------------
(  472) !
(  473) CALL LFINFO_MT64                                             &
(  474) &               (FA%LFI, IREP,KNUMER,FA%CPDATE,ILONGA,IPOSEX)
(  475) !
(  476) IF (IREP.NE.0) THEN
(  477)   LLRLFI=.TRUE.
(  478)   GOTO 1001
(  479) ELSEIF (ILONGA.EQ.0) THEN
(  480)   IREP=-62
(  481)   GOTO 1001
(  482) ELSEIF (ILONGA.NE.FA%JPLDAT) THEN
(  483)   IREP=-63
(  484)   GOTO 1001
(  485) ENDIF
(  486) !
(  487) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPDATE, IDATEF, FA%JPLDAT)
(  488) !
(  489) IF (IREP.NE.0) THEN
(  490)   LLRLFI=.TRUE.
(  491)   GOTO 1001
(  492) ENDIF
(  493) 
(  494) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 11

(  495) !*
(  496) !           Fichier preexistant...lecture et controle de l'article DATX.
(  497) !-----------------------------------------------------------------------
(  498) !
(  499) CALL LFINFO_MT64                                             &
(  500) &               (FA%LFI, IREP,KNUMER,FA%CPDATX,ILONGA,IPOSEX)
(  501) !
(  502) IF (IREP.NE.0) THEN
(  503)   LLRLFI=.TRUE.
(  504)   GOTO 1001
(  505) ELSEIF (ILONGA.EQ.0) THEN
(  506)   IDATXF (:) = 0
(  507)   GOTO 103
(  508) ELSEIF (ILONGA.NE.FA%JPLDAT) THEN
(  509)   IREP=-63
(  510)   GOTO 1001
(  511) ENDIF
(  512) !
(  513) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPDATX, IDATXF, FA%JPLDAT)
(  514) !
(  515) IF (IREP.NE.0) THEN
(  516)   LLRLFI=.TRUE.
(  517)   GOTO 1001
(  518) ENDIF
(  519) 
(  520) 103 CONTINUE
(  521) 
(  522) CALL NEW_FICHIER (FA, FA%FICHIER(IRANG), FA%JPLDAT, ITRONC, ITYPTR)
(  523) LLNEWF = .TRUE.
(  524) 
(  525) !
(  526) !        La ligne ci-dessous evite a FANDAI de croire, eventuellement,
(  527) !     a une redefinition de date.
(  528) !
(  529) FA%FICHIER(IRANG)%LCREAF=.TRUE.
(  530) !
(  531) !        Controle de la Date fichier, et stockage dans FA%MADATE.
(  532) !
(  533) CALL FANDAI_MT64                             &
(  534) &               (FA, IREP,IRANG,IDATEF,IDATXF,LLMODA)
(  535) IF (IREP.NE.0) GOTO 1001
(  536) !
(  537) !         Definition du Cadre proprement dite.
(  538) !
(  539) IPHASE=3
(  540) CALL FACADI_MT64                                                  &
(  541) &              (FA, IREP,CDNOMC,ITYPTR,ZCHMID(1),ZCHMID(2),         &
(  542) &               ZCHMID(3),ZCHMID(4),ITRONC,INLATI,INXLON,IRDPOL(1), &
(  543) &               IRDPOL(INPAHE+1),ZSINLA,                            &
(  544) &               INIVER,ZHYBRI(0),ZHYBRI(1),ZHYBRI(INIVER+2),        &
(  545) &               LLMODC,LLREDF,IPHASE,IRANGC,ILNOMC,IGARDE)
(  546) IF (IREP.NE.0) GOTO 1001
(  547) !**
(  548) !     3.  -  ON MET A JOUR LES TABLES RELATIVES AUX FICHIERS.
(  549) !-----------------------------------------------------------------------
(  550) !
(  551) 300 CONTINUE
(  552) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 12

(  553) ITRONC=FA%CADRE(IRANGC)%MTRONC
(  554) ITYPTR=FA%CADRE(IRANGC)%NTYPTR
(  555) 
(  556) IF (.NOT. LLNEWF) THEN
(  557)   CALL NEW_FICHIER (FA, FA%FICHIER(IRANG), FA%JPLDAT, ITRONC, ITYPTR)
(  558)   LLNEWF = .TRUE.
(  559) ENDIF
(  560) 
(  561) FA%NFIOUV=FA%NFIOUV+1
(  562) FA%NULIND(FA%NFIOUV)=IRANG
(  563) FA%FICHIER(IRANG)%NULOGI=KNUMER
(  564) FA%FICHIER(IRANG)%NUCADR=IRANGC
(  565) !
(  566) FA%FICHIER(IRANG)%LNOMME=LDNOMM
(  567) FA%FICHIER(IRANG)%NIVOMS=KNIMES
(  568) FA%FICHIER(IRANG)%LERRFA=LDERFA
(  569) FA%FICHIER(IRANG)%LCREAF=LLNOUF
(  570) FA%FICHIER(IRANG)%NBFPDG=FA%NBIPDG
(  571) FA%FICHIER(IRANG)%NBFCSP=FA%NBICSP
(  572) FA%FICHIER(IRANG)%NPUFLA=FA%NPUILA
(  573) FA%FICHIER(IRANG)%NMFDPL=FA%NMIDPL
(  574) FA%FICHIER(IRANG)%NFGRIB=FA%NIGRIB
(  575) FA%FICHIER(IRANG)%CIDENT=CLNOMA
(  576) !
(  577) IF (ITYPTR.LT.0) THEN
(  578)   FA%FICHIER(IRANG)%NSTROF=MIN (FA%NSTROI,ITRONC-1,-ITYPTR-1)
(  579) ELSE
(  580)   FA%FICHIER(IRANG)%NSTROF=MIN (FA%NSTROI,ITRONC-1)
(  581) ENDIF
(  582) !
(  583) ! Appel a FAINOC pour interpreter les eventuels defauts
(  584) ! de -1 pris par FA%NBFPDG, FA%NBFCSP, FA%NSTROF et FA%NPUFLA en
(  585) ! IRANG-ieme position.
(  586) !
(  587) CALL FAINOC_MT64            &
(  588) &               (FA,  IRANG )
(  589) !
(  590) IRANER=IRANG
(  591) IRANMS=IRANG
(  592) IPUILA=FA%FICHIER(IRANG)%NPUFLA
(  593) !
(  594) FA%FICHIER(IRANG)%NCOGRIF(:)=FA%NCODGRI(:)
(  595) FA%FICHIER(IRANG)%NRASHO = 0
(  596) FA%FICHIER(IRANG)%NRASVE = 0
(  597) !
(  598) !   L'initialisation de FLAP1Dx sera faite dans FACSIM
(  599) !
(  600) FA%FICHIER(IRANG)%LIFLAP=.TRUE.
(  601) !
(  602) !
(  603) IF (FA%LFAMUL) CALL LFIVER_MT64                                 &
(  604) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ASGN')
(  605) !
(  606) !        On incremente le nombre de fichiers attaches au cadre specifie.
(  607) !
(  608) FA%CADRE(IRANGC)%NULCAD=FA%CADRE(IRANGC)%NULCAD+1
(  609) IREP=IREPOU
(  610) GOTO 1001






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 13

(  611) !**
(  612) !     9.  - CI-DESSOUS, ETIQUETTES DE BRANCHEMENT EN CAS D'ERREUR E/S.
(  613) !-----------------------------------------------------------------------
(  614) !
(  615) CLACTI='INQUIRE'
(  616) !
(  617) !      AU CAS OU, ON FORCE LE CODE-REPONSE ENTREE/SORTIE A ETRE POSITIF.
(  618) !
(  619) IREP=ABS (IREP)
(  620) !**
(  621) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  622) !            VIA LE SOUS-PROGRAMME "LFIEMS" .
(  623) !-----------------------------------------------------------------------
(  624) !
(  625) 1001 CONTINUE
(  626) KREP=IREP
(  627) LLFATA=LLMOER (IREP,IRANER)
(  628) !
(  629) IF (LLFATA) THEN
(  630)   INIMES=2
(  631) ELSE
(  632)   INIMES=IXNVMS (IRANMS)
(  633) ENDIF
(  634) !
(  635) !           Deverrouillage global eventuel.
(  636) !
(  637) IF (LLVERG) CALL LFIVER_MT64                         &
(  638) &                           (FA%LFI, FA%VRGLAS,'OFF')
(  639) !
(  640) IF (.NOT.LLFATA.AND.INIMES.EQ.0)  THEN 
(  641)   IF (LHOOK) CALL DR_HOOK('FAITOU_MT',1,ZHOOK_HANDLE)
(  642)   RETURN
(  643) ENDIF
(  644) !
(  645) CLNSPR='FAITOU'
(  646) !
(  647) IF (INIMES.EQ.2) THEN
(  648) !
(  649)   IF (ILNOMC.GT.0) THEN
(  650)     ILACTI=MIN (INT (LEN (CLACTI), JPLIKB),ILNOMC)
(  651)     CLACTI(1:ILACTI)=CDNOMC(1:ILNOMC)
(  652)   ELSE
(  653)     ILACTI=8
(  654)     CLACTI=FA%CHAINC(:ILACTI)
(  655)   ENDIF
(  656) !
(  657)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,          &
(  658) &     '', LDNOMM= '',L1,'', CDSTTU='''''',A7,'''''', LDERFA= '',L1, &
(  659) &     '',  LDIMST= '',L1,                                           &
(  660) &         '', KNIMES='',I2,'', KNBARP='',I6,'' KNBARI='',I6)')      &
(  661) &   KREP,KNUMER,LDNOMM,CDSTTU,LDERFA,LDIMST,KNIMES,KNBARP,KNBARI
(  662)   CALL FAIPAR_MT64                                      &
(  663) &                 (FA, KNUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  664) &                  CLNSPR,CLACTI(1:ILACTI),LLRLFI)
(  665)   CLMESS='CDNOMC='''//CLACTI(1:ILACTI)//''''
(  666)   CALL FAIPAR_MT64                                     &
(  667) &                 (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  668) &               CLNSPR,CLACTI(1:ILACTI),LLRLFI)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 14

(  669) ENDIF
(  670) !
(  671) IF (LHOOK) CALL DR_HOOK('FAITOU_MT',1,ZHOOK_HANDLE)
(  672) 
(  673) CONTAINS
(  674) 
(  675) #include "facom2.llmoer.h"
(  676) #include "facom2.ixnvms.h"
(  677) 
(  678) SUBROUTINE LFILEC_DR (CDNOMA, PDONNE, KLONGA)
(  679) 
(  680) CHARACTER(LEN=*)      :: CDNOMA
(  681) INTEGER (KIND=JPLIKB) :: KLONGA
(  682) REAL (KIND=JPDBLR)    :: PDONNE (KLONGA)
(  683) REAL (KIND=JPDBLD)    :: ZDONNE (KLONGA)
(  684) 
(  685) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, CDNOMA, ZDONNE, KLONGA)
(  686) 
(  687) PDONNE = REAL (ZDONNE, JPDBLR)
(  688) 
(  689) END SUBROUTINE LFILEC_DR
(  690) 
(  691) SUBROUTINE LFIECR_RD (CDNOMA, PDONNE, KLONGA)
(  692) 
(  693) CHARACTER(LEN=*)      :: CDNOMA
(  694) INTEGER (KIND=JPLIKB) :: KLONGA
(  695) REAL (KIND=JPDBLR)    :: PDONNE (KLONGA)
(  696) REAL (KIND=JPDBLD)    :: ZDONNE (KLONGA)
(  697) 
(  698) ZDONNE = REAL (PDONNE, JPDBLD)
(  699) 
(  700) CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, CDNOMA, ZDONNE, KLONGA)
(  701) 
(  702) END SUBROUTINE LFIECR_RD
(  703) 
(  704) END SUBROUTINE FAITOU_MT64
(  705) 
(  706) 
(  707) 
(  708) ! Oct-2012 P. Marguinaud 64b LFI
(  709) SUBROUTINE FAITOU64                                      &
(  710) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  711) &           LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  712) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  713) &                   FA_COM_DEFAULT_INIT,  &
(  714) &                   NEW_FA_DEFAULT
(  715) USE LFI_PRECISION
(  716) IMPLICIT NONE
(  717) ! Arguments
(  718) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  719) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  720) LOGICAL                LDNOMM                                 ! IN   
(  721) CHARACTER (LEN=*)      CDNOMF                                 ! IN   
(  722) CHARACTER (LEN=*)      CDSTTU                                 ! IN   
(  723) LOGICAL                LDERFA                                 ! IN   
(  724) LOGICAL                LDIMST                                 ! IN   
(  725) INTEGER (KIND=JPLIKB)  KNIMES                                 ! IN   
(  726) INTEGER (KIND=JPLIKB)  KNBARP                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 15

(  727) INTEGER (KIND=JPLIKB)  KNBARI                                 !   OUT
(  728) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  729) 
(  730) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  731) 
(  732) CALL FAITOU_MT64                                             &
(  733) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  734) &           LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  735) 
(  736) END SUBROUTINE FAITOU64
(  737) 
(  738) SUBROUTINE FAITOU                                        &
(  739) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  740) &           LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  741) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  742) &                   FA_COM_DEFAULT_INIT,  &
(  743) &                   NEW_FA_DEFAULT
(  744) USE LFI_PRECISION
(  745) IMPLICIT NONE
(  746) ! Arguments
(  747) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  748) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  749) LOGICAL                LDNOMM                                 ! IN   
(  750) CHARACTER (LEN=*)      CDNOMF                                 ! IN   
(  751) CHARACTER (LEN=*)      CDSTTU                                 ! IN   
(  752) LOGICAL                LDERFA                                 ! IN   
(  753) LOGICAL                LDIMST                                 ! IN   
(  754) INTEGER (KIND=JPLIKM)  KNIMES                                 ! IN   
(  755) INTEGER (KIND=JPLIKM)  KNBARP                                 ! IN   
(  756) INTEGER (KIND=JPLIKM)  KNBARI                                 !   OUT
(  757) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  758) 
(  759) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  760) 
(  761) CALL FAITOU_MT                                                 &
(  762) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  763) &            LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  764) 
(  765) END SUBROUTINE FAITOU
(  766) 
(  767) SUBROUTINE FAITOU_MT                                           &
(  768) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  769) &            LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  770) USE FA_MOD, ONLY : FA_COM
(  771) USE LFI_PRECISION
(  772) IMPLICIT NONE
(  773) ! Arguments
(  774) TYPE (FA_COM)          FA                                     ! INOUT
(  775) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  776) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  777) LOGICAL                LDNOMM                                 ! IN   
(  778) CHARACTER (LEN=*)      CDNOMF                                 ! IN   
(  779) CHARACTER (LEN=*)      CDSTTU                                 ! IN   
(  780) LOGICAL                LDERFA                                 ! IN   
(  781) LOGICAL                LDIMST                                 ! IN   
(  782) INTEGER (KIND=JPLIKM)  KNIMES                                 ! IN   
(  783) INTEGER (KIND=JPLIKM)  KNBARP                                 ! IN   
(  784) INTEGER (KIND=JPLIKM)  KNBARI                                 !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 16

(  785) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  786) ! Local integers
(  787) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  788) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  789) INTEGER (KIND=JPLIKB)  INIMES                                 ! IN   
(  790) INTEGER (KIND=JPLIKB)  INBARP                                 ! IN   
(  791) INTEGER (KIND=JPLIKB)  INBARI                                 !   OUT
(  792) ! Convert arguments
(  793) 
(  794) INUMER     = INT (    KNUMER, JPLIKB)
(  795) INIMES     = INT (    KNIMES, JPLIKB)
(  796) INBARP     = INT (    KNBARP, JPLIKB)
(  797) 
(  798) CALL FAITOU_MT64                                              &
(  799) &          (FA, IREP, INUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  800) &           LDIMST, INIMES, INBARP, INBARI, CDNOMC)
(  801) 
(  802) KREP       = INT (      IREP, JPLIKM)
(  803) KNBARI     = INT (    INBARI, JPLIKM)
(  804) 
(  805) IF (KNUMER == 0) THEN
(  806)   KNUMER = INT (    INUMER, JPLIKM)
(  807) ENDIF
(  808) 
(  809) END SUBROUTINE FAITOU_MT
(  810) 
(  811) !INTF KREP            OUT 
(  812) !INTF KNUMER        IN    
(  813) !INTF LDNOMM        IN    
(  814) !INTF CDNOMF        IN    
(  815) !INTF CDSTTU        IN    
(  816) !INTF LDERFA        IN    
(  817) !INTF LDIMST        IN    
(  818) !INTF KNIMES        IN    
(  819) !INTF KNBARP        IN    
(  820) !INTF KNBARI          OUT 
(  821) !INTF CDNOMC        IN    



























NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 17

(    1) # 1 "faitou.F90"
(    1) ! Jan-2013 P. Marguinaud Use JNGEOM & JNEXPL parameters
(    2) ! Oct-2012 P. Marguinaud 64b LFI
(    3) ! Jan-2011 P. Marguinaud Thread-safe FA
(    4) SUBROUTINE FAITOU_MT64                                             &
(    5) &                     (FA,  KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU,  &
(    6) &                      LDERFA, LDIMST, KNIMES, KNBARP, KNBARI,     &
(    7) &                      CDNOMC)
(    8) USE FA_MOD, ONLY : FA_COM, NEW_FICHIER, JPNIIL, JNGEOM, JNEXPL
(    9) USE PARKIND1, ONLY : JPRB
(   10) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   11) USE LFI_PRECISION
(   12) IMPLICIT NONE
(   13) !****
(   14) !        Sous-programme d'OUVERTURE d'une unite logique "Fichier ARPEGE"
(   15) !     Il s'agit d'un fichier indexe, traite par le logiciel LFI.
(   16) !
(   17) !**
(   18) !     ARGUMENTS : Ce sont les memes que pour "LFIOUV", avec CDNOMC comme
(   19) !                 argument supplementaire.
(   20) !
(   21) !                 KREP   (Sortie) ==> Code-reponse du sous-programme;
(   22) !                 KNUMER (Entree) ==> Numero de l'unite logique;
(   23) !                 LDNOMM (Entree) ==> Vrai si l'unite logique doit etre
(   24) !                                     associee a un NOM de Fichier EXP-
(   25) !                                     LICITE lors de l'"OPEN" FORTRAN;
(   26) !                 CDNOMF (Entree) ==> Nom de fichier explicite, si
(   27) !                                     *LDNOMM* est VRAI - Meme si ce
(   28) !                                     n'est pas le cas, ce *DOIT* ETRE
(   29) !                                     UN OBJET DE TYPE "CHARACTER" .
(   30) !                 CDSTTU (Entree) ==> "STATUS" pour l'"OPEN" FORTRAN
(   31) !                                     ('OLD','NEW','UNKNOWN','SCRATCH')
(   32) !                                     par defaut, mettre 'UNKNOWN';
(   33) !                 LDERFA (Entree) ==> Option d'erreur fatale;
(   34) !                 LDIMST (Entree) ==> Option impression de Statistiques
(   35) !                                     au moment de la fermeture;
(   36) !                 KNIMES (Entree) ==> Niveau de la Messagerie (0,1 ou 2)
(   37) !                                     ( 0==>Rien, 2==>Tout )
(   38) !                 KNBARP (Entree) ==> Nombre d'articles logiques prevus,
(   39) !                                     ce qui n'est utilise que lors de
(   40) !                                     la Creation du fichier,
(   41) !                                     et qui n'empeche quand meme pas
(   42) !                                     d'avoir plus d'articles logiques;
(   43) !                 KNBARI (Sortie) ==> Nombre d'articles logiques de don-
(   44) !                                     nees sur le fichier, initialement.
(   45) !                                     (zero si creation)
(   46) !                 CDNOMC (Entree) ==> Nom du CADRE associe au fichier.
(   47) !*
(   48) !     N.B. :  Pour un fichier en mode creation, ce cadre doit avoir ete
(   49) !          defini au prealable (via le sous-programme FACADE, ou par
(   50) !          l'ouverture d'un fichier preexistant).
(   51) !             Pour un fichier ARPEGE preexistant, le cadre est lu sur le
(   52) !          fichier; s'il etait deja defini auparavant, il y a controle
(   53) !          de coherence entre les deux versions du cadre.
(   54) !
(   55) !
(   56) !
(   57) TYPE(FA_COM) :: FA






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 18

(   58) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIMES, KNBARP, KNBARI
(   59) !
(   60) INTEGER (KIND=JPLIKB) IRANG, IRANMS
(   61) INTEGER (KIND=JPLIKB) IREPOU, ILNOMC, ILOMIN, IREP, J
(   62) INTEGER (KIND=JPLIKB) INBARP, IRANER, IRANGC
(   63) INTEGER (KIND=JPLIKB) INPAHE, INLATI, ISULEI, INPIND
(   64) INTEGER (KIND=JPLIKB) INIVER, ILONGA
(   65) INTEGER (KIND=JPLIKB) ITRONC, ILACTI, INIMES, INXLON
(   66) INTEGER (KIND=JPLIKB) ITYPTR, IPHASE, IGARDE, IPOSEX, IPUILA
(   67) !
(   68) INTEGER (KIND=JPLIKB) IDIMEN (FA%JPCADI)
(   69) INTEGER (KIND=JPLIKB) IRDPOL (FA%JPXPAH+FA%JPXIND)
(   70) INTEGER (KIND=JPLIKB) IDATEF (FA%JPLDAT), IDATXF (FA%JPLDAT)
(   71) INTEGER (KIND=JPLIKB) ILDIMEN(FA%JPCADI),          &
(   72) &                      ILRDPOL(FA%JPXPAH+FA%JPXIND)
(   73) INTEGER (KIND=JPLIKB) ILPNVER
(   74) !
(   75) REAL (KIND=JPDBLR) ZCHMID (FA%JPCAFS), ZSINLA (FA%JPXGEO)
(   76) REAL (KIND=JPDBLR) ZHYBRI (0:(1+FA%JPXNIV)*2)
(   77) !
(   78) LOGICAL LDNOMM, LDERFA, LDIMST, LLVERG, LLNOUF, LLNOUC, LLRLFI
(   79) LOGICAL LLMODC, LLREDF, LLMODA, LLMLAM
(   80) !
(   81) CHARACTER CDNOMF*(*), CDSTTU*(*), CDNOMC*(*)
(   82) !
(   83) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   84) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   85) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   86) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   87) LOGICAL                  LLFATA
(   88) LOGICAL                  LLNEWF
(   89) # 90 "faitou.F90"
(   90) !**
(   91) !     1.  -  CONTROLES DIVERS, ET OUVERTURE DU FICHIER AU SENS "LFI".
(   92) !-----------------------------------------------------------------------
(   93) !
(   94) !     Controle sommaire sur les arguments...le reste est "sous-traite"
(   95) !     au sous-programme LFIOUV.
(   96) !
(   97) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   98) IF (LHOOK) CALL DR_HOOK('FAITOU_MT',0,ZHOOK_HANDLE)
(   99) ZHYBRI(0:(1+FA%JPXNIV)*2)=0._JPRB
(  100) CLACTI=''
(  101) LLNEWF=.FALSE.
(  102) IRANG=0
(  103) IRANER=0
(  104) IRANMS=0
(  105) IREPOU=JPNIIL
(  106) LLRLFI=.FALSE.
(  107) LLVERG=.FALSE.
(  108) ILNOMC=INT (LEN (CDNOMC), JPLIKB)
(  109) ILOMIN=MIN ( INT (LEN (CDNOMF), JPLIKB),         &
(  110) &             INT (LEN (CDSTTU), JPLIKB), ILNOMC)
(  111) !
(  112) !        L'appel ci-dessous est legerement anticipe, de maniere a
(  113) !     initialiser les variables globales du logiciel s'il s'agit
(  114) !     du premier appel a un sous-programme de ce logiciel.
(  115) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 19

(  116) CALL FANUMU_MT64                 &
(  117) &               (FA, KNUMER,IRANG)
(  118) !        Si KNUMER est nul, alors le numero d'unite logique est
(  119) !     attribu√© automatiquement
(  120) IF (KNUMER == 0) THEN
(  121)   CALL FAAUTO_MT64  (FA, KNUMER, .TRUE.)
(  122)   IRANG=0
(  123) ENDIF
(  124) !
(  125) IF (ILOMIN.LE.0) THEN
(  126)   IREP=-65
(  127)   GOTO 1001
(  128) ELSEIF (IRANG.NE.0) THEN
(  129) !
(  130) !            Controle de non-ouverture prealable (au sens du logiciel)
(  131) !
(  132)   IREP=-55
(  133)   IRANMS=IRANG
(  134)   GOTO 1001
(  135) ENDIF
(  136) !
(  137) !             Verrouillage global, si necessaire.
(  138) !
(  139) IF (FA%LFAMUL) CALL LFIVER_MT64                        &
(  140) &                              (FA%LFI, FA%VRGLAS,'ON')
(  141) LLVERG=FA%LFAMUL
(  142) !
(  143) !        A-t-on deja atteint le nombre limite de fichiers ARPEGE
(  144) !     ouverts simultanement ? Si non, on cherche un emplacement libre
(  145) !     dans la table FA%NULOGI (logiquement, il devrait en exister un)
(  146) !
(  147) IF (FA%NFIOUV.GE.FA%JPNXFA) THEN
(  148)   IREP=-56
(  149)   GOTO 1001
(  150) ELSE
(  151) !
(  152)   DO J=1,FA%JPNXFA
(  153) !
(  154)   IF (FA%FICHIER(J)%NULOGI.EQ.JPNIIL) THEN
(  155)     IRANG=J
(  156)     GOTO 102
(  157)   ENDIF
(  158) !
(  159)   ENDDO
(  160) !
(  161)   IREP=-66
(  162)   GOTO 1001
(  163) !
(  164) 102 CONTINUE
(  165) !
(  166) ENDIF
(  167) !
(  168) !              Ouverture du fichier au sens du logiciel LFI.
(  169) !     (on ajoute au nombre d'articles prevus par l'utilisateur les
(  170) !      articles constituant le cadre, la date et l'identificateur)
(  171) !
(  172) INBARP=KNBARP+7
(  173) CALL LFIOUV_MT64                                            &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 20

(  174) &               (FA%LFI, IREPOU,KNUMER,LDNOMM,CDNOMF,CDSTTU, &
(  175) &             LDERFA,LDIMST,                                 &
(  176) &             KNIMES,INBARP,KNBARI)
(  177) !
(  178) IF (IREPOU.NE.0.AND.IREPOU.NE.-11) THEN
(  179)   IREP=IREPOU
(  180)   LLRLFI=.TRUE.
(  181)   GOTO 1001
(  182) ENDIF
(  183) !**
(  184) !     2.  -  CONTROLES SPECIFIQUES AU LOGICIEL DE FICHIERS ARPEGE.
(  185) !-----------------------------------------------------------------------
(  186) !
(  187) LLNOUF=KNBARI.EQ.0
(  188) CALL FANUCA_MT64                          &
(  189) &               (FA, CDNOMC,IRANGC,.FALSE.)
(  190) LLNOUC=IRANGC.EQ.0
(  191) !
(  192) IF (LLNOUF) THEN
(  193) !
(  194)   IF (LLNOUC) THEN
(  195)     IREP=-57
(  196)     GOTO 1001
(  197)   ELSE
(  198) !
(  199) !         Fichier en mode creation et cadre predefini... OK a ce niveau.
(  200) !
(  201) !       On ecrit les articles definissant le cadre sur le fichier,
(  202) !     ainsi qu'un article ayant pour nom l'identificateur "par defaut",
(  203) !     (en fait, le nom du cadre) de maniere a ce que cet article soit
(  204) !     sequentiellement celui qui suit le dernier article du cadre.
(  205) !
(  206)     LLMLAM=FA%CADRE(IRANGC)%LIMLAM
(  207) !          
(  208)     IDIMEN(1)=FA%CADRE(IRANGC)%MTRONC
(  209)     INLATI=FA%CADRE(IRANGC)%NLATIT
(  210)     IF (.NOT.LLMLAM) THEN
(  211)        INPAHE=(1+INLATI)/2
(  212)     ELSE
(  213)        ISULEI=FA%CADRE(IRANGC)%NOZPAR(1)
(  214) !
(  215)        INPIND=2*ISULEI+4
(  216)     ENDIF                   
(  217)     IDIMEN(2)=INLATI
(  218)     IDIMEN(3)=FA%CADRE(IRANGC)%NXLOPA
(  219)     INIVER=FA%CADRE(IRANGC)%NNIVER
(  220)     IDIMEN(4)=INIVER
(  221)     IDIMEN(5)=FA%CADRE(IRANGC)%NTYPTR
(  222)     ZCHMID(1)=FA%CADRE(IRANGC)%SSLAPO
(  223)     ZCHMID(2)=FA%CADRE(IRANGC)%SCLOPO
(  224)     ZCHMID(3)=FA%CADRE(IRANGC)%SSLOPO
(  225)     ZCHMID(4)=FA%CADRE(IRANGC)%SCODIL
(  226)     ZHYBRI(0)=FA%CADRE(IRANGC)%SPREFE
(  227)     ILNOMC=FA%CADRE(IRANGC)%NLCCAD
(  228)     CLNOMA=CDNOMC
(  229) !
(  230)     IF (.NOT.LLMLAM) THEN
(  231) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 21

(  232)        DO J=1,INPAHE
(  233)        IRDPOL(J)=FA%CADRE(IRANGC)%NLOPAR(J)
(  234)        IRDPOL(INPAHE+J)=FA%CADRE(IRANGC)%NOZPAR(J)
(  235)        ZSINLA(J)=FA%CADRE(IRANGC)%SINLAT(J)
(  236)        ENDDO
(  237) !
(  238)     ELSE
(  239)        DO J=1,JNGEOM
(  240)           ZSINLA(J)=FA%CADRE(IRANGC)%SINLAT(J)
(  241)        ENDDO
(  242)        DO J=1,JNEXPL
(  243)           IRDPOL(J)=FA%CADRE(IRANGC)%NLOPAR(J)
(  244)        ENDDO
(  245)        DO J=1,INPIND
(  246)           IRDPOL(JNEXPL+J)=FA%CADRE(IRANGC)%NOZPAR(J)
(  247)        ENDDO
(  248) !
(  249)     ENDIF
(  250) !
(  251)     DO J=0,INIVER
(  252)     ZHYBRI(J+1)=FA%CADRE(IRANGC)%SFOHYB(1,J)
(  253)     ZHYBRI(J+2+INIVER)=FA%CADRE(IRANGC)%SFOHYB(2,J)
(  254)     ENDDO
(  255) !
(  256)     LLRLFI=.TRUE.
(  257)     ILDIMEN=IDIMEN
(  258)     CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, FA%CPCADI, ILDIMEN, FA%JPCADI)
(  259)     IDIMEN=ILDIMEN
(  260)     IF (IREP.NE.0) GOTO 1001
(  261) !
(  262)     CALL LFIECR_RD (FA%CPCAFS, ZCHMID, FA%JPCAFS)
(  263)     IF (IREP.NE.0) GOTO 1001
(  264) !
(  265)    IF (.NOT.LLMLAM) THEN
(  266) !
(  267)        ILONGA=INPAHE*2
(  268)        ILRDPOL=IRDPOL
(  269)        CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, FA%CPCARP, ILRDPOL, ILONGA)
(  270)        IRDPOL=ILRDPOL
(  271)        IF (IREP.NE.0) GOTO 1001
(  272) !
(  273)        ILONGA=INPAHE
(  274)        CALL LFIECR_RD (FA%CPCASL, ZSINLA, ILONGA)
(  275)        IF (IREP.NE.0) GOTO 1001
(  276) !
(  277)     ELSE
(  278) !
(  279)        ILONGA=JNEXPL+INPIND
(  280)        ILRDPOL=IRDPOL
(  281)        CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, FA%CPCARP, ILRDPOL, ILONGA)
(  282)        IRDPOL=ILRDPOL
(  283)        IF (IREP.NE.0) GOTO 1001
(  284) !
(  285)        ILONGA=JNGEOM
(  286)        CALL LFIECR_RD (FA%CPCASL, ZSINLA, ILONGA)
(  287)        IF (IREP.NE.0) GOTO 1001
(  288) !
(  289)     ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 22

(  290) !           
(  291)     ILONGA=1+(1+INIVER)*2
(  292)     CALL LFIECR_RD (FA%CPCACH, ZHYBRI, ILONGA)
(  293)     IF (IREP.NE.0) GOTO 1001
(  294) !
(  295)     ILPNVER=FA%JPNVER
(  296)     CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, CLNOMA(1:ILNOMC), ILPNVER, 1_JPLIKB)
(  297)     IF (IREP.NE.0) GOTO 1001
(  298) !
(  299)     LLRLFI=.FALSE.
(  300)     GOTO 300
(  301)   ENDIF
(  302) !
(  303) ENDIF
(  304) !*
(  305) !     2.1 - Fichier preexistant...lecture et controle du Cadre "Fichier"
(  306) !-----------------------------------------------------------------------
(  307) !
(  308) CALL LFINFO_MT64                                             &
(  309) &               (FA%LFI, IREP,KNUMER,FA%CPCADI,ILONGA,IPOSEX)
(  310) !
(  311) IF (IREP.NE.0) THEN
(  312)   LLRLFI=.TRUE.
(  313)   GOTO 1001
(  314) ELSEIF (ILONGA.EQ.0) THEN
(  315)   IREP=-60
(  316)   GOTO 1001
(  317) ELSEIF (ILONGA.NE.FA%JPCADI) THEN
(  318)   IREP=-61
(  319)   GOTO 1001
(  320) ENDIF
(  321) !
(  322) ILDIMEN=IDIMEN
(  323) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPCADI, ILDIMEN, FA%JPCADI)
(  324) IDIMEN=ILDIMEN
(  325) !
(  326) IF (IREP.NE.0) THEN
(  327)   LLRLFI=.TRUE.
(  328)   GOTO 1001
(  329) ENDIF
(  330) !
(  331) CALL LFINFO_MT64 (FA%LFI, IREP, KNUMER, FA%CPCAFS, ILONGA, IPOSEX)
(  332) !
(  333) IF (IREP.NE.0) THEN
(  334)   LLRLFI=.TRUE.
(  335)   GOTO 1001
(  336) ELSEIF (ILONGA.EQ.0) THEN
(  337)   IREP=-60
(  338)   GOTO 1001
(  339) ELSEIF (ILONGA.NE.FA%JPCAFS) THEN
(  340)   IREP=-61
(  341)   GOTO 1001
(  342) ENDIF
(  343) !
(  344) CALL LFILEC_DR (FA%CPCAFS, ZCHMID, FA%JPCAFS)
(  345) !
(  346) IF (IREP.NE.0) THEN
(  347)   LLRLFI=.TRUE.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 23

(  348)   GOTO 1001
(  349) ENDIF
(  350) !
(  351) !        Coherence des dimensions par rapport aux valeurs "licites",
(  352) !     que l'on doit faire avant de poursuivre les lectures.
(  353) !
(  354) IF(IDIMEN(5).LE.0) LLMLAM = .TRUE.
(  355) ITRONC=IDIMEN(1)
(  356) INLATI=IDIMEN(2)
(  357) INPAHE=(1+INLATI)/2
(  358) INXLON=IDIMEN(3)
(  359) INIVER=IDIMEN(4)
(  360) ITYPTR=IDIMEN(5)
(  361) IPHASE=1
(  362) IGARDE=1
(  363) CALL FACADI_MT64                                                    &
(  364) &              (FA, IREP,CDNOMC,ITYPTR,ZCHMID(1),ZCHMID(2),         &
(  365) &               ZCHMID(3),ZCHMID(4),ITRONC,INLATI,INXLON,IRDPOL(1), &
(  366) &               IRDPOL(FA%JPXPAH+1),ZSINLA,                         &
(  367) &               INIVER,ZHYBRI(0),ZHYBRI(1),ZHYBRI(FA%JPXNIV+2),     &
(  368) &               LLMODC,LLREDF,IPHASE,IRANGC,ILNOMC,IGARDE)
(  369) IF (IREP.NE.0) GOTO 1001
(  370) !
(  371) CALL LFINFO_MT64                                             &
(  372) &               (FA%LFI, IREP,KNUMER,FA%CPCARP,ILONGA,IPOSEX)
(  373) !
(  374) IF (IREP.NE.0) THEN
(  375)   LLRLFI=.TRUE.
(  376)   GOTO 1001
(  377) ELSEIF (ILONGA.EQ.0) THEN
(  378)   IREP=-60
(  379)   GOTO 1001
(  380) ELSEIF (ILONGA.NE.INPAHE*2) THEN
(  381)   IF (.NOT.LLMLAM) THEN
(  382)      IREP=-61
(  383)      GOTO 1001
(  384)   ENDIF    
(  385) ENDIF
(  386) !
(  387) ILRDPOL=IRDPOL
(  388) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPCARP, ILRDPOL, ILONGA)
(  389) IRDPOL=ILRDPOL
(  390) !
(  391) IF (IREP.NE.0) THEN
(  392)   LLRLFI=.TRUE.
(  393)   GOTO 1001
(  394) ENDIF
(  395) !
(  396) CALL LFINFO_MT64                                             &
(  397) &               (FA%LFI, IREP,KNUMER,FA%CPCASL,ILONGA,IPOSEX)
(  398) !
(  399) IF (IREP.NE.0) THEN
(  400)   LLRLFI=.TRUE.
(  401)   GOTO 1001
(  402) ELSEIF (ILONGA.EQ.0) THEN
(  403)   IREP=-60
(  404)   GOTO 1001
(  405) ELSEIF (ILONGA.NE.INPAHE) THEN






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 24

(  406)   IF (.NOT.LLMLAM) THEN
(  407)      IREP=-61
(  408)      GOTO 1001
(  409)   ENDIF      
(  410) ENDIF
(  411) !
(  412) CALL LFILEC_DR (FA%CPCASL, ZSINLA, ILONGA)
(  413) !
(  414) IF (IREP.NE.0) THEN
(  415)   LLRLFI=.TRUE.
(  416)   GOTO 1001
(  417) ENDIF
(  418) !
(  419) CALL LFINFO_MT64                                             &
(  420) &               (FA%LFI, IREP,KNUMER,FA%CPCACH,ILONGA,IPOSEX)
(  421) !
(  422) IF (IREP.NE.0) THEN
(  423)   LLRLFI=.TRUE.
(  424)   GOTO 1001
(  425) ELSEIF (ILONGA.EQ.0) THEN
(  426)   IREP=-60
(  427)   GOTO 1001
(  428) ELSEIF (ILONGA.NE.1+(1+INIVER)*2) THEN
(  429)   IF (.NOT.LLMLAM) THEN
(  430)      IREP=-61
(  431)      GOTO 1001
(  432)   ENDIF      
(  433) ENDIF
(  434) !
(  435) CALL LFILEC_DR (FA%CPCACH, ZHYBRI, ILONGA)
(  436) !
(  437) IF (IREP.NE.0) THEN
(  438)   LLRLFI=.TRUE.
(  439)   GOTO 1001
(  440) ENDIF
(  441) !
(  442) !        Tests complementaires sur les valeurs lues.
(  443) !
(  444) IPHASE=2
(  445) CALL FACADI_MT64                                                    &
(  446) &              (FA, IREP,CDNOMC,ITYPTR,ZCHMID(1),ZCHMID(2),         &
(  447) &               ZCHMID(3),ZCHMID(4),ITRONC,INLATI,INXLON,IRDPOL(1), &
(  448) &               IRDPOL(INPAHE+1),ZSINLA,                            &
(  449) &               INIVER,ZHYBRI(0),ZHYBRI(1),ZHYBRI(INIVER+2),        &
(  450) &               LLMODC,LLREDF,IPHASE,IRANGC,ILNOMC,IGARDE)
(  451) IF (IREP.NE.0) GOTO 1001
(  452) !*
(  453) !     2.2 - Fichier preexistant...l'identificateur du fichier est le
(  454) !           premier article suivant les articles du cadre.
(  455) !-----------------------------------------------------------------------
(  456) !
(  457) CALL LFICAS_MT64                                   &
(  458) &               (FA%LFI, IREP,KNUMER,CLNOMA,ILONGA, &
(  459) &                IPOSEX,.FALSE.)
(  460) !
(  461) IF (IREP.NE.0) THEN
(  462)   LLRLFI=.TRUE.
(  463)   GOTO 1001






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 25

(  464) ELSEIF (ILONGA.EQ.0) THEN
(  465)   IREP=-110
(  466)   GOTO 1001
(  467) ENDIF
(  468) !
(  469) !*
(  470) !     2.3 - Fichier preexistant...lecture et controle de l'article DATE.
(  471) !-----------------------------------------------------------------------
(  472) !
(  473) CALL LFINFO_MT64                                             &
(  474) &               (FA%LFI, IREP,KNUMER,FA%CPDATE,ILONGA,IPOSEX)
(  475) !
(  476) IF (IREP.NE.0) THEN
(  477)   LLRLFI=.TRUE.
(  478)   GOTO 1001
(  479) ELSEIF (ILONGA.EQ.0) THEN
(  480)   IREP=-62
(  481)   GOTO 1001
(  482) ELSEIF (ILONGA.NE.FA%JPLDAT) THEN
(  483)   IREP=-63
(  484)   GOTO 1001
(  485) ENDIF
(  486) !
(  487) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPDATE, IDATEF, FA%JPLDAT)
(  488) !
(  489) IF (IREP.NE.0) THEN
(  490)   LLRLFI=.TRUE.
(  491)   GOTO 1001
(  492) ENDIF
(  493) # 494 "faitou.F90"
(  494) !
(  495) !*
(  496) !           Fichier preexistant...lecture et controle de l'article DATX.
(  497) !-----------------------------------------------------------------------
(  498) !
(  499) CALL LFINFO_MT64                                             &
(  500) &               (FA%LFI, IREP,KNUMER,FA%CPDATX,ILONGA,IPOSEX)
(  501) !
(  502) IF (IREP.NE.0) THEN
(  503)   LLRLFI=.TRUE.
(  504)   GOTO 1001
(  505) ELSEIF (ILONGA.EQ.0) THEN
(  506)   IDATXF (:) = 0
(  507)   GOTO 103
(  508) ELSEIF (ILONGA.NE.FA%JPLDAT) THEN
(  509)   IREP=-63
(  510)   GOTO 1001
(  511) ENDIF
(  512) !
(  513) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, FA%CPDATX, IDATXF, FA%JPLDAT)
(  514) !
(  515) IF (IREP.NE.0) THEN
(  516)   LLRLFI=.TRUE.
(  517)   GOTO 1001
(  518) ENDIF
(  519) # 520 "faitou.F90"
(  520) 103 CONTINUE
(  521) # 522 "faitou.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 26

(  522) CALL NEW_FICHIER (FA, FA%FICHIER(IRANG), FA%JPLDAT, ITRONC, ITYPTR)
(  523) LLNEWF = .TRUE.
(  524) # 525 "faitou.F90"
(  525) !
(  526) !        La ligne ci-dessous evite a FANDAI de croire, eventuellement,
(  527) !     a une redefinition de date.
(  528) !
(  529) FA%FICHIER(IRANG)%LCREAF=.TRUE.
(  530) !
(  531) !        Controle de la Date fichier, et stockage dans FA%MADATE.
(  532) !
(  533) CALL FANDAI_MT64                             &
(  534) &               (FA, IREP,IRANG,IDATEF,IDATXF,LLMODA)
(  535) IF (IREP.NE.0) GOTO 1001
(  536) !
(  537) !         Definition du Cadre proprement dite.
(  538) !
(  539) IPHASE=3
(  540) CALL FACADI_MT64                                                  &
(  541) &              (FA, IREP,CDNOMC,ITYPTR,ZCHMID(1),ZCHMID(2),         &
(  542) &               ZCHMID(3),ZCHMID(4),ITRONC,INLATI,INXLON,IRDPOL(1), &
(  543) &               IRDPOL(INPAHE+1),ZSINLA,                            &
(  544) &               INIVER,ZHYBRI(0),ZHYBRI(1),ZHYBRI(INIVER+2),        &
(  545) &               LLMODC,LLREDF,IPHASE,IRANGC,ILNOMC,IGARDE)
(  546) IF (IREP.NE.0) GOTO 1001
(  547) !**
(  548) !     3.  -  ON MET A JOUR LES TABLES RELATIVES AUX FICHIERS.
(  549) !-----------------------------------------------------------------------
(  550) !
(  551) 300 CONTINUE
(  552) !
(  553) ITRONC=FA%CADRE(IRANGC)%MTRONC
(  554) ITYPTR=FA%CADRE(IRANGC)%NTYPTR
(  555) # 556 "faitou.F90"
(  556) IF (.NOT. LLNEWF) THEN
(  557)   CALL NEW_FICHIER (FA, FA%FICHIER(IRANG), FA%JPLDAT, ITRONC, ITYPTR)
(  558)   LLNEWF = .TRUE.
(  559) ENDIF
(  560) # 561 "faitou.F90"
(  561) FA%NFIOUV=FA%NFIOUV+1
(  562) FA%NULIND(FA%NFIOUV)=IRANG
(  563) FA%FICHIER(IRANG)%NULOGI=KNUMER
(  564) FA%FICHIER(IRANG)%NUCADR=IRANGC
(  565) !
(  566) FA%FICHIER(IRANG)%LNOMME=LDNOMM
(  567) FA%FICHIER(IRANG)%NIVOMS=KNIMES
(  568) FA%FICHIER(IRANG)%LERRFA=LDERFA
(  569) FA%FICHIER(IRANG)%LCREAF=LLNOUF
(  570) FA%FICHIER(IRANG)%NBFPDG=FA%NBIPDG
(  571) FA%FICHIER(IRANG)%NBFCSP=FA%NBICSP
(  572) FA%FICHIER(IRANG)%NPUFLA=FA%NPUILA
(  573) FA%FICHIER(IRANG)%NMFDPL=FA%NMIDPL
(  574) FA%FICHIER(IRANG)%NFGRIB=FA%NIGRIB
(  575) FA%FICHIER(IRANG)%CIDENT=CLNOMA
(  576) !
(  577) IF (ITYPTR.LT.0) THEN
(  578)   FA%FICHIER(IRANG)%NSTROF=MIN (FA%NSTROI,ITRONC-1,-ITYPTR-1)
(  579) ELSE






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 27

(  580)   FA%FICHIER(IRANG)%NSTROF=MIN (FA%NSTROI,ITRONC-1)
(  581) ENDIF
(  582) !
(  583) ! Appel a FAINOC pour interpreter les eventuels defauts
(  584) ! de -1 pris par FA%NBFPDG, FA%NBFCSP, FA%NSTROF et FA%NPUFLA en
(  585) ! IRANG-ieme position.
(  586) !
(  587) CALL FAINOC_MT64            &
(  588) &               (FA,  IRANG )
(  589) !
(  590) IRANER=IRANG
(  591) IRANMS=IRANG
(  592) IPUILA=FA%FICHIER(IRANG)%NPUFLA
(  593) !
(  594) FA%FICHIER(IRANG)%NCOGRIF(:)=FA%NCODGRI(:)
(  595) FA%FICHIER(IRANG)%NRASHO = 0
(  596) FA%FICHIER(IRANG)%NRASVE = 0
(  597) !
(  598) !   L'initialisation de FLAP1Dx sera faite dans FACSIM
(  599) !
(  600) FA%FICHIER(IRANG)%LIFLAP=.TRUE.
(  601) !
(  602) !
(  603) IF (FA%LFAMUL) CALL LFIVER_MT64                                 &
(  604) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ASGN')
(  605) !
(  606) !        On incremente le nombre de fichiers attaches au cadre specifie.
(  607) !
(  608) FA%CADRE(IRANGC)%NULCAD=FA%CADRE(IRANGC)%NULCAD+1
(  609) IREP=IREPOU
(  610) GOTO 1001
(  611) !**
(  612) !     9.  - CI-DESSOUS, ETIQUETTES DE BRANCHEMENT EN CAS D'ERREUR E/S.
(  613) !-----------------------------------------------------------------------
(  614) !
(  615) CLACTI='INQUIRE'
(  616) !
(  617) !      AU CAS OU, ON FORCE LE CODE-REPONSE ENTREE/SORTIE A ETRE POSITIF.
(  618) !
(  619) IREP=ABS (IREP)
(  620) !**
(  621) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  622) !            VIA LE SOUS-PROGRAMME "LFIEMS" .
(  623) !-----------------------------------------------------------------------
(  624) !
(  625) 1001 CONTINUE
(  626) KREP=IREP
(  627) LLFATA=LLMOER (IREP,IRANER)
(  628) !
(  629) IF (LLFATA) THEN
(  630)   INIMES=2
(  631) ELSE
(  632)   INIMES=IXNVMS (IRANMS)
(  633) ENDIF
(  634) !
(  635) !           Deverrouillage global eventuel.
(  636) !
(  637) IF (LLVERG) CALL LFIVER_MT64                         &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 28

(  638) &                           (FA%LFI, FA%VRGLAS,'OFF')
(  639) !
(  640) IF (.NOT.LLFATA.AND.INIMES.EQ.0)  THEN 
(  641)   IF (LHOOK) CALL DR_HOOK('FAITOU_MT',1,ZHOOK_HANDLE)
(  642)   RETURN
(  643) ENDIF
(  644) !
(  645) CLNSPR='FAITOU'
(  646) !
(  647) IF (INIMES.EQ.2) THEN
(  648) !
(  649)   IF (ILNOMC.GT.0) THEN
(  650)     ILACTI=MIN (INT (LEN (CLACTI), JPLIKB),ILNOMC)
(  651)     CLACTI(1:ILACTI)=CDNOMC(1:ILNOMC)
(  652)   ELSE
(  653)     ILACTI=8
(  654)     CLACTI=FA%CHAINC(:ILACTI)
(  655)   ENDIF
(  656) !
(  657)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,          &
(  658) &     '', LDNOMM= '',L1,'', CDSTTU='''''',A7,'''''', LDERFA= '',L1, &
(  659) &     '',  LDIMST= '',L1,                                           &
(  660) &         '', KNIMES='',I2,'', KNBARP='',I6,'' KNBARI='',I6)')      &
(  661) &   KREP,KNUMER,LDNOMM,CDSTTU,LDERFA,LDIMST,KNIMES,KNBARP,KNBARI
(  662)   CALL FAIPAR_MT64                                      &
(  663) &                 (FA, KNUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  664) &                  CLNSPR,CLACTI(1:ILACTI),LLRLFI)
(  665)   CLMESS='CDNOMC='''//CLACTI(1:ILACTI)//''''
(  666)   CALL FAIPAR_MT64                                     &
(  667) &                 (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  668) &               CLNSPR,CLACTI(1:ILACTI),LLRLFI)
(  669) ENDIF
(  670) !
(  671) IF (LHOOK) CALL DR_HOOK('FAITOU_MT',1,ZHOOK_HANDLE)
(  672) # 673 "faitou.F90"
(  673) CONTAINS
(  674) # 675 "faitou.F90"
(  675) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 676 "faitou.F90"
(  676) # 676 "faitou.F90"
(  676) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 29

(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 677 "faitou.F90"
(  677) # 678 "faitou.F90"
(  678) SUBROUTINE LFILEC_DR (CDNOMA, PDONNE, KLONGA)
(  679) # 680 "faitou.F90"
(  680) CHARACTER(LEN=*)      :: CDNOMA
(  681) INTEGER (KIND=JPLIKB) :: KLONGA
(  682) REAL (KIND=JPDBLR)    :: PDONNE (KLONGA)
(  683) REAL (KIND=JPDBLD)    :: ZDONNE (KLONGA)
(  684) # 685 "faitou.F90"
(  685) CALL LFILEC_MT64 (FA%LFI, IREP, KNUMER, CDNOMA, ZDONNE, KLONGA)
(  686) # 687 "faitou.F90"
(  687) PDONNE = REAL (ZDONNE, JPDBLR)
(  688) # 689 "faitou.F90"
(  689) END SUBROUTINE LFILEC_DR
(  690) # 691 "faitou.F90"
(  691) SUBROUTINE LFIECR_RD (CDNOMA, PDONNE, KLONGA)
(  692) # 693 "faitou.F90"
(  693) CHARACTER(LEN=*)      :: CDNOMA
(  694) INTEGER (KIND=JPLIKB) :: KLONGA
(  695) REAL (KIND=JPDBLR)    :: PDONNE (KLONGA)
(  696) REAL (KIND=JPDBLD)    :: ZDONNE (KLONGA)
(  697) # 698 "faitou.F90"
(  698) ZDONNE = REAL (PDONNE, JPDBLD)
(  699) # 700 "faitou.F90"
(  700) CALL LFIECR_MT64 (FA%LFI, IREP, KNUMER, CDNOMA, ZDONNE, KLONGA)
(  701) # 702 "faitou.F90"
(  702) END SUBROUTINE LFIECR_RD
(  703) # 704 "faitou.F90"
(  704) END SUBROUTINE FAITOU_MT64
(  705) # 708 "faitou.F90"
(  708) ! Oct-2012 P. Marguinaud 64b LFI
(  709) SUBROUTINE FAITOU64                                      &
(  710) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  711) &           LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  712) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  713) &                   FA_COM_DEFAULT_INIT,  &
(  714) &                   NEW_FA_DEFAULT
(  715) USE LFI_PRECISION
(  716) IMPLICIT NONE
(  717) ! Arguments
(  718) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  719) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  720) LOGICAL                LDNOMM                                 ! IN   
(  721) CHARACTER (LEN=*)      CDNOMF                                 ! IN   
(  722) CHARACTER (LEN=*)      CDSTTU                                 ! IN   
(  723) LOGICAL                LDERFA                                 ! IN   
(  724) LOGICAL                LDIMST                                 ! IN   
(  725) INTEGER (KIND=JPLIKB)  KNIMES                                 ! IN   
(  726) INTEGER (KIND=JPLIKB)  KNBARP                                 ! IN   
(  727) INTEGER (KIND=JPLIKB)  KNBARI                                 !   OUT
(  728) CHARACTER (LEN=*)      CDNOMC                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 30

(  729) # 730 "faitou.F90"
(  730) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  731) # 732 "faitou.F90"
(  732) CALL FAITOU_MT64                                             &
(  733) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  734) &           LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  735) # 736 "faitou.F90"
(  736) END SUBROUTINE FAITOU64
(  737) # 738 "faitou.F90"
(  738) SUBROUTINE FAITOU                                        &
(  739) &           (KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  740) &           LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  741) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  742) &                   FA_COM_DEFAULT_INIT,  &
(  743) &                   NEW_FA_DEFAULT
(  744) USE LFI_PRECISION
(  745) IMPLICIT NONE
(  746) ! Arguments
(  747) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  748) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  749) LOGICAL                LDNOMM                                 ! IN   
(  750) CHARACTER (LEN=*)      CDNOMF                                 ! IN   
(  751) CHARACTER (LEN=*)      CDSTTU                                 ! IN   
(  752) LOGICAL                LDERFA                                 ! IN   
(  753) LOGICAL                LDIMST                                 ! IN   
(  754) INTEGER (KIND=JPLIKM)  KNIMES                                 ! IN   
(  755) INTEGER (KIND=JPLIKM)  KNBARP                                 ! IN   
(  756) INTEGER (KIND=JPLIKM)  KNBARI                                 !   OUT
(  757) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  758) # 759 "faitou.F90"
(  759) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  760) # 761 "faitou.F90"
(  761) CALL FAITOU_MT                                                 &
(  762) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  763) &            LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  764) # 765 "faitou.F90"
(  765) END SUBROUTINE FAITOU
(  766) # 767 "faitou.F90"
(  767) SUBROUTINE FAITOU_MT                                           &
(  768) &           (FA, KREP, KNUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  769) &            LDIMST, KNIMES, KNBARP, KNBARI, CDNOMC)
(  770) USE FA_MOD, ONLY : FA_COM
(  771) USE LFI_PRECISION
(  772) IMPLICIT NONE
(  773) ! Arguments
(  774) TYPE (FA_COM)          FA                                     ! INOUT
(  775) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  776) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  777) LOGICAL                LDNOMM                                 ! IN   
(  778) CHARACTER (LEN=*)      CDNOMF                                 ! IN   
(  779) CHARACTER (LEN=*)      CDSTTU                                 ! IN   
(  780) LOGICAL                LDERFA                                 ! IN   
(  781) LOGICAL                LDIMST                                 ! IN   
(  782) INTEGER (KIND=JPLIKM)  KNIMES                                 ! IN   
(  783) INTEGER (KIND=JPLIKM)  KNBARP                                 ! IN   
(  784) INTEGER (KIND=JPLIKM)  KNBARI                                 !   OUT
(  785) CHARACTER (LEN=*)      CDNOMC                                 ! IN   
(  786) ! Local integers






NVFORTRAN (Version     23.1)          02/24/2023  13:54:53      page 31

(  787) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  788) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  789) INTEGER (KIND=JPLIKB)  INIMES                                 ! IN   
(  790) INTEGER (KIND=JPLIKB)  INBARP                                 ! IN   
(  791) INTEGER (KIND=JPLIKB)  INBARI                                 !   OUT
(  792) ! Convert arguments
(  793) # 794 "faitou.F90"
(  794) INUMER     = INT (    KNUMER, JPLIKB)
(  795) INIMES     = INT (    KNIMES, JPLIKB)
(  796) INBARP     = INT (    KNBARP, JPLIKB)
(  797) # 798 "faitou.F90"
(  798) CALL FAITOU_MT64                                              &
(  799) &          (FA, IREP, INUMER, LDNOMM, CDNOMF, CDSTTU, LDERFA, &
(  800) &           LDIMST, INIMES, INBARP, INBARI, CDNOMC)
(  801) # 802 "faitou.F90"
(  802) KREP       = INT (      IREP, JPLIKM)
(  803) KNBARI     = INT (    INBARI, JPLIKM)
(  804) # 805 "faitou.F90"
(  805) IF (KNUMER == 0) THEN
(  806)   KNUMER = INT (    INUMER, JPLIKM)
(  807) ENDIF
(  808) # 809 "faitou.F90"
(  809) END SUBROUTINE FAITOU_MT
(  810) # 811 "faitou.F90"
(  811) !INTF KREP            OUT 
(  812) !INTF KNUMER        IN    
(  813) !INTF LDNOMM        IN    
(  814) !INTF CDNOMF        IN    
(  815) !INTF CDSTTU        IN    
(  816) !INTF LDERFA        IN    
(  817) !INTF LDIMST        IN    
(  818) !INTF KNIMES        IN    
(  819) !INTF KNBARP        IN    
(  820) !INTF KNBARI          OUT 
(  821) !INTF CDNOMC        IN    
