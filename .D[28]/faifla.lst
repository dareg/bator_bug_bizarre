


NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: faifla.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAIFLA_MT64           &
(    4) &                     (FA, KRANG)
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme est charge des Initialisations des
(   12) !     tableaux FLAp1d., utilises pour aplatir le spectre des champs
(   13) !     d'un fichier avant le compactage (coefficients spectraux seulement).
(   14) !**
(   15) !
(   16) !
(   17) !**
(   18) !     ARGUMENTS :    KRANG  (Entree) ==> Rang de l'unite logique
(   19) !
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KRANG
(   25) !
(   26) INTEGER (KIND=JPLIKB) J, IRANGC, IPUILA, ITRONC
(   27) 
(   28) !
(   29) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   30) IF (LHOOK) CALL DR_HOOK('FAIFLA_MT',0,ZHOOK_HANDLE)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 3

(   31) !
(   32) IPUILA = FA%FICHIER(KRANG)%NPUFLA
(   33) IRANGC = FA%FICHIER(KRANG)%NUCADR
(   34) ITRONC = FA%CADRE(IRANGC)%MTRONC
(   35) !
(   36) IF (.NOT. ASSOCIATED (FA%FICHIER(KRANG)%FLAP1D)) &
(   37) & ALLOCATE (FA%FICHIER(KRANG)%FLAP1D (ITRONC))
(   38) IF (.NOT. ASSOCIATED (FA%FICHIER(KRANG)%FLAP1DA)) &
(   39) & ALLOCATE (FA%FICHIER(KRANG)%FLAP1DA (FA%JPXTRO*FA%JPXTRO))
(   40) 
(   41) !
(   42) IF (IPUILA.GT.0) THEN
(   43) !
(   44) !NEC$ ivdep
(   45)   DO J=1,ITRONC
(   46)     FA%FICHIER(KRANG)%FLAP1D(J)=FA%XLAP1D(J,0)**IPUILA
(   47)   ENDDO
(   48) !NEC$ ivdep
(   49)   DO J=1,FA%JPXTRO*FA%JPXTRO
(   50)     FA%FICHIER(KRANG)%FLAP1DA(J)=FA%XLAP1DA(J,0)**IPUILA
(   51)   ENDDO
(   52) !
(   53) ELSEIF (IPUILA.LT.0) THEN
(   54) !
(   55) !NEC$ ivdep
(   56)   DO J=1,ITRONC
(   57)     FA%FICHIER(KRANG)%FLAP1D(J)=FA%XLAP1D(J,1)**(-IPUILA)
(   58)   ENDDO
(   59) !NEC$ ivdep
(   60)   DO J=1,FA%JPXTRO*FA%JPXTRO
(   61)     FA%FICHIER(KRANG)%FLAP1DA(J)=FA%XLAP1DA(J,1)**(-IPUILA)
(   62)   ENDDO
(   63) !
(   64) ENDIF
(   65) !
(   66) IF (LHOOK) CALL DR_HOOK('FAIFLA_MT',1,ZHOOK_HANDLE)
(   67) END SUBROUTINE FAIFLA_MT64
(   68) 
(   69) 
(   70) 
(   71) ! Oct-2012 P. Marguinaud 64b LFI
(   72) SUBROUTINE FAIFLA64           &
(   73) &           (KRANG)
(   74) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   75) &                   FA_COM_DEFAULT_INIT,  &
(   76) &                   NEW_FA_DEFAULT
(   77) USE LFI_PRECISION
(   78) IMPLICIT NONE
(   79) ! Arguments
(   80) INTEGER (KIND=JPLIKB)  KRANG                                  ! IN   
(   81) 
(   82) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(   83) 
(   84) CALL FAIFLA_MT64           &
(   85) &           (FA, KRANG)
(   86) 
(   87) END SUBROUTINE FAIFLA64
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 4

(   89) SUBROUTINE FAIFLA             &
(   90) &           (KRANG)
(   91) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   92) &                   FA_COM_DEFAULT_INIT,  &
(   93) &                   NEW_FA_DEFAULT
(   94) USE LFI_PRECISION
(   95) IMPLICIT NONE
(   96) ! Arguments
(   97) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(   98) 
(   99) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  100) 
(  101) CALL FAIFLA_MT             &
(  102) &           (FA, KRANG)
(  103) 
(  104) END SUBROUTINE FAIFLA
(  105) 
(  106) SUBROUTINE FAIFLA_MT             &
(  107) &           (FA, KRANG)
(  108) USE FA_MOD, ONLY : FA_COM
(  109) USE LFI_PRECISION
(  110) IMPLICIT NONE
(  111) ! Arguments
(  112) TYPE (FA_COM)          FA                                     ! INOUT
(  113) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  114) ! Local integers
(  115) INTEGER (KIND=JPLIKB)  IRANG                                  ! IN   
(  116) ! Convert arguments
(  117) 
(  118) IRANG      = INT (     KRANG, JPLIKB)
(  119) 
(  120) CALL FAIFLA_MT64           &
(  121) &           (FA, IRANG)
(  122) 
(  123) 
(  124) END SUBROUTINE FAIFLA_MT
(  125) 
(  126) !INTF KRANG         IN    


























NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 5

(    1) # 1 "faifla.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAIFLA_MT64           &
(    4) &                     (FA, KRANG)
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme est charge des Initialisations des
(   12) !     tableaux FLAp1d., utilises pour aplatir le spectre des champs
(   13) !     d'un fichier avant le compactage (coefficients spectraux seulement).
(   14) !**
(   15) !
(   16) !
(   17) !**
(   18) !     ARGUMENTS :    KRANG  (Entree) ==> Rang de l'unite logique
(   19) !
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KRANG
(   25) !
(   26) INTEGER (KIND=JPLIKB) J, IRANGC, IPUILA, ITRONC
(   27) # 28 "faifla.F90"
(   28) !
(   29) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   30) IF (LHOOK) CALL DR_HOOK('FAIFLA_MT',0,ZHOOK_HANDLE)
(   31) !
(   32) IPUILA = FA%FICHIER(KRANG)%NPUFLA
(   33) IRANGC = FA%FICHIER(KRANG)%NUCADR
(   34) ITRONC = FA%CADRE(IRANGC)%MTRONC
(   35) !
(   36) IF (.NOT. ASSOCIATED (FA%FICHIER(KRANG)%FLAP1D)) &
(   37) & ALLOCATE (FA%FICHIER(KRANG)%FLAP1D (ITRONC))
(   38) IF (.NOT. ASSOCIATED (FA%FICHIER(KRANG)%FLAP1DA)) &
(   39) & ALLOCATE (FA%FICHIER(KRANG)%FLAP1DA (FA%JPXTRO*FA%JPXTRO))
(   40) # 41 "faifla.F90"
(   41) !
(   42) IF (IPUILA.GT.0) THEN
(   43) !
(   44) !NEC$ ivdep
(   45)   DO J=1,ITRONC
(   46)     FA%FICHIER(KRANG)%FLAP1D(J)=FA%XLAP1D(J,0)**IPUILA
(   47)   ENDDO
(   48) !NEC$ ivdep
(   49)   DO J=1,FA%JPXTRO*FA%JPXTRO
(   50)     FA%FICHIER(KRANG)%FLAP1DA(J)=FA%XLAP1DA(J,0)**IPUILA
(   51)   ENDDO
(   52) !
(   53) ELSEIF (IPUILA.LT.0) THEN
(   54) !
(   55) !NEC$ ivdep
(   56)   DO J=1,ITRONC
(   57)     FA%FICHIER(KRANG)%FLAP1D(J)=FA%XLAP1D(J,1)**(-IPUILA)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 6

(   58)   ENDDO
(   59) !NEC$ ivdep
(   60)   DO J=1,FA%JPXTRO*FA%JPXTRO
(   61)     FA%FICHIER(KRANG)%FLAP1DA(J)=FA%XLAP1DA(J,1)**(-IPUILA)
(   62)   ENDDO
(   63) !
(   64) ENDIF
(   65) !
(   66) IF (LHOOK) CALL DR_HOOK('FAIFLA_MT',1,ZHOOK_HANDLE)
(   67) END SUBROUTINE FAIFLA_MT64
(   68) # 71 "faifla.F90"
(   71) ! Oct-2012 P. Marguinaud 64b LFI
(   72) SUBROUTINE FAIFLA64           &
(   73) &           (KRANG)
(   74) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   75) &                   FA_COM_DEFAULT_INIT,  &
(   76) &                   NEW_FA_DEFAULT
(   77) USE LFI_PRECISION
(   78) IMPLICIT NONE
(   79) ! Arguments
(   80) INTEGER (KIND=JPLIKB)  KRANG                                  ! IN   
(   81) # 82 "faifla.F90"
(   82) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(   83) # 84 "faifla.F90"
(   84) CALL FAIFLA_MT64           &
(   85) &           (FA, KRANG)
(   86) # 87 "faifla.F90"
(   87) END SUBROUTINE FAIFLA64
(   88) # 89 "faifla.F90"
(   89) SUBROUTINE FAIFLA             &
(   90) &           (KRANG)
(   91) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   92) &                   FA_COM_DEFAULT_INIT,  &
(   93) &                   NEW_FA_DEFAULT
(   94) USE LFI_PRECISION
(   95) IMPLICIT NONE
(   96) ! Arguments
(   97) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(   98) # 99 "faifla.F90"
(   99) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  100) # 101 "faifla.F90"
(  101) CALL FAIFLA_MT             &
(  102) &           (FA, KRANG)
(  103) # 104 "faifla.F90"
(  104) END SUBROUTINE FAIFLA
(  105) # 106 "faifla.F90"
(  106) SUBROUTINE FAIFLA_MT             &
(  107) &           (FA, KRANG)
(  108) USE FA_MOD, ONLY : FA_COM
(  109) USE LFI_PRECISION
(  110) IMPLICIT NONE
(  111) ! Arguments
(  112) TYPE (FA_COM)          FA                                     ! INOUT
(  113) INTEGER (KIND=JPLIKM)  KRANG                                  ! IN   
(  114) ! Local integers
(  115) INTEGER (KIND=JPLIKB)  IRANG                                  ! IN   
(  116) ! Convert arguments
(  117) # 118 "faifla.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:45      page 7

(  118) IRANG      = INT (     KRANG, JPLIKB)
(  119) # 120 "faifla.F90"
(  120) CALL FAIFLA_MT64           &
(  121) &           (FA, IRANG)
(  122) # 124 "faifla.F90"
(  124) END SUBROUTINE FAIFLA_MT
(  125) # 126 "faifla.F90"
(  126) !INTF KRANG         IN    
