


NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: facono.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACONO_MT64                                             &
(    4) &                     (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,   &
(    5) &                      PCHAMP, LDCOSP, CDNOMA, KLNOMA, PVALCO,     &
(    6) &                      KLONGD, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM, FAGR1TAB
(    8) USE PARKIND1, ONLY : JPRB
(    9) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   10) USE LFI_PRECISION
(   11) IMPLICIT NONE
(   12) !****
(   13) !      Sous-programme de CODAGE d'un CHAMP HORIZONTAL destine a etre
(   14) !      ecrit sur un fichier ARPEGE/ALADIN, avec reordonnement des 
(   15) !      coefficients spectraux, le cas echeant (LDCOSP=.TRUE.)
(   16) !       ( COdage de (Nouvelles ?) Donnees )
(   17) !**
(   18) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   19) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   20) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   21) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   22) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   23) !    ( Tableau ) PCHAMP (Entree) ==> Valeurs REELLES du champ a ecrire;
(   24) !                                    rangement modele
(   25) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   26) !                                    par des coefficients spectraux;
(   27) !                CDNOMA (Sortie) ==> Nom de l'article-champ a ecrire;
(   28) !                KLNOMA (Sortie) ==> Nombre de caracteres utiles dans
(   29) !                                    CDNOMA;
(   30) !    ( Tableau ) PVALCO (Sortie) ==> Donnees destinees a l'ecriture;






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 3

(   31) !                KLONGD (Entree/Sortie) 
(   32) !                                ==> Nombre de valeurs (mots de 64 bits
(   33) !                                    en principe) a ecrire.
(   34) !                LDUNDF (Entree) ==> Vrai si ce champ a des valeurs 
(   35) !                                    indefinies
(   36) !                PUNDF  (Entree) ==> Dans le cas ou LDUNDF est vrai,
(   37) !                                    valeur non definie
(   38) !
(   39) TYPE(FA_COM)           FA
(   40) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   41) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   42) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   43) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   44) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   45) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(   46) LOGICAL                LDCOSP                                 ! IN   
(   47) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   48) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   49) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(   50) INTEGER (KIND=JPLIKB)  KLONGD                                 !   OUT
(   51) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(   52) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(   53) !
(   54) INTEGER (KIND=JPLIKB) IREP
(   55) INTEGER (KIND=JPLIKB) IRANG, INIMES
(   56) INTEGER (KIND=JPLIKB) IRANGC
(   57) INTEGER (KIND=JPLIKB) ISMAX, IMSMAX
(   58) INTEGER (KIND=JPLIKB) INGRIB
(   59) !
(   60) LOGICAL LLVERF, LLRLFI
(   61) !
(   62) REAL (KIND=JPDBLR), ALLOCATABLE :: ZCHAMP (:)
(   63) LOGICAL               :: LLUNDF                   
(   64) REAL (KIND=JPDBLR)    :: ZUNDF                    
(   65) !
(   66) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   67) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   68) LOGICAL                  LLFATA
(   69) LOGICAL                  LLREORD
(   70) TYPE (FAGR1TAB)          YLGR1TAB
(   71) 
(   72) !**
(   73) !     1.  -  CONTROLES ET INITIALISATIONS.
(   74) !-----------------------------------------------------------------------
(   75) !
(   76) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   77) IF (LHOOK) CALL DR_HOOK('FACONO_MT',0,ZHOOK_HANDLE)
(   78) 
(   79) LLUNDF = .FALSE.
(   80) IF (PRESENT (LDUNDF  )) LLUNDF   = LDUNDF
(   81) ZUNDF  = 0._JPDBLR
(   82) IF (PRESENT (PUNDF   )) ZUNDF    = PUNDF 
(   83) 
(   84) IREP=0
(   85) LLRLFI=.FALSE.
(   86) CDNOMA=' '
(   87) CALL FANUMU_MT64                 &
(   88) &               (FA, KNUMER,IRANG)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 4

(   89) !
(   90) IF (IRANG.EQ.0) THEN
(   91)   IREP=-51
(   92)   GOTO 1001
(   93) ENDIF
(   94) !
(   95) !         Verrouillage eventuel du fichier.
(   96) !
(   97) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   98) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   99) LLVERF=FA%LFAMUL
(  100) !
(  101) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  102) INGRIB=FA%FICHIER(IRANG)%NFGRIB
(  103) 
(  104) LLREORD = LDCOSP .AND. (.NOT.(INGRIB==-1 .OR. INGRIB==3 .OR. FALGRA (INGRIB)))
(  105) 
(  106) IF (LLREORD) THEN
(  107)   ISMAX  = FA%CADRE(IRANGC)%NSMAX     
(  108)   IMSMAX = FA%CADRE(IRANGC)%NMSMAX     
(  109)   ALLOCATE (ZCHAMP (4 * (IMSMAX+1) * (ISMAX+1))) ! Assez grand
(  110)   CALL FAREOR_MT64 (FA, IREP, KNUMER, PCHAMP, ZCHAMP, .FALSE.)
(  111)   IF (IREP /= 0) GOTO 1001
(  112)   CALL FACON1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, ZCHAMP, &
(  113)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  114)                   & LLUNDF, ZUNDF, YLGR1TAB)
(  115)   IF (IREP /= 0) GOTO 1001
(  116)   DEALLOCATE (ZCHAMP)
(  117) ELSE
(  118)   CALL FACON1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  119)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  120)                   & LLUNDF, ZUNDF, YLGR1TAB)
(  121) ENDIF
(  122) 
(  123) 
(  124) 1001 CONTINUE
(  125) KREP=IREP
(  126) LLFATA=LLMOER (IREP,IRANG)
(  127) !
(  128) !        Deverrouillage eventuel du fichier.
(  129) !
(  130) IF (LLVERF) CALL LFIVER_MT64                                &
(  131) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  132) !
(  133) IF (LLFATA) THEN
(  134)   INIMES=2
(  135) ELSE
(  136)   INIMES=IXNVMS(IRANG)
(  137) ENDIF
(  138) !
(  139) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  140)   IF (LHOOK) CALL DR_HOOK('FACONO_MT',1,ZHOOK_HANDLE)
(  141)   RETURN
(  142) ENDIF
(  143) !
(  144) CLNSPR='FACONO'
(  145) !
(  146) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,        &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 5

(  147) &       '', CDPREF='''''',A,'''''', KNIVAU='',I6,              &
(  148) &       '', CDSUFF='''''',A,'''''', LDCOSP= '',L1)')           &
(  149) &   KREP,KNUMER,TRIM (CDPREF),KNIVAU,TRIM (CDSUFF),LDCOSP
(  150) CALL FAIPAR_MT64                                     &
(  151) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  152) &                CLNSPR,TRIM (CDNOMA),LLRLFI)
(  153) !
(  154) IF (LHOOK) CALL DR_HOOK('FACONO_MT',1,ZHOOK_HANDLE)
(  155) 
(  156) CONTAINS
(  157) 
(  158) #include "facom2.llmoer.h"
(  159) #include "facom2.ixnvms.h"
(  160) #include "falgra.h"
(  161) 
(  162) END SUBROUTINE FACONO_MT64
(  163) 
(  164) ! Oct-2012 P. Marguinaud 64b LFI
(  165) SUBROUTINE FACONO64                                        &
(  166) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  167) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,       &
(  168) &            LDUNDF, PUNDF)
(  169) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  170) &                  FA_COM_DEFAULT_INIT,  &
(  171) &                  NEW_FA_DEFAULT
(  172) USE LFI_PRECISION
(  173) IMPLICIT NONE
(  174) ! Arguments
(  175) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  176) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  177) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  178) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  179) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  180) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(  181) LOGICAL                LDCOSP                                 ! IN   
(  182) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  183) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(  184) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(  185) INTEGER (KIND=JPLIKB)  KLONGD                                 !   OUT
(  186) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(  187) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(  188) 
(  189) #include "facono_mt64.h"
(  190) 
(  191) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  192) 
(  193) CALL FACONO_MT64                                               &
(  194) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  195) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  196) &            LDUNDF, PUNDF)
(  197) 
(  198) END SUBROUTINE FACONO64
(  199) 
(  200) SUBROUTINE FACONO                                          &
(  201) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  202) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,       &
(  203) &            LDUNDF, PUNDF)
(  204) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 6

(  205) &                  FA_COM_DEFAULT_INIT,  &
(  206) &                  NEW_FA_DEFAULT
(  207) USE LFI_PRECISION
(  208) IMPLICIT NONE
(  209) ! Arguments
(  210) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  211) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  212) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  213) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  214) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  215) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(  216) LOGICAL                LDCOSP                                 ! IN   
(  217) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  218) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  219) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(  220) INTEGER (KIND=JPLIKM)  KLONGD                                 !   OUT
(  221) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(  222) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(  223) 
(  224) #include "facono_mt.h"
(  225) 
(  226) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  227) 
(  228) CALL FACONO_MT                                                 &
(  229) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  230) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  231) &            LDUNDF, PUNDF)
(  232) 
(  233) END SUBROUTINE FACONO
(  234) 
(  235) SUBROUTINE FACONO_MT                                           &
(  236) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  237) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  238) &            LDUNDF, PUNDF)
(  239) USE FA_MOD, ONLY : FA_COM
(  240) USE LFI_PRECISION
(  241) IMPLICIT NONE
(  242) ! Arguments
(  243) TYPE (FA_COM)          FA                                     ! INOUT
(  244) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  245) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  246) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  247) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  248) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  249) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(  250) LOGICAL                LDCOSP                                 ! IN   
(  251) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  252) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  253) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(  254) INTEGER (KIND=JPLIKM)  KLONGD                                 !   OUT
(  255) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(  256) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(  257) 
(  258) #include "facono_mt64.h"
(  259) 
(  260) ! Local integers
(  261) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  262) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 7

(  263) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  264) INTEGER (KIND=JPLIKB)  ILNOMA                                 !   OUT
(  265) INTEGER (KIND=JPLIKB)  ILONGD                                 !   OUT
(  266) ! Convert arguments
(  267) 
(  268) INUMER     = INT (    KNUMER, JPLIKB)
(  269) INIVAU     = INT (    KNIVAU, JPLIKB)
(  270) ILONGD     = INT (    KLONGD, JPLIKB)
(  271) 
(  272) CALL FACONO_MT64                                               &
(  273) &           (FA, IREP, INUMER, CDPREF, INIVAU, CDSUFF, PCHAMP, &
(  274) &            LDCOSP, CDNOMA, ILNOMA, PVALCO, ILONGD,           &
(  275) &            LDUNDF, PUNDF)
(  276) 
(  277) KREP       = INT (      IREP, JPLIKM)
(  278) KLNOMA     = INT (    ILNOMA, JPLIKM)
(  279) KLONGD     = INT (    ILONGD, JPLIKM)
(  280) 
(  281) END SUBROUTINE FACONO_MT
(  282) 
(  283) !INTF KREP            OUT                               
(  284) !INTF KNUMER        IN                                  
(  285) !INTF CDPREF        IN                                  
(  286) !INTF KNIVAU        IN                                  
(  287) !INTF CDSUFF        IN                                  
(  288) !INTF PCHAMP        IN    DIMS=*                        
(  289) !INTF LDCOSP        IN                                  
(  290) !INTF CDNOMA          OUT                               
(  291) !INTF KLNOMA          OUT                               
(  292) !INTF PVALCO          OUT DIMS=*                        
(  293) !INTF KLONGD        INOUT                               
(  294) !INTF LDUNDF        IN                                  
(  295) !INTF PUNDF         IN                                  
(  296) 






























NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 8

(    1) # 1 "facono.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACONO_MT64                                             &
(    4) &                     (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,   &
(    5) &                      PCHAMP, LDCOSP, CDNOMA, KLNOMA, PVALCO,     &
(    6) &                      KLONGD, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM, FAGR1TAB
(    8) USE PARKIND1, ONLY : JPRB
(    9) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(   10) USE LFI_PRECISION
(   11) IMPLICIT NONE
(   12) !****
(   13) !      Sous-programme de CODAGE d'un CHAMP HORIZONTAL destine a etre
(   14) !      ecrit sur un fichier ARPEGE/ALADIN, avec reordonnement des 
(   15) !      coefficients spectraux, le cas echeant (LDCOSP=.TRUE.)
(   16) !       ( COdage de (Nouvelles ?) Donnees )
(   17) !**
(   18) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   19) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   20) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   21) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   22) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   23) !    ( Tableau ) PCHAMP (Entree) ==> Valeurs REELLES du champ a ecrire;
(   24) !                                    rangement modele
(   25) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   26) !                                    par des coefficients spectraux;
(   27) !                CDNOMA (Sortie) ==> Nom de l'article-champ a ecrire;
(   28) !                KLNOMA (Sortie) ==> Nombre de caracteres utiles dans
(   29) !                                    CDNOMA;
(   30) !    ( Tableau ) PVALCO (Sortie) ==> Donnees destinees a l'ecriture;
(   31) !                KLONGD (Entree/Sortie) 
(   32) !                                ==> Nombre de valeurs (mots de 64 bits
(   33) !                                    en principe) a ecrire.
(   34) !                LDUNDF (Entree) ==> Vrai si ce champ a des valeurs 
(   35) !                                    indefinies
(   36) !                PUNDF  (Entree) ==> Dans le cas ou LDUNDF est vrai,
(   37) !                                    valeur non definie
(   38) !
(   39) TYPE(FA_COM)           FA
(   40) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   41) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   42) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   43) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   44) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   45) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(   46) LOGICAL                LDCOSP                                 ! IN   
(   47) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   48) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   49) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(   50) INTEGER (KIND=JPLIKB)  KLONGD                                 !   OUT
(   51) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(   52) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(   53) !
(   54) INTEGER (KIND=JPLIKB) IREP
(   55) INTEGER (KIND=JPLIKB) IRANG, INIMES
(   56) INTEGER (KIND=JPLIKB) IRANGC
(   57) INTEGER (KIND=JPLIKB) ISMAX, IMSMAX






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 9

(   58) INTEGER (KIND=JPLIKB) INGRIB
(   59) !
(   60) LOGICAL LLVERF, LLRLFI
(   61) !
(   62) REAL (KIND=JPDBLR), ALLOCATABLE :: ZCHAMP (:)
(   63) LOGICAL               :: LLUNDF                   
(   64) REAL (KIND=JPDBLR)    :: ZUNDF                    
(   65) !
(   66) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   67) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   68) LOGICAL                  LLFATA
(   69) LOGICAL                  LLREORD
(   70) TYPE (FAGR1TAB)          YLGR1TAB
(   71) # 72 "facono.F90"
(   72) !**
(   73) !     1.  -  CONTROLES ET INITIALISATIONS.
(   74) !-----------------------------------------------------------------------
(   75) !
(   76) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   77) IF (LHOOK) CALL DR_HOOK('FACONO_MT',0,ZHOOK_HANDLE)
(   78) # 79 "facono.F90"
(   79) LLUNDF = .FALSE.
(   80) IF (PRESENT (LDUNDF  )) LLUNDF   = LDUNDF
(   81) ZUNDF  = 0._JPDBLR
(   82) IF (PRESENT (PUNDF   )) ZUNDF    = PUNDF 
(   83) # 84 "facono.F90"
(   84) IREP=0
(   85) LLRLFI=.FALSE.
(   86) CDNOMA=' '
(   87) CALL FANUMU_MT64                 &
(   88) &               (FA, KNUMER,IRANG)
(   89) !
(   90) IF (IRANG.EQ.0) THEN
(   91)   IREP=-51
(   92)   GOTO 1001
(   93) ENDIF
(   94) !
(   95) !         Verrouillage eventuel du fichier.
(   96) !
(   97) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   98) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   99) LLVERF=FA%LFAMUL
(  100) !
(  101) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  102) INGRIB=FA%FICHIER(IRANG)%NFGRIB
(  103) # 104 "facono.F90"
(  104) LLREORD = LDCOSP .AND. (.NOT.(INGRIB==-1 .OR. INGRIB==3 .OR. FALGRA (INGRIB)))
(  105) # 106 "facono.F90"
(  106) IF (LLREORD) THEN
(  107)   ISMAX  = FA%CADRE(IRANGC)%NSMAX     
(  108)   IMSMAX = FA%CADRE(IRANGC)%NMSMAX     
(  109)   ALLOCATE (ZCHAMP (4 * (IMSMAX+1) * (ISMAX+1))) ! Assez grand
(  110)   CALL FAREOR_MT64 (FA, IREP, KNUMER, PCHAMP, ZCHAMP, .FALSE.)
(  111)   IF (IREP /= 0) GOTO 1001
(  112)   CALL FACON1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, ZCHAMP, &
(  113)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  114)                   & LLUNDF, ZUNDF, YLGR1TAB)
(  115)   IF (IREP /= 0) GOTO 1001






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 10

(  116)   DEALLOCATE (ZCHAMP)
(  117) ELSE
(  118)   CALL FACON1_MT64 (FA, IREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  119)                   & LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  120)                   & LLUNDF, ZUNDF, YLGR1TAB)
(  121) ENDIF
(  122) # 124 "facono.F90"
(  124) 1001 CONTINUE
(  125) KREP=IREP
(  126) LLFATA=LLMOER (IREP,IRANG)
(  127) !
(  128) !        Deverrouillage eventuel du fichier.
(  129) !
(  130) IF (LLVERF) CALL LFIVER_MT64                                &
(  131) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  132) !
(  133) IF (LLFATA) THEN
(  134)   INIMES=2
(  135) ELSE
(  136)   INIMES=IXNVMS(IRANG)
(  137) ENDIF
(  138) !
(  139) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  140)   IF (LHOOK) CALL DR_HOOK('FACONO_MT',1,ZHOOK_HANDLE)
(  141)   RETURN
(  142) ENDIF
(  143) !
(  144) CLNSPR='FACONO'
(  145) !
(  146) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,        &
(  147) &       '', CDPREF='''''',A,'''''', KNIVAU='',I6,              &
(  148) &       '', CDSUFF='''''',A,'''''', LDCOSP= '',L1)')           &
(  149) &   KREP,KNUMER,TRIM (CDPREF),KNIVAU,TRIM (CDSUFF),LDCOSP
(  150) CALL FAIPAR_MT64                                     &
(  151) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  152) &                CLNSPR,TRIM (CDNOMA),LLRLFI)
(  153) !
(  154) IF (LHOOK) CALL DR_HOOK('FACONO_MT',1,ZHOOK_HANDLE)
(  155) # 156 "facono.F90"
(  156) CONTAINS
(  157) # 158 "facono.F90"
(  158) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 159 "facono.F90"
(  159) # 159 "facono.F90"
(  159) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 11

(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 160 "facono.F90"
(  160) # 160 "facono.F90"
(  160) # 1 ".D[27]/falgra.h"
(    1) LOGICAL FUNCTION FALGRA (KNGRIB)
(    2) !****
(    3) !    Cette fonction renvoie une valeur vraie si la methode d'encodage passee en argument fait appel a grib_api
(    4) !**
(    5) !    Arguments : KNGRIB (Entree) ==> Methode d'encodage
(    6) !
(    7) !
(    8) INTEGER (KIND=JPLIKB) KNGRIB
(    9) INTEGER (KIND=JPLIKB) INGRIB_SP, INGRIB_GP
(   10) LOGICAL LLFALGRA_SP, LLFALGRA_GP
(   11) # 12 ".D[27]/falgra.h"
(   12) FALGRA = .FALSE.
(   13) # 14 ".D[27]/falgra.h"
(   14) IF (100 <= KNGRIB .AND. KNGRIB <= 200) THEN
(   15) # 16 ".D[27]/falgra.h"
(   16)   INGRIB_SP = FALGRA_SP (KNGRIB)
(   17)   INGRIB_GP = FALGRA_GP (KNGRIB)
(   18)   
(   19)   LLFALGRA_SP = &
(   20)    & (INGRIB_SP - 100 ==  1) .OR. &      ! GRIB2 complex packing (bug)
(   21)    & (INGRIB_SP - 100 ==  2) .OR. &      ! GRIB0 
(   22)    & (INGRIB_SP - 100 ==  3)             ! GRIB2 complex packing
(   23)   
(   24)   LLFALGRA_GP = &
(   25)    & ((INGRIB_GP-100) / 20 ==  1) .OR. & ! GRIB2 simple packing
(   26)    & ((INGRIB_GP-100) / 20 ==  2) .OR. & ! GRIB2 second order packing
(   27)    & ((INGRIB_GP-100) / 20 ==  3) .OR. & ! GRIB1 simple packing
(   28)    & ((INGRIB_GP-100) / 20 ==  4) .OR. & ! GRIB1 second order packing
(   29)    & ((INGRIB_GP-100) / 20 ==  5)        ! GRIB2 complex packing
(   30)    
(   31) # 32 ".D[27]/falgra.h"
(   32)   IF (LLFALGRA_GP .AND. LLFALGRA_SP) THEN
(   33)     FALGRA = .TRUE.
(   34)   ELSEIF (LLFALGRA_GP) THEN
(   35)     FALGRA = INGRIB_SP == 100
(   36)   ELSEIF (LLFALGRA_SP) THEN
(   37)     FALGRA = INGRIB_GP == 100
(   38)   ENDIF
(   39) # 40 ".D[27]/falgra.h"
(   40) ENDIF
(   41) # 42 ".D[27]/falgra.h"
(   42) END FUNCTION FALGRA
(   43) # 44 ".D[27]/falgra.h"
(   44) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_SP (KNGRIB)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 12

(   45) INTEGER (KIND=JPLIKB) KNGRIB
(   46) FALGRA_SP = 100+MODULO ((KNGRIB-100),20)
(   47) END FUNCTION FALGRA_SP
(   48) # 49 ".D[27]/falgra.h"
(   49) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_GP (KNGRIB)
(   50) INTEGER (KIND=JPLIKB) KNGRIB
(   51) FALGRA_GP = 100+20*((KNGRIB-100)/20)
(   52) END FUNCTION FALGRA_GP
(   53) # 54 ".D[27]/falgra.h"
(   54) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_ED (KNGRIB)
(   55) INTEGER (KIND=JPLIKB) KNGRIB
(   56) # 57 ".D[27]/falgra.h"
(   57) SELECT CASE (KNGRIB)
(   58)   CASE (160, 180)
(   59)     FALGRA_ED = 1
(   60)   CASE DEFAULT
(   61)     FALGRA_ED = 2
(   62) END SELECT 
(   63) # 64 ".D[27]/falgra.h"
(   64) END FUNCTION FALGRA_ED
(   65) # 161 "facono.F90"
(  161) # 162 "facono.F90"
(  162) END SUBROUTINE FACONO_MT64
(  163) # 164 "facono.F90"
(  164) ! Oct-2012 P. Marguinaud 64b LFI
(  165) SUBROUTINE FACONO64                                        &
(  166) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  167) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,       &
(  168) &            LDUNDF, PUNDF)
(  169) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  170) &                  FA_COM_DEFAULT_INIT,  &
(  171) &                  NEW_FA_DEFAULT
(  172) USE LFI_PRECISION
(  173) IMPLICIT NONE
(  174) ! Arguments
(  175) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  176) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  177) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  178) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  179) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  180) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(  181) LOGICAL                LDCOSP                                 ! IN   
(  182) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  183) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(  184) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(  185) INTEGER (KIND=JPLIKB)  KLONGD                                 !   OUT
(  186) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(  187) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(  188) # 189 "facono.F90"
(  189) # 1 ".D[27]/facono_mt64.h"
(    1) INTERFACE
(    2) # 3 ".D[27]/facono_mt64.h"
(    3) SUBROUTINE FACONO_MT64                                             &
(    4) &                     (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,   &
(    5) &                      PCHAMP, LDCOSP, CDNOMA, KLNOMA, PVALCO,     &
(    6) &                      KLONGD, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM
(    8) USE LFI_PRECISION






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 13

(    9) IMPLICIT NONE
(   10) TYPE(FA_COM)           FA
(   11) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   12) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   13) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   14) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   15) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   16) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(   17) LOGICAL                LDCOSP                                 ! IN   
(   18) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   19) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   20) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(   21) INTEGER (KIND=JPLIKB)  KLONGD                                 !   OUT
(   22) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(   23) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(   24) END SUBROUTINE
(   25) # 26 ".D[27]/facono_mt64.h"
(   26) END INTERFACE
(   27) # 190 "facono.F90"
(  190) # 191 "facono.F90"
(  191) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  192) # 193 "facono.F90"
(  193) CALL FACONO_MT64                                               &
(  194) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  195) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  196) &            LDUNDF, PUNDF)
(  197) # 198 "facono.F90"
(  198) END SUBROUTINE FACONO64
(  199) # 200 "facono.F90"
(  200) SUBROUTINE FACONO                                          &
(  201) &           (KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  202) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,       &
(  203) &            LDUNDF, PUNDF)
(  204) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  205) &                  FA_COM_DEFAULT_INIT,  &
(  206) &                  NEW_FA_DEFAULT
(  207) USE LFI_PRECISION
(  208) IMPLICIT NONE
(  209) ! Arguments
(  210) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  211) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  212) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  213) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  214) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  215) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(  216) LOGICAL                LDCOSP                                 ! IN   
(  217) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  218) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  219) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(  220) INTEGER (KIND=JPLIKM)  KLONGD                                 !   OUT
(  221) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(  222) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(  223) # 224 "facono.F90"
(  224) # 1 ".D[27]/facono_mt.h"
(    1) INTERFACE
(    2) # 3 ".D[27]/facono_mt.h"
(    3) SUBROUTINE FACONO_MT                                           &
(    4) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 14

(    5) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(    6) &            LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) ! Arguments
(   11) TYPE (FA_COM)          FA                                     ! INOUT
(   12) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(   13) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(   14) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   15) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(   16) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   17) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(   18) LOGICAL                LDCOSP                                 ! IN   
(   19) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   20) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(   21) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(   22) INTEGER (KIND=JPLIKM)  KLONGD                                 !   OUT
(   23) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(   24) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(   25) END SUBROUTINE
(   26) # 27 ".D[27]/facono_mt.h"
(   27) END INTERFACE
(   28) # 225 "facono.F90"
(  225) # 226 "facono.F90"
(  226) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  227) # 228 "facono.F90"
(  228) CALL FACONO_MT                                                 &
(  229) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  230) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  231) &            LDUNDF, PUNDF)
(  232) # 233 "facono.F90"
(  233) END SUBROUTINE FACONO
(  234) # 235 "facono.F90"
(  235) SUBROUTINE FACONO_MT                                           &
(  236) &           (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF, PCHAMP, &
(  237) &            LDCOSP, CDNOMA, KLNOMA, PVALCO, KLONGD,           &
(  238) &            LDUNDF, PUNDF)
(  239) USE FA_MOD, ONLY : FA_COM
(  240) USE LFI_PRECISION
(  241) IMPLICIT NONE
(  242) ! Arguments
(  243) TYPE (FA_COM)          FA                                     ! INOUT
(  244) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  245) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  246) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(  247) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  248) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(  249) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(  250) LOGICAL                LDCOSP                                 ! IN   
(  251) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(  252) INTEGER (KIND=JPLIKM)  KLNOMA                                 !   OUT
(  253) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(  254) INTEGER (KIND=JPLIKM)  KLONGD                                 !   OUT
(  255) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(  256) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(  257) # 258 "facono.F90"
(  258) # 1 ".D[27]/facono_mt64.h"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 15

(    1) INTERFACE
(    2) # 3 ".D[27]/facono_mt64.h"
(    3) SUBROUTINE FACONO_MT64                                             &
(    4) &                     (FA, KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,   &
(    5) &                      PCHAMP, LDCOSP, CDNOMA, KLNOMA, PVALCO,     &
(    6) &                      KLONGD, LDUNDF, PUNDF)
(    7) USE FA_MOD, ONLY : FA_COM
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) TYPE(FA_COM)           FA
(   11) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(   12) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(   13) CHARACTER (LEN=*)      CDPREF                                 ! IN   
(   14) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(   15) CHARACTER (LEN=*)      CDSUFF                                 ! IN   
(   16) REAL (KIND=JPDBLR)     PCHAMP     (*)                         ! IN   
(   17) LOGICAL                LDCOSP                                 ! IN   
(   18) CHARACTER (LEN=*)      CDNOMA                                 !   OUT
(   19) INTEGER (KIND=JPLIKB)  KLNOMA                                 !   OUT
(   20) REAL (KIND=JPDBLR)     PVALCO     (*)                         !   OUT
(   21) INTEGER (KIND=JPLIKB)  KLONGD                                 !   OUT
(   22) LOGICAL,               OPTIONAL :: LDUNDF                     ! IN
(   23) REAL (KIND=JPDBLR),    OPTIONAL :: PUNDF                      ! IN
(   24) END SUBROUTINE
(   25) # 26 ".D[27]/facono_mt64.h"
(   26) END INTERFACE
(   27) # 259 "facono.F90"
(  259) # 260 "facono.F90"
(  260) ! Local integers
(  261) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  262) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  263) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  264) INTEGER (KIND=JPLIKB)  ILNOMA                                 !   OUT
(  265) INTEGER (KIND=JPLIKB)  ILONGD                                 !   OUT
(  266) ! Convert arguments
(  267) # 268 "facono.F90"
(  268) INUMER     = INT (    KNUMER, JPLIKB)
(  269) INIVAU     = INT (    KNIVAU, JPLIKB)
(  270) ILONGD     = INT (    KLONGD, JPLIKB)
(  271) # 272 "facono.F90"
(  272) CALL FACONO_MT64                                               &
(  273) &           (FA, IREP, INUMER, CDPREF, INIVAU, CDSUFF, PCHAMP, &
(  274) &            LDCOSP, CDNOMA, ILNOMA, PVALCO, ILONGD,           &
(  275) &            LDUNDF, PUNDF)
(  276) # 277 "facono.F90"
(  277) KREP       = INT (      IREP, JPLIKM)
(  278) KLNOMA     = INT (    ILNOMA, JPLIKM)
(  279) KLONGD     = INT (    ILONGD, JPLIKM)
(  280) # 281 "facono.F90"
(  281) END SUBROUTINE FACONO_MT
(  282) # 283 "facono.F90"
(  283) !INTF KREP            OUT                               
(  284) !INTF KNUMER        IN                                  
(  285) !INTF CDPREF        IN                                  
(  286) !INTF KNIVAU        IN                                  
(  287) !INTF CDSUFF        IN                                  
(  288) !INTF PCHAMP        IN    DIMS=*                        
(  289) !INTF LDCOSP        IN                                  






NVFORTRAN (Version     23.1)          02/24/2023  13:54:17      page 16

(  290) !INTF CDNOMA          OUT                               
(  291) !INTF KLNOMA          OUT                               
(  292) !INTF PVALCO          OUT DIMS=*                        
(  293) !INTF KLONGD        INOUT                               
(  294) !INTF LDUNDF        IN                                  
(  295) !INTF PUNDF         IN                                  
