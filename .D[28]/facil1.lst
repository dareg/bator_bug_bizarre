


NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: facil1.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACIL1_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,  &
(    5) &                      PCHAMP, LDCOSP, LDUNDF, PUNDF, YDGR1TAB)
(    6) USE FA_MOD, ONLY : FA_COM, FAGR1TAB
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !      Sous-programme de LECTURE d'un CHAMP HORIZONTAL sur un fichier
(   13) !     ARPEGE.
(   14) !       ( Champ d'Interet en LEcture )
(   15) !**
(   16) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   17) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   18) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   19) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   20) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   21) !    ( Tableau ) PCHAMP (Sortie) ==> Valeurs REELLES du champ lu;
(   22) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   23) !                                    par des coefficients spectraux.
(   24) !                LDUNDF (Sortie) ==> Vrai si ce champ a des valeurs 
(   25) !                                    indefinies
(   26) !                PUNDF  (Sortie) ==> Dans le cas ou LDUNDF est vrai,
(   27) !                                    valeur non definie
(   28) !     MODIF:
(   29) !     JM AUDOIN GMAP/EXT 10/05/95 intro de IVALC3 pour eviter ecrasement
(   30) !     D  PARADIS TTI/DEV 12/10/98 partie controle et decodage de l'article






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 3

(   31) !                                 demenagee dans un ss-prg a usage interne
(   32) !                                 du logiciel (FADECI).
(   33) !     D  PARADIS DSI/DEV 15/04/04 nettoyage code + declaration IVALCO en
(   34) !                                 ALLOCATABLE
(   35) !
(   36) !
(   37) TYPE(FA_COM) :: FA
(   38) TYPE(FAGR1TAB) :: YDGR1TAB
(   39) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIVAU
(   40) !
(   41) INTEGER (KIND=JPLIKB) IREP, ILPRFU, ILSUFU, ILNOMU
(   42) INTEGER (KIND=JPLIKB) ILONGA, IRANG, INIMES
(   43) INTEGER (KIND=JPLIKB) ILPREF, ILSUFF, IPOSEX, IRANGC
(   44) !
(   45) REAL (KIND=JPDBLR) PCHAMP (*)
(   46) REAL (KIND=JPRB) PUNDF
(   47) INTEGER (KIND=JPLIKB), ALLOCATABLE :: IVALCO(:)
(   48) INTEGER (KIND=JPLIKB) IB1PAR (FA%JPLB1P)
(   49) !
(   50) LOGICAL LLVERF, LLRLFI, LDCOSP, LLNOMU, LDUNDF
(   51) !
(   52) CHARACTER CDPREF*(*), CDSUFF*(*)
(   53) CHARACTER CLPREF*(FA%JPXNOM), CLSUFF*(FA%JPXSUF)
(   54) !
(   55) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   56) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   57) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   58) LOGICAL                  LLFATA
(   59) !**
(   60) !     1.  -  CONTROLES ET INITIALISATIONS.
(   61) !-----------------------------------------------------------------------
(   62) !
(   63) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   64) IF (LHOOK) CALL DR_HOOK('FACIL1_MT',0,ZHOOK_HANDLE)
(   65) 
(   66) LLVERF=.FALSE.
(   67) LLRLFI=.FALSE.
(   68) LLNOMU=.FALSE.
(   69) ILPRFU=INT (LEN (CDPREF), JPLIKB)
(   70) ILSUFU=INT (LEN (CDSUFF), JPLIKB)
(   71) CALL FANUMU_MT64                 &
(   72) &               (FA, KNUMER,IRANG)
(   73) !
(   74) IF (IRANG.EQ.0) THEN
(   75)   IREP=-51
(   76)   GOTO 1001
(   77) ENDIF
(   78) !
(   79) !         Verrouillage eventuel du fichier.
(   80) !
(   81) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   82) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   83) LLVERF=FA%LFAMUL
(   84) !
(   85) IF (FA%FICHIER(IRANG)%LCREAF) THEN
(   86)   IREP=-85
(   87)   GOTO 1001
(   88) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 4

(   89) !**
(   90) !     2.  -  FABRICATION DU NOM D'ARTICLE VIA LE SOUS-PROGRAMME "FANFAR"
(   91) !            ( controles de CDPREF, KNIVAU, CDSUFF inclus )
(   92) !-----------------------------------------------------------------------
(   93) !
(   94) CALL FANFAR_MT64                                             &
(   95) &               (FA, IREP,IRANG,CDPREF,KNIVAU,CDSUFF,CLNOMA, &
(   96) &                IB1PAR(6),ILPRFU,ILSUFU,ILNOMU)
(   97) IF (IREP.NE.0) GOTO 1001
(   98) LLNOMU=.TRUE.
(   99) !**
(  100) !     3.  -  LECTURE DE L'ARTICLE SUR LE FICHIER
(  101) !-----------------------------------------------------------------------
(  102) !
(  103) CALL LFINFO_MT64                                       &
(  104) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  105) &                ILONGA,IPOSEX)
(  106) !
(  107) IF (IREP.NE.0) THEN
(  108)   LLRLFI=.TRUE.
(  109)   GOTO 1001
(  110) ELSEIF (ILONGA.EQ.0) THEN
(  111)   IREP=-89
(  112)   GOTO 1001
(  113) ELSEIF (ILONGA.GT.FA%JPXCHA+2) THEN
(  114)   IREP=-90
(  115)   GOTO 1001
(  116) ENDIF
(  117) !
(  118) ALLOCATE (IVALCO (ILONGA))
(  119) CALL LFILEC_MT64                                       &
(  120) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  121) &               IVALCO,ILONGA)
(  122) LLRLFI=IREP.NE.0
(  123) IF (LLRLFI) GOTO 1001
(  124) !
(  125) !**
(  126) !     4.  -  CONTROLES ET DECODAGE DE L'ARTICLE
(  127) !----------------------------------------------
(  128) !
(  129) !  Controle de l'homogeneite du type de rangement de coeff. spectraux
(  130) !  parmi les champs lus/ecrits: ces champs compactes avec
(  131) !  FA%NIGRIB=-1 ou 3 doivent etre ranges comme dans le modele ("verticalement"
(  132) !  soit selon des colonnes JM=cst consecutives) et contrairement si compactes
(  133) !  avec FA%NIGRIB= 0,1 ou 2.
(  134) ! 
(  135) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  136) IF (LDCOSP) THEN
(  137)   IF (IVALCO(1).EQ.-1.OR.IVALCO(1).EQ.3) THEN
(  138)     FA%FICHIER(IRANG)%NRASVE=FA%FICHIER(IRANG)%NRASVE+1
(  139)     IF (FA%FICHIER(IRANG)%NRASVE.EQ.1.AND.FA%FICHIER(IRANG)%NRASHO.GT.0) THEN
(  140)       WRITE(FA%NULOUT,*)                                 &
(  141) &      '------------------------------------------------'
(  142)       WRITE(FA%NULOUT,*)' FACIL1 :  WARNING !!!!!           '
(  143)       WRITE(FA%NULOUT,*)' Un champ de coeff. spectraux avec'
(  144)       WRITE(FA%NULOUT,*)                            &
(  145) &      ' rangement type modele va etre lu alors que'
(  146)       WRITE(FA%NULOUT,*)                                &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 5

(  147) &      ' d''autres champs spec. ont un rangt different.'
(  148)       WRITE(FA%NULOUT,*)                                 &
(  149) &      ' ***  Prenez en compte cette heterogeneite!  ***'
(  150)       WRITE(FA%NULOUT,*)                                 &
(  151) &      '------------------------------------------------'
(  152)     ENDIF
(  153)   ELSEIF (IVALCO(1).GE.0.AND.IVALCO(1).LE.2) THEN
(  154)     FA%FICHIER(IRANG)%NRASHO=FA%FICHIER(IRANG)%NRASHO+1
(  155)     IF (FA%FICHIER(IRANG)%NRASHO.EQ.1.AND.FA%FICHIER(IRANG)%NRASVE.GT.0) THEN
(  156)       WRITE(FA%NULOUT,*)                                 &
(  157) &      '------------------------------------------------'
(  158)       WRITE(FA%NULOUT,*)' FACIL1 :  WARNING !!!!!           '
(  159)       WRITE(FA%NULOUT,*)' Un champ de coeff. spectraux avec'
(  160)       WRITE(FA%NULOUT,*)                                &
(  161) &      ' rangement autre que celui du modele va etre lu'
(  162)       WRITE(FA%NULOUT,*)                                &
(  163) &      ' alors que d''autres champs ont le rangt modele'
(  164)       WRITE(FA%NULOUT,*)                                 &
(  165) &      ' ***  Prenez en compte cette heterogeneite!  ***'
(  166)       WRITE(FA%NULOUT,*)                                 &
(  167) &      '------------------------------------------------'
(  168)     ENDIF
(  169)   ENDIF
(  170) ENDIF
(  171) !
(  172) IF (FALGRA (IVALCO(1))) THEN
(  173) ! Cas d'un champ gribe avec GRIB_API
(  174)   CALL FADGRA_MT64                             &
(  175) &                 (FA, IREP,IRANG,CLNOMA,      &
(  176) &                  IVALCO,ILONGA,PCHAMP,LDCOSP,&
(  177) &                  CDPREF, KNIVAU, CDSUFF,     &
(  178) &                  LDUNDF, PUNDF)
(  179) ELSEIF (IVALCO(1).EQ.3) THEN
(  180) ! Cas d'un champ gribe avec GRIBEX
(  181)   CALL FADECX_MT64                             &
(  182) &                 (FA, IREP,IRANG,CLNOMA,      &
(  183) &                  IVALCO,ILONGA,PCHAMP,LDCOSP,&
(  184) &                  CDPREF, KNIVAU, CDSUFF,     &
(  185) &                  LDUNDF, PUNDF, YDGR1TAB)
(  186) ELSEIF (IVALCO(1).EQ.4) THEN
(  187)   CALL FADCPL_MT64                             &
(  188) &                 (FA, IREP,IRANG,CLNOMA,      &
(  189) &                  IVALCO,ILONGA,PCHAMP,LDCOSP,&
(  190) &                  LDUNDF, PUNDF)
(  191) ELSE
(  192)   CALL FADECI_MT64                             &
(  193) &                 (FA, IREP,IRANG,CLNOMA,      &
(  194) &                  IVALCO,ILONGA,PCHAMP,LDCOSP)
(  195) ENDIF
(  196) !
(  197) !**
(  198) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  199) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  200) !-----------------------------------------------------------------------
(  201) !
(  202) 1001 CONTINUE
(  203) IF (ALLOCATED( IVALCO )) DEALLOCATE ( IVALCO )
(  204) KREP=IREP






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 6

(  205) LLFATA=LLMOER (IREP,IRANG)
(  206) !
(  207) !        Deverrouillage eventuel du fichier.
(  208) !
(  209) IF (LLVERF) CALL LFIVER_MT64                                &
(  210) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  211) 
(  212) IF (LLFATA) THEN
(  213)   INIMES=2
(  214) ELSE
(  215)   INIMES=IXNVMS(IRANG)
(  216) ENDIF
(  217) !
(  218) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  219)   IF (LHOOK) CALL DR_HOOK('FACIL1_MT',1,ZHOOK_HANDLE)
(  220)   RETURN
(  221) ENDIF
(  222) !
(  223) CLNSPR='FACIL1'
(  224) !
(  225) IF (ILPRFU.GE.1) THEN
(  226)   ILPREF=MIN (ILPRFU,INT (LEN (CLPREF), JPLIKB))
(  227)   CLPREF(1:ILPREF)=CDPREF(1:ILPREF)
(  228) ELSE
(  229)   ILPREF=8
(  230)   CLPREF(1:ILPREF)=FA%CHAINC(:ILPREF)
(  231) ENDIF
(  232) !
(  233) IF (ILSUFU.GE.1) THEN
(  234)   ILSUFF=MIN (ILSUFU,INT (LEN (CLSUFF), JPLIKB))
(  235)   CLSUFF(1:ILSUFF)=CDSUFF(1:ILSUFF)
(  236) ELSE
(  237)   ILSUFF=8
(  238)   CLSUFF(1:ILSUFF)=FA%CHAINC(:ILSUFF)
(  239) ENDIF
(  240) !
(  241) IF (.NOT.LLNOMU) THEN
(  242)   ILNOMU=MIN (ILPREF,FA%NCPCAD)
(  243)   CLNOMA(1:ILNOMU)=CLPREF(1:ILPREF)
(  244) ENDIF
(  245) !
(  246) WRITE (UNIT=CLMESS,FMT='(''KREP='',I5,'', KNUMER='',I3,        &
(  247) &       '', CDPREF='''''',A,'''''', KNIVAU='',I6,               &
(  248) &       '', CDSUFF='''''',A,'''''', LDCOSP= '',L1)')            &
(  249) &   KREP,KNUMER,CLPREF(1:ILPREF),KNIVAU,CLSUFF(1:ILSUFF),LDCOSP
(  250) CALL FAIPAR_MT64                                     &
(  251) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  252) &                CLNSPR, CLNOMA(1:ILNOMU),LLRLFI)
(  253) !
(  254) IF (LHOOK) CALL DR_HOOK('FACIL1_MT',1,ZHOOK_HANDLE)
(  255) 
(  256) CONTAINS
(  257) 
(  258) #include "facom2.llmoer.h"
(  259) #include "facom2.ixnvms.h"
(  260) #include "falgra.h"
(  261) 
(  262) END SUBROUTINE FACIL1_MT64






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 7

(  263) 































































NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 8

(    1) # 1 "facil1.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FACIL1_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, CDPREF, KNIVAU, CDSUFF,  &
(    5) &                      PCHAMP, LDCOSP, LDUNDF, PUNDF, YDGR1TAB)
(    6) USE FA_MOD, ONLY : FA_COM, FAGR1TAB
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !      Sous-programme de LECTURE d'un CHAMP HORIZONTAL sur un fichier
(   13) !     ARPEGE.
(   14) !       ( Champ d'Interet en LEcture )
(   15) !**
(   16) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   17) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   18) !                CDPREF (Entree) ==> Prefixe eventuel du nom d'article;
(   19) !                KNIVAU (Entree) ==> Niveau vertical eventuel;
(   20) !                CDSUFF (Entree) ==> Suffixe eventuel du nom d'article;
(   21) !    ( Tableau ) PCHAMP (Sortie) ==> Valeurs REELLES du champ lu;
(   22) !                LDCOSP (Entree) ==> Vrai si le champ est represente
(   23) !                                    par des coefficients spectraux.
(   24) !                LDUNDF (Sortie) ==> Vrai si ce champ a des valeurs 
(   25) !                                    indefinies
(   26) !                PUNDF  (Sortie) ==> Dans le cas ou LDUNDF est vrai,
(   27) !                                    valeur non definie
(   28) !     MODIF:
(   29) !     JM AUDOIN GMAP/EXT 10/05/95 intro de IVALC3 pour eviter ecrasement
(   30) !     D  PARADIS TTI/DEV 12/10/98 partie controle et decodage de l'article
(   31) !                                 demenagee dans un ss-prg a usage interne
(   32) !                                 du logiciel (FADECI).
(   33) !     D  PARADIS DSI/DEV 15/04/04 nettoyage code + declaration IVALCO en
(   34) !                                 ALLOCATABLE
(   35) !
(   36) !
(   37) TYPE(FA_COM) :: FA
(   38) TYPE(FAGR1TAB) :: YDGR1TAB
(   39) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNIVAU
(   40) !
(   41) INTEGER (KIND=JPLIKB) IREP, ILPRFU, ILSUFU, ILNOMU
(   42) INTEGER (KIND=JPLIKB) ILONGA, IRANG, INIMES
(   43) INTEGER (KIND=JPLIKB) ILPREF, ILSUFF, IPOSEX, IRANGC
(   44) !
(   45) REAL (KIND=JPDBLR) PCHAMP (*)
(   46) REAL (KIND=JPRB) PUNDF
(   47) INTEGER (KIND=JPLIKB), ALLOCATABLE :: IVALCO(:)
(   48) INTEGER (KIND=JPLIKB) IB1PAR (FA%JPLB1P)
(   49) !
(   50) LOGICAL LLVERF, LLRLFI, LDCOSP, LLNOMU, LDUNDF
(   51) !
(   52) CHARACTER CDPREF*(*), CDSUFF*(*)
(   53) CHARACTER CLPREF*(FA%JPXNOM), CLSUFF*(FA%JPXSUF)
(   54) !
(   55) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   56) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   57) CHARACTER(LEN=FA%JPLSPX) CLNSPR






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 9

(   58) LOGICAL                  LLFATA
(   59) !**
(   60) !     1.  -  CONTROLES ET INITIALISATIONS.
(   61) !-----------------------------------------------------------------------
(   62) !
(   63) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   64) IF (LHOOK) CALL DR_HOOK('FACIL1_MT',0,ZHOOK_HANDLE)
(   65) # 66 "facil1.F90"
(   66) LLVERF=.FALSE.
(   67) LLRLFI=.FALSE.
(   68) LLNOMU=.FALSE.
(   69) ILPRFU=INT (LEN (CDPREF), JPLIKB)
(   70) ILSUFU=INT (LEN (CDSUFF), JPLIKB)
(   71) CALL FANUMU_MT64                 &
(   72) &               (FA, KNUMER,IRANG)
(   73) !
(   74) IF (IRANG.EQ.0) THEN
(   75)   IREP=-51
(   76)   GOTO 1001
(   77) ENDIF
(   78) !
(   79) !         Verrouillage eventuel du fichier.
(   80) !
(   81) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   82) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   83) LLVERF=FA%LFAMUL
(   84) !
(   85) IF (FA%FICHIER(IRANG)%LCREAF) THEN
(   86)   IREP=-85
(   87)   GOTO 1001
(   88) ENDIF
(   89) !**
(   90) !     2.  -  FABRICATION DU NOM D'ARTICLE VIA LE SOUS-PROGRAMME "FANFAR"
(   91) !            ( controles de CDPREF, KNIVAU, CDSUFF inclus )
(   92) !-----------------------------------------------------------------------
(   93) !
(   94) CALL FANFAR_MT64                                             &
(   95) &               (FA, IREP,IRANG,CDPREF,KNIVAU,CDSUFF,CLNOMA, &
(   96) &                IB1PAR(6),ILPRFU,ILSUFU,ILNOMU)
(   97) IF (IREP.NE.0) GOTO 1001
(   98) LLNOMU=.TRUE.
(   99) !**
(  100) !     3.  -  LECTURE DE L'ARTICLE SUR LE FICHIER
(  101) !-----------------------------------------------------------------------
(  102) !
(  103) CALL LFINFO_MT64                                       &
(  104) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  105) &                ILONGA,IPOSEX)
(  106) !
(  107) IF (IREP.NE.0) THEN
(  108)   LLRLFI=.TRUE.
(  109)   GOTO 1001
(  110) ELSEIF (ILONGA.EQ.0) THEN
(  111)   IREP=-89
(  112)   GOTO 1001
(  113) ELSEIF (ILONGA.GT.FA%JPXCHA+2) THEN
(  114)   IREP=-90
(  115)   GOTO 1001






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 10

(  116) ENDIF
(  117) !
(  118) ALLOCATE (IVALCO (ILONGA))
(  119) CALL LFILEC_MT64                                       &
(  120) &               (FA%LFI, IREP,KNUMER,CLNOMA(1:ILNOMU), &
(  121) &               IVALCO,ILONGA)
(  122) LLRLFI=IREP.NE.0
(  123) IF (LLRLFI) GOTO 1001
(  124) !
(  125) !**
(  126) !     4.  -  CONTROLES ET DECODAGE DE L'ARTICLE
(  127) !----------------------------------------------
(  128) !
(  129) !  Controle de l'homogeneite du type de rangement de coeff. spectraux
(  130) !  parmi les champs lus/ecrits: ces champs compactes avec
(  131) !  FA%NIGRIB=-1 ou 3 doivent etre ranges comme dans le modele ("verticalement"
(  132) !  soit selon des colonnes JM=cst consecutives) et contrairement si compactes
(  133) !  avec FA%NIGRIB= 0,1 ou 2.
(  134) ! 
(  135) IRANGC=FA%FICHIER(IRANG)%NUCADR
(  136) IF (LDCOSP) THEN
(  137)   IF (IVALCO(1).EQ.-1.OR.IVALCO(1).EQ.3) THEN
(  138)     FA%FICHIER(IRANG)%NRASVE=FA%FICHIER(IRANG)%NRASVE+1
(  139)     IF (FA%FICHIER(IRANG)%NRASVE.EQ.1.AND.FA%FICHIER(IRANG)%NRASHO.GT.0) THEN
(  140)       WRITE(FA%NULOUT,*)                                 &
(  141) &      '------------------------------------------------'
(  142)       WRITE(FA%NULOUT,*)' FACIL1 :  WARNING !!!!!           '
(  143)       WRITE(FA%NULOUT,*)' Un champ de coeff. spectraux avec'
(  144)       WRITE(FA%NULOUT,*)                            &
(  145) &      ' rangement type modele va etre lu alors que'
(  146)       WRITE(FA%NULOUT,*)                                &
(  147) &      ' d''autres champs spec. ont un rangt different.'
(  148)       WRITE(FA%NULOUT,*)                                 &
(  149) &      ' ***  Prenez en compte cette heterogeneite!  ***'
(  150)       WRITE(FA%NULOUT,*)                                 &
(  151) &      '------------------------------------------------'
(  152)     ENDIF
(  153)   ELSEIF (IVALCO(1).GE.0.AND.IVALCO(1).LE.2) THEN
(  154)     FA%FICHIER(IRANG)%NRASHO=FA%FICHIER(IRANG)%NRASHO+1
(  155)     IF (FA%FICHIER(IRANG)%NRASHO.EQ.1.AND.FA%FICHIER(IRANG)%NRASVE.GT.0) THEN
(  156)       WRITE(FA%NULOUT,*)                                 &
(  157) &      '------------------------------------------------'
(  158)       WRITE(FA%NULOUT,*)' FACIL1 :  WARNING !!!!!           '
(  159)       WRITE(FA%NULOUT,*)' Un champ de coeff. spectraux avec'
(  160)       WRITE(FA%NULOUT,*)                                &
(  161) &      ' rangement autre que celui du modele va etre lu'
(  162)       WRITE(FA%NULOUT,*)                                &
(  163) &      ' alors que d''autres champs ont le rangt modele'
(  164)       WRITE(FA%NULOUT,*)                                 &
(  165) &      ' ***  Prenez en compte cette heterogeneite!  ***'
(  166)       WRITE(FA%NULOUT,*)                                 &
(  167) &      '------------------------------------------------'
(  168)     ENDIF
(  169)   ENDIF
(  170) ENDIF
(  171) !
(  172) IF (FALGRA (IVALCO(1))) THEN
(  173) ! Cas d'un champ gribe avec GRIB_API






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 11

(  174)   CALL FADGRA_MT64                             &
(  175) &                 (FA, IREP,IRANG,CLNOMA,      &
(  176) &                  IVALCO,ILONGA,PCHAMP,LDCOSP,&
(  177) &                  CDPREF, KNIVAU, CDSUFF,     &
(  178) &                  LDUNDF, PUNDF)
(  179) ELSEIF (IVALCO(1).EQ.3) THEN
(  180) ! Cas d'un champ gribe avec GRIBEX
(  181)   CALL FADECX_MT64                             &
(  182) &                 (FA, IREP,IRANG,CLNOMA,      &
(  183) &                  IVALCO,ILONGA,PCHAMP,LDCOSP,&
(  184) &                  CDPREF, KNIVAU, CDSUFF,     &
(  185) &                  LDUNDF, PUNDF, YDGR1TAB)
(  186) ELSEIF (IVALCO(1).EQ.4) THEN
(  187)   CALL FADCPL_MT64                             &
(  188) &                 (FA, IREP,IRANG,CLNOMA,      &
(  189) &                  IVALCO,ILONGA,PCHAMP,LDCOSP,&
(  190) &                  LDUNDF, PUNDF)
(  191) ELSE
(  192)   CALL FADECI_MT64                             &
(  193) &                 (FA, IREP,IRANG,CLNOMA,      &
(  194) &                  IVALCO,ILONGA,PCHAMP,LDCOSP)
(  195) ENDIF
(  196) !
(  197) !**
(  198) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(  199) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  200) !-----------------------------------------------------------------------
(  201) !
(  202) 1001 CONTINUE
(  203) IF (ALLOCATED( IVALCO )) DEALLOCATE ( IVALCO )
(  204) KREP=IREP
(  205) LLFATA=LLMOER (IREP,IRANG)
(  206) !
(  207) !        Deverrouillage eventuel du fichier.
(  208) !
(  209) IF (LLVERF) CALL LFIVER_MT64                                &
(  210) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  211) # 212 "facil1.F90"
(  212) IF (LLFATA) THEN
(  213)   INIMES=2
(  214) ELSE
(  215)   INIMES=IXNVMS(IRANG)
(  216) ENDIF
(  217) !
(  218) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  219)   IF (LHOOK) CALL DR_HOOK('FACIL1_MT',1,ZHOOK_HANDLE)
(  220)   RETURN
(  221) ENDIF
(  222) !
(  223) CLNSPR='FACIL1'
(  224) !
(  225) IF (ILPRFU.GE.1) THEN
(  226)   ILPREF=MIN (ILPRFU,INT (LEN (CLPREF), JPLIKB))
(  227)   CLPREF(1:ILPREF)=CDPREF(1:ILPREF)
(  228) ELSE
(  229)   ILPREF=8
(  230)   CLPREF(1:ILPREF)=FA%CHAINC(:ILPREF)
(  231) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 12

(  232) !
(  233) IF (ILSUFU.GE.1) THEN
(  234)   ILSUFF=MIN (ILSUFU,INT (LEN (CLSUFF), JPLIKB))
(  235)   CLSUFF(1:ILSUFF)=CDSUFF(1:ILSUFF)
(  236) ELSE
(  237)   ILSUFF=8
(  238)   CLSUFF(1:ILSUFF)=FA%CHAINC(:ILSUFF)
(  239) ENDIF
(  240) !
(  241) IF (.NOT.LLNOMU) THEN
(  242)   ILNOMU=MIN (ILPREF,FA%NCPCAD)
(  243)   CLNOMA(1:ILNOMU)=CLPREF(1:ILPREF)
(  244) ENDIF
(  245) !
(  246) WRITE (UNIT=CLMESS,FMT='(''KREP='',I5,'', KNUMER='',I3,        &
(  247) &       '', CDPREF='''''',A,'''''', KNIVAU='',I6,               &
(  248) &       '', CDSUFF='''''',A,'''''', LDCOSP= '',L1)')            &
(  249) &   KREP,KNUMER,CLPREF(1:ILPREF),KNIVAU,CLSUFF(1:ILSUFF),LDCOSP
(  250) CALL FAIPAR_MT64                                     &
(  251) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  252) &                CLNSPR, CLNOMA(1:ILNOMU),LLRLFI)
(  253) !
(  254) IF (LHOOK) CALL DR_HOOK('FACIL1_MT',1,ZHOOK_HANDLE)
(  255) # 256 "facil1.F90"
(  256) CONTAINS
(  257) # 258 "facil1.F90"
(  258) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 259 "facil1.F90"
(  259) # 259 "facil1.F90"
(  259) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 260 "facil1.F90"
(  260) # 260 "facil1.F90"
(  260) # 1 ".D[27]/falgra.h"
(    1) LOGICAL FUNCTION FALGRA (KNGRIB)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 13

(    2) !****
(    3) !    Cette fonction renvoie une valeur vraie si la methode d'encodage passee en argument fait appel a grib_api
(    4) !**
(    5) !    Arguments : KNGRIB (Entree) ==> Methode d'encodage
(    6) !
(    7) !
(    8) INTEGER (KIND=JPLIKB) KNGRIB
(    9) INTEGER (KIND=JPLIKB) INGRIB_SP, INGRIB_GP
(   10) LOGICAL LLFALGRA_SP, LLFALGRA_GP
(   11) # 12 ".D[27]/falgra.h"
(   12) FALGRA = .FALSE.
(   13) # 14 ".D[27]/falgra.h"
(   14) IF (100 <= KNGRIB .AND. KNGRIB <= 200) THEN
(   15) # 16 ".D[27]/falgra.h"
(   16)   INGRIB_SP = FALGRA_SP (KNGRIB)
(   17)   INGRIB_GP = FALGRA_GP (KNGRIB)
(   18)   
(   19)   LLFALGRA_SP = &
(   20)    & (INGRIB_SP - 100 ==  1) .OR. &      ! GRIB2 complex packing (bug)
(   21)    & (INGRIB_SP - 100 ==  2) .OR. &      ! GRIB0 
(   22)    & (INGRIB_SP - 100 ==  3)             ! GRIB2 complex packing
(   23)   
(   24)   LLFALGRA_GP = &
(   25)    & ((INGRIB_GP-100) / 20 ==  1) .OR. & ! GRIB2 simple packing
(   26)    & ((INGRIB_GP-100) / 20 ==  2) .OR. & ! GRIB2 second order packing
(   27)    & ((INGRIB_GP-100) / 20 ==  3) .OR. & ! GRIB1 simple packing
(   28)    & ((INGRIB_GP-100) / 20 ==  4) .OR. & ! GRIB1 second order packing
(   29)    & ((INGRIB_GP-100) / 20 ==  5)        ! GRIB2 complex packing
(   30)    
(   31) # 32 ".D[27]/falgra.h"
(   32)   IF (LLFALGRA_GP .AND. LLFALGRA_SP) THEN
(   33)     FALGRA = .TRUE.
(   34)   ELSEIF (LLFALGRA_GP) THEN
(   35)     FALGRA = INGRIB_SP == 100
(   36)   ELSEIF (LLFALGRA_SP) THEN
(   37)     FALGRA = INGRIB_GP == 100
(   38)   ENDIF
(   39) # 40 ".D[27]/falgra.h"
(   40) ENDIF
(   41) # 42 ".D[27]/falgra.h"
(   42) END FUNCTION FALGRA
(   43) # 44 ".D[27]/falgra.h"
(   44) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_SP (KNGRIB)
(   45) INTEGER (KIND=JPLIKB) KNGRIB
(   46) FALGRA_SP = 100+MODULO ((KNGRIB-100),20)
(   47) END FUNCTION FALGRA_SP
(   48) # 49 ".D[27]/falgra.h"
(   49) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_GP (KNGRIB)
(   50) INTEGER (KIND=JPLIKB) KNGRIB
(   51) FALGRA_GP = 100+20*((KNGRIB-100)/20)
(   52) END FUNCTION FALGRA_GP
(   53) # 54 ".D[27]/falgra.h"
(   54) INTEGER (KIND=JPLIKB) FUNCTION FALGRA_ED (KNGRIB)
(   55) INTEGER (KIND=JPLIKB) KNGRIB
(   56) # 57 ".D[27]/falgra.h"
(   57) SELECT CASE (KNGRIB)
(   58)   CASE (160, 180)
(   59)     FALGRA_ED = 1






NVFORTRAN (Version     23.1)          02/24/2023  13:54:48      page 14

(   60)   CASE DEFAULT
(   61)     FALGRA_ED = 2
(   62) END SELECT 
(   63) # 64 ".D[27]/falgra.h"
(   64) END FUNCTION FALGRA_ED
(   65) # 261 "facil1.F90"
(  261) # 262 "facil1.F90"
(  262) END SUBROUTINE FACIL1_MT64
