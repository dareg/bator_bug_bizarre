


NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: faveur.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAVEUR_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, KNGRIB, KNARG1, KNARG2,  &
(    5) &                      KNARG3, KNARG4, KNARG5)
(    6) USE FA_MOD, ONLY : FA_COM
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !        Ce sous-programme permet d'obtenir, pour un fichier ARPEGE
(   13) !     ouvert, les options courantes liees au codage GRIB des champs.
(   14) !     CES OPTIONS NE SONT UTILISEES QUE POUR (RE)ECRIRE DES CHAMPS
(   15) !     codes en GRIB.
(   16) !       ( Visualisation (?) options Effectives pour l'UtilisateuR )
(   17) !**
(   18) !     Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   19) !                 KNUMER (Entree) ==> Numero d'Unite Logique concernee;
(   20) !                 KNGRIB (Sortie) ==> Niveau de codage GRIB (-1,0,1,2,3,4);
(   21) !
(   22) !               * Pour KNGRIB compris entre -1 et 3, les arguments 
(   23) !                 de sortie ont la signification suivante:
(   24) !                 KNARG1 (Sortie) ==> Nombre de bits par valeur point-de-grille;
(   25) !                 KNARG2 (Sortie) ==> Nombre de bits par partie reelle/imaginaire
(   26) !                                     de coefficient spectral;
(   27) !                 KNARG3 (Sortie) ==> Sous-troncature non compactee;
(   28) !                 KNARG4 (Sortie) ==> Puissance de laplacien;
(   29) !                 KNARG5 (Sortie) ==> Degre de modulation de KNARG4.
(   30) !






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 3

(   31) !               * Pour KNGRIB==4, les arguments de sortie ont la 
(   32) !                 signification suivante:
(   33) !                 
(   34) !                 KNARG1 (Sortie) ==> Taille de la couronne a conserver
(   35) !                 KNARG2 (Sortie) ==> Nombre de bits utilises pour le codage
(   36) !                 KNARG3 (Sortie) ==> Inutilise
(   37) !                 KNARG4 (Sortie) ==> Inutilise
(   38) !                 KNARG5 (Sortie) ==> Inutilise
(   39) !
(   40) !
(   41) !
(   42) TYPE(FA_COM) :: FA
(   43) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNGRIB
(   44) INTEGER (KIND=JPLIKB) KNARG1, KNARG2, KNARG3, KNARG4
(   45) INTEGER (KIND=JPLIKB) KNARG5
(   46) !
(   47) INTEGER (KIND=JPLIKB) IREP, IRANG, INIMES
(   48) !
(   49) LOGICAL LLVERF
(   50) !
(   51) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   52) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   53) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   54) LOGICAL                  LLFATA
(   55) 
(   56) !**
(   57) !     1.  -  INITIALISATIONS.
(   58) !-----------------------------------------------------------------------
(   59) !
(   60) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   61) IF (LHOOK) CALL DR_HOOK('FAVEUR_MT',0,ZHOOK_HANDLE)
(   62) CLACTI=''
(   63) LLVERF=.FALSE.
(   64) CALL FANUMU_MT64                 &
(   65) &               (FA, KNUMER,IRANG)
(   66) !
(   67) IF (IRANG.EQ.0) THEN
(   68)   IREP=-51
(   69)   GOTO 1001
(   70) ENDIF
(   71) !
(   72) !         Verrouillage eventuel du fichier.
(   73) !
(   74) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   75) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   76) LLVERF=FA%LFAMUL
(   77) !**
(   78) !     2.  -  RECOPIE DES VALEURS EN COMMON DANS LES ARGUMENTS.
(   79) !-----------------------------------------------------------------------
(   80) !
(   81) KNGRIB=FA%FICHIER(IRANG)%NFGRIB
(   82) 
(   83) IF (KNGRIB /= 4) THEN
(   84)   KNARG1=FA%FICHIER(IRANG)%NBFPDG
(   85)   KNARG2=FA%FICHIER(IRANG)%NBFCSP
(   86)   KNARG3=FA%FICHIER(IRANG)%NSTROF
(   87)   KNARG4=FA%FICHIER(IRANG)%NPUFLA
(   88)   KNARG5=FA%FICHIER(IRANG)%NMFDPL






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 4

(   89) ELSE
(   90)   KNARG1=FA%FICHIER(IRANG)%NCPLSIZE
(   91)   KNARG2=FA%FICHIER(IRANG)%NCPLBITS
(   92)   KNARG3=0
(   93)   KNARG4=0
(   94)   KNARG5=0
(   95) ENDIF
(   96) IREP=0
(   97) !**
(   98) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   99) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  100) !-----------------------------------------------------------------------
(  101) !
(  102) 1001 CONTINUE
(  103) KREP=IREP
(  104) LLFATA=LLMOER (IREP,IRANG)
(  105) !
(  106) !        Deverrouillage eventuel du fichier.
(  107) !
(  108) IF (LLVERF) CALL LFIVER_MT64                                &
(  109) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  110) !
(  111) IF (LLFATA) THEN
(  112)   INIMES=2
(  113) ELSE
(  114)   INIMES=IXNVMS(IRANG)
(  115) ENDIF
(  116) !
(  117) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  118)   IF (LHOOK) CALL DR_HOOK('FAVEUR_MT',1,ZHOOK_HANDLE)
(  119)   RETURN
(  120) ENDIF
(  121) !
(  122) CLNSPR='FAVEUR'
(  123) !
(  124) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,      &
(  125) &       '', KNGRIB='',I2,'', KNARG1='',I3,'', KNARG2='',I3,   &
(  126) &       '', KNARG3='',I2,'', KNARG4='',I3,'', KNARG5='',I3)') &
(  127) &   KREP,KNUMER,KNGRIB,KNARG1,KNARG2,KNARG3,KNARG4,KNARG5
(  128) CALL FAIPAR_MT64                                     &
(  129) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  130) &                CLNSPR,CLACTI,.FALSE.)
(  131) !
(  132) IF (LHOOK) CALL DR_HOOK('FAVEUR_MT',1,ZHOOK_HANDLE)
(  133) 
(  134) CONTAINS
(  135) 
(  136) #include "facom2.llmoer.h"
(  137) #include "facom2.ixnvms.h"
(  138) 
(  139) END SUBROUTINE FAVEUR_MT64
(  140) 
(  141) 
(  142) 
(  143) ! Oct-2012 P. Marguinaud 64b LFI
(  144) SUBROUTINE FAVEUR64                                      &
(  145) &           (KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  146) &           KNARG4, KNARG5)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 5

(  147) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  148) &                   FA_COM_DEFAULT_INIT,  &
(  149) &                   NEW_FA_DEFAULT
(  150) USE LFI_PRECISION
(  151) IMPLICIT NONE
(  152) ! Arguments
(  153) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  154) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  155) INTEGER (KIND=JPLIKB)  KNGRIB                                 !   OUT
(  156) INTEGER (KIND=JPLIKB)  KNARG1                                 !   OUT
(  157) INTEGER (KIND=JPLIKB)  KNARG2                                 !   OUT
(  158) INTEGER (KIND=JPLIKB)  KNARG3                                 !   OUT
(  159) INTEGER (KIND=JPLIKB)  KNARG4                                 !   OUT
(  160) INTEGER (KIND=JPLIKB)  KNARG5                                 !   OUT
(  161) 
(  162) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  163) 
(  164) CALL FAVEUR_MT64                                               &
(  165) &           (FA, KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  166) &           KNARG4, KNARG5)
(  167) 
(  168) END SUBROUTINE FAVEUR64
(  169) 
(  170) SUBROUTINE FAVEUR                                          &
(  171) &           (KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  172) &           KNARG4, KNARG5)
(  173) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT,  &
(  174) &                   FA_COM_DEFAULT_INIT,  &
(  175) &                   NEW_FA_DEFAULT
(  176) USE LFI_PRECISION
(  177) IMPLICIT NONE
(  178) ! Arguments
(  179) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  180) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  181) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  182) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  183) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  184) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  185) INTEGER (KIND=JPLIKM)  KNARG4                                 !   OUT
(  186) INTEGER (KIND=JPLIKM)  KNARG5                                 !   OUT
(  187) 
(  188) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  189) 
(  190) CALL FAVEUR_MT                                                 &
(  191) &           (FA, KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  192) &           KNARG4, KNARG5)
(  193) 
(  194) END SUBROUTINE FAVEUR
(  195) 
(  196) SUBROUTINE FAVEUR_MT                                           &
(  197) &           (FA, KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  198) &           KNARG4, KNARG5)
(  199) USE FA_MOD, ONLY : FA_COM
(  200) USE LFI_PRECISION
(  201) IMPLICIT NONE
(  202) ! Arguments
(  203) TYPE (FA_COM)          FA                                     ! INOUT
(  204) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 6

(  205) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  206) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  207) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  208) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  209) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  210) INTEGER (KIND=JPLIKM)  KNARG4                                 !   OUT
(  211) INTEGER (KIND=JPLIKM)  KNARG5                                 !   OUT
(  212) ! Local integers
(  213) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  214) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  215) INTEGER (KIND=JPLIKB)  INGRIB                                 !   OUT
(  216) INTEGER (KIND=JPLIKB)  INARG1                                 !   OUT
(  217) INTEGER (KIND=JPLIKB)  INARG2                                 !   OUT
(  218) INTEGER (KIND=JPLIKB)  INARG3                                 !   OUT
(  219) INTEGER (KIND=JPLIKB)  INARG4                                 !   OUT
(  220) INTEGER (KIND=JPLIKB)  INARG5                                 !   OUT
(  221) ! Convert arguments
(  222) 
(  223) INUMER     = INT (    KNUMER, JPLIKB)
(  224) 
(  225) CALL FAVEUR_MT64                                               &
(  226) &           (FA, IREP, INUMER, INGRIB, INARG1, INARG2, INARG3, &
(  227) &           INARG4, INARG5)
(  228) 
(  229) KREP       = INT (      IREP, JPLIKM)
(  230) KNGRIB     = INT (    INGRIB, JPLIKM)
(  231) KNARG1     = INT (    INARG1, JPLIKM)
(  232) KNARG2     = INT (    INARG2, JPLIKM)
(  233) KNARG3     = INT (    INARG3, JPLIKM)
(  234) KNARG4     = INT (    INARG4, JPLIKM)
(  235) KNARG5     = INT (    INARG5, JPLIKM)
(  236) 
(  237) END SUBROUTINE FAVEUR_MT
(  238) 
(  239) !INTF KREP            OUT 
(  240) !INTF KNUMER        IN    
(  241) !INTF KNGRIB          OUT 
(  242) !INTF KNARG1          OUT 
(  243) !INTF KNARG2          OUT 
(  244) !INTF KNARG3          OUT 
(  245) !INTF KNARG4          OUT 
(  246) !INTF KNARG5          OUT 
(  247) 





















NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 7

(    1) # 1 "faveur.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAVEUR_MT64                                             &
(    4) &                     (FA,  KREP, KNUMER, KNGRIB, KNARG1, KNARG2,  &
(    5) &                      KNARG3, KNARG4, KNARG5)
(    6) USE FA_MOD, ONLY : FA_COM
(    7) USE PARKIND1, ONLY : JPRB
(    8) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    9) USE LFI_PRECISION
(   10) IMPLICIT NONE
(   11) !****
(   12) !        Ce sous-programme permet d'obtenir, pour un fichier ARPEGE
(   13) !     ouvert, les options courantes liees au codage GRIB des champs.
(   14) !     CES OPTIONS NE SONT UTILISEES QUE POUR (RE)ECRIRE DES CHAMPS
(   15) !     codes en GRIB.
(   16) !       ( Visualisation (?) options Effectives pour l'UtilisateuR )
(   17) !**
(   18) !     Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   19) !                 KNUMER (Entree) ==> Numero d'Unite Logique concernee;
(   20) !                 KNGRIB (Sortie) ==> Niveau de codage GRIB (-1,0,1,2,3,4);
(   21) !
(   22) !               * Pour KNGRIB compris entre -1 et 3, les arguments 
(   23) !                 de sortie ont la signification suivante:
(   24) !                 KNARG1 (Sortie) ==> Nombre de bits par valeur point-de-grille;
(   25) !                 KNARG2 (Sortie) ==> Nombre de bits par partie reelle/imaginaire
(   26) !                                     de coefficient spectral;
(   27) !                 KNARG3 (Sortie) ==> Sous-troncature non compactee;
(   28) !                 KNARG4 (Sortie) ==> Puissance de laplacien;
(   29) !                 KNARG5 (Sortie) ==> Degre de modulation de KNARG4.
(   30) !
(   31) !               * Pour KNGRIB==4, les arguments de sortie ont la 
(   32) !                 signification suivante:
(   33) !                 
(   34) !                 KNARG1 (Sortie) ==> Taille de la couronne a conserver
(   35) !                 KNARG2 (Sortie) ==> Nombre de bits utilises pour le codage
(   36) !                 KNARG3 (Sortie) ==> Inutilise
(   37) !                 KNARG4 (Sortie) ==> Inutilise
(   38) !                 KNARG5 (Sortie) ==> Inutilise
(   39) !
(   40) !
(   41) !
(   42) TYPE(FA_COM) :: FA
(   43) INTEGER (KIND=JPLIKB) KREP, KNUMER, KNGRIB
(   44) INTEGER (KIND=JPLIKB) KNARG1, KNARG2, KNARG3, KNARG4
(   45) INTEGER (KIND=JPLIKB) KNARG5
(   46) !
(   47) INTEGER (KIND=JPLIKB) IREP, IRANG, INIMES
(   48) !
(   49) LOGICAL LLVERF
(   50) !
(   51) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   52) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   53) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   54) LOGICAL                  LLFATA
(   55) # 56 "faveur.F90"
(   56) !**
(   57) !     1.  -  INITIALISATIONS.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 8

(   58) !-----------------------------------------------------------------------
(   59) !
(   60) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   61) IF (LHOOK) CALL DR_HOOK('FAVEUR_MT',0,ZHOOK_HANDLE)
(   62) CLACTI=''
(   63) LLVERF=.FALSE.
(   64) CALL FANUMU_MT64                 &
(   65) &               (FA, KNUMER,IRANG)
(   66) !
(   67) IF (IRANG.EQ.0) THEN
(   68)   IREP=-51
(   69)   GOTO 1001
(   70) ENDIF
(   71) !
(   72) !         Verrouillage eventuel du fichier.
(   73) !
(   74) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   75) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   76) LLVERF=FA%LFAMUL
(   77) !**
(   78) !     2.  -  RECOPIE DES VALEURS EN COMMON DANS LES ARGUMENTS.
(   79) !-----------------------------------------------------------------------
(   80) !
(   81) KNGRIB=FA%FICHIER(IRANG)%NFGRIB
(   82) # 83 "faveur.F90"
(   83) IF (KNGRIB /= 4) THEN
(   84)   KNARG1=FA%FICHIER(IRANG)%NBFPDG
(   85)   KNARG2=FA%FICHIER(IRANG)%NBFCSP
(   86)   KNARG3=FA%FICHIER(IRANG)%NSTROF
(   87)   KNARG4=FA%FICHIER(IRANG)%NPUFLA
(   88)   KNARG5=FA%FICHIER(IRANG)%NMFDPL
(   89) ELSE
(   90)   KNARG1=FA%FICHIER(IRANG)%NCPLSIZE
(   91)   KNARG2=FA%FICHIER(IRANG)%NCPLBITS
(   92)   KNARG3=0
(   93)   KNARG4=0
(   94)   KNARG5=0
(   95) ENDIF
(   96) IREP=0
(   97) !**
(   98) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   99) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(  100) !-----------------------------------------------------------------------
(  101) !
(  102) 1001 CONTINUE
(  103) KREP=IREP
(  104) LLFATA=LLMOER (IREP,IRANG)
(  105) !
(  106) !        Deverrouillage eventuel du fichier.
(  107) !
(  108) IF (LLVERF) CALL LFIVER_MT64                                &
(  109) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(  110) !
(  111) IF (LLFATA) THEN
(  112)   INIMES=2
(  113) ELSE
(  114)   INIMES=IXNVMS(IRANG)
(  115) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 9

(  116) !
(  117) IF (.NOT.LLFATA.AND.INIMES.NE.2)  THEN 
(  118)   IF (LHOOK) CALL DR_HOOK('FAVEUR_MT',1,ZHOOK_HANDLE)
(  119)   RETURN
(  120) ENDIF
(  121) !
(  122) CLNSPR='FAVEUR'
(  123) !
(  124) WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3,      &
(  125) &       '', KNGRIB='',I2,'', KNARG1='',I3,'', KNARG2='',I3,   &
(  126) &       '', KNARG3='',I2,'', KNARG4='',I3,'', KNARG5='',I3)') &
(  127) &   KREP,KNUMER,KNGRIB,KNARG1,KNARG2,KNARG3,KNARG4,KNARG5
(  128) CALL FAIPAR_MT64                                     &
(  129) &               (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  130) &                CLNSPR,CLACTI,.FALSE.)
(  131) !
(  132) IF (LHOOK) CALL DR_HOOK('FAVEUR_MT',1,ZHOOK_HANDLE)
(  133) # 134 "faveur.F90"
(  134) CONTAINS
(  135) # 136 "faveur.F90"
(  136) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 137 "faveur.F90"
(  137) # 137 "faveur.F90"
(  137) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 138 "faveur.F90"
(  138) # 139 "faveur.F90"
(  139) END SUBROUTINE FAVEUR_MT64
(  140) # 143 "faveur.F90"
(  143) ! Oct-2012 P. Marguinaud 64b LFI
(  144) SUBROUTINE FAVEUR64                                      &
(  145) &           (KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  146) &           KNARG4, KNARG5)
(  147) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  148) &                   FA_COM_DEFAULT_INIT,  &






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 10

(  149) &                   NEW_FA_DEFAULT
(  150) USE LFI_PRECISION
(  151) IMPLICIT NONE
(  152) ! Arguments
(  153) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  154) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  155) INTEGER (KIND=JPLIKB)  KNGRIB                                 !   OUT
(  156) INTEGER (KIND=JPLIKB)  KNARG1                                 !   OUT
(  157) INTEGER (KIND=JPLIKB)  KNARG2                                 !   OUT
(  158) INTEGER (KIND=JPLIKB)  KNARG3                                 !   OUT
(  159) INTEGER (KIND=JPLIKB)  KNARG4                                 !   OUT
(  160) INTEGER (KIND=JPLIKB)  KNARG5                                 !   OUT
(  161) # 162 "faveur.F90"
(  162) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  163) # 164 "faveur.F90"
(  164) CALL FAVEUR_MT64                                               &
(  165) &           (FA, KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  166) &           KNARG4, KNARG5)
(  167) # 168 "faveur.F90"
(  168) END SUBROUTINE FAVEUR64
(  169) # 170 "faveur.F90"
(  170) SUBROUTINE FAVEUR                                          &
(  171) &           (KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  172) &           KNARG4, KNARG5)
(  173) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT,  &
(  174) &                   FA_COM_DEFAULT_INIT,  &
(  175) &                   NEW_FA_DEFAULT
(  176) USE LFI_PRECISION
(  177) IMPLICIT NONE
(  178) ! Arguments
(  179) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  180) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  181) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT
(  182) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  183) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  184) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  185) INTEGER (KIND=JPLIKM)  KNARG4                                 !   OUT
(  186) INTEGER (KIND=JPLIKM)  KNARG5                                 !   OUT
(  187) # 188 "faveur.F90"
(  188) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  189) # 190 "faveur.F90"
(  190) CALL FAVEUR_MT                                                 &
(  191) &           (FA, KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  192) &           KNARG4, KNARG5)
(  193) # 194 "faveur.F90"
(  194) END SUBROUTINE FAVEUR
(  195) # 196 "faveur.F90"
(  196) SUBROUTINE FAVEUR_MT                                           &
(  197) &           (FA, KREP, KNUMER, KNGRIB, KNARG1, KNARG2, KNARG3, &
(  198) &           KNARG4, KNARG5)
(  199) USE FA_MOD, ONLY : FA_COM
(  200) USE LFI_PRECISION
(  201) IMPLICIT NONE
(  202) ! Arguments
(  203) TYPE (FA_COM)          FA                                     ! INOUT
(  204) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  205) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  206) INTEGER (KIND=JPLIKM)  KNGRIB                                 !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:41      page 11

(  207) INTEGER (KIND=JPLIKM)  KNARG1                                 !   OUT
(  208) INTEGER (KIND=JPLIKM)  KNARG2                                 !   OUT
(  209) INTEGER (KIND=JPLIKM)  KNARG3                                 !   OUT
(  210) INTEGER (KIND=JPLIKM)  KNARG4                                 !   OUT
(  211) INTEGER (KIND=JPLIKM)  KNARG5                                 !   OUT
(  212) ! Local integers
(  213) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  214) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  215) INTEGER (KIND=JPLIKB)  INGRIB                                 !   OUT
(  216) INTEGER (KIND=JPLIKB)  INARG1                                 !   OUT
(  217) INTEGER (KIND=JPLIKB)  INARG2                                 !   OUT
(  218) INTEGER (KIND=JPLIKB)  INARG3                                 !   OUT
(  219) INTEGER (KIND=JPLIKB)  INARG4                                 !   OUT
(  220) INTEGER (KIND=JPLIKB)  INARG5                                 !   OUT
(  221) ! Convert arguments
(  222) # 223 "faveur.F90"
(  223) INUMER     = INT (    KNUMER, JPLIKB)
(  224) # 225 "faveur.F90"
(  225) CALL FAVEUR_MT64                                               &
(  226) &           (FA, IREP, INUMER, INGRIB, INARG1, INARG2, INARG3, &
(  227) &           INARG4, INARG5)
(  228) # 229 "faveur.F90"
(  229) KREP       = INT (      IREP, JPLIKM)
(  230) KNGRIB     = INT (    INGRIB, JPLIKM)
(  231) KNARG1     = INT (    INARG1, JPLIKM)
(  232) KNARG2     = INT (    INARG2, JPLIKM)
(  233) KNARG3     = INT (    INARG3, JPLIKM)
(  234) KNARG4     = INT (    INARG4, JPLIKM)
(  235) KNARG5     = INT (    INARG5, JPLIKM)
(  236) # 237 "faveur.F90"
(  237) END SUBROUTINE FAVEUR_MT
(  238) # 239 "faveur.F90"
(  239) !INTF KREP            OUT 
(  240) !INTF KNUMER        IN    
(  241) !INTF KNGRIB          OUT 
(  242) !INTF KNARG1          OUT 
(  243) !INTF KNARG2          OUT 
(  244) !INTF KNARG3          OUT 
(  245) !INTF KNARG4          OUT 
(  246) !INTF KNARG5          OUT 
