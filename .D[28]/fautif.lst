


NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fautif.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAUTIF_MT64                           &
(    4) &                     (FA,  KREP, KNUMER, CDIDEN )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme permettant de donner un NOM a l'Identificateur
(   12) !     d'un fichier ARPEGE.
(   13) !       ( l'Utilisateur Traite son Identificateur de Fichier )
(   14) !**
(   15) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   16) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   17) !                CDIDEN (Entree) ==> Nom de l'identificateur.
(   18) !
(   19) !       Une messagerie de niveau 1 est emise dans les cas "normaux"
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   25) !
(   26) INTEGER (KIND=JPLIKB) IREP, ILIDEN, IRANG, INIMES, ILACTI
(   27) !
(   28) LOGICAL LLVERF, LLRLFI
(   29) !
(   30) CHARACTER CDIDEN*(*)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 3

(   31) !
(   32) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   33) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   34) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   35) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   36) LOGICAL                  LLFATA
(   37) 
(   38) !**
(   39) !     1.  -  CONTROLES ET INITIALISATIONS.
(   40) !-----------------------------------------------------------------------
(   41) !
(   42) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   43) IF (LHOOK) CALL DR_HOOK('FAUTIF_MT',0,ZHOOK_HANDLE)
(   44) CLACTI=''
(   45) LLVERF=.FALSE.
(   46) LLRLFI=.FALSE.
(   47) ILIDEN=INT (LEN (CDIDEN), JPLIKB)
(   48) CALL FANUMU_MT64                 &
(   49) &               (FA, KNUMER,IRANG)
(   50) !
(   51) IF (IRANG.EQ.0) THEN
(   52)   IREP=-51
(   53)   GOTO 1001
(   54) ELSEIF (ILIDEN.LE.0) THEN
(   55)   IREP=-65
(   56)   GOTO 1001
(   57) ENDIF
(   58) !
(   59) !         Verrouillage eventuel du fichier.
(   60) !
(   61) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   62) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   63) LLVERF=FA%LFAMUL
(   64) CLNOMA=FA%FICHIER(IRANG)%CIDENT
(   65) !
(   66) IF (CDIDEN.EQ.FA%CPCACH.OR.CDIDEN.EQ.FA%CPCADI.OR. &
(   67) &   CDIDEN.EQ.FA%CPCAFS.OR.CDIDEN.EQ.FA%CPCARP.OR. &
(   68) &   CDIDEN.EQ.FA%CPDATE.OR.CDIDEN.EQ.FA%CPDATX) THEN
(   69)   IREP=-111
(   70)   GOTO 1001
(   71) ENDIF
(   72) !**
(   73) !     2.  -  ON RENOMME L'ARTICLE IDENTIFICATEUR, QUI EXISTE TOUJOURS SI
(   74) !            LE FICHIER EST OUVERT, AU MOINS AVEC UN NOM PAR DEFAUT.
(   75) !-----------------------------------------------------------------------
(   76) !
(   77) IF (CDIDEN.NE.FA%FICHIER(IRANG)%CIDENT) THEN
(   78)   CALL LFIREN_MT64                                             &
(   79) &                 (FA%LFI, IREP,KNUMER,FA%FICHIER(IRANG)%CIDENT,CDIDEN)
(   80)   LLRLFI=IREP.NE.0
(   81)   IF (.NOT.LLRLFI) FA%FICHIER(IRANG)%CIDENT=CDIDEN
(   82) ELSE
(   83)   IREP=0
(   84) ENDIF
(   85) !**
(   86) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   87) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(   88) !-----------------------------------------------------------------------






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 4

(   89) !
(   90) 1001 CONTINUE
(   91) KREP=IREP
(   92) LLFATA=LLMOER (IREP,IRANG)
(   93) !
(   94) !        Deverrouillage eventuel du fichier.
(   95) !
(   96) IF (LLVERF) CALL LFIVER_MT64                                &
(   97) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(   98) !
(   99) IF (LLFATA) THEN
(  100)   INIMES=2
(  101) ELSE
(  102)   INIMES=IXNVMS(IRANG)
(  103) ENDIF
(  104) !
(  105) IF (.NOT.LLFATA.AND.INIMES.EQ.0)  THEN 
(  106)   IF (LHOOK) CALL DR_HOOK('FAUTIF_MT',1,ZHOOK_HANDLE)
(  107)   RETURN
(  108) ENDIF
(  109) !
(  110) CLNSPR='FAUTIF'
(  111) !
(  112) IF (IREP.NE.-65) THEN
(  113)   ILACTI=FA%NCPCAD
(  114)   CLACTI(1:ILACTI)=CDIDEN(1:MIN (ILIDEN,ILACTI))
(  115) ELSE
(  116)   ILACTI=8
(  117)   CLACTI(1:ILACTI)=FA%CHAINC(:ILACTI)
(  118) ENDIF
(  119) !
(  120) IF (INIMES.EQ.2) THEN
(  121)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(  122) &         '', CDIDEN='''''',A,'''''''')')                  &
(  123) &   KREP,KNUMER,CLACTI(1:ILACTI)
(  124)   CALL FAIPAR_MT64                              &
(  125) &                 (FA, KNUMER,INIMES,IREP,LLFATA, &
(  126) &               CLMESS,CLNSPR,                    &
(  127) &               CLACTI(1:ILACTI),LLRLFI)
(  128) ENDIF
(  129) !
(  130) !        La messagerie qui suit n'est pas emise en cas d'erreur fatale.
(  131) !
(  132) IF (INIMES.GE.1.AND.IRANG.NE.0) THEN
(  133)   WRITE (UNIT=CLMESS,FMT=                               &
(  134) &  '(''Ancien Identificateur de l''''unite logique'',I3, &
(  135) &    '' : '''''',A,'''''', Nouveau: '''''',A,'''''''')') &
(  136) &  KNUMER,CLNOMA,FA%FICHIER(IRANG)%CIDENT
(  137)   CALL FAIPAR_MT64                                      &
(  138) &                 (FA, KNUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  139) &                  CLNSPR,CLACTI(1:ILACTI),.FALSE.)
(  140) ENDIF
(  141) !
(  142) IF (LHOOK) CALL DR_HOOK('FAUTIF_MT',1,ZHOOK_HANDLE)
(  143) 
(  144) CONTAINS
(  145) 
(  146) #include "facom2.llmoer.h"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 5

(  147) #include "facom2.ixnvms.h"
(  148) 
(  149) END SUBROUTINE FAUTIF_MT64
(  150) 
(  151) 
(  152) 
(  153) ! Oct-2012 P. Marguinaud 64b LFI
(  154) SUBROUTINE FAUTIF64              &
(  155) &           (KREP, KNUMER, CDIDEN)
(  156) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  157) &                   FA_COM_DEFAULT_INIT,  &
(  158) &                   NEW_FA_DEFAULT
(  159) USE LFI_PRECISION
(  160) IMPLICIT NONE
(  161) ! Arguments
(  162) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  163) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  164) CHARACTER (LEN=*)      CDIDEN                                 ! IN   
(  165) 
(  166) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  167) 
(  168) CALL FAUTIF_MT64                     &
(  169) &           (FA, KREP, KNUMER, CDIDEN)
(  170) 
(  171) END SUBROUTINE FAUTIF64
(  172) 
(  173) SUBROUTINE FAUTIF                &
(  174) &           (KREP, KNUMER, CDIDEN)
(  175) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  176) &                   FA_COM_DEFAULT_INIT,  &
(  177) &                   NEW_FA_DEFAULT
(  178) USE LFI_PRECISION
(  179) IMPLICIT NONE
(  180) ! Arguments
(  181) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  182) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  183) CHARACTER (LEN=*)      CDIDEN                                 ! IN   
(  184) 
(  185) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  186) 
(  187) CALL FAUTIF_MT                       &
(  188) &           (FA, KREP, KNUMER, CDIDEN)
(  189) 
(  190) END SUBROUTINE FAUTIF
(  191) 
(  192) SUBROUTINE FAUTIF_MT                 &
(  193) &           (FA, KREP, KNUMER, CDIDEN)
(  194) USE FA_MOD, ONLY : FA_COM
(  195) USE LFI_PRECISION
(  196) IMPLICIT NONE
(  197) ! Arguments
(  198) TYPE (FA_COM)          FA                                     ! INOUT
(  199) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  200) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  201) CHARACTER (LEN=*)      CDIDEN                                 ! IN   
(  202) ! Local integers
(  203) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  204) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 6

(  205) ! Convert arguments
(  206) 
(  207) INUMER     = INT (    KNUMER, JPLIKB)
(  208) 
(  209) CALL FAUTIF_MT64                     &
(  210) &           (FA, IREP, INUMER, CDIDEN)
(  211) 
(  212) KREP       = INT (      IREP, JPLIKM)
(  213) 
(  214) END SUBROUTINE FAUTIF_MT
(  215) 
(  216) !INTF KREP            OUT 
(  217) !INTF KNUMER        IN    
(  218) !INTF CDIDEN        IN    


















































NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 7

(    1) # 1 "fautif.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FAUTIF_MT64                           &
(    4) &                     (FA,  KREP, KNUMER, CDIDEN )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Sous-programme permettant de donner un NOM a l'Identificateur
(   12) !     d'un fichier ARPEGE.
(   13) !       ( l'Utilisateur Traite son Identificateur de Fichier )
(   14) !**
(   15) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   16) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   17) !                CDIDEN (Entree) ==> Nom de l'identificateur.
(   18) !
(   19) !       Une messagerie de niveau 1 est emise dans les cas "normaux"
(   20) !
(   21) !
(   22) !
(   23) TYPE(FA_COM) :: FA
(   24) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   25) !
(   26) INTEGER (KIND=JPLIKB) IREP, ILIDEN, IRANG, INIMES, ILACTI
(   27) !
(   28) LOGICAL LLVERF, LLRLFI
(   29) !
(   30) CHARACTER CDIDEN*(*)
(   31) !
(   32) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   33) CHARACTER(LEN=FA%JPXNOM) CLNOMA
(   34) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   35) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   36) LOGICAL                  LLFATA
(   37) # 38 "fautif.F90"
(   38) !**
(   39) !     1.  -  CONTROLES ET INITIALISATIONS.
(   40) !-----------------------------------------------------------------------
(   41) !
(   42) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   43) IF (LHOOK) CALL DR_HOOK('FAUTIF_MT',0,ZHOOK_HANDLE)
(   44) CLACTI=''
(   45) LLVERF=.FALSE.
(   46) LLRLFI=.FALSE.
(   47) ILIDEN=INT (LEN (CDIDEN), JPLIKB)
(   48) CALL FANUMU_MT64                 &
(   49) &               (FA, KNUMER,IRANG)
(   50) !
(   51) IF (IRANG.EQ.0) THEN
(   52)   IREP=-51
(   53)   GOTO 1001
(   54) ELSEIF (ILIDEN.LE.0) THEN
(   55)   IREP=-65
(   56)   GOTO 1001
(   57) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 8

(   58) !
(   59) !         Verrouillage eventuel du fichier.
(   60) !
(   61) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   62) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   63) LLVERF=FA%LFAMUL
(   64) CLNOMA=FA%FICHIER(IRANG)%CIDENT
(   65) !
(   66) IF (CDIDEN.EQ.FA%CPCACH.OR.CDIDEN.EQ.FA%CPCADI.OR. &
(   67) &   CDIDEN.EQ.FA%CPCAFS.OR.CDIDEN.EQ.FA%CPCARP.OR. &
(   68) &   CDIDEN.EQ.FA%CPDATE.OR.CDIDEN.EQ.FA%CPDATX) THEN
(   69)   IREP=-111
(   70)   GOTO 1001
(   71) ENDIF
(   72) !**
(   73) !     2.  -  ON RENOMME L'ARTICLE IDENTIFICATEUR, QUI EXISTE TOUJOURS SI
(   74) !            LE FICHIER EST OUVERT, AU MOINS AVEC UN NOM PAR DEFAUT.
(   75) !-----------------------------------------------------------------------
(   76) !
(   77) IF (CDIDEN.NE.FA%FICHIER(IRANG)%CIDENT) THEN
(   78)   CALL LFIREN_MT64                                             &
(   79) &                 (FA%LFI, IREP,KNUMER,FA%FICHIER(IRANG)%CIDENT,CDIDEN)
(   80)   LLRLFI=IREP.NE.0
(   81)   IF (.NOT.LLRLFI) FA%FICHIER(IRANG)%CIDENT=CDIDEN
(   82) ELSE
(   83)   IREP=0
(   84) ENDIF
(   85) !**
(   86) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   87) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(   88) !-----------------------------------------------------------------------
(   89) !
(   90) 1001 CONTINUE
(   91) KREP=IREP
(   92) LLFATA=LLMOER (IREP,IRANG)
(   93) !
(   94) !        Deverrouillage eventuel du fichier.
(   95) !
(   96) IF (LLVERF) CALL LFIVER_MT64                                &
(   97) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(   98) !
(   99) IF (LLFATA) THEN
(  100)   INIMES=2
(  101) ELSE
(  102)   INIMES=IXNVMS(IRANG)
(  103) ENDIF
(  104) !
(  105) IF (.NOT.LLFATA.AND.INIMES.EQ.0)  THEN 
(  106)   IF (LHOOK) CALL DR_HOOK('FAUTIF_MT',1,ZHOOK_HANDLE)
(  107)   RETURN
(  108) ENDIF
(  109) !
(  110) CLNSPR='FAUTIF'
(  111) !
(  112) IF (IREP.NE.-65) THEN
(  113)   ILACTI=FA%NCPCAD
(  114)   CLACTI(1:ILACTI)=CDIDEN(1:MIN (ILIDEN,ILACTI))
(  115) ELSE






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 9

(  116)   ILACTI=8
(  117)   CLACTI(1:ILACTI)=FA%CHAINC(:ILACTI)
(  118) ENDIF
(  119) !
(  120) IF (INIMES.EQ.2) THEN
(  121)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(  122) &         '', CDIDEN='''''',A,'''''''')')                  &
(  123) &   KREP,KNUMER,CLACTI(1:ILACTI)
(  124)   CALL FAIPAR_MT64                              &
(  125) &                 (FA, KNUMER,INIMES,IREP,LLFATA, &
(  126) &               CLMESS,CLNSPR,                    &
(  127) &               CLACTI(1:ILACTI),LLRLFI)
(  128) ENDIF
(  129) !
(  130) !        La messagerie qui suit n'est pas emise en cas d'erreur fatale.
(  131) !
(  132) IF (INIMES.GE.1.AND.IRANG.NE.0) THEN
(  133)   WRITE (UNIT=CLMESS,FMT=                               &
(  134) &  '(''Ancien Identificateur de l''''unite logique'',I3, &
(  135) &    '' : '''''',A,'''''', Nouveau: '''''',A,'''''''')') &
(  136) &  KNUMER,CLNOMA,FA%FICHIER(IRANG)%CIDENT
(  137)   CALL FAIPAR_MT64                                      &
(  138) &                 (FA, KNUMER,INIMES,IREP,.FALSE.,CLMESS, &
(  139) &                  CLNSPR,CLACTI(1:ILACTI),.FALSE.)
(  140) ENDIF
(  141) !
(  142) IF (LHOOK) CALL DR_HOOK('FAUTIF_MT',1,ZHOOK_HANDLE)
(  143) # 144 "fautif.F90"
(  144) CONTAINS
(  145) # 146 "fautif.F90"
(  146) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.
(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 147 "fautif.F90"
(  147) # 147 "fautif.F90"
(  147) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 10

(   13) # 148 "fautif.F90"
(  148) # 149 "fautif.F90"
(  149) END SUBROUTINE FAUTIF_MT64
(  150) # 153 "fautif.F90"
(  153) ! Oct-2012 P. Marguinaud 64b LFI
(  154) SUBROUTINE FAUTIF64              &
(  155) &           (KREP, KNUMER, CDIDEN)
(  156) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  157) &                   FA_COM_DEFAULT_INIT,  &
(  158) &                   NEW_FA_DEFAULT
(  159) USE LFI_PRECISION
(  160) IMPLICIT NONE
(  161) ! Arguments
(  162) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  163) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  164) CHARACTER (LEN=*)      CDIDEN                                 ! IN   
(  165) # 166 "fautif.F90"
(  166) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  167) # 168 "fautif.F90"
(  168) CALL FAUTIF_MT64                     &
(  169) &           (FA, KREP, KNUMER, CDIDEN)
(  170) # 171 "fautif.F90"
(  171) END SUBROUTINE FAUTIF64
(  172) # 173 "fautif.F90"
(  173) SUBROUTINE FAUTIF                &
(  174) &           (KREP, KNUMER, CDIDEN)
(  175) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  176) &                   FA_COM_DEFAULT_INIT,  &
(  177) &                   NEW_FA_DEFAULT
(  178) USE LFI_PRECISION
(  179) IMPLICIT NONE
(  180) ! Arguments
(  181) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  182) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  183) CHARACTER (LEN=*)      CDIDEN                                 ! IN   
(  184) # 185 "fautif.F90"
(  185) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  186) # 187 "fautif.F90"
(  187) CALL FAUTIF_MT                       &
(  188) &           (FA, KREP, KNUMER, CDIDEN)
(  189) # 190 "fautif.F90"
(  190) END SUBROUTINE FAUTIF
(  191) # 192 "fautif.F90"
(  192) SUBROUTINE FAUTIF_MT                 &
(  193) &           (FA, KREP, KNUMER, CDIDEN)
(  194) USE FA_MOD, ONLY : FA_COM
(  195) USE LFI_PRECISION
(  196) IMPLICIT NONE
(  197) ! Arguments
(  198) TYPE (FA_COM)          FA                                     ! INOUT
(  199) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  200) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  201) CHARACTER (LEN=*)      CDIDEN                                 ! IN   
(  202) ! Local integers
(  203) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  204) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  205) ! Convert arguments
(  206) # 207 "fautif.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:39      page 11

(  207) INUMER     = INT (    KNUMER, JPLIKB)
(  208) # 209 "fautif.F90"
(  209) CALL FAUTIF_MT64                     &
(  210) &           (FA, IREP, INUMER, CDIDEN)
(  211) # 212 "fautif.F90"
(  212) KREP       = INT (      IREP, JPLIKM)
(  213) # 214 "fautif.F90"
(  214) END SUBROUTINE FAUTIF_MT
(  215) # 216 "fautif.F90"
(  216) !INTF KREP            OUT 
(  217) !INTF KNUMER        IN    
(  218) !INTF CDIDEN        IN    
