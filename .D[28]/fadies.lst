


NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fadies.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FADIES_MT64                           &
(    4) &                     (FA,  KREP, KNUMER, KDATEF )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme permettant d'obtenir la date d'un fichier ouvert
(   12) !     pour le logiciel de Fichiers ARPEGE, et deja muni d'une date.
(   13) !     ( "DIES" = jour en latin... )
(   14) !**
(   15) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   16) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   17) !     (Tableau)  KDATEF (Sortie) ==> Date elle-meme (FA%JPLDAT mots).
(   18) !
(   19) !
(   20) !
(   21) TYPE(FA_COM) :: FA
(   22) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   23) INTEGER (KIND=JPLIKB) KDATEF (FA%JPLDAT)
(   24) !
(   25) INTEGER (KIND=JPLIKB) IRANG, J, IREP, INIMES
(   26) !
(   27) LOGICAL LLVERF
(   28) !
(   29) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   30) CHARACTER(LEN=FA%JPLMES) CLMESS 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 3

(   31) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   32) LOGICAL                  LLFATA
(   33) 
(   34) !**
(   35) !     1.  -  CONTROLES DES PARAMETRES D'APPEL, ET INITIALISATIONS.
(   36) !-----------------------------------------------------------------------
(   37) !
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) IF (LHOOK) CALL DR_HOOK('FADIES_MT',0,ZHOOK_HANDLE)
(   40) CLACTI=''
(   41) LLVERF=.FALSE.
(   42) CALL FANUMU_MT64                 &
(   43) &               (FA, KNUMER,IRANG)
(   44) !
(   45) IF (IRANG.EQ.0) THEN
(   46)   IREP=-51
(   47)   GOTO 1001
(   48) ENDIF
(   49) !
(   50) !         Verrouillage eventuel du fichier.
(   51) !
(   52) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   53) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   54) LLVERF=FA%LFAMUL
(   55) !**
(   56) !     2.  -  CONTROLE DE DEFINITION PREALABLE DE LA DATE.
(   57) !-----------------------------------------------------------------------
(   58) !
(   59) IF (FA%FICHIER(IRANG)%LCREAF) THEN
(   60)   IREP=-85
(   61)   GOTO 1001
(   62) ENDIF
(   63) !**
(   64) !     3.  -  TRANSFERT DE LA TABLE "FA%MADATE" DANS LE TABLEAU ARGUMENT.
(   65) !-----------------------------------------------------------------------
(   66) !
(   67) DO J=1,FA%JPLDAT
(   68) KDATEF(J)=FA%FICHIER(IRANG)%MADATE(J)
(   69) ENDDO
(   70) !
(   71) IREP=0
(   72) !**
(   73) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   74) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(   75) !-----------------------------------------------------------------------
(   76) !
(   77) 1001 CONTINUE
(   78) KREP=IREP
(   79) LLFATA=LLMOER (IREP,IRANG)
(   80) !
(   81) !        Deverrouillage eventuel du fichier.
(   82) !
(   83) IF (LLVERF) CALL LFIVER_MT64                                &
(   84) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(   85) !
(   86) IF (LLFATA.OR.IXNVMS(IRANG).EQ.2) THEN
(   87)   INIMES=2
(   88) ELSE






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 4

(   89)   IF (LHOOK) CALL DR_HOOK('FADIES_MT',1,ZHOOK_HANDLE)
(   90)   RETURN
(   91) ENDIF
(   92) !
(   93) CLNSPR='FADIES'
(   94) !
(   95) IF (INIMES.EQ.2) THEN
(   96)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(   97) &       '', KDATEF(1:5)='',I5,2(''/'',I2),I3,'':'',I2.2,   &
(   98) &       '', KDATEF(7:8)='',I6,''-'',I6)') KREP,KNUMER,     &
(   99) &     (KDATEF(J),J=1,5),(KDATEF(J),J=7,8)
(  100)   CALL FAIPAR_MT64                                     &
(  101) &                 (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  102) &               CLNSPR,CLACTI,.FALSE.)
(  103) ENDIF
(  104) !
(  105) IF (LHOOK) CALL DR_HOOK('FADIES_MT',1,ZHOOK_HANDLE)
(  106) 
(  107) CONTAINS
(  108) 
(  109) #include "facom2.llmoer.h"
(  110) #include "facom2.ixnvms.h"
(  111) 
(  112) END SUBROUTINE FADIES_MT64
(  113) 
(  114) 
(  115) 
(  116) ! Oct-2012 P. Marguinaud 64b LFI
(  117) SUBROUTINE FADIES64              &
(  118) &           (KREP, KNUMER, KDATEF)
(  119) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  120) &                   FA_COM_DEFAULT_INIT,  &
(  121) &                   NEW_FA_DEFAULT
(  122) USE LFI_PRECISION
(  123) IMPLICIT NONE
(  124) ! Arguments
(  125) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  126) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  127) INTEGER (KIND=JPLIKB)  KDATEF     (FA%JPLDAT)                 !   OUT
(  128) 
(  129) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  130) 
(  131) CALL FADIES_MT64                     &
(  132) &           (FA, KREP, KNUMER, KDATEF)
(  133) 
(  134) END SUBROUTINE FADIES64
(  135) 
(  136) SUBROUTINE FADIES                &
(  137) &           (KREP, KNUMER, KDATEF)
(  138) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  139) &                   FA_COM_DEFAULT_INIT,  &
(  140) &                   NEW_FA_DEFAULT
(  141) USE LFI_PRECISION
(  142) IMPLICIT NONE
(  143) ! Arguments
(  144) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  145) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  146) INTEGER (KIND=JPLIKM)  KDATEF     (FA%JPLDAT)                 !   OUT






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 5

(  147) 
(  148) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  149) 
(  150) CALL FADIES_MT                       &
(  151) &           (FA, KREP, KNUMER, KDATEF)
(  152) 
(  153) END SUBROUTINE FADIES
(  154) 
(  155) SUBROUTINE FADIES_MT                 &
(  156) &           (FA, KREP, KNUMER, KDATEF)
(  157) USE FA_MOD, ONLY : FA_COM
(  158) USE LFI_PRECISION
(  159) IMPLICIT NONE
(  160) ! Arguments
(  161) TYPE (FA_COM)          FA                                     ! INOUT
(  162) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  163) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  164) INTEGER (KIND=JPLIKM)  KDATEF     (FA%JPLDAT)                 !   OUT
(  165) ! Local integers
(  166) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  167) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  168) INTEGER (KIND=JPLIKB)  IDATEF     (FA%JPLDAT)                 !   OUT
(  169) ! Convert arguments
(  170) 
(  171) INUMER     = INT (    KNUMER, JPLIKB)
(  172) 
(  173) CALL FADIES_MT64                     &
(  174) &           (FA, IREP, INUMER, IDATEF)
(  175) 
(  176) KREP       = INT (      IREP, JPLIKM)
(  177) KDATEF     = INT (    IDATEF, JPLIKM)
(  178) 
(  179) END SUBROUTINE FADIES_MT
(  180) 
(  181) !INTF KREP            OUT                               
(  182) !INTF KNUMER        IN                                  
(  183) !INTF KDATEF          OUT DIMS=FA%JPLDAT                
(  184) 
(  185) 

























NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 6

(    1) # 1 "fadies.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FADIES_MT64                           &
(    4) &                     (FA,  KREP, KNUMER, KDATEF )
(    5) USE FA_MOD, ONLY : FA_COM
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !      Sous-programme permettant d'obtenir la date d'un fichier ouvert
(   12) !     pour le logiciel de Fichiers ARPEGE, et deja muni d'une date.
(   13) !     ( "DIES" = jour en latin... )
(   14) !**
(   15) !    Arguments : KREP   (Sortie) ==> Code-reponse du sous-programme;
(   16) !                KNUMER (Entree) ==> Numero de l'unite logique;
(   17) !     (Tableau)  KDATEF (Sortie) ==> Date elle-meme (FA%JPLDAT mots).
(   18) !
(   19) !
(   20) !
(   21) TYPE(FA_COM) :: FA
(   22) INTEGER (KIND=JPLIKB) KREP, KNUMER
(   23) INTEGER (KIND=JPLIKB) KDATEF (FA%JPLDAT)
(   24) !
(   25) INTEGER (KIND=JPLIKB) IRANG, J, IREP, INIMES
(   26) !
(   27) LOGICAL LLVERF
(   28) !
(   29) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   30) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   31) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   32) LOGICAL                  LLFATA
(   33) # 34 "fadies.F90"
(   34) !**
(   35) !     1.  -  CONTROLES DES PARAMETRES D'APPEL, ET INITIALISATIONS.
(   36) !-----------------------------------------------------------------------
(   37) !
(   38) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   39) IF (LHOOK) CALL DR_HOOK('FADIES_MT',0,ZHOOK_HANDLE)
(   40) CLACTI=''
(   41) LLVERF=.FALSE.
(   42) CALL FANUMU_MT64                 &
(   43) &               (FA, KNUMER,IRANG)
(   44) !
(   45) IF (IRANG.EQ.0) THEN
(   46)   IREP=-51
(   47)   GOTO 1001
(   48) ENDIF
(   49) !
(   50) !         Verrouillage eventuel du fichier.
(   51) !
(   52) IF (FA%LFAMUL) CALL LFIVER_MT64                               &
(   53) &                              (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'ON')
(   54) LLVERF=FA%LFAMUL
(   55) !**
(   56) !     2.  -  CONTROLE DE DEFINITION PREALABLE DE LA DATE.
(   57) !-----------------------------------------------------------------------






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 7

(   58) !
(   59) IF (FA%FICHIER(IRANG)%LCREAF) THEN
(   60)   IREP=-85
(   61)   GOTO 1001
(   62) ENDIF
(   63) !**
(   64) !     3.  -  TRANSFERT DE LA TABLE "FA%MADATE" DANS LE TABLEAU ARGUMENT.
(   65) !-----------------------------------------------------------------------
(   66) !
(   67) DO J=1,FA%JPLDAT
(   68) KDATEF(J)=FA%FICHIER(IRANG)%MADATE(J)
(   69) ENDDO
(   70) !
(   71) IREP=0
(   72) !**
(   73) !    10.  -  PHASE TERMINALE : MESSAGERIE, AVEC "ABORT" EVENTUEL,
(   74) !            VIA LE SOUS-PROGRAMME "FAIPAR" .
(   75) !-----------------------------------------------------------------------
(   76) !
(   77) 1001 CONTINUE
(   78) KREP=IREP
(   79) LLFATA=LLMOER (IREP,IRANG)
(   80) !
(   81) !        Deverrouillage eventuel du fichier.
(   82) !
(   83) IF (LLVERF) CALL LFIVER_MT64                                &
(   84) &                           (FA%LFI, FA%FICHIER(IRANG)%VRFICH,'OFF')
(   85) !
(   86) IF (LLFATA.OR.IXNVMS(IRANG).EQ.2) THEN
(   87)   INIMES=2
(   88) ELSE
(   89)   IF (LHOOK) CALL DR_HOOK('FADIES_MT',1,ZHOOK_HANDLE)
(   90)   RETURN
(   91) ENDIF
(   92) !
(   93) CLNSPR='FADIES'
(   94) !
(   95) IF (INIMES.EQ.2) THEN
(   96)   WRITE (UNIT=CLMESS,FMT='(''KREP='',I4,'', KNUMER='',I3, &
(   97) &       '', KDATEF(1:5)='',I5,2(''/'',I2),I3,'':'',I2.2,   &
(   98) &       '', KDATEF(7:8)='',I6,''-'',I6)') KREP,KNUMER,     &
(   99) &     (KDATEF(J),J=1,5),(KDATEF(J),J=7,8)
(  100)   CALL FAIPAR_MT64                                     &
(  101) &                 (FA, KNUMER,INIMES,IREP,LLFATA,CLMESS, &
(  102) &               CLNSPR,CLACTI,.FALSE.)
(  103) ENDIF
(  104) !
(  105) IF (LHOOK) CALL DR_HOOK('FADIES_MT',1,ZHOOK_HANDLE)
(  106) # 107 "fadies.F90"
(  107) CONTAINS
(  108) # 109 "fadies.F90"
(  109) # 1 ".D[27]/facom2.llmoer.h"
(    1) !
(    2) !       Fonction servant a rendre fatale ou non une erreur detectee,
(    3) !       a l'aide du code reponse courant, du niveau de filtrage global,
(    4) !       et de l'option d'erreur fatale propre au fichier.
(    5) !       s'il n'y a pas de fichier (I5678=0, d'ou dimensionnement de
(    6) !          *LERRFA*), le niveau de filtrage joue le role principal.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 8

(    7) !
(    8) LOGICAL FUNCTION LLMOER (I1234,I5678)
(    9) INTEGER (KIND=JPLIKB) :: I1234,I5678
(   10) LLMOER=I1234.EQ.-66_JPLIKB .OR. (I1234.NE.0_JPLIKB .AND.(FA%NRFAGA.EQ.0_JPLIKB &
(   11)      & .OR. (FA%NRFAGA.EQ.1_JPLIKB .AND.FA%FICHIER(I5678)%LERRFA)))
(   12) END FUNCTION
(   13) # 110 "fadies.F90"
(  110) # 110 "fadies.F90"
(  110) # 1 ".D[27]/facom2.ixnvms.h"
(    1) !*
(    2) !       Fonction "en ligne" donnant le plus haut niveau de messagerie
(    3) !       acceptable pour l'unite logique de rang "I3456"
(    4) !       (utilisation des niveaux de messagerie global et propre au
(    5) !        fichier; s'il n'y a pas de fichier - I3456=0, d'ou le dimensio-
(    6) !        nnement de *NIVOMS* a partir de zero, le niveau de filtrage
(    7) !        global joue seul)
(    8) !
(    9) INTEGER (KIND=JPLIKB) FUNCTION IXNVMS (I3456)
(   10) INTEGER (KIND=JPLIKB) :: I3456
(   11) IXNVMS =MIN (2_JPLIKB ,2_JPLIKB *FA%NIMSGA,MAX (2_JPLIKB *FA%NIMSGA-2_JPLIKB ,FA%FICHIER(I3456)%NIVOMS))
(   12) END FUNCTION
(   13) # 111 "fadies.F90"
(  111) # 112 "fadies.F90"
(  112) END SUBROUTINE FADIES_MT64
(  113) # 116 "fadies.F90"
(  116) ! Oct-2012 P. Marguinaud 64b LFI
(  117) SUBROUTINE FADIES64              &
(  118) &           (KREP, KNUMER, KDATEF)
(  119) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  120) &                   FA_COM_DEFAULT_INIT,  &
(  121) &                   NEW_FA_DEFAULT
(  122) USE LFI_PRECISION
(  123) IMPLICIT NONE
(  124) ! Arguments
(  125) INTEGER (KIND=JPLIKB)  KREP                                   !   OUT
(  126) INTEGER (KIND=JPLIKB)  KNUMER                                 ! IN   
(  127) INTEGER (KIND=JPLIKB)  KDATEF     (FA%JPLDAT)                 !   OUT
(  128) # 129 "fadies.F90"
(  129) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  130) # 131 "fadies.F90"
(  131) CALL FADIES_MT64                     &
(  132) &           (FA, KREP, KNUMER, KDATEF)
(  133) # 134 "fadies.F90"
(  134) END SUBROUTINE FADIES64
(  135) # 136 "fadies.F90"
(  136) SUBROUTINE FADIES                &
(  137) &           (KREP, KNUMER, KDATEF)
(  138) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  139) &                   FA_COM_DEFAULT_INIT,  &
(  140) &                   NEW_FA_DEFAULT
(  141) USE LFI_PRECISION
(  142) IMPLICIT NONE
(  143) ! Arguments
(  144) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  145) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  146) INTEGER (KIND=JPLIKM)  KDATEF     (FA%JPLDAT)                 !   OUT
(  147) # 148 "fadies.F90"
(  148) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()






NVFORTRAN (Version     23.1)          02/24/2023  13:54:14      page 9

(  149) # 150 "fadies.F90"
(  150) CALL FADIES_MT                       &
(  151) &           (FA, KREP, KNUMER, KDATEF)
(  152) # 153 "fadies.F90"
(  153) END SUBROUTINE FADIES
(  154) # 155 "fadies.F90"
(  155) SUBROUTINE FADIES_MT                 &
(  156) &           (FA, KREP, KNUMER, KDATEF)
(  157) USE FA_MOD, ONLY : FA_COM
(  158) USE LFI_PRECISION
(  159) IMPLICIT NONE
(  160) ! Arguments
(  161) TYPE (FA_COM)          FA                                     ! INOUT
(  162) INTEGER (KIND=JPLIKM)  KREP                                   !   OUT
(  163) INTEGER (KIND=JPLIKM)  KNUMER                                 ! IN   
(  164) INTEGER (KIND=JPLIKM)  KDATEF     (FA%JPLDAT)                 !   OUT
(  165) ! Local integers
(  166) INTEGER (KIND=JPLIKB)  IREP                                   !   OUT
(  167) INTEGER (KIND=JPLIKB)  INUMER                                 ! IN   
(  168) INTEGER (KIND=JPLIKB)  IDATEF     (FA%JPLDAT)                 !   OUT
(  169) ! Convert arguments
(  170) # 171 "fadies.F90"
(  171) INUMER     = INT (    KNUMER, JPLIKB)
(  172) # 173 "fadies.F90"
(  173) CALL FADIES_MT64                     &
(  174) &           (FA, IREP, INUMER, IDATEF)
(  175) # 176 "fadies.F90"
(  176) KREP       = INT (      IREP, JPLIKM)
(  177) KDATEF     = INT (    IDATEF, JPLIKM)
(  178) # 179 "fadies.F90"
(  179) END SUBROUTINE FADIES_MT
(  180) # 181 "fadies.F90"
(  181) !INTF KREP            OUT                               
(  182) !INTF KNUMER        IN                                  
(  183) !INTF KDATEF          OUT DIMS=FA%JPLDAT                
