


NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: fanerg.F90

(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FANERG_MT64             &
(    4) &                     (FA,  KNIVAU )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme se charge de mettre le Niveau Global d'Erreur
(   12) !     Fatale du logiciel de Fichiers ARPEGE (*FA%NRFAGA*) a la valeur
(   13) !     KNIVAU, de meme que la variable correspondante du logiciel LFI.
(   14) !     Par defaut, FA%NRFAGA vaut 1.
(   15) !**
(   16) !        Argument : KNIVAU (Entree) ==> Niveau global d'erreur fatale.
(   17) !                                       Valeurs possibles:
(   18) !
(   19) !     0 : Rendre fatale toute erreur detectee, meme si elle correspond
(   20) !         a un fichier ouvert avec l'option "pas d'erreur fatale".
(   21) !     1 : Ne rend fatales que certaines erreurs "globales", c'est-a-dire
(   22) !         non reliables a un fichier ouvert, et les erreurs sur les fi-
(   23) !         chiers ouverts avec l'option "erreur fatale" (Mode par defaut)
(   24) !     2 : Passer outre toute erreur detectee, meme si elle correspond
(   25) !         a un fichier ouvert avec l'option "erreur fatale".
(   26) !         Neanmoins, le code-reponse eventuel ne sera pas zero.
(   27) !
(   28) !
(   29) !
(   30) TYPE(FA_COM) :: FA






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 3

(   31) INTEGER (KIND=JPLIKB) KNIVAU
(   32) !
(   33) INTEGER (KIND=JPLIKB) IREP, INIMES, INUMER
(   34) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   35) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   36) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   37) LOGICAL                  LLFATA
(   38) 
(   39) !
(   40) !
(   41) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   42) IF (LHOOK) CALL DR_HOOK('FANERG_MT',0,ZHOOK_HANDLE)
(   43) CLACTI=''
(   44) IF (FA%FANERG_LLPREA) THEN
(   45)   CALL FARINE_MT64              &
(   46) &                 (FA, 2_JPLIKB )
(   47)   FA%FANERG_LLPREA=.FALSE.
(   48) ENDIF
(   49) !
(   50) IF (KNIVAU.GE.0.AND.KNIVAU.LE.2) THEN
(   51)   FA%NRFAGA=KNIVAU
(   52)   CALL LFINEG_MT64                &
(   53) &                 (FA%LFI, KNIVAU)
(   54)   IREP=0
(   55) ELSE
(   56)   IREP=-52
(   57) ENDIF
(   58) !
(   59) LLFATA=IREP.NE.0.AND.FA%NRFAGA.NE.2
(   60) !
(   61) IF (LLFATA) THEN
(   62)   INIMES=2
(   63) ELSEIF (IREP.NE.0) THEN
(   64)   INIMES=0
(   65) ELSEIF (FA%NIMSGA.EQ.2) THEN
(   66)   INIMES=2
(   67) ELSE
(   68)   IF (LHOOK) CALL DR_HOOK('FANERG_MT',1,ZHOOK_HANDLE)
(   69)   RETURN
(   70) ENDIF
(   71) !
(   72) INUMER=JPNIIL
(   73) CLNSPR='FANERG'
(   74) !
(   75) IF (MAX (INIMES,FA%NIMSGA).EQ.2) THEN
(   76)   WRITE (UNIT=CLMESS,                                  &
(   77) &         FMT='(''KNIVAU='',I5,'', CODE INTERNE='',I4)' &
(   78) &         ) KNIVAU,IREP
(   79) ENDIF
(   80) !
(   81) CALL FAIPAR_MT64                                     &
(   82) &               (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(   83) &             CLNSPR,CLACTI,.FALSE.)
(   84) !
(   85) IF (LHOOK) CALL DR_HOOK('FANERG_MT',1,ZHOOK_HANDLE)
(   86) END SUBROUTINE FANERG_MT64
(   87) 
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 4

(   89) 
(   90) ! Oct-2012 P. Marguinaud 64b LFI
(   91) SUBROUTINE FANERG64           &
(   92) &           (KNIVAU)
(   93) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   94) &                   FA_COM_DEFAULT_INIT,  &
(   95) &                   NEW_FA_DEFAULT
(   96) USE LFI_PRECISION
(   97) IMPLICIT NONE
(   98) ! Arguments
(   99) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  100) 
(  101) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  102) 
(  103) CALL FANERG_MT64           &
(  104) &           (FA, KNIVAU)
(  105) 
(  106) END SUBROUTINE FANERG64
(  107) 
(  108) SUBROUTINE FANERG             &
(  109) &           (KNIVAU)
(  110) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  111) &                   FA_COM_DEFAULT_INIT,  &
(  112) &                   NEW_FA_DEFAULT
(  113) USE LFI_PRECISION
(  114) IMPLICIT NONE
(  115) ! Arguments
(  116) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  117) 
(  118) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  119) 
(  120) CALL FANERG_MT             &
(  121) &           (FA, KNIVAU)
(  122) 
(  123) END SUBROUTINE FANERG
(  124) 
(  125) SUBROUTINE FANERG_MT             &
(  126) &           (FA, KNIVAU)
(  127) USE FA_MOD, ONLY : FA_COM
(  128) USE LFI_PRECISION
(  129) IMPLICIT NONE
(  130) ! Arguments
(  131) TYPE (FA_COM)          FA                                     ! INOUT
(  132) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  133) ! Local integers
(  134) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  135) ! Convert arguments
(  136) 
(  137) INIVAU     = INT (    KNIVAU, JPLIKB)
(  138) 
(  139) CALL FANERG_MT64           &
(  140) &           (FA, INIVAU)
(  141) 
(  142) 
(  143) END SUBROUTINE FANERG_MT
(  144) 
(  145) !INTF KNIVAU        IN    







NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 5

(    1) # 1 "fanerg.F90"
(    1) ! Oct-2012 P. Marguinaud 64b LFI
(    2) ! Jan-2011 P. Marguinaud Thread-safe FA
(    3) SUBROUTINE FANERG_MT64             &
(    4) &                     (FA,  KNIVAU )
(    5) USE FA_MOD, ONLY : FA_COM, JPNIIL
(    6) USE PARKIND1, ONLY : JPRB
(    7) USE YOMHOOK , ONLY : LHOOK, DR_HOOK
(    8) USE LFI_PRECISION
(    9) IMPLICIT NONE
(   10) !****
(   11) !        Ce sous-programme se charge de mettre le Niveau Global d'Erreur
(   12) !     Fatale du logiciel de Fichiers ARPEGE (*FA%NRFAGA*) a la valeur
(   13) !     KNIVAU, de meme que la variable correspondante du logiciel LFI.
(   14) !     Par defaut, FA%NRFAGA vaut 1.
(   15) !**
(   16) !        Argument : KNIVAU (Entree) ==> Niveau global d'erreur fatale.
(   17) !                                       Valeurs possibles:
(   18) !
(   19) !     0 : Rendre fatale toute erreur detectee, meme si elle correspond
(   20) !         a un fichier ouvert avec l'option "pas d'erreur fatale".
(   21) !     1 : Ne rend fatales que certaines erreurs "globales", c'est-a-dire
(   22) !         non reliables a un fichier ouvert, et les erreurs sur les fi-
(   23) !         chiers ouverts avec l'option "erreur fatale" (Mode par defaut)
(   24) !     2 : Passer outre toute erreur detectee, meme si elle correspond
(   25) !         a un fichier ouvert avec l'option "erreur fatale".
(   26) !         Neanmoins, le code-reponse eventuel ne sera pas zero.
(   27) !
(   28) !
(   29) !
(   30) TYPE(FA_COM) :: FA
(   31) INTEGER (KIND=JPLIKB) KNIVAU
(   32) !
(   33) INTEGER (KIND=JPLIKB) IREP, INIMES, INUMER
(   34) CHARACTER(LEN=FA%JPXNOM) CLACTI 
(   35) CHARACTER(LEN=FA%JPLMES) CLMESS 
(   36) CHARACTER(LEN=FA%JPLSPX) CLNSPR
(   37) LOGICAL                  LLFATA
(   38) # 39 "fanerg.F90"
(   39) !
(   40) !
(   41) REAL(KIND=JPRB) :: ZHOOK_HANDLE
(   42) IF (LHOOK) CALL DR_HOOK('FANERG_MT',0,ZHOOK_HANDLE)
(   43) CLACTI=''
(   44) IF (FA%FANERG_LLPREA) THEN
(   45)   CALL FARINE_MT64              &
(   46) &                 (FA, 2_JPLIKB )
(   47)   FA%FANERG_LLPREA=.FALSE.
(   48) ENDIF
(   49) !
(   50) IF (KNIVAU.GE.0.AND.KNIVAU.LE.2) THEN
(   51)   FA%NRFAGA=KNIVAU
(   52)   CALL LFINEG_MT64                &
(   53) &                 (FA%LFI, KNIVAU)
(   54)   IREP=0
(   55) ELSE
(   56)   IREP=-52
(   57) ENDIF






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 6

(   58) !
(   59) LLFATA=IREP.NE.0.AND.FA%NRFAGA.NE.2
(   60) !
(   61) IF (LLFATA) THEN
(   62)   INIMES=2
(   63) ELSEIF (IREP.NE.0) THEN
(   64)   INIMES=0
(   65) ELSEIF (FA%NIMSGA.EQ.2) THEN
(   66)   INIMES=2
(   67) ELSE
(   68)   IF (LHOOK) CALL DR_HOOK('FANERG_MT',1,ZHOOK_HANDLE)
(   69)   RETURN
(   70) ENDIF
(   71) !
(   72) INUMER=JPNIIL
(   73) CLNSPR='FANERG'
(   74) !
(   75) IF (MAX (INIMES,FA%NIMSGA).EQ.2) THEN
(   76)   WRITE (UNIT=CLMESS,                                  &
(   77) &         FMT='(''KNIVAU='',I5,'', CODE INTERNE='',I4)' &
(   78) &         ) KNIVAU,IREP
(   79) ENDIF
(   80) !
(   81) CALL FAIPAR_MT64                                     &
(   82) &               (FA, INUMER,INIMES,IREP,LLFATA,CLMESS, &
(   83) &             CLNSPR,CLACTI,.FALSE.)
(   84) !
(   85) IF (LHOOK) CALL DR_HOOK('FANERG_MT',1,ZHOOK_HANDLE)
(   86) END SUBROUTINE FANERG_MT64
(   87) # 90 "fanerg.F90"
(   90) ! Oct-2012 P. Marguinaud 64b LFI
(   91) SUBROUTINE FANERG64           &
(   92) &           (KNIVAU)
(   93) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(   94) &                   FA_COM_DEFAULT_INIT,  &
(   95) &                   NEW_FA_DEFAULT
(   96) USE LFI_PRECISION
(   97) IMPLICIT NONE
(   98) ! Arguments
(   99) INTEGER (KIND=JPLIKB)  KNIVAU                                 ! IN   
(  100) # 101 "fanerg.F90"
(  101) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  102) # 103 "fanerg.F90"
(  103) CALL FANERG_MT64           &
(  104) &           (FA, KNIVAU)
(  105) # 106 "fanerg.F90"
(  106) END SUBROUTINE FANERG64
(  107) # 108 "fanerg.F90"
(  108) SUBROUTINE FANERG             &
(  109) &           (KNIVAU)
(  110) USE FA_MOD, ONLY : FA => FA_COM_DEFAULT, &
(  111) &                   FA_COM_DEFAULT_INIT,  &
(  112) &                   NEW_FA_DEFAULT
(  113) USE LFI_PRECISION
(  114) IMPLICIT NONE
(  115) ! Arguments
(  116) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  117) # 118 "fanerg.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:20      page 7

(  118) IF (.NOT. FA_COM_DEFAULT_INIT) CALL NEW_FA_DEFAULT ()
(  119) # 120 "fanerg.F90"
(  120) CALL FANERG_MT             &
(  121) &           (FA, KNIVAU)
(  122) # 123 "fanerg.F90"
(  123) END SUBROUTINE FANERG
(  124) # 125 "fanerg.F90"
(  125) SUBROUTINE FANERG_MT             &
(  126) &           (FA, KNIVAU)
(  127) USE FA_MOD, ONLY : FA_COM
(  128) USE LFI_PRECISION
(  129) IMPLICIT NONE
(  130) ! Arguments
(  131) TYPE (FA_COM)          FA                                     ! INOUT
(  132) INTEGER (KIND=JPLIKM)  KNIVAU                                 ! IN   
(  133) ! Local integers
(  134) INTEGER (KIND=JPLIKB)  INIVAU                                 ! IN   
(  135) ! Convert arguments
(  136) # 137 "fanerg.F90"
(  137) INIVAU     = INT (    KNIVAU, JPLIKB)
(  138) # 139 "fanerg.F90"
(  139) CALL FANERG_MT64           &
(  140) &           (FA, INIVAU)
(  141) # 143 "fanerg.F90"
(  143) END SUBROUTINE FANERG_MT
(  144) # 145 "fanerg.F90"
(  145) !INTF KNIVAU        IN    
