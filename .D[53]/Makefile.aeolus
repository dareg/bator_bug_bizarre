#------------------------------------------#
#    makefile for the support modules      #
#    for the ADM L2B processor             #
#                                          #
#    Written by:  Jos de Kloe/David Tan    #
#    created:     17-Feb-2005              #
#------------------------------------------#

#--------------------------------------------------------------------------#
# Modifications:                                                           #
# 15-Jun-2009 J. de Kloe move GetByteSizeDefaultInteger.F90                #
#                        GetByteSizeInt.c and GetByteSizeLong.c from       #
#                        BUFR_install/ to support/                         #
# 31-Mar-2010 J. de Kloe add use of logging module in profileinterpolate   #
# 14-Dec-2010 J. de Kloe add dependency of errorhandler to the             #
#                        compiler_features module                          #
# 24-May-2011 J. de Kloe add TestBufferedLogging                           #
# 20-Jul-2011 J. de Kloe allow use of latlon_handling_eecfi.F90            #
# 05-Dec-2011 M P Rennie Compile height conversion routines                #
# 25-Feb-2014 J. de Kloe Disable some no longer used modules               #
# 10-Apr-2014 J. de Kloe added test_f90_c_support.c                        #
# 03-Aug-2015 J. de Kloe remove deprecated gnuplot and binning modules     #
# 19-Mar-2018 J. de Kloe add errorhandler dependency to arraytools         #
#                        and to stringtools modules                        #
# 14-Dec-2018 J. de Kloe update clean target                               #
#--------------------------------------------------------------------------#

# General settings and compiler options
include  ../Makeoptions

# this Systemsettings file defines the pathnames
# EE_DIR and EE_XML_INC
include ../Systemsettings

#OS         = LINUX
#EE_XML_DIR = $(EE_DIR)explorer_file_handling/
#EE_TOOLS   = $(EE_DIR)aux_tools/libxml/$(OS)/lib/
#EE_LIB     = $(EE_DIR)lib/$(OS)/
#EE_INC     = $(EE_DIR)include/
#INC        = -I$(EE_INC) -I$(EE_XML_INC)
#LIBS_DIR = -L$(EE_LIB) -L$(EE_TOOLS)
#LIBS     = -lexplorer_lib \
#           -lexplorer_data_handling \
#           -lexplorer_file_handling \
#           -lxml2 -lm -lc

# REMARK: explorer_lib depends on explorer_data_handling
#         explorer_data_handling depends on explorer_file_handling
#         explorer_file_handling depends on the xml2 library,
#         so all these libraries are needed to be able to use
#         just one single distance calculation function.

# replaced by this include file:
include ../library_definition

# this definition has become obsolete. 
# It is also present in the explorer_file_handling.h header file
# which is included in all c-code now. (see also p.5 of FileHandlingSUM.pdf)
#MYCFLAGS = -DXF_EARTH_EXPLORER_HEADER

# executables to be made by this script
EXECUTABLE1 = TestNumerics
EXECUTABLE2 = TestDateTimeMod
EXECUTABLE3 = TestLunManager
# EXECUTABLE4 = 
EXECUTABLE5 = TestErrorHandler
EXECUTABLE6A = test_c_support
EXECUTABLE6B = test_f90_c_support
EXECUTABLE7 = TestArraytools
EXECUTABLE8 = TestInterp1
EXECUTABLE9 = TestAeolusConstants
EXECUTABLE10= TestCompiler_Features
EXECUTABLE11= TestStringTools
EXECUTABLE12A = TestLogging
EXECUTABLE12B = TestBufferedLogging
EXECUTABLE13= TestProfileInterpolate
EXECUTABLE14= TestLatLonHandling
EXECUTABLE15= TestTempFileHandling
# EXECUTABLE16= 
# EXECUTABLE17= 
# EXECUTABLE18=
EXECUTABLE19= GetByteSizeDefaultInteger
EXECUTABLE20= GetByteSizeLong
EXECUTABLE21= GetByteSizeInt
#EXECUTABLE22= TestLexer
EXECUTABLE23= TestHeightConv

# objects needed by each executable
OBJECTS1    = numerics.o
OBJECTS2    = datetimemod.o numerics.o errorhandler.o \
              compiler_features.o
OBJECTS3    = lunmanager.o stringtools.o \
              compiler_features.o numerics.o errorhandler.o

OBJECTS5    = errorhandler.o numerics.o \
              compiler_features.o
OBJECTS6A   = c_support.o f90_c_support.o \
              errorhandler.o numerics.o lunmanager.o \
              stringtools.o compiler_features.o
OBJECTS6B   = f90_c_support.o
OBJECTS7    = arraytools.o numerics.o stringtools.o \
              compiler_features.o logging.o \
              datetimemod.o aeolusconstants.o \
              c_support.o f90_c_support.o lunmanager.o \
              errorhandler.o
OBJECTS8    = interp1.o numerics.o errorhandler.o \
              compiler_features.o
OBJECTS9    = aeolusconstants.o numerics.o
OBJECTS10   = compiler_features.o numerics.o
OBJECTS11   = stringtools.o compiler_features.o numerics.o errorhandler.o
OBJECTS12   = logging.o numerics.o stringtools.o \
              lunmanager.o datetimemod.o\
              aeolusconstants.o compiler_features.o errorhandler.o \
              c_support.o f90_c_support.o
OBJECTS13   = profileinterpolate.o lunmanager.o \
              interp1.o errorhandler.o numerics.o compiler_features.o \
              stringtools.o logging.o datetimemod.o aeolusconstants.o \
              c_support.o f90_c_support.o
OBJECTS14   = latlon_handling.o numerics.o errorhandler.o \
              $(EELIBWRAPPER) stringtools.o c_support.o f90_c_support.o \
              compiler_features.o
OBJECTS15   = c_support.o f90_c_support.o errorhandler.o \
              tempfile_handling.o lunmanager.o stringtools.o \
              compiler_features.o numerics.o
#OBJECTS16   = 
#OBJECTS17   = 
#OBJECTS18   = 
# the next 3 need no external objects
OBJECTS19   =
OBJECTS20   =
OBJECTS21   =
#OBJECTS22   = ${OBJECTS3} lexer.o
OBJECTS23   =  height_conv.o numerics.o aeolusconstants.o



# make all test programs when make is used without options
all: $(EXECUTABLE1)  $(EXECUTABLE2)  $(EXECUTABLE3)  \
     $(EXECUTABLE4)  $(EXECUTABLE5)  $(EXECUTABLE6A) $(EXECUTABLE6B)  \
     $(EXECUTABLE7)  $(EXECUTABLE8)  $(EXECUTABLE9)  \
     $(EXECUTABLE10) $(EXECUTABLE11) $(EXECUTABLE12A) $(EXECUTABLE12B)\
     $(EXECUTABLE13) $(EXECUTABLE14) $(EXECUTABLE15) \
     $(EXECUTABLE19) $(EXECUTABLE20) $(EXECUTABLE21) \
     $(EXECUTABLE23)
#     $(EXECUTABLE22) 

# link the first executable
$(EXECUTABLE1): $(EXECUTABLE1).o $(OBJECTS1)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE1) \
                $(EXECUTABLE1).o $(OBJECTS1)

# link the second executable
$(EXECUTABLE2): $(EXECUTABLE2).o $(OBJECTS2)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE2) \
                $(EXECUTABLE2).o $(OBJECTS2)

# link the third executable
$(EXECUTABLE3): $(EXECUTABLE3).o $(OBJECTS3)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE3) \
                $(EXECUTABLE3).o $(OBJECTS3)

# link the fourth executable
$(EXECUTABLE4): $(EXECUTABLE4).o $(OBJECTS4)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE4) \
                $(EXECUTABLE4).o $(OBJECTS4)

# link the fifth executable
$(EXECUTABLE5): $(EXECUTABLE5).o $(OBJECTS5)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE5) \
                $(EXECUTABLE5).o $(OBJECTS5)

# link the sixth executable (A)
$(EXECUTABLE6A): $(EXECUTABLE6A).o $(OBJECTS6A)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE6A) \
                $(EXECUTABLE6A).o $(OBJECTS6A)

# link the sixth executable (B)
$(EXECUTABLE6B): $(EXECUTABLE6B).o $(OBJECTS6B)
	@echo linking the program
	$(CLINK) $(CLINKFLAGS) -o $(EXECUTABLE6B) \
                $(EXECUTABLE6B).o $(OBJECTS6B)

# link the seventh executable
$(EXECUTABLE7): $(EXECUTABLE7).o $(OBJECTS7)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE7) \
                $(EXECUTABLE7).o $(OBJECTS7)

# link the eight executable
$(EXECUTABLE8): $(EXECUTABLE8).o $(OBJECTS8)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE8) \
                $(EXECUTABLE8).o $(OBJECTS8)

# link the nineth executable
$(EXECUTABLE9): $(EXECUTABLE9).o $(OBJECTS9)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE9) \
                $(EXECUTABLE9).o $(OBJECTS9)

# link the tenth executable
$(EXECUTABLE10): $(EXECUTABLE10).o $(OBJECTS10)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE10) \
                $(EXECUTABLE10).o $(OBJECTS10)

# link the eleventh executable
$(EXECUTABLE11): $(EXECUTABLE11).o $(OBJECTS11)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE11) \
                $(EXECUTABLE11).o $(OBJECTS11)

# link the 12A executable
$(EXECUTABLE12A): $(EXECUTABLE12A).o $(OBJECTS12)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE12A) \
                $(EXECUTABLE12A).o $(OBJECTS12)

# link the 12B executable
$(EXECUTABLE12B): $(EXECUTABLE12B).o $(OBJECTS12)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE12B) \
                $(EXECUTABLE12B).o $(OBJECTS12)

# link the thirteenth executable
$(EXECUTABLE13): $(EXECUTABLE13).o $(OBJECTS13)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE13) \
                $(EXECUTABLE13).o $(OBJECTS13)

# link the fourteenth executable
$(EXECUTABLE14): $(EXECUTABLE14).o $(OBJECTS14)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE14) \
                $(EXECUTABLE14).o $(OBJECTS14) \
                $(LIBS_DIR) $(LIBS)

# link the fifteenth executable
$(EXECUTABLE15): $(EXECUTABLE15).o $(OBJECTS15)
	@echo linking the program
	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE15) \
                $(EXECUTABLE15).o $(OBJECTS15)

# link the sixteenth executable
#$(EXECUTABLE16): $(EXECUTABLE16).o $(OBJECTS16)
#	@echo linking the program
#	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE16) \
#                $(EXECUTABLE16).o $(OBJECTS16)

# link the seventeenth executable
#$(EXECUTABLE17): $(EXECUTABLE17).o $(OBJECTS17)
#	@echo linking the program
#	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE17) \
#                $(EXECUTABLE17).o $(OBJECTS17)

# link the eighteenth executable
#$(EXECUTABLE18): $(EXECUTABLE18).o $(OBJECTS18)
#	@echo linking the program
#	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE18) \
#                $(EXECUTABLE18).o $(OBJECTS18)

$(EXECUTABLE19): $(EXECUTABLE19).o
	$(LINK) $(LINKFLAGS) -o $(EXECUTABLE19) $(EXECUTABLE19).o

$(EXECUTABLE20): $(EXECUTABLE20).o
	$(CLINK) $(CLINKFLAGS) -o $(EXECUTABLE20) $(EXECUTABLE20).o

$(EXECUTABLE21): $(EXECUTABLE21).o
	$(CLINK) $(CLINKFLAGS) -o $(EXECUTABLE21) $(EXECUTABLE21).o

# link the twenty second executable
#$(EXECUTABLE22): $(EXECUTABLE22).o $(OBJECTS22)
#	@echo linking the program
#	$(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE22) \
#                $(EXECUTABLE22).o $(OBJECTS22)

# link the twenty third executable
$(EXECUTABLE23): $(EXECUTABLE23).o $(OBJECTS23)
	 @echo linking the program
	 $(LINK) $(LINKFLAGS) $(MYLINKFLAGS) -o $(EXECUTABLE23) \
                $(EXECUTABLE23).o $(OBJECTS23)

# make all needed object files
$(EXECUTABLE1).o: $(EXECUTABLE1).F90 $(OBJECTS1)

$(EXECUTABLE2).o: $(EXECUTABLE2).F90 $(OBJECTS2)

$(EXECUTABLE3).o: $(EXECUTABLE3).F90 $(OBJECTS3)

$(EXECUTABLE4).o: $(EXECUTABLE4).F90 $(OBJECTS4)

$(EXECUTABLE5).o: $(EXECUTABLE5).F90 $(OBJECTS5)

$(EXECUTABLE6A).o: $(EXECUTABLE6A).F90 $(OBJECTS6A)

$(EXECUTABLE6B).o: $(EXECUTABLE6B).c $(OBJECTS6B)

$(EXECUTABLE7).o: $(EXECUTABLE7).F90 $(OBJECTS7)

$(EXECUTABLE8).o: $(EXECUTABLE8).F90 $(OBJECTS8)

$(EXECUTABLE9).o: $(EXECUTABLE9).F90 $(OBJECTS9)

$(EXECUTABLE10).o: $(EXECUTABLE10).F90 $(OBJECTS10)

$(EXECUTABLE11).o: $(EXECUTABLE11).F90 $(OBJECTS11)

$(EXECUTABLE12A).o: $(EXECUTABLE12A).F90 $(OBJECTS12)

$(EXECUTABLE12B).o: $(EXECUTABLE12B).F90 $(OBJECTS12)

$(EXECUTABLE13).o: $(EXECUTABLE13).F90 $(OBJECTS13)

$(EXECUTABLE14).o: $(EXECUTABLE14).F90 $(OBJECTS14)

$(EXECUTABLE15).o: $(EXECUTABLE15).F90 $(OBJECTS15)

#$(EXECUTABLE16).o: $(EXECUTABLE16).F90 $(OBJECTS16)

#$(EXECUTABLE17).o: $(EXECUTABLE17).F90 $(OBJECTS17)

#$(EXECUTABLE18).o: $(EXECUTABLE18).F90 $(OBJECTS18)

$(EXECUTABLE19).o: $(EXECUTABLE19).F90 $(OBJECTS19)

$(EXECUTABLE20).o: $(EXECUTABLE20).c   $(OBJECTS20)

$(EXECUTABLE21).o: $(EXECUTABLE21).c   $(OBJECTS21)

#$(EXECUTABLE22).o: $(EXECUTABLE22).F90 $(OBJECTS22)

$(EXECUTABLE23).o: $(EXECUTABLE23).F90 $(OBJECTS23)

datetimemod.o: datetimemod.F90 numerics.o errorhandler.o

numerics.o: numerics.F90

lunmanager.o: lunmanager.F90 stringtools.o \
              compiler_features.o numerics.o errorhandler.o

errorhandler.o: errorhandler.F90 compiler_features.o

c_support.o: c_support.F90 errorhandler.o numerics.o

f90_c_support.o: f90_c_support.c f90_c_support.h

interp1.o: interp1.F90 numerics.o errorhandler.o

arraytools.o: arraytools.F90 numerics.o logging.o \
              datetimemod.o aeolusconstants.o \
              c_support.o f90_c_support.o errorhandler.o

compiler_features.o: compiler_features.F90 numerics.o

aeolusconstants.o: aeolusconstants.F90 numerics.o 

tempfile_handling.o: c_support.o errorhandler.o \
                     lunmanager.o tempfile_handling.F90

#lexer.o: lexer.F90 lunmanager.o stringtools.o errorhandler.o

height_conv.o: height_conv.F90 numerics.o aeolusconstants.o

#--------------------------------------------------------------------
# create the symbolic link to the compiler_features compatibility code
# the CMP_EXT variable is set by the ./Set_Makeoptions.sc script
#--------------------------------------------------------------------
compiler_features.F90: compiler_features_$(CMP_EXT).F90
	$(LN) $(LNFLAGS) compiler_features_$(CMP_EXT).F90 compiler_features.F90

stringtools.o: stringtools.F90 compiler_features.o numerics.o errorhandler.o

logging.o: logging.F90 numerics.o stringtools.o \
           lunmanager.o datetimemod.o aeolusconstants.o compiler_features.o \
           c_support.o f90_c_support.o errorhandler.o

profileinterpolate.o: profileinterpolate.F90 \
                      interp1.o errorhandler.o numerics.o \
                      lunmanager.o compiler_features.o \
                      stringtools.o logging.o datetimemod.o aeolusconstants.o \
                      c_support.o f90_c_support.o

latlon_handling.o: latlon_handling.F90 \
                   numerics.o errorhandler.o \
                   stringtools.o c_support.o f90_c_support.o

#--------------------------------------------------------------------
# create the symbolic link to the latlon_handling_simple.F90 compatibility
# code by default. 
# Nornmally this is done inside ../use_ee_cfi_software.sc or inside
# ../use_simple_xml.sc but in case these are not called for whatever
# reason, use the simple one as default
#--------------------------------------------------------------------
latlon_handling.F90:
	$(LN) $(LNFLAGS) latlon_handling_simple.F90 latlon_handling.F90

ee_lib_wrapper.o: ee_lib_wrapper.c

#--------------------------------------------------------------------
# a rule to create the Makeoptions file, in case it is missing
#--------------------------------------------------------------------
../Makeoptions:
	cd ..; ./Set_Makeoptions.sc

#--------------------------------------------------------------------
# some code to clean up and build again
#--------------------------------------------------------------------
.PHONY : again
again:
	$(MAKE) -f Makefile.aeolus clean; $(MAKE) -f Makefile.aeolus

#--------------------------------------------------------------------
# some code to clean up 
#--------------------------------------------------------------------
.PHONY : clean
clean:
	@echo "cleaning the support directory"
	$(RM) $(RMFLAGS) *.mod
	$(RM) $(RMFLAGS) *.o
	$(RM) $(RMFLAGS) *~
	$(RM) $(RMFLAGS) Testplot.ps Testplot.eps Testplot.png
	$(RM) $(RMFLAGS) Testplot3d.ps Testplot3d.eps Testplot3d.png
	$(RM) $(RMFLAGS) commands.txt contour_commands.txt
	$(RM) $(RMFLAGS) testprofile*.dat
	$(RM) $(RMFLAGS) $(EXECUTABLE1)  $(EXECUTABLE2)  $(EXECUTABLE3)
	$(RM) $(RMFLAGS) $(EXECUTABLE4)  $(EXECUTABLE5)
	$(RM) $(RMFLAGS) $(EXECUTABLE6A) $(EXECUTABLE6B)
	$(RM) $(RMFLAGS) $(EXECUTABLE7)  $(EXECUTABLE8)  $(EXECUTABLE9)
	$(RM) $(RMFLAGS) $(EXECUTABLE10) $(EXECUTABLE11) 
	$(RM) $(RMFLAGS) $(EXECUTABLE12A) $(EXECUTABLE12B)
	$(RM) $(RMFLAGS) $(EXECUTABLE13) $(EXECUTABLE14) $(EXECUTABLE15)
	$(RM) $(RMFLAGS) $(EXECUTABLE19) $(EXECUTABLE20) $(EXECUTABLE21)
	#$(RM) $(RMFLAGS) $(EXECUTABLE22)
	$(RM) $(RMFLAGS) $(EXECUTABLE23)
	# remove the symlinks only !
	# but don't remove the eecfi related symlink, since that one is 
	# not regenerated at this level
	$(RM) $(RMFLAGS) compiler_features.F90
#--------------------------------------------------------------------
