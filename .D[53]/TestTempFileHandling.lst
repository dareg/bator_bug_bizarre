


NVFORTRAN (Version     23.1)          02/24/2023  13:58:31      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:31      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: TestTempFileHandling.F90

(    1) program TestTempFileHandling
(    2) 
(    3)   !  #[ documentation
(    4)   ! a program to test the tempfile_handling module
(    5)   !
(    6)   ! written by: J. de Kloe, KNMI
(    7)   !
(    8)   ! Modifications:
(    9)   !   19-Mar-2018 J. de Kloe  added error_flag checking
(   10)   !
(   11)   !  #]
(   12)   
(   13)   use tempfile_handling, only: get_temp_filename, free_temp_filename, &
(   14)        InitTempFileHandling
(   15)   use lunmanager, only: get_lun, free_lun
(   16)   use errorhandler, only: no_error, program_abort1
(   17) 
(   18)   implicit none
(   19)   character(len=256) :: temp_filename
(   20)   integer :: error_flag, fileunit
(   21) 
(   22)   call InitTempFileHandling(error_flag)
(   23)   if (error_flag .ne. no_error) &
(   24)        call program_abort1(error_flag, "InitTempFileHandling")
(   25) 
(   26)   call get_temp_filename(temp_filename,error_flag)
(   27)   if (error_flag .ne. no_error) &
(   28)        call program_abort1(error_flag, "get_temp_filename")
(   29)   print *,"temp_filename = "//trim(temp_filename)
(   30) 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:31      page 3

(   31)   fileunit = get_lun()
(   32)   open(unit=fileunit,file=temp_filename,status="replace",&
(   33)        form="FORMATTED",action="write",err=999)
(   34)   write(fileunit,"(a)") "Hello world"
(   35)   write(fileunit,"(a)") "Bye cruel world"
(   36)   close(unit=fileunit)
(   37) 
(   38)   call free_lun(fileunit)
(   39)   call free_temp_filename(temp_filename,error_flag)
(   40)   if (error_flag .ne. no_error) &
(   41)        call program_abort1(error_flag, "free_temp_filename")
(   42) 
(   43)   call get_temp_filename(temp_filename,error_flag)
(   44)   if (error_flag .ne. no_error) &
(   45)        call program_abort1(error_flag, "get_temp_filename")
(   46) 
(   47)   print *,"temp_filename = "//trim(temp_filename)
(   48) 
(   49)   call free_temp_filename(temp_filename,error_flag)
(   50)   if (error_flag .ne. no_error) &
(   51)        call program_abort1(error_flag, "free_temp_filename")
(   52) 
(   53)   call get_temp_filename(temp_filename,error_flag)
(   54)   if (error_flag .ne. no_error) &
(   55)        call program_abort1(error_flag, "get_temp_filename")
(   56) 
(   57)   print *,"temp_filename = "//trim(temp_filename)
(   58) 
(   59)   call free_temp_filename(temp_filename,error_flag)
(   60)   if (error_flag .ne. no_error) &
(   61)        call program_abort1(error_flag, "free_temp_filename")
(   62) 
(   63)   goto 111
(   64) 
(   65) 999 print *,"Open command failed"
(   66) 
(   67) 111 continue 
(   68) 
(   69) end program TestTempFileHandling

























NVFORTRAN (Version     23.1)          02/24/2023  13:58:31      page 4

(    1) # 1 "TestTempFileHandling.F90"
(    1) program TestTempFileHandling
(    2) # 3 "TestTempFileHandling.F90"
(    3)   !  #[ documentation
(    4)   ! a program to test the tempfile_handling module
(    5)   !
(    6)   ! written by: J. de Kloe, KNMI
(    7)   !
(    8)   ! Modifications:
(    9)   !   19-Mar-2018 J. de Kloe  added error_flag checking
(   10)   !
(   11)   !  #]
(   12)   
(   13)   use tempfile_handling, only: get_temp_filename, free_temp_filename, &
(   14)        InitTempFileHandling
(   15)   use lunmanager, only: get_lun, free_lun
(   16)   use errorhandler, only: no_error, program_abort1
(   17) # 18 "TestTempFileHandling.F90"
(   18)   implicit none
(   19)   character(len=256) :: temp_filename
(   20)   integer :: error_flag, fileunit
(   21) # 22 "TestTempFileHandling.F90"
(   22)   call InitTempFileHandling(error_flag)
(   23)   if (error_flag .ne. no_error) &
(   24)        call program_abort1(error_flag, "InitTempFileHandling")
(   25) # 26 "TestTempFileHandling.F90"
(   26)   call get_temp_filename(temp_filename,error_flag)
(   27)   if (error_flag .ne. no_error) &
(   28)        call program_abort1(error_flag, "get_temp_filename")
(   29)   print *,"temp_filename = "//trim(temp_filename)
(   30) # 31 "TestTempFileHandling.F90"
(   31)   fileunit = get_lun()
(   32)   open(unit=fileunit,file=temp_filename,status="replace",&
(   33)        form="FORMATTED",action="write",err=999)
(   34)   write(fileunit,"(a)") "Hello world"
(   35)   write(fileunit,"(a)") "Bye cruel world"
(   36)   close(unit=fileunit)
(   37) # 38 "TestTempFileHandling.F90"
(   38)   call free_lun(fileunit)
(   39)   call free_temp_filename(temp_filename,error_flag)
(   40)   if (error_flag .ne. no_error) &
(   41)        call program_abort1(error_flag, "free_temp_filename")
(   42) # 43 "TestTempFileHandling.F90"
(   43)   call get_temp_filename(temp_filename,error_flag)
(   44)   if (error_flag .ne. no_error) &
(   45)        call program_abort1(error_flag, "get_temp_filename")
(   46) # 47 "TestTempFileHandling.F90"
(   47)   print *,"temp_filename = "//trim(temp_filename)
(   48) # 49 "TestTempFileHandling.F90"
(   49)   call free_temp_filename(temp_filename,error_flag)
(   50)   if (error_flag .ne. no_error) &
(   51)        call program_abort1(error_flag, "free_temp_filename")
(   52) # 53 "TestTempFileHandling.F90"
(   53)   call get_temp_filename(temp_filename,error_flag)
(   54)   if (error_flag .ne. no_error) &
(   55)        call program_abort1(error_flag, "get_temp_filename")
(   56) # 57 "TestTempFileHandling.F90"
(   57)   print *,"temp_filename = "//trim(temp_filename)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:31      page 5

(   58) # 59 "TestTempFileHandling.F90"
(   59)   call free_temp_filename(temp_filename,error_flag)
(   60)   if (error_flag .ne. no_error) &
(   61)        call program_abort1(error_flag, "free_temp_filename")
(   62) # 63 "TestTempFileHandling.F90"
(   63)   goto 111
(   64) # 65 "TestTempFileHandling.F90"
(   65) 999 print *,"Open command failed"
(   66) # 67 "TestTempFileHandling.F90"
(   67) 111 continue 
(   68) # 69 "TestTempFileHandling.F90"
(   69) end program TestTempFileHandling
