


NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: TestBufferedLogging.F90

(    1) PROGRAM TestBufferedLogging ! main program
(    2)   !  #[ documentation
(    3)   ! Written by Jos de Kloe
(    4)   !
(    5)   ! Modifications:
(    6)   !  23-May-2011  J. de Kloe new test program for buffered logging feature
(    7)   !
(    8)   !  #]
(    9)   !  #[ modules used
(   10)   USE Logging
(   11)   USE ErrorHandler, only: no_error
(   12)   !  #]
(   13)   !  #[ local variables
(   14)   ! define variables for main program
(   15)   IMPLICIT NONE     ! no implicit variable typing
(   16) 
(   17)   integer :: error_flag
(   18)   !  #]
(   19)   !  #[ program code
(   20)   ! suppress logging output untill we have a chance to set the logging levels
(   21)   ! by calling the init subroutine
(   22)   call start_buffering_logmsgs()
(   23) 
(   24)   ! do some buffered regular logging
(   25)   call logmsg(log_debug,   "This is a test debugging log message (1)")
(   26)   call logmsg(log_info,    "This is a test informational log message (1)")
(   27)   call logmsg(log_progress,"This is a test progress log message (1)")
(   28)   call logmsg(log_warn,    "This is a test warning log message (1)",&
(   29)              realacc_precision=7)
(   30)   call logmsg(log_error,   "This is a test error log message (1)", &






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 3

(   31)               realacc_on=.true.)
(   32) 
(   33)   ! set the logging levels
(   34)   print *,'Setting loglevel PROGRESS for stdout'
(   35)   print *,'Setting loglevel NOOP     for stderr'
(   36)   call Init_Logging("PROGRESS","NOOP",error_flag)
(   37)   if (error_flag .ne. no_error) &
(   38)        call program_abort(error_flag,"Init_Logging")
(   39) 
(   40)   ! release all buffered log messages
(   41)   call stop_buffering_logmsgs()
(   42) 
(   43)   ! do some regular logging without buffering
(   44)   call logmsg(log_debug,   "This is a test debugging log message (2)")
(   45)   call logmsg(log_info,    "This is a test informational log message (2)")
(   46)   call logmsg(log_progress,"This is a test progress log message (2)")
(   47)   call logmsg(log_warn,    "This is a test warning log message (2)")
(   48)   call logmsg(log_error,   "This is a test error log message (2)")
(   49)  
(   50)   call Close_Logging()
(   51)   !  #]
(   52) end PROGRAM TestBufferedLogging










































NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 4

(    1) # 1 "TestBufferedLogging.F90"
(    1) PROGRAM TestBufferedLogging ! main program
(    2)   !  #[ documentation
(    3)   ! Written by Jos de Kloe
(    4)   !
(    5)   ! Modifications:
(    6)   !  23-May-2011  J. de Kloe new test program for buffered logging feature
(    7)   !
(    8)   !  #]
(    9)   !  #[ modules used
(   10)   USE Logging
(   11)   USE ErrorHandler, only: no_error
(   12)   !  #]
(   13)   !  #[ local variables
(   14)   ! define variables for main program
(   15)   IMPLICIT NONE     ! no implicit variable typing
(   16) # 17 "TestBufferedLogging.F90"
(   17)   integer :: error_flag
(   18)   !  #]
(   19)   !  #[ program code
(   20)   ! suppress logging output untill we have a chance to set the logging levels
(   21)   ! by calling the init subroutine
(   22)   call start_buffering_logmsgs()
(   23) # 24 "TestBufferedLogging.F90"
(   24)   ! do some buffered regular logging
(   25)   call logmsg(log_debug,   "This is a test debugging log message (1)")
(   26)   call logmsg(log_info,    "This is a test informational log message (1)")
(   27)   call logmsg(log_progress,"This is a test progress log message (1)")
(   28)   call logmsg(log_warn,    "This is a test warning log message (1)",&
(   29)              realacc_precision=7)
(   30)   call logmsg(log_error,   "This is a test error log message (1)", &
(   31)               realacc_on=.true.)
(   32) # 33 "TestBufferedLogging.F90"
(   33)   ! set the logging levels
(   34)   print *,'Setting loglevel PROGRESS for stdout'
(   35)   print *,'Setting loglevel NOOP     for stderr'
(   36)   call Init_Logging("PROGRESS","NOOP",error_flag)
(   37)   if (error_flag .ne. no_error) &
(   38)        call program_abort(error_flag,"Init_Logging")
(   39) # 40 "TestBufferedLogging.F90"
(   40)   ! release all buffered log messages
(   41)   call stop_buffering_logmsgs()
(   42) # 43 "TestBufferedLogging.F90"
(   43)   ! do some regular logging without buffering
(   44)   call logmsg(log_debug,   "This is a test debugging log message (2)")
(   45)   call logmsg(log_info,    "This is a test informational log message (2)")
(   46)   call logmsg(log_progress,"This is a test progress log message (2)")
(   47)   call logmsg(log_warn,    "This is a test warning log message (2)")
(   48)   call logmsg(log_error,   "This is a test error log message (2)")
(   49)  
(   50)   call Close_Logging()
(   51)   !  #]
(   52) end PROGRAM TestBufferedLogging
