#ifndef ODB_GENCODE
#define ODB_GENCODE 1
#endif


/* Software revision : CY48R0.000 (480000) */

#include "odb.h"
#include "odb_macros.h"
#include "cdrhook.h"

#define ODB_LABEL    "CCMA"


/* Compilation options used :

	 -C
	 -O3
	 -o/tmp/grassetj/gmkpack/gmktmp.16290/odbstuffpack/local
	 -Abody=(surfbody_feedback,errstat,update_1,update_2,update_3,update_4,fcdiagnostic_body_1,fcdiagnostic_body_2,fcdiagnostic_body_3,fcdiagnostic_body_4,fcdiagnostic_body_5,fcdiagnostic_body_6,fcdiagnostic_body_7,fcdiagnostic_body_8,fcdiagnostic_body_9,fcdiagnostic_body_10,fcdiagnostic_body_11,fcdiagnostic_body_12,fcdiagnostic_body_13,fcdiagnostic_body_14,fcdiagnostic_body_15,fcdiagnostic_body_16,fcdiagnostic_body_17,fcdiagnostic_body_18,fcdiagnostic_body_19,fcdiagnostic_body_20,conv_body,scatt_body,ssmi_body,gbrad_body,radar_body,resat_averaging_kernel,auxiliary_body,allsky_body,radiance_body,gnssro_body,raingg_body,enkf_1,enkf_2,enkf_3,enkf_4,enkf_5,enkf_6,enkf_7,enkf_8,enkf_9,enkf_10,enkf_11,enkf_12,enkf_13,enkf_14,enkf_15,enkf_16,enkf_17,enkf_18,enkf_19,enkf_20,enkf_21,enkf_22,enkf_23,enkf_24,enkf_25,enkf_26,enkf_27,enkf_28,enkf_29,enkf_30,enkf_31,enkf_32,enkf_33,enkf_34,enkf_35,enkf_36,enkf_37,enkf_38,enkf_39,enkf_40,enkf_41,enkf_42,enkf_43,enkf_44,enkf_45,enkf_46,enkf_47,enkf_48,enkf_49,enkf_50,enkf_51,enkf_52,enkf_53,enkf_54,enkf_55,enkf_56,enkf_57,enkf_58,enkf_59,enkf_60,enkf_61,enkf_62,enkf_63,enkf_64,enkf_65,enkf_66,enkf_67,enkf_68,enkf_69,enkf_70,enkf_71,enkf_72,enkf_73,enkf_74,enkf_75,enkf_76,enkf_77,enkf_78,enkf_79,enkf_80,enkf_81,enkf_82,enkf_83,enkf_84,enkf_85,enkf_86,enkf_87,enkf_88,enkf_89,enkf_90,enkf_91,enkf_92,enkf_93,enkf_94,enkf_95,enkf_96,enkf_97,enkf_98,enkf_99,enkf_100,enkf_101,enkf_102,enkf_103,enkf_104,enkf_105,enkf_106,enkf_107,enkf_108,enkf_109,enkf_110,enkf_111,enkf_112,enkf_113,enkf_114,enkf_115,enkf_116,enkf_117,enkf_118,enkf_119,enkf_120,enda_1,enda_2,enda_3,enda_4,enda_5,enda_6,enda_7,enda_8,enda_9,enda_10,enda_11,enda_12,enda_13,enda_14,enda_15,enda_16,enda_17,enda_18,enda_19,enda_20,enda_21,enda_22,enda_23,enda_24,enda_25,enda_26,enda_27,enda_28,enda_29,enda_30,enda_31,enda_32,enda_33,enda_34,enda_35,enda_36,enda_37,enda_38,enda_39,enda_40,enda_41,enda_42,enda_43,enda_44,enda_45,enda_46,enda_47,enda_48,enda_49,enda_50,enda_51,enda_52,enda_53,enda_54,enda_55,enda_56,enda_57,enda_58,enda_59,enda_60,enda_61,enda_62,enda_63,enda_64,enda_65,enda_66,enda_67,enda_68,enda_69,enda_70,enda_71,enda_72,enda_73,enda_74,enda_75,enda_76,enda_77,enda_78,enda_79,enda_80,enda_81,enda_82,enda_83,enda_84,enda_85,enda_86,enda_87,enda_88,enda_89,enda_90,enda_91,enda_92,enda_93,enda_94,enda_95,enda_96,enda_97,enda_98,enda_99,enda_100,surfbody_feedback_1,surfbody_feedback_2,surfbody_feedback_3,surfbody_feedback_4,surfbody_feedback_5,surfbody_feedback_6,surfbody_feedback_7,surfbody_feedback_8,surfbody_feedback_9,surfbody_feedback_10,surfbody_feedback_11,surfbody_feedback_12,surfbody_feedback_13,surfbody_feedback_14,surfbody_feedback_15,surfbody_feedback_16,surfbody_feedback_17,surfbody_feedback_18,surfbody_feedback_19,surfbody_feedback_20,surfbody_feedback_21,surfbody_feedback_22,surfbody_feedback_23,surfbody_feedback_24,surfbody_feedback_25,surfbody_feedback_26,surfbody_feedback_27,surfbody_feedback_28,surfbody_feedback_29,surfbody_feedback_30,surfbody_feedback_31,surfbody_feedback_32,surfbody_feedback_33,surfbody_feedback_34,surfbody_feedback_35,surfbody_feedback_36,surfbody_feedback_37,surfbody_feedback_38,surfbody_feedback_39,surfbody_feedback_40,surfbody_feedback_41,surfbody_feedback_42,surfbody_feedback_43,surfbody_feedback_44,surfbody_feedback_45,surfbody_feedback_46,surfbody_feedback_47,surfbody_feedback_48,surfbody_feedback_49,surfbody_feedback_50,surfbody_feedback_51,surfbody_feedback_52,surfbody_feedback_53,surfbody_feedback_54,surfbody_feedback_55,surfbody_feedback_56,surfbody_feedback_57,surfbody_feedback_58,surfbody_feedback_59,surfbody_feedback_60,surfbody_feedback_61,surfbody_feedback_62,surfbody_feedback_63,surfbody_feedback_64,surfbody_feedback_65,surfbody_feedback_66,surfbody_feedback_67,surfbody_feedback_68,surfbody_feedback_69,surfbody_feedback_70,surfbody_feedback_71,surfbody_feedback_72,surfbody_feedback_73,surfbody_feedback_74,surfbody_feedback_75,surfbody_feedback_76,surfbody_feedback_77,surfbody_feedback_78,surfbody_feedback_79,surfbody_feedback_80,surfbody_feedback_81,surfbody_feedback_82,surfbody_feedback_83,surfbody_feedback_84,surfbody_feedback_85,surfbody_feedback_86,surfbody_feedback_87,surfbody_feedback_88,surfbody_feedback_89,surfbody_feedback_90,surfbody_feedback_91,surfbody_feedback_92,surfbody_feedback_93,surfbody_feedback_94,surfbody_feedback_95,surfbody_feedback_96,surfbody_feedback_97,surfbody_feedback_98,surfbody_feedback_99,surfbody_feedback_100)
	 -Ahdr=fcdiagnostic
	 -1index=hdr
	 -1hdr=(auxiliary,ensemble,sat,modsurf,gbrad,raingg,conv)
	 -1sat=(radiance,ssmi,scatt,satob,resat,limb,radar,radar_station,smos,gnssro,aeolus_hdr)
	 -1radiance=(allsky,cloud_sink,collocated_imager_information)

*/

/* ----- Table hierarchy (= the default scanning order) : # of tables = 388

       Rank#                            Table :     Order#   Weight
       -----                            ----- :     ------   ------
           0                             desc :          0   0.000000
           1                         poolmask :          1   1.000001
           2                   timeslot_index :          2   1.000002
           3                            index :          3   1.000003
           4                              hdr :          4   3.000004
           5                     fcdiagnostic :        326   3.000326
           6                         ensemble :          5   3.001004
           7                            gbrad :        347   3.001004
           8                           raingg :        349   3.001004
           9                             conv :        351   3.001004
          10                              sat :        353   3.001004
          11                          modsurf :        354   3.001004
          12                        auxiliary :        362   3.001004
          13                         radiance :        356   3.002004
          14                            resat :        364   3.002004
          15                           gnssro :        366   3.002004
          16                            satob :        368   3.002004
          17                            scatt :        369   3.002004
          18                             ssmi :        371   3.002004
          19                             smos :        373   3.002004
          20                    radar_station :        374   3.002004
          21                            radar :        375   3.002004
          22                             limb :        377   3.002004
          23                       aeolus_hdr :        384   3.002004
          24                           allsky :        358   3.003004
          25                       cloud_sink :        360   3.003004
          26    collocated_imager_information :        361   3.003004
          27                    aeolus_auxmet :        385   3.003004
          28                       aeolus_l2c :        386   3.003004
          29                       aeolus_l2b :        387   3.003004
          30                           enkf_1 :          6   358.000006
          31                           enkf_2 :          7   358.000007
          32                           enkf_3 :          8   358.000008
          33                           enkf_4 :          9   358.000009
          34                           enkf_5 :         10   358.000010
          35                           enkf_6 :         11   358.000011
          36                           enkf_7 :         12   358.000012
          37                           enkf_8 :         13   358.000013
          38                           enkf_9 :         14   358.000014
          39                          enkf_10 :         15   358.000015
          40                          enkf_11 :         16   358.000016
          41                          enkf_12 :         17   358.000017
          42                          enkf_13 :         18   358.000018
          43                          enkf_14 :         19   358.000019
          44                          enkf_15 :         20   358.000020
          45                          enkf_16 :         21   358.000021
          46                          enkf_17 :         22   358.000022
          47                          enkf_18 :         23   358.000023
          48                          enkf_19 :         24   358.000024
          49                          enkf_20 :         25   358.000025
          50                          enkf_21 :         26   358.000026
          51                          enkf_22 :         27   358.000027
          52                          enkf_23 :         28   358.000028
          53                          enkf_24 :         29   358.000029
          54                          enkf_25 :         30   358.000030
          55                          enkf_26 :         31   358.000031
          56                          enkf_27 :         32   358.000032
          57                          enkf_28 :         33   358.000033
          58                          enkf_29 :         34   358.000034
          59                          enkf_30 :         35   358.000035
          60                          enkf_31 :         36   358.000036
          61                          enkf_32 :         37   358.000037
          62                          enkf_33 :         38   358.000038
          63                          enkf_34 :         39   358.000039
          64                          enkf_35 :         40   358.000040
          65                          enkf_36 :         41   358.000041
          66                          enkf_37 :         42   358.000042
          67                          enkf_38 :         43   358.000043
          68                          enkf_39 :         44   358.000044
          69                          enkf_40 :         45   358.000045
          70                          enkf_41 :         46   358.000046
          71                          enkf_42 :         47   358.000047
          72                          enkf_43 :         48   358.000048
          73                          enkf_44 :         49   358.000049
          74                          enkf_45 :         50   358.000050
          75                          enkf_46 :         51   358.000051
          76                          enkf_47 :         52   358.000052
          77                          enkf_48 :         53   358.000053
          78                          enkf_49 :         54   358.000054
          79                          enkf_50 :         55   358.000055
          80                          enkf_51 :         56   358.000056
          81                          enkf_52 :         57   358.000057
          82                          enkf_53 :         58   358.000058
          83                          enkf_54 :         59   358.000059
          84                          enkf_55 :         60   358.000060
          85                          enkf_56 :         61   358.000061
          86                          enkf_57 :         62   358.000062
          87                          enkf_58 :         63   358.000063
          88                          enkf_59 :         64   358.000064
          89                          enkf_60 :         65   358.000065
          90                          enkf_61 :         66   358.000066
          91                          enkf_62 :         67   358.000067
          92                          enkf_63 :         68   358.000068
          93                          enkf_64 :         69   358.000069
          94                          enkf_65 :         70   358.000070
          95                          enkf_66 :         71   358.000071
          96                          enkf_67 :         72   358.000072
          97                          enkf_68 :         73   358.000073
          98                          enkf_69 :         74   358.000074
          99                          enkf_70 :         75   358.000075
         100                          enkf_71 :         76   358.000076
         101                          enkf_72 :         77   358.000077
         102                          enkf_73 :         78   358.000078
         103                          enkf_74 :         79   358.000079
         104                          enkf_75 :         80   358.000080
         105                          enkf_76 :         81   358.000081
         106                          enkf_77 :         82   358.000082
         107                          enkf_78 :         83   358.000083
         108                          enkf_79 :         84   358.000084
         109                          enkf_80 :         85   358.000085
         110                          enkf_81 :         86   358.000086
         111                          enkf_82 :         87   358.000087
         112                          enkf_83 :         88   358.000088
         113                          enkf_84 :         89   358.000089
         114                          enkf_85 :         90   358.000090
         115                          enkf_86 :         91   358.000091
         116                          enkf_87 :         92   358.000092
         117                          enkf_88 :         93   358.000093
         118                          enkf_89 :         94   358.000094
         119                          enkf_90 :         95   358.000095
         120                          enkf_91 :         96   358.000096
         121                          enkf_92 :         97   358.000097
         122                          enkf_93 :         98   358.000098
         123                          enkf_94 :         99   358.000099
         124                          enkf_95 :        100   358.000100
         125                          enkf_96 :        101   358.000101
         126                          enkf_97 :        102   358.000102
         127                          enkf_98 :        103   358.000103
         128                          enkf_99 :        104   358.000104
         129                         enkf_100 :        105   358.000105
         130                         enkf_101 :        106   358.000106
         131                         enkf_102 :        107   358.000107
         132                         enkf_103 :        108   358.000108
         133                         enkf_104 :        109   358.000109
         134                         enkf_105 :        110   358.000110
         135                         enkf_106 :        111   358.000111
         136                         enkf_107 :        112   358.000112
         137                         enkf_108 :        113   358.000113
         138                         enkf_109 :        114   358.000114
         139                         enkf_110 :        115   358.000115
         140                         enkf_111 :        116   358.000116
         141                         enkf_112 :        117   358.000117
         142                         enkf_113 :        118   358.000118
         143                         enkf_114 :        119   358.000119
         144                         enkf_115 :        120   358.000120
         145                         enkf_116 :        121   358.000121
         146                         enkf_117 :        122   358.000122
         147                         enkf_118 :        123   358.000123
         148                         enkf_119 :        124   358.000124
         149                         enkf_120 :        125   358.000125
         150                           enda_1 :        126   358.000126
         151                           enda_2 :        127   358.000127
         152                           enda_3 :        128   358.000128
         153                           enda_4 :        129   358.000129
         154                           enda_5 :        130   358.000130
         155                           enda_6 :        131   358.000131
         156                           enda_7 :        132   358.000132
         157                           enda_8 :        133   358.000133
         158                           enda_9 :        134   358.000134
         159                          enda_10 :        135   358.000135
         160                          enda_11 :        136   358.000136
         161                          enda_12 :        137   358.000137
         162                          enda_13 :        138   358.000138
         163                          enda_14 :        139   358.000139
         164                          enda_15 :        140   358.000140
         165                          enda_16 :        141   358.000141
         166                          enda_17 :        142   358.000142
         167                          enda_18 :        143   358.000143
         168                          enda_19 :        144   358.000144
         169                          enda_20 :        145   358.000145
         170                          enda_21 :        146   358.000146
         171                          enda_22 :        147   358.000147
         172                          enda_23 :        148   358.000148
         173                          enda_24 :        149   358.000149
         174                          enda_25 :        150   358.000150
         175                          enda_26 :        151   358.000151
         176                          enda_27 :        152   358.000152
         177                          enda_28 :        153   358.000153
         178                          enda_29 :        154   358.000154
         179                          enda_30 :        155   358.000155
         180                          enda_31 :        156   358.000156
         181                          enda_32 :        157   358.000157
         182                          enda_33 :        158   358.000158
         183                          enda_34 :        159   358.000159
         184                          enda_35 :        160   358.000160
         185                          enda_36 :        161   358.000161
         186                          enda_37 :        162   358.000162
         187                          enda_38 :        163   358.000163
         188                          enda_39 :        164   358.000164
         189                          enda_40 :        165   358.000165
         190                          enda_41 :        166   358.000166
         191                          enda_42 :        167   358.000167
         192                          enda_43 :        168   358.000168
         193                          enda_44 :        169   358.000169
         194                          enda_45 :        170   358.000170
         195                          enda_46 :        171   358.000171
         196                          enda_47 :        172   358.000172
         197                          enda_48 :        173   358.000173
         198                          enda_49 :        174   358.000174
         199                          enda_50 :        175   358.000175
         200                          enda_51 :        176   358.000176
         201                          enda_52 :        177   358.000177
         202                          enda_53 :        178   358.000178
         203                          enda_54 :        179   358.000179
         204                          enda_55 :        180   358.000180
         205                          enda_56 :        181   358.000181
         206                          enda_57 :        182   358.000182
         207                          enda_58 :        183   358.000183
         208                          enda_59 :        184   358.000184
         209                          enda_60 :        185   358.000185
         210                          enda_61 :        186   358.000186
         211                          enda_62 :        187   358.000187
         212                          enda_63 :        188   358.000188
         213                          enda_64 :        189   358.000189
         214                          enda_65 :        190   358.000190
         215                          enda_66 :        191   358.000191
         216                          enda_67 :        192   358.000192
         217                          enda_68 :        193   358.000193
         218                          enda_69 :        194   358.000194
         219                          enda_70 :        195   358.000195
         220                          enda_71 :        196   358.000196
         221                          enda_72 :        197   358.000197
         222                          enda_73 :        198   358.000198
         223                          enda_74 :        199   358.000199
         224                          enda_75 :        200   358.000200
         225                          enda_76 :        201   358.000201
         226                          enda_77 :        202   358.000202
         227                          enda_78 :        203   358.000203
         228                          enda_79 :        204   358.000204
         229                          enda_80 :        205   358.000205
         230                          enda_81 :        206   358.000206
         231                          enda_82 :        207   358.000207
         232                          enda_83 :        208   358.000208
         233                          enda_84 :        209   358.000209
         234                          enda_85 :        210   358.000210
         235                          enda_86 :        211   358.000211
         236                          enda_87 :        212   358.000212
         237                          enda_88 :        213   358.000213
         238                          enda_89 :        214   358.000214
         239                          enda_90 :        215   358.000215
         240                          enda_91 :        216   358.000216
         241                          enda_92 :        217   358.000217
         242                          enda_93 :        218   358.000218
         243                          enda_94 :        219   358.000219
         244                          enda_95 :        220   358.000220
         245                          enda_96 :        221   358.000221
         246                          enda_97 :        222   358.000222
         247                          enda_98 :        223   358.000223
         248                          enda_99 :        224   358.000224
         249                         enda_100 :        225   358.000225
         250              surfbody_feedback_1 :        226   358.000226
         251              surfbody_feedback_2 :        227   358.000227
         252              surfbody_feedback_3 :        228   358.000228
         253              surfbody_feedback_4 :        229   358.000229
         254              surfbody_feedback_5 :        230   358.000230
         255              surfbody_feedback_6 :        231   358.000231
         256              surfbody_feedback_7 :        232   358.000232
         257              surfbody_feedback_8 :        233   358.000233
         258              surfbody_feedback_9 :        234   358.000234
         259             surfbody_feedback_10 :        235   358.000235
         260             surfbody_feedback_11 :        236   358.000236
         261             surfbody_feedback_12 :        237   358.000237
         262             surfbody_feedback_13 :        238   358.000238
         263             surfbody_feedback_14 :        239   358.000239
         264             surfbody_feedback_15 :        240   358.000240
         265             surfbody_feedback_16 :        241   358.000241
         266             surfbody_feedback_17 :        242   358.000242
         267             surfbody_feedback_18 :        243   358.000243
         268             surfbody_feedback_19 :        244   358.000244
         269             surfbody_feedback_20 :        245   358.000245
         270             surfbody_feedback_21 :        246   358.000246
         271             surfbody_feedback_22 :        247   358.000247
         272             surfbody_feedback_23 :        248   358.000248
         273             surfbody_feedback_24 :        249   358.000249
         274             surfbody_feedback_25 :        250   358.000250
         275             surfbody_feedback_26 :        251   358.000251
         276             surfbody_feedback_27 :        252   358.000252
         277             surfbody_feedback_28 :        253   358.000253
         278             surfbody_feedback_29 :        254   358.000254
         279             surfbody_feedback_30 :        255   358.000255
         280             surfbody_feedback_31 :        256   358.000256
         281             surfbody_feedback_32 :        257   358.000257
         282             surfbody_feedback_33 :        258   358.000258
         283             surfbody_feedback_34 :        259   358.000259
         284             surfbody_feedback_35 :        260   358.000260
         285             surfbody_feedback_36 :        261   358.000261
         286             surfbody_feedback_37 :        262   358.000262
         287             surfbody_feedback_38 :        263   358.000263
         288             surfbody_feedback_39 :        264   358.000264
         289             surfbody_feedback_40 :        265   358.000265
         290             surfbody_feedback_41 :        266   358.000266
         291             surfbody_feedback_42 :        267   358.000267
         292             surfbody_feedback_43 :        268   358.000268
         293             surfbody_feedback_44 :        269   358.000269
         294             surfbody_feedback_45 :        270   358.000270
         295             surfbody_feedback_46 :        271   358.000271
         296             surfbody_feedback_47 :        272   358.000272
         297             surfbody_feedback_48 :        273   358.000273
         298             surfbody_feedback_49 :        274   358.000274
         299             surfbody_feedback_50 :        275   358.000275
         300             surfbody_feedback_51 :        276   358.000276
         301             surfbody_feedback_52 :        277   358.000277
         302             surfbody_feedback_53 :        278   358.000278
         303             surfbody_feedback_54 :        279   358.000279
         304             surfbody_feedback_55 :        280   358.000280
         305             surfbody_feedback_56 :        281   358.000281
         306             surfbody_feedback_57 :        282   358.000282
         307             surfbody_feedback_58 :        283   358.000283
         308             surfbody_feedback_59 :        284   358.000284
         309             surfbody_feedback_60 :        285   358.000285
         310             surfbody_feedback_61 :        286   358.000286
         311             surfbody_feedback_62 :        287   358.000287
         312             surfbody_feedback_63 :        288   358.000288
         313             surfbody_feedback_64 :        289   358.000289
         314             surfbody_feedback_65 :        290   358.000290
         315             surfbody_feedback_66 :        291   358.000291
         316             surfbody_feedback_67 :        292   358.000292
         317             surfbody_feedback_68 :        293   358.000293
         318             surfbody_feedback_69 :        294   358.000294
         319             surfbody_feedback_70 :        295   358.000295
         320             surfbody_feedback_71 :        296   358.000296
         321             surfbody_feedback_72 :        297   358.000297
         322             surfbody_feedback_73 :        298   358.000298
         323             surfbody_feedback_74 :        299   358.000299
         324             surfbody_feedback_75 :        300   358.000300
         325             surfbody_feedback_76 :        301   358.000301
         326             surfbody_feedback_77 :        302   358.000302
         327             surfbody_feedback_78 :        303   358.000303
         328             surfbody_feedback_79 :        304   358.000304
         329             surfbody_feedback_80 :        305   358.000305
         330             surfbody_feedback_81 :        306   358.000306
         331             surfbody_feedback_82 :        307   358.000307
         332             surfbody_feedback_83 :        308   358.000308
         333             surfbody_feedback_84 :        309   358.000309
         334             surfbody_feedback_85 :        310   358.000310
         335             surfbody_feedback_86 :        311   358.000311
         336             surfbody_feedback_87 :        312   358.000312
         337             surfbody_feedback_88 :        313   358.000313
         338             surfbody_feedback_89 :        314   358.000314
         339             surfbody_feedback_90 :        315   358.000315
         340             surfbody_feedback_91 :        316   358.000316
         341             surfbody_feedback_92 :        317   358.000317
         342             surfbody_feedback_93 :        318   358.000318
         343             surfbody_feedback_94 :        319   358.000319
         344             surfbody_feedback_95 :        320   358.000320
         345             surfbody_feedback_96 :        321   358.000321
         346             surfbody_feedback_97 :        322   358.000322
         347             surfbody_feedback_98 :        323   358.000323
         348             surfbody_feedback_99 :        324   358.000324
         349            surfbody_feedback_100 :        325   358.000325
         350              fcdiagnostic_body_1 :        327   358.000327
         351              fcdiagnostic_body_2 :        328   358.000328
         352              fcdiagnostic_body_3 :        329   358.000329
         353              fcdiagnostic_body_4 :        330   358.000330
         354              fcdiagnostic_body_5 :        331   358.000331
         355              fcdiagnostic_body_6 :        332   358.000332
         356              fcdiagnostic_body_7 :        333   358.000333
         357              fcdiagnostic_body_8 :        334   358.000334
         358              fcdiagnostic_body_9 :        335   358.000335
         359             fcdiagnostic_body_10 :        336   358.000336
         360             fcdiagnostic_body_11 :        337   358.000337
         361             fcdiagnostic_body_12 :        338   358.000338
         362             fcdiagnostic_body_13 :        339   358.000339
         363             fcdiagnostic_body_14 :        340   358.000340
         364             fcdiagnostic_body_15 :        341   358.000341
         365             fcdiagnostic_body_16 :        342   358.000342
         366             fcdiagnostic_body_17 :        343   358.000343
         367             fcdiagnostic_body_18 :        344   358.000344
         368             fcdiagnostic_body_19 :        345   358.000345
         369             fcdiagnostic_body_20 :        346   358.000346
         370                       gbrad_body :        348   358.000348
         371                      raingg_body :        350   358.000350
         372                        conv_body :        352   358.000352
         373                surfbody_feedback :        355   358.000355
         374                    radiance_body :        357   358.000357
         375                      allsky_body :        359   358.000359
         376                   auxiliary_body :        363   358.000363
         377           resat_averaging_kernel :        365   358.000365
         378                      gnssro_body :        367   358.000367
         379                       scatt_body :        370   358.000370
         380                        ssmi_body :        372   358.000372
         381                       radar_body :        376   358.000376
         382                             body :        378   358.000378
         383                          errstat :        379   358.000379
         384                         update_1 :        380   358.000380
         385                         update_2 :        381   358.000381
         386                         update_3 :        382   358.000382
         387                         update_4 :        383   358.000383

   ----- End of table hierarchy ----- */

PUBLIC void CCMA_print_flags_file(void);

#if defined(ODB_MAINCODE)

PUBLIC double USD_mdi_CCMA = 2147483647; /* $mdi */
PUBLIC double USD_nmxupd_CCMA = 4; /* $nmxupd */
PUBLIC double USD_nmxenkf_CCMA = 120; /* $nmxenkf */
PUBLIC double USD_nmxenda_CCMA = 100; /* $nmxenda */
PUBLIC double USD_nmxfcdiag_CCMA = 20; /* $nmxfcdiag */
PUBLIC double USD_numaux_CCMA = 9; /* $numaux */
PUBLIC double USD_numthbox_CCMA = 3; /* $numthbox */
PUBLIC double USD_numev_CCMA = 1; /* $numev */
PUBLIC double USD_numdiag_CCMA = 1; /* $numdiag */
PUBLIC double USD_synop_CCMA = 1; /* $synop */
PUBLIC double USD_airep_CCMA = 2; /* $airep */
PUBLIC double USD_satob_CCMA = 3; /* $satob */
PUBLIC double USD_dribu_CCMA = 4; /* $dribu */
PUBLIC double USD_buyo_CCMA = 4; /* $buyo */
PUBLIC double USD_temp_CCMA = 5; /* $temp */
PUBLIC double USD_pilot_CCMA = 6; /* $pilot */
PUBLIC double USD_satem_CCMA = 7; /* $satem */
PUBLIC double USD_paob_CCMA = 8; /* $paob */
PUBLIC double USD_scatt_CCMA = 9; /* $scatt */
PUBLIC double USD_limb_CCMA = 10; /* $limb */
PUBLIC double USD_isac_CCMA = 11; /* $isac */
PUBLIC double USD_ralt_CCMA = 12; /* $ralt */
PUBLIC double USD_radar_CCMA = 13; /* $radar */
PUBLIC double USD_gbrad_CCMA = 14; /* $gbrad */
PUBLIC double USD_lidar_CCMA = 15; /* $lidar */
PUBLIC double USD_allsky_CCMA = 16; /* $allsky */
PUBLIC double USD_raingg_CCMA = 17; /* $raingg */
PUBLIC double USD_imsims_CCMA = 18; /* $imsims */
PUBLIC double USD_reo3_CCMA = 206; /* $reo3 */
PUBLIC double USD_resat_CCMA = 206; /* $resat */
PUBLIC double USD_atovs_CCMA = 210; /* $atovs */
PUBLIC double USD_rtovs_CCMA = 211; /* $rtovs */
PUBLIC double USD_tovs_CCMA = 212; /* $tovs */
PUBLIC double USD_ssmi_CCMA = 215; /* $ssmi */
PUBLIC double USD_tcwc_CCMA = 214; /* $tcwc */
PUBLIC double USD_radrr_CCMA = 3; /* $radrr */
PUBLIC double USD_aeolus_CCMA = 187; /* $aeolus */
PUBLIC double USD_satem500_CCMA = 86; /* $satem500 */
PUBLIC double USD_satem250_CCMA = 186; /* $satem250 */
PUBLIC double USD_rad1c_CCMA = 210; /* $rad1c */
PUBLIC double USD_gpsro_CCMA = 250; /* $gpsro */
PUBLIC double USD_lrad_CCMA = 251; /* $lrad */
PUBLIC double USD_synop_land_CCMA = 11; /* $synop_land */
PUBLIC double USD_synop_land_auto_CCMA = 14; /* $synop_land_auto */
PUBLIC double USD_add_land_surface_CCMA = 17; /* $add_land_surface */
PUBLIC double USD_synop_rg1h_CCMA = 39001; /* $synop_rg1h */
PUBLIC double USD_synop_rg3h_CCMA = 39002; /* $synop_rg3h */
PUBLIC double USD_synop_rg6h_CCMA = 39003; /* $synop_rg6h */
PUBLIC double USD_synop_rg12h_CCMA = 39004; /* $synop_rg12h */
PUBLIC double USD_synop_rg24h_CCMA = 39005; /* $synop_rg24h */
PUBLIC double USD_u_CCMA = 3; /* $u */
PUBLIC double USD_v_CCMA = 4; /* $v */
PUBLIC double USD_z_CCMA = 1; /* $z */
PUBLIC double USD_dz_CCMA = 57; /* $dz */
PUBLIC double USD_rh_CCMA = 29; /* $rh */
PUBLIC double USD_pwc_CCMA = 9; /* $pwc */
PUBLIC double USD_rh2m_CCMA = 58; /* $rh2m */
PUBLIC double USD_t_CCMA = 2; /* $t */
PUBLIC double USD_td_CCMA = 59; /* $td */
PUBLIC double USD_t2m_CCMA = 39; /* $t2m */
PUBLIC double USD_td2m_CCMA = 40; /* $td2m */
PUBLIC double USD_ts_CCMA = 11; /* $ts */
PUBLIC double USD_ptend_CCMA = 30; /* $ptend */
PUBLIC double USD_w_CCMA = 60; /* $w */
PUBLIC double USD_ww_CCMA = 61; /* $ww */
PUBLIC double USD_vv_CCMA = 62; /* $vv */
PUBLIC double USD_ch_CCMA = 63; /* $ch */
PUBLIC double USD_cm_CCMA = 64; /* $cm */
PUBLIC double USD_cl_CCMA = 65; /* $cl */
PUBLIC double USD_nh_CCMA = 66; /* $nh */
PUBLIC double USD_nn_CCMA = 67; /* $nn */
PUBLIC double USD_hshs_CCMA = 68; /* $hshs */
PUBLIC double USD_c_CCMA = 69; /* $c */
PUBLIC double USD_ns_CCMA = 70; /* $ns */
PUBLIC double USD_sdepth_CCMA = 71; /* $sdepth */
PUBLIC double USD_e_CCMA = 72; /* $e */
PUBLIC double USD_tgtg_CCMA = 73; /* $tgtg */
PUBLIC double USD_spsp1_CCMA = 74; /* $spsp1 */
PUBLIC double USD_spsp2_CCMA = 75; /* $spsp2 */
PUBLIC double USD_rs_CCMA = 76; /* $rs */
PUBLIC double USD_eses_CCMA = 77; /* $eses */
PUBLIC double USD_is_CCMA = 78; /* $is */
PUBLIC double USD_trtr_CCMA = 79; /* $trtr */
PUBLIC double USD_rr_CCMA = 80; /* $rr */
PUBLIC double USD_jj_CCMA = 81; /* $jj */
PUBLIC double USD_vs_CCMA = 82; /* $vs */
PUBLIC double USD_ds_CCMA = 83; /* $ds */
PUBLIC double USD_hwhw_CCMA = 84; /* $hwhw */
PUBLIC double USD_pwpw_CCMA = 85; /* $pwpw */
PUBLIC double USD_dwdw_CCMA = 86; /* $dwdw */
PUBLIC double USD_gclg_CCMA = 87; /* $gclg */
PUBLIC double USD_rhlc_CCMA = 88; /* $rhlc */
PUBLIC double USD_rhmc_CCMA = 89; /* $rhmc */
PUBLIC double USD_rhhc_CCMA = 90; /* $rhhc */
PUBLIC double USD_n_CCMA = 91; /* $n */
PUBLIC double USD_sfall_CCMA = 92; /* $sfall */
PUBLIC double USD_ps_CCMA = 110; /* $ps */
PUBLIC double USD_dd_CCMA = 111; /* $dd */
PUBLIC double USD_ff_CCMA = 112; /* $ff */
PUBLIC double USD_rawbt_CCMA = 119; /* $rawbt */
PUBLIC double USD_rawra_CCMA = 120; /* $rawra */
PUBLIC double USD_satcl_CCMA = 121; /* $satcl */
PUBLIC double USD_scatss_CCMA = 122; /* $scatss */
PUBLIC double USD_du_CCMA = 5; /* $du */
PUBLIC double USD_dv_CCMA = 6; /* $dv */
PUBLIC double USD_u10m_CCMA = 41; /* $u10m */
PUBLIC double USD_v10m_CCMA = 42; /* $v10m */
PUBLIC double USD_rhlay_CCMA = 19; /* $rhlay */
PUBLIC double USD_cllqw_CCMA = 123; /* $cllqw */
PUBLIC double USD_scatv_CCMA = 124; /* $scatv */
PUBLIC double USD_scatu_CCMA = 125; /* $scatu */
PUBLIC double USD_q_CCMA = 7; /* $q */
PUBLIC double USD_scatwd_CCMA = 126; /* $scatwd */
PUBLIC double USD_scatws_CCMA = 127; /* $scatws */
PUBLIC double USD_vsp_CCMA = 8; /* $vsp */
PUBLIC double USD_vt_CCMA = 56; /* $vt */
PUBLIC double USD_o3lay_CCMA = 206; /* $o3lay */
PUBLIC double USD_height_CCMA = 156; /* $height */
PUBLIC double USD_1dvar_CCMA = 215; /* $1dvar */
PUBLIC double USD_w2_CCMA = 160; /* $w2 */
PUBLIC double USD_cpt_CCMA = 130; /* $cpt */
PUBLIC double USD_tsts_CCMA = 12; /* $tsts */
PUBLIC double USD_refl_CCMA = 192; /* $refl */
PUBLIC double USD_apdss_CCMA = 128; /* $apdss */
PUBLIC double USD_bend_angle_CCMA = 162; /* $bend_angle */
PUBLIC double USD_los_CCMA = 187; /* $los */
PUBLIC double USD_aerod_CCMA = 174; /* $aerod */
PUBLIC double USD_limb_radiance_CCMA = 163; /* $limb_radiance */
PUBLIC double USD_chem1_CCMA = 181; /* $chem1 */
PUBLIC double USD_chem2_CCMA = 182; /* $chem2 */
PUBLIC double USD_chem3_CCMA = 183; /* $chem3 */
PUBLIC double USD_chem4_CCMA = 184; /* $chem4 */
PUBLIC double USD_chem5_CCMA = 185; /* $chem5 */
PUBLIC double USD_cod_CCMA = 175; /* $cod */
PUBLIC double USD_rao_CCMA = 176; /* $rao */
PUBLIC double USD_od_CCMA = 177; /* $od */
PUBLIC double USD_rfltnc_CCMA = 178; /* $rfltnc */
PUBLIC double USD_nsoilm_CCMA = 179; /* $nsoilm */
PUBLIC double USD_soilm_CCMA = 180; /* $soilm */
PUBLIC double USD_flgt_phase_CCMA = 201; /* $flgt_phase */
PUBLIC double USD_height_assignment_method_CCMA = 211; /* $height_assignment_method */
PUBLIC double USD_dopp_CCMA = 195; /* $dopp */
PUBLIC double USD_ghg1_CCMA = 186; /* $ghg1 */
PUBLIC double USD_ghg2_CCMA = 188; /* $ghg2 */
PUBLIC double USD_ghg3_CCMA = 189; /* $ghg3 */
PUBLIC double USD_bt_real_CCMA = 190; /* $bt_real */
PUBLIC double USD_bt_imaginary_CCMA = 191; /* $bt_imaginary */
PUBLIC double USD_prc_CCMA = 202; /* $prc */
PUBLIC double USD_lnprc_CCMA = 203; /* $lnprc */
PUBLIC double USD_libksc_CCMA = 222; /* $libksc */
PUBLIC double USD_ralt_swh_CCMA = 220; /* $ralt_swh */
PUBLIC double USD_ralt_sws_CCMA = 221; /* $ralt_sws */
PUBLIC double USD_rawbt_clear_CCMA = 193; /* $rawbt_clear */
PUBLIC double USD_rawbt_cloudy_CCMA = 194; /* $rawbt_cloudy */
PUBLIC double USD_binary_snow_cover_CCMA = 223; /* $binary_snow_cover */
PUBLIC double USD_salinity_CCMA = 224; /* $salinity */
PUBLIC double USD_potential_temp_CCMA = 225; /* $potential_temp */
PUBLIC double USD_humidity_mixing_ratio_CCMA = 226; /* $humidity_mixing_ratio */
PUBLIC double USD_airframe_icing_CCMA = 227; /* $airframe_icing */
PUBLIC double USD_turbulence_index_CCMA = 228; /* $turbulence_index */
PUBLIC double USD_lidar_aerosol_extinction_CCMA = 236; /* $lidar_aerosol_extinction */
PUBLIC double USD_lidar_cloud_backscatter_CCMA = 237; /* $lidar_cloud_backscatter */
PUBLIC double USD_lidar_cloud_extinction_CCMA = 238; /* $lidar_cloud_extinction */
PUBLIC double USD_cloud_radar_reflectivity_CCMA = 239; /* $cloud_radar_reflectivity */
PUBLIC double USD_q2m_CCMA = 281; /* $q2m */
PUBLIC double USD_pstation_CCMA = 107; /* $pstation */
PUBLIC double USD_pmsl_CCMA = 108; /* $pmsl */
PUBLIC double USD_pstandard_CCMA = 109; /* $pstandard */
PUBLIC double USD_vert_vv_CCMA = 218; /* $vert_vv */
PUBLIC double USD_max_wind_shear1_CCMA = 219; /* $max_wind_shear1 */
PUBLIC double USD_tot_zen_delay_CCMA = 229; /* $tot_zen_delay */
PUBLIC double USD_tot_zen_delay_err_CCMA = 230; /* $tot_zen_delay_err */
PUBLIC double USD_cloud_top_temp_CCMA = 231; /* $cloud_top_temp */
PUBLIC double USD_rawsca_CCMA = 233; /* $rawsca */
PUBLIC double USD_cloud_top_press_CCMA = 235; /* $cloud_top_press */
PUBLIC double USD_mean_freq_CCMA = 241; /* $mean_freq */
PUBLIC double USD_u_amb_CCMA = 242; /* $u_amb */
PUBLIC double USD_v_amb_CCMA = 243; /* $v_amb */
PUBLIC double USD_lwp_CCMA = 244; /* $lwp */
PUBLIC double USD_tcwv_CCMA = 245; /* $tcwv */
PUBLIC double USD_theta_CCMA = 225; /* $theta */
PUBLIC double USD_cloud_frac_clear_CCMA = 247; /* $cloud_frac_clear */
PUBLIC double USD_rawbt_hirs_CCMA = 248; /* $rawbt_hirs */
PUBLIC double USD_rawbt_amsu_CCMA = 249; /* $rawbt_amsu */
PUBLIC double USD_rawbt_hirs20_CCMA = 250; /* $rawbt_hirs20 */
PUBLIC double USD_sea_ice_CCMA = 253; /* $sea_ice */
PUBLIC double USD_cloud_frac_covered_CCMA = 257; /* $cloud_frac_covered */
PUBLIC double USD_level_mixing_ratio_CCMA = 258; /* $level_mixing_ratio */
PUBLIC double USD_radial_velocity_CCMA = 259; /* $radial_velocity */
PUBLIC double USD_cloud_ice_water_CCMA = 260; /* $cloud_ice_water */
PUBLIC double USD_wind_gust_CCMA = 261; /* $wind_gust */
PUBLIC double USD_mass_density_CCMA = 262; /* $mass_density */
PUBLIC double USD_atmosphere_number_CCMA = 263; /* $atmosphere_number */
PUBLIC double USD_lightning_CCMA = 265; /* $lightning */
PUBLIC double USD_level_cloud_CCMA = 266; /* $level_cloud */
PUBLIC double USD_rawbt_amsr_89ghz_CCMA = 267; /* $rawbt_amsr_89ghz */
PUBLIC double USD_max_wind_shear2_CCMA = 268; /* $max_wind_shear2 */
PUBLIC double USD_lower_layer_p_CCMA = 269; /* $lower_layer_p */
PUBLIC double USD_upper_layer_p_CCMA = 270; /* $upper_layer_p */
PUBLIC double USD_cloud_cover_CCMA = 271; /* $cloud_cover */
PUBLIC double USD_depth_CCMA = 272; /* $depth */
PUBLIC double USD_ssh_CCMA = 273; /* $ssh */
PUBLIC double USD_rawbt_mwts_CCMA = 274; /* $rawbt_mwts */
PUBLIC double USD_rawbt_mwhs_CCMA = 275; /* $rawbt_mwhs */
PUBLIC double USD_pressure_CCMA = 1; /* $pressure */
PUBLIC double USD_gpheight_CCMA = 2; /* $gpheight */
PUBLIC double USD_tovs_cha_CCMA = 3; /* $tovs_cha */
PUBLIC double USD_scat_cha_CCMA = 4; /* $scat_cha */
PUBLIC double USD_modlevno_CCMA = 5; /* $modlevno */
PUBLIC double USD_imp_param_CCMA = 6; /* $imp_param */
PUBLIC double USD_cha_number_CCMA = 7; /* $cha_number */
PUBLIC double USD_cha_wavelength_CCMA = 8; /* $cha_wavelength */
PUBLIC double USD_cha_frequency_CCMA = 9; /* $cha_frequency */
PUBLIC double USD_ocean_depth_CCMA = 10; /* $ocean_depth */
PUBLIC double USD_derived_pressure_CCMA = 11; /* $derived_pressure */
PUBLIC double USD_amb_wind_num_CCMA = 12; /* $amb_wind_num */
PUBLIC double USD_cloud_top_pressure_CCMA = 13; /* $cloud_top_pressure */
PUBLIC double USD_tangent_height_CCMA = 14; /* $tangent_height */
PUBLIC double USD_model_pressure_CCMA = 15; /* $model_pressure */
PUBLIC double USD_psealev_CCMA = 0; /* $psealev */
PUBLIC double USD_pstalev_CCMA = 1; /* $pstalev */
PUBLIC double USD_g850hpa_CCMA = 2; /* $g850hpa */
PUBLIC double USD_g700hpa_CCMA = 3; /* $g700hpa */
PUBLIC double USD_p500gpm_CCMA = 4; /* $p500gpm */
PUBLIC double USD_p1000gpm_CCMA = 5; /* $p1000gpm */
PUBLIC double USD_p2000gpm_CCMA = 6; /* $p2000gpm */
PUBLIC double USD_p3000gpm_CCMA = 7; /* $p3000gpm */
PUBLIC double USD_p4000gpm_CCMA = 8; /* $p4000gpm */
PUBLIC double USD_g900hpa_CCMA = 9; /* $g900hpa */
PUBLIC double USD_g1000hpa_CCMA = 10; /* $g1000hpa */
PUBLIC double USD_g500hpa_CCMA = 11; /* $g500hpa */
PUBLIC double USD_g925hpa_CCMA = 12; /* $g925hpa */
PUBLIC double USD_hirs_CCMA = 0; /* $hirs */
PUBLIC double USD_msu_CCMA = 1; /* $msu */
PUBLIC double USD_ssu_CCMA = 2; /* $ssu */
PUBLIC double USD_amsua_CCMA = 3; /* $amsua */
PUBLIC double USD_amsub_CCMA = 4; /* $amsub */
PUBLIC double USD_tmi_CCMA = 9; /* $tmi */
PUBLIC double USD_ssmis_CCMA = 10; /* $ssmis */
PUBLIC double USD_iasi_CCMA = 16; /* $iasi */
PUBLIC double USD_amsre_CCMA = 17; /* $amsre */
PUBLIC double USD_amsr2_CCMA = 63; /* $amsr2 */
PUBLIC double USD_mwri_CCMA = 18; /* $mwri */
PUBLIC double USD_atms_CCMA = 19; /* $atms */
PUBLIC double USD_meteosat_CCMA = 20; /* $meteosat */
PUBLIC double USD_iras_CCMA = 26; /* $iras */
PUBLIC double USD_mwts_CCMA = 27; /* $mwts */
PUBLIC double USD_mwhs_CCMA = 28; /* $mwhs */
PUBLIC double USD_gmi_CCMA = 71; /* $gmi */
PUBLIC double USD_bg_CCMA = 1; /* $bg */
PUBLIC double USD_adj_CCMA = 2; /* $adj */
PUBLIC double USD_resat_retrtype_ak_CCMA = 1; /* $resat_retrtype_ak */
PUBLIC double USD_resat_retrtype_CCMA = 0; /* $resat_retrtype */
PUBLIC double USD_mx_ak_CCMA = 50; /* $mx_ak */
PUBLIC double USD_mx_radar_niv_CCMA = 15; /* $mx_radar_niv */
PUBLIC double USD_mx_limb_tan_CCMA = 17; /* $mx_limb_tan */

#endif /* defined(ODB_MAINCODE) */

/* *************** TYPE "report_rdbflag_t" *************** */

/* typedef struct {
  unsigned lat_humon : 1;
  unsigned lat_qcsub : 1;
  unsigned lat_override : 1;
  unsigned lat_flag : 2;
  unsigned lat_hqc_flag : 1;
  unsigned lon_humon : 1;
  unsigned lon_qcsub : 1;
  unsigned lon_override : 1;
  unsigned lon_flag : 2;
  unsigned lon_hqc_flag : 1;
  unsigned date_humon : 1;
  unsigned date_qcsub : 1;
  unsigned date_override : 1;
  unsigned date_flag : 2;
  unsigned date_hqc_flag : 1;
  unsigned time_humon : 1;
  unsigned time_qcsub : 1;
  unsigned time_override : 1;
  unsigned time_flag : 2;
  unsigned time_hqc_flag : 1;
  unsigned stalt_humon : 1;
  unsigned stalt_qcsub : 1;
  unsigned stalt_override : 1;
  unsigned stalt_flag : 2;
  unsigned stalt_hqc_flag : 1;
  unsigned roll_angle_quality : 1;
} report_rdbflag_t; */

/* *************** End of TYPE "report_rdbflag_t" *************** */

/* *************** TYPE "status_t" *************** */

/* typedef struct {
  unsigned active : 1;
  unsigned passive : 1;
  unsigned rejected : 1;
  unsigned blacklisted : 1;
  unsigned use_emiskf_only : 1;
} status_t; */

/* *************** End of TYPE "status_t" *************** */

/* *************** TYPE "datum_rdbflag_t" *************** */

/* typedef struct {
  unsigned press_humon : 1;
  unsigned press_qcsub : 1;
  unsigned press_override : 1;
  unsigned press_flag : 2;
  unsigned press_hqc_flag : 1;
  unsigned press_judged_prev_an : 2;
  unsigned press_used_prev_an : 1;
  unsigned _press_unused_6 : 6;
  unsigned varno_humon : 1;
  unsigned varno_qcsub : 1;
  unsigned varno_override : 1;
  unsigned varno_flag : 2;
  unsigned varno_hqc_flag : 1;
  unsigned varno_judged_prev_an : 2;
  unsigned varno_used_prev_an : 1;
} datum_rdbflag_t; */

/* *************** End of TYPE "datum_rdbflag_t" *************** */

/* *************** TYPE "datum_flag_t" *************** */

/* typedef struct {
  unsigned final : 4;
  unsigned fg : 4;
  unsigned depar : 4;
  unsigned varqc : 4;
  unsigned blacklist : 4;
  unsigned ups : 1;
  unsigned uvt : 1;
  unsigned uhu : 1;
  unsigned ut2 : 1;
  unsigned uh2 : 1;
  unsigned uv1 : 1;
  unsigned urr : 1;
  unsigned usn : 1;
  unsigned usst : 1;
} datum_flag_t; */

/* *************** End of TYPE "datum_flag_t" *************** */

/* *************** TYPE "level_t" *************** */

/* typedef struct {
  unsigned maxwind : 1;
  unsigned tropopause : 1;
  unsigned d_part : 1;
  unsigned c_part : 1;
  unsigned b_part : 1;
  unsigned a_part : 1;
  unsigned surface : 1;
  unsigned signwind : 1;
  unsigned signtemp : 1;
} level_t; */

/* *************** End of TYPE "level_t" *************** */

/* *************** TYPE "report_event1_t" *************** */

/* typedef struct {
  unsigned no_data : 1;
  unsigned all_rejected : 1;
  unsigned bad_practice : 1;
  unsigned rdb_rejected : 1;
  unsigned redundant : 1;
  unsigned stalt_missing : 1;
  unsigned qc_failed : 1;
  unsigned overcast_ir : 1;
  unsigned thinned : 1;
  unsigned latlon_corrected : 1;
  unsigned stalt_corrected : 1;
} report_event1_t; */

/* *************** End of TYPE "report_event1_t" *************** */


/* *************** TYPE "report_blacklist_t" *************** */

/* typedef struct {
  unsigned obstype : 1;
  unsigned statid : 1;
  unsigned codetype : 1;
  unsigned instype : 1;
  unsigned date : 1;
  unsigned time : 1;
  unsigned lat : 1;
  unsigned lon : 1;
  unsigned stalt : 1;
  unsigned scanpos : 1;
  unsigned retrtype : 1;
  unsigned qi_fc : 1;
  unsigned rff : 1;
  unsigned qi_nofc : 1;
  unsigned modoro : 1;
  unsigned lsmask : 1;
  unsigned rlsmask : 1;
  unsigned modps : 1;
  unsigned modts : 1;
  unsigned modt2m : 1;
  unsigned modtop : 1;
  unsigned sensor : 1;
  unsigned fov : 1;
  unsigned satza : 1;
  unsigned andate : 1;
  unsigned antime : 1;
  unsigned solar_elevation : 1;
  unsigned quality_retrieval : 1;
  unsigned cloud_cover : 1;
  unsigned cloud_top_pressure : 1;
  unsigned product_type : 1;
  unsigned sonde_type : 1;
} report_blacklist_t; */

/* *************** End of TYPE "report_blacklist_t" *************** */

/* *************** TYPE "datum_event1_t" *************** */

/* typedef struct {
  unsigned vertco_missing : 1;
  unsigned obsvalue_missing : 1;
  unsigned fg_missing : 1;
  unsigned rdb_rejected : 1;
  unsigned assim_cld_flag : 1;
  unsigned bad_practice : 1;
  unsigned vertpos_outrange : 1;
  unsigned fg2big : 1;
  unsigned depar2big : 1;
  unsigned obs_error2big : 1;
  unsigned datum_redundant : 1;
  unsigned level_redundant : 1;
  unsigned not_analysis_varno : 1;
  unsigned duplicate : 1;
  unsigned levels2many : 1;
  unsigned level_selection : 1;
  unsigned vertco_consistency : 1;
  unsigned vertco_type_changed : 1;
  unsigned combined_flagging : 1;
  unsigned report_rejected : 1;
  unsigned varqc_performed : 1;
  unsigned obserror_increased : 1;
  unsigned contam_cld_flag : 1;
  unsigned contam_rain_flag : 1;
  unsigned contam_aerosol_flag : 1;
  unsigned bad_emissivity : 1;
  unsigned model_cld_flag : 1;
  unsigned contam_trgas_flag : 1;
  unsigned land_sensitivity : 1;
} datum_event1_t; */

/* *************** End of TYPE "datum_event1_t" *************** */


/* *************** TYPE "datum_sfc_event_t" *************** */

/* typedef struct {
  unsigned statid : 1;
  unsigned lsmask : 1;
  unsigned stalt_missing : 1;
  unsigned obsvalue_missing : 1;
  unsigned fg_missing : 1;
  unsigned fg2big : 1;
  unsigned not_analysis_varno : 1;
  unsigned redundant : 1;
  unsigned report_rejected : 1;
} datum_sfc_event_t; */

/* *************** End of TYPE "datum_sfc_event_t" *************** */

/* *************** TYPE "datum_blacklist_t" *************** */

/* typedef struct {
  unsigned varno : 1;
  unsigned vertco_type : 1;
  unsigned press : 1;
  unsigned press_rl : 1;
  unsigned ppcode : 1;
  unsigned obsvalue : 1;
  unsigned fg_depar : 1;
  unsigned obs_error : 1;
  unsigned fg_error : 1;
  unsigned winchan_dep : 1;
  unsigned obs_t : 1;
  unsigned elevation : 1;
  unsigned winchan_dep2 : 1;
  unsigned tausfc : 1;
  unsigned csr_pclear : 1;
} datum_blacklist_t; */

/* *************** End of TYPE "datum_blacklist_t" *************** */

/* *************** TYPE "aeolus_hdrflag_t" *************** */

/* typedef struct {
  unsigned nadir_location : 1;
  unsigned orbit_predicted : 1;
  unsigned omit_from_ee : 1;
} aeolus_hdrflag_t; */

/* *************** End of TYPE "aeolus_hdrflag_t" *************** */

DefineDS(string);
#define CCMA_pack_DBL ODB_pack_DBL
#define CCMA_unpack_DBL ODB_unpack_DBL
DS_Unpacking(CCMA, DBL, string)
DS_Packing(CCMA, DBL, string)

DefineDS(pk1int);
#define CCMA_pack_INT ODB_pack_INT
#define CCMA_unpack_INT ODB_unpack_INT
DS_Unpacking(CCMA, INT, pk1int)
DS_Packing(CCMA, INT, pk1int)

DefineDS(yyyymmdd);
DS_Unpacking(CCMA, INT, yyyymmdd)
DS_Packing(CCMA, INT, yyyymmdd)

DefineDS(hhmmss);
DS_Unpacking(CCMA, INT, hhmmss)
DS_Packing(CCMA, INT, hhmmss)

DefineDS(linkoffset_t);
DS_Unpacking(CCMA, INT, linkoffset_t)
DS_Packing(CCMA, INT, linkoffset_t)

DefineDS(linklen_t);
DS_Unpacking(CCMA, INT, linklen_t)
DS_Packing(CCMA, INT, linklen_t)

DefineDS(pk9int);
DS_Unpacking(CCMA, INT, pk9int)
DS_Packing(CCMA, INT, pk9int)

DefineDS(pk9real);
DS_Unpacking(CCMA, DBL, pk9real)
DS_Packing(CCMA, DBL, pk9real)

DefineDS(Bitfield);
DS_Unpacking(CCMA, INT, Bitfield)
DS_Packing(CCMA, INT, Bitfield)


#if defined(IS_a_TABLE_desc) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "desc" : appearance order#0, hierarchy rank# 0, weight = 0.000000 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(string,expver);
  DeclareDS(pk1int,class);
  DeclareDS(pk1int,stream);
  DeclareDS(pk1int,type);
  DeclareDS(yyyymmdd,andate);
  DeclareDS(hhmmss,antime);
  DeclareDS(yyyymmdd,inidate);
  DeclareDS(hhmmss,initime);
  DeclareDS(yyyymmdd,creadate);
  DeclareDS(hhmmss,creatime);
  DeclareDS(string,creaby);
  DeclareDS(yyyymmdd,moddate);
  DeclareDS(hhmmss,modtime);
  DeclareDS(string,modby);
  DeclareDS(pk1int,mxup_traj);
  DeclareDS(pk1int,numtsl);
  DeclareDS(linkoffset_t,LINKOFFSET(poolmask));
  DeclareDS(linklen_t,LINKLEN(poolmask));
  DeclareDS(linkoffset_t,LINKOFFSET(timeslot_index));
  DeclareDS(linklen_t,LINKLEN(timeslot_index));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic));
  DeclareDS(pk1int,latlon_rad);
  DeclareDS(pk1int,enda_member);
} TABLE_desc;

#endif /* defined(IS_a_TABLE_desc) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_desc)
extern const ODB_Tags *CCMA_Set_T_desc_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_desc_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_desc_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_desc_PREPTAG = NULL;
PRIVATE int CCMA_nT_desc_TAG = 0;
PRIVATE int CCMA_nT_desc_PREPTAG = 0;
PRIVATE int CCMA_nT_desc_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_desc_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_desc_TAG) {
    int ntag = 24;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "string:expver@desc"; T[0].name = s; }
    { static char s[] = "pk1int:class@desc"; T[1].name = s; }
    { static char s[] = "pk1int:stream@desc"; T[2].name = s; }
    { static char s[] = "pk1int:type@desc"; T[3].name = s; }
    { static char s[] = "yyyymmdd:andate@desc"; T[4].name = s; }
    { static char s[] = "hhmmss:antime@desc"; T[5].name = s; }
    { static char s[] = "yyyymmdd:inidate@desc"; T[6].name = s; }
    { static char s[] = "hhmmss:initime@desc"; T[7].name = s; }
    { static char s[] = "yyyymmdd:creadate@desc"; T[8].name = s; }
    { static char s[] = "hhmmss:creatime@desc"; T[9].name = s; }
    { static char s[] = "string:creaby@desc"; T[10].name = s; }
    { static char s[] = "yyyymmdd:moddate@desc"; T[11].name = s; }
    { static char s[] = "hhmmss:modtime@desc"; T[12].name = s; }
    { static char s[] = "string:modby@desc"; T[13].name = s; }
    { static char s[] = "pk1int:mxup_traj@desc"; T[14].name = s; }
    { static char s[] = "pk1int:numtsl@desc"; T[15].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(poolmask)@desc"; T[16].name = s; }
    { static char s[] = "linklen_t:LINKLEN(poolmask)@desc"; T[17].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(timeslot_index)@desc"; T[18].name = s; }
    { static char s[] = "linklen_t:LINKLEN(timeslot_index)@desc"; T[19].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic)@desc"; T[20].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic)@desc"; T[21].name = s; }
    { static char s[] = "pk1int:latlon_rad@desc"; T[22].name = s; }
    { static char s[] = "pk1int:enda_member@desc"; T[23].name = s; }
    CCMA_T_desc_TAG = T;
    CCMA_nT_desc_TAG = ntag;
    CCMA_nT_desc_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_desc_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_desc_MEM;
  return CCMA_T_desc_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_desc_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_desc_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 400;
    { static char s[] =
      ";expver@desc;class@desc;stream@desc;type@desc;andate@desc;"
      "antime@desc;inidate@desc;initime@desc;creadate@desc;"
      "creatime@desc;creaby@desc;moddate@desc;modtime@desc;"
      "modby@desc;mxup_traj@desc;numtsl@desc;LINKOFFSET(poolmask)@desc;"
      "LINKLEN(poolmask)@desc;LINKOFFSET(timeslot_index)@desc;"
      "LINKLEN(timeslot_index)@desc;LINKOFFSET(fcdiagnostic)@desc;"
      "LINKLEN(fcdiagnostic)@desc;latlon_rad@desc;enda_member@desc;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 204;
    { static char s[] =
      ";string;pk1int;pk1int;pk1int;yyyymmdd;hhmmss;yyyymmdd;"
      "hhmmss;yyyymmdd;hhmmss;string;yyyymmdd;hhmmss;string;"
      "pk1int;pk1int;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;pk1int;pk1int;";
      T[1].longname = s; }
    CCMA_T_desc_PREPTAG = T;
    CCMA_nT_desc_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_desc_PREPTAG;
  return CCMA_T_desc_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_desc(void *T);
extern int CCMA_Unpack_T_desc(void *T);
extern int CCMA_Sel_T_desc(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, desc);
PrePutTable(CCMA, d, double, desc);
PreLoadTable(CCMA, desc);
PreStoreTable(CCMA, desc);
extern void CCMA_Dim_T_desc(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_desc(void *T);
extern int CCMA_Sql_T_desc(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_desc(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_poolmask) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "poolmask" : appearance order#1, hierarchy rank# 1, weight = 1.000001 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,timeslot);
  DeclareDS(pk1int,obstype);
  DeclareDS(pk1int,codetype);
  DeclareDS(pk1int,sensor);
  DeclareDS(pk1int,bufrtype);
  DeclareDS(pk1int,subtype);
  DeclareDS(pk1int,poolno);
  DeclareDS(pk1int,hdr_count);
  DeclareDS(pk1int,body_count);
  DeclareDS(pk1int,max_bodylen);
} TABLE_poolmask;

#endif /* defined(IS_a_TABLE_poolmask) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_poolmask)
extern const ODB_Tags *CCMA_Set_T_poolmask_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_poolmask_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_poolmask_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_poolmask_PREPTAG = NULL;
PRIVATE int CCMA_nT_poolmask_TAG = 0;
PRIVATE int CCMA_nT_poolmask_PREPTAG = 0;
PRIVATE int CCMA_nT_poolmask_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_poolmask_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_poolmask_TAG) {
    int ntag = 10;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:timeslot@poolmask"; T[0].name = s; }
    { static char s[] = "pk1int:obstype@poolmask"; T[1].name = s; }
    { static char s[] = "pk1int:codetype@poolmask"; T[2].name = s; }
    { static char s[] = "pk1int:sensor@poolmask"; T[3].name = s; }
    { static char s[] = "pk1int:bufrtype@poolmask"; T[4].name = s; }
    { static char s[] = "pk1int:subtype@poolmask"; T[5].name = s; }
    { static char s[] = "pk1int:poolno@poolmask"; T[6].name = s; }
    { static char s[] = "pk1int:hdr_count@poolmask"; T[7].name = s; }
    { static char s[] = "pk1int:body_count@poolmask"; T[8].name = s; }
    { static char s[] = "pk1int:max_bodylen@poolmask"; T[9].name = s; }
    CCMA_T_poolmask_TAG = T;
    CCMA_nT_poolmask_TAG = ntag;
    CCMA_nT_poolmask_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_poolmask_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_poolmask_MEM;
  return CCMA_T_poolmask_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_poolmask_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_poolmask_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 181;
    { static char s[] =
      ";timeslot@poolmask;obstype@poolmask;codetype@poolmask;"
      "sensor@poolmask;bufrtype@poolmask;subtype@poolmask;"
      "poolno@poolmask;hdr_count@poolmask;body_count@poolmask;"
      "max_bodylen@poolmask;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 71;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;"
      "pk1int;pk1int;pk1int;";
      T[1].longname = s; }
    CCMA_T_poolmask_PREPTAG = T;
    CCMA_nT_poolmask_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_poolmask_PREPTAG;
  return CCMA_T_poolmask_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_poolmask(void *T);
extern int CCMA_Unpack_T_poolmask(void *T);
extern int CCMA_Sel_T_poolmask(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, poolmask);
PrePutTable(CCMA, d, double, poolmask);
PreLoadTable(CCMA, poolmask);
PreStoreTable(CCMA, poolmask);
extern void CCMA_Dim_T_poolmask(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_poolmask(void *T);
extern int CCMA_Sql_T_poolmask(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_poolmask(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_timeslot_index) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "timeslot_index" : appearance order#2, hierarchy rank# 2, weight = 1.000002 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,timeslot);
  DeclareDS(pk1int,model_timestep);
  DeclareDS(yyyymmdd,enddate);
  DeclareDS(hhmmss,endtime);
  DeclareDS(linkoffset_t,LINKOFFSET(index));
  DeclareDS(linklen_t,LINKLEN(index));
} TABLE_timeslot_index;

#endif /* defined(IS_a_TABLE_timeslot_index) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_timeslot_index)
extern const ODB_Tags *CCMA_Set_T_timeslot_index_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_timeslot_index_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_timeslot_index_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_timeslot_index_PREPTAG = NULL;
PRIVATE int CCMA_nT_timeslot_index_TAG = 0;
PRIVATE int CCMA_nT_timeslot_index_PREPTAG = 0;
PRIVATE int CCMA_nT_timeslot_index_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_timeslot_index_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_timeslot_index_TAG) {
    int ntag = 6;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:timeslot@timeslot_index"; T[0].name = s; }
    { static char s[] = "pk1int:model_timestep@timeslot_index"; T[1].name = s; }
    { static char s[] = "yyyymmdd:enddate@timeslot_index"; T[2].name = s; }
    { static char s[] = "hhmmss:endtime@timeslot_index"; T[3].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(index)@timeslot_index"; T[4].name = s; }
    { static char s[] = "linklen_t:LINKLEN(index)@timeslot_index"; T[5].name = s; }
    CCMA_T_timeslot_index_TAG = T;
    CCMA_nT_timeslot_index_TAG = ntag;
    CCMA_nT_timeslot_index_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_timeslot_index_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_timeslot_index_MEM;
  return CCMA_T_timeslot_index_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_timeslot_index_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_timeslot_index_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 164;
    { static char s[] =
      ";timeslot@timeslot_index;model_timestep@timeslot_index;"
      "enddate@timeslot_index;endtime@timeslot_index;LINKOFFSET(index)@timeslot_index;"
      "LINKLEN(index)@timeslot_index;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 54;
    { static char s[] =
      ";pk1int;pk1int;yyyymmdd;hhmmss;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_timeslot_index_PREPTAG = T;
    CCMA_nT_timeslot_index_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_timeslot_index_PREPTAG;
  return CCMA_T_timeslot_index_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_timeslot_index(void *T);
extern int CCMA_Unpack_T_timeslot_index(void *T);
extern int CCMA_Sel_T_timeslot_index(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, timeslot_index);
PrePutTable(CCMA, d, double, timeslot_index);
PreLoadTable(CCMA, timeslot_index);
PreStoreTable(CCMA, timeslot_index);
extern void CCMA_Dim_T_timeslot_index(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_timeslot_index(void *T);
extern int CCMA_Sql_T_timeslot_index(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_timeslot_index(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_index) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "index" : appearance order#3, hierarchy rank# 3, weight = 1.000003 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,target);
  DeclareDS(pk1int,procid);
  DeclareDS(pk1int,timeslot);
  DeclareDS(pk1int,kset);
  DeclareDS(pk1int,abnob);
  DeclareDS(pk1int,mapomm);
  DeclareDS(pk1int,maptovscv);
  DeclareDS(linkoffset_t,LINKOFFSET(hdr));
  DeclareDS(linklen_t,LINKLEN(hdr));
} TABLE_index;

#endif /* defined(IS_a_TABLE_index) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_index)
extern const ODB_Tags *CCMA_Set_T_index_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_index_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_index_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_index_PREPTAG = NULL;
PRIVATE int CCMA_nT_index_TAG = 0;
PRIVATE int CCMA_nT_index_PREPTAG = 0;
PRIVATE int CCMA_nT_index_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_index_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_index_TAG) {
    int ntag = 9;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:target@index"; T[0].name = s; }
    { static char s[] = "pk1int:procid@index"; T[1].name = s; }
    { static char s[] = "pk1int:timeslot@index"; T[2].name = s; }
    { static char s[] = "pk1int:kset@index"; T[3].name = s; }
    { static char s[] = "pk1int:abnob@index"; T[4].name = s; }
    { static char s[] = "pk1int:mapomm@index"; T[5].name = s; }
    { static char s[] = "pk1int:maptovscv@index"; T[6].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(hdr)@index"; T[7].name = s; }
    { static char s[] = "linklen_t:LINKLEN(hdr)@index"; T[8].name = s; }
    CCMA_T_index_TAG = T;
    CCMA_nT_index_TAG = ntag;
    CCMA_nT_index_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_index_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_index_MEM;
  return CCMA_T_index_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_index_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_index_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 135;
    { static char s[] =
      ";target@index;procid@index;timeslot@index;kset@index;"
      "abnob@index;mapomm@index;maptovscv@index;LINKOFFSET(hdr)@index;"
      "LINKLEN(hdr)@index;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 73;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;"
      "linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_index_PREPTAG = T;
    CCMA_nT_index_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_index_PREPTAG;
  return CCMA_T_index_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_index(void *T);
extern int CCMA_Unpack_T_index(void *T);
extern int CCMA_Sel_T_index(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, index);
PrePutTable(CCMA, d, double, index);
PreLoadTable(CCMA, index);
PreStoreTable(CCMA, index);
extern void CCMA_Dim_T_index(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_index(void *T);
extern int CCMA_Sql_T_index(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_index(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_hdr) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "hdr" : appearance order#4, hierarchy rank# 4, weight = 3.000004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,seqno);
  DeclareDS(pk1int,subseqno);
  DeclareDS(pk1int,reportno);
  DeclareDS(pk1int,bufrtype);
  DeclareDS(pk1int,subtype);
  DeclareDS(pk9int,subsetno);
  DeclareDS(pk1int,groupid);
  DeclareDS(pk1int,reportype);
  DeclareDS(pk1int,obstype);
  DeclareDS(pk1int,codetype);
  DeclareDS(pk1int,sensor);
  DeclareDS(pk1int,retrtype);
  DeclareDS(pk1int,instrument_type);
  DeclareDS(pk9real,stalt);
  DeclareDS(yyyymmdd,date);
  DeclareDS(hhmmss,time);
  DeclareDS(yyyymmdd,rdbdate);
  DeclareDS(hhmmss,rdbtime);
  DeclareDS(pk1int,distribtype);
  DeclareDS(pk1int,distribid);
  DeclareDS(pk9real,gp_dist);
  DeclareDS(pk1int,gp_number);
  DeclareDS(pk1int,numlev);
  DeclareDS(pk1int,numactiveb);
  DeclareDS(pk9real,checksum);
  DeclareDS(pk1int,sortbox);
  DeclareDS(pk1int,areatype);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_rdbflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_blacklist); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event2); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,thinningkey_1);
  DeclareDS(pk9real,thinningkey_2);
  DeclareDS(pk9real,thinningkey_3);
  DeclareDS(pk9real,thinningtimekey);
  DeclareDS(pk1int,sitedep);
  DeclareDS(string,source);
  DeclareDS(pk9real,lat);
  DeclareDS(pk9real,lon);
  DeclareDS(pk9real,trlat);
  DeclareDS(pk9real,trlon);
  DeclareDS(linkoffset_t,LINKOFFSET(modsurf));
  DeclareDS(linklen_t,LINKLEN(modsurf));
  DeclareDS(string,statid);
  DeclareDS(linkoffset_t,LINKOFFSET(conv));
  DeclareDS(linklen_t,LINKLEN(conv));
  DeclareDS(linkoffset_t,LINKOFFSET(sat));
  DeclareDS(linklen_t,LINKLEN(sat));
  DeclareDS(linkoffset_t,LINKOFFSET(body));
  DeclareDS(linklen_t,LINKLEN(body));
  DeclareDS(linkoffset_t,LINKOFFSET(errstat));
  DeclareDS(linklen_t,LINKLEN(errstat));
  DeclareDS(linkoffset_t,LINKOFFSET(update_1));
  DeclareDS(linklen_t,LINKLEN(update_1));
  DeclareDS(linkoffset_t,LINKOFFSET(update_2));
  DeclareDS(linklen_t,LINKLEN(update_2));
  DeclareDS(linkoffset_t,LINKOFFSET(update_3));
  DeclareDS(linklen_t,LINKLEN(update_3));
  DeclareDS(linkoffset_t,LINKOFFSET(update_4));
  DeclareDS(linklen_t,LINKLEN(update_4));
  DeclareDS(linkoffset_t,LINKOFFSET(auxiliary));
  DeclareDS(linklen_t,LINKLEN(auxiliary));
  DeclareDS(linkoffset_t,LINKOFFSET(ensemble));
  DeclareDS(linklen_t,LINKLEN(ensemble));
  DeclareDS(linkoffset_t,LINKOFFSET(gbrad));
  DeclareDS(linklen_t,LINKLEN(gbrad));
  DeclareDS(linkoffset_t,LINKOFFSET(raingg));
  DeclareDS(linklen_t,LINKLEN(raingg));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback));
  DeclareDS(pk1int,window_offset);
} TABLE_hdr;

#endif /* defined(IS_a_TABLE_hdr) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_hdr)
extern const ODB_Tags *CCMA_Set_T_hdr_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_hdr_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_hdr_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_hdr_PREPTAG = NULL;
PRIVATE int CCMA_nT_hdr_TAG = 0;
PRIVATE int CCMA_nT_hdr_PREPTAG = 0;
PRIVATE int CCMA_nT_hdr_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_hdr_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_hdr_TAG) {
    int ntag = 72;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:seqno@hdr"; T[0].name = s; }
    { static char s[] = "pk1int:subseqno@hdr"; T[1].name = s; }
    { static char s[] = "pk1int:reportno@hdr"; T[2].name = s; }
    { static char s[] = "pk1int:bufrtype@hdr"; T[3].name = s; }
    { static char s[] = "pk1int:subtype@hdr"; T[4].name = s; }
    { static char s[] = "pk9int:subsetno@hdr"; T[5].name = s; }
    { static char s[] = "pk1int:groupid@hdr"; T[6].name = s; }
    { static char s[] = "pk1int:reportype@hdr"; T[7].name = s; }
    { static char s[] = "pk1int:obstype@hdr"; T[8].name = s; }
    { static char s[] = "pk1int:codetype@hdr"; T[9].name = s; }
    { static char s[] = "pk1int:sensor@hdr"; T[10].name = s; }
    { static char s[] = "pk1int:retrtype@hdr"; T[11].name = s; }
    { static char s[] = "pk1int:instrument_type@hdr"; T[12].name = s; }
    { static char s[] = "pk9real:stalt@hdr"; T[13].name = s; }
    { static char s[] = "yyyymmdd:date@hdr"; T[14].name = s; }
    { static char s[] = "hhmmss:time@hdr"; T[15].name = s; }
    { static char s[] = "yyyymmdd:rdbdate@hdr"; T[16].name = s; }
    { static char s[] = "hhmmss:rdbtime@hdr"; T[17].name = s; }
    { static char s[] = "pk1int:distribtype@hdr"; T[18].name = s; }
    { static char s[] = "pk1int:distribid@hdr"; T[19].name = s; }
    { static char s[] = "pk9real:gp_dist@hdr"; T[20].name = s; }
    { static char s[] = "pk1int:gp_number@hdr"; T[21].name = s; }
    { static char s[] = "pk1int:numlev@hdr"; T[22].name = s; }
    { static char s[] = "pk1int:numactiveb@hdr"; T[23].name = s; }
    { static char s[] = "pk9real:checksum@hdr"; T[24].name = s; }
    { static char s[] = "pk1int:sortbox@hdr"; T[25].name = s; }
    { static char s[] = "pk1int:areatype@hdr"; T[26].name = s; }
    { static char s[] = "Bitfield:report_status@hdr"; T[27].name = s; }
    T[27].nmem = 5;
ALLOC(T[27].memb, 5);
      { static char s[] = "active 1"; T[27].memb[0] = s; }
      { static char s[] = "passive 1"; T[27].memb[1] = s; }
      { static char s[] = "rejected 1"; T[27].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[27].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[27].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@hdr"; T[28].name = s; }
    T[28].nmem = 11;
ALLOC(T[28].memb, 11);
      { static char s[] = "no_data 1"; T[28].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[28].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[28].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[28].memb[3] = s; }
      { static char s[] = "redundant 1"; T[28].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[28].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[28].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[28].memb[7] = s; }
      { static char s[] = "thinned 1"; T[28].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[28].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[28].memb[10] = s; }
    { static char s[] = "Bitfield:report_rdbflag@hdr"; T[29].name = s; }
    T[29].nmem = 26;
ALLOC(T[29].memb, 26);
      { static char s[] = "lat_humon 1"; T[29].memb[0] = s; }
      { static char s[] = "lat_qcsub 1"; T[29].memb[1] = s; }
      { static char s[] = "lat_override 1"; T[29].memb[2] = s; }
      { static char s[] = "lat_flag 2"; T[29].memb[3] = s; }
      { static char s[] = "lat_hqc_flag 1"; T[29].memb[4] = s; }
      { static char s[] = "lon_humon 1"; T[29].memb[5] = s; }
      { static char s[] = "lon_qcsub 1"; T[29].memb[6] = s; }
      { static char s[] = "lon_override 1"; T[29].memb[7] = s; }
      { static char s[] = "lon_flag 2"; T[29].memb[8] = s; }
      { static char s[] = "lon_hqc_flag 1"; T[29].memb[9] = s; }
      { static char s[] = "date_humon 1"; T[29].memb[10] = s; }
      { static char s[] = "date_qcsub 1"; T[29].memb[11] = s; }
      { static char s[] = "date_override 1"; T[29].memb[12] = s; }
      { static char s[] = "date_flag 2"; T[29].memb[13] = s; }
      { static char s[] = "date_hqc_flag 1"; T[29].memb[14] = s; }
      { static char s[] = "time_humon 1"; T[29].memb[15] = s; }
      { static char s[] = "time_qcsub 1"; T[29].memb[16] = s; }
      { static char s[] = "time_override 1"; T[29].memb[17] = s; }
      { static char s[] = "time_flag 2"; T[29].memb[18] = s; }
      { static char s[] = "time_hqc_flag 1"; T[29].memb[19] = s; }
      { static char s[] = "stalt_humon 1"; T[29].memb[20] = s; }
      { static char s[] = "stalt_qcsub 1"; T[29].memb[21] = s; }
      { static char s[] = "stalt_override 1"; T[29].memb[22] = s; }
      { static char s[] = "stalt_flag 2"; T[29].memb[23] = s; }
      { static char s[] = "stalt_hqc_flag 1"; T[29].memb[24] = s; }
      { static char s[] = "roll_angle_quality 1"; T[29].memb[25] = s; }
    { static char s[] = "Bitfield:report_blacklist@hdr"; T[30].name = s; }
    T[30].nmem = 32;
ALLOC(T[30].memb, 32);
      { static char s[] = "obstype 1"; T[30].memb[0] = s; }
      { static char s[] = "statid 1"; T[30].memb[1] = s; }
      { static char s[] = "codetype 1"; T[30].memb[2] = s; }
      { static char s[] = "instype 1"; T[30].memb[3] = s; }
      { static char s[] = "date 1"; T[30].memb[4] = s; }
      { static char s[] = "time 1"; T[30].memb[5] = s; }
      { static char s[] = "lat 1"; T[30].memb[6] = s; }
      { static char s[] = "lon 1"; T[30].memb[7] = s; }
      { static char s[] = "stalt 1"; T[30].memb[8] = s; }
      { static char s[] = "scanpos 1"; T[30].memb[9] = s; }
      { static char s[] = "retrtype 1"; T[30].memb[10] = s; }
      { static char s[] = "qi_fc 1"; T[30].memb[11] = s; }
      { static char s[] = "rff 1"; T[30].memb[12] = s; }
      { static char s[] = "qi_nofc 1"; T[30].memb[13] = s; }
      { static char s[] = "modoro 1"; T[30].memb[14] = s; }
      { static char s[] = "lsmask 1"; T[30].memb[15] = s; }
      { static char s[] = "rlsmask 1"; T[30].memb[16] = s; }
      { static char s[] = "modps 1"; T[30].memb[17] = s; }
      { static char s[] = "modts 1"; T[30].memb[18] = s; }
      { static char s[] = "modt2m 1"; T[30].memb[19] = s; }
      { static char s[] = "modtop 1"; T[30].memb[20] = s; }
      { static char s[] = "sensor 1"; T[30].memb[21] = s; }
      { static char s[] = "fov 1"; T[30].memb[22] = s; }
      { static char s[] = "satza 1"; T[30].memb[23] = s; }
      { static char s[] = "andate 1"; T[30].memb[24] = s; }
      { static char s[] = "antime 1"; T[30].memb[25] = s; }
      { static char s[] = "solar_elevation 1"; T[30].memb[26] = s; }
      { static char s[] = "quality_retrieval 1"; T[30].memb[27] = s; }
      { static char s[] = "cloud_cover 1"; T[30].memb[28] = s; }
      { static char s[] = "cloud_top_pressure 1"; T[30].memb[29] = s; }
      { static char s[] = "product_type 1"; T[30].memb[30] = s; }
      { static char s[] = "sonde_type 1"; T[30].memb[31] = s; }
    { static char s[] = "Bitfield:report_event2@hdr"; T[31].name = s; }
    { static char s[] = "pk9real:thinningkey_1@hdr"; T[32].name = s; }
    { static char s[] = "pk9real:thinningkey_2@hdr"; T[33].name = s; }
    { static char s[] = "pk9real:thinningkey_3@hdr"; T[34].name = s; }
    { static char s[] = "pk9real:thinningtimekey@hdr"; T[35].name = s; }
    { static char s[] = "pk1int:sitedep@hdr"; T[36].name = s; }
    { static char s[] = "string:source@hdr"; T[37].name = s; }
    { static char s[] = "pk9real:lat@hdr"; T[38].name = s; }
    { static char s[] = "pk9real:lon@hdr"; T[39].name = s; }
    { static char s[] = "pk9real:trlat@hdr"; T[40].name = s; }
    { static char s[] = "pk9real:trlon@hdr"; T[41].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(modsurf)@hdr"; T[42].name = s; }
    { static char s[] = "linklen_t:LINKLEN(modsurf)@hdr"; T[43].name = s; }
    { static char s[] = "string:statid@hdr"; T[44].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(conv)@hdr"; T[45].name = s; }
    { static char s[] = "linklen_t:LINKLEN(conv)@hdr"; T[46].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(sat)@hdr"; T[47].name = s; }
    { static char s[] = "linklen_t:LINKLEN(sat)@hdr"; T[48].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(body)@hdr"; T[49].name = s; }
    { static char s[] = "linklen_t:LINKLEN(body)@hdr"; T[50].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(errstat)@hdr"; T[51].name = s; }
    { static char s[] = "linklen_t:LINKLEN(errstat)@hdr"; T[52].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(update_1)@hdr"; T[53].name = s; }
    { static char s[] = "linklen_t:LINKLEN(update_1)@hdr"; T[54].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(update_2)@hdr"; T[55].name = s; }
    { static char s[] = "linklen_t:LINKLEN(update_2)@hdr"; T[56].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(update_3)@hdr"; T[57].name = s; }
    { static char s[] = "linklen_t:LINKLEN(update_3)@hdr"; T[58].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(update_4)@hdr"; T[59].name = s; }
    { static char s[] = "linklen_t:LINKLEN(update_4)@hdr"; T[60].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(auxiliary)@hdr"; T[61].name = s; }
    { static char s[] = "linklen_t:LINKLEN(auxiliary)@hdr"; T[62].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(ensemble)@hdr"; T[63].name = s; }
    { static char s[] = "linklen_t:LINKLEN(ensemble)@hdr"; T[64].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(gbrad)@hdr"; T[65].name = s; }
    { static char s[] = "linklen_t:LINKLEN(gbrad)@hdr"; T[66].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(raingg)@hdr"; T[67].name = s; }
    { static char s[] = "linklen_t:LINKLEN(raingg)@hdr"; T[68].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback)@hdr"; T[69].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback)@hdr"; T[70].name = s; }
    { static char s[] = "pk1int:window_offset@hdr"; T[71].name = s; }
    CCMA_T_hdr_TAG = T;
    CCMA_nT_hdr_TAG = ntag;
    CCMA_nT_hdr_MEM = 74;
  }
  if (ntag_out) *ntag_out = CCMA_nT_hdr_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_hdr_MEM;
  return CCMA_T_hdr_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_hdr_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_hdr_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 1236;
    { static char s[] =
      ";seqno@hdr;subseqno@hdr;reportno@hdr;bufrtype@hdr;"
      "subtype@hdr;subsetno@hdr;groupid@hdr;reportype@hdr;"
      "obstype@hdr;codetype@hdr;sensor@hdr;retrtype@hdr;instrument_type@hdr;"
      "stalt@hdr;date@hdr;time@hdr;rdbdate@hdr;rdbtime@hdr;"
      "distribtype@hdr;distribid@hdr;gp_dist@hdr;gp_number@hdr;"
      "numlev@hdr;numactiveb@hdr;checksum@hdr;sortbox@hdr;"
      "areatype@hdr;report_status@hdr;report_event1@hdr;report_rdbflag@hdr;"
      "report_blacklist@hdr;report_event2@hdr;thinningkey_1@hdr;"
      "thinningkey_2@hdr;thinningkey_3@hdr;thinningtimekey@hdr;"
      "sitedep@hdr;source@hdr;lat@hdr;lon@hdr;trlat@hdr;trlon@hdr;"
      "LINKOFFSET(modsurf)@hdr;LINKLEN(modsurf)@hdr;statid@hdr;"
      "LINKOFFSET(conv)@hdr;LINKLEN(conv)@hdr;LINKOFFSET(sat)@hdr;"
      "LINKLEN(sat)@hdr;LINKOFFSET(body)@hdr;LINKLEN(body)@hdr;"
      "LINKOFFSET(errstat)@hdr;LINKLEN(errstat)@hdr;LINKOFFSET(update_1)@hdr;"
      "LINKLEN(update_1)@hdr;LINKOFFSET(update_2)@hdr;LINKLEN(update_2)@hdr;"
      "LINKOFFSET(update_3)@hdr;LINKLEN(update_3)@hdr;LINKOFFSET(update_4)@hdr;"
      "LINKLEN(update_4)@hdr;LINKOFFSET(auxiliary)@hdr;LINKLEN(auxiliary)@hdr;"
      "LINKOFFSET(ensemble)@hdr;LINKLEN(ensemble)@hdr;LINKOFFSET(gbrad)@hdr;"
      "LINKLEN(gbrad)@hdr;LINKOFFSET(raingg)@hdr;LINKLEN(raingg)@hdr;"
      "LINKOFFSET(surfbody_feedback)@hdr;LINKLEN(surfbody_feedback)@hdr;"
      "window_offset@hdr;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 656;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;pk1int;pk9int;pk1int;"
      "pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;pk9real;"
      "yyyymmdd;hhmmss;yyyymmdd;hhmmss;pk1int;pk1int;pk9real;"
      "pk1int;pk1int;pk1int;pk9real;pk1int;pk1int;Bitfield;"
      "Bitfield;Bitfield;Bitfield;Bitfield;pk9real;pk9real;"
      "pk9real;pk9real;pk1int;string;pk9real;pk9real;pk9real;"
      "pk9real;linkoffset_t;linklen_t;string;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "pk1int;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 3449;
    { static char s[] =
      ";seqno@hdr;subseqno@hdr;reportno@hdr;bufrtype@hdr;"
      "subtype@hdr;subsetno@hdr;groupid@hdr;reportype@hdr;"
      "obstype@hdr;codetype@hdr;sensor@hdr;retrtype@hdr;instrument_type@hdr;"
      "stalt@hdr;date@hdr;time@hdr;rdbdate@hdr;rdbtime@hdr;"
      "distribtype@hdr;distribid@hdr;gp_dist@hdr;gp_number@hdr;"
      "numlev@hdr;numactiveb@hdr;checksum@hdr;sortbox@hdr;"
      "areatype@hdr;report_status@hdr;report_event1@hdr;report_rdbflag@hdr;"
      "report_blacklist@hdr;report_event2@hdr;thinningkey_1@hdr;"
      "thinningkey_2@hdr;thinningkey_3@hdr;thinningtimekey@hdr;"
      "sitedep@hdr;source@hdr;lat@hdr;lon@hdr;trlat@hdr;trlon@hdr;"
      "LINKOFFSET(modsurf)@hdr;LINKLEN(modsurf)@hdr;statid@hdr;"
      "LINKOFFSET(conv)@hdr;LINKLEN(conv)@hdr;LINKOFFSET(sat)@hdr;"
      "LINKLEN(sat)@hdr;LINKOFFSET(body)@hdr;LINKLEN(body)@hdr;"
      "LINKOFFSET(errstat)@hdr;LINKLEN(errstat)@hdr;LINKOFFSET(update_1)@hdr;"
      "LINKLEN(update_1)@hdr;LINKOFFSET(update_2)@hdr;LINKLEN(update_2)@hdr;"
      "LINKOFFSET(update_3)@hdr;LINKLEN(update_3)@hdr;LINKOFFSET(update_4)@hdr;"
      "LINKLEN(update_4)@hdr;LINKOFFSET(auxiliary)@hdr;LINKLEN(auxiliary)@hdr;"
      "LINKOFFSET(ensemble)@hdr;LINKLEN(ensemble)@hdr;LINKOFFSET(gbrad)@hdr;"
      "LINKLEN(gbrad)@hdr;LINKOFFSET(raingg)@hdr;LINKLEN(raingg)@hdr;"
      "LINKOFFSET(surfbody_feedback)@hdr;LINKLEN(surfbody_feedback)@hdr;"
      "window_offset@hdr;report_status.active@hdr;report_status.passive@hdr;"
      "report_status.rejected@hdr;report_status.blacklisted@hdr;"
      "report_status.use_emiskf_only@hdr;report_event1.no_data@hdr;"
      "report_event1.all_rejected@hdr;report_event1.bad_practice@hdr;"
      "report_event1.rdb_rejected@hdr;report_event1.redundant@hdr;"
      "report_event1.stalt_missing@hdr;report_event1.qc_failed@hdr;"
      "report_event1.overcast_ir@hdr;report_event1.thinned@hdr;"
      "report_event1.latlon_corrected@hdr;report_event1.stalt_corrected@hdr;"
      "report_rdbflag.lat_humon@hdr;report_rdbflag.lat_qcsub@hdr;"
      "report_rdbflag.lat_override@hdr;report_rdbflag.lat_flag@hdr;"
      "report_rdbflag.lat_hqc_flag@hdr;report_rdbflag.lon_humon@hdr;"
      "report_rdbflag.lon_qcsub@hdr;report_rdbflag.lon_override@hdr;"
      "report_rdbflag.lon_flag@hdr;report_rdbflag.lon_hqc_flag@hdr;"
      "report_rdbflag.date_humon@hdr;report_rdbflag.date_qcsub@hdr;"
      "report_rdbflag.date_override@hdr;report_rdbflag.date_flag@hdr;"
      "report_rdbflag.date_hqc_flag@hdr;report_rdbflag.time_humon@hdr;"
      "report_rdbflag.time_qcsub@hdr;report_rdbflag.time_override@hdr;"
      "report_rdbflag.time_flag@hdr;report_rdbflag.time_hqc_flag@hdr;"
      "report_rdbflag.stalt_humon@hdr;report_rdbflag.stalt_qcsub@hdr;"
      "report_rdbflag.stalt_override@hdr;report_rdbflag.stalt_flag@hdr;"
      "report_rdbflag.stalt_hqc_flag@hdr;report_rdbflag.roll_angle_quality@hdr;"
      "report_blacklist.obstype@hdr;report_blacklist.statid@hdr;"
      "report_blacklist.codetype@hdr;report_blacklist.instype@hdr;"
      "report_blacklist.date@hdr;report_blacklist.time@hdr;"
      "report_blacklist.lat@hdr;report_blacklist.lon@hdr;"
      "report_blacklist.stalt@hdr;report_blacklist.scanpos@hdr;"
      "report_blacklist.retrtype@hdr;report_blacklist.qi_fc@hdr;"
      "report_blacklist.rff@hdr;report_blacklist.qi_nofc@hdr;"
      "report_blacklist.modoro@hdr;report_blacklist.lsmask@hdr;"
      "report_blacklist.rlsmask@hdr;report_blacklist.modps@hdr;"
      "report_blacklist.modts@hdr;report_blacklist.modt2m@hdr;"
      "report_blacklist.modtop@hdr;report_blacklist.sensor@hdr;"
      "report_blacklist.fov@hdr;report_blacklist.satza@hdr;"
      "report_blacklist.andate@hdr;report_blacklist.antime@hdr;"
      "report_blacklist.solar_elevation@hdr;report_blacklist.quality_retrieval@hdr;"
      "report_blacklist.cloud_cover@hdr;report_blacklist.cloud_top_pressure@hdr;"
      "report_blacklist.product_type@hdr;report_blacklist.sonde_type@hdr;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 1026;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;pk1int;pk9int;pk1int;"
      "pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;pk9real;"
      "yyyymmdd;hhmmss;yyyymmdd;hhmmss;pk1int;pk1int;pk9real;"
      "pk1int;pk1int;pk1int;pk9real;pk1int;pk1int;Bitfield;"
      "Bitfield;Bitfield;Bitfield;Bitfield;pk9real;pk9real;"
      "pk9real;pk9real;pk1int;string;pk9real;pk9real;pk9real;"
      "pk9real;linkoffset_t;linklen_t;string;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "pk1int;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit2;bit1;bit1;bit1;bit1;bit2;bit1;bit1;bit1;bit1;"
      "bit2;bit1;bit1;bit1;bit1;bit2;bit1;bit1;bit1;bit1;"
      "bit2;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_hdr_PREPTAG = T;
    CCMA_nT_hdr_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_hdr_PREPTAG;
  return CCMA_T_hdr_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_hdr(void *T);
extern int CCMA_Unpack_T_hdr(void *T);
extern int CCMA_Sel_T_hdr(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, hdr);
PrePutTable(CCMA, d, double, hdr);
PreLoadTable(CCMA, hdr);
PreStoreTable(CCMA, hdr);
extern void CCMA_Dim_T_hdr(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_hdr(void *T);
extern int CCMA_Sql_T_hdr(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_hdr(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_ensemble) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "ensemble" : appearance order#5, hierarchy rank# 6, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,nensemble);
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_1));
  DeclareDS(linklen_t,LINKLEN(enkf_1));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_2));
  DeclareDS(linklen_t,LINKLEN(enkf_2));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_3));
  DeclareDS(linklen_t,LINKLEN(enkf_3));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_4));
  DeclareDS(linklen_t,LINKLEN(enkf_4));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_5));
  DeclareDS(linklen_t,LINKLEN(enkf_5));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_6));
  DeclareDS(linklen_t,LINKLEN(enkf_6));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_7));
  DeclareDS(linklen_t,LINKLEN(enkf_7));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_8));
  DeclareDS(linklen_t,LINKLEN(enkf_8));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_9));
  DeclareDS(linklen_t,LINKLEN(enkf_9));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_10));
  DeclareDS(linklen_t,LINKLEN(enkf_10));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_11));
  DeclareDS(linklen_t,LINKLEN(enkf_11));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_12));
  DeclareDS(linklen_t,LINKLEN(enkf_12));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_13));
  DeclareDS(linklen_t,LINKLEN(enkf_13));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_14));
  DeclareDS(linklen_t,LINKLEN(enkf_14));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_15));
  DeclareDS(linklen_t,LINKLEN(enkf_15));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_16));
  DeclareDS(linklen_t,LINKLEN(enkf_16));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_17));
  DeclareDS(linklen_t,LINKLEN(enkf_17));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_18));
  DeclareDS(linklen_t,LINKLEN(enkf_18));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_19));
  DeclareDS(linklen_t,LINKLEN(enkf_19));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_20));
  DeclareDS(linklen_t,LINKLEN(enkf_20));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_21));
  DeclareDS(linklen_t,LINKLEN(enkf_21));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_22));
  DeclareDS(linklen_t,LINKLEN(enkf_22));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_23));
  DeclareDS(linklen_t,LINKLEN(enkf_23));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_24));
  DeclareDS(linklen_t,LINKLEN(enkf_24));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_25));
  DeclareDS(linklen_t,LINKLEN(enkf_25));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_26));
  DeclareDS(linklen_t,LINKLEN(enkf_26));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_27));
  DeclareDS(linklen_t,LINKLEN(enkf_27));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_28));
  DeclareDS(linklen_t,LINKLEN(enkf_28));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_29));
  DeclareDS(linklen_t,LINKLEN(enkf_29));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_30));
  DeclareDS(linklen_t,LINKLEN(enkf_30));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_31));
  DeclareDS(linklen_t,LINKLEN(enkf_31));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_32));
  DeclareDS(linklen_t,LINKLEN(enkf_32));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_33));
  DeclareDS(linklen_t,LINKLEN(enkf_33));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_34));
  DeclareDS(linklen_t,LINKLEN(enkf_34));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_35));
  DeclareDS(linklen_t,LINKLEN(enkf_35));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_36));
  DeclareDS(linklen_t,LINKLEN(enkf_36));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_37));
  DeclareDS(linklen_t,LINKLEN(enkf_37));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_38));
  DeclareDS(linklen_t,LINKLEN(enkf_38));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_39));
  DeclareDS(linklen_t,LINKLEN(enkf_39));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_40));
  DeclareDS(linklen_t,LINKLEN(enkf_40));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_41));
  DeclareDS(linklen_t,LINKLEN(enkf_41));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_42));
  DeclareDS(linklen_t,LINKLEN(enkf_42));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_43));
  DeclareDS(linklen_t,LINKLEN(enkf_43));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_44));
  DeclareDS(linklen_t,LINKLEN(enkf_44));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_45));
  DeclareDS(linklen_t,LINKLEN(enkf_45));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_46));
  DeclareDS(linklen_t,LINKLEN(enkf_46));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_47));
  DeclareDS(linklen_t,LINKLEN(enkf_47));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_48));
  DeclareDS(linklen_t,LINKLEN(enkf_48));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_49));
  DeclareDS(linklen_t,LINKLEN(enkf_49));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_50));
  DeclareDS(linklen_t,LINKLEN(enkf_50));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_51));
  DeclareDS(linklen_t,LINKLEN(enkf_51));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_52));
  DeclareDS(linklen_t,LINKLEN(enkf_52));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_53));
  DeclareDS(linklen_t,LINKLEN(enkf_53));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_54));
  DeclareDS(linklen_t,LINKLEN(enkf_54));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_55));
  DeclareDS(linklen_t,LINKLEN(enkf_55));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_56));
  DeclareDS(linklen_t,LINKLEN(enkf_56));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_57));
  DeclareDS(linklen_t,LINKLEN(enkf_57));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_58));
  DeclareDS(linklen_t,LINKLEN(enkf_58));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_59));
  DeclareDS(linklen_t,LINKLEN(enkf_59));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_60));
  DeclareDS(linklen_t,LINKLEN(enkf_60));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_61));
  DeclareDS(linklen_t,LINKLEN(enkf_61));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_62));
  DeclareDS(linklen_t,LINKLEN(enkf_62));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_63));
  DeclareDS(linklen_t,LINKLEN(enkf_63));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_64));
  DeclareDS(linklen_t,LINKLEN(enkf_64));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_65));
  DeclareDS(linklen_t,LINKLEN(enkf_65));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_66));
  DeclareDS(linklen_t,LINKLEN(enkf_66));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_67));
  DeclareDS(linklen_t,LINKLEN(enkf_67));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_68));
  DeclareDS(linklen_t,LINKLEN(enkf_68));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_69));
  DeclareDS(linklen_t,LINKLEN(enkf_69));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_70));
  DeclareDS(linklen_t,LINKLEN(enkf_70));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_71));
  DeclareDS(linklen_t,LINKLEN(enkf_71));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_72));
  DeclareDS(linklen_t,LINKLEN(enkf_72));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_73));
  DeclareDS(linklen_t,LINKLEN(enkf_73));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_74));
  DeclareDS(linklen_t,LINKLEN(enkf_74));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_75));
  DeclareDS(linklen_t,LINKLEN(enkf_75));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_76));
  DeclareDS(linklen_t,LINKLEN(enkf_76));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_77));
  DeclareDS(linklen_t,LINKLEN(enkf_77));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_78));
  DeclareDS(linklen_t,LINKLEN(enkf_78));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_79));
  DeclareDS(linklen_t,LINKLEN(enkf_79));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_80));
  DeclareDS(linklen_t,LINKLEN(enkf_80));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_81));
  DeclareDS(linklen_t,LINKLEN(enkf_81));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_82));
  DeclareDS(linklen_t,LINKLEN(enkf_82));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_83));
  DeclareDS(linklen_t,LINKLEN(enkf_83));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_84));
  DeclareDS(linklen_t,LINKLEN(enkf_84));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_85));
  DeclareDS(linklen_t,LINKLEN(enkf_85));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_86));
  DeclareDS(linklen_t,LINKLEN(enkf_86));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_87));
  DeclareDS(linklen_t,LINKLEN(enkf_87));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_88));
  DeclareDS(linklen_t,LINKLEN(enkf_88));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_89));
  DeclareDS(linklen_t,LINKLEN(enkf_89));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_90));
  DeclareDS(linklen_t,LINKLEN(enkf_90));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_91));
  DeclareDS(linklen_t,LINKLEN(enkf_91));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_92));
  DeclareDS(linklen_t,LINKLEN(enkf_92));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_93));
  DeclareDS(linklen_t,LINKLEN(enkf_93));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_94));
  DeclareDS(linklen_t,LINKLEN(enkf_94));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_95));
  DeclareDS(linklen_t,LINKLEN(enkf_95));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_96));
  DeclareDS(linklen_t,LINKLEN(enkf_96));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_97));
  DeclareDS(linklen_t,LINKLEN(enkf_97));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_98));
  DeclareDS(linklen_t,LINKLEN(enkf_98));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_99));
  DeclareDS(linklen_t,LINKLEN(enkf_99));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_100));
  DeclareDS(linklen_t,LINKLEN(enkf_100));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_101));
  DeclareDS(linklen_t,LINKLEN(enkf_101));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_102));
  DeclareDS(linklen_t,LINKLEN(enkf_102));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_103));
  DeclareDS(linklen_t,LINKLEN(enkf_103));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_104));
  DeclareDS(linklen_t,LINKLEN(enkf_104));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_105));
  DeclareDS(linklen_t,LINKLEN(enkf_105));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_106));
  DeclareDS(linklen_t,LINKLEN(enkf_106));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_107));
  DeclareDS(linklen_t,LINKLEN(enkf_107));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_108));
  DeclareDS(linklen_t,LINKLEN(enkf_108));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_109));
  DeclareDS(linklen_t,LINKLEN(enkf_109));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_110));
  DeclareDS(linklen_t,LINKLEN(enkf_110));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_111));
  DeclareDS(linklen_t,LINKLEN(enkf_111));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_112));
  DeclareDS(linklen_t,LINKLEN(enkf_112));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_113));
  DeclareDS(linklen_t,LINKLEN(enkf_113));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_114));
  DeclareDS(linklen_t,LINKLEN(enkf_114));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_115));
  DeclareDS(linklen_t,LINKLEN(enkf_115));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_116));
  DeclareDS(linklen_t,LINKLEN(enkf_116));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_117));
  DeclareDS(linklen_t,LINKLEN(enkf_117));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_118));
  DeclareDS(linklen_t,LINKLEN(enkf_118));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_119));
  DeclareDS(linklen_t,LINKLEN(enkf_119));
  DeclareDS(linkoffset_t,LINKOFFSET(enkf_120));
  DeclareDS(linklen_t,LINKLEN(enkf_120));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_1));
  DeclareDS(linklen_t,LINKLEN(enda_1));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_2));
  DeclareDS(linklen_t,LINKLEN(enda_2));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_3));
  DeclareDS(linklen_t,LINKLEN(enda_3));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_4));
  DeclareDS(linklen_t,LINKLEN(enda_4));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_5));
  DeclareDS(linklen_t,LINKLEN(enda_5));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_6));
  DeclareDS(linklen_t,LINKLEN(enda_6));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_7));
  DeclareDS(linklen_t,LINKLEN(enda_7));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_8));
  DeclareDS(linklen_t,LINKLEN(enda_8));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_9));
  DeclareDS(linklen_t,LINKLEN(enda_9));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_10));
  DeclareDS(linklen_t,LINKLEN(enda_10));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_11));
  DeclareDS(linklen_t,LINKLEN(enda_11));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_12));
  DeclareDS(linklen_t,LINKLEN(enda_12));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_13));
  DeclareDS(linklen_t,LINKLEN(enda_13));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_14));
  DeclareDS(linklen_t,LINKLEN(enda_14));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_15));
  DeclareDS(linklen_t,LINKLEN(enda_15));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_16));
  DeclareDS(linklen_t,LINKLEN(enda_16));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_17));
  DeclareDS(linklen_t,LINKLEN(enda_17));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_18));
  DeclareDS(linklen_t,LINKLEN(enda_18));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_19));
  DeclareDS(linklen_t,LINKLEN(enda_19));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_20));
  DeclareDS(linklen_t,LINKLEN(enda_20));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_21));
  DeclareDS(linklen_t,LINKLEN(enda_21));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_22));
  DeclareDS(linklen_t,LINKLEN(enda_22));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_23));
  DeclareDS(linklen_t,LINKLEN(enda_23));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_24));
  DeclareDS(linklen_t,LINKLEN(enda_24));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_25));
  DeclareDS(linklen_t,LINKLEN(enda_25));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_26));
  DeclareDS(linklen_t,LINKLEN(enda_26));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_27));
  DeclareDS(linklen_t,LINKLEN(enda_27));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_28));
  DeclareDS(linklen_t,LINKLEN(enda_28));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_29));
  DeclareDS(linklen_t,LINKLEN(enda_29));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_30));
  DeclareDS(linklen_t,LINKLEN(enda_30));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_31));
  DeclareDS(linklen_t,LINKLEN(enda_31));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_32));
  DeclareDS(linklen_t,LINKLEN(enda_32));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_33));
  DeclareDS(linklen_t,LINKLEN(enda_33));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_34));
  DeclareDS(linklen_t,LINKLEN(enda_34));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_35));
  DeclareDS(linklen_t,LINKLEN(enda_35));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_36));
  DeclareDS(linklen_t,LINKLEN(enda_36));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_37));
  DeclareDS(linklen_t,LINKLEN(enda_37));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_38));
  DeclareDS(linklen_t,LINKLEN(enda_38));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_39));
  DeclareDS(linklen_t,LINKLEN(enda_39));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_40));
  DeclareDS(linklen_t,LINKLEN(enda_40));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_41));
  DeclareDS(linklen_t,LINKLEN(enda_41));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_42));
  DeclareDS(linklen_t,LINKLEN(enda_42));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_43));
  DeclareDS(linklen_t,LINKLEN(enda_43));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_44));
  DeclareDS(linklen_t,LINKLEN(enda_44));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_45));
  DeclareDS(linklen_t,LINKLEN(enda_45));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_46));
  DeclareDS(linklen_t,LINKLEN(enda_46));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_47));
  DeclareDS(linklen_t,LINKLEN(enda_47));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_48));
  DeclareDS(linklen_t,LINKLEN(enda_48));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_49));
  DeclareDS(linklen_t,LINKLEN(enda_49));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_50));
  DeclareDS(linklen_t,LINKLEN(enda_50));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_51));
  DeclareDS(linklen_t,LINKLEN(enda_51));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_52));
  DeclareDS(linklen_t,LINKLEN(enda_52));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_53));
  DeclareDS(linklen_t,LINKLEN(enda_53));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_54));
  DeclareDS(linklen_t,LINKLEN(enda_54));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_55));
  DeclareDS(linklen_t,LINKLEN(enda_55));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_56));
  DeclareDS(linklen_t,LINKLEN(enda_56));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_57));
  DeclareDS(linklen_t,LINKLEN(enda_57));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_58));
  DeclareDS(linklen_t,LINKLEN(enda_58));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_59));
  DeclareDS(linklen_t,LINKLEN(enda_59));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_60));
  DeclareDS(linklen_t,LINKLEN(enda_60));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_61));
  DeclareDS(linklen_t,LINKLEN(enda_61));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_62));
  DeclareDS(linklen_t,LINKLEN(enda_62));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_63));
  DeclareDS(linklen_t,LINKLEN(enda_63));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_64));
  DeclareDS(linklen_t,LINKLEN(enda_64));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_65));
  DeclareDS(linklen_t,LINKLEN(enda_65));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_66));
  DeclareDS(linklen_t,LINKLEN(enda_66));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_67));
  DeclareDS(linklen_t,LINKLEN(enda_67));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_68));
  DeclareDS(linklen_t,LINKLEN(enda_68));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_69));
  DeclareDS(linklen_t,LINKLEN(enda_69));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_70));
  DeclareDS(linklen_t,LINKLEN(enda_70));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_71));
  DeclareDS(linklen_t,LINKLEN(enda_71));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_72));
  DeclareDS(linklen_t,LINKLEN(enda_72));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_73));
  DeclareDS(linklen_t,LINKLEN(enda_73));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_74));
  DeclareDS(linklen_t,LINKLEN(enda_74));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_75));
  DeclareDS(linklen_t,LINKLEN(enda_75));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_76));
  DeclareDS(linklen_t,LINKLEN(enda_76));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_77));
  DeclareDS(linklen_t,LINKLEN(enda_77));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_78));
  DeclareDS(linklen_t,LINKLEN(enda_78));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_79));
  DeclareDS(linklen_t,LINKLEN(enda_79));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_80));
  DeclareDS(linklen_t,LINKLEN(enda_80));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_81));
  DeclareDS(linklen_t,LINKLEN(enda_81));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_82));
  DeclareDS(linklen_t,LINKLEN(enda_82));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_83));
  DeclareDS(linklen_t,LINKLEN(enda_83));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_84));
  DeclareDS(linklen_t,LINKLEN(enda_84));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_85));
  DeclareDS(linklen_t,LINKLEN(enda_85));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_86));
  DeclareDS(linklen_t,LINKLEN(enda_86));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_87));
  DeclareDS(linklen_t,LINKLEN(enda_87));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_88));
  DeclareDS(linklen_t,LINKLEN(enda_88));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_89));
  DeclareDS(linklen_t,LINKLEN(enda_89));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_90));
  DeclareDS(linklen_t,LINKLEN(enda_90));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_91));
  DeclareDS(linklen_t,LINKLEN(enda_91));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_92));
  DeclareDS(linklen_t,LINKLEN(enda_92));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_93));
  DeclareDS(linklen_t,LINKLEN(enda_93));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_94));
  DeclareDS(linklen_t,LINKLEN(enda_94));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_95));
  DeclareDS(linklen_t,LINKLEN(enda_95));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_96));
  DeclareDS(linklen_t,LINKLEN(enda_96));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_97));
  DeclareDS(linklen_t,LINKLEN(enda_97));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_98));
  DeclareDS(linklen_t,LINKLEN(enda_98));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_99));
  DeclareDS(linklen_t,LINKLEN(enda_99));
  DeclareDS(linkoffset_t,LINKOFFSET(enda_100));
  DeclareDS(linklen_t,LINKLEN(enda_100));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_1));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_1));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_2));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_2));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_3));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_3));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_4));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_4));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_5));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_5));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_6));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_6));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_7));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_7));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_8));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_8));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_9));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_9));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_10));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_10));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_11));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_11));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_12));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_12));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_13));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_13));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_14));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_14));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_15));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_15));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_16));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_16));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_17));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_17));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_18));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_18));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_19));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_19));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_20));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_20));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_21));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_21));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_22));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_22));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_23));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_23));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_24));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_24));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_25));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_25));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_26));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_26));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_27));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_27));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_28));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_28));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_29));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_29));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_30));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_30));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_31));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_31));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_32));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_32));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_33));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_33));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_34));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_34));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_35));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_35));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_36));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_36));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_37));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_37));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_38));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_38));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_39));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_39));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_40));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_40));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_41));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_41));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_42));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_42));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_43));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_43));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_44));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_44));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_45));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_45));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_46));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_46));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_47));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_47));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_48));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_48));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_49));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_49));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_50));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_50));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_51));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_51));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_52));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_52));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_53));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_53));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_54));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_54));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_55));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_55));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_56));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_56));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_57));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_57));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_58));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_58));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_59));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_59));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_60));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_60));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_61));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_61));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_62));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_62));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_63));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_63));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_64));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_64));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_65));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_65));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_66));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_66));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_67));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_67));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_68));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_68));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_69));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_69));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_70));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_70));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_71));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_71));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_72));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_72));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_73));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_73));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_74));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_74));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_75));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_75));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_76));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_76));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_77));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_77));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_78));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_78));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_79));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_79));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_80));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_80));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_81));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_81));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_82));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_82));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_83));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_83));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_84));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_84));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_85));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_85));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_86));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_86));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_87));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_87));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_88));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_88));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_89));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_89));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_90));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_90));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_91));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_91));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_92));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_92));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_93));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_93));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_94));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_94));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_95));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_95));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_96));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_96));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_97));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_97));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_98));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_98));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_99));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_99));
  DeclareDS(linkoffset_t,LINKOFFSET(surfbody_feedback_100));
  DeclareDS(linklen_t,LINKLEN(surfbody_feedback_100));
} TABLE_ensemble;

#endif /* defined(IS_a_TABLE_ensemble) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_ensemble)
extern const ODB_Tags *CCMA_Set_T_ensemble_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_ensemble_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_ensemble_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_ensemble_PREPTAG = NULL;
PRIVATE int CCMA_nT_ensemble_TAG = 0;
PRIVATE int CCMA_nT_ensemble_PREPTAG = 0;
PRIVATE int CCMA_nT_ensemble_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_ensemble_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_ensemble_TAG) {
    int ntag = 641;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:nensemble@ensemble"; T[0].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_1)@ensemble"; T[1].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_1)@ensemble"; T[2].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_2)@ensemble"; T[3].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_2)@ensemble"; T[4].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_3)@ensemble"; T[5].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_3)@ensemble"; T[6].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_4)@ensemble"; T[7].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_4)@ensemble"; T[8].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_5)@ensemble"; T[9].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_5)@ensemble"; T[10].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_6)@ensemble"; T[11].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_6)@ensemble"; T[12].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_7)@ensemble"; T[13].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_7)@ensemble"; T[14].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_8)@ensemble"; T[15].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_8)@ensemble"; T[16].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_9)@ensemble"; T[17].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_9)@ensemble"; T[18].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_10)@ensemble"; T[19].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_10)@ensemble"; T[20].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_11)@ensemble"; T[21].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_11)@ensemble"; T[22].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_12)@ensemble"; T[23].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_12)@ensemble"; T[24].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_13)@ensemble"; T[25].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_13)@ensemble"; T[26].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_14)@ensemble"; T[27].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_14)@ensemble"; T[28].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_15)@ensemble"; T[29].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_15)@ensemble"; T[30].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_16)@ensemble"; T[31].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_16)@ensemble"; T[32].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_17)@ensemble"; T[33].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_17)@ensemble"; T[34].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_18)@ensemble"; T[35].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_18)@ensemble"; T[36].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_19)@ensemble"; T[37].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_19)@ensemble"; T[38].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_20)@ensemble"; T[39].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_20)@ensemble"; T[40].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_21)@ensemble"; T[41].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_21)@ensemble"; T[42].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_22)@ensemble"; T[43].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_22)@ensemble"; T[44].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_23)@ensemble"; T[45].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_23)@ensemble"; T[46].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_24)@ensemble"; T[47].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_24)@ensemble"; T[48].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_25)@ensemble"; T[49].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_25)@ensemble"; T[50].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_26)@ensemble"; T[51].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_26)@ensemble"; T[52].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_27)@ensemble"; T[53].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_27)@ensemble"; T[54].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_28)@ensemble"; T[55].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_28)@ensemble"; T[56].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_29)@ensemble"; T[57].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_29)@ensemble"; T[58].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_30)@ensemble"; T[59].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_30)@ensemble"; T[60].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_31)@ensemble"; T[61].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_31)@ensemble"; T[62].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_32)@ensemble"; T[63].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_32)@ensemble"; T[64].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_33)@ensemble"; T[65].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_33)@ensemble"; T[66].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_34)@ensemble"; T[67].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_34)@ensemble"; T[68].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_35)@ensemble"; T[69].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_35)@ensemble"; T[70].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_36)@ensemble"; T[71].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_36)@ensemble"; T[72].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_37)@ensemble"; T[73].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_37)@ensemble"; T[74].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_38)@ensemble"; T[75].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_38)@ensemble"; T[76].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_39)@ensemble"; T[77].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_39)@ensemble"; T[78].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_40)@ensemble"; T[79].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_40)@ensemble"; T[80].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_41)@ensemble"; T[81].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_41)@ensemble"; T[82].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_42)@ensemble"; T[83].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_42)@ensemble"; T[84].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_43)@ensemble"; T[85].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_43)@ensemble"; T[86].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_44)@ensemble"; T[87].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_44)@ensemble"; T[88].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_45)@ensemble"; T[89].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_45)@ensemble"; T[90].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_46)@ensemble"; T[91].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_46)@ensemble"; T[92].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_47)@ensemble"; T[93].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_47)@ensemble"; T[94].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_48)@ensemble"; T[95].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_48)@ensemble"; T[96].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_49)@ensemble"; T[97].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_49)@ensemble"; T[98].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_50)@ensemble"; T[99].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_50)@ensemble"; T[100].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_51)@ensemble"; T[101].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_51)@ensemble"; T[102].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_52)@ensemble"; T[103].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_52)@ensemble"; T[104].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_53)@ensemble"; T[105].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_53)@ensemble"; T[106].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_54)@ensemble"; T[107].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_54)@ensemble"; T[108].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_55)@ensemble"; T[109].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_55)@ensemble"; T[110].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_56)@ensemble"; T[111].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_56)@ensemble"; T[112].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_57)@ensemble"; T[113].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_57)@ensemble"; T[114].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_58)@ensemble"; T[115].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_58)@ensemble"; T[116].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_59)@ensemble"; T[117].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_59)@ensemble"; T[118].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_60)@ensemble"; T[119].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_60)@ensemble"; T[120].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_61)@ensemble"; T[121].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_61)@ensemble"; T[122].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_62)@ensemble"; T[123].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_62)@ensemble"; T[124].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_63)@ensemble"; T[125].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_63)@ensemble"; T[126].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_64)@ensemble"; T[127].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_64)@ensemble"; T[128].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_65)@ensemble"; T[129].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_65)@ensemble"; T[130].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_66)@ensemble"; T[131].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_66)@ensemble"; T[132].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_67)@ensemble"; T[133].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_67)@ensemble"; T[134].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_68)@ensemble"; T[135].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_68)@ensemble"; T[136].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_69)@ensemble"; T[137].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_69)@ensemble"; T[138].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_70)@ensemble"; T[139].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_70)@ensemble"; T[140].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_71)@ensemble"; T[141].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_71)@ensemble"; T[142].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_72)@ensemble"; T[143].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_72)@ensemble"; T[144].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_73)@ensemble"; T[145].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_73)@ensemble"; T[146].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_74)@ensemble"; T[147].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_74)@ensemble"; T[148].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_75)@ensemble"; T[149].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_75)@ensemble"; T[150].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_76)@ensemble"; T[151].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_76)@ensemble"; T[152].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_77)@ensemble"; T[153].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_77)@ensemble"; T[154].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_78)@ensemble"; T[155].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_78)@ensemble"; T[156].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_79)@ensemble"; T[157].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_79)@ensemble"; T[158].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_80)@ensemble"; T[159].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_80)@ensemble"; T[160].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_81)@ensemble"; T[161].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_81)@ensemble"; T[162].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_82)@ensemble"; T[163].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_82)@ensemble"; T[164].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_83)@ensemble"; T[165].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_83)@ensemble"; T[166].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_84)@ensemble"; T[167].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_84)@ensemble"; T[168].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_85)@ensemble"; T[169].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_85)@ensemble"; T[170].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_86)@ensemble"; T[171].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_86)@ensemble"; T[172].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_87)@ensemble"; T[173].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_87)@ensemble"; T[174].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_88)@ensemble"; T[175].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_88)@ensemble"; T[176].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_89)@ensemble"; T[177].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_89)@ensemble"; T[178].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_90)@ensemble"; T[179].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_90)@ensemble"; T[180].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_91)@ensemble"; T[181].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_91)@ensemble"; T[182].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_92)@ensemble"; T[183].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_92)@ensemble"; T[184].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_93)@ensemble"; T[185].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_93)@ensemble"; T[186].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_94)@ensemble"; T[187].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_94)@ensemble"; T[188].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_95)@ensemble"; T[189].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_95)@ensemble"; T[190].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_96)@ensemble"; T[191].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_96)@ensemble"; T[192].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_97)@ensemble"; T[193].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_97)@ensemble"; T[194].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_98)@ensemble"; T[195].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_98)@ensemble"; T[196].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_99)@ensemble"; T[197].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_99)@ensemble"; T[198].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_100)@ensemble"; T[199].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_100)@ensemble"; T[200].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_101)@ensemble"; T[201].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_101)@ensemble"; T[202].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_102)@ensemble"; T[203].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_102)@ensemble"; T[204].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_103)@ensemble"; T[205].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_103)@ensemble"; T[206].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_104)@ensemble"; T[207].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_104)@ensemble"; T[208].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_105)@ensemble"; T[209].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_105)@ensemble"; T[210].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_106)@ensemble"; T[211].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_106)@ensemble"; T[212].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_107)@ensemble"; T[213].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_107)@ensemble"; T[214].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_108)@ensemble"; T[215].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_108)@ensemble"; T[216].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_109)@ensemble"; T[217].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_109)@ensemble"; T[218].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_110)@ensemble"; T[219].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_110)@ensemble"; T[220].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_111)@ensemble"; T[221].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_111)@ensemble"; T[222].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_112)@ensemble"; T[223].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_112)@ensemble"; T[224].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_113)@ensemble"; T[225].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_113)@ensemble"; T[226].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_114)@ensemble"; T[227].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_114)@ensemble"; T[228].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_115)@ensemble"; T[229].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_115)@ensemble"; T[230].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_116)@ensemble"; T[231].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_116)@ensemble"; T[232].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_117)@ensemble"; T[233].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_117)@ensemble"; T[234].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_118)@ensemble"; T[235].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_118)@ensemble"; T[236].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_119)@ensemble"; T[237].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_119)@ensemble"; T[238].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enkf_120)@ensemble"; T[239].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enkf_120)@ensemble"; T[240].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_1)@ensemble"; T[241].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_1)@ensemble"; T[242].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_2)@ensemble"; T[243].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_2)@ensemble"; T[244].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_3)@ensemble"; T[245].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_3)@ensemble"; T[246].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_4)@ensemble"; T[247].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_4)@ensemble"; T[248].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_5)@ensemble"; T[249].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_5)@ensemble"; T[250].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_6)@ensemble"; T[251].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_6)@ensemble"; T[252].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_7)@ensemble"; T[253].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_7)@ensemble"; T[254].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_8)@ensemble"; T[255].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_8)@ensemble"; T[256].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_9)@ensemble"; T[257].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_9)@ensemble"; T[258].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_10)@ensemble"; T[259].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_10)@ensemble"; T[260].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_11)@ensemble"; T[261].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_11)@ensemble"; T[262].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_12)@ensemble"; T[263].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_12)@ensemble"; T[264].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_13)@ensemble"; T[265].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_13)@ensemble"; T[266].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_14)@ensemble"; T[267].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_14)@ensemble"; T[268].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_15)@ensemble"; T[269].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_15)@ensemble"; T[270].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_16)@ensemble"; T[271].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_16)@ensemble"; T[272].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_17)@ensemble"; T[273].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_17)@ensemble"; T[274].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_18)@ensemble"; T[275].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_18)@ensemble"; T[276].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_19)@ensemble"; T[277].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_19)@ensemble"; T[278].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_20)@ensemble"; T[279].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_20)@ensemble"; T[280].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_21)@ensemble"; T[281].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_21)@ensemble"; T[282].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_22)@ensemble"; T[283].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_22)@ensemble"; T[284].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_23)@ensemble"; T[285].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_23)@ensemble"; T[286].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_24)@ensemble"; T[287].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_24)@ensemble"; T[288].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_25)@ensemble"; T[289].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_25)@ensemble"; T[290].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_26)@ensemble"; T[291].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_26)@ensemble"; T[292].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_27)@ensemble"; T[293].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_27)@ensemble"; T[294].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_28)@ensemble"; T[295].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_28)@ensemble"; T[296].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_29)@ensemble"; T[297].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_29)@ensemble"; T[298].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_30)@ensemble"; T[299].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_30)@ensemble"; T[300].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_31)@ensemble"; T[301].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_31)@ensemble"; T[302].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_32)@ensemble"; T[303].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_32)@ensemble"; T[304].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_33)@ensemble"; T[305].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_33)@ensemble"; T[306].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_34)@ensemble"; T[307].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_34)@ensemble"; T[308].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_35)@ensemble"; T[309].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_35)@ensemble"; T[310].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_36)@ensemble"; T[311].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_36)@ensemble"; T[312].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_37)@ensemble"; T[313].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_37)@ensemble"; T[314].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_38)@ensemble"; T[315].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_38)@ensemble"; T[316].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_39)@ensemble"; T[317].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_39)@ensemble"; T[318].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_40)@ensemble"; T[319].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_40)@ensemble"; T[320].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_41)@ensemble"; T[321].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_41)@ensemble"; T[322].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_42)@ensemble"; T[323].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_42)@ensemble"; T[324].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_43)@ensemble"; T[325].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_43)@ensemble"; T[326].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_44)@ensemble"; T[327].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_44)@ensemble"; T[328].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_45)@ensemble"; T[329].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_45)@ensemble"; T[330].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_46)@ensemble"; T[331].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_46)@ensemble"; T[332].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_47)@ensemble"; T[333].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_47)@ensemble"; T[334].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_48)@ensemble"; T[335].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_48)@ensemble"; T[336].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_49)@ensemble"; T[337].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_49)@ensemble"; T[338].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_50)@ensemble"; T[339].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_50)@ensemble"; T[340].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_51)@ensemble"; T[341].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_51)@ensemble"; T[342].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_52)@ensemble"; T[343].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_52)@ensemble"; T[344].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_53)@ensemble"; T[345].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_53)@ensemble"; T[346].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_54)@ensemble"; T[347].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_54)@ensemble"; T[348].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_55)@ensemble"; T[349].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_55)@ensemble"; T[350].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_56)@ensemble"; T[351].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_56)@ensemble"; T[352].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_57)@ensemble"; T[353].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_57)@ensemble"; T[354].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_58)@ensemble"; T[355].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_58)@ensemble"; T[356].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_59)@ensemble"; T[357].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_59)@ensemble"; T[358].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_60)@ensemble"; T[359].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_60)@ensemble"; T[360].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_61)@ensemble"; T[361].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_61)@ensemble"; T[362].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_62)@ensemble"; T[363].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_62)@ensemble"; T[364].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_63)@ensemble"; T[365].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_63)@ensemble"; T[366].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_64)@ensemble"; T[367].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_64)@ensemble"; T[368].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_65)@ensemble"; T[369].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_65)@ensemble"; T[370].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_66)@ensemble"; T[371].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_66)@ensemble"; T[372].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_67)@ensemble"; T[373].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_67)@ensemble"; T[374].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_68)@ensemble"; T[375].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_68)@ensemble"; T[376].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_69)@ensemble"; T[377].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_69)@ensemble"; T[378].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_70)@ensemble"; T[379].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_70)@ensemble"; T[380].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_71)@ensemble"; T[381].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_71)@ensemble"; T[382].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_72)@ensemble"; T[383].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_72)@ensemble"; T[384].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_73)@ensemble"; T[385].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_73)@ensemble"; T[386].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_74)@ensemble"; T[387].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_74)@ensemble"; T[388].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_75)@ensemble"; T[389].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_75)@ensemble"; T[390].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_76)@ensemble"; T[391].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_76)@ensemble"; T[392].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_77)@ensemble"; T[393].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_77)@ensemble"; T[394].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_78)@ensemble"; T[395].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_78)@ensemble"; T[396].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_79)@ensemble"; T[397].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_79)@ensemble"; T[398].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_80)@ensemble"; T[399].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_80)@ensemble"; T[400].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_81)@ensemble"; T[401].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_81)@ensemble"; T[402].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_82)@ensemble"; T[403].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_82)@ensemble"; T[404].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_83)@ensemble"; T[405].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_83)@ensemble"; T[406].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_84)@ensemble"; T[407].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_84)@ensemble"; T[408].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_85)@ensemble"; T[409].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_85)@ensemble"; T[410].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_86)@ensemble"; T[411].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_86)@ensemble"; T[412].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_87)@ensemble"; T[413].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_87)@ensemble"; T[414].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_88)@ensemble"; T[415].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_88)@ensemble"; T[416].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_89)@ensemble"; T[417].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_89)@ensemble"; T[418].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_90)@ensemble"; T[419].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_90)@ensemble"; T[420].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_91)@ensemble"; T[421].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_91)@ensemble"; T[422].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_92)@ensemble"; T[423].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_92)@ensemble"; T[424].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_93)@ensemble"; T[425].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_93)@ensemble"; T[426].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_94)@ensemble"; T[427].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_94)@ensemble"; T[428].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_95)@ensemble"; T[429].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_95)@ensemble"; T[430].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_96)@ensemble"; T[431].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_96)@ensemble"; T[432].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_97)@ensemble"; T[433].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_97)@ensemble"; T[434].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_98)@ensemble"; T[435].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_98)@ensemble"; T[436].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_99)@ensemble"; T[437].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_99)@ensemble"; T[438].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(enda_100)@ensemble"; T[439].name = s; }
    { static char s[] = "linklen_t:LINKLEN(enda_100)@ensemble"; T[440].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_1)@ensemble"; T[441].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_1)@ensemble"; T[442].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_2)@ensemble"; T[443].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_2)@ensemble"; T[444].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_3)@ensemble"; T[445].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_3)@ensemble"; T[446].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_4)@ensemble"; T[447].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_4)@ensemble"; T[448].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_5)@ensemble"; T[449].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_5)@ensemble"; T[450].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_6)@ensemble"; T[451].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_6)@ensemble"; T[452].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_7)@ensemble"; T[453].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_7)@ensemble"; T[454].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_8)@ensemble"; T[455].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_8)@ensemble"; T[456].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_9)@ensemble"; T[457].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_9)@ensemble"; T[458].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_10)@ensemble"; T[459].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_10)@ensemble"; T[460].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_11)@ensemble"; T[461].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_11)@ensemble"; T[462].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_12)@ensemble"; T[463].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_12)@ensemble"; T[464].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_13)@ensemble"; T[465].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_13)@ensemble"; T[466].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_14)@ensemble"; T[467].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_14)@ensemble"; T[468].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_15)@ensemble"; T[469].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_15)@ensemble"; T[470].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_16)@ensemble"; T[471].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_16)@ensemble"; T[472].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_17)@ensemble"; T[473].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_17)@ensemble"; T[474].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_18)@ensemble"; T[475].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_18)@ensemble"; T[476].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_19)@ensemble"; T[477].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_19)@ensemble"; T[478].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_20)@ensemble"; T[479].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_20)@ensemble"; T[480].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_21)@ensemble"; T[481].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_21)@ensemble"; T[482].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_22)@ensemble"; T[483].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_22)@ensemble"; T[484].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_23)@ensemble"; T[485].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_23)@ensemble"; T[486].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_24)@ensemble"; T[487].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_24)@ensemble"; T[488].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_25)@ensemble"; T[489].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_25)@ensemble"; T[490].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_26)@ensemble"; T[491].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_26)@ensemble"; T[492].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_27)@ensemble"; T[493].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_27)@ensemble"; T[494].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_28)@ensemble"; T[495].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_28)@ensemble"; T[496].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_29)@ensemble"; T[497].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_29)@ensemble"; T[498].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_30)@ensemble"; T[499].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_30)@ensemble"; T[500].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_31)@ensemble"; T[501].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_31)@ensemble"; T[502].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_32)@ensemble"; T[503].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_32)@ensemble"; T[504].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_33)@ensemble"; T[505].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_33)@ensemble"; T[506].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_34)@ensemble"; T[507].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_34)@ensemble"; T[508].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_35)@ensemble"; T[509].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_35)@ensemble"; T[510].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_36)@ensemble"; T[511].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_36)@ensemble"; T[512].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_37)@ensemble"; T[513].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_37)@ensemble"; T[514].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_38)@ensemble"; T[515].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_38)@ensemble"; T[516].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_39)@ensemble"; T[517].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_39)@ensemble"; T[518].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_40)@ensemble"; T[519].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_40)@ensemble"; T[520].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_41)@ensemble"; T[521].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_41)@ensemble"; T[522].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_42)@ensemble"; T[523].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_42)@ensemble"; T[524].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_43)@ensemble"; T[525].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_43)@ensemble"; T[526].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_44)@ensemble"; T[527].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_44)@ensemble"; T[528].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_45)@ensemble"; T[529].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_45)@ensemble"; T[530].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_46)@ensemble"; T[531].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_46)@ensemble"; T[532].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_47)@ensemble"; T[533].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_47)@ensemble"; T[534].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_48)@ensemble"; T[535].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_48)@ensemble"; T[536].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_49)@ensemble"; T[537].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_49)@ensemble"; T[538].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_50)@ensemble"; T[539].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_50)@ensemble"; T[540].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_51)@ensemble"; T[541].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_51)@ensemble"; T[542].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_52)@ensemble"; T[543].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_52)@ensemble"; T[544].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_53)@ensemble"; T[545].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_53)@ensemble"; T[546].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_54)@ensemble"; T[547].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_54)@ensemble"; T[548].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_55)@ensemble"; T[549].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_55)@ensemble"; T[550].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_56)@ensemble"; T[551].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_56)@ensemble"; T[552].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_57)@ensemble"; T[553].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_57)@ensemble"; T[554].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_58)@ensemble"; T[555].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_58)@ensemble"; T[556].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_59)@ensemble"; T[557].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_59)@ensemble"; T[558].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_60)@ensemble"; T[559].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_60)@ensemble"; T[560].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_61)@ensemble"; T[561].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_61)@ensemble"; T[562].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_62)@ensemble"; T[563].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_62)@ensemble"; T[564].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_63)@ensemble"; T[565].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_63)@ensemble"; T[566].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_64)@ensemble"; T[567].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_64)@ensemble"; T[568].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_65)@ensemble"; T[569].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_65)@ensemble"; T[570].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_66)@ensemble"; T[571].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_66)@ensemble"; T[572].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_67)@ensemble"; T[573].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_67)@ensemble"; T[574].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_68)@ensemble"; T[575].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_68)@ensemble"; T[576].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_69)@ensemble"; T[577].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_69)@ensemble"; T[578].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_70)@ensemble"; T[579].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_70)@ensemble"; T[580].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_71)@ensemble"; T[581].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_71)@ensemble"; T[582].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_72)@ensemble"; T[583].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_72)@ensemble"; T[584].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_73)@ensemble"; T[585].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_73)@ensemble"; T[586].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_74)@ensemble"; T[587].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_74)@ensemble"; T[588].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_75)@ensemble"; T[589].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_75)@ensemble"; T[590].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_76)@ensemble"; T[591].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_76)@ensemble"; T[592].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_77)@ensemble"; T[593].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_77)@ensemble"; T[594].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_78)@ensemble"; T[595].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_78)@ensemble"; T[596].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_79)@ensemble"; T[597].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_79)@ensemble"; T[598].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_80)@ensemble"; T[599].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_80)@ensemble"; T[600].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_81)@ensemble"; T[601].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_81)@ensemble"; T[602].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_82)@ensemble"; T[603].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_82)@ensemble"; T[604].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_83)@ensemble"; T[605].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_83)@ensemble"; T[606].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_84)@ensemble"; T[607].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_84)@ensemble"; T[608].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_85)@ensemble"; T[609].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_85)@ensemble"; T[610].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_86)@ensemble"; T[611].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_86)@ensemble"; T[612].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_87)@ensemble"; T[613].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_87)@ensemble"; T[614].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_88)@ensemble"; T[615].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_88)@ensemble"; T[616].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_89)@ensemble"; T[617].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_89)@ensemble"; T[618].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_90)@ensemble"; T[619].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_90)@ensemble"; T[620].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_91)@ensemble"; T[621].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_91)@ensemble"; T[622].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_92)@ensemble"; T[623].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_92)@ensemble"; T[624].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_93)@ensemble"; T[625].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_93)@ensemble"; T[626].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_94)@ensemble"; T[627].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_94)@ensemble"; T[628].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_95)@ensemble"; T[629].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_95)@ensemble"; T[630].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_96)@ensemble"; T[631].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_96)@ensemble"; T[632].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_97)@ensemble"; T[633].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_97)@ensemble"; T[634].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_98)@ensemble"; T[635].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_98)@ensemble"; T[636].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_99)@ensemble"; T[637].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_99)@ensemble"; T[638].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(surfbody_feedback_100)@ensemble"; T[639].name = s; }
    { static char s[] = "linklen_t:LINKLEN(surfbody_feedback_100)@ensemble"; T[640].name = s; }
    CCMA_T_ensemble_TAG = T;
    CCMA_nT_ensemble_TAG = ntag;
    CCMA_nT_ensemble_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_ensemble_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_ensemble_MEM;
  return CCMA_T_ensemble_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_ensemble_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_ensemble_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 20212;
    { static char s[] =
      ";nensemble@ensemble;LINKOFFSET(enkf_1)@ensemble;LINKLEN(enkf_1)@ensemble;"
      "LINKOFFSET(enkf_2)@ensemble;LINKLEN(enkf_2)@ensemble;"
      "LINKOFFSET(enkf_3)@ensemble;LINKLEN(enkf_3)@ensemble;"
      "LINKOFFSET(enkf_4)@ensemble;LINKLEN(enkf_4)@ensemble;"
      "LINKOFFSET(enkf_5)@ensemble;LINKLEN(enkf_5)@ensemble;"
      "LINKOFFSET(enkf_6)@ensemble;LINKLEN(enkf_6)@ensemble;"
      "LINKOFFSET(enkf_7)@ensemble;LINKLEN(enkf_7)@ensemble;"
      "LINKOFFSET(enkf_8)@ensemble;LINKLEN(enkf_8)@ensemble;"
      "LINKOFFSET(enkf_9)@ensemble;LINKLEN(enkf_9)@ensemble;"
      "LINKOFFSET(enkf_10)@ensemble;LINKLEN(enkf_10)@ensemble;"
      "LINKOFFSET(enkf_11)@ensemble;LINKLEN(enkf_11)@ensemble;"
      "LINKOFFSET(enkf_12)@ensemble;LINKLEN(enkf_12)@ensemble;"
      "LINKOFFSET(enkf_13)@ensemble;LINKLEN(enkf_13)@ensemble;"
      "LINKOFFSET(enkf_14)@ensemble;LINKLEN(enkf_14)@ensemble;"
      "LINKOFFSET(enkf_15)@ensemble;LINKLEN(enkf_15)@ensemble;"
      "LINKOFFSET(enkf_16)@ensemble;LINKLEN(enkf_16)@ensemble;"
      "LINKOFFSET(enkf_17)@ensemble;LINKLEN(enkf_17)@ensemble;"
      "LINKOFFSET(enkf_18)@ensemble;LINKLEN(enkf_18)@ensemble;"
      "LINKOFFSET(enkf_19)@ensemble;LINKLEN(enkf_19)@ensemble;"
      "LINKOFFSET(enkf_20)@ensemble;LINKLEN(enkf_20)@ensemble;"
      "LINKOFFSET(enkf_21)@ensemble;LINKLEN(enkf_21)@ensemble;"
      "LINKOFFSET(enkf_22)@ensemble;LINKLEN(enkf_22)@ensemble;"
      "LINKOFFSET(enkf_23)@ensemble;LINKLEN(enkf_23)@ensemble;"
      "LINKOFFSET(enkf_24)@ensemble;LINKLEN(enkf_24)@ensemble;"
      "LINKOFFSET(enkf_25)@ensemble;LINKLEN(enkf_25)@ensemble;"
      "LINKOFFSET(enkf_26)@ensemble;LINKLEN(enkf_26)@ensemble;"
      "LINKOFFSET(enkf_27)@ensemble;LINKLEN(enkf_27)@ensemble;"
      "LINKOFFSET(enkf_28)@ensemble;LINKLEN(enkf_28)@ensemble;"
      "LINKOFFSET(enkf_29)@ensemble;LINKLEN(enkf_29)@ensemble;"
      "LINKOFFSET(enkf_30)@ensemble;LINKLEN(enkf_30)@ensemble;"
      "LINKOFFSET(enkf_31)@ensemble;LINKLEN(enkf_31)@ensemble;"
      "LINKOFFSET(enkf_32)@ensemble;LINKLEN(enkf_32)@ensemble;"
      "LINKOFFSET(enkf_33)@ensemble;LINKLEN(enkf_33)@ensemble;"
      "LINKOFFSET(enkf_34)@ensemble;LINKLEN(enkf_34)@ensemble;"
      "LINKOFFSET(enkf_35)@ensemble;LINKLEN(enkf_35)@ensemble;"
      "LINKOFFSET(enkf_36)@ensemble;LINKLEN(enkf_36)@ensemble;"
      "LINKOFFSET(enkf_37)@ensemble;LINKLEN(enkf_37)@ensemble;"
      "LINKOFFSET(enkf_38)@ensemble;LINKLEN(enkf_38)@ensemble;"
      "LINKOFFSET(enkf_39)@ensemble;LINKLEN(enkf_39)@ensemble;"
      "LINKOFFSET(enkf_40)@ensemble;LINKLEN(enkf_40)@ensemble;"
      "LINKOFFSET(enkf_41)@ensemble;LINKLEN(enkf_41)@ensemble;"
      "LINKOFFSET(enkf_42)@ensemble;LINKLEN(enkf_42)@ensemble;"
      "LINKOFFSET(enkf_43)@ensemble;LINKLEN(enkf_43)@ensemble;"
      "LINKOFFSET(enkf_44)@ensemble;LINKLEN(enkf_44)@ensemble;"
      "LINKOFFSET(enkf_45)@ensemble;LINKLEN(enkf_45)@ensemble;"
      "LINKOFFSET(enkf_46)@ensemble;LINKLEN(enkf_46)@ensemble;"
      "LINKOFFSET(enkf_47)@ensemble;LINKLEN(enkf_47)@ensemble;"
      "LINKOFFSET(enkf_48)@ensemble;LINKLEN(enkf_48)@ensemble;"
      "LINKOFFSET(enkf_49)@ensemble;LINKLEN(enkf_49)@ensemble;"
      "LINKOFFSET(enkf_50)@ensemble;LINKLEN(enkf_50)@ensemble;"
      "LINKOFFSET(enkf_51)@ensemble;LINKLEN(enkf_51)@ensemble;"
      "LINKOFFSET(enkf_52)@ensemble;LINKLEN(enkf_52)@ensemble;"
      "LINKOFFSET(enkf_53)@ensemble;LINKLEN(enkf_53)@ensemble;"
      "LINKOFFSET(enkf_54)@ensemble;LINKLEN(enkf_54)@ensemble;"
      "LINKOFFSET(enkf_55)@ensemble;LINKLEN(enkf_55)@ensemble;"
      "LINKOFFSET(enkf_56)@ensemble;LINKLEN(enkf_56)@ensemble;"
      "LINKOFFSET(enkf_57)@ensemble;LINKLEN(enkf_57)@ensemble;"
      "LINKOFFSET(enkf_58)@ensemble;LINKLEN(enkf_58)@ensemble;"
      "LINKOFFSET(enkf_59)@ensemble;LINKLEN(enkf_59)@ensemble;"
      "LINKOFFSET(enkf_60)@ensemble;LINKLEN(enkf_60)@ensemble;"
      "LINKOFFSET(enkf_61)@ensemble;LINKLEN(enkf_61)@ensemble;"
      "LINKOFFSET(enkf_62)@ensemble;LINKLEN(enkf_62)@ensemble;"
      "LINKOFFSET(enkf_63)@ensemble;LINKLEN(enkf_63)@ensemble;"
      "LINKOFFSET(enkf_64)@ensemble;LINKLEN(enkf_64)@ensemble;"
      "LINKOFFSET(enkf_65)@ensemble;LINKLEN(enkf_65)@ensemble;"
      "LINKOFFSET(enkf_66)@ensemble;LINKLEN(enkf_66)@ensemble;"
      "LINKOFFSET(enkf_67)@ensemble;LINKLEN(enkf_67)@ensemble;"
      "LINKOFFSET(enkf_68)@ensemble;LINKLEN(enkf_68)@ensemble;"
      "LINKOFFSET(enkf_69)@ensemble;LINKLEN(enkf_69)@ensemble;"
      "LINKOFFSET(enkf_70)@ensemble;LINKLEN(enkf_70)@ensemble;"
      "LINKOFFSET(enkf_71)@ensemble;LINKLEN(enkf_71)@ensemble;"
      "LINKOFFSET(enkf_72)@ensemble;LINKLEN(enkf_72)@ensemble;"
      "LINKOFFSET(enkf_73)@ensemble;LINKLEN(enkf_73)@ensemble;"
      "LINKOFFSET(enkf_74)@ensemble;LINKLEN(enkf_74)@ensemble;"
      "LINKOFFSET(enkf_75)@ensemble;LINKLEN(enkf_75)@ensemble;"
      "LINKOFFSET(enkf_76)@ensemble;LINKLEN(enkf_76)@ensemble;"
      "LINKOFFSET(enkf_77)@ensemble;LINKLEN(enkf_77)@ensemble;"
      "LINKOFFSET(enkf_78)@ensemble;LINKLEN(enkf_78)@ensemble;"
      "LINKOFFSET(enkf_79)@ensemble;LINKLEN(enkf_79)@ensemble;"
      "LINKOFFSET(enkf_80)@ensemble;LINKLEN(enkf_80)@ensemble;"
      "LINKOFFSET(enkf_81)@ensemble;LINKLEN(enkf_81)@ensemble;"
      "LINKOFFSET(enkf_82)@ensemble;LINKLEN(enkf_82)@ensemble;"
      "LINKOFFSET(enkf_83)@ensemble;LINKLEN(enkf_83)@ensemble;"
      "LINKOFFSET(enkf_84)@ensemble;LINKLEN(enkf_84)@ensemble;"
      "LINKOFFSET(enkf_85)@ensemble;LINKLEN(enkf_85)@ensemble;"
      "LINKOFFSET(enkf_86)@ensemble;LINKLEN(enkf_86)@ensemble;"
      "LINKOFFSET(enkf_87)@ensemble;LINKLEN(enkf_87)@ensemble;"
      "LINKOFFSET(enkf_88)@ensemble;LINKLEN(enkf_88)@ensemble;"
      "LINKOFFSET(enkf_89)@ensemble;LINKLEN(enkf_89)@ensemble;"
      "LINKOFFSET(enkf_90)@ensemble;LINKLEN(enkf_90)@ensemble;"
      "LINKOFFSET(enkf_91)@ensemble;LINKLEN(enkf_91)@ensemble;"
      "LINKOFFSET(enkf_92)@ensemble;LINKLEN(enkf_92)@ensemble;"
      "LINKOFFSET(enkf_93)@ensemble;LINKLEN(enkf_93)@ensemble;"
      "LINKOFFSET(enkf_94)@ensemble;LINKLEN(enkf_94)@ensemble;"
      "LINKOFFSET(enkf_95)@ensemble;LINKLEN(enkf_95)@ensemble;"
      "LINKOFFSET(enkf_96)@ensemble;LINKLEN(enkf_96)@ensemble;"
      "LINKOFFSET(enkf_97)@ensemble;LINKLEN(enkf_97)@ensemble;"
      "LINKOFFSET(enkf_98)@ensemble;LINKLEN(enkf_98)@ensemble;"
      "LINKOFFSET(enkf_99)@ensemble;LINKLEN(enkf_99)@ensemble;"
      "LINKOFFSET(enkf_100)@ensemble;LINKLEN(enkf_100)@ensemble;"
      "LINKOFFSET(enkf_101)@ensemble;LINKLEN(enkf_101)@ensemble;"
      "LINKOFFSET(enkf_102)@ensemble;LINKLEN(enkf_102)@ensemble;"
      "LINKOFFSET(enkf_103)@ensemble;LINKLEN(enkf_103)@ensemble;"
      "LINKOFFSET(enkf_104)@ensemble;LINKLEN(enkf_104)@ensemble;"
      "LINKOFFSET(enkf_105)@ensemble;LINKLEN(enkf_105)@ensemble;"
      "LINKOFFSET(enkf_106)@ensemble;LINKLEN(enkf_106)@ensemble;"
      "LINKOFFSET(enkf_107)@ensemble;LINKLEN(enkf_107)@ensemble;"
      "LINKOFFSET(enkf_108)@ensemble;LINKLEN(enkf_108)@ensemble;"
      "LINKOFFSET(enkf_109)@ensemble;LINKLEN(enkf_109)@ensemble;"
      "LINKOFFSET(enkf_110)@ensemble;LINKLEN(enkf_110)@ensemble;"
      "LINKOFFSET(enkf_111)@ensemble;LINKLEN(enkf_111)@ensemble;"
      "LINKOFFSET(enkf_112)@ensemble;LINKLEN(enkf_112)@ensemble;"
      "LINKOFFSET(enkf_113)@ensemble;LINKLEN(enkf_113)@ensemble;"
      "LINKOFFSET(enkf_114)@ensemble;LINKLEN(enkf_114)@ensemble;"
      "LINKOFFSET(enkf_115)@ensemble;LINKLEN(enkf_115)@ensemble;"
      "LINKOFFSET(enkf_116)@ensemble;LINKLEN(enkf_116)@ensemble;"
      "LINKOFFSET(enkf_117)@ensemble;LINKLEN(enkf_117)@ensemble;"
      "LINKOFFSET(enkf_118)@ensemble;LINKLEN(enkf_118)@ensemble;"
      "LINKOFFSET(enkf_119)@ensemble;LINKLEN(enkf_119)@ensemble;"
      "LINKOFFSET(enkf_120)@ensemble;LINKLEN(enkf_120)@ensemble;"
      "LINKOFFSET(enda_1)@ensemble;LINKLEN(enda_1)@ensemble;"
      "LINKOFFSET(enda_2)@ensemble;LINKLEN(enda_2)@ensemble;"
      "LINKOFFSET(enda_3)@ensemble;LINKLEN(enda_3)@ensemble;"
      "LINKOFFSET(enda_4)@ensemble;LINKLEN(enda_4)@ensemble;"
      "LINKOFFSET(enda_5)@ensemble;LINKLEN(enda_5)@ensemble;"
      "LINKOFFSET(enda_6)@ensemble;LINKLEN(enda_6)@ensemble;"
      "LINKOFFSET(enda_7)@ensemble;LINKLEN(enda_7)@ensemble;"
      "LINKOFFSET(enda_8)@ensemble;LINKLEN(enda_8)@ensemble;"
      "LINKOFFSET(enda_9)@ensemble;LINKLEN(enda_9)@ensemble;"
      "LINKOFFSET(enda_10)@ensemble;LINKLEN(enda_10)@ensemble;"
      "LINKOFFSET(enda_11)@ensemble;LINKLEN(enda_11)@ensemble;"
      "LINKOFFSET(enda_12)@ensemble;LINKLEN(enda_12)@ensemble;"
      "LINKOFFSET(enda_13)@ensemble;LINKLEN(enda_13)@ensemble;"
      "LINKOFFSET(enda_14)@ensemble;LINKLEN(enda_14)@ensemble;"
      "LINKOFFSET(enda_15)@ensemble;LINKLEN(enda_15)@ensemble;"
      "LINKOFFSET(enda_16)@ensemble;LINKLEN(enda_16)@ensemble;"
      "LINKOFFSET(enda_17)@ensemble;LINKLEN(enda_17)@ensemble;"
      "LINKOFFSET(enda_18)@ensemble;LINKLEN(enda_18)@ensemble;"
      "LINKOFFSET(enda_19)@ensemble;LINKLEN(enda_19)@ensemble;"
      "LINKOFFSET(enda_20)@ensemble;LINKLEN(enda_20)@ensemble;"
      "LINKOFFSET(enda_21)@ensemble;LINKLEN(enda_21)@ensemble;"
      "LINKOFFSET(enda_22)@ensemble;LINKLEN(enda_22)@ensemble;"
      "LINKOFFSET(enda_23)@ensemble;LINKLEN(enda_23)@ensemble;"
      "LINKOFFSET(enda_24)@ensemble;LINKLEN(enda_24)@ensemble;"
      "LINKOFFSET(enda_25)@ensemble;LINKLEN(enda_25)@ensemble;"
      "LINKOFFSET(enda_26)@ensemble;LINKLEN(enda_26)@ensemble;"
      "LINKOFFSET(enda_27)@ensemble;LINKLEN(enda_27)@ensemble;"
      "LINKOFFSET(enda_28)@ensemble;LINKLEN(enda_28)@ensemble;"
      "LINKOFFSET(enda_29)@ensemble;LINKLEN(enda_29)@ensemble;"
      "LINKOFFSET(enda_30)@ensemble;LINKLEN(enda_30)@ensemble;"
      "LINKOFFSET(enda_31)@ensemble;LINKLEN(enda_31)@ensemble;"
      "LINKOFFSET(enda_32)@ensemble;LINKLEN(enda_32)@ensemble;"
      "LINKOFFSET(enda_33)@ensemble;LINKLEN(enda_33)@ensemble;"
      "LINKOFFSET(enda_34)@ensemble;LINKLEN(enda_34)@ensemble;"
      "LINKOFFSET(enda_35)@ensemble;LINKLEN(enda_35)@ensemble;"
      "LINKOFFSET(enda_36)@ensemble;LINKLEN(enda_36)@ensemble;"
      "LINKOFFSET(enda_37)@ensemble;LINKLEN(enda_37)@ensemble;"
      "LINKOFFSET(enda_38)@ensemble;LINKLEN(enda_38)@ensemble;"
      "LINKOFFSET(enda_39)@ensemble;LINKLEN(enda_39)@ensemble;"
      "LINKOFFSET(enda_40)@ensemble;LINKLEN(enda_40)@ensemble;"
      "LINKOFFSET(enda_41)@ensemble;LINKLEN(enda_41)@ensemble;"
      "LINKOFFSET(enda_42)@ensemble;LINKLEN(enda_42)@ensemble;"
      "LINKOFFSET(enda_43)@ensemble;LINKLEN(enda_43)@ensemble;"
      "LINKOFFSET(enda_44)@ensemble;LINKLEN(enda_44)@ensemble;"
      "LINKOFFSET(enda_45)@ensemble;LINKLEN(enda_45)@ensemble;"
      "LINKOFFSET(enda_46)@ensemble;LINKLEN(enda_46)@ensemble;"
      "LINKOFFSET(enda_47)@ensemble;LINKLEN(enda_47)@ensemble;"
      "LINKOFFSET(enda_48)@ensemble;LINKLEN(enda_48)@ensemble;"
      "LINKOFFSET(enda_49)@ensemble;LINKLEN(enda_49)@ensemble;"
      "LINKOFFSET(enda_50)@ensemble;LINKLEN(enda_50)@ensemble;"
      "LINKOFFSET(enda_51)@ensemble;LINKLEN(enda_51)@ensemble;"
      "LINKOFFSET(enda_52)@ensemble;LINKLEN(enda_52)@ensemble;"
      "LINKOFFSET(enda_53)@ensemble;LINKLEN(enda_53)@ensemble;"
      "LINKOFFSET(enda_54)@ensemble;LINKLEN(enda_54)@ensemble;"
      "LINKOFFSET(enda_55)@ensemble;LINKLEN(enda_55)@ensemble;"
      "LINKOFFSET(enda_56)@ensemble;LINKLEN(enda_56)@ensemble;"
      "LINKOFFSET(enda_57)@ensemble;LINKLEN(enda_57)@ensemble;"
      "LINKOFFSET(enda_58)@ensemble;LINKLEN(enda_58)@ensemble;"
      "LINKOFFSET(enda_59)@ensemble;LINKLEN(enda_59)@ensemble;"
      "LINKOFFSET(enda_60)@ensemble;LINKLEN(enda_60)@ensemble;"
      "LINKOFFSET(enda_61)@ensemble;LINKLEN(enda_61)@ensemble;"
      "LINKOFFSET(enda_62)@ensemble;LINKLEN(enda_62)@ensemble;"
      "LINKOFFSET(enda_63)@ensemble;LINKLEN(enda_63)@ensemble;"
      "LINKOFFSET(enda_64)@ensemble;LINKLEN(enda_64)@ensemble;"
      "LINKOFFSET(enda_65)@ensemble;LINKLEN(enda_65)@ensemble;"
      "LINKOFFSET(enda_66)@ensemble;LINKLEN(enda_66)@ensemble;"
      "LINKOFFSET(enda_67)@ensemble;LINKLEN(enda_67)@ensemble;"
      "LINKOFFSET(enda_68)@ensemble;LINKLEN(enda_68)@ensemble;"
      "LINKOFFSET(enda_69)@ensemble;LINKLEN(enda_69)@ensemble;"
      "LINKOFFSET(enda_70)@ensemble;LINKLEN(enda_70)@ensemble;"
      "LINKOFFSET(enda_71)@ensemble;LINKLEN(enda_71)@ensemble;"
      "LINKOFFSET(enda_72)@ensemble;LINKLEN(enda_72)@ensemble;"
      "LINKOFFSET(enda_73)@ensemble;LINKLEN(enda_73)@ensemble;"
      "LINKOFFSET(enda_74)@ensemble;LINKLEN(enda_74)@ensemble;"
      "LINKOFFSET(enda_75)@ensemble;LINKLEN(enda_75)@ensemble;"
      "LINKOFFSET(enda_76)@ensemble;LINKLEN(enda_76)@ensemble;"
      "LINKOFFSET(enda_77)@ensemble;LINKLEN(enda_77)@ensemble;"
      "LINKOFFSET(enda_78)@ensemble;LINKLEN(enda_78)@ensemble;"
      "LINKOFFSET(enda_79)@ensemble;LINKLEN(enda_79)@ensemble;"
      "LINKOFFSET(enda_80)@ensemble;LINKLEN(enda_80)@ensemble;"
      "LINKOFFSET(enda_81)@ensemble;LINKLEN(enda_81)@ensemble;"
      "LINKOFFSET(enda_82)@ensemble;LINKLEN(enda_82)@ensemble;"
      "LINKOFFSET(enda_83)@ensemble;LINKLEN(enda_83)@ensemble;"
      "LINKOFFSET(enda_84)@ensemble;LINKLEN(enda_84)@ensemble;"
      "LINKOFFSET(enda_85)@ensemble;LINKLEN(enda_85)@ensemble;"
      "LINKOFFSET(enda_86)@ensemble;LINKLEN(enda_86)@ensemble;"
      "LINKOFFSET(enda_87)@ensemble;LINKLEN(enda_87)@ensemble;"
      "LINKOFFSET(enda_88)@ensemble;LINKLEN(enda_88)@ensemble;"
      "LINKOFFSET(enda_89)@ensemble;LINKLEN(enda_89)@ensemble;"
      "LINKOFFSET(enda_90)@ensemble;LINKLEN(enda_90)@ensemble;"
      "LINKOFFSET(enda_91)@ensemble;LINKLEN(enda_91)@ensemble;"
      "LINKOFFSET(enda_92)@ensemble;LINKLEN(enda_92)@ensemble;"
      "LINKOFFSET(enda_93)@ensemble;LINKLEN(enda_93)@ensemble;"
      "LINKOFFSET(enda_94)@ensemble;LINKLEN(enda_94)@ensemble;"
      "LINKOFFSET(enda_95)@ensemble;LINKLEN(enda_95)@ensemble;"
      "LINKOFFSET(enda_96)@ensemble;LINKLEN(enda_96)@ensemble;"
      "LINKOFFSET(enda_97)@ensemble;LINKLEN(enda_97)@ensemble;"
      "LINKOFFSET(enda_98)@ensemble;LINKLEN(enda_98)@ensemble;"
      "LINKOFFSET(enda_99)@ensemble;LINKLEN(enda_99)@ensemble;"
      "LINKOFFSET(enda_100)@ensemble;LINKLEN(enda_100)@ensemble;"
      "LINKOFFSET(surfbody_feedback_1)@ensemble;LINKLEN(surfbody_feedback_1)@ensemble;"
      "LINKOFFSET(surfbody_feedback_2)@ensemble;LINKLEN(surfbody_feedback_2)@ensemble;"
      "LINKOFFSET(surfbody_feedback_3)@ensemble;LINKLEN(surfbody_feedback_3)@ensemble;"
      "LINKOFFSET(surfbody_feedback_4)@ensemble;LINKLEN(surfbody_feedback_4)@ensemble;"
      "LINKOFFSET(surfbody_feedback_5)@ensemble;LINKLEN(surfbody_feedback_5)@ensemble;"
      "LINKOFFSET(surfbody_feedback_6)@ensemble;LINKLEN(surfbody_feedback_6)@ensemble;"
      "LINKOFFSET(surfbody_feedback_7)@ensemble;LINKLEN(surfbody_feedback_7)@ensemble;"
      "LINKOFFSET(surfbody_feedback_8)@ensemble;LINKLEN(surfbody_feedback_8)@ensemble;"
      "LINKOFFSET(surfbody_feedback_9)@ensemble;LINKLEN(surfbody_feedback_9)@ensemble;"
      "LINKOFFSET(surfbody_feedback_10)@ensemble;LINKLEN(surfbody_feedback_10)@ensemble;"
      "LINKOFFSET(surfbody_feedback_11)@ensemble;LINKLEN(surfbody_feedback_11)@ensemble;"
      "LINKOFFSET(surfbody_feedback_12)@ensemble;LINKLEN(surfbody_feedback_12)@ensemble;"
      "LINKOFFSET(surfbody_feedback_13)@ensemble;LINKLEN(surfbody_feedback_13)@ensemble;"
      "LINKOFFSET(surfbody_feedback_14)@ensemble;LINKLEN(surfbody_feedback_14)@ensemble;"
      "LINKOFFSET(surfbody_feedback_15)@ensemble;LINKLEN(surfbody_feedback_15)@ensemble;"
      "LINKOFFSET(surfbody_feedback_16)@ensemble;LINKLEN(surfbody_feedback_16)@ensemble;"
      "LINKOFFSET(surfbody_feedback_17)@ensemble;LINKLEN(surfbody_feedback_17)@ensemble;"
      "LINKOFFSET(surfbody_feedback_18)@ensemble;LINKLEN(surfbody_feedback_18)@ensemble;"
      "LINKOFFSET(surfbody_feedback_19)@ensemble;LINKLEN(surfbody_feedback_19)@ensemble;"
      "LINKOFFSET(surfbody_feedback_20)@ensemble;LINKLEN(surfbody_feedback_20)@ensemble;"
      "LINKOFFSET(surfbody_feedback_21)@ensemble;LINKLEN(surfbody_feedback_21)@ensemble;"
      "LINKOFFSET(surfbody_feedback_22)@ensemble;LINKLEN(surfbody_feedback_22)@ensemble;"
      "LINKOFFSET(surfbody_feedback_23)@ensemble;LINKLEN(surfbody_feedback_23)@ensemble;"
      "LINKOFFSET(surfbody_feedback_24)@ensemble;LINKLEN(surfbody_feedback_24)@ensemble;"
      "LINKOFFSET(surfbody_feedback_25)@ensemble;LINKLEN(surfbody_feedback_25)@ensemble;"
      "LINKOFFSET(surfbody_feedback_26)@ensemble;LINKLEN(surfbody_feedback_26)@ensemble;"
      "LINKOFFSET(surfbody_feedback_27)@ensemble;LINKLEN(surfbody_feedback_27)@ensemble;"
      "LINKOFFSET(surfbody_feedback_28)@ensemble;LINKLEN(surfbody_feedback_28)@ensemble;"
      "LINKOFFSET(surfbody_feedback_29)@ensemble;LINKLEN(surfbody_feedback_29)@ensemble;"
      "LINKOFFSET(surfbody_feedback_30)@ensemble;LINKLEN(surfbody_feedback_30)@ensemble;"
      "LINKOFFSET(surfbody_feedback_31)@ensemble;LINKLEN(surfbody_feedback_31)@ensemble;"
      "LINKOFFSET(surfbody_feedback_32)@ensemble;LINKLEN(surfbody_feedback_32)@ensemble;"
      "LINKOFFSET(surfbody_feedback_33)@ensemble;LINKLEN(surfbody_feedback_33)@ensemble;"
      "LINKOFFSET(surfbody_feedback_34)@ensemble;LINKLEN(surfbody_feedback_34)@ensemble;"
      "LINKOFFSET(surfbody_feedback_35)@ensemble;LINKLEN(surfbody_feedback_35)@ensemble;"
      "LINKOFFSET(surfbody_feedback_36)@ensemble;LINKLEN(surfbody_feedback_36)@ensemble;"
      "LINKOFFSET(surfbody_feedback_37)@ensemble;LINKLEN(surfbody_feedback_37)@ensemble;"
      "LINKOFFSET(surfbody_feedback_38)@ensemble;LINKLEN(surfbody_feedback_38)@ensemble;"
      "LINKOFFSET(surfbody_feedback_39)@ensemble;LINKLEN(surfbody_feedback_39)@ensemble;"
      "LINKOFFSET(surfbody_feedback_40)@ensemble;LINKLEN(surfbody_feedback_40)@ensemble;"
      "LINKOFFSET(surfbody_feedback_41)@ensemble;LINKLEN(surfbody_feedback_41)@ensemble;"
      "LINKOFFSET(surfbody_feedback_42)@ensemble;LINKLEN(surfbody_feedback_42)@ensemble;"
      "LINKOFFSET(surfbody_feedback_43)@ensemble;LINKLEN(surfbody_feedback_43)@ensemble;"
      "LINKOFFSET(surfbody_feedback_44)@ensemble;LINKLEN(surfbody_feedback_44)@ensemble;"
      "LINKOFFSET(surfbody_feedback_45)@ensemble;LINKLEN(surfbody_feedback_45)@ensemble;"
      "LINKOFFSET(surfbody_feedback_46)@ensemble;LINKLEN(surfbody_feedback_46)@ensemble;"
      "LINKOFFSET(surfbody_feedback_47)@ensemble;LINKLEN(surfbody_feedback_47)@ensemble;"
      "LINKOFFSET(surfbody_feedback_48)@ensemble;LINKLEN(surfbody_feedback_48)@ensemble;"
      "LINKOFFSET(surfbody_feedback_49)@ensemble;LINKLEN(surfbody_feedback_49)@ensemble;"
      "LINKOFFSET(surfbody_feedback_50)@ensemble;LINKLEN(surfbody_feedback_50)@ensemble;"
      "LINKOFFSET(surfbody_feedback_51)@ensemble;LINKLEN(surfbody_feedback_51)@ensemble;"
      "LINKOFFSET(surfbody_feedback_52)@ensemble;LINKLEN(surfbody_feedback_52)@ensemble;"
      "LINKOFFSET(surfbody_feedback_53)@ensemble;LINKLEN(surfbody_feedback_53)@ensemble;"
      "LINKOFFSET(surfbody_feedback_54)@ensemble;LINKLEN(surfbody_feedback_54)@ensemble;"
      "LINKOFFSET(surfbody_feedback_55)@ensemble;LINKLEN(surfbody_feedback_55)@ensemble;"
      "LINKOFFSET(surfbody_feedback_56)@ensemble;LINKLEN(surfbody_feedback_56)@ensemble;"
      "LINKOFFSET(surfbody_feedback_57)@ensemble;LINKLEN(surfbody_feedback_57)@ensemble;"
      "LINKOFFSET(surfbody_feedback_58)@ensemble;LINKLEN(surfbody_feedback_58)@ensemble;"
      "LINKOFFSET(surfbody_feedback_59)@ensemble;LINKLEN(surfbody_feedback_59)@ensemble;"
      "LINKOFFSET(surfbody_feedback_60)@ensemble;LINKLEN(surfbody_feedback_60)@ensemble;"
      "LINKOFFSET(surfbody_feedback_61)@ensemble;LINKLEN(surfbody_feedback_61)@ensemble;"
      "LINKOFFSET(surfbody_feedback_62)@ensemble;LINKLEN(surfbody_feedback_62)@ensemble;"
      "LINKOFFSET(surfbody_feedback_63)@ensemble;LINKLEN(surfbody_feedback_63)@ensemble;"
      "LINKOFFSET(surfbody_feedback_64)@ensemble;LINKLEN(surfbody_feedback_64)@ensemble;"
      "LINKOFFSET(surfbody_feedback_65)@ensemble;LINKLEN(surfbody_feedback_65)@ensemble;"
      "LINKOFFSET(surfbody_feedback_66)@ensemble;LINKLEN(surfbody_feedback_66)@ensemble;"
      "LINKOFFSET(surfbody_feedback_67)@ensemble;LINKLEN(surfbody_feedback_67)@ensemble;"
      "LINKOFFSET(surfbody_feedback_68)@ensemble;LINKLEN(surfbody_feedback_68)@ensemble;"
      "LINKOFFSET(surfbody_feedback_69)@ensemble;LINKLEN(surfbody_feedback_69)@ensemble;"
      "LINKOFFSET(surfbody_feedback_70)@ensemble;LINKLEN(surfbody_feedback_70)@ensemble;"
      "LINKOFFSET(surfbody_feedback_71)@ensemble;LINKLEN(surfbody_feedback_71)@ensemble;"
      "LINKOFFSET(surfbody_feedback_72)@ensemble;LINKLEN(surfbody_feedback_72)@ensemble;"
      "LINKOFFSET(surfbody_feedback_73)@ensemble;LINKLEN(surfbody_feedback_73)@ensemble;"
      "LINKOFFSET(surfbody_feedback_74)@ensemble;LINKLEN(surfbody_feedback_74)@ensemble;"
      "LINKOFFSET(surfbody_feedback_75)@ensemble;LINKLEN(surfbody_feedback_75)@ensemble;"
      "LINKOFFSET(surfbody_feedback_76)@ensemble;LINKLEN(surfbody_feedback_76)@ensemble;"
      "LINKOFFSET(surfbody_feedback_77)@ensemble;LINKLEN(surfbody_feedback_77)@ensemble;"
      "LINKOFFSET(surfbody_feedback_78)@ensemble;LINKLEN(surfbody_feedback_78)@ensemble;"
      "LINKOFFSET(surfbody_feedback_79)@ensemble;LINKLEN(surfbody_feedback_79)@ensemble;"
      "LINKOFFSET(surfbody_feedback_80)@ensemble;LINKLEN(surfbody_feedback_80)@ensemble;"
      "LINKOFFSET(surfbody_feedback_81)@ensemble;LINKLEN(surfbody_feedback_81)@ensemble;"
      "LINKOFFSET(surfbody_feedback_82)@ensemble;LINKLEN(surfbody_feedback_82)@ensemble;"
      "LINKOFFSET(surfbody_feedback_83)@ensemble;LINKLEN(surfbody_feedback_83)@ensemble;"
      "LINKOFFSET(surfbody_feedback_84)@ensemble;LINKLEN(surfbody_feedback_84)@ensemble;"
      "LINKOFFSET(surfbody_feedback_85)@ensemble;LINKLEN(surfbody_feedback_85)@ensemble;"
      "LINKOFFSET(surfbody_feedback_86)@ensemble;LINKLEN(surfbody_feedback_86)@ensemble;"
      "LINKOFFSET(surfbody_feedback_87)@ensemble;LINKLEN(surfbody_feedback_87)@ensemble;"
      "LINKOFFSET(surfbody_feedback_88)@ensemble;LINKLEN(surfbody_feedback_88)@ensemble;"
      "LINKOFFSET(surfbody_feedback_89)@ensemble;LINKLEN(surfbody_feedback_89)@ensemble;"
      "LINKOFFSET(surfbody_feedback_90)@ensemble;LINKLEN(surfbody_feedback_90)@ensemble;"
      "LINKOFFSET(surfbody_feedback_91)@ensemble;LINKLEN(surfbody_feedback_91)@ensemble;"
      "LINKOFFSET(surfbody_feedback_92)@ensemble;LINKLEN(surfbody_feedback_92)@ensemble;"
      "LINKOFFSET(surfbody_feedback_93)@ensemble;LINKLEN(surfbody_feedback_93)@ensemble;"
      "LINKOFFSET(surfbody_feedback_94)@ensemble;LINKLEN(surfbody_feedback_94)@ensemble;"
      "LINKOFFSET(surfbody_feedback_95)@ensemble;LINKLEN(surfbody_feedback_95)@ensemble;"
      "LINKOFFSET(surfbody_feedback_96)@ensemble;LINKLEN(surfbody_feedback_96)@ensemble;"
      "LINKOFFSET(surfbody_feedback_97)@ensemble;LINKLEN(surfbody_feedback_97)@ensemble;"
      "LINKOFFSET(surfbody_feedback_98)@ensemble;LINKLEN(surfbody_feedback_98)@ensemble;"
      "LINKOFFSET(surfbody_feedback_99)@ensemble;LINKLEN(surfbody_feedback_99)@ensemble;"
      "LINKOFFSET(surfbody_feedback_100)@ensemble;LINKLEN(surfbody_feedback_100)@ensemble;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 7368;
    { static char s[] =
      ";pk1int;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;";
      T[1].longname = s; }
    CCMA_T_ensemble_PREPTAG = T;
    CCMA_nT_ensemble_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_ensemble_PREPTAG;
  return CCMA_T_ensemble_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_ensemble(void *T);
extern int CCMA_Unpack_T_ensemble(void *T);
extern int CCMA_Sel_T_ensemble(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, ensemble);
PrePutTable(CCMA, d, double, ensemble);
PreLoadTable(CCMA, ensemble);
PreStoreTable(CCMA, ensemble);
extern void CCMA_Dim_T_ensemble(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_ensemble(void *T);
extern int CCMA_Sql_T_ensemble(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_ensemble(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_1) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_1" : appearance order#6, hierarchy rank# 30, weight = 358.000006 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_1;

#endif /* defined(IS_a_TABLE_enkf_1) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_1)
extern const ODB_Tags *CCMA_Set_T_enkf_1_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_1_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_1_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_1_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_1_TAG = 0;
PRIVATE int CCMA_nT_enkf_1_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_1_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_1_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_1_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_1"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_1"; T[1].name = s; }
    CCMA_T_enkf_1_TAG = T;
    CCMA_nT_enkf_1_TAG = ntag;
    CCMA_nT_enkf_1_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_1_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_1_MEM;
  return CCMA_T_enkf_1_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_1_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_1_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_1;hprior@enkf_1;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_1_PREPTAG = T;
    CCMA_nT_enkf_1_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_1_PREPTAG;
  return CCMA_T_enkf_1_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_1(void *T);
extern int CCMA_Unpack_T_enkf_1(void *T);
extern int CCMA_Sel_T_enkf_1(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_1);
PrePutTable(CCMA, d, double, enkf_1);
PreLoadTable(CCMA, enkf_1);
PreStoreTable(CCMA, enkf_1);
extern void CCMA_Dim_T_enkf_1(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_1(void *T);
extern int CCMA_Sql_T_enkf_1(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_1(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_2) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_2" : appearance order#7, hierarchy rank# 31, weight = 358.000007 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_2;

#endif /* defined(IS_a_TABLE_enkf_2) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_2)
extern const ODB_Tags *CCMA_Set_T_enkf_2_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_2_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_2_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_2_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_2_TAG = 0;
PRIVATE int CCMA_nT_enkf_2_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_2_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_2_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_2_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_2"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_2"; T[1].name = s; }
    CCMA_T_enkf_2_TAG = T;
    CCMA_nT_enkf_2_TAG = ntag;
    CCMA_nT_enkf_2_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_2_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_2_MEM;
  return CCMA_T_enkf_2_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_2_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_2_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_2;hprior@enkf_2;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_2_PREPTAG = T;
    CCMA_nT_enkf_2_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_2_PREPTAG;
  return CCMA_T_enkf_2_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_2(void *T);
extern int CCMA_Unpack_T_enkf_2(void *T);
extern int CCMA_Sel_T_enkf_2(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_2);
PrePutTable(CCMA, d, double, enkf_2);
PreLoadTable(CCMA, enkf_2);
PreStoreTable(CCMA, enkf_2);
extern void CCMA_Dim_T_enkf_2(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_2(void *T);
extern int CCMA_Sql_T_enkf_2(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_2(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_3) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_3" : appearance order#8, hierarchy rank# 32, weight = 358.000008 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_3;

#endif /* defined(IS_a_TABLE_enkf_3) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_3)
extern const ODB_Tags *CCMA_Set_T_enkf_3_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_3_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_3_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_3_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_3_TAG = 0;
PRIVATE int CCMA_nT_enkf_3_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_3_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_3_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_3_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_3"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_3"; T[1].name = s; }
    CCMA_T_enkf_3_TAG = T;
    CCMA_nT_enkf_3_TAG = ntag;
    CCMA_nT_enkf_3_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_3_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_3_MEM;
  return CCMA_T_enkf_3_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_3_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_3_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_3;hprior@enkf_3;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_3_PREPTAG = T;
    CCMA_nT_enkf_3_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_3_PREPTAG;
  return CCMA_T_enkf_3_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_3(void *T);
extern int CCMA_Unpack_T_enkf_3(void *T);
extern int CCMA_Sel_T_enkf_3(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_3);
PrePutTable(CCMA, d, double, enkf_3);
PreLoadTable(CCMA, enkf_3);
PreStoreTable(CCMA, enkf_3);
extern void CCMA_Dim_T_enkf_3(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_3(void *T);
extern int CCMA_Sql_T_enkf_3(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_3(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_4) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_4" : appearance order#9, hierarchy rank# 33, weight = 358.000009 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_4;

#endif /* defined(IS_a_TABLE_enkf_4) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_4)
extern const ODB_Tags *CCMA_Set_T_enkf_4_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_4_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_4_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_4_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_4_TAG = 0;
PRIVATE int CCMA_nT_enkf_4_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_4_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_4_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_4_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_4"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_4"; T[1].name = s; }
    CCMA_T_enkf_4_TAG = T;
    CCMA_nT_enkf_4_TAG = ntag;
    CCMA_nT_enkf_4_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_4_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_4_MEM;
  return CCMA_T_enkf_4_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_4_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_4_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_4;hprior@enkf_4;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_4_PREPTAG = T;
    CCMA_nT_enkf_4_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_4_PREPTAG;
  return CCMA_T_enkf_4_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_4(void *T);
extern int CCMA_Unpack_T_enkf_4(void *T);
extern int CCMA_Sel_T_enkf_4(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_4);
PrePutTable(CCMA, d, double, enkf_4);
PreLoadTable(CCMA, enkf_4);
PreStoreTable(CCMA, enkf_4);
extern void CCMA_Dim_T_enkf_4(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_4(void *T);
extern int CCMA_Sql_T_enkf_4(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_4(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_5) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_5" : appearance order#10, hierarchy rank# 34, weight = 358.000010 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_5;

#endif /* defined(IS_a_TABLE_enkf_5) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_5)
extern const ODB_Tags *CCMA_Set_T_enkf_5_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_5_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_5_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_5_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_5_TAG = 0;
PRIVATE int CCMA_nT_enkf_5_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_5_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_5_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_5_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_5"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_5"; T[1].name = s; }
    CCMA_T_enkf_5_TAG = T;
    CCMA_nT_enkf_5_TAG = ntag;
    CCMA_nT_enkf_5_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_5_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_5_MEM;
  return CCMA_T_enkf_5_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_5_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_5_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_5;hprior@enkf_5;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_5_PREPTAG = T;
    CCMA_nT_enkf_5_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_5_PREPTAG;
  return CCMA_T_enkf_5_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_5(void *T);
extern int CCMA_Unpack_T_enkf_5(void *T);
extern int CCMA_Sel_T_enkf_5(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_5);
PrePutTable(CCMA, d, double, enkf_5);
PreLoadTable(CCMA, enkf_5);
PreStoreTable(CCMA, enkf_5);
extern void CCMA_Dim_T_enkf_5(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_5(void *T);
extern int CCMA_Sql_T_enkf_5(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_5(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_6) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_6" : appearance order#11, hierarchy rank# 35, weight = 358.000011 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_6;

#endif /* defined(IS_a_TABLE_enkf_6) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_6)
extern const ODB_Tags *CCMA_Set_T_enkf_6_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_6_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_6_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_6_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_6_TAG = 0;
PRIVATE int CCMA_nT_enkf_6_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_6_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_6_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_6_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_6"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_6"; T[1].name = s; }
    CCMA_T_enkf_6_TAG = T;
    CCMA_nT_enkf_6_TAG = ntag;
    CCMA_nT_enkf_6_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_6_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_6_MEM;
  return CCMA_T_enkf_6_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_6_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_6_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_6;hprior@enkf_6;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_6_PREPTAG = T;
    CCMA_nT_enkf_6_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_6_PREPTAG;
  return CCMA_T_enkf_6_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_6(void *T);
extern int CCMA_Unpack_T_enkf_6(void *T);
extern int CCMA_Sel_T_enkf_6(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_6);
PrePutTable(CCMA, d, double, enkf_6);
PreLoadTable(CCMA, enkf_6);
PreStoreTable(CCMA, enkf_6);
extern void CCMA_Dim_T_enkf_6(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_6(void *T);
extern int CCMA_Sql_T_enkf_6(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_6(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_7) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_7" : appearance order#12, hierarchy rank# 36, weight = 358.000012 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_7;

#endif /* defined(IS_a_TABLE_enkf_7) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_7)
extern const ODB_Tags *CCMA_Set_T_enkf_7_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_7_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_7_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_7_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_7_TAG = 0;
PRIVATE int CCMA_nT_enkf_7_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_7_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_7_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_7_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_7"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_7"; T[1].name = s; }
    CCMA_T_enkf_7_TAG = T;
    CCMA_nT_enkf_7_TAG = ntag;
    CCMA_nT_enkf_7_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_7_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_7_MEM;
  return CCMA_T_enkf_7_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_7_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_7_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_7;hprior@enkf_7;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_7_PREPTAG = T;
    CCMA_nT_enkf_7_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_7_PREPTAG;
  return CCMA_T_enkf_7_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_7(void *T);
extern int CCMA_Unpack_T_enkf_7(void *T);
extern int CCMA_Sel_T_enkf_7(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_7);
PrePutTable(CCMA, d, double, enkf_7);
PreLoadTable(CCMA, enkf_7);
PreStoreTable(CCMA, enkf_7);
extern void CCMA_Dim_T_enkf_7(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_7(void *T);
extern int CCMA_Sql_T_enkf_7(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_7(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_8) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_8" : appearance order#13, hierarchy rank# 37, weight = 358.000013 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_8;

#endif /* defined(IS_a_TABLE_enkf_8) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_8)
extern const ODB_Tags *CCMA_Set_T_enkf_8_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_8_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_8_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_8_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_8_TAG = 0;
PRIVATE int CCMA_nT_enkf_8_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_8_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_8_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_8_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_8"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_8"; T[1].name = s; }
    CCMA_T_enkf_8_TAG = T;
    CCMA_nT_enkf_8_TAG = ntag;
    CCMA_nT_enkf_8_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_8_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_8_MEM;
  return CCMA_T_enkf_8_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_8_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_8_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_8;hprior@enkf_8;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_8_PREPTAG = T;
    CCMA_nT_enkf_8_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_8_PREPTAG;
  return CCMA_T_enkf_8_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_8(void *T);
extern int CCMA_Unpack_T_enkf_8(void *T);
extern int CCMA_Sel_T_enkf_8(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_8);
PrePutTable(CCMA, d, double, enkf_8);
PreLoadTable(CCMA, enkf_8);
PreStoreTable(CCMA, enkf_8);
extern void CCMA_Dim_T_enkf_8(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_8(void *T);
extern int CCMA_Sql_T_enkf_8(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_8(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_9) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_9" : appearance order#14, hierarchy rank# 38, weight = 358.000014 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_9;

#endif /* defined(IS_a_TABLE_enkf_9) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_9)
extern const ODB_Tags *CCMA_Set_T_enkf_9_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_9_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_9_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_9_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_9_TAG = 0;
PRIVATE int CCMA_nT_enkf_9_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_9_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_9_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_9_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_9"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_9"; T[1].name = s; }
    CCMA_T_enkf_9_TAG = T;
    CCMA_nT_enkf_9_TAG = ntag;
    CCMA_nT_enkf_9_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_9_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_9_MEM;
  return CCMA_T_enkf_9_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_9_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_9_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 29;
    { static char s[] =
      ";member@enkf_9;hprior@enkf_9;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_9_PREPTAG = T;
    CCMA_nT_enkf_9_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_9_PREPTAG;
  return CCMA_T_enkf_9_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_9(void *T);
extern int CCMA_Unpack_T_enkf_9(void *T);
extern int CCMA_Sel_T_enkf_9(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_9);
PrePutTable(CCMA, d, double, enkf_9);
PreLoadTable(CCMA, enkf_9);
PreStoreTable(CCMA, enkf_9);
extern void CCMA_Dim_T_enkf_9(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_9(void *T);
extern int CCMA_Sql_T_enkf_9(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_9(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_10) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_10" : appearance order#15, hierarchy rank# 39, weight = 358.000015 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_10;

#endif /* defined(IS_a_TABLE_enkf_10) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_10)
extern const ODB_Tags *CCMA_Set_T_enkf_10_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_10_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_10_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_10_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_10_TAG = 0;
PRIVATE int CCMA_nT_enkf_10_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_10_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_10_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_10_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_10"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_10"; T[1].name = s; }
    CCMA_T_enkf_10_TAG = T;
    CCMA_nT_enkf_10_TAG = ntag;
    CCMA_nT_enkf_10_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_10_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_10_MEM;
  return CCMA_T_enkf_10_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_10_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_10_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_10;hprior@enkf_10;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_10_PREPTAG = T;
    CCMA_nT_enkf_10_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_10_PREPTAG;
  return CCMA_T_enkf_10_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_10(void *T);
extern int CCMA_Unpack_T_enkf_10(void *T);
extern int CCMA_Sel_T_enkf_10(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_10);
PrePutTable(CCMA, d, double, enkf_10);
PreLoadTable(CCMA, enkf_10);
PreStoreTable(CCMA, enkf_10);
extern void CCMA_Dim_T_enkf_10(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_10(void *T);
extern int CCMA_Sql_T_enkf_10(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_10(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_11) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_11" : appearance order#16, hierarchy rank# 40, weight = 358.000016 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_11;

#endif /* defined(IS_a_TABLE_enkf_11) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_11)
extern const ODB_Tags *CCMA_Set_T_enkf_11_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_11_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_11_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_11_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_11_TAG = 0;
PRIVATE int CCMA_nT_enkf_11_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_11_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_11_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_11_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_11"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_11"; T[1].name = s; }
    CCMA_T_enkf_11_TAG = T;
    CCMA_nT_enkf_11_TAG = ntag;
    CCMA_nT_enkf_11_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_11_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_11_MEM;
  return CCMA_T_enkf_11_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_11_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_11_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_11;hprior@enkf_11;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_11_PREPTAG = T;
    CCMA_nT_enkf_11_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_11_PREPTAG;
  return CCMA_T_enkf_11_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_11(void *T);
extern int CCMA_Unpack_T_enkf_11(void *T);
extern int CCMA_Sel_T_enkf_11(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_11);
PrePutTable(CCMA, d, double, enkf_11);
PreLoadTable(CCMA, enkf_11);
PreStoreTable(CCMA, enkf_11);
extern void CCMA_Dim_T_enkf_11(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_11(void *T);
extern int CCMA_Sql_T_enkf_11(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_11(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_12) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_12" : appearance order#17, hierarchy rank# 41, weight = 358.000017 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_12;

#endif /* defined(IS_a_TABLE_enkf_12) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_12)
extern const ODB_Tags *CCMA_Set_T_enkf_12_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_12_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_12_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_12_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_12_TAG = 0;
PRIVATE int CCMA_nT_enkf_12_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_12_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_12_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_12_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_12"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_12"; T[1].name = s; }
    CCMA_T_enkf_12_TAG = T;
    CCMA_nT_enkf_12_TAG = ntag;
    CCMA_nT_enkf_12_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_12_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_12_MEM;
  return CCMA_T_enkf_12_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_12_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_12_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_12;hprior@enkf_12;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_12_PREPTAG = T;
    CCMA_nT_enkf_12_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_12_PREPTAG;
  return CCMA_T_enkf_12_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_12(void *T);
extern int CCMA_Unpack_T_enkf_12(void *T);
extern int CCMA_Sel_T_enkf_12(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_12);
PrePutTable(CCMA, d, double, enkf_12);
PreLoadTable(CCMA, enkf_12);
PreStoreTable(CCMA, enkf_12);
extern void CCMA_Dim_T_enkf_12(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_12(void *T);
extern int CCMA_Sql_T_enkf_12(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_12(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_13) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_13" : appearance order#18, hierarchy rank# 42, weight = 358.000018 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_13;

#endif /* defined(IS_a_TABLE_enkf_13) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_13)
extern const ODB_Tags *CCMA_Set_T_enkf_13_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_13_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_13_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_13_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_13_TAG = 0;
PRIVATE int CCMA_nT_enkf_13_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_13_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_13_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_13_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_13"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_13"; T[1].name = s; }
    CCMA_T_enkf_13_TAG = T;
    CCMA_nT_enkf_13_TAG = ntag;
    CCMA_nT_enkf_13_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_13_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_13_MEM;
  return CCMA_T_enkf_13_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_13_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_13_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_13;hprior@enkf_13;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_13_PREPTAG = T;
    CCMA_nT_enkf_13_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_13_PREPTAG;
  return CCMA_T_enkf_13_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_13(void *T);
extern int CCMA_Unpack_T_enkf_13(void *T);
extern int CCMA_Sel_T_enkf_13(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_13);
PrePutTable(CCMA, d, double, enkf_13);
PreLoadTable(CCMA, enkf_13);
PreStoreTable(CCMA, enkf_13);
extern void CCMA_Dim_T_enkf_13(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_13(void *T);
extern int CCMA_Sql_T_enkf_13(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_13(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_14) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_14" : appearance order#19, hierarchy rank# 43, weight = 358.000019 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_14;

#endif /* defined(IS_a_TABLE_enkf_14) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_14)
extern const ODB_Tags *CCMA_Set_T_enkf_14_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_14_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_14_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_14_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_14_TAG = 0;
PRIVATE int CCMA_nT_enkf_14_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_14_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_14_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_14_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_14"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_14"; T[1].name = s; }
    CCMA_T_enkf_14_TAG = T;
    CCMA_nT_enkf_14_TAG = ntag;
    CCMA_nT_enkf_14_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_14_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_14_MEM;
  return CCMA_T_enkf_14_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_14_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_14_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_14;hprior@enkf_14;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_14_PREPTAG = T;
    CCMA_nT_enkf_14_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_14_PREPTAG;
  return CCMA_T_enkf_14_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_14(void *T);
extern int CCMA_Unpack_T_enkf_14(void *T);
extern int CCMA_Sel_T_enkf_14(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_14);
PrePutTable(CCMA, d, double, enkf_14);
PreLoadTable(CCMA, enkf_14);
PreStoreTable(CCMA, enkf_14);
extern void CCMA_Dim_T_enkf_14(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_14(void *T);
extern int CCMA_Sql_T_enkf_14(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_14(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_15) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_15" : appearance order#20, hierarchy rank# 44, weight = 358.000020 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_15;

#endif /* defined(IS_a_TABLE_enkf_15) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_15)
extern const ODB_Tags *CCMA_Set_T_enkf_15_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_15_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_15_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_15_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_15_TAG = 0;
PRIVATE int CCMA_nT_enkf_15_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_15_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_15_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_15_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_15"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_15"; T[1].name = s; }
    CCMA_T_enkf_15_TAG = T;
    CCMA_nT_enkf_15_TAG = ntag;
    CCMA_nT_enkf_15_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_15_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_15_MEM;
  return CCMA_T_enkf_15_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_15_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_15_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_15;hprior@enkf_15;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_15_PREPTAG = T;
    CCMA_nT_enkf_15_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_15_PREPTAG;
  return CCMA_T_enkf_15_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_15(void *T);
extern int CCMA_Unpack_T_enkf_15(void *T);
extern int CCMA_Sel_T_enkf_15(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_15);
PrePutTable(CCMA, d, double, enkf_15);
PreLoadTable(CCMA, enkf_15);
PreStoreTable(CCMA, enkf_15);
extern void CCMA_Dim_T_enkf_15(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_15(void *T);
extern int CCMA_Sql_T_enkf_15(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_15(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_16) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_16" : appearance order#21, hierarchy rank# 45, weight = 358.000021 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_16;

#endif /* defined(IS_a_TABLE_enkf_16) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_16)
extern const ODB_Tags *CCMA_Set_T_enkf_16_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_16_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_16_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_16_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_16_TAG = 0;
PRIVATE int CCMA_nT_enkf_16_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_16_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_16_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_16_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_16"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_16"; T[1].name = s; }
    CCMA_T_enkf_16_TAG = T;
    CCMA_nT_enkf_16_TAG = ntag;
    CCMA_nT_enkf_16_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_16_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_16_MEM;
  return CCMA_T_enkf_16_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_16_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_16_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_16;hprior@enkf_16;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_16_PREPTAG = T;
    CCMA_nT_enkf_16_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_16_PREPTAG;
  return CCMA_T_enkf_16_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_16(void *T);
extern int CCMA_Unpack_T_enkf_16(void *T);
extern int CCMA_Sel_T_enkf_16(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_16);
PrePutTable(CCMA, d, double, enkf_16);
PreLoadTable(CCMA, enkf_16);
PreStoreTable(CCMA, enkf_16);
extern void CCMA_Dim_T_enkf_16(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_16(void *T);
extern int CCMA_Sql_T_enkf_16(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_16(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_17) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_17" : appearance order#22, hierarchy rank# 46, weight = 358.000022 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_17;

#endif /* defined(IS_a_TABLE_enkf_17) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_17)
extern const ODB_Tags *CCMA_Set_T_enkf_17_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_17_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_17_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_17_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_17_TAG = 0;
PRIVATE int CCMA_nT_enkf_17_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_17_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_17_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_17_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_17"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_17"; T[1].name = s; }
    CCMA_T_enkf_17_TAG = T;
    CCMA_nT_enkf_17_TAG = ntag;
    CCMA_nT_enkf_17_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_17_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_17_MEM;
  return CCMA_T_enkf_17_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_17_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_17_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_17;hprior@enkf_17;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_17_PREPTAG = T;
    CCMA_nT_enkf_17_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_17_PREPTAG;
  return CCMA_T_enkf_17_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_17(void *T);
extern int CCMA_Unpack_T_enkf_17(void *T);
extern int CCMA_Sel_T_enkf_17(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_17);
PrePutTable(CCMA, d, double, enkf_17);
PreLoadTable(CCMA, enkf_17);
PreStoreTable(CCMA, enkf_17);
extern void CCMA_Dim_T_enkf_17(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_17(void *T);
extern int CCMA_Sql_T_enkf_17(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_17(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_18) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_18" : appearance order#23, hierarchy rank# 47, weight = 358.000023 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_18;

#endif /* defined(IS_a_TABLE_enkf_18) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_18)
extern const ODB_Tags *CCMA_Set_T_enkf_18_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_18_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_18_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_18_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_18_TAG = 0;
PRIVATE int CCMA_nT_enkf_18_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_18_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_18_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_18_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_18"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_18"; T[1].name = s; }
    CCMA_T_enkf_18_TAG = T;
    CCMA_nT_enkf_18_TAG = ntag;
    CCMA_nT_enkf_18_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_18_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_18_MEM;
  return CCMA_T_enkf_18_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_18_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_18_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_18;hprior@enkf_18;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_18_PREPTAG = T;
    CCMA_nT_enkf_18_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_18_PREPTAG;
  return CCMA_T_enkf_18_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_18(void *T);
extern int CCMA_Unpack_T_enkf_18(void *T);
extern int CCMA_Sel_T_enkf_18(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_18);
PrePutTable(CCMA, d, double, enkf_18);
PreLoadTable(CCMA, enkf_18);
PreStoreTable(CCMA, enkf_18);
extern void CCMA_Dim_T_enkf_18(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_18(void *T);
extern int CCMA_Sql_T_enkf_18(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_18(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_19) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_19" : appearance order#24, hierarchy rank# 48, weight = 358.000024 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_19;

#endif /* defined(IS_a_TABLE_enkf_19) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_19)
extern const ODB_Tags *CCMA_Set_T_enkf_19_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_19_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_19_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_19_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_19_TAG = 0;
PRIVATE int CCMA_nT_enkf_19_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_19_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_19_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_19_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_19"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_19"; T[1].name = s; }
    CCMA_T_enkf_19_TAG = T;
    CCMA_nT_enkf_19_TAG = ntag;
    CCMA_nT_enkf_19_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_19_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_19_MEM;
  return CCMA_T_enkf_19_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_19_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_19_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_19;hprior@enkf_19;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_19_PREPTAG = T;
    CCMA_nT_enkf_19_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_19_PREPTAG;
  return CCMA_T_enkf_19_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_19(void *T);
extern int CCMA_Unpack_T_enkf_19(void *T);
extern int CCMA_Sel_T_enkf_19(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_19);
PrePutTable(CCMA, d, double, enkf_19);
PreLoadTable(CCMA, enkf_19);
PreStoreTable(CCMA, enkf_19);
extern void CCMA_Dim_T_enkf_19(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_19(void *T);
extern int CCMA_Sql_T_enkf_19(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_19(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_20) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_20" : appearance order#25, hierarchy rank# 49, weight = 358.000025 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_20;

#endif /* defined(IS_a_TABLE_enkf_20) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_20)
extern const ODB_Tags *CCMA_Set_T_enkf_20_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_20_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_20_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_20_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_20_TAG = 0;
PRIVATE int CCMA_nT_enkf_20_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_20_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_20_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_20_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_20"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_20"; T[1].name = s; }
    CCMA_T_enkf_20_TAG = T;
    CCMA_nT_enkf_20_TAG = ntag;
    CCMA_nT_enkf_20_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_20_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_20_MEM;
  return CCMA_T_enkf_20_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_20_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_20_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_20;hprior@enkf_20;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_20_PREPTAG = T;
    CCMA_nT_enkf_20_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_20_PREPTAG;
  return CCMA_T_enkf_20_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_20(void *T);
extern int CCMA_Unpack_T_enkf_20(void *T);
extern int CCMA_Sel_T_enkf_20(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_20);
PrePutTable(CCMA, d, double, enkf_20);
PreLoadTable(CCMA, enkf_20);
PreStoreTable(CCMA, enkf_20);
extern void CCMA_Dim_T_enkf_20(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_20(void *T);
extern int CCMA_Sql_T_enkf_20(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_20(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_21) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_21" : appearance order#26, hierarchy rank# 50, weight = 358.000026 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_21;

#endif /* defined(IS_a_TABLE_enkf_21) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_21)
extern const ODB_Tags *CCMA_Set_T_enkf_21_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_21_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_21_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_21_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_21_TAG = 0;
PRIVATE int CCMA_nT_enkf_21_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_21_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_21_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_21_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_21"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_21"; T[1].name = s; }
    CCMA_T_enkf_21_TAG = T;
    CCMA_nT_enkf_21_TAG = ntag;
    CCMA_nT_enkf_21_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_21_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_21_MEM;
  return CCMA_T_enkf_21_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_21_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_21_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_21;hprior@enkf_21;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_21_PREPTAG = T;
    CCMA_nT_enkf_21_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_21_PREPTAG;
  return CCMA_T_enkf_21_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_21(void *T);
extern int CCMA_Unpack_T_enkf_21(void *T);
extern int CCMA_Sel_T_enkf_21(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_21);
PrePutTable(CCMA, d, double, enkf_21);
PreLoadTable(CCMA, enkf_21);
PreStoreTable(CCMA, enkf_21);
extern void CCMA_Dim_T_enkf_21(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_21(void *T);
extern int CCMA_Sql_T_enkf_21(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_21(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_22) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_22" : appearance order#27, hierarchy rank# 51, weight = 358.000027 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_22;

#endif /* defined(IS_a_TABLE_enkf_22) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_22)
extern const ODB_Tags *CCMA_Set_T_enkf_22_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_22_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_22_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_22_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_22_TAG = 0;
PRIVATE int CCMA_nT_enkf_22_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_22_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_22_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_22_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_22"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_22"; T[1].name = s; }
    CCMA_T_enkf_22_TAG = T;
    CCMA_nT_enkf_22_TAG = ntag;
    CCMA_nT_enkf_22_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_22_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_22_MEM;
  return CCMA_T_enkf_22_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_22_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_22_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_22;hprior@enkf_22;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_22_PREPTAG = T;
    CCMA_nT_enkf_22_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_22_PREPTAG;
  return CCMA_T_enkf_22_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_22(void *T);
extern int CCMA_Unpack_T_enkf_22(void *T);
extern int CCMA_Sel_T_enkf_22(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_22);
PrePutTable(CCMA, d, double, enkf_22);
PreLoadTable(CCMA, enkf_22);
PreStoreTable(CCMA, enkf_22);
extern void CCMA_Dim_T_enkf_22(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_22(void *T);
extern int CCMA_Sql_T_enkf_22(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_22(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_23) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_23" : appearance order#28, hierarchy rank# 52, weight = 358.000028 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_23;

#endif /* defined(IS_a_TABLE_enkf_23) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_23)
extern const ODB_Tags *CCMA_Set_T_enkf_23_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_23_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_23_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_23_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_23_TAG = 0;
PRIVATE int CCMA_nT_enkf_23_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_23_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_23_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_23_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_23"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_23"; T[1].name = s; }
    CCMA_T_enkf_23_TAG = T;
    CCMA_nT_enkf_23_TAG = ntag;
    CCMA_nT_enkf_23_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_23_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_23_MEM;
  return CCMA_T_enkf_23_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_23_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_23_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_23;hprior@enkf_23;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_23_PREPTAG = T;
    CCMA_nT_enkf_23_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_23_PREPTAG;
  return CCMA_T_enkf_23_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_23(void *T);
extern int CCMA_Unpack_T_enkf_23(void *T);
extern int CCMA_Sel_T_enkf_23(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_23);
PrePutTable(CCMA, d, double, enkf_23);
PreLoadTable(CCMA, enkf_23);
PreStoreTable(CCMA, enkf_23);
extern void CCMA_Dim_T_enkf_23(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_23(void *T);
extern int CCMA_Sql_T_enkf_23(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_23(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_24) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_24" : appearance order#29, hierarchy rank# 53, weight = 358.000029 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_24;

#endif /* defined(IS_a_TABLE_enkf_24) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_24)
extern const ODB_Tags *CCMA_Set_T_enkf_24_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_24_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_24_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_24_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_24_TAG = 0;
PRIVATE int CCMA_nT_enkf_24_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_24_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_24_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_24_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_24"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_24"; T[1].name = s; }
    CCMA_T_enkf_24_TAG = T;
    CCMA_nT_enkf_24_TAG = ntag;
    CCMA_nT_enkf_24_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_24_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_24_MEM;
  return CCMA_T_enkf_24_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_24_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_24_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_24;hprior@enkf_24;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_24_PREPTAG = T;
    CCMA_nT_enkf_24_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_24_PREPTAG;
  return CCMA_T_enkf_24_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_24(void *T);
extern int CCMA_Unpack_T_enkf_24(void *T);
extern int CCMA_Sel_T_enkf_24(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_24);
PrePutTable(CCMA, d, double, enkf_24);
PreLoadTable(CCMA, enkf_24);
PreStoreTable(CCMA, enkf_24);
extern void CCMA_Dim_T_enkf_24(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_24(void *T);
extern int CCMA_Sql_T_enkf_24(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_24(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_25) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_25" : appearance order#30, hierarchy rank# 54, weight = 358.000030 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_25;

#endif /* defined(IS_a_TABLE_enkf_25) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_25)
extern const ODB_Tags *CCMA_Set_T_enkf_25_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_25_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_25_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_25_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_25_TAG = 0;
PRIVATE int CCMA_nT_enkf_25_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_25_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_25_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_25_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_25"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_25"; T[1].name = s; }
    CCMA_T_enkf_25_TAG = T;
    CCMA_nT_enkf_25_TAG = ntag;
    CCMA_nT_enkf_25_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_25_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_25_MEM;
  return CCMA_T_enkf_25_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_25_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_25_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_25;hprior@enkf_25;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_25_PREPTAG = T;
    CCMA_nT_enkf_25_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_25_PREPTAG;
  return CCMA_T_enkf_25_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_25(void *T);
extern int CCMA_Unpack_T_enkf_25(void *T);
extern int CCMA_Sel_T_enkf_25(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_25);
PrePutTable(CCMA, d, double, enkf_25);
PreLoadTable(CCMA, enkf_25);
PreStoreTable(CCMA, enkf_25);
extern void CCMA_Dim_T_enkf_25(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_25(void *T);
extern int CCMA_Sql_T_enkf_25(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_25(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_26) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_26" : appearance order#31, hierarchy rank# 55, weight = 358.000031 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_26;

#endif /* defined(IS_a_TABLE_enkf_26) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_26)
extern const ODB_Tags *CCMA_Set_T_enkf_26_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_26_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_26_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_26_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_26_TAG = 0;
PRIVATE int CCMA_nT_enkf_26_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_26_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_26_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_26_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_26"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_26"; T[1].name = s; }
    CCMA_T_enkf_26_TAG = T;
    CCMA_nT_enkf_26_TAG = ntag;
    CCMA_nT_enkf_26_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_26_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_26_MEM;
  return CCMA_T_enkf_26_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_26_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_26_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_26;hprior@enkf_26;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_26_PREPTAG = T;
    CCMA_nT_enkf_26_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_26_PREPTAG;
  return CCMA_T_enkf_26_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_26(void *T);
extern int CCMA_Unpack_T_enkf_26(void *T);
extern int CCMA_Sel_T_enkf_26(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_26);
PrePutTable(CCMA, d, double, enkf_26);
PreLoadTable(CCMA, enkf_26);
PreStoreTable(CCMA, enkf_26);
extern void CCMA_Dim_T_enkf_26(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_26(void *T);
extern int CCMA_Sql_T_enkf_26(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_26(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_27) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_27" : appearance order#32, hierarchy rank# 56, weight = 358.000032 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_27;

#endif /* defined(IS_a_TABLE_enkf_27) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_27)
extern const ODB_Tags *CCMA_Set_T_enkf_27_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_27_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_27_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_27_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_27_TAG = 0;
PRIVATE int CCMA_nT_enkf_27_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_27_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_27_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_27_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_27"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_27"; T[1].name = s; }
    CCMA_T_enkf_27_TAG = T;
    CCMA_nT_enkf_27_TAG = ntag;
    CCMA_nT_enkf_27_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_27_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_27_MEM;
  return CCMA_T_enkf_27_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_27_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_27_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_27;hprior@enkf_27;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_27_PREPTAG = T;
    CCMA_nT_enkf_27_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_27_PREPTAG;
  return CCMA_T_enkf_27_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_27(void *T);
extern int CCMA_Unpack_T_enkf_27(void *T);
extern int CCMA_Sel_T_enkf_27(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_27);
PrePutTable(CCMA, d, double, enkf_27);
PreLoadTable(CCMA, enkf_27);
PreStoreTable(CCMA, enkf_27);
extern void CCMA_Dim_T_enkf_27(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_27(void *T);
extern int CCMA_Sql_T_enkf_27(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_27(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_28) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_28" : appearance order#33, hierarchy rank# 57, weight = 358.000033 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_28;

#endif /* defined(IS_a_TABLE_enkf_28) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_28)
extern const ODB_Tags *CCMA_Set_T_enkf_28_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_28_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_28_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_28_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_28_TAG = 0;
PRIVATE int CCMA_nT_enkf_28_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_28_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_28_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_28_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_28"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_28"; T[1].name = s; }
    CCMA_T_enkf_28_TAG = T;
    CCMA_nT_enkf_28_TAG = ntag;
    CCMA_nT_enkf_28_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_28_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_28_MEM;
  return CCMA_T_enkf_28_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_28_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_28_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_28;hprior@enkf_28;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_28_PREPTAG = T;
    CCMA_nT_enkf_28_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_28_PREPTAG;
  return CCMA_T_enkf_28_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_28(void *T);
extern int CCMA_Unpack_T_enkf_28(void *T);
extern int CCMA_Sel_T_enkf_28(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_28);
PrePutTable(CCMA, d, double, enkf_28);
PreLoadTable(CCMA, enkf_28);
PreStoreTable(CCMA, enkf_28);
extern void CCMA_Dim_T_enkf_28(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_28(void *T);
extern int CCMA_Sql_T_enkf_28(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_28(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_29) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_29" : appearance order#34, hierarchy rank# 58, weight = 358.000034 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_29;

#endif /* defined(IS_a_TABLE_enkf_29) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_29)
extern const ODB_Tags *CCMA_Set_T_enkf_29_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_29_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_29_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_29_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_29_TAG = 0;
PRIVATE int CCMA_nT_enkf_29_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_29_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_29_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_29_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_29"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_29"; T[1].name = s; }
    CCMA_T_enkf_29_TAG = T;
    CCMA_nT_enkf_29_TAG = ntag;
    CCMA_nT_enkf_29_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_29_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_29_MEM;
  return CCMA_T_enkf_29_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_29_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_29_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_29;hprior@enkf_29;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_29_PREPTAG = T;
    CCMA_nT_enkf_29_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_29_PREPTAG;
  return CCMA_T_enkf_29_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_29(void *T);
extern int CCMA_Unpack_T_enkf_29(void *T);
extern int CCMA_Sel_T_enkf_29(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_29);
PrePutTable(CCMA, d, double, enkf_29);
PreLoadTable(CCMA, enkf_29);
PreStoreTable(CCMA, enkf_29);
extern void CCMA_Dim_T_enkf_29(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_29(void *T);
extern int CCMA_Sql_T_enkf_29(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_29(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_30) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_30" : appearance order#35, hierarchy rank# 59, weight = 358.000035 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_30;

#endif /* defined(IS_a_TABLE_enkf_30) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_30)
extern const ODB_Tags *CCMA_Set_T_enkf_30_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_30_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_30_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_30_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_30_TAG = 0;
PRIVATE int CCMA_nT_enkf_30_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_30_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_30_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_30_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_30"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_30"; T[1].name = s; }
    CCMA_T_enkf_30_TAG = T;
    CCMA_nT_enkf_30_TAG = ntag;
    CCMA_nT_enkf_30_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_30_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_30_MEM;
  return CCMA_T_enkf_30_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_30_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_30_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_30;hprior@enkf_30;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_30_PREPTAG = T;
    CCMA_nT_enkf_30_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_30_PREPTAG;
  return CCMA_T_enkf_30_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_30(void *T);
extern int CCMA_Unpack_T_enkf_30(void *T);
extern int CCMA_Sel_T_enkf_30(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_30);
PrePutTable(CCMA, d, double, enkf_30);
PreLoadTable(CCMA, enkf_30);
PreStoreTable(CCMA, enkf_30);
extern void CCMA_Dim_T_enkf_30(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_30(void *T);
extern int CCMA_Sql_T_enkf_30(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_30(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_31) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_31" : appearance order#36, hierarchy rank# 60, weight = 358.000036 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_31;

#endif /* defined(IS_a_TABLE_enkf_31) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_31)
extern const ODB_Tags *CCMA_Set_T_enkf_31_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_31_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_31_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_31_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_31_TAG = 0;
PRIVATE int CCMA_nT_enkf_31_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_31_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_31_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_31_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_31"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_31"; T[1].name = s; }
    CCMA_T_enkf_31_TAG = T;
    CCMA_nT_enkf_31_TAG = ntag;
    CCMA_nT_enkf_31_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_31_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_31_MEM;
  return CCMA_T_enkf_31_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_31_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_31_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_31;hprior@enkf_31;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_31_PREPTAG = T;
    CCMA_nT_enkf_31_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_31_PREPTAG;
  return CCMA_T_enkf_31_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_31(void *T);
extern int CCMA_Unpack_T_enkf_31(void *T);
extern int CCMA_Sel_T_enkf_31(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_31);
PrePutTable(CCMA, d, double, enkf_31);
PreLoadTable(CCMA, enkf_31);
PreStoreTable(CCMA, enkf_31);
extern void CCMA_Dim_T_enkf_31(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_31(void *T);
extern int CCMA_Sql_T_enkf_31(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_31(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_32) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_32" : appearance order#37, hierarchy rank# 61, weight = 358.000037 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_32;

#endif /* defined(IS_a_TABLE_enkf_32) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_32)
extern const ODB_Tags *CCMA_Set_T_enkf_32_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_32_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_32_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_32_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_32_TAG = 0;
PRIVATE int CCMA_nT_enkf_32_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_32_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_32_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_32_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_32"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_32"; T[1].name = s; }
    CCMA_T_enkf_32_TAG = T;
    CCMA_nT_enkf_32_TAG = ntag;
    CCMA_nT_enkf_32_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_32_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_32_MEM;
  return CCMA_T_enkf_32_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_32_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_32_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_32;hprior@enkf_32;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_32_PREPTAG = T;
    CCMA_nT_enkf_32_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_32_PREPTAG;
  return CCMA_T_enkf_32_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_32(void *T);
extern int CCMA_Unpack_T_enkf_32(void *T);
extern int CCMA_Sel_T_enkf_32(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_32);
PrePutTable(CCMA, d, double, enkf_32);
PreLoadTable(CCMA, enkf_32);
PreStoreTable(CCMA, enkf_32);
extern void CCMA_Dim_T_enkf_32(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_32(void *T);
extern int CCMA_Sql_T_enkf_32(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_32(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_33) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_33" : appearance order#38, hierarchy rank# 62, weight = 358.000038 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_33;

#endif /* defined(IS_a_TABLE_enkf_33) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_33)
extern const ODB_Tags *CCMA_Set_T_enkf_33_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_33_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_33_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_33_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_33_TAG = 0;
PRIVATE int CCMA_nT_enkf_33_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_33_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_33_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_33_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_33"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_33"; T[1].name = s; }
    CCMA_T_enkf_33_TAG = T;
    CCMA_nT_enkf_33_TAG = ntag;
    CCMA_nT_enkf_33_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_33_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_33_MEM;
  return CCMA_T_enkf_33_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_33_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_33_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_33;hprior@enkf_33;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_33_PREPTAG = T;
    CCMA_nT_enkf_33_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_33_PREPTAG;
  return CCMA_T_enkf_33_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_33(void *T);
extern int CCMA_Unpack_T_enkf_33(void *T);
extern int CCMA_Sel_T_enkf_33(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_33);
PrePutTable(CCMA, d, double, enkf_33);
PreLoadTable(CCMA, enkf_33);
PreStoreTable(CCMA, enkf_33);
extern void CCMA_Dim_T_enkf_33(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_33(void *T);
extern int CCMA_Sql_T_enkf_33(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_33(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_34) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_34" : appearance order#39, hierarchy rank# 63, weight = 358.000039 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_34;

#endif /* defined(IS_a_TABLE_enkf_34) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_34)
extern const ODB_Tags *CCMA_Set_T_enkf_34_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_34_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_34_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_34_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_34_TAG = 0;
PRIVATE int CCMA_nT_enkf_34_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_34_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_34_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_34_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_34"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_34"; T[1].name = s; }
    CCMA_T_enkf_34_TAG = T;
    CCMA_nT_enkf_34_TAG = ntag;
    CCMA_nT_enkf_34_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_34_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_34_MEM;
  return CCMA_T_enkf_34_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_34_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_34_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_34;hprior@enkf_34;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_34_PREPTAG = T;
    CCMA_nT_enkf_34_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_34_PREPTAG;
  return CCMA_T_enkf_34_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_34(void *T);
extern int CCMA_Unpack_T_enkf_34(void *T);
extern int CCMA_Sel_T_enkf_34(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_34);
PrePutTable(CCMA, d, double, enkf_34);
PreLoadTable(CCMA, enkf_34);
PreStoreTable(CCMA, enkf_34);
extern void CCMA_Dim_T_enkf_34(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_34(void *T);
extern int CCMA_Sql_T_enkf_34(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_34(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_35) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_35" : appearance order#40, hierarchy rank# 64, weight = 358.000040 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_35;

#endif /* defined(IS_a_TABLE_enkf_35) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_35)
extern const ODB_Tags *CCMA_Set_T_enkf_35_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_35_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_35_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_35_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_35_TAG = 0;
PRIVATE int CCMA_nT_enkf_35_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_35_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_35_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_35_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_35"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_35"; T[1].name = s; }
    CCMA_T_enkf_35_TAG = T;
    CCMA_nT_enkf_35_TAG = ntag;
    CCMA_nT_enkf_35_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_35_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_35_MEM;
  return CCMA_T_enkf_35_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_35_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_35_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_35;hprior@enkf_35;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_35_PREPTAG = T;
    CCMA_nT_enkf_35_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_35_PREPTAG;
  return CCMA_T_enkf_35_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_35(void *T);
extern int CCMA_Unpack_T_enkf_35(void *T);
extern int CCMA_Sel_T_enkf_35(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_35);
PrePutTable(CCMA, d, double, enkf_35);
PreLoadTable(CCMA, enkf_35);
PreStoreTable(CCMA, enkf_35);
extern void CCMA_Dim_T_enkf_35(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_35(void *T);
extern int CCMA_Sql_T_enkf_35(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_35(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_36) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_36" : appearance order#41, hierarchy rank# 65, weight = 358.000041 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_36;

#endif /* defined(IS_a_TABLE_enkf_36) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_36)
extern const ODB_Tags *CCMA_Set_T_enkf_36_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_36_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_36_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_36_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_36_TAG = 0;
PRIVATE int CCMA_nT_enkf_36_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_36_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_36_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_36_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_36"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_36"; T[1].name = s; }
    CCMA_T_enkf_36_TAG = T;
    CCMA_nT_enkf_36_TAG = ntag;
    CCMA_nT_enkf_36_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_36_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_36_MEM;
  return CCMA_T_enkf_36_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_36_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_36_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_36;hprior@enkf_36;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_36_PREPTAG = T;
    CCMA_nT_enkf_36_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_36_PREPTAG;
  return CCMA_T_enkf_36_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_36(void *T);
extern int CCMA_Unpack_T_enkf_36(void *T);
extern int CCMA_Sel_T_enkf_36(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_36);
PrePutTable(CCMA, d, double, enkf_36);
PreLoadTable(CCMA, enkf_36);
PreStoreTable(CCMA, enkf_36);
extern void CCMA_Dim_T_enkf_36(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_36(void *T);
extern int CCMA_Sql_T_enkf_36(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_36(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_37) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_37" : appearance order#42, hierarchy rank# 66, weight = 358.000042 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_37;

#endif /* defined(IS_a_TABLE_enkf_37) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_37)
extern const ODB_Tags *CCMA_Set_T_enkf_37_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_37_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_37_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_37_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_37_TAG = 0;
PRIVATE int CCMA_nT_enkf_37_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_37_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_37_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_37_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_37"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_37"; T[1].name = s; }
    CCMA_T_enkf_37_TAG = T;
    CCMA_nT_enkf_37_TAG = ntag;
    CCMA_nT_enkf_37_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_37_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_37_MEM;
  return CCMA_T_enkf_37_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_37_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_37_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_37;hprior@enkf_37;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_37_PREPTAG = T;
    CCMA_nT_enkf_37_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_37_PREPTAG;
  return CCMA_T_enkf_37_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_37(void *T);
extern int CCMA_Unpack_T_enkf_37(void *T);
extern int CCMA_Sel_T_enkf_37(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_37);
PrePutTable(CCMA, d, double, enkf_37);
PreLoadTable(CCMA, enkf_37);
PreStoreTable(CCMA, enkf_37);
extern void CCMA_Dim_T_enkf_37(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_37(void *T);
extern int CCMA_Sql_T_enkf_37(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_37(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_38) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_38" : appearance order#43, hierarchy rank# 67, weight = 358.000043 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_38;

#endif /* defined(IS_a_TABLE_enkf_38) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_38)
extern const ODB_Tags *CCMA_Set_T_enkf_38_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_38_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_38_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_38_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_38_TAG = 0;
PRIVATE int CCMA_nT_enkf_38_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_38_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_38_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_38_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_38"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_38"; T[1].name = s; }
    CCMA_T_enkf_38_TAG = T;
    CCMA_nT_enkf_38_TAG = ntag;
    CCMA_nT_enkf_38_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_38_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_38_MEM;
  return CCMA_T_enkf_38_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_38_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_38_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_38;hprior@enkf_38;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_38_PREPTAG = T;
    CCMA_nT_enkf_38_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_38_PREPTAG;
  return CCMA_T_enkf_38_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_38(void *T);
extern int CCMA_Unpack_T_enkf_38(void *T);
extern int CCMA_Sel_T_enkf_38(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_38);
PrePutTable(CCMA, d, double, enkf_38);
PreLoadTable(CCMA, enkf_38);
PreStoreTable(CCMA, enkf_38);
extern void CCMA_Dim_T_enkf_38(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_38(void *T);
extern int CCMA_Sql_T_enkf_38(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_38(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_39) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_39" : appearance order#44, hierarchy rank# 68, weight = 358.000044 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_39;

#endif /* defined(IS_a_TABLE_enkf_39) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_39)
extern const ODB_Tags *CCMA_Set_T_enkf_39_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_39_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_39_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_39_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_39_TAG = 0;
PRIVATE int CCMA_nT_enkf_39_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_39_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_39_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_39_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_39"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_39"; T[1].name = s; }
    CCMA_T_enkf_39_TAG = T;
    CCMA_nT_enkf_39_TAG = ntag;
    CCMA_nT_enkf_39_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_39_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_39_MEM;
  return CCMA_T_enkf_39_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_39_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_39_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_39;hprior@enkf_39;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_39_PREPTAG = T;
    CCMA_nT_enkf_39_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_39_PREPTAG;
  return CCMA_T_enkf_39_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_39(void *T);
extern int CCMA_Unpack_T_enkf_39(void *T);
extern int CCMA_Sel_T_enkf_39(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_39);
PrePutTable(CCMA, d, double, enkf_39);
PreLoadTable(CCMA, enkf_39);
PreStoreTable(CCMA, enkf_39);
extern void CCMA_Dim_T_enkf_39(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_39(void *T);
extern int CCMA_Sql_T_enkf_39(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_39(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_40) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_40" : appearance order#45, hierarchy rank# 69, weight = 358.000045 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_40;

#endif /* defined(IS_a_TABLE_enkf_40) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_40)
extern const ODB_Tags *CCMA_Set_T_enkf_40_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_40_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_40_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_40_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_40_TAG = 0;
PRIVATE int CCMA_nT_enkf_40_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_40_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_40_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_40_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_40"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_40"; T[1].name = s; }
    CCMA_T_enkf_40_TAG = T;
    CCMA_nT_enkf_40_TAG = ntag;
    CCMA_nT_enkf_40_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_40_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_40_MEM;
  return CCMA_T_enkf_40_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_40_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_40_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_40;hprior@enkf_40;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_40_PREPTAG = T;
    CCMA_nT_enkf_40_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_40_PREPTAG;
  return CCMA_T_enkf_40_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_40(void *T);
extern int CCMA_Unpack_T_enkf_40(void *T);
extern int CCMA_Sel_T_enkf_40(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_40);
PrePutTable(CCMA, d, double, enkf_40);
PreLoadTable(CCMA, enkf_40);
PreStoreTable(CCMA, enkf_40);
extern void CCMA_Dim_T_enkf_40(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_40(void *T);
extern int CCMA_Sql_T_enkf_40(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_40(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_41) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_41" : appearance order#46, hierarchy rank# 70, weight = 358.000046 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_41;

#endif /* defined(IS_a_TABLE_enkf_41) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_41)
extern const ODB_Tags *CCMA_Set_T_enkf_41_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_41_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_41_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_41_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_41_TAG = 0;
PRIVATE int CCMA_nT_enkf_41_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_41_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_41_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_41_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_41"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_41"; T[1].name = s; }
    CCMA_T_enkf_41_TAG = T;
    CCMA_nT_enkf_41_TAG = ntag;
    CCMA_nT_enkf_41_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_41_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_41_MEM;
  return CCMA_T_enkf_41_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_41_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_41_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_41;hprior@enkf_41;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_41_PREPTAG = T;
    CCMA_nT_enkf_41_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_41_PREPTAG;
  return CCMA_T_enkf_41_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_41(void *T);
extern int CCMA_Unpack_T_enkf_41(void *T);
extern int CCMA_Sel_T_enkf_41(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_41);
PrePutTable(CCMA, d, double, enkf_41);
PreLoadTable(CCMA, enkf_41);
PreStoreTable(CCMA, enkf_41);
extern void CCMA_Dim_T_enkf_41(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_41(void *T);
extern int CCMA_Sql_T_enkf_41(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_41(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_42) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_42" : appearance order#47, hierarchy rank# 71, weight = 358.000047 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_42;

#endif /* defined(IS_a_TABLE_enkf_42) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_42)
extern const ODB_Tags *CCMA_Set_T_enkf_42_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_42_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_42_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_42_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_42_TAG = 0;
PRIVATE int CCMA_nT_enkf_42_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_42_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_42_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_42_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_42"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_42"; T[1].name = s; }
    CCMA_T_enkf_42_TAG = T;
    CCMA_nT_enkf_42_TAG = ntag;
    CCMA_nT_enkf_42_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_42_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_42_MEM;
  return CCMA_T_enkf_42_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_42_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_42_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_42;hprior@enkf_42;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_42_PREPTAG = T;
    CCMA_nT_enkf_42_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_42_PREPTAG;
  return CCMA_T_enkf_42_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_42(void *T);
extern int CCMA_Unpack_T_enkf_42(void *T);
extern int CCMA_Sel_T_enkf_42(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_42);
PrePutTable(CCMA, d, double, enkf_42);
PreLoadTable(CCMA, enkf_42);
PreStoreTable(CCMA, enkf_42);
extern void CCMA_Dim_T_enkf_42(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_42(void *T);
extern int CCMA_Sql_T_enkf_42(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_42(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_43) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_43" : appearance order#48, hierarchy rank# 72, weight = 358.000048 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_43;

#endif /* defined(IS_a_TABLE_enkf_43) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_43)
extern const ODB_Tags *CCMA_Set_T_enkf_43_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_43_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_43_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_43_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_43_TAG = 0;
PRIVATE int CCMA_nT_enkf_43_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_43_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_43_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_43_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_43"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_43"; T[1].name = s; }
    CCMA_T_enkf_43_TAG = T;
    CCMA_nT_enkf_43_TAG = ntag;
    CCMA_nT_enkf_43_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_43_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_43_MEM;
  return CCMA_T_enkf_43_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_43_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_43_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_43;hprior@enkf_43;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_43_PREPTAG = T;
    CCMA_nT_enkf_43_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_43_PREPTAG;
  return CCMA_T_enkf_43_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_43(void *T);
extern int CCMA_Unpack_T_enkf_43(void *T);
extern int CCMA_Sel_T_enkf_43(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_43);
PrePutTable(CCMA, d, double, enkf_43);
PreLoadTable(CCMA, enkf_43);
PreStoreTable(CCMA, enkf_43);
extern void CCMA_Dim_T_enkf_43(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_43(void *T);
extern int CCMA_Sql_T_enkf_43(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_43(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_44) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_44" : appearance order#49, hierarchy rank# 73, weight = 358.000049 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_44;

#endif /* defined(IS_a_TABLE_enkf_44) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_44)
extern const ODB_Tags *CCMA_Set_T_enkf_44_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_44_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_44_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_44_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_44_TAG = 0;
PRIVATE int CCMA_nT_enkf_44_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_44_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_44_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_44_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_44"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_44"; T[1].name = s; }
    CCMA_T_enkf_44_TAG = T;
    CCMA_nT_enkf_44_TAG = ntag;
    CCMA_nT_enkf_44_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_44_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_44_MEM;
  return CCMA_T_enkf_44_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_44_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_44_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_44;hprior@enkf_44;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_44_PREPTAG = T;
    CCMA_nT_enkf_44_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_44_PREPTAG;
  return CCMA_T_enkf_44_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_44(void *T);
extern int CCMA_Unpack_T_enkf_44(void *T);
extern int CCMA_Sel_T_enkf_44(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_44);
PrePutTable(CCMA, d, double, enkf_44);
PreLoadTable(CCMA, enkf_44);
PreStoreTable(CCMA, enkf_44);
extern void CCMA_Dim_T_enkf_44(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_44(void *T);
extern int CCMA_Sql_T_enkf_44(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_44(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_45) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_45" : appearance order#50, hierarchy rank# 74, weight = 358.000050 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_45;

#endif /* defined(IS_a_TABLE_enkf_45) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_45)
extern const ODB_Tags *CCMA_Set_T_enkf_45_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_45_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_45_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_45_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_45_TAG = 0;
PRIVATE int CCMA_nT_enkf_45_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_45_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_45_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_45_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_45"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_45"; T[1].name = s; }
    CCMA_T_enkf_45_TAG = T;
    CCMA_nT_enkf_45_TAG = ntag;
    CCMA_nT_enkf_45_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_45_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_45_MEM;
  return CCMA_T_enkf_45_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_45_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_45_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_45;hprior@enkf_45;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_45_PREPTAG = T;
    CCMA_nT_enkf_45_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_45_PREPTAG;
  return CCMA_T_enkf_45_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_45(void *T);
extern int CCMA_Unpack_T_enkf_45(void *T);
extern int CCMA_Sel_T_enkf_45(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_45);
PrePutTable(CCMA, d, double, enkf_45);
PreLoadTable(CCMA, enkf_45);
PreStoreTable(CCMA, enkf_45);
extern void CCMA_Dim_T_enkf_45(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_45(void *T);
extern int CCMA_Sql_T_enkf_45(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_45(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_46) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_46" : appearance order#51, hierarchy rank# 75, weight = 358.000051 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_46;

#endif /* defined(IS_a_TABLE_enkf_46) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_46)
extern const ODB_Tags *CCMA_Set_T_enkf_46_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_46_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_46_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_46_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_46_TAG = 0;
PRIVATE int CCMA_nT_enkf_46_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_46_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_46_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_46_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_46"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_46"; T[1].name = s; }
    CCMA_T_enkf_46_TAG = T;
    CCMA_nT_enkf_46_TAG = ntag;
    CCMA_nT_enkf_46_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_46_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_46_MEM;
  return CCMA_T_enkf_46_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_46_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_46_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_46;hprior@enkf_46;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_46_PREPTAG = T;
    CCMA_nT_enkf_46_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_46_PREPTAG;
  return CCMA_T_enkf_46_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_46(void *T);
extern int CCMA_Unpack_T_enkf_46(void *T);
extern int CCMA_Sel_T_enkf_46(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_46);
PrePutTable(CCMA, d, double, enkf_46);
PreLoadTable(CCMA, enkf_46);
PreStoreTable(CCMA, enkf_46);
extern void CCMA_Dim_T_enkf_46(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_46(void *T);
extern int CCMA_Sql_T_enkf_46(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_46(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_47) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_47" : appearance order#52, hierarchy rank# 76, weight = 358.000052 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_47;

#endif /* defined(IS_a_TABLE_enkf_47) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_47)
extern const ODB_Tags *CCMA_Set_T_enkf_47_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_47_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_47_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_47_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_47_TAG = 0;
PRIVATE int CCMA_nT_enkf_47_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_47_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_47_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_47_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_47"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_47"; T[1].name = s; }
    CCMA_T_enkf_47_TAG = T;
    CCMA_nT_enkf_47_TAG = ntag;
    CCMA_nT_enkf_47_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_47_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_47_MEM;
  return CCMA_T_enkf_47_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_47_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_47_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_47;hprior@enkf_47;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_47_PREPTAG = T;
    CCMA_nT_enkf_47_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_47_PREPTAG;
  return CCMA_T_enkf_47_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_47(void *T);
extern int CCMA_Unpack_T_enkf_47(void *T);
extern int CCMA_Sel_T_enkf_47(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_47);
PrePutTable(CCMA, d, double, enkf_47);
PreLoadTable(CCMA, enkf_47);
PreStoreTable(CCMA, enkf_47);
extern void CCMA_Dim_T_enkf_47(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_47(void *T);
extern int CCMA_Sql_T_enkf_47(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_47(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_48) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_48" : appearance order#53, hierarchy rank# 77, weight = 358.000053 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_48;

#endif /* defined(IS_a_TABLE_enkf_48) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_48)
extern const ODB_Tags *CCMA_Set_T_enkf_48_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_48_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_48_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_48_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_48_TAG = 0;
PRIVATE int CCMA_nT_enkf_48_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_48_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_48_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_48_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_48"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_48"; T[1].name = s; }
    CCMA_T_enkf_48_TAG = T;
    CCMA_nT_enkf_48_TAG = ntag;
    CCMA_nT_enkf_48_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_48_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_48_MEM;
  return CCMA_T_enkf_48_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_48_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_48_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_48;hprior@enkf_48;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_48_PREPTAG = T;
    CCMA_nT_enkf_48_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_48_PREPTAG;
  return CCMA_T_enkf_48_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_48(void *T);
extern int CCMA_Unpack_T_enkf_48(void *T);
extern int CCMA_Sel_T_enkf_48(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_48);
PrePutTable(CCMA, d, double, enkf_48);
PreLoadTable(CCMA, enkf_48);
PreStoreTable(CCMA, enkf_48);
extern void CCMA_Dim_T_enkf_48(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_48(void *T);
extern int CCMA_Sql_T_enkf_48(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_48(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_49) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_49" : appearance order#54, hierarchy rank# 78, weight = 358.000054 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_49;

#endif /* defined(IS_a_TABLE_enkf_49) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_49)
extern const ODB_Tags *CCMA_Set_T_enkf_49_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_49_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_49_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_49_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_49_TAG = 0;
PRIVATE int CCMA_nT_enkf_49_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_49_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_49_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_49_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_49"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_49"; T[1].name = s; }
    CCMA_T_enkf_49_TAG = T;
    CCMA_nT_enkf_49_TAG = ntag;
    CCMA_nT_enkf_49_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_49_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_49_MEM;
  return CCMA_T_enkf_49_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_49_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_49_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_49;hprior@enkf_49;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_49_PREPTAG = T;
    CCMA_nT_enkf_49_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_49_PREPTAG;
  return CCMA_T_enkf_49_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_49(void *T);
extern int CCMA_Unpack_T_enkf_49(void *T);
extern int CCMA_Sel_T_enkf_49(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_49);
PrePutTable(CCMA, d, double, enkf_49);
PreLoadTable(CCMA, enkf_49);
PreStoreTable(CCMA, enkf_49);
extern void CCMA_Dim_T_enkf_49(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_49(void *T);
extern int CCMA_Sql_T_enkf_49(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_49(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_50) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_50" : appearance order#55, hierarchy rank# 79, weight = 358.000055 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_50;

#endif /* defined(IS_a_TABLE_enkf_50) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_50)
extern const ODB_Tags *CCMA_Set_T_enkf_50_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_50_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_50_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_50_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_50_TAG = 0;
PRIVATE int CCMA_nT_enkf_50_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_50_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_50_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_50_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_50"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_50"; T[1].name = s; }
    CCMA_T_enkf_50_TAG = T;
    CCMA_nT_enkf_50_TAG = ntag;
    CCMA_nT_enkf_50_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_50_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_50_MEM;
  return CCMA_T_enkf_50_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_50_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_50_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_50;hprior@enkf_50;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_50_PREPTAG = T;
    CCMA_nT_enkf_50_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_50_PREPTAG;
  return CCMA_T_enkf_50_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_50(void *T);
extern int CCMA_Unpack_T_enkf_50(void *T);
extern int CCMA_Sel_T_enkf_50(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_50);
PrePutTable(CCMA, d, double, enkf_50);
PreLoadTable(CCMA, enkf_50);
PreStoreTable(CCMA, enkf_50);
extern void CCMA_Dim_T_enkf_50(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_50(void *T);
extern int CCMA_Sql_T_enkf_50(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_50(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_51) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_51" : appearance order#56, hierarchy rank# 80, weight = 358.000056 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_51;

#endif /* defined(IS_a_TABLE_enkf_51) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_51)
extern const ODB_Tags *CCMA_Set_T_enkf_51_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_51_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_51_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_51_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_51_TAG = 0;
PRIVATE int CCMA_nT_enkf_51_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_51_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_51_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_51_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_51"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_51"; T[1].name = s; }
    CCMA_T_enkf_51_TAG = T;
    CCMA_nT_enkf_51_TAG = ntag;
    CCMA_nT_enkf_51_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_51_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_51_MEM;
  return CCMA_T_enkf_51_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_51_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_51_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_51;hprior@enkf_51;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_51_PREPTAG = T;
    CCMA_nT_enkf_51_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_51_PREPTAG;
  return CCMA_T_enkf_51_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_51(void *T);
extern int CCMA_Unpack_T_enkf_51(void *T);
extern int CCMA_Sel_T_enkf_51(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_51);
PrePutTable(CCMA, d, double, enkf_51);
PreLoadTable(CCMA, enkf_51);
PreStoreTable(CCMA, enkf_51);
extern void CCMA_Dim_T_enkf_51(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_51(void *T);
extern int CCMA_Sql_T_enkf_51(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_51(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_52) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_52" : appearance order#57, hierarchy rank# 81, weight = 358.000057 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_52;

#endif /* defined(IS_a_TABLE_enkf_52) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_52)
extern const ODB_Tags *CCMA_Set_T_enkf_52_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_52_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_52_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_52_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_52_TAG = 0;
PRIVATE int CCMA_nT_enkf_52_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_52_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_52_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_52_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_52"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_52"; T[1].name = s; }
    CCMA_T_enkf_52_TAG = T;
    CCMA_nT_enkf_52_TAG = ntag;
    CCMA_nT_enkf_52_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_52_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_52_MEM;
  return CCMA_T_enkf_52_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_52_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_52_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_52;hprior@enkf_52;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_52_PREPTAG = T;
    CCMA_nT_enkf_52_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_52_PREPTAG;
  return CCMA_T_enkf_52_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_52(void *T);
extern int CCMA_Unpack_T_enkf_52(void *T);
extern int CCMA_Sel_T_enkf_52(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_52);
PrePutTable(CCMA, d, double, enkf_52);
PreLoadTable(CCMA, enkf_52);
PreStoreTable(CCMA, enkf_52);
extern void CCMA_Dim_T_enkf_52(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_52(void *T);
extern int CCMA_Sql_T_enkf_52(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_52(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_53) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_53" : appearance order#58, hierarchy rank# 82, weight = 358.000058 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_53;

#endif /* defined(IS_a_TABLE_enkf_53) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_53)
extern const ODB_Tags *CCMA_Set_T_enkf_53_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_53_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_53_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_53_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_53_TAG = 0;
PRIVATE int CCMA_nT_enkf_53_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_53_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_53_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_53_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_53"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_53"; T[1].name = s; }
    CCMA_T_enkf_53_TAG = T;
    CCMA_nT_enkf_53_TAG = ntag;
    CCMA_nT_enkf_53_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_53_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_53_MEM;
  return CCMA_T_enkf_53_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_53_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_53_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_53;hprior@enkf_53;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_53_PREPTAG = T;
    CCMA_nT_enkf_53_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_53_PREPTAG;
  return CCMA_T_enkf_53_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_53(void *T);
extern int CCMA_Unpack_T_enkf_53(void *T);
extern int CCMA_Sel_T_enkf_53(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_53);
PrePutTable(CCMA, d, double, enkf_53);
PreLoadTable(CCMA, enkf_53);
PreStoreTable(CCMA, enkf_53);
extern void CCMA_Dim_T_enkf_53(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_53(void *T);
extern int CCMA_Sql_T_enkf_53(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_53(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_54) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_54" : appearance order#59, hierarchy rank# 83, weight = 358.000059 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_54;

#endif /* defined(IS_a_TABLE_enkf_54) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_54)
extern const ODB_Tags *CCMA_Set_T_enkf_54_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_54_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_54_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_54_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_54_TAG = 0;
PRIVATE int CCMA_nT_enkf_54_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_54_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_54_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_54_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_54"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_54"; T[1].name = s; }
    CCMA_T_enkf_54_TAG = T;
    CCMA_nT_enkf_54_TAG = ntag;
    CCMA_nT_enkf_54_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_54_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_54_MEM;
  return CCMA_T_enkf_54_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_54_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_54_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_54;hprior@enkf_54;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_54_PREPTAG = T;
    CCMA_nT_enkf_54_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_54_PREPTAG;
  return CCMA_T_enkf_54_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_54(void *T);
extern int CCMA_Unpack_T_enkf_54(void *T);
extern int CCMA_Sel_T_enkf_54(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_54);
PrePutTable(CCMA, d, double, enkf_54);
PreLoadTable(CCMA, enkf_54);
PreStoreTable(CCMA, enkf_54);
extern void CCMA_Dim_T_enkf_54(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_54(void *T);
extern int CCMA_Sql_T_enkf_54(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_54(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_55) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_55" : appearance order#60, hierarchy rank# 84, weight = 358.000060 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_55;

#endif /* defined(IS_a_TABLE_enkf_55) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_55)
extern const ODB_Tags *CCMA_Set_T_enkf_55_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_55_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_55_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_55_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_55_TAG = 0;
PRIVATE int CCMA_nT_enkf_55_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_55_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_55_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_55_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_55"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_55"; T[1].name = s; }
    CCMA_T_enkf_55_TAG = T;
    CCMA_nT_enkf_55_TAG = ntag;
    CCMA_nT_enkf_55_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_55_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_55_MEM;
  return CCMA_T_enkf_55_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_55_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_55_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_55;hprior@enkf_55;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_55_PREPTAG = T;
    CCMA_nT_enkf_55_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_55_PREPTAG;
  return CCMA_T_enkf_55_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_55(void *T);
extern int CCMA_Unpack_T_enkf_55(void *T);
extern int CCMA_Sel_T_enkf_55(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_55);
PrePutTable(CCMA, d, double, enkf_55);
PreLoadTable(CCMA, enkf_55);
PreStoreTable(CCMA, enkf_55);
extern void CCMA_Dim_T_enkf_55(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_55(void *T);
extern int CCMA_Sql_T_enkf_55(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_55(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_56) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_56" : appearance order#61, hierarchy rank# 85, weight = 358.000061 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_56;

#endif /* defined(IS_a_TABLE_enkf_56) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_56)
extern const ODB_Tags *CCMA_Set_T_enkf_56_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_56_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_56_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_56_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_56_TAG = 0;
PRIVATE int CCMA_nT_enkf_56_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_56_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_56_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_56_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_56"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_56"; T[1].name = s; }
    CCMA_T_enkf_56_TAG = T;
    CCMA_nT_enkf_56_TAG = ntag;
    CCMA_nT_enkf_56_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_56_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_56_MEM;
  return CCMA_T_enkf_56_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_56_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_56_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_56;hprior@enkf_56;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_56_PREPTAG = T;
    CCMA_nT_enkf_56_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_56_PREPTAG;
  return CCMA_T_enkf_56_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_56(void *T);
extern int CCMA_Unpack_T_enkf_56(void *T);
extern int CCMA_Sel_T_enkf_56(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_56);
PrePutTable(CCMA, d, double, enkf_56);
PreLoadTable(CCMA, enkf_56);
PreStoreTable(CCMA, enkf_56);
extern void CCMA_Dim_T_enkf_56(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_56(void *T);
extern int CCMA_Sql_T_enkf_56(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_56(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_57) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_57" : appearance order#62, hierarchy rank# 86, weight = 358.000062 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_57;

#endif /* defined(IS_a_TABLE_enkf_57) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_57)
extern const ODB_Tags *CCMA_Set_T_enkf_57_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_57_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_57_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_57_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_57_TAG = 0;
PRIVATE int CCMA_nT_enkf_57_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_57_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_57_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_57_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_57"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_57"; T[1].name = s; }
    CCMA_T_enkf_57_TAG = T;
    CCMA_nT_enkf_57_TAG = ntag;
    CCMA_nT_enkf_57_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_57_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_57_MEM;
  return CCMA_T_enkf_57_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_57_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_57_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_57;hprior@enkf_57;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_57_PREPTAG = T;
    CCMA_nT_enkf_57_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_57_PREPTAG;
  return CCMA_T_enkf_57_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_57(void *T);
extern int CCMA_Unpack_T_enkf_57(void *T);
extern int CCMA_Sel_T_enkf_57(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_57);
PrePutTable(CCMA, d, double, enkf_57);
PreLoadTable(CCMA, enkf_57);
PreStoreTable(CCMA, enkf_57);
extern void CCMA_Dim_T_enkf_57(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_57(void *T);
extern int CCMA_Sql_T_enkf_57(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_57(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_58) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_58" : appearance order#63, hierarchy rank# 87, weight = 358.000063 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_58;

#endif /* defined(IS_a_TABLE_enkf_58) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_58)
extern const ODB_Tags *CCMA_Set_T_enkf_58_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_58_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_58_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_58_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_58_TAG = 0;
PRIVATE int CCMA_nT_enkf_58_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_58_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_58_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_58_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_58"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_58"; T[1].name = s; }
    CCMA_T_enkf_58_TAG = T;
    CCMA_nT_enkf_58_TAG = ntag;
    CCMA_nT_enkf_58_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_58_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_58_MEM;
  return CCMA_T_enkf_58_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_58_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_58_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_58;hprior@enkf_58;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_58_PREPTAG = T;
    CCMA_nT_enkf_58_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_58_PREPTAG;
  return CCMA_T_enkf_58_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_58(void *T);
extern int CCMA_Unpack_T_enkf_58(void *T);
extern int CCMA_Sel_T_enkf_58(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_58);
PrePutTable(CCMA, d, double, enkf_58);
PreLoadTable(CCMA, enkf_58);
PreStoreTable(CCMA, enkf_58);
extern void CCMA_Dim_T_enkf_58(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_58(void *T);
extern int CCMA_Sql_T_enkf_58(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_58(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_59) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_59" : appearance order#64, hierarchy rank# 88, weight = 358.000064 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_59;

#endif /* defined(IS_a_TABLE_enkf_59) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_59)
extern const ODB_Tags *CCMA_Set_T_enkf_59_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_59_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_59_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_59_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_59_TAG = 0;
PRIVATE int CCMA_nT_enkf_59_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_59_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_59_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_59_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_59"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_59"; T[1].name = s; }
    CCMA_T_enkf_59_TAG = T;
    CCMA_nT_enkf_59_TAG = ntag;
    CCMA_nT_enkf_59_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_59_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_59_MEM;
  return CCMA_T_enkf_59_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_59_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_59_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_59;hprior@enkf_59;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_59_PREPTAG = T;
    CCMA_nT_enkf_59_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_59_PREPTAG;
  return CCMA_T_enkf_59_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_59(void *T);
extern int CCMA_Unpack_T_enkf_59(void *T);
extern int CCMA_Sel_T_enkf_59(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_59);
PrePutTable(CCMA, d, double, enkf_59);
PreLoadTable(CCMA, enkf_59);
PreStoreTable(CCMA, enkf_59);
extern void CCMA_Dim_T_enkf_59(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_59(void *T);
extern int CCMA_Sql_T_enkf_59(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_59(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_60) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_60" : appearance order#65, hierarchy rank# 89, weight = 358.000065 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_60;

#endif /* defined(IS_a_TABLE_enkf_60) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_60)
extern const ODB_Tags *CCMA_Set_T_enkf_60_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_60_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_60_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_60_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_60_TAG = 0;
PRIVATE int CCMA_nT_enkf_60_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_60_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_60_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_60_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_60"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_60"; T[1].name = s; }
    CCMA_T_enkf_60_TAG = T;
    CCMA_nT_enkf_60_TAG = ntag;
    CCMA_nT_enkf_60_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_60_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_60_MEM;
  return CCMA_T_enkf_60_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_60_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_60_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_60;hprior@enkf_60;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_60_PREPTAG = T;
    CCMA_nT_enkf_60_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_60_PREPTAG;
  return CCMA_T_enkf_60_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_60(void *T);
extern int CCMA_Unpack_T_enkf_60(void *T);
extern int CCMA_Sel_T_enkf_60(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_60);
PrePutTable(CCMA, d, double, enkf_60);
PreLoadTable(CCMA, enkf_60);
PreStoreTable(CCMA, enkf_60);
extern void CCMA_Dim_T_enkf_60(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_60(void *T);
extern int CCMA_Sql_T_enkf_60(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_60(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_61) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_61" : appearance order#66, hierarchy rank# 90, weight = 358.000066 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_61;

#endif /* defined(IS_a_TABLE_enkf_61) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_61)
extern const ODB_Tags *CCMA_Set_T_enkf_61_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_61_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_61_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_61_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_61_TAG = 0;
PRIVATE int CCMA_nT_enkf_61_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_61_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_61_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_61_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_61"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_61"; T[1].name = s; }
    CCMA_T_enkf_61_TAG = T;
    CCMA_nT_enkf_61_TAG = ntag;
    CCMA_nT_enkf_61_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_61_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_61_MEM;
  return CCMA_T_enkf_61_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_61_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_61_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_61;hprior@enkf_61;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_61_PREPTAG = T;
    CCMA_nT_enkf_61_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_61_PREPTAG;
  return CCMA_T_enkf_61_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_61(void *T);
extern int CCMA_Unpack_T_enkf_61(void *T);
extern int CCMA_Sel_T_enkf_61(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_61);
PrePutTable(CCMA, d, double, enkf_61);
PreLoadTable(CCMA, enkf_61);
PreStoreTable(CCMA, enkf_61);
extern void CCMA_Dim_T_enkf_61(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_61(void *T);
extern int CCMA_Sql_T_enkf_61(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_61(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_62) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_62" : appearance order#67, hierarchy rank# 91, weight = 358.000067 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_62;

#endif /* defined(IS_a_TABLE_enkf_62) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_62)
extern const ODB_Tags *CCMA_Set_T_enkf_62_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_62_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_62_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_62_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_62_TAG = 0;
PRIVATE int CCMA_nT_enkf_62_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_62_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_62_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_62_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_62"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_62"; T[1].name = s; }
    CCMA_T_enkf_62_TAG = T;
    CCMA_nT_enkf_62_TAG = ntag;
    CCMA_nT_enkf_62_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_62_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_62_MEM;
  return CCMA_T_enkf_62_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_62_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_62_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_62;hprior@enkf_62;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_62_PREPTAG = T;
    CCMA_nT_enkf_62_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_62_PREPTAG;
  return CCMA_T_enkf_62_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_62(void *T);
extern int CCMA_Unpack_T_enkf_62(void *T);
extern int CCMA_Sel_T_enkf_62(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_62);
PrePutTable(CCMA, d, double, enkf_62);
PreLoadTable(CCMA, enkf_62);
PreStoreTable(CCMA, enkf_62);
extern void CCMA_Dim_T_enkf_62(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_62(void *T);
extern int CCMA_Sql_T_enkf_62(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_62(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_63) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_63" : appearance order#68, hierarchy rank# 92, weight = 358.000068 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_63;

#endif /* defined(IS_a_TABLE_enkf_63) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_63)
extern const ODB_Tags *CCMA_Set_T_enkf_63_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_63_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_63_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_63_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_63_TAG = 0;
PRIVATE int CCMA_nT_enkf_63_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_63_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_63_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_63_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_63"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_63"; T[1].name = s; }
    CCMA_T_enkf_63_TAG = T;
    CCMA_nT_enkf_63_TAG = ntag;
    CCMA_nT_enkf_63_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_63_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_63_MEM;
  return CCMA_T_enkf_63_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_63_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_63_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_63;hprior@enkf_63;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_63_PREPTAG = T;
    CCMA_nT_enkf_63_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_63_PREPTAG;
  return CCMA_T_enkf_63_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_63(void *T);
extern int CCMA_Unpack_T_enkf_63(void *T);
extern int CCMA_Sel_T_enkf_63(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_63);
PrePutTable(CCMA, d, double, enkf_63);
PreLoadTable(CCMA, enkf_63);
PreStoreTable(CCMA, enkf_63);
extern void CCMA_Dim_T_enkf_63(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_63(void *T);
extern int CCMA_Sql_T_enkf_63(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_63(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_64) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_64" : appearance order#69, hierarchy rank# 93, weight = 358.000069 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_64;

#endif /* defined(IS_a_TABLE_enkf_64) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_64)
extern const ODB_Tags *CCMA_Set_T_enkf_64_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_64_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_64_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_64_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_64_TAG = 0;
PRIVATE int CCMA_nT_enkf_64_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_64_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_64_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_64_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_64"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_64"; T[1].name = s; }
    CCMA_T_enkf_64_TAG = T;
    CCMA_nT_enkf_64_TAG = ntag;
    CCMA_nT_enkf_64_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_64_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_64_MEM;
  return CCMA_T_enkf_64_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_64_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_64_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_64;hprior@enkf_64;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_64_PREPTAG = T;
    CCMA_nT_enkf_64_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_64_PREPTAG;
  return CCMA_T_enkf_64_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_64(void *T);
extern int CCMA_Unpack_T_enkf_64(void *T);
extern int CCMA_Sel_T_enkf_64(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_64);
PrePutTable(CCMA, d, double, enkf_64);
PreLoadTable(CCMA, enkf_64);
PreStoreTable(CCMA, enkf_64);
extern void CCMA_Dim_T_enkf_64(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_64(void *T);
extern int CCMA_Sql_T_enkf_64(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_64(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_65) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_65" : appearance order#70, hierarchy rank# 94, weight = 358.000070 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_65;

#endif /* defined(IS_a_TABLE_enkf_65) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_65)
extern const ODB_Tags *CCMA_Set_T_enkf_65_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_65_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_65_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_65_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_65_TAG = 0;
PRIVATE int CCMA_nT_enkf_65_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_65_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_65_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_65_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_65"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_65"; T[1].name = s; }
    CCMA_T_enkf_65_TAG = T;
    CCMA_nT_enkf_65_TAG = ntag;
    CCMA_nT_enkf_65_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_65_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_65_MEM;
  return CCMA_T_enkf_65_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_65_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_65_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_65;hprior@enkf_65;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_65_PREPTAG = T;
    CCMA_nT_enkf_65_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_65_PREPTAG;
  return CCMA_T_enkf_65_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_65(void *T);
extern int CCMA_Unpack_T_enkf_65(void *T);
extern int CCMA_Sel_T_enkf_65(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_65);
PrePutTable(CCMA, d, double, enkf_65);
PreLoadTable(CCMA, enkf_65);
PreStoreTable(CCMA, enkf_65);
extern void CCMA_Dim_T_enkf_65(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_65(void *T);
extern int CCMA_Sql_T_enkf_65(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_65(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_66) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_66" : appearance order#71, hierarchy rank# 95, weight = 358.000071 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_66;

#endif /* defined(IS_a_TABLE_enkf_66) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_66)
extern const ODB_Tags *CCMA_Set_T_enkf_66_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_66_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_66_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_66_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_66_TAG = 0;
PRIVATE int CCMA_nT_enkf_66_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_66_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_66_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_66_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_66"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_66"; T[1].name = s; }
    CCMA_T_enkf_66_TAG = T;
    CCMA_nT_enkf_66_TAG = ntag;
    CCMA_nT_enkf_66_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_66_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_66_MEM;
  return CCMA_T_enkf_66_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_66_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_66_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_66;hprior@enkf_66;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_66_PREPTAG = T;
    CCMA_nT_enkf_66_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_66_PREPTAG;
  return CCMA_T_enkf_66_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_66(void *T);
extern int CCMA_Unpack_T_enkf_66(void *T);
extern int CCMA_Sel_T_enkf_66(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_66);
PrePutTable(CCMA, d, double, enkf_66);
PreLoadTable(CCMA, enkf_66);
PreStoreTable(CCMA, enkf_66);
extern void CCMA_Dim_T_enkf_66(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_66(void *T);
extern int CCMA_Sql_T_enkf_66(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_66(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_67) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_67" : appearance order#72, hierarchy rank# 96, weight = 358.000072 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_67;

#endif /* defined(IS_a_TABLE_enkf_67) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_67)
extern const ODB_Tags *CCMA_Set_T_enkf_67_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_67_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_67_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_67_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_67_TAG = 0;
PRIVATE int CCMA_nT_enkf_67_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_67_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_67_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_67_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_67"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_67"; T[1].name = s; }
    CCMA_T_enkf_67_TAG = T;
    CCMA_nT_enkf_67_TAG = ntag;
    CCMA_nT_enkf_67_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_67_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_67_MEM;
  return CCMA_T_enkf_67_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_67_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_67_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_67;hprior@enkf_67;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_67_PREPTAG = T;
    CCMA_nT_enkf_67_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_67_PREPTAG;
  return CCMA_T_enkf_67_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_67(void *T);
extern int CCMA_Unpack_T_enkf_67(void *T);
extern int CCMA_Sel_T_enkf_67(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_67);
PrePutTable(CCMA, d, double, enkf_67);
PreLoadTable(CCMA, enkf_67);
PreStoreTable(CCMA, enkf_67);
extern void CCMA_Dim_T_enkf_67(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_67(void *T);
extern int CCMA_Sql_T_enkf_67(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_67(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_68) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_68" : appearance order#73, hierarchy rank# 97, weight = 358.000073 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_68;

#endif /* defined(IS_a_TABLE_enkf_68) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_68)
extern const ODB_Tags *CCMA_Set_T_enkf_68_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_68_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_68_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_68_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_68_TAG = 0;
PRIVATE int CCMA_nT_enkf_68_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_68_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_68_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_68_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_68"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_68"; T[1].name = s; }
    CCMA_T_enkf_68_TAG = T;
    CCMA_nT_enkf_68_TAG = ntag;
    CCMA_nT_enkf_68_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_68_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_68_MEM;
  return CCMA_T_enkf_68_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_68_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_68_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_68;hprior@enkf_68;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_68_PREPTAG = T;
    CCMA_nT_enkf_68_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_68_PREPTAG;
  return CCMA_T_enkf_68_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_68(void *T);
extern int CCMA_Unpack_T_enkf_68(void *T);
extern int CCMA_Sel_T_enkf_68(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_68);
PrePutTable(CCMA, d, double, enkf_68);
PreLoadTable(CCMA, enkf_68);
PreStoreTable(CCMA, enkf_68);
extern void CCMA_Dim_T_enkf_68(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_68(void *T);
extern int CCMA_Sql_T_enkf_68(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_68(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_69) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_69" : appearance order#74, hierarchy rank# 98, weight = 358.000074 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_69;

#endif /* defined(IS_a_TABLE_enkf_69) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_69)
extern const ODB_Tags *CCMA_Set_T_enkf_69_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_69_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_69_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_69_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_69_TAG = 0;
PRIVATE int CCMA_nT_enkf_69_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_69_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_69_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_69_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_69"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_69"; T[1].name = s; }
    CCMA_T_enkf_69_TAG = T;
    CCMA_nT_enkf_69_TAG = ntag;
    CCMA_nT_enkf_69_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_69_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_69_MEM;
  return CCMA_T_enkf_69_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_69_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_69_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_69;hprior@enkf_69;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_69_PREPTAG = T;
    CCMA_nT_enkf_69_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_69_PREPTAG;
  return CCMA_T_enkf_69_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_69(void *T);
extern int CCMA_Unpack_T_enkf_69(void *T);
extern int CCMA_Sel_T_enkf_69(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_69);
PrePutTable(CCMA, d, double, enkf_69);
PreLoadTable(CCMA, enkf_69);
PreStoreTable(CCMA, enkf_69);
extern void CCMA_Dim_T_enkf_69(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_69(void *T);
extern int CCMA_Sql_T_enkf_69(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_69(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_70) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_70" : appearance order#75, hierarchy rank# 99, weight = 358.000075 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_70;

#endif /* defined(IS_a_TABLE_enkf_70) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_70)
extern const ODB_Tags *CCMA_Set_T_enkf_70_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_70_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_70_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_70_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_70_TAG = 0;
PRIVATE int CCMA_nT_enkf_70_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_70_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_70_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_70_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_70"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_70"; T[1].name = s; }
    CCMA_T_enkf_70_TAG = T;
    CCMA_nT_enkf_70_TAG = ntag;
    CCMA_nT_enkf_70_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_70_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_70_MEM;
  return CCMA_T_enkf_70_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_70_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_70_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_70;hprior@enkf_70;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_70_PREPTAG = T;
    CCMA_nT_enkf_70_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_70_PREPTAG;
  return CCMA_T_enkf_70_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_70(void *T);
extern int CCMA_Unpack_T_enkf_70(void *T);
extern int CCMA_Sel_T_enkf_70(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_70);
PrePutTable(CCMA, d, double, enkf_70);
PreLoadTable(CCMA, enkf_70);
PreStoreTable(CCMA, enkf_70);
extern void CCMA_Dim_T_enkf_70(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_70(void *T);
extern int CCMA_Sql_T_enkf_70(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_70(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_71) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_71" : appearance order#76, hierarchy rank# 100, weight = 358.000076 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_71;

#endif /* defined(IS_a_TABLE_enkf_71) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_71)
extern const ODB_Tags *CCMA_Set_T_enkf_71_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_71_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_71_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_71_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_71_TAG = 0;
PRIVATE int CCMA_nT_enkf_71_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_71_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_71_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_71_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_71"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_71"; T[1].name = s; }
    CCMA_T_enkf_71_TAG = T;
    CCMA_nT_enkf_71_TAG = ntag;
    CCMA_nT_enkf_71_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_71_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_71_MEM;
  return CCMA_T_enkf_71_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_71_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_71_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_71;hprior@enkf_71;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_71_PREPTAG = T;
    CCMA_nT_enkf_71_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_71_PREPTAG;
  return CCMA_T_enkf_71_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_71(void *T);
extern int CCMA_Unpack_T_enkf_71(void *T);
extern int CCMA_Sel_T_enkf_71(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_71);
PrePutTable(CCMA, d, double, enkf_71);
PreLoadTable(CCMA, enkf_71);
PreStoreTable(CCMA, enkf_71);
extern void CCMA_Dim_T_enkf_71(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_71(void *T);
extern int CCMA_Sql_T_enkf_71(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_71(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_72) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_72" : appearance order#77, hierarchy rank# 101, weight = 358.000077 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_72;

#endif /* defined(IS_a_TABLE_enkf_72) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_72)
extern const ODB_Tags *CCMA_Set_T_enkf_72_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_72_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_72_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_72_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_72_TAG = 0;
PRIVATE int CCMA_nT_enkf_72_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_72_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_72_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_72_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_72"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_72"; T[1].name = s; }
    CCMA_T_enkf_72_TAG = T;
    CCMA_nT_enkf_72_TAG = ntag;
    CCMA_nT_enkf_72_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_72_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_72_MEM;
  return CCMA_T_enkf_72_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_72_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_72_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_72;hprior@enkf_72;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_72_PREPTAG = T;
    CCMA_nT_enkf_72_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_72_PREPTAG;
  return CCMA_T_enkf_72_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_72(void *T);
extern int CCMA_Unpack_T_enkf_72(void *T);
extern int CCMA_Sel_T_enkf_72(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_72);
PrePutTable(CCMA, d, double, enkf_72);
PreLoadTable(CCMA, enkf_72);
PreStoreTable(CCMA, enkf_72);
extern void CCMA_Dim_T_enkf_72(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_72(void *T);
extern int CCMA_Sql_T_enkf_72(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_72(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_73) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_73" : appearance order#78, hierarchy rank# 102, weight = 358.000078 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_73;

#endif /* defined(IS_a_TABLE_enkf_73) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_73)
extern const ODB_Tags *CCMA_Set_T_enkf_73_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_73_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_73_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_73_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_73_TAG = 0;
PRIVATE int CCMA_nT_enkf_73_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_73_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_73_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_73_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_73"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_73"; T[1].name = s; }
    CCMA_T_enkf_73_TAG = T;
    CCMA_nT_enkf_73_TAG = ntag;
    CCMA_nT_enkf_73_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_73_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_73_MEM;
  return CCMA_T_enkf_73_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_73_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_73_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_73;hprior@enkf_73;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_73_PREPTAG = T;
    CCMA_nT_enkf_73_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_73_PREPTAG;
  return CCMA_T_enkf_73_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_73(void *T);
extern int CCMA_Unpack_T_enkf_73(void *T);
extern int CCMA_Sel_T_enkf_73(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_73);
PrePutTable(CCMA, d, double, enkf_73);
PreLoadTable(CCMA, enkf_73);
PreStoreTable(CCMA, enkf_73);
extern void CCMA_Dim_T_enkf_73(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_73(void *T);
extern int CCMA_Sql_T_enkf_73(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_73(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_74) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_74" : appearance order#79, hierarchy rank# 103, weight = 358.000079 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_74;

#endif /* defined(IS_a_TABLE_enkf_74) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_74)
extern const ODB_Tags *CCMA_Set_T_enkf_74_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_74_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_74_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_74_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_74_TAG = 0;
PRIVATE int CCMA_nT_enkf_74_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_74_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_74_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_74_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_74"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_74"; T[1].name = s; }
    CCMA_T_enkf_74_TAG = T;
    CCMA_nT_enkf_74_TAG = ntag;
    CCMA_nT_enkf_74_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_74_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_74_MEM;
  return CCMA_T_enkf_74_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_74_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_74_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_74;hprior@enkf_74;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_74_PREPTAG = T;
    CCMA_nT_enkf_74_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_74_PREPTAG;
  return CCMA_T_enkf_74_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_74(void *T);
extern int CCMA_Unpack_T_enkf_74(void *T);
extern int CCMA_Sel_T_enkf_74(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_74);
PrePutTable(CCMA, d, double, enkf_74);
PreLoadTable(CCMA, enkf_74);
PreStoreTable(CCMA, enkf_74);
extern void CCMA_Dim_T_enkf_74(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_74(void *T);
extern int CCMA_Sql_T_enkf_74(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_74(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_75) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_75" : appearance order#80, hierarchy rank# 104, weight = 358.000080 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_75;

#endif /* defined(IS_a_TABLE_enkf_75) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_75)
extern const ODB_Tags *CCMA_Set_T_enkf_75_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_75_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_75_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_75_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_75_TAG = 0;
PRIVATE int CCMA_nT_enkf_75_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_75_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_75_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_75_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_75"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_75"; T[1].name = s; }
    CCMA_T_enkf_75_TAG = T;
    CCMA_nT_enkf_75_TAG = ntag;
    CCMA_nT_enkf_75_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_75_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_75_MEM;
  return CCMA_T_enkf_75_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_75_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_75_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_75;hprior@enkf_75;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_75_PREPTAG = T;
    CCMA_nT_enkf_75_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_75_PREPTAG;
  return CCMA_T_enkf_75_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_75(void *T);
extern int CCMA_Unpack_T_enkf_75(void *T);
extern int CCMA_Sel_T_enkf_75(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_75);
PrePutTable(CCMA, d, double, enkf_75);
PreLoadTable(CCMA, enkf_75);
PreStoreTable(CCMA, enkf_75);
extern void CCMA_Dim_T_enkf_75(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_75(void *T);
extern int CCMA_Sql_T_enkf_75(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_75(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_76) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_76" : appearance order#81, hierarchy rank# 105, weight = 358.000081 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_76;

#endif /* defined(IS_a_TABLE_enkf_76) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_76)
extern const ODB_Tags *CCMA_Set_T_enkf_76_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_76_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_76_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_76_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_76_TAG = 0;
PRIVATE int CCMA_nT_enkf_76_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_76_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_76_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_76_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_76"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_76"; T[1].name = s; }
    CCMA_T_enkf_76_TAG = T;
    CCMA_nT_enkf_76_TAG = ntag;
    CCMA_nT_enkf_76_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_76_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_76_MEM;
  return CCMA_T_enkf_76_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_76_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_76_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_76;hprior@enkf_76;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_76_PREPTAG = T;
    CCMA_nT_enkf_76_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_76_PREPTAG;
  return CCMA_T_enkf_76_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_76(void *T);
extern int CCMA_Unpack_T_enkf_76(void *T);
extern int CCMA_Sel_T_enkf_76(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_76);
PrePutTable(CCMA, d, double, enkf_76);
PreLoadTable(CCMA, enkf_76);
PreStoreTable(CCMA, enkf_76);
extern void CCMA_Dim_T_enkf_76(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_76(void *T);
extern int CCMA_Sql_T_enkf_76(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_76(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_77) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_77" : appearance order#82, hierarchy rank# 106, weight = 358.000082 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_77;

#endif /* defined(IS_a_TABLE_enkf_77) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_77)
extern const ODB_Tags *CCMA_Set_T_enkf_77_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_77_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_77_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_77_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_77_TAG = 0;
PRIVATE int CCMA_nT_enkf_77_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_77_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_77_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_77_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_77"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_77"; T[1].name = s; }
    CCMA_T_enkf_77_TAG = T;
    CCMA_nT_enkf_77_TAG = ntag;
    CCMA_nT_enkf_77_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_77_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_77_MEM;
  return CCMA_T_enkf_77_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_77_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_77_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_77;hprior@enkf_77;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_77_PREPTAG = T;
    CCMA_nT_enkf_77_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_77_PREPTAG;
  return CCMA_T_enkf_77_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_77(void *T);
extern int CCMA_Unpack_T_enkf_77(void *T);
extern int CCMA_Sel_T_enkf_77(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_77);
PrePutTable(CCMA, d, double, enkf_77);
PreLoadTable(CCMA, enkf_77);
PreStoreTable(CCMA, enkf_77);
extern void CCMA_Dim_T_enkf_77(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_77(void *T);
extern int CCMA_Sql_T_enkf_77(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_77(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_78) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_78" : appearance order#83, hierarchy rank# 107, weight = 358.000083 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_78;

#endif /* defined(IS_a_TABLE_enkf_78) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_78)
extern const ODB_Tags *CCMA_Set_T_enkf_78_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_78_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_78_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_78_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_78_TAG = 0;
PRIVATE int CCMA_nT_enkf_78_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_78_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_78_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_78_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_78"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_78"; T[1].name = s; }
    CCMA_T_enkf_78_TAG = T;
    CCMA_nT_enkf_78_TAG = ntag;
    CCMA_nT_enkf_78_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_78_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_78_MEM;
  return CCMA_T_enkf_78_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_78_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_78_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_78;hprior@enkf_78;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_78_PREPTAG = T;
    CCMA_nT_enkf_78_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_78_PREPTAG;
  return CCMA_T_enkf_78_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_78(void *T);
extern int CCMA_Unpack_T_enkf_78(void *T);
extern int CCMA_Sel_T_enkf_78(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_78);
PrePutTable(CCMA, d, double, enkf_78);
PreLoadTable(CCMA, enkf_78);
PreStoreTable(CCMA, enkf_78);
extern void CCMA_Dim_T_enkf_78(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_78(void *T);
extern int CCMA_Sql_T_enkf_78(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_78(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_79) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_79" : appearance order#84, hierarchy rank# 108, weight = 358.000084 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_79;

#endif /* defined(IS_a_TABLE_enkf_79) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_79)
extern const ODB_Tags *CCMA_Set_T_enkf_79_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_79_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_79_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_79_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_79_TAG = 0;
PRIVATE int CCMA_nT_enkf_79_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_79_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_79_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_79_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_79"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_79"; T[1].name = s; }
    CCMA_T_enkf_79_TAG = T;
    CCMA_nT_enkf_79_TAG = ntag;
    CCMA_nT_enkf_79_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_79_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_79_MEM;
  return CCMA_T_enkf_79_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_79_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_79_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_79;hprior@enkf_79;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_79_PREPTAG = T;
    CCMA_nT_enkf_79_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_79_PREPTAG;
  return CCMA_T_enkf_79_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_79(void *T);
extern int CCMA_Unpack_T_enkf_79(void *T);
extern int CCMA_Sel_T_enkf_79(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_79);
PrePutTable(CCMA, d, double, enkf_79);
PreLoadTable(CCMA, enkf_79);
PreStoreTable(CCMA, enkf_79);
extern void CCMA_Dim_T_enkf_79(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_79(void *T);
extern int CCMA_Sql_T_enkf_79(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_79(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_80) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_80" : appearance order#85, hierarchy rank# 109, weight = 358.000085 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_80;

#endif /* defined(IS_a_TABLE_enkf_80) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_80)
extern const ODB_Tags *CCMA_Set_T_enkf_80_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_80_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_80_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_80_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_80_TAG = 0;
PRIVATE int CCMA_nT_enkf_80_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_80_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_80_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_80_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_80"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_80"; T[1].name = s; }
    CCMA_T_enkf_80_TAG = T;
    CCMA_nT_enkf_80_TAG = ntag;
    CCMA_nT_enkf_80_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_80_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_80_MEM;
  return CCMA_T_enkf_80_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_80_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_80_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_80;hprior@enkf_80;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_80_PREPTAG = T;
    CCMA_nT_enkf_80_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_80_PREPTAG;
  return CCMA_T_enkf_80_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_80(void *T);
extern int CCMA_Unpack_T_enkf_80(void *T);
extern int CCMA_Sel_T_enkf_80(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_80);
PrePutTable(CCMA, d, double, enkf_80);
PreLoadTable(CCMA, enkf_80);
PreStoreTable(CCMA, enkf_80);
extern void CCMA_Dim_T_enkf_80(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_80(void *T);
extern int CCMA_Sql_T_enkf_80(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_80(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_81) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_81" : appearance order#86, hierarchy rank# 110, weight = 358.000086 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_81;

#endif /* defined(IS_a_TABLE_enkf_81) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_81)
extern const ODB_Tags *CCMA_Set_T_enkf_81_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_81_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_81_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_81_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_81_TAG = 0;
PRIVATE int CCMA_nT_enkf_81_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_81_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_81_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_81_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_81"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_81"; T[1].name = s; }
    CCMA_T_enkf_81_TAG = T;
    CCMA_nT_enkf_81_TAG = ntag;
    CCMA_nT_enkf_81_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_81_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_81_MEM;
  return CCMA_T_enkf_81_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_81_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_81_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_81;hprior@enkf_81;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_81_PREPTAG = T;
    CCMA_nT_enkf_81_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_81_PREPTAG;
  return CCMA_T_enkf_81_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_81(void *T);
extern int CCMA_Unpack_T_enkf_81(void *T);
extern int CCMA_Sel_T_enkf_81(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_81);
PrePutTable(CCMA, d, double, enkf_81);
PreLoadTable(CCMA, enkf_81);
PreStoreTable(CCMA, enkf_81);
extern void CCMA_Dim_T_enkf_81(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_81(void *T);
extern int CCMA_Sql_T_enkf_81(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_81(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_82) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_82" : appearance order#87, hierarchy rank# 111, weight = 358.000087 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_82;

#endif /* defined(IS_a_TABLE_enkf_82) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_82)
extern const ODB_Tags *CCMA_Set_T_enkf_82_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_82_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_82_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_82_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_82_TAG = 0;
PRIVATE int CCMA_nT_enkf_82_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_82_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_82_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_82_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_82"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_82"; T[1].name = s; }
    CCMA_T_enkf_82_TAG = T;
    CCMA_nT_enkf_82_TAG = ntag;
    CCMA_nT_enkf_82_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_82_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_82_MEM;
  return CCMA_T_enkf_82_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_82_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_82_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_82;hprior@enkf_82;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_82_PREPTAG = T;
    CCMA_nT_enkf_82_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_82_PREPTAG;
  return CCMA_T_enkf_82_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_82(void *T);
extern int CCMA_Unpack_T_enkf_82(void *T);
extern int CCMA_Sel_T_enkf_82(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_82);
PrePutTable(CCMA, d, double, enkf_82);
PreLoadTable(CCMA, enkf_82);
PreStoreTable(CCMA, enkf_82);
extern void CCMA_Dim_T_enkf_82(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_82(void *T);
extern int CCMA_Sql_T_enkf_82(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_82(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_83) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_83" : appearance order#88, hierarchy rank# 112, weight = 358.000088 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_83;

#endif /* defined(IS_a_TABLE_enkf_83) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_83)
extern const ODB_Tags *CCMA_Set_T_enkf_83_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_83_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_83_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_83_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_83_TAG = 0;
PRIVATE int CCMA_nT_enkf_83_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_83_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_83_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_83_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_83"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_83"; T[1].name = s; }
    CCMA_T_enkf_83_TAG = T;
    CCMA_nT_enkf_83_TAG = ntag;
    CCMA_nT_enkf_83_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_83_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_83_MEM;
  return CCMA_T_enkf_83_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_83_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_83_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_83;hprior@enkf_83;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_83_PREPTAG = T;
    CCMA_nT_enkf_83_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_83_PREPTAG;
  return CCMA_T_enkf_83_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_83(void *T);
extern int CCMA_Unpack_T_enkf_83(void *T);
extern int CCMA_Sel_T_enkf_83(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_83);
PrePutTable(CCMA, d, double, enkf_83);
PreLoadTable(CCMA, enkf_83);
PreStoreTable(CCMA, enkf_83);
extern void CCMA_Dim_T_enkf_83(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_83(void *T);
extern int CCMA_Sql_T_enkf_83(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_83(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_84) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_84" : appearance order#89, hierarchy rank# 113, weight = 358.000089 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_84;

#endif /* defined(IS_a_TABLE_enkf_84) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_84)
extern const ODB_Tags *CCMA_Set_T_enkf_84_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_84_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_84_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_84_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_84_TAG = 0;
PRIVATE int CCMA_nT_enkf_84_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_84_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_84_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_84_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_84"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_84"; T[1].name = s; }
    CCMA_T_enkf_84_TAG = T;
    CCMA_nT_enkf_84_TAG = ntag;
    CCMA_nT_enkf_84_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_84_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_84_MEM;
  return CCMA_T_enkf_84_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_84_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_84_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_84;hprior@enkf_84;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_84_PREPTAG = T;
    CCMA_nT_enkf_84_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_84_PREPTAG;
  return CCMA_T_enkf_84_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_84(void *T);
extern int CCMA_Unpack_T_enkf_84(void *T);
extern int CCMA_Sel_T_enkf_84(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_84);
PrePutTable(CCMA, d, double, enkf_84);
PreLoadTable(CCMA, enkf_84);
PreStoreTable(CCMA, enkf_84);
extern void CCMA_Dim_T_enkf_84(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_84(void *T);
extern int CCMA_Sql_T_enkf_84(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_84(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_85) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_85" : appearance order#90, hierarchy rank# 114, weight = 358.000090 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_85;

#endif /* defined(IS_a_TABLE_enkf_85) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_85)
extern const ODB_Tags *CCMA_Set_T_enkf_85_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_85_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_85_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_85_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_85_TAG = 0;
PRIVATE int CCMA_nT_enkf_85_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_85_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_85_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_85_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_85"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_85"; T[1].name = s; }
    CCMA_T_enkf_85_TAG = T;
    CCMA_nT_enkf_85_TAG = ntag;
    CCMA_nT_enkf_85_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_85_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_85_MEM;
  return CCMA_T_enkf_85_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_85_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_85_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_85;hprior@enkf_85;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_85_PREPTAG = T;
    CCMA_nT_enkf_85_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_85_PREPTAG;
  return CCMA_T_enkf_85_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_85(void *T);
extern int CCMA_Unpack_T_enkf_85(void *T);
extern int CCMA_Sel_T_enkf_85(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_85);
PrePutTable(CCMA, d, double, enkf_85);
PreLoadTable(CCMA, enkf_85);
PreStoreTable(CCMA, enkf_85);
extern void CCMA_Dim_T_enkf_85(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_85(void *T);
extern int CCMA_Sql_T_enkf_85(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_85(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_86) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_86" : appearance order#91, hierarchy rank# 115, weight = 358.000091 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_86;

#endif /* defined(IS_a_TABLE_enkf_86) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_86)
extern const ODB_Tags *CCMA_Set_T_enkf_86_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_86_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_86_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_86_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_86_TAG = 0;
PRIVATE int CCMA_nT_enkf_86_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_86_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_86_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_86_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_86"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_86"; T[1].name = s; }
    CCMA_T_enkf_86_TAG = T;
    CCMA_nT_enkf_86_TAG = ntag;
    CCMA_nT_enkf_86_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_86_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_86_MEM;
  return CCMA_T_enkf_86_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_86_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_86_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_86;hprior@enkf_86;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_86_PREPTAG = T;
    CCMA_nT_enkf_86_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_86_PREPTAG;
  return CCMA_T_enkf_86_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_86(void *T);
extern int CCMA_Unpack_T_enkf_86(void *T);
extern int CCMA_Sel_T_enkf_86(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_86);
PrePutTable(CCMA, d, double, enkf_86);
PreLoadTable(CCMA, enkf_86);
PreStoreTable(CCMA, enkf_86);
extern void CCMA_Dim_T_enkf_86(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_86(void *T);
extern int CCMA_Sql_T_enkf_86(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_86(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_87) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_87" : appearance order#92, hierarchy rank# 116, weight = 358.000092 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_87;

#endif /* defined(IS_a_TABLE_enkf_87) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_87)
extern const ODB_Tags *CCMA_Set_T_enkf_87_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_87_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_87_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_87_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_87_TAG = 0;
PRIVATE int CCMA_nT_enkf_87_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_87_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_87_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_87_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_87"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_87"; T[1].name = s; }
    CCMA_T_enkf_87_TAG = T;
    CCMA_nT_enkf_87_TAG = ntag;
    CCMA_nT_enkf_87_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_87_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_87_MEM;
  return CCMA_T_enkf_87_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_87_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_87_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_87;hprior@enkf_87;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_87_PREPTAG = T;
    CCMA_nT_enkf_87_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_87_PREPTAG;
  return CCMA_T_enkf_87_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_87(void *T);
extern int CCMA_Unpack_T_enkf_87(void *T);
extern int CCMA_Sel_T_enkf_87(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_87);
PrePutTable(CCMA, d, double, enkf_87);
PreLoadTable(CCMA, enkf_87);
PreStoreTable(CCMA, enkf_87);
extern void CCMA_Dim_T_enkf_87(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_87(void *T);
extern int CCMA_Sql_T_enkf_87(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_87(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_88) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_88" : appearance order#93, hierarchy rank# 117, weight = 358.000093 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_88;

#endif /* defined(IS_a_TABLE_enkf_88) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_88)
extern const ODB_Tags *CCMA_Set_T_enkf_88_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_88_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_88_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_88_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_88_TAG = 0;
PRIVATE int CCMA_nT_enkf_88_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_88_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_88_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_88_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_88"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_88"; T[1].name = s; }
    CCMA_T_enkf_88_TAG = T;
    CCMA_nT_enkf_88_TAG = ntag;
    CCMA_nT_enkf_88_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_88_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_88_MEM;
  return CCMA_T_enkf_88_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_88_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_88_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_88;hprior@enkf_88;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_88_PREPTAG = T;
    CCMA_nT_enkf_88_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_88_PREPTAG;
  return CCMA_T_enkf_88_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_88(void *T);
extern int CCMA_Unpack_T_enkf_88(void *T);
extern int CCMA_Sel_T_enkf_88(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_88);
PrePutTable(CCMA, d, double, enkf_88);
PreLoadTable(CCMA, enkf_88);
PreStoreTable(CCMA, enkf_88);
extern void CCMA_Dim_T_enkf_88(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_88(void *T);
extern int CCMA_Sql_T_enkf_88(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_88(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_89) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_89" : appearance order#94, hierarchy rank# 118, weight = 358.000094 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_89;

#endif /* defined(IS_a_TABLE_enkf_89) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_89)
extern const ODB_Tags *CCMA_Set_T_enkf_89_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_89_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_89_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_89_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_89_TAG = 0;
PRIVATE int CCMA_nT_enkf_89_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_89_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_89_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_89_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_89"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_89"; T[1].name = s; }
    CCMA_T_enkf_89_TAG = T;
    CCMA_nT_enkf_89_TAG = ntag;
    CCMA_nT_enkf_89_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_89_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_89_MEM;
  return CCMA_T_enkf_89_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_89_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_89_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_89;hprior@enkf_89;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_89_PREPTAG = T;
    CCMA_nT_enkf_89_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_89_PREPTAG;
  return CCMA_T_enkf_89_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_89(void *T);
extern int CCMA_Unpack_T_enkf_89(void *T);
extern int CCMA_Sel_T_enkf_89(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_89);
PrePutTable(CCMA, d, double, enkf_89);
PreLoadTable(CCMA, enkf_89);
PreStoreTable(CCMA, enkf_89);
extern void CCMA_Dim_T_enkf_89(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_89(void *T);
extern int CCMA_Sql_T_enkf_89(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_89(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_90) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_90" : appearance order#95, hierarchy rank# 119, weight = 358.000095 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_90;

#endif /* defined(IS_a_TABLE_enkf_90) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_90)
extern const ODB_Tags *CCMA_Set_T_enkf_90_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_90_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_90_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_90_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_90_TAG = 0;
PRIVATE int CCMA_nT_enkf_90_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_90_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_90_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_90_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_90"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_90"; T[1].name = s; }
    CCMA_T_enkf_90_TAG = T;
    CCMA_nT_enkf_90_TAG = ntag;
    CCMA_nT_enkf_90_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_90_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_90_MEM;
  return CCMA_T_enkf_90_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_90_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_90_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_90;hprior@enkf_90;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_90_PREPTAG = T;
    CCMA_nT_enkf_90_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_90_PREPTAG;
  return CCMA_T_enkf_90_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_90(void *T);
extern int CCMA_Unpack_T_enkf_90(void *T);
extern int CCMA_Sel_T_enkf_90(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_90);
PrePutTable(CCMA, d, double, enkf_90);
PreLoadTable(CCMA, enkf_90);
PreStoreTable(CCMA, enkf_90);
extern void CCMA_Dim_T_enkf_90(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_90(void *T);
extern int CCMA_Sql_T_enkf_90(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_90(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_91) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_91" : appearance order#96, hierarchy rank# 120, weight = 358.000096 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_91;

#endif /* defined(IS_a_TABLE_enkf_91) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_91)
extern const ODB_Tags *CCMA_Set_T_enkf_91_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_91_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_91_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_91_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_91_TAG = 0;
PRIVATE int CCMA_nT_enkf_91_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_91_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_91_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_91_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_91"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_91"; T[1].name = s; }
    CCMA_T_enkf_91_TAG = T;
    CCMA_nT_enkf_91_TAG = ntag;
    CCMA_nT_enkf_91_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_91_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_91_MEM;
  return CCMA_T_enkf_91_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_91_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_91_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_91;hprior@enkf_91;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_91_PREPTAG = T;
    CCMA_nT_enkf_91_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_91_PREPTAG;
  return CCMA_T_enkf_91_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_91(void *T);
extern int CCMA_Unpack_T_enkf_91(void *T);
extern int CCMA_Sel_T_enkf_91(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_91);
PrePutTable(CCMA, d, double, enkf_91);
PreLoadTable(CCMA, enkf_91);
PreStoreTable(CCMA, enkf_91);
extern void CCMA_Dim_T_enkf_91(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_91(void *T);
extern int CCMA_Sql_T_enkf_91(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_91(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_92) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_92" : appearance order#97, hierarchy rank# 121, weight = 358.000097 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_92;

#endif /* defined(IS_a_TABLE_enkf_92) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_92)
extern const ODB_Tags *CCMA_Set_T_enkf_92_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_92_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_92_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_92_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_92_TAG = 0;
PRIVATE int CCMA_nT_enkf_92_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_92_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_92_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_92_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_92"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_92"; T[1].name = s; }
    CCMA_T_enkf_92_TAG = T;
    CCMA_nT_enkf_92_TAG = ntag;
    CCMA_nT_enkf_92_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_92_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_92_MEM;
  return CCMA_T_enkf_92_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_92_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_92_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_92;hprior@enkf_92;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_92_PREPTAG = T;
    CCMA_nT_enkf_92_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_92_PREPTAG;
  return CCMA_T_enkf_92_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_92(void *T);
extern int CCMA_Unpack_T_enkf_92(void *T);
extern int CCMA_Sel_T_enkf_92(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_92);
PrePutTable(CCMA, d, double, enkf_92);
PreLoadTable(CCMA, enkf_92);
PreStoreTable(CCMA, enkf_92);
extern void CCMA_Dim_T_enkf_92(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_92(void *T);
extern int CCMA_Sql_T_enkf_92(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_92(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_93) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_93" : appearance order#98, hierarchy rank# 122, weight = 358.000098 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_93;

#endif /* defined(IS_a_TABLE_enkf_93) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_93)
extern const ODB_Tags *CCMA_Set_T_enkf_93_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_93_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_93_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_93_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_93_TAG = 0;
PRIVATE int CCMA_nT_enkf_93_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_93_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_93_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_93_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_93"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_93"; T[1].name = s; }
    CCMA_T_enkf_93_TAG = T;
    CCMA_nT_enkf_93_TAG = ntag;
    CCMA_nT_enkf_93_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_93_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_93_MEM;
  return CCMA_T_enkf_93_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_93_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_93_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_93;hprior@enkf_93;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_93_PREPTAG = T;
    CCMA_nT_enkf_93_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_93_PREPTAG;
  return CCMA_T_enkf_93_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_93(void *T);
extern int CCMA_Unpack_T_enkf_93(void *T);
extern int CCMA_Sel_T_enkf_93(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_93);
PrePutTable(CCMA, d, double, enkf_93);
PreLoadTable(CCMA, enkf_93);
PreStoreTable(CCMA, enkf_93);
extern void CCMA_Dim_T_enkf_93(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_93(void *T);
extern int CCMA_Sql_T_enkf_93(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_93(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_94) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_94" : appearance order#99, hierarchy rank# 123, weight = 358.000099 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_94;

#endif /* defined(IS_a_TABLE_enkf_94) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_94)
extern const ODB_Tags *CCMA_Set_T_enkf_94_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_94_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_94_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_94_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_94_TAG = 0;
PRIVATE int CCMA_nT_enkf_94_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_94_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_94_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_94_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_94"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_94"; T[1].name = s; }
    CCMA_T_enkf_94_TAG = T;
    CCMA_nT_enkf_94_TAG = ntag;
    CCMA_nT_enkf_94_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_94_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_94_MEM;
  return CCMA_T_enkf_94_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_94_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_94_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_94;hprior@enkf_94;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_94_PREPTAG = T;
    CCMA_nT_enkf_94_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_94_PREPTAG;
  return CCMA_T_enkf_94_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_94(void *T);
extern int CCMA_Unpack_T_enkf_94(void *T);
extern int CCMA_Sel_T_enkf_94(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_94);
PrePutTable(CCMA, d, double, enkf_94);
PreLoadTable(CCMA, enkf_94);
PreStoreTable(CCMA, enkf_94);
extern void CCMA_Dim_T_enkf_94(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_94(void *T);
extern int CCMA_Sql_T_enkf_94(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_94(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_95) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_95" : appearance order#100, hierarchy rank# 124, weight = 358.000100 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_95;

#endif /* defined(IS_a_TABLE_enkf_95) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_95)
extern const ODB_Tags *CCMA_Set_T_enkf_95_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_95_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_95_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_95_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_95_TAG = 0;
PRIVATE int CCMA_nT_enkf_95_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_95_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_95_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_95_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_95"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_95"; T[1].name = s; }
    CCMA_T_enkf_95_TAG = T;
    CCMA_nT_enkf_95_TAG = ntag;
    CCMA_nT_enkf_95_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_95_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_95_MEM;
  return CCMA_T_enkf_95_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_95_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_95_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_95;hprior@enkf_95;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_95_PREPTAG = T;
    CCMA_nT_enkf_95_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_95_PREPTAG;
  return CCMA_T_enkf_95_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_95(void *T);
extern int CCMA_Unpack_T_enkf_95(void *T);
extern int CCMA_Sel_T_enkf_95(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_95);
PrePutTable(CCMA, d, double, enkf_95);
PreLoadTable(CCMA, enkf_95);
PreStoreTable(CCMA, enkf_95);
extern void CCMA_Dim_T_enkf_95(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_95(void *T);
extern int CCMA_Sql_T_enkf_95(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_95(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_96) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_96" : appearance order#101, hierarchy rank# 125, weight = 358.000101 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_96;

#endif /* defined(IS_a_TABLE_enkf_96) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_96)
extern const ODB_Tags *CCMA_Set_T_enkf_96_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_96_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_96_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_96_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_96_TAG = 0;
PRIVATE int CCMA_nT_enkf_96_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_96_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_96_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_96_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_96"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_96"; T[1].name = s; }
    CCMA_T_enkf_96_TAG = T;
    CCMA_nT_enkf_96_TAG = ntag;
    CCMA_nT_enkf_96_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_96_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_96_MEM;
  return CCMA_T_enkf_96_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_96_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_96_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_96;hprior@enkf_96;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_96_PREPTAG = T;
    CCMA_nT_enkf_96_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_96_PREPTAG;
  return CCMA_T_enkf_96_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_96(void *T);
extern int CCMA_Unpack_T_enkf_96(void *T);
extern int CCMA_Sel_T_enkf_96(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_96);
PrePutTable(CCMA, d, double, enkf_96);
PreLoadTable(CCMA, enkf_96);
PreStoreTable(CCMA, enkf_96);
extern void CCMA_Dim_T_enkf_96(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_96(void *T);
extern int CCMA_Sql_T_enkf_96(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_96(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_97) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_97" : appearance order#102, hierarchy rank# 126, weight = 358.000102 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_97;

#endif /* defined(IS_a_TABLE_enkf_97) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_97)
extern const ODB_Tags *CCMA_Set_T_enkf_97_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_97_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_97_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_97_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_97_TAG = 0;
PRIVATE int CCMA_nT_enkf_97_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_97_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_97_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_97_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_97"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_97"; T[1].name = s; }
    CCMA_T_enkf_97_TAG = T;
    CCMA_nT_enkf_97_TAG = ntag;
    CCMA_nT_enkf_97_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_97_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_97_MEM;
  return CCMA_T_enkf_97_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_97_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_97_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_97;hprior@enkf_97;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_97_PREPTAG = T;
    CCMA_nT_enkf_97_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_97_PREPTAG;
  return CCMA_T_enkf_97_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_97(void *T);
extern int CCMA_Unpack_T_enkf_97(void *T);
extern int CCMA_Sel_T_enkf_97(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_97);
PrePutTable(CCMA, d, double, enkf_97);
PreLoadTable(CCMA, enkf_97);
PreStoreTable(CCMA, enkf_97);
extern void CCMA_Dim_T_enkf_97(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_97(void *T);
extern int CCMA_Sql_T_enkf_97(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_97(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_98) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_98" : appearance order#103, hierarchy rank# 127, weight = 358.000103 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_98;

#endif /* defined(IS_a_TABLE_enkf_98) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_98)
extern const ODB_Tags *CCMA_Set_T_enkf_98_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_98_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_98_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_98_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_98_TAG = 0;
PRIVATE int CCMA_nT_enkf_98_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_98_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_98_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_98_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_98"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_98"; T[1].name = s; }
    CCMA_T_enkf_98_TAG = T;
    CCMA_nT_enkf_98_TAG = ntag;
    CCMA_nT_enkf_98_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_98_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_98_MEM;
  return CCMA_T_enkf_98_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_98_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_98_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_98;hprior@enkf_98;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_98_PREPTAG = T;
    CCMA_nT_enkf_98_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_98_PREPTAG;
  return CCMA_T_enkf_98_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_98(void *T);
extern int CCMA_Unpack_T_enkf_98(void *T);
extern int CCMA_Sel_T_enkf_98(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_98);
PrePutTable(CCMA, d, double, enkf_98);
PreLoadTable(CCMA, enkf_98);
PreStoreTable(CCMA, enkf_98);
extern void CCMA_Dim_T_enkf_98(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_98(void *T);
extern int CCMA_Sql_T_enkf_98(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_98(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_99) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_99" : appearance order#104, hierarchy rank# 128, weight = 358.000104 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_99;

#endif /* defined(IS_a_TABLE_enkf_99) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_99)
extern const ODB_Tags *CCMA_Set_T_enkf_99_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_99_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_99_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_99_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_99_TAG = 0;
PRIVATE int CCMA_nT_enkf_99_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_99_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_99_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_99_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_99"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_99"; T[1].name = s; }
    CCMA_T_enkf_99_TAG = T;
    CCMA_nT_enkf_99_TAG = ntag;
    CCMA_nT_enkf_99_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_99_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_99_MEM;
  return CCMA_T_enkf_99_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_99_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_99_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 31;
    { static char s[] =
      ";member@enkf_99;hprior@enkf_99;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_99_PREPTAG = T;
    CCMA_nT_enkf_99_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_99_PREPTAG;
  return CCMA_T_enkf_99_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_99(void *T);
extern int CCMA_Unpack_T_enkf_99(void *T);
extern int CCMA_Sel_T_enkf_99(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_99);
PrePutTable(CCMA, d, double, enkf_99);
PreLoadTable(CCMA, enkf_99);
PreStoreTable(CCMA, enkf_99);
extern void CCMA_Dim_T_enkf_99(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_99(void *T);
extern int CCMA_Sql_T_enkf_99(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_99(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_100) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_100" : appearance order#105, hierarchy rank# 129, weight = 358.000105 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_100;

#endif /* defined(IS_a_TABLE_enkf_100) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_100)
extern const ODB_Tags *CCMA_Set_T_enkf_100_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_100_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_100_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_100_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_100_TAG = 0;
PRIVATE int CCMA_nT_enkf_100_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_100_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_100_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_100_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_100"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_100"; T[1].name = s; }
    CCMA_T_enkf_100_TAG = T;
    CCMA_nT_enkf_100_TAG = ntag;
    CCMA_nT_enkf_100_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_100_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_100_MEM;
  return CCMA_T_enkf_100_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_100_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_100_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_100;hprior@enkf_100;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_100_PREPTAG = T;
    CCMA_nT_enkf_100_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_100_PREPTAG;
  return CCMA_T_enkf_100_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_100(void *T);
extern int CCMA_Unpack_T_enkf_100(void *T);
extern int CCMA_Sel_T_enkf_100(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_100);
PrePutTable(CCMA, d, double, enkf_100);
PreLoadTable(CCMA, enkf_100);
PreStoreTable(CCMA, enkf_100);
extern void CCMA_Dim_T_enkf_100(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_100(void *T);
extern int CCMA_Sql_T_enkf_100(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_100(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_101) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_101" : appearance order#106, hierarchy rank# 130, weight = 358.000106 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_101;

#endif /* defined(IS_a_TABLE_enkf_101) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_101)
extern const ODB_Tags *CCMA_Set_T_enkf_101_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_101_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_101_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_101_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_101_TAG = 0;
PRIVATE int CCMA_nT_enkf_101_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_101_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_101_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_101_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_101"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_101"; T[1].name = s; }
    CCMA_T_enkf_101_TAG = T;
    CCMA_nT_enkf_101_TAG = ntag;
    CCMA_nT_enkf_101_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_101_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_101_MEM;
  return CCMA_T_enkf_101_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_101_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_101_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_101;hprior@enkf_101;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_101_PREPTAG = T;
    CCMA_nT_enkf_101_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_101_PREPTAG;
  return CCMA_T_enkf_101_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_101(void *T);
extern int CCMA_Unpack_T_enkf_101(void *T);
extern int CCMA_Sel_T_enkf_101(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_101);
PrePutTable(CCMA, d, double, enkf_101);
PreLoadTable(CCMA, enkf_101);
PreStoreTable(CCMA, enkf_101);
extern void CCMA_Dim_T_enkf_101(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_101(void *T);
extern int CCMA_Sql_T_enkf_101(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_101(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_102) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_102" : appearance order#107, hierarchy rank# 131, weight = 358.000107 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_102;

#endif /* defined(IS_a_TABLE_enkf_102) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_102)
extern const ODB_Tags *CCMA_Set_T_enkf_102_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_102_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_102_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_102_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_102_TAG = 0;
PRIVATE int CCMA_nT_enkf_102_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_102_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_102_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_102_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_102"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_102"; T[1].name = s; }
    CCMA_T_enkf_102_TAG = T;
    CCMA_nT_enkf_102_TAG = ntag;
    CCMA_nT_enkf_102_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_102_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_102_MEM;
  return CCMA_T_enkf_102_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_102_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_102_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_102;hprior@enkf_102;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_102_PREPTAG = T;
    CCMA_nT_enkf_102_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_102_PREPTAG;
  return CCMA_T_enkf_102_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_102(void *T);
extern int CCMA_Unpack_T_enkf_102(void *T);
extern int CCMA_Sel_T_enkf_102(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_102);
PrePutTable(CCMA, d, double, enkf_102);
PreLoadTable(CCMA, enkf_102);
PreStoreTable(CCMA, enkf_102);
extern void CCMA_Dim_T_enkf_102(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_102(void *T);
extern int CCMA_Sql_T_enkf_102(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_102(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_103) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_103" : appearance order#108, hierarchy rank# 132, weight = 358.000108 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_103;

#endif /* defined(IS_a_TABLE_enkf_103) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_103)
extern const ODB_Tags *CCMA_Set_T_enkf_103_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_103_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_103_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_103_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_103_TAG = 0;
PRIVATE int CCMA_nT_enkf_103_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_103_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_103_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_103_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_103"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_103"; T[1].name = s; }
    CCMA_T_enkf_103_TAG = T;
    CCMA_nT_enkf_103_TAG = ntag;
    CCMA_nT_enkf_103_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_103_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_103_MEM;
  return CCMA_T_enkf_103_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_103_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_103_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_103;hprior@enkf_103;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_103_PREPTAG = T;
    CCMA_nT_enkf_103_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_103_PREPTAG;
  return CCMA_T_enkf_103_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_103(void *T);
extern int CCMA_Unpack_T_enkf_103(void *T);
extern int CCMA_Sel_T_enkf_103(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_103);
PrePutTable(CCMA, d, double, enkf_103);
PreLoadTable(CCMA, enkf_103);
PreStoreTable(CCMA, enkf_103);
extern void CCMA_Dim_T_enkf_103(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_103(void *T);
extern int CCMA_Sql_T_enkf_103(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_103(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_104) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_104" : appearance order#109, hierarchy rank# 133, weight = 358.000109 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_104;

#endif /* defined(IS_a_TABLE_enkf_104) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_104)
extern const ODB_Tags *CCMA_Set_T_enkf_104_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_104_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_104_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_104_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_104_TAG = 0;
PRIVATE int CCMA_nT_enkf_104_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_104_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_104_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_104_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_104"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_104"; T[1].name = s; }
    CCMA_T_enkf_104_TAG = T;
    CCMA_nT_enkf_104_TAG = ntag;
    CCMA_nT_enkf_104_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_104_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_104_MEM;
  return CCMA_T_enkf_104_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_104_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_104_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_104;hprior@enkf_104;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_104_PREPTAG = T;
    CCMA_nT_enkf_104_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_104_PREPTAG;
  return CCMA_T_enkf_104_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_104(void *T);
extern int CCMA_Unpack_T_enkf_104(void *T);
extern int CCMA_Sel_T_enkf_104(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_104);
PrePutTable(CCMA, d, double, enkf_104);
PreLoadTable(CCMA, enkf_104);
PreStoreTable(CCMA, enkf_104);
extern void CCMA_Dim_T_enkf_104(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_104(void *T);
extern int CCMA_Sql_T_enkf_104(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_104(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_105) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_105" : appearance order#110, hierarchy rank# 134, weight = 358.000110 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_105;

#endif /* defined(IS_a_TABLE_enkf_105) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_105)
extern const ODB_Tags *CCMA_Set_T_enkf_105_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_105_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_105_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_105_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_105_TAG = 0;
PRIVATE int CCMA_nT_enkf_105_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_105_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_105_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_105_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_105"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_105"; T[1].name = s; }
    CCMA_T_enkf_105_TAG = T;
    CCMA_nT_enkf_105_TAG = ntag;
    CCMA_nT_enkf_105_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_105_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_105_MEM;
  return CCMA_T_enkf_105_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_105_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_105_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_105;hprior@enkf_105;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_105_PREPTAG = T;
    CCMA_nT_enkf_105_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_105_PREPTAG;
  return CCMA_T_enkf_105_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_105(void *T);
extern int CCMA_Unpack_T_enkf_105(void *T);
extern int CCMA_Sel_T_enkf_105(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_105);
PrePutTable(CCMA, d, double, enkf_105);
PreLoadTable(CCMA, enkf_105);
PreStoreTable(CCMA, enkf_105);
extern void CCMA_Dim_T_enkf_105(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_105(void *T);
extern int CCMA_Sql_T_enkf_105(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_105(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_106) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_106" : appearance order#111, hierarchy rank# 135, weight = 358.000111 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_106;

#endif /* defined(IS_a_TABLE_enkf_106) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_106)
extern const ODB_Tags *CCMA_Set_T_enkf_106_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_106_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_106_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_106_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_106_TAG = 0;
PRIVATE int CCMA_nT_enkf_106_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_106_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_106_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_106_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_106"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_106"; T[1].name = s; }
    CCMA_T_enkf_106_TAG = T;
    CCMA_nT_enkf_106_TAG = ntag;
    CCMA_nT_enkf_106_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_106_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_106_MEM;
  return CCMA_T_enkf_106_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_106_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_106_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_106;hprior@enkf_106;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_106_PREPTAG = T;
    CCMA_nT_enkf_106_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_106_PREPTAG;
  return CCMA_T_enkf_106_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_106(void *T);
extern int CCMA_Unpack_T_enkf_106(void *T);
extern int CCMA_Sel_T_enkf_106(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_106);
PrePutTable(CCMA, d, double, enkf_106);
PreLoadTable(CCMA, enkf_106);
PreStoreTable(CCMA, enkf_106);
extern void CCMA_Dim_T_enkf_106(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_106(void *T);
extern int CCMA_Sql_T_enkf_106(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_106(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_107) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_107" : appearance order#112, hierarchy rank# 136, weight = 358.000112 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_107;

#endif /* defined(IS_a_TABLE_enkf_107) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_107)
extern const ODB_Tags *CCMA_Set_T_enkf_107_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_107_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_107_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_107_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_107_TAG = 0;
PRIVATE int CCMA_nT_enkf_107_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_107_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_107_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_107_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_107"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_107"; T[1].name = s; }
    CCMA_T_enkf_107_TAG = T;
    CCMA_nT_enkf_107_TAG = ntag;
    CCMA_nT_enkf_107_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_107_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_107_MEM;
  return CCMA_T_enkf_107_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_107_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_107_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_107;hprior@enkf_107;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_107_PREPTAG = T;
    CCMA_nT_enkf_107_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_107_PREPTAG;
  return CCMA_T_enkf_107_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_107(void *T);
extern int CCMA_Unpack_T_enkf_107(void *T);
extern int CCMA_Sel_T_enkf_107(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_107);
PrePutTable(CCMA, d, double, enkf_107);
PreLoadTable(CCMA, enkf_107);
PreStoreTable(CCMA, enkf_107);
extern void CCMA_Dim_T_enkf_107(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_107(void *T);
extern int CCMA_Sql_T_enkf_107(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_107(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_108) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_108" : appearance order#113, hierarchy rank# 137, weight = 358.000113 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_108;

#endif /* defined(IS_a_TABLE_enkf_108) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_108)
extern const ODB_Tags *CCMA_Set_T_enkf_108_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_108_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_108_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_108_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_108_TAG = 0;
PRIVATE int CCMA_nT_enkf_108_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_108_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_108_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_108_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_108"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_108"; T[1].name = s; }
    CCMA_T_enkf_108_TAG = T;
    CCMA_nT_enkf_108_TAG = ntag;
    CCMA_nT_enkf_108_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_108_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_108_MEM;
  return CCMA_T_enkf_108_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_108_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_108_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_108;hprior@enkf_108;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_108_PREPTAG = T;
    CCMA_nT_enkf_108_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_108_PREPTAG;
  return CCMA_T_enkf_108_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_108(void *T);
extern int CCMA_Unpack_T_enkf_108(void *T);
extern int CCMA_Sel_T_enkf_108(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_108);
PrePutTable(CCMA, d, double, enkf_108);
PreLoadTable(CCMA, enkf_108);
PreStoreTable(CCMA, enkf_108);
extern void CCMA_Dim_T_enkf_108(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_108(void *T);
extern int CCMA_Sql_T_enkf_108(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_108(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_109) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_109" : appearance order#114, hierarchy rank# 138, weight = 358.000114 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_109;

#endif /* defined(IS_a_TABLE_enkf_109) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_109)
extern const ODB_Tags *CCMA_Set_T_enkf_109_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_109_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_109_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_109_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_109_TAG = 0;
PRIVATE int CCMA_nT_enkf_109_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_109_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_109_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_109_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_109"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_109"; T[1].name = s; }
    CCMA_T_enkf_109_TAG = T;
    CCMA_nT_enkf_109_TAG = ntag;
    CCMA_nT_enkf_109_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_109_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_109_MEM;
  return CCMA_T_enkf_109_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_109_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_109_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_109;hprior@enkf_109;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_109_PREPTAG = T;
    CCMA_nT_enkf_109_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_109_PREPTAG;
  return CCMA_T_enkf_109_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_109(void *T);
extern int CCMA_Unpack_T_enkf_109(void *T);
extern int CCMA_Sel_T_enkf_109(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_109);
PrePutTable(CCMA, d, double, enkf_109);
PreLoadTable(CCMA, enkf_109);
PreStoreTable(CCMA, enkf_109);
extern void CCMA_Dim_T_enkf_109(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_109(void *T);
extern int CCMA_Sql_T_enkf_109(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_109(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_110) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_110" : appearance order#115, hierarchy rank# 139, weight = 358.000115 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_110;

#endif /* defined(IS_a_TABLE_enkf_110) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_110)
extern const ODB_Tags *CCMA_Set_T_enkf_110_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_110_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_110_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_110_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_110_TAG = 0;
PRIVATE int CCMA_nT_enkf_110_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_110_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_110_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_110_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_110"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_110"; T[1].name = s; }
    CCMA_T_enkf_110_TAG = T;
    CCMA_nT_enkf_110_TAG = ntag;
    CCMA_nT_enkf_110_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_110_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_110_MEM;
  return CCMA_T_enkf_110_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_110_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_110_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_110;hprior@enkf_110;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_110_PREPTAG = T;
    CCMA_nT_enkf_110_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_110_PREPTAG;
  return CCMA_T_enkf_110_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_110(void *T);
extern int CCMA_Unpack_T_enkf_110(void *T);
extern int CCMA_Sel_T_enkf_110(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_110);
PrePutTable(CCMA, d, double, enkf_110);
PreLoadTable(CCMA, enkf_110);
PreStoreTable(CCMA, enkf_110);
extern void CCMA_Dim_T_enkf_110(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_110(void *T);
extern int CCMA_Sql_T_enkf_110(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_110(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_111) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_111" : appearance order#116, hierarchy rank# 140, weight = 358.000116 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_111;

#endif /* defined(IS_a_TABLE_enkf_111) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_111)
extern const ODB_Tags *CCMA_Set_T_enkf_111_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_111_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_111_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_111_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_111_TAG = 0;
PRIVATE int CCMA_nT_enkf_111_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_111_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_111_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_111_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_111"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_111"; T[1].name = s; }
    CCMA_T_enkf_111_TAG = T;
    CCMA_nT_enkf_111_TAG = ntag;
    CCMA_nT_enkf_111_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_111_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_111_MEM;
  return CCMA_T_enkf_111_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_111_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_111_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_111;hprior@enkf_111;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_111_PREPTAG = T;
    CCMA_nT_enkf_111_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_111_PREPTAG;
  return CCMA_T_enkf_111_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_111(void *T);
extern int CCMA_Unpack_T_enkf_111(void *T);
extern int CCMA_Sel_T_enkf_111(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_111);
PrePutTable(CCMA, d, double, enkf_111);
PreLoadTable(CCMA, enkf_111);
PreStoreTable(CCMA, enkf_111);
extern void CCMA_Dim_T_enkf_111(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_111(void *T);
extern int CCMA_Sql_T_enkf_111(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_111(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_112) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_112" : appearance order#117, hierarchy rank# 141, weight = 358.000117 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_112;

#endif /* defined(IS_a_TABLE_enkf_112) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_112)
extern const ODB_Tags *CCMA_Set_T_enkf_112_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_112_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_112_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_112_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_112_TAG = 0;
PRIVATE int CCMA_nT_enkf_112_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_112_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_112_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_112_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_112"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_112"; T[1].name = s; }
    CCMA_T_enkf_112_TAG = T;
    CCMA_nT_enkf_112_TAG = ntag;
    CCMA_nT_enkf_112_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_112_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_112_MEM;
  return CCMA_T_enkf_112_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_112_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_112_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_112;hprior@enkf_112;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_112_PREPTAG = T;
    CCMA_nT_enkf_112_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_112_PREPTAG;
  return CCMA_T_enkf_112_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_112(void *T);
extern int CCMA_Unpack_T_enkf_112(void *T);
extern int CCMA_Sel_T_enkf_112(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_112);
PrePutTable(CCMA, d, double, enkf_112);
PreLoadTable(CCMA, enkf_112);
PreStoreTable(CCMA, enkf_112);
extern void CCMA_Dim_T_enkf_112(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_112(void *T);
extern int CCMA_Sql_T_enkf_112(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_112(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_113) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_113" : appearance order#118, hierarchy rank# 142, weight = 358.000118 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_113;

#endif /* defined(IS_a_TABLE_enkf_113) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_113)
extern const ODB_Tags *CCMA_Set_T_enkf_113_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_113_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_113_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_113_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_113_TAG = 0;
PRIVATE int CCMA_nT_enkf_113_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_113_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_113_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_113_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_113"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_113"; T[1].name = s; }
    CCMA_T_enkf_113_TAG = T;
    CCMA_nT_enkf_113_TAG = ntag;
    CCMA_nT_enkf_113_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_113_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_113_MEM;
  return CCMA_T_enkf_113_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_113_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_113_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_113;hprior@enkf_113;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_113_PREPTAG = T;
    CCMA_nT_enkf_113_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_113_PREPTAG;
  return CCMA_T_enkf_113_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_113(void *T);
extern int CCMA_Unpack_T_enkf_113(void *T);
extern int CCMA_Sel_T_enkf_113(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_113);
PrePutTable(CCMA, d, double, enkf_113);
PreLoadTable(CCMA, enkf_113);
PreStoreTable(CCMA, enkf_113);
extern void CCMA_Dim_T_enkf_113(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_113(void *T);
extern int CCMA_Sql_T_enkf_113(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_113(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_114) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_114" : appearance order#119, hierarchy rank# 143, weight = 358.000119 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_114;

#endif /* defined(IS_a_TABLE_enkf_114) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_114)
extern const ODB_Tags *CCMA_Set_T_enkf_114_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_114_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_114_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_114_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_114_TAG = 0;
PRIVATE int CCMA_nT_enkf_114_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_114_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_114_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_114_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_114"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_114"; T[1].name = s; }
    CCMA_T_enkf_114_TAG = T;
    CCMA_nT_enkf_114_TAG = ntag;
    CCMA_nT_enkf_114_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_114_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_114_MEM;
  return CCMA_T_enkf_114_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_114_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_114_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_114;hprior@enkf_114;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_114_PREPTAG = T;
    CCMA_nT_enkf_114_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_114_PREPTAG;
  return CCMA_T_enkf_114_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_114(void *T);
extern int CCMA_Unpack_T_enkf_114(void *T);
extern int CCMA_Sel_T_enkf_114(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_114);
PrePutTable(CCMA, d, double, enkf_114);
PreLoadTable(CCMA, enkf_114);
PreStoreTable(CCMA, enkf_114);
extern void CCMA_Dim_T_enkf_114(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_114(void *T);
extern int CCMA_Sql_T_enkf_114(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_114(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_115) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_115" : appearance order#120, hierarchy rank# 144, weight = 358.000120 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_115;

#endif /* defined(IS_a_TABLE_enkf_115) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_115)
extern const ODB_Tags *CCMA_Set_T_enkf_115_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_115_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_115_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_115_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_115_TAG = 0;
PRIVATE int CCMA_nT_enkf_115_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_115_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_115_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_115_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_115"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_115"; T[1].name = s; }
    CCMA_T_enkf_115_TAG = T;
    CCMA_nT_enkf_115_TAG = ntag;
    CCMA_nT_enkf_115_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_115_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_115_MEM;
  return CCMA_T_enkf_115_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_115_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_115_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_115;hprior@enkf_115;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_115_PREPTAG = T;
    CCMA_nT_enkf_115_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_115_PREPTAG;
  return CCMA_T_enkf_115_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_115(void *T);
extern int CCMA_Unpack_T_enkf_115(void *T);
extern int CCMA_Sel_T_enkf_115(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_115);
PrePutTable(CCMA, d, double, enkf_115);
PreLoadTable(CCMA, enkf_115);
PreStoreTable(CCMA, enkf_115);
extern void CCMA_Dim_T_enkf_115(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_115(void *T);
extern int CCMA_Sql_T_enkf_115(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_115(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_116) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_116" : appearance order#121, hierarchy rank# 145, weight = 358.000121 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_116;

#endif /* defined(IS_a_TABLE_enkf_116) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_116)
extern const ODB_Tags *CCMA_Set_T_enkf_116_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_116_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_116_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_116_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_116_TAG = 0;
PRIVATE int CCMA_nT_enkf_116_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_116_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_116_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_116_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_116"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_116"; T[1].name = s; }
    CCMA_T_enkf_116_TAG = T;
    CCMA_nT_enkf_116_TAG = ntag;
    CCMA_nT_enkf_116_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_116_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_116_MEM;
  return CCMA_T_enkf_116_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_116_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_116_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_116;hprior@enkf_116;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_116_PREPTAG = T;
    CCMA_nT_enkf_116_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_116_PREPTAG;
  return CCMA_T_enkf_116_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_116(void *T);
extern int CCMA_Unpack_T_enkf_116(void *T);
extern int CCMA_Sel_T_enkf_116(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_116);
PrePutTable(CCMA, d, double, enkf_116);
PreLoadTable(CCMA, enkf_116);
PreStoreTable(CCMA, enkf_116);
extern void CCMA_Dim_T_enkf_116(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_116(void *T);
extern int CCMA_Sql_T_enkf_116(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_116(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_117) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_117" : appearance order#122, hierarchy rank# 146, weight = 358.000122 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_117;

#endif /* defined(IS_a_TABLE_enkf_117) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_117)
extern const ODB_Tags *CCMA_Set_T_enkf_117_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_117_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_117_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_117_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_117_TAG = 0;
PRIVATE int CCMA_nT_enkf_117_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_117_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_117_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_117_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_117"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_117"; T[1].name = s; }
    CCMA_T_enkf_117_TAG = T;
    CCMA_nT_enkf_117_TAG = ntag;
    CCMA_nT_enkf_117_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_117_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_117_MEM;
  return CCMA_T_enkf_117_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_117_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_117_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_117;hprior@enkf_117;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_117_PREPTAG = T;
    CCMA_nT_enkf_117_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_117_PREPTAG;
  return CCMA_T_enkf_117_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_117(void *T);
extern int CCMA_Unpack_T_enkf_117(void *T);
extern int CCMA_Sel_T_enkf_117(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_117);
PrePutTable(CCMA, d, double, enkf_117);
PreLoadTable(CCMA, enkf_117);
PreStoreTable(CCMA, enkf_117);
extern void CCMA_Dim_T_enkf_117(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_117(void *T);
extern int CCMA_Sql_T_enkf_117(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_117(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_118) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_118" : appearance order#123, hierarchy rank# 147, weight = 358.000123 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_118;

#endif /* defined(IS_a_TABLE_enkf_118) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_118)
extern const ODB_Tags *CCMA_Set_T_enkf_118_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_118_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_118_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_118_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_118_TAG = 0;
PRIVATE int CCMA_nT_enkf_118_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_118_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_118_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_118_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_118"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_118"; T[1].name = s; }
    CCMA_T_enkf_118_TAG = T;
    CCMA_nT_enkf_118_TAG = ntag;
    CCMA_nT_enkf_118_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_118_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_118_MEM;
  return CCMA_T_enkf_118_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_118_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_118_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_118;hprior@enkf_118;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_118_PREPTAG = T;
    CCMA_nT_enkf_118_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_118_PREPTAG;
  return CCMA_T_enkf_118_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_118(void *T);
extern int CCMA_Unpack_T_enkf_118(void *T);
extern int CCMA_Sel_T_enkf_118(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_118);
PrePutTable(CCMA, d, double, enkf_118);
PreLoadTable(CCMA, enkf_118);
PreStoreTable(CCMA, enkf_118);
extern void CCMA_Dim_T_enkf_118(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_118(void *T);
extern int CCMA_Sql_T_enkf_118(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_118(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_119) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_119" : appearance order#124, hierarchy rank# 148, weight = 358.000124 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_119;

#endif /* defined(IS_a_TABLE_enkf_119) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_119)
extern const ODB_Tags *CCMA_Set_T_enkf_119_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_119_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_119_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_119_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_119_TAG = 0;
PRIVATE int CCMA_nT_enkf_119_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_119_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_119_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_119_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_119"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_119"; T[1].name = s; }
    CCMA_T_enkf_119_TAG = T;
    CCMA_nT_enkf_119_TAG = ntag;
    CCMA_nT_enkf_119_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_119_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_119_MEM;
  return CCMA_T_enkf_119_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_119_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_119_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_119;hprior@enkf_119;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_119_PREPTAG = T;
    CCMA_nT_enkf_119_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_119_PREPTAG;
  return CCMA_T_enkf_119_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_119(void *T);
extern int CCMA_Unpack_T_enkf_119(void *T);
extern int CCMA_Sel_T_enkf_119(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_119);
PrePutTable(CCMA, d, double, enkf_119);
PreLoadTable(CCMA, enkf_119);
PreStoreTable(CCMA, enkf_119);
extern void CCMA_Dim_T_enkf_119(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_119(void *T);
extern int CCMA_Sql_T_enkf_119(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_119(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enkf_120) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enkf_120" : appearance order#125, hierarchy rank# 149, weight = 358.000125 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(pk9real,hprior);
} TABLE_enkf_120;

#endif /* defined(IS_a_TABLE_enkf_120) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enkf_120)
extern const ODB_Tags *CCMA_Set_T_enkf_120_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enkf_120_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enkf_120_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enkf_120_PREPTAG = NULL;
PRIVATE int CCMA_nT_enkf_120_TAG = 0;
PRIVATE int CCMA_nT_enkf_120_PREPTAG = 0;
PRIVATE int CCMA_nT_enkf_120_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enkf_120_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enkf_120_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enkf_120"; T[0].name = s; }
    { static char s[] = "pk9real:hprior@enkf_120"; T[1].name = s; }
    CCMA_T_enkf_120_TAG = T;
    CCMA_nT_enkf_120_TAG = ntag;
    CCMA_nT_enkf_120_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enkf_120_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enkf_120_MEM;
  return CCMA_T_enkf_120_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enkf_120_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enkf_120_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 33;
    { static char s[] =
      ";member@enkf_120;hprior@enkf_120;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 16;
    { static char s[] =
      ";pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_enkf_120_PREPTAG = T;
    CCMA_nT_enkf_120_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enkf_120_PREPTAG;
  return CCMA_T_enkf_120_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enkf_120(void *T);
extern int CCMA_Unpack_T_enkf_120(void *T);
extern int CCMA_Sel_T_enkf_120(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enkf_120);
PrePutTable(CCMA, d, double, enkf_120);
PreLoadTable(CCMA, enkf_120);
PreStoreTable(CCMA, enkf_120);
extern void CCMA_Dim_T_enkf_120(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enkf_120(void *T);
extern int CCMA_Sql_T_enkf_120(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enkf_120(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_1) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_1" : appearance order#126, hierarchy rank# 150, weight = 358.000126 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_1;

#endif /* defined(IS_a_TABLE_enda_1) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_1)
extern const ODB_Tags *CCMA_Set_T_enda_1_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_1_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_1_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_1_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_1_TAG = 0;
PRIVATE int CCMA_nT_enda_1_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_1_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_1_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_1_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_1"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_1"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_1"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_1"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_1"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_1"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_1"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_1"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_1"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_1"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_1"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_1"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_1"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_1"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_1"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_1"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_1"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_1"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_1"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_1"; T[19].name = s; }
    CCMA_T_enda_1_TAG = T;
    CCMA_nT_enda_1_TAG = ntag;
    CCMA_nT_enda_1_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_1_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_1_MEM;
  return CCMA_T_enda_1_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_1_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_1_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_1;report_status@enda_1;report_event1@enda_1;"
      "obsvalue@enda_1;datum_anflag@enda_1;datum_status@enda_1;"
      "datum_event1@enda_1;biascorr@enda_1;biascorr_fg@enda_1;"
      "an_depar@enda_1;fg_depar@enda_1;qc_pge@enda_1;final_obs_error@enda_1;"
      "obs_error@enda_1;fg_error@enda_1;skintemp_1@enda_1;"
      "skintemp_2@enda_1;skintemp_3@enda_1;skintemp_4@enda_1;"
      "skintemp_5@enda_1;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_1;report_status@enda_1;report_event1@enda_1;"
      "obsvalue@enda_1;datum_anflag@enda_1;datum_status@enda_1;"
      "datum_event1@enda_1;biascorr@enda_1;biascorr_fg@enda_1;"
      "an_depar@enda_1;fg_depar@enda_1;qc_pge@enda_1;final_obs_error@enda_1;"
      "obs_error@enda_1;fg_error@enda_1;skintemp_1@enda_1;"
      "skintemp_2@enda_1;skintemp_3@enda_1;skintemp_4@enda_1;"
      "skintemp_5@enda_1;report_status.active@enda_1;report_status.passive@enda_1;"
      "report_status.rejected@enda_1;report_status.blacklisted@enda_1;"
      "report_status.use_emiskf_only@enda_1;report_event1.no_data@enda_1;"
      "report_event1.all_rejected@enda_1;report_event1.bad_practice@enda_1;"
      "report_event1.rdb_rejected@enda_1;report_event1.redundant@enda_1;"
      "report_event1.stalt_missing@enda_1;report_event1.qc_failed@enda_1;"
      "report_event1.overcast_ir@enda_1;report_event1.thinned@enda_1;"
      "report_event1.latlon_corrected@enda_1;report_event1.stalt_corrected@enda_1;"
      "datum_anflag.final@enda_1;datum_anflag.fg@enda_1;datum_anflag.depar@enda_1;"
      "datum_anflag.varqc@enda_1;datum_anflag.blacklist@enda_1;"
      "datum_anflag.ups@enda_1;datum_anflag.uvt@enda_1;datum_anflag.uhu@enda_1;"
      "datum_anflag.ut2@enda_1;datum_anflag.uh2@enda_1;datum_anflag.uv1@enda_1;"
      "datum_anflag.urr@enda_1;datum_anflag.usn@enda_1;datum_anflag.usst@enda_1;"
      "datum_status.active@enda_1;datum_status.passive@enda_1;"
      "datum_status.rejected@enda_1;datum_status.blacklisted@enda_1;"
      "datum_status.use_emiskf_only@enda_1;datum_event1.vertco_missing@enda_1;"
      "datum_event1.obsvalue_missing@enda_1;datum_event1.fg_missing@enda_1;"
      "datum_event1.rdb_rejected@enda_1;datum_event1.assim_cld_flag@enda_1;"
      "datum_event1.bad_practice@enda_1;datum_event1.vertpos_outrange@enda_1;"
      "datum_event1.fg2big@enda_1;datum_event1.depar2big@enda_1;"
      "datum_event1.obs_error2big@enda_1;datum_event1.datum_redundant@enda_1;"
      "datum_event1.level_redundant@enda_1;datum_event1.not_analysis_varno@enda_1;"
      "datum_event1.duplicate@enda_1;datum_event1.levels2many@enda_1;"
      "datum_event1.level_selection@enda_1;datum_event1.vertco_consistency@enda_1;"
      "datum_event1.vertco_type_changed@enda_1;datum_event1.combined_flagging@enda_1;"
      "datum_event1.report_rejected@enda_1;datum_event1.varqc_performed@enda_1;"
      "datum_event1.obserror_increased@enda_1;datum_event1.contam_cld_flag@enda_1;"
      "datum_event1.contam_rain_flag@enda_1;datum_event1.contam_aerosol_flag@enda_1;"
      "datum_event1.bad_emissivity@enda_1;datum_event1.model_cld_flag@enda_1;"
      "datum_event1.contam_trgas_flag@enda_1;datum_event1.land_sensitivity@enda_1;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_1_PREPTAG = T;
    CCMA_nT_enda_1_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_1_PREPTAG;
  return CCMA_T_enda_1_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_1(void *T);
extern int CCMA_Unpack_T_enda_1(void *T);
extern int CCMA_Sel_T_enda_1(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_1);
PrePutTable(CCMA, d, double, enda_1);
PreLoadTable(CCMA, enda_1);
PreStoreTable(CCMA, enda_1);
extern void CCMA_Dim_T_enda_1(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_1(void *T);
extern int CCMA_Sql_T_enda_1(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_1(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_2) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_2" : appearance order#127, hierarchy rank# 151, weight = 358.000127 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_2;

#endif /* defined(IS_a_TABLE_enda_2) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_2)
extern const ODB_Tags *CCMA_Set_T_enda_2_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_2_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_2_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_2_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_2_TAG = 0;
PRIVATE int CCMA_nT_enda_2_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_2_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_2_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_2_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_2"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_2"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_2"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_2"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_2"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_2"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_2"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_2"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_2"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_2"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_2"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_2"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_2"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_2"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_2"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_2"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_2"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_2"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_2"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_2"; T[19].name = s; }
    CCMA_T_enda_2_TAG = T;
    CCMA_nT_enda_2_TAG = ntag;
    CCMA_nT_enda_2_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_2_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_2_MEM;
  return CCMA_T_enda_2_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_2_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_2_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_2;report_status@enda_2;report_event1@enda_2;"
      "obsvalue@enda_2;datum_anflag@enda_2;datum_status@enda_2;"
      "datum_event1@enda_2;biascorr@enda_2;biascorr_fg@enda_2;"
      "an_depar@enda_2;fg_depar@enda_2;qc_pge@enda_2;final_obs_error@enda_2;"
      "obs_error@enda_2;fg_error@enda_2;skintemp_1@enda_2;"
      "skintemp_2@enda_2;skintemp_3@enda_2;skintemp_4@enda_2;"
      "skintemp_5@enda_2;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_2;report_status@enda_2;report_event1@enda_2;"
      "obsvalue@enda_2;datum_anflag@enda_2;datum_status@enda_2;"
      "datum_event1@enda_2;biascorr@enda_2;biascorr_fg@enda_2;"
      "an_depar@enda_2;fg_depar@enda_2;qc_pge@enda_2;final_obs_error@enda_2;"
      "obs_error@enda_2;fg_error@enda_2;skintemp_1@enda_2;"
      "skintemp_2@enda_2;skintemp_3@enda_2;skintemp_4@enda_2;"
      "skintemp_5@enda_2;report_status.active@enda_2;report_status.passive@enda_2;"
      "report_status.rejected@enda_2;report_status.blacklisted@enda_2;"
      "report_status.use_emiskf_only@enda_2;report_event1.no_data@enda_2;"
      "report_event1.all_rejected@enda_2;report_event1.bad_practice@enda_2;"
      "report_event1.rdb_rejected@enda_2;report_event1.redundant@enda_2;"
      "report_event1.stalt_missing@enda_2;report_event1.qc_failed@enda_2;"
      "report_event1.overcast_ir@enda_2;report_event1.thinned@enda_2;"
      "report_event1.latlon_corrected@enda_2;report_event1.stalt_corrected@enda_2;"
      "datum_anflag.final@enda_2;datum_anflag.fg@enda_2;datum_anflag.depar@enda_2;"
      "datum_anflag.varqc@enda_2;datum_anflag.blacklist@enda_2;"
      "datum_anflag.ups@enda_2;datum_anflag.uvt@enda_2;datum_anflag.uhu@enda_2;"
      "datum_anflag.ut2@enda_2;datum_anflag.uh2@enda_2;datum_anflag.uv1@enda_2;"
      "datum_anflag.urr@enda_2;datum_anflag.usn@enda_2;datum_anflag.usst@enda_2;"
      "datum_status.active@enda_2;datum_status.passive@enda_2;"
      "datum_status.rejected@enda_2;datum_status.blacklisted@enda_2;"
      "datum_status.use_emiskf_only@enda_2;datum_event1.vertco_missing@enda_2;"
      "datum_event1.obsvalue_missing@enda_2;datum_event1.fg_missing@enda_2;"
      "datum_event1.rdb_rejected@enda_2;datum_event1.assim_cld_flag@enda_2;"
      "datum_event1.bad_practice@enda_2;datum_event1.vertpos_outrange@enda_2;"
      "datum_event1.fg2big@enda_2;datum_event1.depar2big@enda_2;"
      "datum_event1.obs_error2big@enda_2;datum_event1.datum_redundant@enda_2;"
      "datum_event1.level_redundant@enda_2;datum_event1.not_analysis_varno@enda_2;"
      "datum_event1.duplicate@enda_2;datum_event1.levels2many@enda_2;"
      "datum_event1.level_selection@enda_2;datum_event1.vertco_consistency@enda_2;"
      "datum_event1.vertco_type_changed@enda_2;datum_event1.combined_flagging@enda_2;"
      "datum_event1.report_rejected@enda_2;datum_event1.varqc_performed@enda_2;"
      "datum_event1.obserror_increased@enda_2;datum_event1.contam_cld_flag@enda_2;"
      "datum_event1.contam_rain_flag@enda_2;datum_event1.contam_aerosol_flag@enda_2;"
      "datum_event1.bad_emissivity@enda_2;datum_event1.model_cld_flag@enda_2;"
      "datum_event1.contam_trgas_flag@enda_2;datum_event1.land_sensitivity@enda_2;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_2_PREPTAG = T;
    CCMA_nT_enda_2_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_2_PREPTAG;
  return CCMA_T_enda_2_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_2(void *T);
extern int CCMA_Unpack_T_enda_2(void *T);
extern int CCMA_Sel_T_enda_2(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_2);
PrePutTable(CCMA, d, double, enda_2);
PreLoadTable(CCMA, enda_2);
PreStoreTable(CCMA, enda_2);
extern void CCMA_Dim_T_enda_2(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_2(void *T);
extern int CCMA_Sql_T_enda_2(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_2(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_3) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_3" : appearance order#128, hierarchy rank# 152, weight = 358.000128 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_3;

#endif /* defined(IS_a_TABLE_enda_3) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_3)
extern const ODB_Tags *CCMA_Set_T_enda_3_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_3_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_3_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_3_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_3_TAG = 0;
PRIVATE int CCMA_nT_enda_3_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_3_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_3_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_3_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_3"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_3"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_3"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_3"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_3"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_3"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_3"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_3"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_3"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_3"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_3"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_3"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_3"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_3"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_3"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_3"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_3"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_3"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_3"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_3"; T[19].name = s; }
    CCMA_T_enda_3_TAG = T;
    CCMA_nT_enda_3_TAG = ntag;
    CCMA_nT_enda_3_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_3_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_3_MEM;
  return CCMA_T_enda_3_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_3_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_3_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_3;report_status@enda_3;report_event1@enda_3;"
      "obsvalue@enda_3;datum_anflag@enda_3;datum_status@enda_3;"
      "datum_event1@enda_3;biascorr@enda_3;biascorr_fg@enda_3;"
      "an_depar@enda_3;fg_depar@enda_3;qc_pge@enda_3;final_obs_error@enda_3;"
      "obs_error@enda_3;fg_error@enda_3;skintemp_1@enda_3;"
      "skintemp_2@enda_3;skintemp_3@enda_3;skintemp_4@enda_3;"
      "skintemp_5@enda_3;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_3;report_status@enda_3;report_event1@enda_3;"
      "obsvalue@enda_3;datum_anflag@enda_3;datum_status@enda_3;"
      "datum_event1@enda_3;biascorr@enda_3;biascorr_fg@enda_3;"
      "an_depar@enda_3;fg_depar@enda_3;qc_pge@enda_3;final_obs_error@enda_3;"
      "obs_error@enda_3;fg_error@enda_3;skintemp_1@enda_3;"
      "skintemp_2@enda_3;skintemp_3@enda_3;skintemp_4@enda_3;"
      "skintemp_5@enda_3;report_status.active@enda_3;report_status.passive@enda_3;"
      "report_status.rejected@enda_3;report_status.blacklisted@enda_3;"
      "report_status.use_emiskf_only@enda_3;report_event1.no_data@enda_3;"
      "report_event1.all_rejected@enda_3;report_event1.bad_practice@enda_3;"
      "report_event1.rdb_rejected@enda_3;report_event1.redundant@enda_3;"
      "report_event1.stalt_missing@enda_3;report_event1.qc_failed@enda_3;"
      "report_event1.overcast_ir@enda_3;report_event1.thinned@enda_3;"
      "report_event1.latlon_corrected@enda_3;report_event1.stalt_corrected@enda_3;"
      "datum_anflag.final@enda_3;datum_anflag.fg@enda_3;datum_anflag.depar@enda_3;"
      "datum_anflag.varqc@enda_3;datum_anflag.blacklist@enda_3;"
      "datum_anflag.ups@enda_3;datum_anflag.uvt@enda_3;datum_anflag.uhu@enda_3;"
      "datum_anflag.ut2@enda_3;datum_anflag.uh2@enda_3;datum_anflag.uv1@enda_3;"
      "datum_anflag.urr@enda_3;datum_anflag.usn@enda_3;datum_anflag.usst@enda_3;"
      "datum_status.active@enda_3;datum_status.passive@enda_3;"
      "datum_status.rejected@enda_3;datum_status.blacklisted@enda_3;"
      "datum_status.use_emiskf_only@enda_3;datum_event1.vertco_missing@enda_3;"
      "datum_event1.obsvalue_missing@enda_3;datum_event1.fg_missing@enda_3;"
      "datum_event1.rdb_rejected@enda_3;datum_event1.assim_cld_flag@enda_3;"
      "datum_event1.bad_practice@enda_3;datum_event1.vertpos_outrange@enda_3;"
      "datum_event1.fg2big@enda_3;datum_event1.depar2big@enda_3;"
      "datum_event1.obs_error2big@enda_3;datum_event1.datum_redundant@enda_3;"
      "datum_event1.level_redundant@enda_3;datum_event1.not_analysis_varno@enda_3;"
      "datum_event1.duplicate@enda_3;datum_event1.levels2many@enda_3;"
      "datum_event1.level_selection@enda_3;datum_event1.vertco_consistency@enda_3;"
      "datum_event1.vertco_type_changed@enda_3;datum_event1.combined_flagging@enda_3;"
      "datum_event1.report_rejected@enda_3;datum_event1.varqc_performed@enda_3;"
      "datum_event1.obserror_increased@enda_3;datum_event1.contam_cld_flag@enda_3;"
      "datum_event1.contam_rain_flag@enda_3;datum_event1.contam_aerosol_flag@enda_3;"
      "datum_event1.bad_emissivity@enda_3;datum_event1.model_cld_flag@enda_3;"
      "datum_event1.contam_trgas_flag@enda_3;datum_event1.land_sensitivity@enda_3;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_3_PREPTAG = T;
    CCMA_nT_enda_3_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_3_PREPTAG;
  return CCMA_T_enda_3_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_3(void *T);
extern int CCMA_Unpack_T_enda_3(void *T);
extern int CCMA_Sel_T_enda_3(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_3);
PrePutTable(CCMA, d, double, enda_3);
PreLoadTable(CCMA, enda_3);
PreStoreTable(CCMA, enda_3);
extern void CCMA_Dim_T_enda_3(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_3(void *T);
extern int CCMA_Sql_T_enda_3(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_3(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_4) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_4" : appearance order#129, hierarchy rank# 153, weight = 358.000129 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_4;

#endif /* defined(IS_a_TABLE_enda_4) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_4)
extern const ODB_Tags *CCMA_Set_T_enda_4_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_4_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_4_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_4_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_4_TAG = 0;
PRIVATE int CCMA_nT_enda_4_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_4_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_4_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_4_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_4"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_4"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_4"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_4"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_4"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_4"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_4"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_4"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_4"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_4"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_4"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_4"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_4"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_4"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_4"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_4"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_4"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_4"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_4"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_4"; T[19].name = s; }
    CCMA_T_enda_4_TAG = T;
    CCMA_nT_enda_4_TAG = ntag;
    CCMA_nT_enda_4_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_4_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_4_MEM;
  return CCMA_T_enda_4_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_4_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_4_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_4;report_status@enda_4;report_event1@enda_4;"
      "obsvalue@enda_4;datum_anflag@enda_4;datum_status@enda_4;"
      "datum_event1@enda_4;biascorr@enda_4;biascorr_fg@enda_4;"
      "an_depar@enda_4;fg_depar@enda_4;qc_pge@enda_4;final_obs_error@enda_4;"
      "obs_error@enda_4;fg_error@enda_4;skintemp_1@enda_4;"
      "skintemp_2@enda_4;skintemp_3@enda_4;skintemp_4@enda_4;"
      "skintemp_5@enda_4;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_4;report_status@enda_4;report_event1@enda_4;"
      "obsvalue@enda_4;datum_anflag@enda_4;datum_status@enda_4;"
      "datum_event1@enda_4;biascorr@enda_4;biascorr_fg@enda_4;"
      "an_depar@enda_4;fg_depar@enda_4;qc_pge@enda_4;final_obs_error@enda_4;"
      "obs_error@enda_4;fg_error@enda_4;skintemp_1@enda_4;"
      "skintemp_2@enda_4;skintemp_3@enda_4;skintemp_4@enda_4;"
      "skintemp_5@enda_4;report_status.active@enda_4;report_status.passive@enda_4;"
      "report_status.rejected@enda_4;report_status.blacklisted@enda_4;"
      "report_status.use_emiskf_only@enda_4;report_event1.no_data@enda_4;"
      "report_event1.all_rejected@enda_4;report_event1.bad_practice@enda_4;"
      "report_event1.rdb_rejected@enda_4;report_event1.redundant@enda_4;"
      "report_event1.stalt_missing@enda_4;report_event1.qc_failed@enda_4;"
      "report_event1.overcast_ir@enda_4;report_event1.thinned@enda_4;"
      "report_event1.latlon_corrected@enda_4;report_event1.stalt_corrected@enda_4;"
      "datum_anflag.final@enda_4;datum_anflag.fg@enda_4;datum_anflag.depar@enda_4;"
      "datum_anflag.varqc@enda_4;datum_anflag.blacklist@enda_4;"
      "datum_anflag.ups@enda_4;datum_anflag.uvt@enda_4;datum_anflag.uhu@enda_4;"
      "datum_anflag.ut2@enda_4;datum_anflag.uh2@enda_4;datum_anflag.uv1@enda_4;"
      "datum_anflag.urr@enda_4;datum_anflag.usn@enda_4;datum_anflag.usst@enda_4;"
      "datum_status.active@enda_4;datum_status.passive@enda_4;"
      "datum_status.rejected@enda_4;datum_status.blacklisted@enda_4;"
      "datum_status.use_emiskf_only@enda_4;datum_event1.vertco_missing@enda_4;"
      "datum_event1.obsvalue_missing@enda_4;datum_event1.fg_missing@enda_4;"
      "datum_event1.rdb_rejected@enda_4;datum_event1.assim_cld_flag@enda_4;"
      "datum_event1.bad_practice@enda_4;datum_event1.vertpos_outrange@enda_4;"
      "datum_event1.fg2big@enda_4;datum_event1.depar2big@enda_4;"
      "datum_event1.obs_error2big@enda_4;datum_event1.datum_redundant@enda_4;"
      "datum_event1.level_redundant@enda_4;datum_event1.not_analysis_varno@enda_4;"
      "datum_event1.duplicate@enda_4;datum_event1.levels2many@enda_4;"
      "datum_event1.level_selection@enda_4;datum_event1.vertco_consistency@enda_4;"
      "datum_event1.vertco_type_changed@enda_4;datum_event1.combined_flagging@enda_4;"
      "datum_event1.report_rejected@enda_4;datum_event1.varqc_performed@enda_4;"
      "datum_event1.obserror_increased@enda_4;datum_event1.contam_cld_flag@enda_4;"
      "datum_event1.contam_rain_flag@enda_4;datum_event1.contam_aerosol_flag@enda_4;"
      "datum_event1.bad_emissivity@enda_4;datum_event1.model_cld_flag@enda_4;"
      "datum_event1.contam_trgas_flag@enda_4;datum_event1.land_sensitivity@enda_4;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_4_PREPTAG = T;
    CCMA_nT_enda_4_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_4_PREPTAG;
  return CCMA_T_enda_4_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_4(void *T);
extern int CCMA_Unpack_T_enda_4(void *T);
extern int CCMA_Sel_T_enda_4(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_4);
PrePutTable(CCMA, d, double, enda_4);
PreLoadTable(CCMA, enda_4);
PreStoreTable(CCMA, enda_4);
extern void CCMA_Dim_T_enda_4(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_4(void *T);
extern int CCMA_Sql_T_enda_4(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_4(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_5) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_5" : appearance order#130, hierarchy rank# 154, weight = 358.000130 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_5;

#endif /* defined(IS_a_TABLE_enda_5) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_5)
extern const ODB_Tags *CCMA_Set_T_enda_5_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_5_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_5_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_5_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_5_TAG = 0;
PRIVATE int CCMA_nT_enda_5_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_5_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_5_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_5_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_5"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_5"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_5"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_5"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_5"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_5"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_5"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_5"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_5"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_5"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_5"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_5"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_5"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_5"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_5"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_5"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_5"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_5"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_5"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_5"; T[19].name = s; }
    CCMA_T_enda_5_TAG = T;
    CCMA_nT_enda_5_TAG = ntag;
    CCMA_nT_enda_5_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_5_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_5_MEM;
  return CCMA_T_enda_5_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_5_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_5_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_5;report_status@enda_5;report_event1@enda_5;"
      "obsvalue@enda_5;datum_anflag@enda_5;datum_status@enda_5;"
      "datum_event1@enda_5;biascorr@enda_5;biascorr_fg@enda_5;"
      "an_depar@enda_5;fg_depar@enda_5;qc_pge@enda_5;final_obs_error@enda_5;"
      "obs_error@enda_5;fg_error@enda_5;skintemp_1@enda_5;"
      "skintemp_2@enda_5;skintemp_3@enda_5;skintemp_4@enda_5;"
      "skintemp_5@enda_5;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_5;report_status@enda_5;report_event1@enda_5;"
      "obsvalue@enda_5;datum_anflag@enda_5;datum_status@enda_5;"
      "datum_event1@enda_5;biascorr@enda_5;biascorr_fg@enda_5;"
      "an_depar@enda_5;fg_depar@enda_5;qc_pge@enda_5;final_obs_error@enda_5;"
      "obs_error@enda_5;fg_error@enda_5;skintemp_1@enda_5;"
      "skintemp_2@enda_5;skintemp_3@enda_5;skintemp_4@enda_5;"
      "skintemp_5@enda_5;report_status.active@enda_5;report_status.passive@enda_5;"
      "report_status.rejected@enda_5;report_status.blacklisted@enda_5;"
      "report_status.use_emiskf_only@enda_5;report_event1.no_data@enda_5;"
      "report_event1.all_rejected@enda_5;report_event1.bad_practice@enda_5;"
      "report_event1.rdb_rejected@enda_5;report_event1.redundant@enda_5;"
      "report_event1.stalt_missing@enda_5;report_event1.qc_failed@enda_5;"
      "report_event1.overcast_ir@enda_5;report_event1.thinned@enda_5;"
      "report_event1.latlon_corrected@enda_5;report_event1.stalt_corrected@enda_5;"
      "datum_anflag.final@enda_5;datum_anflag.fg@enda_5;datum_anflag.depar@enda_5;"
      "datum_anflag.varqc@enda_5;datum_anflag.blacklist@enda_5;"
      "datum_anflag.ups@enda_5;datum_anflag.uvt@enda_5;datum_anflag.uhu@enda_5;"
      "datum_anflag.ut2@enda_5;datum_anflag.uh2@enda_5;datum_anflag.uv1@enda_5;"
      "datum_anflag.urr@enda_5;datum_anflag.usn@enda_5;datum_anflag.usst@enda_5;"
      "datum_status.active@enda_5;datum_status.passive@enda_5;"
      "datum_status.rejected@enda_5;datum_status.blacklisted@enda_5;"
      "datum_status.use_emiskf_only@enda_5;datum_event1.vertco_missing@enda_5;"
      "datum_event1.obsvalue_missing@enda_5;datum_event1.fg_missing@enda_5;"
      "datum_event1.rdb_rejected@enda_5;datum_event1.assim_cld_flag@enda_5;"
      "datum_event1.bad_practice@enda_5;datum_event1.vertpos_outrange@enda_5;"
      "datum_event1.fg2big@enda_5;datum_event1.depar2big@enda_5;"
      "datum_event1.obs_error2big@enda_5;datum_event1.datum_redundant@enda_5;"
      "datum_event1.level_redundant@enda_5;datum_event1.not_analysis_varno@enda_5;"
      "datum_event1.duplicate@enda_5;datum_event1.levels2many@enda_5;"
      "datum_event1.level_selection@enda_5;datum_event1.vertco_consistency@enda_5;"
      "datum_event1.vertco_type_changed@enda_5;datum_event1.combined_flagging@enda_5;"
      "datum_event1.report_rejected@enda_5;datum_event1.varqc_performed@enda_5;"
      "datum_event1.obserror_increased@enda_5;datum_event1.contam_cld_flag@enda_5;"
      "datum_event1.contam_rain_flag@enda_5;datum_event1.contam_aerosol_flag@enda_5;"
      "datum_event1.bad_emissivity@enda_5;datum_event1.model_cld_flag@enda_5;"
      "datum_event1.contam_trgas_flag@enda_5;datum_event1.land_sensitivity@enda_5;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_5_PREPTAG = T;
    CCMA_nT_enda_5_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_5_PREPTAG;
  return CCMA_T_enda_5_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_5(void *T);
extern int CCMA_Unpack_T_enda_5(void *T);
extern int CCMA_Sel_T_enda_5(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_5);
PrePutTable(CCMA, d, double, enda_5);
PreLoadTable(CCMA, enda_5);
PreStoreTable(CCMA, enda_5);
extern void CCMA_Dim_T_enda_5(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_5(void *T);
extern int CCMA_Sql_T_enda_5(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_5(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_6) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_6" : appearance order#131, hierarchy rank# 155, weight = 358.000131 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_6;

#endif /* defined(IS_a_TABLE_enda_6) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_6)
extern const ODB_Tags *CCMA_Set_T_enda_6_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_6_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_6_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_6_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_6_TAG = 0;
PRIVATE int CCMA_nT_enda_6_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_6_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_6_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_6_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_6"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_6"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_6"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_6"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_6"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_6"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_6"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_6"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_6"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_6"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_6"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_6"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_6"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_6"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_6"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_6"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_6"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_6"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_6"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_6"; T[19].name = s; }
    CCMA_T_enda_6_TAG = T;
    CCMA_nT_enda_6_TAG = ntag;
    CCMA_nT_enda_6_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_6_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_6_MEM;
  return CCMA_T_enda_6_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_6_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_6_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_6;report_status@enda_6;report_event1@enda_6;"
      "obsvalue@enda_6;datum_anflag@enda_6;datum_status@enda_6;"
      "datum_event1@enda_6;biascorr@enda_6;biascorr_fg@enda_6;"
      "an_depar@enda_6;fg_depar@enda_6;qc_pge@enda_6;final_obs_error@enda_6;"
      "obs_error@enda_6;fg_error@enda_6;skintemp_1@enda_6;"
      "skintemp_2@enda_6;skintemp_3@enda_6;skintemp_4@enda_6;"
      "skintemp_5@enda_6;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_6;report_status@enda_6;report_event1@enda_6;"
      "obsvalue@enda_6;datum_anflag@enda_6;datum_status@enda_6;"
      "datum_event1@enda_6;biascorr@enda_6;biascorr_fg@enda_6;"
      "an_depar@enda_6;fg_depar@enda_6;qc_pge@enda_6;final_obs_error@enda_6;"
      "obs_error@enda_6;fg_error@enda_6;skintemp_1@enda_6;"
      "skintemp_2@enda_6;skintemp_3@enda_6;skintemp_4@enda_6;"
      "skintemp_5@enda_6;report_status.active@enda_6;report_status.passive@enda_6;"
      "report_status.rejected@enda_6;report_status.blacklisted@enda_6;"
      "report_status.use_emiskf_only@enda_6;report_event1.no_data@enda_6;"
      "report_event1.all_rejected@enda_6;report_event1.bad_practice@enda_6;"
      "report_event1.rdb_rejected@enda_6;report_event1.redundant@enda_6;"
      "report_event1.stalt_missing@enda_6;report_event1.qc_failed@enda_6;"
      "report_event1.overcast_ir@enda_6;report_event1.thinned@enda_6;"
      "report_event1.latlon_corrected@enda_6;report_event1.stalt_corrected@enda_6;"
      "datum_anflag.final@enda_6;datum_anflag.fg@enda_6;datum_anflag.depar@enda_6;"
      "datum_anflag.varqc@enda_6;datum_anflag.blacklist@enda_6;"
      "datum_anflag.ups@enda_6;datum_anflag.uvt@enda_6;datum_anflag.uhu@enda_6;"
      "datum_anflag.ut2@enda_6;datum_anflag.uh2@enda_6;datum_anflag.uv1@enda_6;"
      "datum_anflag.urr@enda_6;datum_anflag.usn@enda_6;datum_anflag.usst@enda_6;"
      "datum_status.active@enda_6;datum_status.passive@enda_6;"
      "datum_status.rejected@enda_6;datum_status.blacklisted@enda_6;"
      "datum_status.use_emiskf_only@enda_6;datum_event1.vertco_missing@enda_6;"
      "datum_event1.obsvalue_missing@enda_6;datum_event1.fg_missing@enda_6;"
      "datum_event1.rdb_rejected@enda_6;datum_event1.assim_cld_flag@enda_6;"
      "datum_event1.bad_practice@enda_6;datum_event1.vertpos_outrange@enda_6;"
      "datum_event1.fg2big@enda_6;datum_event1.depar2big@enda_6;"
      "datum_event1.obs_error2big@enda_6;datum_event1.datum_redundant@enda_6;"
      "datum_event1.level_redundant@enda_6;datum_event1.not_analysis_varno@enda_6;"
      "datum_event1.duplicate@enda_6;datum_event1.levels2many@enda_6;"
      "datum_event1.level_selection@enda_6;datum_event1.vertco_consistency@enda_6;"
      "datum_event1.vertco_type_changed@enda_6;datum_event1.combined_flagging@enda_6;"
      "datum_event1.report_rejected@enda_6;datum_event1.varqc_performed@enda_6;"
      "datum_event1.obserror_increased@enda_6;datum_event1.contam_cld_flag@enda_6;"
      "datum_event1.contam_rain_flag@enda_6;datum_event1.contam_aerosol_flag@enda_6;"
      "datum_event1.bad_emissivity@enda_6;datum_event1.model_cld_flag@enda_6;"
      "datum_event1.contam_trgas_flag@enda_6;datum_event1.land_sensitivity@enda_6;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_6_PREPTAG = T;
    CCMA_nT_enda_6_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_6_PREPTAG;
  return CCMA_T_enda_6_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_6(void *T);
extern int CCMA_Unpack_T_enda_6(void *T);
extern int CCMA_Sel_T_enda_6(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_6);
PrePutTable(CCMA, d, double, enda_6);
PreLoadTable(CCMA, enda_6);
PreStoreTable(CCMA, enda_6);
extern void CCMA_Dim_T_enda_6(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_6(void *T);
extern int CCMA_Sql_T_enda_6(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_6(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_7) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_7" : appearance order#132, hierarchy rank# 156, weight = 358.000132 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_7;

#endif /* defined(IS_a_TABLE_enda_7) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_7)
extern const ODB_Tags *CCMA_Set_T_enda_7_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_7_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_7_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_7_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_7_TAG = 0;
PRIVATE int CCMA_nT_enda_7_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_7_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_7_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_7_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_7"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_7"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_7"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_7"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_7"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_7"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_7"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_7"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_7"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_7"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_7"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_7"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_7"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_7"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_7"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_7"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_7"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_7"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_7"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_7"; T[19].name = s; }
    CCMA_T_enda_7_TAG = T;
    CCMA_nT_enda_7_TAG = ntag;
    CCMA_nT_enda_7_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_7_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_7_MEM;
  return CCMA_T_enda_7_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_7_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_7_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_7;report_status@enda_7;report_event1@enda_7;"
      "obsvalue@enda_7;datum_anflag@enda_7;datum_status@enda_7;"
      "datum_event1@enda_7;biascorr@enda_7;biascorr_fg@enda_7;"
      "an_depar@enda_7;fg_depar@enda_7;qc_pge@enda_7;final_obs_error@enda_7;"
      "obs_error@enda_7;fg_error@enda_7;skintemp_1@enda_7;"
      "skintemp_2@enda_7;skintemp_3@enda_7;skintemp_4@enda_7;"
      "skintemp_5@enda_7;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_7;report_status@enda_7;report_event1@enda_7;"
      "obsvalue@enda_7;datum_anflag@enda_7;datum_status@enda_7;"
      "datum_event1@enda_7;biascorr@enda_7;biascorr_fg@enda_7;"
      "an_depar@enda_7;fg_depar@enda_7;qc_pge@enda_7;final_obs_error@enda_7;"
      "obs_error@enda_7;fg_error@enda_7;skintemp_1@enda_7;"
      "skintemp_2@enda_7;skintemp_3@enda_7;skintemp_4@enda_7;"
      "skintemp_5@enda_7;report_status.active@enda_7;report_status.passive@enda_7;"
      "report_status.rejected@enda_7;report_status.blacklisted@enda_7;"
      "report_status.use_emiskf_only@enda_7;report_event1.no_data@enda_7;"
      "report_event1.all_rejected@enda_7;report_event1.bad_practice@enda_7;"
      "report_event1.rdb_rejected@enda_7;report_event1.redundant@enda_7;"
      "report_event1.stalt_missing@enda_7;report_event1.qc_failed@enda_7;"
      "report_event1.overcast_ir@enda_7;report_event1.thinned@enda_7;"
      "report_event1.latlon_corrected@enda_7;report_event1.stalt_corrected@enda_7;"
      "datum_anflag.final@enda_7;datum_anflag.fg@enda_7;datum_anflag.depar@enda_7;"
      "datum_anflag.varqc@enda_7;datum_anflag.blacklist@enda_7;"
      "datum_anflag.ups@enda_7;datum_anflag.uvt@enda_7;datum_anflag.uhu@enda_7;"
      "datum_anflag.ut2@enda_7;datum_anflag.uh2@enda_7;datum_anflag.uv1@enda_7;"
      "datum_anflag.urr@enda_7;datum_anflag.usn@enda_7;datum_anflag.usst@enda_7;"
      "datum_status.active@enda_7;datum_status.passive@enda_7;"
      "datum_status.rejected@enda_7;datum_status.blacklisted@enda_7;"
      "datum_status.use_emiskf_only@enda_7;datum_event1.vertco_missing@enda_7;"
      "datum_event1.obsvalue_missing@enda_7;datum_event1.fg_missing@enda_7;"
      "datum_event1.rdb_rejected@enda_7;datum_event1.assim_cld_flag@enda_7;"
      "datum_event1.bad_practice@enda_7;datum_event1.vertpos_outrange@enda_7;"
      "datum_event1.fg2big@enda_7;datum_event1.depar2big@enda_7;"
      "datum_event1.obs_error2big@enda_7;datum_event1.datum_redundant@enda_7;"
      "datum_event1.level_redundant@enda_7;datum_event1.not_analysis_varno@enda_7;"
      "datum_event1.duplicate@enda_7;datum_event1.levels2many@enda_7;"
      "datum_event1.level_selection@enda_7;datum_event1.vertco_consistency@enda_7;"
      "datum_event1.vertco_type_changed@enda_7;datum_event1.combined_flagging@enda_7;"
      "datum_event1.report_rejected@enda_7;datum_event1.varqc_performed@enda_7;"
      "datum_event1.obserror_increased@enda_7;datum_event1.contam_cld_flag@enda_7;"
      "datum_event1.contam_rain_flag@enda_7;datum_event1.contam_aerosol_flag@enda_7;"
      "datum_event1.bad_emissivity@enda_7;datum_event1.model_cld_flag@enda_7;"
      "datum_event1.contam_trgas_flag@enda_7;datum_event1.land_sensitivity@enda_7;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_7_PREPTAG = T;
    CCMA_nT_enda_7_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_7_PREPTAG;
  return CCMA_T_enda_7_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_7(void *T);
extern int CCMA_Unpack_T_enda_7(void *T);
extern int CCMA_Sel_T_enda_7(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_7);
PrePutTable(CCMA, d, double, enda_7);
PreLoadTable(CCMA, enda_7);
PreStoreTable(CCMA, enda_7);
extern void CCMA_Dim_T_enda_7(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_7(void *T);
extern int CCMA_Sql_T_enda_7(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_7(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_8) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_8" : appearance order#133, hierarchy rank# 157, weight = 358.000133 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_8;

#endif /* defined(IS_a_TABLE_enda_8) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_8)
extern const ODB_Tags *CCMA_Set_T_enda_8_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_8_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_8_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_8_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_8_TAG = 0;
PRIVATE int CCMA_nT_enda_8_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_8_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_8_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_8_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_8"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_8"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_8"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_8"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_8"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_8"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_8"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_8"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_8"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_8"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_8"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_8"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_8"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_8"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_8"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_8"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_8"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_8"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_8"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_8"; T[19].name = s; }
    CCMA_T_enda_8_TAG = T;
    CCMA_nT_enda_8_TAG = ntag;
    CCMA_nT_enda_8_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_8_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_8_MEM;
  return CCMA_T_enda_8_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_8_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_8_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_8;report_status@enda_8;report_event1@enda_8;"
      "obsvalue@enda_8;datum_anflag@enda_8;datum_status@enda_8;"
      "datum_event1@enda_8;biascorr@enda_8;biascorr_fg@enda_8;"
      "an_depar@enda_8;fg_depar@enda_8;qc_pge@enda_8;final_obs_error@enda_8;"
      "obs_error@enda_8;fg_error@enda_8;skintemp_1@enda_8;"
      "skintemp_2@enda_8;skintemp_3@enda_8;skintemp_4@enda_8;"
      "skintemp_5@enda_8;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_8;report_status@enda_8;report_event1@enda_8;"
      "obsvalue@enda_8;datum_anflag@enda_8;datum_status@enda_8;"
      "datum_event1@enda_8;biascorr@enda_8;biascorr_fg@enda_8;"
      "an_depar@enda_8;fg_depar@enda_8;qc_pge@enda_8;final_obs_error@enda_8;"
      "obs_error@enda_8;fg_error@enda_8;skintemp_1@enda_8;"
      "skintemp_2@enda_8;skintemp_3@enda_8;skintemp_4@enda_8;"
      "skintemp_5@enda_8;report_status.active@enda_8;report_status.passive@enda_8;"
      "report_status.rejected@enda_8;report_status.blacklisted@enda_8;"
      "report_status.use_emiskf_only@enda_8;report_event1.no_data@enda_8;"
      "report_event1.all_rejected@enda_8;report_event1.bad_practice@enda_8;"
      "report_event1.rdb_rejected@enda_8;report_event1.redundant@enda_8;"
      "report_event1.stalt_missing@enda_8;report_event1.qc_failed@enda_8;"
      "report_event1.overcast_ir@enda_8;report_event1.thinned@enda_8;"
      "report_event1.latlon_corrected@enda_8;report_event1.stalt_corrected@enda_8;"
      "datum_anflag.final@enda_8;datum_anflag.fg@enda_8;datum_anflag.depar@enda_8;"
      "datum_anflag.varqc@enda_8;datum_anflag.blacklist@enda_8;"
      "datum_anflag.ups@enda_8;datum_anflag.uvt@enda_8;datum_anflag.uhu@enda_8;"
      "datum_anflag.ut2@enda_8;datum_anflag.uh2@enda_8;datum_anflag.uv1@enda_8;"
      "datum_anflag.urr@enda_8;datum_anflag.usn@enda_8;datum_anflag.usst@enda_8;"
      "datum_status.active@enda_8;datum_status.passive@enda_8;"
      "datum_status.rejected@enda_8;datum_status.blacklisted@enda_8;"
      "datum_status.use_emiskf_only@enda_8;datum_event1.vertco_missing@enda_8;"
      "datum_event1.obsvalue_missing@enda_8;datum_event1.fg_missing@enda_8;"
      "datum_event1.rdb_rejected@enda_8;datum_event1.assim_cld_flag@enda_8;"
      "datum_event1.bad_practice@enda_8;datum_event1.vertpos_outrange@enda_8;"
      "datum_event1.fg2big@enda_8;datum_event1.depar2big@enda_8;"
      "datum_event1.obs_error2big@enda_8;datum_event1.datum_redundant@enda_8;"
      "datum_event1.level_redundant@enda_8;datum_event1.not_analysis_varno@enda_8;"
      "datum_event1.duplicate@enda_8;datum_event1.levels2many@enda_8;"
      "datum_event1.level_selection@enda_8;datum_event1.vertco_consistency@enda_8;"
      "datum_event1.vertco_type_changed@enda_8;datum_event1.combined_flagging@enda_8;"
      "datum_event1.report_rejected@enda_8;datum_event1.varqc_performed@enda_8;"
      "datum_event1.obserror_increased@enda_8;datum_event1.contam_cld_flag@enda_8;"
      "datum_event1.contam_rain_flag@enda_8;datum_event1.contam_aerosol_flag@enda_8;"
      "datum_event1.bad_emissivity@enda_8;datum_event1.model_cld_flag@enda_8;"
      "datum_event1.contam_trgas_flag@enda_8;datum_event1.land_sensitivity@enda_8;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_8_PREPTAG = T;
    CCMA_nT_enda_8_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_8_PREPTAG;
  return CCMA_T_enda_8_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_8(void *T);
extern int CCMA_Unpack_T_enda_8(void *T);
extern int CCMA_Sel_T_enda_8(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_8);
PrePutTable(CCMA, d, double, enda_8);
PreLoadTable(CCMA, enda_8);
PreStoreTable(CCMA, enda_8);
extern void CCMA_Dim_T_enda_8(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_8(void *T);
extern int CCMA_Sql_T_enda_8(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_8(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_9) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_9" : appearance order#134, hierarchy rank# 158, weight = 358.000134 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_9;

#endif /* defined(IS_a_TABLE_enda_9) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_9)
extern const ODB_Tags *CCMA_Set_T_enda_9_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_9_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_9_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_9_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_9_TAG = 0;
PRIVATE int CCMA_nT_enda_9_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_9_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_9_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_9_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_9"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_9"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_9"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_9"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_9"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_9"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_9"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_9"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_9"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_9"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_9"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_9"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_9"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_9"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_9"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_9"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_9"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_9"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_9"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_9"; T[19].name = s; }
    CCMA_T_enda_9_TAG = T;
    CCMA_nT_enda_9_TAG = ntag;
    CCMA_nT_enda_9_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_9_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_9_MEM;
  return CCMA_T_enda_9_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_9_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_9_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 360;
    { static char s[] =
      ";member@enda_9;report_status@enda_9;report_event1@enda_9;"
      "obsvalue@enda_9;datum_anflag@enda_9;datum_status@enda_9;"
      "datum_event1@enda_9;biascorr@enda_9;biascorr_fg@enda_9;"
      "an_depar@enda_9;fg_depar@enda_9;qc_pge@enda_9;final_obs_error@enda_9;"
      "obs_error@enda_9;fg_error@enda_9;skintemp_1@enda_9;"
      "skintemp_2@enda_9;skintemp_3@enda_9;skintemp_4@enda_9;"
      "skintemp_5@enda_9;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2409;
    { static char s[] =
      ";member@enda_9;report_status@enda_9;report_event1@enda_9;"
      "obsvalue@enda_9;datum_anflag@enda_9;datum_status@enda_9;"
      "datum_event1@enda_9;biascorr@enda_9;biascorr_fg@enda_9;"
      "an_depar@enda_9;fg_depar@enda_9;qc_pge@enda_9;final_obs_error@enda_9;"
      "obs_error@enda_9;fg_error@enda_9;skintemp_1@enda_9;"
      "skintemp_2@enda_9;skintemp_3@enda_9;skintemp_4@enda_9;"
      "skintemp_5@enda_9;report_status.active@enda_9;report_status.passive@enda_9;"
      "report_status.rejected@enda_9;report_status.blacklisted@enda_9;"
      "report_status.use_emiskf_only@enda_9;report_event1.no_data@enda_9;"
      "report_event1.all_rejected@enda_9;report_event1.bad_practice@enda_9;"
      "report_event1.rdb_rejected@enda_9;report_event1.redundant@enda_9;"
      "report_event1.stalt_missing@enda_9;report_event1.qc_failed@enda_9;"
      "report_event1.overcast_ir@enda_9;report_event1.thinned@enda_9;"
      "report_event1.latlon_corrected@enda_9;report_event1.stalt_corrected@enda_9;"
      "datum_anflag.final@enda_9;datum_anflag.fg@enda_9;datum_anflag.depar@enda_9;"
      "datum_anflag.varqc@enda_9;datum_anflag.blacklist@enda_9;"
      "datum_anflag.ups@enda_9;datum_anflag.uvt@enda_9;datum_anflag.uhu@enda_9;"
      "datum_anflag.ut2@enda_9;datum_anflag.uh2@enda_9;datum_anflag.uv1@enda_9;"
      "datum_anflag.urr@enda_9;datum_anflag.usn@enda_9;datum_anflag.usst@enda_9;"
      "datum_status.active@enda_9;datum_status.passive@enda_9;"
      "datum_status.rejected@enda_9;datum_status.blacklisted@enda_9;"
      "datum_status.use_emiskf_only@enda_9;datum_event1.vertco_missing@enda_9;"
      "datum_event1.obsvalue_missing@enda_9;datum_event1.fg_missing@enda_9;"
      "datum_event1.rdb_rejected@enda_9;datum_event1.assim_cld_flag@enda_9;"
      "datum_event1.bad_practice@enda_9;datum_event1.vertpos_outrange@enda_9;"
      "datum_event1.fg2big@enda_9;datum_event1.depar2big@enda_9;"
      "datum_event1.obs_error2big@enda_9;datum_event1.datum_redundant@enda_9;"
      "datum_event1.level_redundant@enda_9;datum_event1.not_analysis_varno@enda_9;"
      "datum_event1.duplicate@enda_9;datum_event1.levels2many@enda_9;"
      "datum_event1.level_selection@enda_9;datum_event1.vertco_consistency@enda_9;"
      "datum_event1.vertco_type_changed@enda_9;datum_event1.combined_flagging@enda_9;"
      "datum_event1.report_rejected@enda_9;datum_event1.varqc_performed@enda_9;"
      "datum_event1.obserror_increased@enda_9;datum_event1.contam_cld_flag@enda_9;"
      "datum_event1.contam_rain_flag@enda_9;datum_event1.contam_aerosol_flag@enda_9;"
      "datum_event1.bad_emissivity@enda_9;datum_event1.model_cld_flag@enda_9;"
      "datum_event1.contam_trgas_flag@enda_9;datum_event1.land_sensitivity@enda_9;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_9_PREPTAG = T;
    CCMA_nT_enda_9_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_9_PREPTAG;
  return CCMA_T_enda_9_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_9(void *T);
extern int CCMA_Unpack_T_enda_9(void *T);
extern int CCMA_Sel_T_enda_9(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_9);
PrePutTable(CCMA, d, double, enda_9);
PreLoadTable(CCMA, enda_9);
PreStoreTable(CCMA, enda_9);
extern void CCMA_Dim_T_enda_9(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_9(void *T);
extern int CCMA_Sql_T_enda_9(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_9(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_10) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_10" : appearance order#135, hierarchy rank# 159, weight = 358.000135 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_10;

#endif /* defined(IS_a_TABLE_enda_10) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_10)
extern const ODB_Tags *CCMA_Set_T_enda_10_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_10_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_10_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_10_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_10_TAG = 0;
PRIVATE int CCMA_nT_enda_10_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_10_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_10_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_10_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_10"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_10"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_10"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_10"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_10"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_10"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_10"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_10"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_10"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_10"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_10"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_10"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_10"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_10"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_10"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_10"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_10"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_10"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_10"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_10"; T[19].name = s; }
    CCMA_T_enda_10_TAG = T;
    CCMA_nT_enda_10_TAG = ntag;
    CCMA_nT_enda_10_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_10_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_10_MEM;
  return CCMA_T_enda_10_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_10_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_10_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_10;report_status@enda_10;report_event1@enda_10;"
      "obsvalue@enda_10;datum_anflag@enda_10;datum_status@enda_10;"
      "datum_event1@enda_10;biascorr@enda_10;biascorr_fg@enda_10;"
      "an_depar@enda_10;fg_depar@enda_10;qc_pge@enda_10;final_obs_error@enda_10;"
      "obs_error@enda_10;fg_error@enda_10;skintemp_1@enda_10;"
      "skintemp_2@enda_10;skintemp_3@enda_10;skintemp_4@enda_10;"
      "skintemp_5@enda_10;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_10;report_status@enda_10;report_event1@enda_10;"
      "obsvalue@enda_10;datum_anflag@enda_10;datum_status@enda_10;"
      "datum_event1@enda_10;biascorr@enda_10;biascorr_fg@enda_10;"
      "an_depar@enda_10;fg_depar@enda_10;qc_pge@enda_10;final_obs_error@enda_10;"
      "obs_error@enda_10;fg_error@enda_10;skintemp_1@enda_10;"
      "skintemp_2@enda_10;skintemp_3@enda_10;skintemp_4@enda_10;"
      "skintemp_5@enda_10;report_status.active@enda_10;report_status.passive@enda_10;"
      "report_status.rejected@enda_10;report_status.blacklisted@enda_10;"
      "report_status.use_emiskf_only@enda_10;report_event1.no_data@enda_10;"
      "report_event1.all_rejected@enda_10;report_event1.bad_practice@enda_10;"
      "report_event1.rdb_rejected@enda_10;report_event1.redundant@enda_10;"
      "report_event1.stalt_missing@enda_10;report_event1.qc_failed@enda_10;"
      "report_event1.overcast_ir@enda_10;report_event1.thinned@enda_10;"
      "report_event1.latlon_corrected@enda_10;report_event1.stalt_corrected@enda_10;"
      "datum_anflag.final@enda_10;datum_anflag.fg@enda_10;"
      "datum_anflag.depar@enda_10;datum_anflag.varqc@enda_10;"
      "datum_anflag.blacklist@enda_10;datum_anflag.ups@enda_10;"
      "datum_anflag.uvt@enda_10;datum_anflag.uhu@enda_10;"
      "datum_anflag.ut2@enda_10;datum_anflag.uh2@enda_10;"
      "datum_anflag.uv1@enda_10;datum_anflag.urr@enda_10;"
      "datum_anflag.usn@enda_10;datum_anflag.usst@enda_10;"
      "datum_status.active@enda_10;datum_status.passive@enda_10;"
      "datum_status.rejected@enda_10;datum_status.blacklisted@enda_10;"
      "datum_status.use_emiskf_only@enda_10;datum_event1.vertco_missing@enda_10;"
      "datum_event1.obsvalue_missing@enda_10;datum_event1.fg_missing@enda_10;"
      "datum_event1.rdb_rejected@enda_10;datum_event1.assim_cld_flag@enda_10;"
      "datum_event1.bad_practice@enda_10;datum_event1.vertpos_outrange@enda_10;"
      "datum_event1.fg2big@enda_10;datum_event1.depar2big@enda_10;"
      "datum_event1.obs_error2big@enda_10;datum_event1.datum_redundant@enda_10;"
      "datum_event1.level_redundant@enda_10;datum_event1.not_analysis_varno@enda_10;"
      "datum_event1.duplicate@enda_10;datum_event1.levels2many@enda_10;"
      "datum_event1.level_selection@enda_10;datum_event1.vertco_consistency@enda_10;"
      "datum_event1.vertco_type_changed@enda_10;datum_event1.combined_flagging@enda_10;"
      "datum_event1.report_rejected@enda_10;datum_event1.varqc_performed@enda_10;"
      "datum_event1.obserror_increased@enda_10;datum_event1.contam_cld_flag@enda_10;"
      "datum_event1.contam_rain_flag@enda_10;datum_event1.contam_aerosol_flag@enda_10;"
      "datum_event1.bad_emissivity@enda_10;datum_event1.model_cld_flag@enda_10;"
      "datum_event1.contam_trgas_flag@enda_10;datum_event1.land_sensitivity@enda_10;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_10_PREPTAG = T;
    CCMA_nT_enda_10_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_10_PREPTAG;
  return CCMA_T_enda_10_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_10(void *T);
extern int CCMA_Unpack_T_enda_10(void *T);
extern int CCMA_Sel_T_enda_10(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_10);
PrePutTable(CCMA, d, double, enda_10);
PreLoadTable(CCMA, enda_10);
PreStoreTable(CCMA, enda_10);
extern void CCMA_Dim_T_enda_10(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_10(void *T);
extern int CCMA_Sql_T_enda_10(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_10(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_11) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_11" : appearance order#136, hierarchy rank# 160, weight = 358.000136 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_11;

#endif /* defined(IS_a_TABLE_enda_11) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_11)
extern const ODB_Tags *CCMA_Set_T_enda_11_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_11_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_11_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_11_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_11_TAG = 0;
PRIVATE int CCMA_nT_enda_11_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_11_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_11_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_11_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_11"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_11"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_11"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_11"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_11"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_11"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_11"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_11"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_11"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_11"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_11"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_11"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_11"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_11"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_11"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_11"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_11"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_11"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_11"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_11"; T[19].name = s; }
    CCMA_T_enda_11_TAG = T;
    CCMA_nT_enda_11_TAG = ntag;
    CCMA_nT_enda_11_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_11_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_11_MEM;
  return CCMA_T_enda_11_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_11_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_11_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_11;report_status@enda_11;report_event1@enda_11;"
      "obsvalue@enda_11;datum_anflag@enda_11;datum_status@enda_11;"
      "datum_event1@enda_11;biascorr@enda_11;biascorr_fg@enda_11;"
      "an_depar@enda_11;fg_depar@enda_11;qc_pge@enda_11;final_obs_error@enda_11;"
      "obs_error@enda_11;fg_error@enda_11;skintemp_1@enda_11;"
      "skintemp_2@enda_11;skintemp_3@enda_11;skintemp_4@enda_11;"
      "skintemp_5@enda_11;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_11;report_status@enda_11;report_event1@enda_11;"
      "obsvalue@enda_11;datum_anflag@enda_11;datum_status@enda_11;"
      "datum_event1@enda_11;biascorr@enda_11;biascorr_fg@enda_11;"
      "an_depar@enda_11;fg_depar@enda_11;qc_pge@enda_11;final_obs_error@enda_11;"
      "obs_error@enda_11;fg_error@enda_11;skintemp_1@enda_11;"
      "skintemp_2@enda_11;skintemp_3@enda_11;skintemp_4@enda_11;"
      "skintemp_5@enda_11;report_status.active@enda_11;report_status.passive@enda_11;"
      "report_status.rejected@enda_11;report_status.blacklisted@enda_11;"
      "report_status.use_emiskf_only@enda_11;report_event1.no_data@enda_11;"
      "report_event1.all_rejected@enda_11;report_event1.bad_practice@enda_11;"
      "report_event1.rdb_rejected@enda_11;report_event1.redundant@enda_11;"
      "report_event1.stalt_missing@enda_11;report_event1.qc_failed@enda_11;"
      "report_event1.overcast_ir@enda_11;report_event1.thinned@enda_11;"
      "report_event1.latlon_corrected@enda_11;report_event1.stalt_corrected@enda_11;"
      "datum_anflag.final@enda_11;datum_anflag.fg@enda_11;"
      "datum_anflag.depar@enda_11;datum_anflag.varqc@enda_11;"
      "datum_anflag.blacklist@enda_11;datum_anflag.ups@enda_11;"
      "datum_anflag.uvt@enda_11;datum_anflag.uhu@enda_11;"
      "datum_anflag.ut2@enda_11;datum_anflag.uh2@enda_11;"
      "datum_anflag.uv1@enda_11;datum_anflag.urr@enda_11;"
      "datum_anflag.usn@enda_11;datum_anflag.usst@enda_11;"
      "datum_status.active@enda_11;datum_status.passive@enda_11;"
      "datum_status.rejected@enda_11;datum_status.blacklisted@enda_11;"
      "datum_status.use_emiskf_only@enda_11;datum_event1.vertco_missing@enda_11;"
      "datum_event1.obsvalue_missing@enda_11;datum_event1.fg_missing@enda_11;"
      "datum_event1.rdb_rejected@enda_11;datum_event1.assim_cld_flag@enda_11;"
      "datum_event1.bad_practice@enda_11;datum_event1.vertpos_outrange@enda_11;"
      "datum_event1.fg2big@enda_11;datum_event1.depar2big@enda_11;"
      "datum_event1.obs_error2big@enda_11;datum_event1.datum_redundant@enda_11;"
      "datum_event1.level_redundant@enda_11;datum_event1.not_analysis_varno@enda_11;"
      "datum_event1.duplicate@enda_11;datum_event1.levels2many@enda_11;"
      "datum_event1.level_selection@enda_11;datum_event1.vertco_consistency@enda_11;"
      "datum_event1.vertco_type_changed@enda_11;datum_event1.combined_flagging@enda_11;"
      "datum_event1.report_rejected@enda_11;datum_event1.varqc_performed@enda_11;"
      "datum_event1.obserror_increased@enda_11;datum_event1.contam_cld_flag@enda_11;"
      "datum_event1.contam_rain_flag@enda_11;datum_event1.contam_aerosol_flag@enda_11;"
      "datum_event1.bad_emissivity@enda_11;datum_event1.model_cld_flag@enda_11;"
      "datum_event1.contam_trgas_flag@enda_11;datum_event1.land_sensitivity@enda_11;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_11_PREPTAG = T;
    CCMA_nT_enda_11_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_11_PREPTAG;
  return CCMA_T_enda_11_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_11(void *T);
extern int CCMA_Unpack_T_enda_11(void *T);
extern int CCMA_Sel_T_enda_11(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_11);
PrePutTable(CCMA, d, double, enda_11);
PreLoadTable(CCMA, enda_11);
PreStoreTable(CCMA, enda_11);
extern void CCMA_Dim_T_enda_11(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_11(void *T);
extern int CCMA_Sql_T_enda_11(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_11(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_12) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_12" : appearance order#137, hierarchy rank# 161, weight = 358.000137 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_12;

#endif /* defined(IS_a_TABLE_enda_12) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_12)
extern const ODB_Tags *CCMA_Set_T_enda_12_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_12_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_12_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_12_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_12_TAG = 0;
PRIVATE int CCMA_nT_enda_12_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_12_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_12_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_12_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_12"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_12"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_12"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_12"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_12"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_12"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_12"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_12"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_12"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_12"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_12"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_12"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_12"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_12"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_12"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_12"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_12"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_12"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_12"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_12"; T[19].name = s; }
    CCMA_T_enda_12_TAG = T;
    CCMA_nT_enda_12_TAG = ntag;
    CCMA_nT_enda_12_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_12_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_12_MEM;
  return CCMA_T_enda_12_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_12_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_12_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_12;report_status@enda_12;report_event1@enda_12;"
      "obsvalue@enda_12;datum_anflag@enda_12;datum_status@enda_12;"
      "datum_event1@enda_12;biascorr@enda_12;biascorr_fg@enda_12;"
      "an_depar@enda_12;fg_depar@enda_12;qc_pge@enda_12;final_obs_error@enda_12;"
      "obs_error@enda_12;fg_error@enda_12;skintemp_1@enda_12;"
      "skintemp_2@enda_12;skintemp_3@enda_12;skintemp_4@enda_12;"
      "skintemp_5@enda_12;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_12;report_status@enda_12;report_event1@enda_12;"
      "obsvalue@enda_12;datum_anflag@enda_12;datum_status@enda_12;"
      "datum_event1@enda_12;biascorr@enda_12;biascorr_fg@enda_12;"
      "an_depar@enda_12;fg_depar@enda_12;qc_pge@enda_12;final_obs_error@enda_12;"
      "obs_error@enda_12;fg_error@enda_12;skintemp_1@enda_12;"
      "skintemp_2@enda_12;skintemp_3@enda_12;skintemp_4@enda_12;"
      "skintemp_5@enda_12;report_status.active@enda_12;report_status.passive@enda_12;"
      "report_status.rejected@enda_12;report_status.blacklisted@enda_12;"
      "report_status.use_emiskf_only@enda_12;report_event1.no_data@enda_12;"
      "report_event1.all_rejected@enda_12;report_event1.bad_practice@enda_12;"
      "report_event1.rdb_rejected@enda_12;report_event1.redundant@enda_12;"
      "report_event1.stalt_missing@enda_12;report_event1.qc_failed@enda_12;"
      "report_event1.overcast_ir@enda_12;report_event1.thinned@enda_12;"
      "report_event1.latlon_corrected@enda_12;report_event1.stalt_corrected@enda_12;"
      "datum_anflag.final@enda_12;datum_anflag.fg@enda_12;"
      "datum_anflag.depar@enda_12;datum_anflag.varqc@enda_12;"
      "datum_anflag.blacklist@enda_12;datum_anflag.ups@enda_12;"
      "datum_anflag.uvt@enda_12;datum_anflag.uhu@enda_12;"
      "datum_anflag.ut2@enda_12;datum_anflag.uh2@enda_12;"
      "datum_anflag.uv1@enda_12;datum_anflag.urr@enda_12;"
      "datum_anflag.usn@enda_12;datum_anflag.usst@enda_12;"
      "datum_status.active@enda_12;datum_status.passive@enda_12;"
      "datum_status.rejected@enda_12;datum_status.blacklisted@enda_12;"
      "datum_status.use_emiskf_only@enda_12;datum_event1.vertco_missing@enda_12;"
      "datum_event1.obsvalue_missing@enda_12;datum_event1.fg_missing@enda_12;"
      "datum_event1.rdb_rejected@enda_12;datum_event1.assim_cld_flag@enda_12;"
      "datum_event1.bad_practice@enda_12;datum_event1.vertpos_outrange@enda_12;"
      "datum_event1.fg2big@enda_12;datum_event1.depar2big@enda_12;"
      "datum_event1.obs_error2big@enda_12;datum_event1.datum_redundant@enda_12;"
      "datum_event1.level_redundant@enda_12;datum_event1.not_analysis_varno@enda_12;"
      "datum_event1.duplicate@enda_12;datum_event1.levels2many@enda_12;"
      "datum_event1.level_selection@enda_12;datum_event1.vertco_consistency@enda_12;"
      "datum_event1.vertco_type_changed@enda_12;datum_event1.combined_flagging@enda_12;"
      "datum_event1.report_rejected@enda_12;datum_event1.varqc_performed@enda_12;"
      "datum_event1.obserror_increased@enda_12;datum_event1.contam_cld_flag@enda_12;"
      "datum_event1.contam_rain_flag@enda_12;datum_event1.contam_aerosol_flag@enda_12;"
      "datum_event1.bad_emissivity@enda_12;datum_event1.model_cld_flag@enda_12;"
      "datum_event1.contam_trgas_flag@enda_12;datum_event1.land_sensitivity@enda_12;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_12_PREPTAG = T;
    CCMA_nT_enda_12_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_12_PREPTAG;
  return CCMA_T_enda_12_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_12(void *T);
extern int CCMA_Unpack_T_enda_12(void *T);
extern int CCMA_Sel_T_enda_12(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_12);
PrePutTable(CCMA, d, double, enda_12);
PreLoadTable(CCMA, enda_12);
PreStoreTable(CCMA, enda_12);
extern void CCMA_Dim_T_enda_12(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_12(void *T);
extern int CCMA_Sql_T_enda_12(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_12(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_13) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_13" : appearance order#138, hierarchy rank# 162, weight = 358.000138 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_13;

#endif /* defined(IS_a_TABLE_enda_13) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_13)
extern const ODB_Tags *CCMA_Set_T_enda_13_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_13_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_13_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_13_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_13_TAG = 0;
PRIVATE int CCMA_nT_enda_13_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_13_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_13_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_13_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_13"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_13"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_13"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_13"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_13"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_13"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_13"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_13"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_13"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_13"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_13"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_13"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_13"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_13"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_13"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_13"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_13"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_13"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_13"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_13"; T[19].name = s; }
    CCMA_T_enda_13_TAG = T;
    CCMA_nT_enda_13_TAG = ntag;
    CCMA_nT_enda_13_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_13_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_13_MEM;
  return CCMA_T_enda_13_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_13_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_13_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_13;report_status@enda_13;report_event1@enda_13;"
      "obsvalue@enda_13;datum_anflag@enda_13;datum_status@enda_13;"
      "datum_event1@enda_13;biascorr@enda_13;biascorr_fg@enda_13;"
      "an_depar@enda_13;fg_depar@enda_13;qc_pge@enda_13;final_obs_error@enda_13;"
      "obs_error@enda_13;fg_error@enda_13;skintemp_1@enda_13;"
      "skintemp_2@enda_13;skintemp_3@enda_13;skintemp_4@enda_13;"
      "skintemp_5@enda_13;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_13;report_status@enda_13;report_event1@enda_13;"
      "obsvalue@enda_13;datum_anflag@enda_13;datum_status@enda_13;"
      "datum_event1@enda_13;biascorr@enda_13;biascorr_fg@enda_13;"
      "an_depar@enda_13;fg_depar@enda_13;qc_pge@enda_13;final_obs_error@enda_13;"
      "obs_error@enda_13;fg_error@enda_13;skintemp_1@enda_13;"
      "skintemp_2@enda_13;skintemp_3@enda_13;skintemp_4@enda_13;"
      "skintemp_5@enda_13;report_status.active@enda_13;report_status.passive@enda_13;"
      "report_status.rejected@enda_13;report_status.blacklisted@enda_13;"
      "report_status.use_emiskf_only@enda_13;report_event1.no_data@enda_13;"
      "report_event1.all_rejected@enda_13;report_event1.bad_practice@enda_13;"
      "report_event1.rdb_rejected@enda_13;report_event1.redundant@enda_13;"
      "report_event1.stalt_missing@enda_13;report_event1.qc_failed@enda_13;"
      "report_event1.overcast_ir@enda_13;report_event1.thinned@enda_13;"
      "report_event1.latlon_corrected@enda_13;report_event1.stalt_corrected@enda_13;"
      "datum_anflag.final@enda_13;datum_anflag.fg@enda_13;"
      "datum_anflag.depar@enda_13;datum_anflag.varqc@enda_13;"
      "datum_anflag.blacklist@enda_13;datum_anflag.ups@enda_13;"
      "datum_anflag.uvt@enda_13;datum_anflag.uhu@enda_13;"
      "datum_anflag.ut2@enda_13;datum_anflag.uh2@enda_13;"
      "datum_anflag.uv1@enda_13;datum_anflag.urr@enda_13;"
      "datum_anflag.usn@enda_13;datum_anflag.usst@enda_13;"
      "datum_status.active@enda_13;datum_status.passive@enda_13;"
      "datum_status.rejected@enda_13;datum_status.blacklisted@enda_13;"
      "datum_status.use_emiskf_only@enda_13;datum_event1.vertco_missing@enda_13;"
      "datum_event1.obsvalue_missing@enda_13;datum_event1.fg_missing@enda_13;"
      "datum_event1.rdb_rejected@enda_13;datum_event1.assim_cld_flag@enda_13;"
      "datum_event1.bad_practice@enda_13;datum_event1.vertpos_outrange@enda_13;"
      "datum_event1.fg2big@enda_13;datum_event1.depar2big@enda_13;"
      "datum_event1.obs_error2big@enda_13;datum_event1.datum_redundant@enda_13;"
      "datum_event1.level_redundant@enda_13;datum_event1.not_analysis_varno@enda_13;"
      "datum_event1.duplicate@enda_13;datum_event1.levels2many@enda_13;"
      "datum_event1.level_selection@enda_13;datum_event1.vertco_consistency@enda_13;"
      "datum_event1.vertco_type_changed@enda_13;datum_event1.combined_flagging@enda_13;"
      "datum_event1.report_rejected@enda_13;datum_event1.varqc_performed@enda_13;"
      "datum_event1.obserror_increased@enda_13;datum_event1.contam_cld_flag@enda_13;"
      "datum_event1.contam_rain_flag@enda_13;datum_event1.contam_aerosol_flag@enda_13;"
      "datum_event1.bad_emissivity@enda_13;datum_event1.model_cld_flag@enda_13;"
      "datum_event1.contam_trgas_flag@enda_13;datum_event1.land_sensitivity@enda_13;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_13_PREPTAG = T;
    CCMA_nT_enda_13_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_13_PREPTAG;
  return CCMA_T_enda_13_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_13(void *T);
extern int CCMA_Unpack_T_enda_13(void *T);
extern int CCMA_Sel_T_enda_13(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_13);
PrePutTable(CCMA, d, double, enda_13);
PreLoadTable(CCMA, enda_13);
PreStoreTable(CCMA, enda_13);
extern void CCMA_Dim_T_enda_13(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_13(void *T);
extern int CCMA_Sql_T_enda_13(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_13(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_14) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_14" : appearance order#139, hierarchy rank# 163, weight = 358.000139 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_14;

#endif /* defined(IS_a_TABLE_enda_14) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_14)
extern const ODB_Tags *CCMA_Set_T_enda_14_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_14_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_14_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_14_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_14_TAG = 0;
PRIVATE int CCMA_nT_enda_14_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_14_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_14_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_14_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_14"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_14"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_14"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_14"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_14"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_14"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_14"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_14"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_14"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_14"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_14"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_14"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_14"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_14"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_14"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_14"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_14"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_14"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_14"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_14"; T[19].name = s; }
    CCMA_T_enda_14_TAG = T;
    CCMA_nT_enda_14_TAG = ntag;
    CCMA_nT_enda_14_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_14_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_14_MEM;
  return CCMA_T_enda_14_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_14_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_14_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_14;report_status@enda_14;report_event1@enda_14;"
      "obsvalue@enda_14;datum_anflag@enda_14;datum_status@enda_14;"
      "datum_event1@enda_14;biascorr@enda_14;biascorr_fg@enda_14;"
      "an_depar@enda_14;fg_depar@enda_14;qc_pge@enda_14;final_obs_error@enda_14;"
      "obs_error@enda_14;fg_error@enda_14;skintemp_1@enda_14;"
      "skintemp_2@enda_14;skintemp_3@enda_14;skintemp_4@enda_14;"
      "skintemp_5@enda_14;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_14;report_status@enda_14;report_event1@enda_14;"
      "obsvalue@enda_14;datum_anflag@enda_14;datum_status@enda_14;"
      "datum_event1@enda_14;biascorr@enda_14;biascorr_fg@enda_14;"
      "an_depar@enda_14;fg_depar@enda_14;qc_pge@enda_14;final_obs_error@enda_14;"
      "obs_error@enda_14;fg_error@enda_14;skintemp_1@enda_14;"
      "skintemp_2@enda_14;skintemp_3@enda_14;skintemp_4@enda_14;"
      "skintemp_5@enda_14;report_status.active@enda_14;report_status.passive@enda_14;"
      "report_status.rejected@enda_14;report_status.blacklisted@enda_14;"
      "report_status.use_emiskf_only@enda_14;report_event1.no_data@enda_14;"
      "report_event1.all_rejected@enda_14;report_event1.bad_practice@enda_14;"
      "report_event1.rdb_rejected@enda_14;report_event1.redundant@enda_14;"
      "report_event1.stalt_missing@enda_14;report_event1.qc_failed@enda_14;"
      "report_event1.overcast_ir@enda_14;report_event1.thinned@enda_14;"
      "report_event1.latlon_corrected@enda_14;report_event1.stalt_corrected@enda_14;"
      "datum_anflag.final@enda_14;datum_anflag.fg@enda_14;"
      "datum_anflag.depar@enda_14;datum_anflag.varqc@enda_14;"
      "datum_anflag.blacklist@enda_14;datum_anflag.ups@enda_14;"
      "datum_anflag.uvt@enda_14;datum_anflag.uhu@enda_14;"
      "datum_anflag.ut2@enda_14;datum_anflag.uh2@enda_14;"
      "datum_anflag.uv1@enda_14;datum_anflag.urr@enda_14;"
      "datum_anflag.usn@enda_14;datum_anflag.usst@enda_14;"
      "datum_status.active@enda_14;datum_status.passive@enda_14;"
      "datum_status.rejected@enda_14;datum_status.blacklisted@enda_14;"
      "datum_status.use_emiskf_only@enda_14;datum_event1.vertco_missing@enda_14;"
      "datum_event1.obsvalue_missing@enda_14;datum_event1.fg_missing@enda_14;"
      "datum_event1.rdb_rejected@enda_14;datum_event1.assim_cld_flag@enda_14;"
      "datum_event1.bad_practice@enda_14;datum_event1.vertpos_outrange@enda_14;"
      "datum_event1.fg2big@enda_14;datum_event1.depar2big@enda_14;"
      "datum_event1.obs_error2big@enda_14;datum_event1.datum_redundant@enda_14;"
      "datum_event1.level_redundant@enda_14;datum_event1.not_analysis_varno@enda_14;"
      "datum_event1.duplicate@enda_14;datum_event1.levels2many@enda_14;"
      "datum_event1.level_selection@enda_14;datum_event1.vertco_consistency@enda_14;"
      "datum_event1.vertco_type_changed@enda_14;datum_event1.combined_flagging@enda_14;"
      "datum_event1.report_rejected@enda_14;datum_event1.varqc_performed@enda_14;"
      "datum_event1.obserror_increased@enda_14;datum_event1.contam_cld_flag@enda_14;"
      "datum_event1.contam_rain_flag@enda_14;datum_event1.contam_aerosol_flag@enda_14;"
      "datum_event1.bad_emissivity@enda_14;datum_event1.model_cld_flag@enda_14;"
      "datum_event1.contam_trgas_flag@enda_14;datum_event1.land_sensitivity@enda_14;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_14_PREPTAG = T;
    CCMA_nT_enda_14_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_14_PREPTAG;
  return CCMA_T_enda_14_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_14(void *T);
extern int CCMA_Unpack_T_enda_14(void *T);
extern int CCMA_Sel_T_enda_14(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_14);
PrePutTable(CCMA, d, double, enda_14);
PreLoadTable(CCMA, enda_14);
PreStoreTable(CCMA, enda_14);
extern void CCMA_Dim_T_enda_14(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_14(void *T);
extern int CCMA_Sql_T_enda_14(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_14(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_15) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_15" : appearance order#140, hierarchy rank# 164, weight = 358.000140 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_15;

#endif /* defined(IS_a_TABLE_enda_15) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_15)
extern const ODB_Tags *CCMA_Set_T_enda_15_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_15_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_15_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_15_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_15_TAG = 0;
PRIVATE int CCMA_nT_enda_15_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_15_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_15_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_15_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_15"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_15"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_15"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_15"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_15"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_15"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_15"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_15"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_15"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_15"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_15"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_15"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_15"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_15"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_15"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_15"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_15"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_15"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_15"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_15"; T[19].name = s; }
    CCMA_T_enda_15_TAG = T;
    CCMA_nT_enda_15_TAG = ntag;
    CCMA_nT_enda_15_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_15_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_15_MEM;
  return CCMA_T_enda_15_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_15_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_15_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_15;report_status@enda_15;report_event1@enda_15;"
      "obsvalue@enda_15;datum_anflag@enda_15;datum_status@enda_15;"
      "datum_event1@enda_15;biascorr@enda_15;biascorr_fg@enda_15;"
      "an_depar@enda_15;fg_depar@enda_15;qc_pge@enda_15;final_obs_error@enda_15;"
      "obs_error@enda_15;fg_error@enda_15;skintemp_1@enda_15;"
      "skintemp_2@enda_15;skintemp_3@enda_15;skintemp_4@enda_15;"
      "skintemp_5@enda_15;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_15;report_status@enda_15;report_event1@enda_15;"
      "obsvalue@enda_15;datum_anflag@enda_15;datum_status@enda_15;"
      "datum_event1@enda_15;biascorr@enda_15;biascorr_fg@enda_15;"
      "an_depar@enda_15;fg_depar@enda_15;qc_pge@enda_15;final_obs_error@enda_15;"
      "obs_error@enda_15;fg_error@enda_15;skintemp_1@enda_15;"
      "skintemp_2@enda_15;skintemp_3@enda_15;skintemp_4@enda_15;"
      "skintemp_5@enda_15;report_status.active@enda_15;report_status.passive@enda_15;"
      "report_status.rejected@enda_15;report_status.blacklisted@enda_15;"
      "report_status.use_emiskf_only@enda_15;report_event1.no_data@enda_15;"
      "report_event1.all_rejected@enda_15;report_event1.bad_practice@enda_15;"
      "report_event1.rdb_rejected@enda_15;report_event1.redundant@enda_15;"
      "report_event1.stalt_missing@enda_15;report_event1.qc_failed@enda_15;"
      "report_event1.overcast_ir@enda_15;report_event1.thinned@enda_15;"
      "report_event1.latlon_corrected@enda_15;report_event1.stalt_corrected@enda_15;"
      "datum_anflag.final@enda_15;datum_anflag.fg@enda_15;"
      "datum_anflag.depar@enda_15;datum_anflag.varqc@enda_15;"
      "datum_anflag.blacklist@enda_15;datum_anflag.ups@enda_15;"
      "datum_anflag.uvt@enda_15;datum_anflag.uhu@enda_15;"
      "datum_anflag.ut2@enda_15;datum_anflag.uh2@enda_15;"
      "datum_anflag.uv1@enda_15;datum_anflag.urr@enda_15;"
      "datum_anflag.usn@enda_15;datum_anflag.usst@enda_15;"
      "datum_status.active@enda_15;datum_status.passive@enda_15;"
      "datum_status.rejected@enda_15;datum_status.blacklisted@enda_15;"
      "datum_status.use_emiskf_only@enda_15;datum_event1.vertco_missing@enda_15;"
      "datum_event1.obsvalue_missing@enda_15;datum_event1.fg_missing@enda_15;"
      "datum_event1.rdb_rejected@enda_15;datum_event1.assim_cld_flag@enda_15;"
      "datum_event1.bad_practice@enda_15;datum_event1.vertpos_outrange@enda_15;"
      "datum_event1.fg2big@enda_15;datum_event1.depar2big@enda_15;"
      "datum_event1.obs_error2big@enda_15;datum_event1.datum_redundant@enda_15;"
      "datum_event1.level_redundant@enda_15;datum_event1.not_analysis_varno@enda_15;"
      "datum_event1.duplicate@enda_15;datum_event1.levels2many@enda_15;"
      "datum_event1.level_selection@enda_15;datum_event1.vertco_consistency@enda_15;"
      "datum_event1.vertco_type_changed@enda_15;datum_event1.combined_flagging@enda_15;"
      "datum_event1.report_rejected@enda_15;datum_event1.varqc_performed@enda_15;"
      "datum_event1.obserror_increased@enda_15;datum_event1.contam_cld_flag@enda_15;"
      "datum_event1.contam_rain_flag@enda_15;datum_event1.contam_aerosol_flag@enda_15;"
      "datum_event1.bad_emissivity@enda_15;datum_event1.model_cld_flag@enda_15;"
      "datum_event1.contam_trgas_flag@enda_15;datum_event1.land_sensitivity@enda_15;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_15_PREPTAG = T;
    CCMA_nT_enda_15_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_15_PREPTAG;
  return CCMA_T_enda_15_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_15(void *T);
extern int CCMA_Unpack_T_enda_15(void *T);
extern int CCMA_Sel_T_enda_15(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_15);
PrePutTable(CCMA, d, double, enda_15);
PreLoadTable(CCMA, enda_15);
PreStoreTable(CCMA, enda_15);
extern void CCMA_Dim_T_enda_15(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_15(void *T);
extern int CCMA_Sql_T_enda_15(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_15(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_16) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_16" : appearance order#141, hierarchy rank# 165, weight = 358.000141 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_16;

#endif /* defined(IS_a_TABLE_enda_16) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_16)
extern const ODB_Tags *CCMA_Set_T_enda_16_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_16_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_16_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_16_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_16_TAG = 0;
PRIVATE int CCMA_nT_enda_16_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_16_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_16_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_16_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_16"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_16"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_16"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_16"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_16"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_16"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_16"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_16"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_16"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_16"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_16"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_16"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_16"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_16"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_16"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_16"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_16"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_16"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_16"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_16"; T[19].name = s; }
    CCMA_T_enda_16_TAG = T;
    CCMA_nT_enda_16_TAG = ntag;
    CCMA_nT_enda_16_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_16_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_16_MEM;
  return CCMA_T_enda_16_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_16_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_16_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_16;report_status@enda_16;report_event1@enda_16;"
      "obsvalue@enda_16;datum_anflag@enda_16;datum_status@enda_16;"
      "datum_event1@enda_16;biascorr@enda_16;biascorr_fg@enda_16;"
      "an_depar@enda_16;fg_depar@enda_16;qc_pge@enda_16;final_obs_error@enda_16;"
      "obs_error@enda_16;fg_error@enda_16;skintemp_1@enda_16;"
      "skintemp_2@enda_16;skintemp_3@enda_16;skintemp_4@enda_16;"
      "skintemp_5@enda_16;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_16;report_status@enda_16;report_event1@enda_16;"
      "obsvalue@enda_16;datum_anflag@enda_16;datum_status@enda_16;"
      "datum_event1@enda_16;biascorr@enda_16;biascorr_fg@enda_16;"
      "an_depar@enda_16;fg_depar@enda_16;qc_pge@enda_16;final_obs_error@enda_16;"
      "obs_error@enda_16;fg_error@enda_16;skintemp_1@enda_16;"
      "skintemp_2@enda_16;skintemp_3@enda_16;skintemp_4@enda_16;"
      "skintemp_5@enda_16;report_status.active@enda_16;report_status.passive@enda_16;"
      "report_status.rejected@enda_16;report_status.blacklisted@enda_16;"
      "report_status.use_emiskf_only@enda_16;report_event1.no_data@enda_16;"
      "report_event1.all_rejected@enda_16;report_event1.bad_practice@enda_16;"
      "report_event1.rdb_rejected@enda_16;report_event1.redundant@enda_16;"
      "report_event1.stalt_missing@enda_16;report_event1.qc_failed@enda_16;"
      "report_event1.overcast_ir@enda_16;report_event1.thinned@enda_16;"
      "report_event1.latlon_corrected@enda_16;report_event1.stalt_corrected@enda_16;"
      "datum_anflag.final@enda_16;datum_anflag.fg@enda_16;"
      "datum_anflag.depar@enda_16;datum_anflag.varqc@enda_16;"
      "datum_anflag.blacklist@enda_16;datum_anflag.ups@enda_16;"
      "datum_anflag.uvt@enda_16;datum_anflag.uhu@enda_16;"
      "datum_anflag.ut2@enda_16;datum_anflag.uh2@enda_16;"
      "datum_anflag.uv1@enda_16;datum_anflag.urr@enda_16;"
      "datum_anflag.usn@enda_16;datum_anflag.usst@enda_16;"
      "datum_status.active@enda_16;datum_status.passive@enda_16;"
      "datum_status.rejected@enda_16;datum_status.blacklisted@enda_16;"
      "datum_status.use_emiskf_only@enda_16;datum_event1.vertco_missing@enda_16;"
      "datum_event1.obsvalue_missing@enda_16;datum_event1.fg_missing@enda_16;"
      "datum_event1.rdb_rejected@enda_16;datum_event1.assim_cld_flag@enda_16;"
      "datum_event1.bad_practice@enda_16;datum_event1.vertpos_outrange@enda_16;"
      "datum_event1.fg2big@enda_16;datum_event1.depar2big@enda_16;"
      "datum_event1.obs_error2big@enda_16;datum_event1.datum_redundant@enda_16;"
      "datum_event1.level_redundant@enda_16;datum_event1.not_analysis_varno@enda_16;"
      "datum_event1.duplicate@enda_16;datum_event1.levels2many@enda_16;"
      "datum_event1.level_selection@enda_16;datum_event1.vertco_consistency@enda_16;"
      "datum_event1.vertco_type_changed@enda_16;datum_event1.combined_flagging@enda_16;"
      "datum_event1.report_rejected@enda_16;datum_event1.varqc_performed@enda_16;"
      "datum_event1.obserror_increased@enda_16;datum_event1.contam_cld_flag@enda_16;"
      "datum_event1.contam_rain_flag@enda_16;datum_event1.contam_aerosol_flag@enda_16;"
      "datum_event1.bad_emissivity@enda_16;datum_event1.model_cld_flag@enda_16;"
      "datum_event1.contam_trgas_flag@enda_16;datum_event1.land_sensitivity@enda_16;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_16_PREPTAG = T;
    CCMA_nT_enda_16_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_16_PREPTAG;
  return CCMA_T_enda_16_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_16(void *T);
extern int CCMA_Unpack_T_enda_16(void *T);
extern int CCMA_Sel_T_enda_16(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_16);
PrePutTable(CCMA, d, double, enda_16);
PreLoadTable(CCMA, enda_16);
PreStoreTable(CCMA, enda_16);
extern void CCMA_Dim_T_enda_16(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_16(void *T);
extern int CCMA_Sql_T_enda_16(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_16(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_17) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_17" : appearance order#142, hierarchy rank# 166, weight = 358.000142 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_17;

#endif /* defined(IS_a_TABLE_enda_17) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_17)
extern const ODB_Tags *CCMA_Set_T_enda_17_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_17_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_17_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_17_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_17_TAG = 0;
PRIVATE int CCMA_nT_enda_17_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_17_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_17_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_17_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_17"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_17"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_17"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_17"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_17"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_17"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_17"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_17"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_17"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_17"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_17"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_17"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_17"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_17"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_17"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_17"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_17"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_17"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_17"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_17"; T[19].name = s; }
    CCMA_T_enda_17_TAG = T;
    CCMA_nT_enda_17_TAG = ntag;
    CCMA_nT_enda_17_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_17_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_17_MEM;
  return CCMA_T_enda_17_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_17_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_17_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_17;report_status@enda_17;report_event1@enda_17;"
      "obsvalue@enda_17;datum_anflag@enda_17;datum_status@enda_17;"
      "datum_event1@enda_17;biascorr@enda_17;biascorr_fg@enda_17;"
      "an_depar@enda_17;fg_depar@enda_17;qc_pge@enda_17;final_obs_error@enda_17;"
      "obs_error@enda_17;fg_error@enda_17;skintemp_1@enda_17;"
      "skintemp_2@enda_17;skintemp_3@enda_17;skintemp_4@enda_17;"
      "skintemp_5@enda_17;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_17;report_status@enda_17;report_event1@enda_17;"
      "obsvalue@enda_17;datum_anflag@enda_17;datum_status@enda_17;"
      "datum_event1@enda_17;biascorr@enda_17;biascorr_fg@enda_17;"
      "an_depar@enda_17;fg_depar@enda_17;qc_pge@enda_17;final_obs_error@enda_17;"
      "obs_error@enda_17;fg_error@enda_17;skintemp_1@enda_17;"
      "skintemp_2@enda_17;skintemp_3@enda_17;skintemp_4@enda_17;"
      "skintemp_5@enda_17;report_status.active@enda_17;report_status.passive@enda_17;"
      "report_status.rejected@enda_17;report_status.blacklisted@enda_17;"
      "report_status.use_emiskf_only@enda_17;report_event1.no_data@enda_17;"
      "report_event1.all_rejected@enda_17;report_event1.bad_practice@enda_17;"
      "report_event1.rdb_rejected@enda_17;report_event1.redundant@enda_17;"
      "report_event1.stalt_missing@enda_17;report_event1.qc_failed@enda_17;"
      "report_event1.overcast_ir@enda_17;report_event1.thinned@enda_17;"
      "report_event1.latlon_corrected@enda_17;report_event1.stalt_corrected@enda_17;"
      "datum_anflag.final@enda_17;datum_anflag.fg@enda_17;"
      "datum_anflag.depar@enda_17;datum_anflag.varqc@enda_17;"
      "datum_anflag.blacklist@enda_17;datum_anflag.ups@enda_17;"
      "datum_anflag.uvt@enda_17;datum_anflag.uhu@enda_17;"
      "datum_anflag.ut2@enda_17;datum_anflag.uh2@enda_17;"
      "datum_anflag.uv1@enda_17;datum_anflag.urr@enda_17;"
      "datum_anflag.usn@enda_17;datum_anflag.usst@enda_17;"
      "datum_status.active@enda_17;datum_status.passive@enda_17;"
      "datum_status.rejected@enda_17;datum_status.blacklisted@enda_17;"
      "datum_status.use_emiskf_only@enda_17;datum_event1.vertco_missing@enda_17;"
      "datum_event1.obsvalue_missing@enda_17;datum_event1.fg_missing@enda_17;"
      "datum_event1.rdb_rejected@enda_17;datum_event1.assim_cld_flag@enda_17;"
      "datum_event1.bad_practice@enda_17;datum_event1.vertpos_outrange@enda_17;"
      "datum_event1.fg2big@enda_17;datum_event1.depar2big@enda_17;"
      "datum_event1.obs_error2big@enda_17;datum_event1.datum_redundant@enda_17;"
      "datum_event1.level_redundant@enda_17;datum_event1.not_analysis_varno@enda_17;"
      "datum_event1.duplicate@enda_17;datum_event1.levels2many@enda_17;"
      "datum_event1.level_selection@enda_17;datum_event1.vertco_consistency@enda_17;"
      "datum_event1.vertco_type_changed@enda_17;datum_event1.combined_flagging@enda_17;"
      "datum_event1.report_rejected@enda_17;datum_event1.varqc_performed@enda_17;"
      "datum_event1.obserror_increased@enda_17;datum_event1.contam_cld_flag@enda_17;"
      "datum_event1.contam_rain_flag@enda_17;datum_event1.contam_aerosol_flag@enda_17;"
      "datum_event1.bad_emissivity@enda_17;datum_event1.model_cld_flag@enda_17;"
      "datum_event1.contam_trgas_flag@enda_17;datum_event1.land_sensitivity@enda_17;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_17_PREPTAG = T;
    CCMA_nT_enda_17_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_17_PREPTAG;
  return CCMA_T_enda_17_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_17(void *T);
extern int CCMA_Unpack_T_enda_17(void *T);
extern int CCMA_Sel_T_enda_17(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_17);
PrePutTable(CCMA, d, double, enda_17);
PreLoadTable(CCMA, enda_17);
PreStoreTable(CCMA, enda_17);
extern void CCMA_Dim_T_enda_17(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_17(void *T);
extern int CCMA_Sql_T_enda_17(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_17(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_18) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_18" : appearance order#143, hierarchy rank# 167, weight = 358.000143 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_18;

#endif /* defined(IS_a_TABLE_enda_18) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_18)
extern const ODB_Tags *CCMA_Set_T_enda_18_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_18_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_18_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_18_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_18_TAG = 0;
PRIVATE int CCMA_nT_enda_18_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_18_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_18_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_18_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_18"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_18"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_18"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_18"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_18"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_18"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_18"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_18"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_18"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_18"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_18"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_18"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_18"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_18"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_18"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_18"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_18"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_18"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_18"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_18"; T[19].name = s; }
    CCMA_T_enda_18_TAG = T;
    CCMA_nT_enda_18_TAG = ntag;
    CCMA_nT_enda_18_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_18_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_18_MEM;
  return CCMA_T_enda_18_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_18_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_18_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_18;report_status@enda_18;report_event1@enda_18;"
      "obsvalue@enda_18;datum_anflag@enda_18;datum_status@enda_18;"
      "datum_event1@enda_18;biascorr@enda_18;biascorr_fg@enda_18;"
      "an_depar@enda_18;fg_depar@enda_18;qc_pge@enda_18;final_obs_error@enda_18;"
      "obs_error@enda_18;fg_error@enda_18;skintemp_1@enda_18;"
      "skintemp_2@enda_18;skintemp_3@enda_18;skintemp_4@enda_18;"
      "skintemp_5@enda_18;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_18;report_status@enda_18;report_event1@enda_18;"
      "obsvalue@enda_18;datum_anflag@enda_18;datum_status@enda_18;"
      "datum_event1@enda_18;biascorr@enda_18;biascorr_fg@enda_18;"
      "an_depar@enda_18;fg_depar@enda_18;qc_pge@enda_18;final_obs_error@enda_18;"
      "obs_error@enda_18;fg_error@enda_18;skintemp_1@enda_18;"
      "skintemp_2@enda_18;skintemp_3@enda_18;skintemp_4@enda_18;"
      "skintemp_5@enda_18;report_status.active@enda_18;report_status.passive@enda_18;"
      "report_status.rejected@enda_18;report_status.blacklisted@enda_18;"
      "report_status.use_emiskf_only@enda_18;report_event1.no_data@enda_18;"
      "report_event1.all_rejected@enda_18;report_event1.bad_practice@enda_18;"
      "report_event1.rdb_rejected@enda_18;report_event1.redundant@enda_18;"
      "report_event1.stalt_missing@enda_18;report_event1.qc_failed@enda_18;"
      "report_event1.overcast_ir@enda_18;report_event1.thinned@enda_18;"
      "report_event1.latlon_corrected@enda_18;report_event1.stalt_corrected@enda_18;"
      "datum_anflag.final@enda_18;datum_anflag.fg@enda_18;"
      "datum_anflag.depar@enda_18;datum_anflag.varqc@enda_18;"
      "datum_anflag.blacklist@enda_18;datum_anflag.ups@enda_18;"
      "datum_anflag.uvt@enda_18;datum_anflag.uhu@enda_18;"
      "datum_anflag.ut2@enda_18;datum_anflag.uh2@enda_18;"
      "datum_anflag.uv1@enda_18;datum_anflag.urr@enda_18;"
      "datum_anflag.usn@enda_18;datum_anflag.usst@enda_18;"
      "datum_status.active@enda_18;datum_status.passive@enda_18;"
      "datum_status.rejected@enda_18;datum_status.blacklisted@enda_18;"
      "datum_status.use_emiskf_only@enda_18;datum_event1.vertco_missing@enda_18;"
      "datum_event1.obsvalue_missing@enda_18;datum_event1.fg_missing@enda_18;"
      "datum_event1.rdb_rejected@enda_18;datum_event1.assim_cld_flag@enda_18;"
      "datum_event1.bad_practice@enda_18;datum_event1.vertpos_outrange@enda_18;"
      "datum_event1.fg2big@enda_18;datum_event1.depar2big@enda_18;"
      "datum_event1.obs_error2big@enda_18;datum_event1.datum_redundant@enda_18;"
      "datum_event1.level_redundant@enda_18;datum_event1.not_analysis_varno@enda_18;"
      "datum_event1.duplicate@enda_18;datum_event1.levels2many@enda_18;"
      "datum_event1.level_selection@enda_18;datum_event1.vertco_consistency@enda_18;"
      "datum_event1.vertco_type_changed@enda_18;datum_event1.combined_flagging@enda_18;"
      "datum_event1.report_rejected@enda_18;datum_event1.varqc_performed@enda_18;"
      "datum_event1.obserror_increased@enda_18;datum_event1.contam_cld_flag@enda_18;"
      "datum_event1.contam_rain_flag@enda_18;datum_event1.contam_aerosol_flag@enda_18;"
      "datum_event1.bad_emissivity@enda_18;datum_event1.model_cld_flag@enda_18;"
      "datum_event1.contam_trgas_flag@enda_18;datum_event1.land_sensitivity@enda_18;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_18_PREPTAG = T;
    CCMA_nT_enda_18_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_18_PREPTAG;
  return CCMA_T_enda_18_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_18(void *T);
extern int CCMA_Unpack_T_enda_18(void *T);
extern int CCMA_Sel_T_enda_18(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_18);
PrePutTable(CCMA, d, double, enda_18);
PreLoadTable(CCMA, enda_18);
PreStoreTable(CCMA, enda_18);
extern void CCMA_Dim_T_enda_18(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_18(void *T);
extern int CCMA_Sql_T_enda_18(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_18(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_19) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_19" : appearance order#144, hierarchy rank# 168, weight = 358.000144 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_19;

#endif /* defined(IS_a_TABLE_enda_19) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_19)
extern const ODB_Tags *CCMA_Set_T_enda_19_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_19_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_19_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_19_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_19_TAG = 0;
PRIVATE int CCMA_nT_enda_19_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_19_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_19_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_19_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_19"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_19"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_19"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_19"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_19"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_19"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_19"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_19"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_19"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_19"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_19"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_19"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_19"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_19"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_19"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_19"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_19"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_19"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_19"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_19"; T[19].name = s; }
    CCMA_T_enda_19_TAG = T;
    CCMA_nT_enda_19_TAG = ntag;
    CCMA_nT_enda_19_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_19_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_19_MEM;
  return CCMA_T_enda_19_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_19_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_19_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_19;report_status@enda_19;report_event1@enda_19;"
      "obsvalue@enda_19;datum_anflag@enda_19;datum_status@enda_19;"
      "datum_event1@enda_19;biascorr@enda_19;biascorr_fg@enda_19;"
      "an_depar@enda_19;fg_depar@enda_19;qc_pge@enda_19;final_obs_error@enda_19;"
      "obs_error@enda_19;fg_error@enda_19;skintemp_1@enda_19;"
      "skintemp_2@enda_19;skintemp_3@enda_19;skintemp_4@enda_19;"
      "skintemp_5@enda_19;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_19;report_status@enda_19;report_event1@enda_19;"
      "obsvalue@enda_19;datum_anflag@enda_19;datum_status@enda_19;"
      "datum_event1@enda_19;biascorr@enda_19;biascorr_fg@enda_19;"
      "an_depar@enda_19;fg_depar@enda_19;qc_pge@enda_19;final_obs_error@enda_19;"
      "obs_error@enda_19;fg_error@enda_19;skintemp_1@enda_19;"
      "skintemp_2@enda_19;skintemp_3@enda_19;skintemp_4@enda_19;"
      "skintemp_5@enda_19;report_status.active@enda_19;report_status.passive@enda_19;"
      "report_status.rejected@enda_19;report_status.blacklisted@enda_19;"
      "report_status.use_emiskf_only@enda_19;report_event1.no_data@enda_19;"
      "report_event1.all_rejected@enda_19;report_event1.bad_practice@enda_19;"
      "report_event1.rdb_rejected@enda_19;report_event1.redundant@enda_19;"
      "report_event1.stalt_missing@enda_19;report_event1.qc_failed@enda_19;"
      "report_event1.overcast_ir@enda_19;report_event1.thinned@enda_19;"
      "report_event1.latlon_corrected@enda_19;report_event1.stalt_corrected@enda_19;"
      "datum_anflag.final@enda_19;datum_anflag.fg@enda_19;"
      "datum_anflag.depar@enda_19;datum_anflag.varqc@enda_19;"
      "datum_anflag.blacklist@enda_19;datum_anflag.ups@enda_19;"
      "datum_anflag.uvt@enda_19;datum_anflag.uhu@enda_19;"
      "datum_anflag.ut2@enda_19;datum_anflag.uh2@enda_19;"
      "datum_anflag.uv1@enda_19;datum_anflag.urr@enda_19;"
      "datum_anflag.usn@enda_19;datum_anflag.usst@enda_19;"
      "datum_status.active@enda_19;datum_status.passive@enda_19;"
      "datum_status.rejected@enda_19;datum_status.blacklisted@enda_19;"
      "datum_status.use_emiskf_only@enda_19;datum_event1.vertco_missing@enda_19;"
      "datum_event1.obsvalue_missing@enda_19;datum_event1.fg_missing@enda_19;"
      "datum_event1.rdb_rejected@enda_19;datum_event1.assim_cld_flag@enda_19;"
      "datum_event1.bad_practice@enda_19;datum_event1.vertpos_outrange@enda_19;"
      "datum_event1.fg2big@enda_19;datum_event1.depar2big@enda_19;"
      "datum_event1.obs_error2big@enda_19;datum_event1.datum_redundant@enda_19;"
      "datum_event1.level_redundant@enda_19;datum_event1.not_analysis_varno@enda_19;"
      "datum_event1.duplicate@enda_19;datum_event1.levels2many@enda_19;"
      "datum_event1.level_selection@enda_19;datum_event1.vertco_consistency@enda_19;"
      "datum_event1.vertco_type_changed@enda_19;datum_event1.combined_flagging@enda_19;"
      "datum_event1.report_rejected@enda_19;datum_event1.varqc_performed@enda_19;"
      "datum_event1.obserror_increased@enda_19;datum_event1.contam_cld_flag@enda_19;"
      "datum_event1.contam_rain_flag@enda_19;datum_event1.contam_aerosol_flag@enda_19;"
      "datum_event1.bad_emissivity@enda_19;datum_event1.model_cld_flag@enda_19;"
      "datum_event1.contam_trgas_flag@enda_19;datum_event1.land_sensitivity@enda_19;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_19_PREPTAG = T;
    CCMA_nT_enda_19_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_19_PREPTAG;
  return CCMA_T_enda_19_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_19(void *T);
extern int CCMA_Unpack_T_enda_19(void *T);
extern int CCMA_Sel_T_enda_19(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_19);
PrePutTable(CCMA, d, double, enda_19);
PreLoadTable(CCMA, enda_19);
PreStoreTable(CCMA, enda_19);
extern void CCMA_Dim_T_enda_19(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_19(void *T);
extern int CCMA_Sql_T_enda_19(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_19(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_20) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_20" : appearance order#145, hierarchy rank# 169, weight = 358.000145 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_20;

#endif /* defined(IS_a_TABLE_enda_20) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_20)
extern const ODB_Tags *CCMA_Set_T_enda_20_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_20_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_20_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_20_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_20_TAG = 0;
PRIVATE int CCMA_nT_enda_20_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_20_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_20_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_20_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_20"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_20"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_20"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_20"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_20"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_20"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_20"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_20"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_20"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_20"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_20"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_20"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_20"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_20"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_20"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_20"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_20"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_20"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_20"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_20"; T[19].name = s; }
    CCMA_T_enda_20_TAG = T;
    CCMA_nT_enda_20_TAG = ntag;
    CCMA_nT_enda_20_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_20_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_20_MEM;
  return CCMA_T_enda_20_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_20_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_20_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_20;report_status@enda_20;report_event1@enda_20;"
      "obsvalue@enda_20;datum_anflag@enda_20;datum_status@enda_20;"
      "datum_event1@enda_20;biascorr@enda_20;biascorr_fg@enda_20;"
      "an_depar@enda_20;fg_depar@enda_20;qc_pge@enda_20;final_obs_error@enda_20;"
      "obs_error@enda_20;fg_error@enda_20;skintemp_1@enda_20;"
      "skintemp_2@enda_20;skintemp_3@enda_20;skintemp_4@enda_20;"
      "skintemp_5@enda_20;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_20;report_status@enda_20;report_event1@enda_20;"
      "obsvalue@enda_20;datum_anflag@enda_20;datum_status@enda_20;"
      "datum_event1@enda_20;biascorr@enda_20;biascorr_fg@enda_20;"
      "an_depar@enda_20;fg_depar@enda_20;qc_pge@enda_20;final_obs_error@enda_20;"
      "obs_error@enda_20;fg_error@enda_20;skintemp_1@enda_20;"
      "skintemp_2@enda_20;skintemp_3@enda_20;skintemp_4@enda_20;"
      "skintemp_5@enda_20;report_status.active@enda_20;report_status.passive@enda_20;"
      "report_status.rejected@enda_20;report_status.blacklisted@enda_20;"
      "report_status.use_emiskf_only@enda_20;report_event1.no_data@enda_20;"
      "report_event1.all_rejected@enda_20;report_event1.bad_practice@enda_20;"
      "report_event1.rdb_rejected@enda_20;report_event1.redundant@enda_20;"
      "report_event1.stalt_missing@enda_20;report_event1.qc_failed@enda_20;"
      "report_event1.overcast_ir@enda_20;report_event1.thinned@enda_20;"
      "report_event1.latlon_corrected@enda_20;report_event1.stalt_corrected@enda_20;"
      "datum_anflag.final@enda_20;datum_anflag.fg@enda_20;"
      "datum_anflag.depar@enda_20;datum_anflag.varqc@enda_20;"
      "datum_anflag.blacklist@enda_20;datum_anflag.ups@enda_20;"
      "datum_anflag.uvt@enda_20;datum_anflag.uhu@enda_20;"
      "datum_anflag.ut2@enda_20;datum_anflag.uh2@enda_20;"
      "datum_anflag.uv1@enda_20;datum_anflag.urr@enda_20;"
      "datum_anflag.usn@enda_20;datum_anflag.usst@enda_20;"
      "datum_status.active@enda_20;datum_status.passive@enda_20;"
      "datum_status.rejected@enda_20;datum_status.blacklisted@enda_20;"
      "datum_status.use_emiskf_only@enda_20;datum_event1.vertco_missing@enda_20;"
      "datum_event1.obsvalue_missing@enda_20;datum_event1.fg_missing@enda_20;"
      "datum_event1.rdb_rejected@enda_20;datum_event1.assim_cld_flag@enda_20;"
      "datum_event1.bad_practice@enda_20;datum_event1.vertpos_outrange@enda_20;"
      "datum_event1.fg2big@enda_20;datum_event1.depar2big@enda_20;"
      "datum_event1.obs_error2big@enda_20;datum_event1.datum_redundant@enda_20;"
      "datum_event1.level_redundant@enda_20;datum_event1.not_analysis_varno@enda_20;"
      "datum_event1.duplicate@enda_20;datum_event1.levels2many@enda_20;"
      "datum_event1.level_selection@enda_20;datum_event1.vertco_consistency@enda_20;"
      "datum_event1.vertco_type_changed@enda_20;datum_event1.combined_flagging@enda_20;"
      "datum_event1.report_rejected@enda_20;datum_event1.varqc_performed@enda_20;"
      "datum_event1.obserror_increased@enda_20;datum_event1.contam_cld_flag@enda_20;"
      "datum_event1.contam_rain_flag@enda_20;datum_event1.contam_aerosol_flag@enda_20;"
      "datum_event1.bad_emissivity@enda_20;datum_event1.model_cld_flag@enda_20;"
      "datum_event1.contam_trgas_flag@enda_20;datum_event1.land_sensitivity@enda_20;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_20_PREPTAG = T;
    CCMA_nT_enda_20_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_20_PREPTAG;
  return CCMA_T_enda_20_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_20(void *T);
extern int CCMA_Unpack_T_enda_20(void *T);
extern int CCMA_Sel_T_enda_20(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_20);
PrePutTable(CCMA, d, double, enda_20);
PreLoadTable(CCMA, enda_20);
PreStoreTable(CCMA, enda_20);
extern void CCMA_Dim_T_enda_20(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_20(void *T);
extern int CCMA_Sql_T_enda_20(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_20(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_21) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_21" : appearance order#146, hierarchy rank# 170, weight = 358.000146 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_21;

#endif /* defined(IS_a_TABLE_enda_21) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_21)
extern const ODB_Tags *CCMA_Set_T_enda_21_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_21_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_21_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_21_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_21_TAG = 0;
PRIVATE int CCMA_nT_enda_21_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_21_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_21_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_21_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_21"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_21"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_21"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_21"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_21"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_21"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_21"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_21"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_21"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_21"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_21"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_21"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_21"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_21"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_21"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_21"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_21"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_21"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_21"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_21"; T[19].name = s; }
    CCMA_T_enda_21_TAG = T;
    CCMA_nT_enda_21_TAG = ntag;
    CCMA_nT_enda_21_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_21_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_21_MEM;
  return CCMA_T_enda_21_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_21_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_21_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_21;report_status@enda_21;report_event1@enda_21;"
      "obsvalue@enda_21;datum_anflag@enda_21;datum_status@enda_21;"
      "datum_event1@enda_21;biascorr@enda_21;biascorr_fg@enda_21;"
      "an_depar@enda_21;fg_depar@enda_21;qc_pge@enda_21;final_obs_error@enda_21;"
      "obs_error@enda_21;fg_error@enda_21;skintemp_1@enda_21;"
      "skintemp_2@enda_21;skintemp_3@enda_21;skintemp_4@enda_21;"
      "skintemp_5@enda_21;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_21;report_status@enda_21;report_event1@enda_21;"
      "obsvalue@enda_21;datum_anflag@enda_21;datum_status@enda_21;"
      "datum_event1@enda_21;biascorr@enda_21;biascorr_fg@enda_21;"
      "an_depar@enda_21;fg_depar@enda_21;qc_pge@enda_21;final_obs_error@enda_21;"
      "obs_error@enda_21;fg_error@enda_21;skintemp_1@enda_21;"
      "skintemp_2@enda_21;skintemp_3@enda_21;skintemp_4@enda_21;"
      "skintemp_5@enda_21;report_status.active@enda_21;report_status.passive@enda_21;"
      "report_status.rejected@enda_21;report_status.blacklisted@enda_21;"
      "report_status.use_emiskf_only@enda_21;report_event1.no_data@enda_21;"
      "report_event1.all_rejected@enda_21;report_event1.bad_practice@enda_21;"
      "report_event1.rdb_rejected@enda_21;report_event1.redundant@enda_21;"
      "report_event1.stalt_missing@enda_21;report_event1.qc_failed@enda_21;"
      "report_event1.overcast_ir@enda_21;report_event1.thinned@enda_21;"
      "report_event1.latlon_corrected@enda_21;report_event1.stalt_corrected@enda_21;"
      "datum_anflag.final@enda_21;datum_anflag.fg@enda_21;"
      "datum_anflag.depar@enda_21;datum_anflag.varqc@enda_21;"
      "datum_anflag.blacklist@enda_21;datum_anflag.ups@enda_21;"
      "datum_anflag.uvt@enda_21;datum_anflag.uhu@enda_21;"
      "datum_anflag.ut2@enda_21;datum_anflag.uh2@enda_21;"
      "datum_anflag.uv1@enda_21;datum_anflag.urr@enda_21;"
      "datum_anflag.usn@enda_21;datum_anflag.usst@enda_21;"
      "datum_status.active@enda_21;datum_status.passive@enda_21;"
      "datum_status.rejected@enda_21;datum_status.blacklisted@enda_21;"
      "datum_status.use_emiskf_only@enda_21;datum_event1.vertco_missing@enda_21;"
      "datum_event1.obsvalue_missing@enda_21;datum_event1.fg_missing@enda_21;"
      "datum_event1.rdb_rejected@enda_21;datum_event1.assim_cld_flag@enda_21;"
      "datum_event1.bad_practice@enda_21;datum_event1.vertpos_outrange@enda_21;"
      "datum_event1.fg2big@enda_21;datum_event1.depar2big@enda_21;"
      "datum_event1.obs_error2big@enda_21;datum_event1.datum_redundant@enda_21;"
      "datum_event1.level_redundant@enda_21;datum_event1.not_analysis_varno@enda_21;"
      "datum_event1.duplicate@enda_21;datum_event1.levels2many@enda_21;"
      "datum_event1.level_selection@enda_21;datum_event1.vertco_consistency@enda_21;"
      "datum_event1.vertco_type_changed@enda_21;datum_event1.combined_flagging@enda_21;"
      "datum_event1.report_rejected@enda_21;datum_event1.varqc_performed@enda_21;"
      "datum_event1.obserror_increased@enda_21;datum_event1.contam_cld_flag@enda_21;"
      "datum_event1.contam_rain_flag@enda_21;datum_event1.contam_aerosol_flag@enda_21;"
      "datum_event1.bad_emissivity@enda_21;datum_event1.model_cld_flag@enda_21;"
      "datum_event1.contam_trgas_flag@enda_21;datum_event1.land_sensitivity@enda_21;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_21_PREPTAG = T;
    CCMA_nT_enda_21_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_21_PREPTAG;
  return CCMA_T_enda_21_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_21(void *T);
extern int CCMA_Unpack_T_enda_21(void *T);
extern int CCMA_Sel_T_enda_21(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_21);
PrePutTable(CCMA, d, double, enda_21);
PreLoadTable(CCMA, enda_21);
PreStoreTable(CCMA, enda_21);
extern void CCMA_Dim_T_enda_21(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_21(void *T);
extern int CCMA_Sql_T_enda_21(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_21(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_22) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_22" : appearance order#147, hierarchy rank# 171, weight = 358.000147 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_22;

#endif /* defined(IS_a_TABLE_enda_22) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_22)
extern const ODB_Tags *CCMA_Set_T_enda_22_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_22_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_22_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_22_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_22_TAG = 0;
PRIVATE int CCMA_nT_enda_22_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_22_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_22_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_22_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_22"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_22"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_22"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_22"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_22"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_22"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_22"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_22"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_22"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_22"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_22"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_22"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_22"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_22"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_22"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_22"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_22"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_22"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_22"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_22"; T[19].name = s; }
    CCMA_T_enda_22_TAG = T;
    CCMA_nT_enda_22_TAG = ntag;
    CCMA_nT_enda_22_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_22_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_22_MEM;
  return CCMA_T_enda_22_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_22_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_22_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_22;report_status@enda_22;report_event1@enda_22;"
      "obsvalue@enda_22;datum_anflag@enda_22;datum_status@enda_22;"
      "datum_event1@enda_22;biascorr@enda_22;biascorr_fg@enda_22;"
      "an_depar@enda_22;fg_depar@enda_22;qc_pge@enda_22;final_obs_error@enda_22;"
      "obs_error@enda_22;fg_error@enda_22;skintemp_1@enda_22;"
      "skintemp_2@enda_22;skintemp_3@enda_22;skintemp_4@enda_22;"
      "skintemp_5@enda_22;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_22;report_status@enda_22;report_event1@enda_22;"
      "obsvalue@enda_22;datum_anflag@enda_22;datum_status@enda_22;"
      "datum_event1@enda_22;biascorr@enda_22;biascorr_fg@enda_22;"
      "an_depar@enda_22;fg_depar@enda_22;qc_pge@enda_22;final_obs_error@enda_22;"
      "obs_error@enda_22;fg_error@enda_22;skintemp_1@enda_22;"
      "skintemp_2@enda_22;skintemp_3@enda_22;skintemp_4@enda_22;"
      "skintemp_5@enda_22;report_status.active@enda_22;report_status.passive@enda_22;"
      "report_status.rejected@enda_22;report_status.blacklisted@enda_22;"
      "report_status.use_emiskf_only@enda_22;report_event1.no_data@enda_22;"
      "report_event1.all_rejected@enda_22;report_event1.bad_practice@enda_22;"
      "report_event1.rdb_rejected@enda_22;report_event1.redundant@enda_22;"
      "report_event1.stalt_missing@enda_22;report_event1.qc_failed@enda_22;"
      "report_event1.overcast_ir@enda_22;report_event1.thinned@enda_22;"
      "report_event1.latlon_corrected@enda_22;report_event1.stalt_corrected@enda_22;"
      "datum_anflag.final@enda_22;datum_anflag.fg@enda_22;"
      "datum_anflag.depar@enda_22;datum_anflag.varqc@enda_22;"
      "datum_anflag.blacklist@enda_22;datum_anflag.ups@enda_22;"
      "datum_anflag.uvt@enda_22;datum_anflag.uhu@enda_22;"
      "datum_anflag.ut2@enda_22;datum_anflag.uh2@enda_22;"
      "datum_anflag.uv1@enda_22;datum_anflag.urr@enda_22;"
      "datum_anflag.usn@enda_22;datum_anflag.usst@enda_22;"
      "datum_status.active@enda_22;datum_status.passive@enda_22;"
      "datum_status.rejected@enda_22;datum_status.blacklisted@enda_22;"
      "datum_status.use_emiskf_only@enda_22;datum_event1.vertco_missing@enda_22;"
      "datum_event1.obsvalue_missing@enda_22;datum_event1.fg_missing@enda_22;"
      "datum_event1.rdb_rejected@enda_22;datum_event1.assim_cld_flag@enda_22;"
      "datum_event1.bad_practice@enda_22;datum_event1.vertpos_outrange@enda_22;"
      "datum_event1.fg2big@enda_22;datum_event1.depar2big@enda_22;"
      "datum_event1.obs_error2big@enda_22;datum_event1.datum_redundant@enda_22;"
      "datum_event1.level_redundant@enda_22;datum_event1.not_analysis_varno@enda_22;"
      "datum_event1.duplicate@enda_22;datum_event1.levels2many@enda_22;"
      "datum_event1.level_selection@enda_22;datum_event1.vertco_consistency@enda_22;"
      "datum_event1.vertco_type_changed@enda_22;datum_event1.combined_flagging@enda_22;"
      "datum_event1.report_rejected@enda_22;datum_event1.varqc_performed@enda_22;"
      "datum_event1.obserror_increased@enda_22;datum_event1.contam_cld_flag@enda_22;"
      "datum_event1.contam_rain_flag@enda_22;datum_event1.contam_aerosol_flag@enda_22;"
      "datum_event1.bad_emissivity@enda_22;datum_event1.model_cld_flag@enda_22;"
      "datum_event1.contam_trgas_flag@enda_22;datum_event1.land_sensitivity@enda_22;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_22_PREPTAG = T;
    CCMA_nT_enda_22_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_22_PREPTAG;
  return CCMA_T_enda_22_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_22(void *T);
extern int CCMA_Unpack_T_enda_22(void *T);
extern int CCMA_Sel_T_enda_22(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_22);
PrePutTable(CCMA, d, double, enda_22);
PreLoadTable(CCMA, enda_22);
PreStoreTable(CCMA, enda_22);
extern void CCMA_Dim_T_enda_22(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_22(void *T);
extern int CCMA_Sql_T_enda_22(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_22(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_23) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_23" : appearance order#148, hierarchy rank# 172, weight = 358.000148 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_23;

#endif /* defined(IS_a_TABLE_enda_23) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_23)
extern const ODB_Tags *CCMA_Set_T_enda_23_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_23_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_23_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_23_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_23_TAG = 0;
PRIVATE int CCMA_nT_enda_23_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_23_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_23_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_23_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_23"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_23"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_23"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_23"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_23"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_23"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_23"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_23"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_23"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_23"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_23"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_23"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_23"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_23"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_23"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_23"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_23"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_23"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_23"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_23"; T[19].name = s; }
    CCMA_T_enda_23_TAG = T;
    CCMA_nT_enda_23_TAG = ntag;
    CCMA_nT_enda_23_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_23_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_23_MEM;
  return CCMA_T_enda_23_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_23_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_23_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_23;report_status@enda_23;report_event1@enda_23;"
      "obsvalue@enda_23;datum_anflag@enda_23;datum_status@enda_23;"
      "datum_event1@enda_23;biascorr@enda_23;biascorr_fg@enda_23;"
      "an_depar@enda_23;fg_depar@enda_23;qc_pge@enda_23;final_obs_error@enda_23;"
      "obs_error@enda_23;fg_error@enda_23;skintemp_1@enda_23;"
      "skintemp_2@enda_23;skintemp_3@enda_23;skintemp_4@enda_23;"
      "skintemp_5@enda_23;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_23;report_status@enda_23;report_event1@enda_23;"
      "obsvalue@enda_23;datum_anflag@enda_23;datum_status@enda_23;"
      "datum_event1@enda_23;biascorr@enda_23;biascorr_fg@enda_23;"
      "an_depar@enda_23;fg_depar@enda_23;qc_pge@enda_23;final_obs_error@enda_23;"
      "obs_error@enda_23;fg_error@enda_23;skintemp_1@enda_23;"
      "skintemp_2@enda_23;skintemp_3@enda_23;skintemp_4@enda_23;"
      "skintemp_5@enda_23;report_status.active@enda_23;report_status.passive@enda_23;"
      "report_status.rejected@enda_23;report_status.blacklisted@enda_23;"
      "report_status.use_emiskf_only@enda_23;report_event1.no_data@enda_23;"
      "report_event1.all_rejected@enda_23;report_event1.bad_practice@enda_23;"
      "report_event1.rdb_rejected@enda_23;report_event1.redundant@enda_23;"
      "report_event1.stalt_missing@enda_23;report_event1.qc_failed@enda_23;"
      "report_event1.overcast_ir@enda_23;report_event1.thinned@enda_23;"
      "report_event1.latlon_corrected@enda_23;report_event1.stalt_corrected@enda_23;"
      "datum_anflag.final@enda_23;datum_anflag.fg@enda_23;"
      "datum_anflag.depar@enda_23;datum_anflag.varqc@enda_23;"
      "datum_anflag.blacklist@enda_23;datum_anflag.ups@enda_23;"
      "datum_anflag.uvt@enda_23;datum_anflag.uhu@enda_23;"
      "datum_anflag.ut2@enda_23;datum_anflag.uh2@enda_23;"
      "datum_anflag.uv1@enda_23;datum_anflag.urr@enda_23;"
      "datum_anflag.usn@enda_23;datum_anflag.usst@enda_23;"
      "datum_status.active@enda_23;datum_status.passive@enda_23;"
      "datum_status.rejected@enda_23;datum_status.blacklisted@enda_23;"
      "datum_status.use_emiskf_only@enda_23;datum_event1.vertco_missing@enda_23;"
      "datum_event1.obsvalue_missing@enda_23;datum_event1.fg_missing@enda_23;"
      "datum_event1.rdb_rejected@enda_23;datum_event1.assim_cld_flag@enda_23;"
      "datum_event1.bad_practice@enda_23;datum_event1.vertpos_outrange@enda_23;"
      "datum_event1.fg2big@enda_23;datum_event1.depar2big@enda_23;"
      "datum_event1.obs_error2big@enda_23;datum_event1.datum_redundant@enda_23;"
      "datum_event1.level_redundant@enda_23;datum_event1.not_analysis_varno@enda_23;"
      "datum_event1.duplicate@enda_23;datum_event1.levels2many@enda_23;"
      "datum_event1.level_selection@enda_23;datum_event1.vertco_consistency@enda_23;"
      "datum_event1.vertco_type_changed@enda_23;datum_event1.combined_flagging@enda_23;"
      "datum_event1.report_rejected@enda_23;datum_event1.varqc_performed@enda_23;"
      "datum_event1.obserror_increased@enda_23;datum_event1.contam_cld_flag@enda_23;"
      "datum_event1.contam_rain_flag@enda_23;datum_event1.contam_aerosol_flag@enda_23;"
      "datum_event1.bad_emissivity@enda_23;datum_event1.model_cld_flag@enda_23;"
      "datum_event1.contam_trgas_flag@enda_23;datum_event1.land_sensitivity@enda_23;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_23_PREPTAG = T;
    CCMA_nT_enda_23_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_23_PREPTAG;
  return CCMA_T_enda_23_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_23(void *T);
extern int CCMA_Unpack_T_enda_23(void *T);
extern int CCMA_Sel_T_enda_23(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_23);
PrePutTable(CCMA, d, double, enda_23);
PreLoadTable(CCMA, enda_23);
PreStoreTable(CCMA, enda_23);
extern void CCMA_Dim_T_enda_23(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_23(void *T);
extern int CCMA_Sql_T_enda_23(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_23(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_24) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_24" : appearance order#149, hierarchy rank# 173, weight = 358.000149 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_24;

#endif /* defined(IS_a_TABLE_enda_24) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_24)
extern const ODB_Tags *CCMA_Set_T_enda_24_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_24_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_24_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_24_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_24_TAG = 0;
PRIVATE int CCMA_nT_enda_24_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_24_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_24_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_24_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_24"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_24"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_24"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_24"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_24"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_24"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_24"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_24"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_24"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_24"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_24"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_24"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_24"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_24"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_24"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_24"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_24"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_24"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_24"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_24"; T[19].name = s; }
    CCMA_T_enda_24_TAG = T;
    CCMA_nT_enda_24_TAG = ntag;
    CCMA_nT_enda_24_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_24_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_24_MEM;
  return CCMA_T_enda_24_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_24_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_24_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_24;report_status@enda_24;report_event1@enda_24;"
      "obsvalue@enda_24;datum_anflag@enda_24;datum_status@enda_24;"
      "datum_event1@enda_24;biascorr@enda_24;biascorr_fg@enda_24;"
      "an_depar@enda_24;fg_depar@enda_24;qc_pge@enda_24;final_obs_error@enda_24;"
      "obs_error@enda_24;fg_error@enda_24;skintemp_1@enda_24;"
      "skintemp_2@enda_24;skintemp_3@enda_24;skintemp_4@enda_24;"
      "skintemp_5@enda_24;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_24;report_status@enda_24;report_event1@enda_24;"
      "obsvalue@enda_24;datum_anflag@enda_24;datum_status@enda_24;"
      "datum_event1@enda_24;biascorr@enda_24;biascorr_fg@enda_24;"
      "an_depar@enda_24;fg_depar@enda_24;qc_pge@enda_24;final_obs_error@enda_24;"
      "obs_error@enda_24;fg_error@enda_24;skintemp_1@enda_24;"
      "skintemp_2@enda_24;skintemp_3@enda_24;skintemp_4@enda_24;"
      "skintemp_5@enda_24;report_status.active@enda_24;report_status.passive@enda_24;"
      "report_status.rejected@enda_24;report_status.blacklisted@enda_24;"
      "report_status.use_emiskf_only@enda_24;report_event1.no_data@enda_24;"
      "report_event1.all_rejected@enda_24;report_event1.bad_practice@enda_24;"
      "report_event1.rdb_rejected@enda_24;report_event1.redundant@enda_24;"
      "report_event1.stalt_missing@enda_24;report_event1.qc_failed@enda_24;"
      "report_event1.overcast_ir@enda_24;report_event1.thinned@enda_24;"
      "report_event1.latlon_corrected@enda_24;report_event1.stalt_corrected@enda_24;"
      "datum_anflag.final@enda_24;datum_anflag.fg@enda_24;"
      "datum_anflag.depar@enda_24;datum_anflag.varqc@enda_24;"
      "datum_anflag.blacklist@enda_24;datum_anflag.ups@enda_24;"
      "datum_anflag.uvt@enda_24;datum_anflag.uhu@enda_24;"
      "datum_anflag.ut2@enda_24;datum_anflag.uh2@enda_24;"
      "datum_anflag.uv1@enda_24;datum_anflag.urr@enda_24;"
      "datum_anflag.usn@enda_24;datum_anflag.usst@enda_24;"
      "datum_status.active@enda_24;datum_status.passive@enda_24;"
      "datum_status.rejected@enda_24;datum_status.blacklisted@enda_24;"
      "datum_status.use_emiskf_only@enda_24;datum_event1.vertco_missing@enda_24;"
      "datum_event1.obsvalue_missing@enda_24;datum_event1.fg_missing@enda_24;"
      "datum_event1.rdb_rejected@enda_24;datum_event1.assim_cld_flag@enda_24;"
      "datum_event1.bad_practice@enda_24;datum_event1.vertpos_outrange@enda_24;"
      "datum_event1.fg2big@enda_24;datum_event1.depar2big@enda_24;"
      "datum_event1.obs_error2big@enda_24;datum_event1.datum_redundant@enda_24;"
      "datum_event1.level_redundant@enda_24;datum_event1.not_analysis_varno@enda_24;"
      "datum_event1.duplicate@enda_24;datum_event1.levels2many@enda_24;"
      "datum_event1.level_selection@enda_24;datum_event1.vertco_consistency@enda_24;"
      "datum_event1.vertco_type_changed@enda_24;datum_event1.combined_flagging@enda_24;"
      "datum_event1.report_rejected@enda_24;datum_event1.varqc_performed@enda_24;"
      "datum_event1.obserror_increased@enda_24;datum_event1.contam_cld_flag@enda_24;"
      "datum_event1.contam_rain_flag@enda_24;datum_event1.contam_aerosol_flag@enda_24;"
      "datum_event1.bad_emissivity@enda_24;datum_event1.model_cld_flag@enda_24;"
      "datum_event1.contam_trgas_flag@enda_24;datum_event1.land_sensitivity@enda_24;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_24_PREPTAG = T;
    CCMA_nT_enda_24_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_24_PREPTAG;
  return CCMA_T_enda_24_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_24(void *T);
extern int CCMA_Unpack_T_enda_24(void *T);
extern int CCMA_Sel_T_enda_24(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_24);
PrePutTable(CCMA, d, double, enda_24);
PreLoadTable(CCMA, enda_24);
PreStoreTable(CCMA, enda_24);
extern void CCMA_Dim_T_enda_24(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_24(void *T);
extern int CCMA_Sql_T_enda_24(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_24(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_25) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_25" : appearance order#150, hierarchy rank# 174, weight = 358.000150 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_25;

#endif /* defined(IS_a_TABLE_enda_25) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_25)
extern const ODB_Tags *CCMA_Set_T_enda_25_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_25_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_25_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_25_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_25_TAG = 0;
PRIVATE int CCMA_nT_enda_25_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_25_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_25_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_25_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_25"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_25"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_25"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_25"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_25"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_25"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_25"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_25"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_25"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_25"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_25"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_25"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_25"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_25"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_25"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_25"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_25"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_25"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_25"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_25"; T[19].name = s; }
    CCMA_T_enda_25_TAG = T;
    CCMA_nT_enda_25_TAG = ntag;
    CCMA_nT_enda_25_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_25_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_25_MEM;
  return CCMA_T_enda_25_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_25_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_25_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_25;report_status@enda_25;report_event1@enda_25;"
      "obsvalue@enda_25;datum_anflag@enda_25;datum_status@enda_25;"
      "datum_event1@enda_25;biascorr@enda_25;biascorr_fg@enda_25;"
      "an_depar@enda_25;fg_depar@enda_25;qc_pge@enda_25;final_obs_error@enda_25;"
      "obs_error@enda_25;fg_error@enda_25;skintemp_1@enda_25;"
      "skintemp_2@enda_25;skintemp_3@enda_25;skintemp_4@enda_25;"
      "skintemp_5@enda_25;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_25;report_status@enda_25;report_event1@enda_25;"
      "obsvalue@enda_25;datum_anflag@enda_25;datum_status@enda_25;"
      "datum_event1@enda_25;biascorr@enda_25;biascorr_fg@enda_25;"
      "an_depar@enda_25;fg_depar@enda_25;qc_pge@enda_25;final_obs_error@enda_25;"
      "obs_error@enda_25;fg_error@enda_25;skintemp_1@enda_25;"
      "skintemp_2@enda_25;skintemp_3@enda_25;skintemp_4@enda_25;"
      "skintemp_5@enda_25;report_status.active@enda_25;report_status.passive@enda_25;"
      "report_status.rejected@enda_25;report_status.blacklisted@enda_25;"
      "report_status.use_emiskf_only@enda_25;report_event1.no_data@enda_25;"
      "report_event1.all_rejected@enda_25;report_event1.bad_practice@enda_25;"
      "report_event1.rdb_rejected@enda_25;report_event1.redundant@enda_25;"
      "report_event1.stalt_missing@enda_25;report_event1.qc_failed@enda_25;"
      "report_event1.overcast_ir@enda_25;report_event1.thinned@enda_25;"
      "report_event1.latlon_corrected@enda_25;report_event1.stalt_corrected@enda_25;"
      "datum_anflag.final@enda_25;datum_anflag.fg@enda_25;"
      "datum_anflag.depar@enda_25;datum_anflag.varqc@enda_25;"
      "datum_anflag.blacklist@enda_25;datum_anflag.ups@enda_25;"
      "datum_anflag.uvt@enda_25;datum_anflag.uhu@enda_25;"
      "datum_anflag.ut2@enda_25;datum_anflag.uh2@enda_25;"
      "datum_anflag.uv1@enda_25;datum_anflag.urr@enda_25;"
      "datum_anflag.usn@enda_25;datum_anflag.usst@enda_25;"
      "datum_status.active@enda_25;datum_status.passive@enda_25;"
      "datum_status.rejected@enda_25;datum_status.blacklisted@enda_25;"
      "datum_status.use_emiskf_only@enda_25;datum_event1.vertco_missing@enda_25;"
      "datum_event1.obsvalue_missing@enda_25;datum_event1.fg_missing@enda_25;"
      "datum_event1.rdb_rejected@enda_25;datum_event1.assim_cld_flag@enda_25;"
      "datum_event1.bad_practice@enda_25;datum_event1.vertpos_outrange@enda_25;"
      "datum_event1.fg2big@enda_25;datum_event1.depar2big@enda_25;"
      "datum_event1.obs_error2big@enda_25;datum_event1.datum_redundant@enda_25;"
      "datum_event1.level_redundant@enda_25;datum_event1.not_analysis_varno@enda_25;"
      "datum_event1.duplicate@enda_25;datum_event1.levels2many@enda_25;"
      "datum_event1.level_selection@enda_25;datum_event1.vertco_consistency@enda_25;"
      "datum_event1.vertco_type_changed@enda_25;datum_event1.combined_flagging@enda_25;"
      "datum_event1.report_rejected@enda_25;datum_event1.varqc_performed@enda_25;"
      "datum_event1.obserror_increased@enda_25;datum_event1.contam_cld_flag@enda_25;"
      "datum_event1.contam_rain_flag@enda_25;datum_event1.contam_aerosol_flag@enda_25;"
      "datum_event1.bad_emissivity@enda_25;datum_event1.model_cld_flag@enda_25;"
      "datum_event1.contam_trgas_flag@enda_25;datum_event1.land_sensitivity@enda_25;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_25_PREPTAG = T;
    CCMA_nT_enda_25_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_25_PREPTAG;
  return CCMA_T_enda_25_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_25(void *T);
extern int CCMA_Unpack_T_enda_25(void *T);
extern int CCMA_Sel_T_enda_25(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_25);
PrePutTable(CCMA, d, double, enda_25);
PreLoadTable(CCMA, enda_25);
PreStoreTable(CCMA, enda_25);
extern void CCMA_Dim_T_enda_25(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_25(void *T);
extern int CCMA_Sql_T_enda_25(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_25(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_26) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_26" : appearance order#151, hierarchy rank# 175, weight = 358.000151 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_26;

#endif /* defined(IS_a_TABLE_enda_26) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_26)
extern const ODB_Tags *CCMA_Set_T_enda_26_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_26_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_26_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_26_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_26_TAG = 0;
PRIVATE int CCMA_nT_enda_26_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_26_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_26_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_26_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_26"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_26"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_26"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_26"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_26"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_26"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_26"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_26"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_26"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_26"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_26"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_26"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_26"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_26"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_26"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_26"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_26"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_26"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_26"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_26"; T[19].name = s; }
    CCMA_T_enda_26_TAG = T;
    CCMA_nT_enda_26_TAG = ntag;
    CCMA_nT_enda_26_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_26_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_26_MEM;
  return CCMA_T_enda_26_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_26_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_26_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_26;report_status@enda_26;report_event1@enda_26;"
      "obsvalue@enda_26;datum_anflag@enda_26;datum_status@enda_26;"
      "datum_event1@enda_26;biascorr@enda_26;biascorr_fg@enda_26;"
      "an_depar@enda_26;fg_depar@enda_26;qc_pge@enda_26;final_obs_error@enda_26;"
      "obs_error@enda_26;fg_error@enda_26;skintemp_1@enda_26;"
      "skintemp_2@enda_26;skintemp_3@enda_26;skintemp_4@enda_26;"
      "skintemp_5@enda_26;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_26;report_status@enda_26;report_event1@enda_26;"
      "obsvalue@enda_26;datum_anflag@enda_26;datum_status@enda_26;"
      "datum_event1@enda_26;biascorr@enda_26;biascorr_fg@enda_26;"
      "an_depar@enda_26;fg_depar@enda_26;qc_pge@enda_26;final_obs_error@enda_26;"
      "obs_error@enda_26;fg_error@enda_26;skintemp_1@enda_26;"
      "skintemp_2@enda_26;skintemp_3@enda_26;skintemp_4@enda_26;"
      "skintemp_5@enda_26;report_status.active@enda_26;report_status.passive@enda_26;"
      "report_status.rejected@enda_26;report_status.blacklisted@enda_26;"
      "report_status.use_emiskf_only@enda_26;report_event1.no_data@enda_26;"
      "report_event1.all_rejected@enda_26;report_event1.bad_practice@enda_26;"
      "report_event1.rdb_rejected@enda_26;report_event1.redundant@enda_26;"
      "report_event1.stalt_missing@enda_26;report_event1.qc_failed@enda_26;"
      "report_event1.overcast_ir@enda_26;report_event1.thinned@enda_26;"
      "report_event1.latlon_corrected@enda_26;report_event1.stalt_corrected@enda_26;"
      "datum_anflag.final@enda_26;datum_anflag.fg@enda_26;"
      "datum_anflag.depar@enda_26;datum_anflag.varqc@enda_26;"
      "datum_anflag.blacklist@enda_26;datum_anflag.ups@enda_26;"
      "datum_anflag.uvt@enda_26;datum_anflag.uhu@enda_26;"
      "datum_anflag.ut2@enda_26;datum_anflag.uh2@enda_26;"
      "datum_anflag.uv1@enda_26;datum_anflag.urr@enda_26;"
      "datum_anflag.usn@enda_26;datum_anflag.usst@enda_26;"
      "datum_status.active@enda_26;datum_status.passive@enda_26;"
      "datum_status.rejected@enda_26;datum_status.blacklisted@enda_26;"
      "datum_status.use_emiskf_only@enda_26;datum_event1.vertco_missing@enda_26;"
      "datum_event1.obsvalue_missing@enda_26;datum_event1.fg_missing@enda_26;"
      "datum_event1.rdb_rejected@enda_26;datum_event1.assim_cld_flag@enda_26;"
      "datum_event1.bad_practice@enda_26;datum_event1.vertpos_outrange@enda_26;"
      "datum_event1.fg2big@enda_26;datum_event1.depar2big@enda_26;"
      "datum_event1.obs_error2big@enda_26;datum_event1.datum_redundant@enda_26;"
      "datum_event1.level_redundant@enda_26;datum_event1.not_analysis_varno@enda_26;"
      "datum_event1.duplicate@enda_26;datum_event1.levels2many@enda_26;"
      "datum_event1.level_selection@enda_26;datum_event1.vertco_consistency@enda_26;"
      "datum_event1.vertco_type_changed@enda_26;datum_event1.combined_flagging@enda_26;"
      "datum_event1.report_rejected@enda_26;datum_event1.varqc_performed@enda_26;"
      "datum_event1.obserror_increased@enda_26;datum_event1.contam_cld_flag@enda_26;"
      "datum_event1.contam_rain_flag@enda_26;datum_event1.contam_aerosol_flag@enda_26;"
      "datum_event1.bad_emissivity@enda_26;datum_event1.model_cld_flag@enda_26;"
      "datum_event1.contam_trgas_flag@enda_26;datum_event1.land_sensitivity@enda_26;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_26_PREPTAG = T;
    CCMA_nT_enda_26_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_26_PREPTAG;
  return CCMA_T_enda_26_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_26(void *T);
extern int CCMA_Unpack_T_enda_26(void *T);
extern int CCMA_Sel_T_enda_26(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_26);
PrePutTable(CCMA, d, double, enda_26);
PreLoadTable(CCMA, enda_26);
PreStoreTable(CCMA, enda_26);
extern void CCMA_Dim_T_enda_26(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_26(void *T);
extern int CCMA_Sql_T_enda_26(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_26(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_27) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_27" : appearance order#152, hierarchy rank# 176, weight = 358.000152 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_27;

#endif /* defined(IS_a_TABLE_enda_27) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_27)
extern const ODB_Tags *CCMA_Set_T_enda_27_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_27_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_27_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_27_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_27_TAG = 0;
PRIVATE int CCMA_nT_enda_27_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_27_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_27_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_27_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_27"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_27"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_27"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_27"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_27"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_27"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_27"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_27"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_27"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_27"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_27"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_27"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_27"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_27"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_27"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_27"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_27"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_27"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_27"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_27"; T[19].name = s; }
    CCMA_T_enda_27_TAG = T;
    CCMA_nT_enda_27_TAG = ntag;
    CCMA_nT_enda_27_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_27_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_27_MEM;
  return CCMA_T_enda_27_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_27_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_27_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_27;report_status@enda_27;report_event1@enda_27;"
      "obsvalue@enda_27;datum_anflag@enda_27;datum_status@enda_27;"
      "datum_event1@enda_27;biascorr@enda_27;biascorr_fg@enda_27;"
      "an_depar@enda_27;fg_depar@enda_27;qc_pge@enda_27;final_obs_error@enda_27;"
      "obs_error@enda_27;fg_error@enda_27;skintemp_1@enda_27;"
      "skintemp_2@enda_27;skintemp_3@enda_27;skintemp_4@enda_27;"
      "skintemp_5@enda_27;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_27;report_status@enda_27;report_event1@enda_27;"
      "obsvalue@enda_27;datum_anflag@enda_27;datum_status@enda_27;"
      "datum_event1@enda_27;biascorr@enda_27;biascorr_fg@enda_27;"
      "an_depar@enda_27;fg_depar@enda_27;qc_pge@enda_27;final_obs_error@enda_27;"
      "obs_error@enda_27;fg_error@enda_27;skintemp_1@enda_27;"
      "skintemp_2@enda_27;skintemp_3@enda_27;skintemp_4@enda_27;"
      "skintemp_5@enda_27;report_status.active@enda_27;report_status.passive@enda_27;"
      "report_status.rejected@enda_27;report_status.blacklisted@enda_27;"
      "report_status.use_emiskf_only@enda_27;report_event1.no_data@enda_27;"
      "report_event1.all_rejected@enda_27;report_event1.bad_practice@enda_27;"
      "report_event1.rdb_rejected@enda_27;report_event1.redundant@enda_27;"
      "report_event1.stalt_missing@enda_27;report_event1.qc_failed@enda_27;"
      "report_event1.overcast_ir@enda_27;report_event1.thinned@enda_27;"
      "report_event1.latlon_corrected@enda_27;report_event1.stalt_corrected@enda_27;"
      "datum_anflag.final@enda_27;datum_anflag.fg@enda_27;"
      "datum_anflag.depar@enda_27;datum_anflag.varqc@enda_27;"
      "datum_anflag.blacklist@enda_27;datum_anflag.ups@enda_27;"
      "datum_anflag.uvt@enda_27;datum_anflag.uhu@enda_27;"
      "datum_anflag.ut2@enda_27;datum_anflag.uh2@enda_27;"
      "datum_anflag.uv1@enda_27;datum_anflag.urr@enda_27;"
      "datum_anflag.usn@enda_27;datum_anflag.usst@enda_27;"
      "datum_status.active@enda_27;datum_status.passive@enda_27;"
      "datum_status.rejected@enda_27;datum_status.blacklisted@enda_27;"
      "datum_status.use_emiskf_only@enda_27;datum_event1.vertco_missing@enda_27;"
      "datum_event1.obsvalue_missing@enda_27;datum_event1.fg_missing@enda_27;"
      "datum_event1.rdb_rejected@enda_27;datum_event1.assim_cld_flag@enda_27;"
      "datum_event1.bad_practice@enda_27;datum_event1.vertpos_outrange@enda_27;"
      "datum_event1.fg2big@enda_27;datum_event1.depar2big@enda_27;"
      "datum_event1.obs_error2big@enda_27;datum_event1.datum_redundant@enda_27;"
      "datum_event1.level_redundant@enda_27;datum_event1.not_analysis_varno@enda_27;"
      "datum_event1.duplicate@enda_27;datum_event1.levels2many@enda_27;"
      "datum_event1.level_selection@enda_27;datum_event1.vertco_consistency@enda_27;"
      "datum_event1.vertco_type_changed@enda_27;datum_event1.combined_flagging@enda_27;"
      "datum_event1.report_rejected@enda_27;datum_event1.varqc_performed@enda_27;"
      "datum_event1.obserror_increased@enda_27;datum_event1.contam_cld_flag@enda_27;"
      "datum_event1.contam_rain_flag@enda_27;datum_event1.contam_aerosol_flag@enda_27;"
      "datum_event1.bad_emissivity@enda_27;datum_event1.model_cld_flag@enda_27;"
      "datum_event1.contam_trgas_flag@enda_27;datum_event1.land_sensitivity@enda_27;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_27_PREPTAG = T;
    CCMA_nT_enda_27_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_27_PREPTAG;
  return CCMA_T_enda_27_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_27(void *T);
extern int CCMA_Unpack_T_enda_27(void *T);
extern int CCMA_Sel_T_enda_27(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_27);
PrePutTable(CCMA, d, double, enda_27);
PreLoadTable(CCMA, enda_27);
PreStoreTable(CCMA, enda_27);
extern void CCMA_Dim_T_enda_27(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_27(void *T);
extern int CCMA_Sql_T_enda_27(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_27(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_28) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_28" : appearance order#153, hierarchy rank# 177, weight = 358.000153 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_28;

#endif /* defined(IS_a_TABLE_enda_28) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_28)
extern const ODB_Tags *CCMA_Set_T_enda_28_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_28_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_28_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_28_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_28_TAG = 0;
PRIVATE int CCMA_nT_enda_28_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_28_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_28_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_28_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_28"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_28"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_28"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_28"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_28"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_28"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_28"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_28"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_28"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_28"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_28"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_28"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_28"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_28"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_28"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_28"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_28"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_28"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_28"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_28"; T[19].name = s; }
    CCMA_T_enda_28_TAG = T;
    CCMA_nT_enda_28_TAG = ntag;
    CCMA_nT_enda_28_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_28_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_28_MEM;
  return CCMA_T_enda_28_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_28_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_28_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_28;report_status@enda_28;report_event1@enda_28;"
      "obsvalue@enda_28;datum_anflag@enda_28;datum_status@enda_28;"
      "datum_event1@enda_28;biascorr@enda_28;biascorr_fg@enda_28;"
      "an_depar@enda_28;fg_depar@enda_28;qc_pge@enda_28;final_obs_error@enda_28;"
      "obs_error@enda_28;fg_error@enda_28;skintemp_1@enda_28;"
      "skintemp_2@enda_28;skintemp_3@enda_28;skintemp_4@enda_28;"
      "skintemp_5@enda_28;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_28;report_status@enda_28;report_event1@enda_28;"
      "obsvalue@enda_28;datum_anflag@enda_28;datum_status@enda_28;"
      "datum_event1@enda_28;biascorr@enda_28;biascorr_fg@enda_28;"
      "an_depar@enda_28;fg_depar@enda_28;qc_pge@enda_28;final_obs_error@enda_28;"
      "obs_error@enda_28;fg_error@enda_28;skintemp_1@enda_28;"
      "skintemp_2@enda_28;skintemp_3@enda_28;skintemp_4@enda_28;"
      "skintemp_5@enda_28;report_status.active@enda_28;report_status.passive@enda_28;"
      "report_status.rejected@enda_28;report_status.blacklisted@enda_28;"
      "report_status.use_emiskf_only@enda_28;report_event1.no_data@enda_28;"
      "report_event1.all_rejected@enda_28;report_event1.bad_practice@enda_28;"
      "report_event1.rdb_rejected@enda_28;report_event1.redundant@enda_28;"
      "report_event1.stalt_missing@enda_28;report_event1.qc_failed@enda_28;"
      "report_event1.overcast_ir@enda_28;report_event1.thinned@enda_28;"
      "report_event1.latlon_corrected@enda_28;report_event1.stalt_corrected@enda_28;"
      "datum_anflag.final@enda_28;datum_anflag.fg@enda_28;"
      "datum_anflag.depar@enda_28;datum_anflag.varqc@enda_28;"
      "datum_anflag.blacklist@enda_28;datum_anflag.ups@enda_28;"
      "datum_anflag.uvt@enda_28;datum_anflag.uhu@enda_28;"
      "datum_anflag.ut2@enda_28;datum_anflag.uh2@enda_28;"
      "datum_anflag.uv1@enda_28;datum_anflag.urr@enda_28;"
      "datum_anflag.usn@enda_28;datum_anflag.usst@enda_28;"
      "datum_status.active@enda_28;datum_status.passive@enda_28;"
      "datum_status.rejected@enda_28;datum_status.blacklisted@enda_28;"
      "datum_status.use_emiskf_only@enda_28;datum_event1.vertco_missing@enda_28;"
      "datum_event1.obsvalue_missing@enda_28;datum_event1.fg_missing@enda_28;"
      "datum_event1.rdb_rejected@enda_28;datum_event1.assim_cld_flag@enda_28;"
      "datum_event1.bad_practice@enda_28;datum_event1.vertpos_outrange@enda_28;"
      "datum_event1.fg2big@enda_28;datum_event1.depar2big@enda_28;"
      "datum_event1.obs_error2big@enda_28;datum_event1.datum_redundant@enda_28;"
      "datum_event1.level_redundant@enda_28;datum_event1.not_analysis_varno@enda_28;"
      "datum_event1.duplicate@enda_28;datum_event1.levels2many@enda_28;"
      "datum_event1.level_selection@enda_28;datum_event1.vertco_consistency@enda_28;"
      "datum_event1.vertco_type_changed@enda_28;datum_event1.combined_flagging@enda_28;"
      "datum_event1.report_rejected@enda_28;datum_event1.varqc_performed@enda_28;"
      "datum_event1.obserror_increased@enda_28;datum_event1.contam_cld_flag@enda_28;"
      "datum_event1.contam_rain_flag@enda_28;datum_event1.contam_aerosol_flag@enda_28;"
      "datum_event1.bad_emissivity@enda_28;datum_event1.model_cld_flag@enda_28;"
      "datum_event1.contam_trgas_flag@enda_28;datum_event1.land_sensitivity@enda_28;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_28_PREPTAG = T;
    CCMA_nT_enda_28_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_28_PREPTAG;
  return CCMA_T_enda_28_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_28(void *T);
extern int CCMA_Unpack_T_enda_28(void *T);
extern int CCMA_Sel_T_enda_28(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_28);
PrePutTable(CCMA, d, double, enda_28);
PreLoadTable(CCMA, enda_28);
PreStoreTable(CCMA, enda_28);
extern void CCMA_Dim_T_enda_28(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_28(void *T);
extern int CCMA_Sql_T_enda_28(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_28(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_29) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_29" : appearance order#154, hierarchy rank# 178, weight = 358.000154 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_29;

#endif /* defined(IS_a_TABLE_enda_29) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_29)
extern const ODB_Tags *CCMA_Set_T_enda_29_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_29_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_29_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_29_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_29_TAG = 0;
PRIVATE int CCMA_nT_enda_29_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_29_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_29_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_29_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_29"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_29"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_29"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_29"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_29"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_29"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_29"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_29"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_29"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_29"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_29"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_29"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_29"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_29"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_29"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_29"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_29"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_29"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_29"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_29"; T[19].name = s; }
    CCMA_T_enda_29_TAG = T;
    CCMA_nT_enda_29_TAG = ntag;
    CCMA_nT_enda_29_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_29_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_29_MEM;
  return CCMA_T_enda_29_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_29_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_29_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_29;report_status@enda_29;report_event1@enda_29;"
      "obsvalue@enda_29;datum_anflag@enda_29;datum_status@enda_29;"
      "datum_event1@enda_29;biascorr@enda_29;biascorr_fg@enda_29;"
      "an_depar@enda_29;fg_depar@enda_29;qc_pge@enda_29;final_obs_error@enda_29;"
      "obs_error@enda_29;fg_error@enda_29;skintemp_1@enda_29;"
      "skintemp_2@enda_29;skintemp_3@enda_29;skintemp_4@enda_29;"
      "skintemp_5@enda_29;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_29;report_status@enda_29;report_event1@enda_29;"
      "obsvalue@enda_29;datum_anflag@enda_29;datum_status@enda_29;"
      "datum_event1@enda_29;biascorr@enda_29;biascorr_fg@enda_29;"
      "an_depar@enda_29;fg_depar@enda_29;qc_pge@enda_29;final_obs_error@enda_29;"
      "obs_error@enda_29;fg_error@enda_29;skintemp_1@enda_29;"
      "skintemp_2@enda_29;skintemp_3@enda_29;skintemp_4@enda_29;"
      "skintemp_5@enda_29;report_status.active@enda_29;report_status.passive@enda_29;"
      "report_status.rejected@enda_29;report_status.blacklisted@enda_29;"
      "report_status.use_emiskf_only@enda_29;report_event1.no_data@enda_29;"
      "report_event1.all_rejected@enda_29;report_event1.bad_practice@enda_29;"
      "report_event1.rdb_rejected@enda_29;report_event1.redundant@enda_29;"
      "report_event1.stalt_missing@enda_29;report_event1.qc_failed@enda_29;"
      "report_event1.overcast_ir@enda_29;report_event1.thinned@enda_29;"
      "report_event1.latlon_corrected@enda_29;report_event1.stalt_corrected@enda_29;"
      "datum_anflag.final@enda_29;datum_anflag.fg@enda_29;"
      "datum_anflag.depar@enda_29;datum_anflag.varqc@enda_29;"
      "datum_anflag.blacklist@enda_29;datum_anflag.ups@enda_29;"
      "datum_anflag.uvt@enda_29;datum_anflag.uhu@enda_29;"
      "datum_anflag.ut2@enda_29;datum_anflag.uh2@enda_29;"
      "datum_anflag.uv1@enda_29;datum_anflag.urr@enda_29;"
      "datum_anflag.usn@enda_29;datum_anflag.usst@enda_29;"
      "datum_status.active@enda_29;datum_status.passive@enda_29;"
      "datum_status.rejected@enda_29;datum_status.blacklisted@enda_29;"
      "datum_status.use_emiskf_only@enda_29;datum_event1.vertco_missing@enda_29;"
      "datum_event1.obsvalue_missing@enda_29;datum_event1.fg_missing@enda_29;"
      "datum_event1.rdb_rejected@enda_29;datum_event1.assim_cld_flag@enda_29;"
      "datum_event1.bad_practice@enda_29;datum_event1.vertpos_outrange@enda_29;"
      "datum_event1.fg2big@enda_29;datum_event1.depar2big@enda_29;"
      "datum_event1.obs_error2big@enda_29;datum_event1.datum_redundant@enda_29;"
      "datum_event1.level_redundant@enda_29;datum_event1.not_analysis_varno@enda_29;"
      "datum_event1.duplicate@enda_29;datum_event1.levels2many@enda_29;"
      "datum_event1.level_selection@enda_29;datum_event1.vertco_consistency@enda_29;"
      "datum_event1.vertco_type_changed@enda_29;datum_event1.combined_flagging@enda_29;"
      "datum_event1.report_rejected@enda_29;datum_event1.varqc_performed@enda_29;"
      "datum_event1.obserror_increased@enda_29;datum_event1.contam_cld_flag@enda_29;"
      "datum_event1.contam_rain_flag@enda_29;datum_event1.contam_aerosol_flag@enda_29;"
      "datum_event1.bad_emissivity@enda_29;datum_event1.model_cld_flag@enda_29;"
      "datum_event1.contam_trgas_flag@enda_29;datum_event1.land_sensitivity@enda_29;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_29_PREPTAG = T;
    CCMA_nT_enda_29_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_29_PREPTAG;
  return CCMA_T_enda_29_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_29(void *T);
extern int CCMA_Unpack_T_enda_29(void *T);
extern int CCMA_Sel_T_enda_29(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_29);
PrePutTable(CCMA, d, double, enda_29);
PreLoadTable(CCMA, enda_29);
PreStoreTable(CCMA, enda_29);
extern void CCMA_Dim_T_enda_29(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_29(void *T);
extern int CCMA_Sql_T_enda_29(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_29(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_30) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_30" : appearance order#155, hierarchy rank# 179, weight = 358.000155 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_30;

#endif /* defined(IS_a_TABLE_enda_30) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_30)
extern const ODB_Tags *CCMA_Set_T_enda_30_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_30_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_30_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_30_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_30_TAG = 0;
PRIVATE int CCMA_nT_enda_30_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_30_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_30_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_30_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_30"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_30"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_30"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_30"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_30"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_30"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_30"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_30"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_30"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_30"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_30"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_30"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_30"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_30"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_30"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_30"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_30"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_30"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_30"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_30"; T[19].name = s; }
    CCMA_T_enda_30_TAG = T;
    CCMA_nT_enda_30_TAG = ntag;
    CCMA_nT_enda_30_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_30_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_30_MEM;
  return CCMA_T_enda_30_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_30_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_30_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_30;report_status@enda_30;report_event1@enda_30;"
      "obsvalue@enda_30;datum_anflag@enda_30;datum_status@enda_30;"
      "datum_event1@enda_30;biascorr@enda_30;biascorr_fg@enda_30;"
      "an_depar@enda_30;fg_depar@enda_30;qc_pge@enda_30;final_obs_error@enda_30;"
      "obs_error@enda_30;fg_error@enda_30;skintemp_1@enda_30;"
      "skintemp_2@enda_30;skintemp_3@enda_30;skintemp_4@enda_30;"
      "skintemp_5@enda_30;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_30;report_status@enda_30;report_event1@enda_30;"
      "obsvalue@enda_30;datum_anflag@enda_30;datum_status@enda_30;"
      "datum_event1@enda_30;biascorr@enda_30;biascorr_fg@enda_30;"
      "an_depar@enda_30;fg_depar@enda_30;qc_pge@enda_30;final_obs_error@enda_30;"
      "obs_error@enda_30;fg_error@enda_30;skintemp_1@enda_30;"
      "skintemp_2@enda_30;skintemp_3@enda_30;skintemp_4@enda_30;"
      "skintemp_5@enda_30;report_status.active@enda_30;report_status.passive@enda_30;"
      "report_status.rejected@enda_30;report_status.blacklisted@enda_30;"
      "report_status.use_emiskf_only@enda_30;report_event1.no_data@enda_30;"
      "report_event1.all_rejected@enda_30;report_event1.bad_practice@enda_30;"
      "report_event1.rdb_rejected@enda_30;report_event1.redundant@enda_30;"
      "report_event1.stalt_missing@enda_30;report_event1.qc_failed@enda_30;"
      "report_event1.overcast_ir@enda_30;report_event1.thinned@enda_30;"
      "report_event1.latlon_corrected@enda_30;report_event1.stalt_corrected@enda_30;"
      "datum_anflag.final@enda_30;datum_anflag.fg@enda_30;"
      "datum_anflag.depar@enda_30;datum_anflag.varqc@enda_30;"
      "datum_anflag.blacklist@enda_30;datum_anflag.ups@enda_30;"
      "datum_anflag.uvt@enda_30;datum_anflag.uhu@enda_30;"
      "datum_anflag.ut2@enda_30;datum_anflag.uh2@enda_30;"
      "datum_anflag.uv1@enda_30;datum_anflag.urr@enda_30;"
      "datum_anflag.usn@enda_30;datum_anflag.usst@enda_30;"
      "datum_status.active@enda_30;datum_status.passive@enda_30;"
      "datum_status.rejected@enda_30;datum_status.blacklisted@enda_30;"
      "datum_status.use_emiskf_only@enda_30;datum_event1.vertco_missing@enda_30;"
      "datum_event1.obsvalue_missing@enda_30;datum_event1.fg_missing@enda_30;"
      "datum_event1.rdb_rejected@enda_30;datum_event1.assim_cld_flag@enda_30;"
      "datum_event1.bad_practice@enda_30;datum_event1.vertpos_outrange@enda_30;"
      "datum_event1.fg2big@enda_30;datum_event1.depar2big@enda_30;"
      "datum_event1.obs_error2big@enda_30;datum_event1.datum_redundant@enda_30;"
      "datum_event1.level_redundant@enda_30;datum_event1.not_analysis_varno@enda_30;"
      "datum_event1.duplicate@enda_30;datum_event1.levels2many@enda_30;"
      "datum_event1.level_selection@enda_30;datum_event1.vertco_consistency@enda_30;"
      "datum_event1.vertco_type_changed@enda_30;datum_event1.combined_flagging@enda_30;"
      "datum_event1.report_rejected@enda_30;datum_event1.varqc_performed@enda_30;"
      "datum_event1.obserror_increased@enda_30;datum_event1.contam_cld_flag@enda_30;"
      "datum_event1.contam_rain_flag@enda_30;datum_event1.contam_aerosol_flag@enda_30;"
      "datum_event1.bad_emissivity@enda_30;datum_event1.model_cld_flag@enda_30;"
      "datum_event1.contam_trgas_flag@enda_30;datum_event1.land_sensitivity@enda_30;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_30_PREPTAG = T;
    CCMA_nT_enda_30_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_30_PREPTAG;
  return CCMA_T_enda_30_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_30(void *T);
extern int CCMA_Unpack_T_enda_30(void *T);
extern int CCMA_Sel_T_enda_30(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_30);
PrePutTable(CCMA, d, double, enda_30);
PreLoadTable(CCMA, enda_30);
PreStoreTable(CCMA, enda_30);
extern void CCMA_Dim_T_enda_30(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_30(void *T);
extern int CCMA_Sql_T_enda_30(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_30(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_31) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_31" : appearance order#156, hierarchy rank# 180, weight = 358.000156 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_31;

#endif /* defined(IS_a_TABLE_enda_31) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_31)
extern const ODB_Tags *CCMA_Set_T_enda_31_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_31_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_31_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_31_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_31_TAG = 0;
PRIVATE int CCMA_nT_enda_31_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_31_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_31_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_31_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_31"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_31"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_31"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_31"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_31"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_31"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_31"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_31"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_31"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_31"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_31"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_31"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_31"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_31"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_31"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_31"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_31"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_31"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_31"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_31"; T[19].name = s; }
    CCMA_T_enda_31_TAG = T;
    CCMA_nT_enda_31_TAG = ntag;
    CCMA_nT_enda_31_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_31_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_31_MEM;
  return CCMA_T_enda_31_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_31_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_31_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_31;report_status@enda_31;report_event1@enda_31;"
      "obsvalue@enda_31;datum_anflag@enda_31;datum_status@enda_31;"
      "datum_event1@enda_31;biascorr@enda_31;biascorr_fg@enda_31;"
      "an_depar@enda_31;fg_depar@enda_31;qc_pge@enda_31;final_obs_error@enda_31;"
      "obs_error@enda_31;fg_error@enda_31;skintemp_1@enda_31;"
      "skintemp_2@enda_31;skintemp_3@enda_31;skintemp_4@enda_31;"
      "skintemp_5@enda_31;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_31;report_status@enda_31;report_event1@enda_31;"
      "obsvalue@enda_31;datum_anflag@enda_31;datum_status@enda_31;"
      "datum_event1@enda_31;biascorr@enda_31;biascorr_fg@enda_31;"
      "an_depar@enda_31;fg_depar@enda_31;qc_pge@enda_31;final_obs_error@enda_31;"
      "obs_error@enda_31;fg_error@enda_31;skintemp_1@enda_31;"
      "skintemp_2@enda_31;skintemp_3@enda_31;skintemp_4@enda_31;"
      "skintemp_5@enda_31;report_status.active@enda_31;report_status.passive@enda_31;"
      "report_status.rejected@enda_31;report_status.blacklisted@enda_31;"
      "report_status.use_emiskf_only@enda_31;report_event1.no_data@enda_31;"
      "report_event1.all_rejected@enda_31;report_event1.bad_practice@enda_31;"
      "report_event1.rdb_rejected@enda_31;report_event1.redundant@enda_31;"
      "report_event1.stalt_missing@enda_31;report_event1.qc_failed@enda_31;"
      "report_event1.overcast_ir@enda_31;report_event1.thinned@enda_31;"
      "report_event1.latlon_corrected@enda_31;report_event1.stalt_corrected@enda_31;"
      "datum_anflag.final@enda_31;datum_anflag.fg@enda_31;"
      "datum_anflag.depar@enda_31;datum_anflag.varqc@enda_31;"
      "datum_anflag.blacklist@enda_31;datum_anflag.ups@enda_31;"
      "datum_anflag.uvt@enda_31;datum_anflag.uhu@enda_31;"
      "datum_anflag.ut2@enda_31;datum_anflag.uh2@enda_31;"
      "datum_anflag.uv1@enda_31;datum_anflag.urr@enda_31;"
      "datum_anflag.usn@enda_31;datum_anflag.usst@enda_31;"
      "datum_status.active@enda_31;datum_status.passive@enda_31;"
      "datum_status.rejected@enda_31;datum_status.blacklisted@enda_31;"
      "datum_status.use_emiskf_only@enda_31;datum_event1.vertco_missing@enda_31;"
      "datum_event1.obsvalue_missing@enda_31;datum_event1.fg_missing@enda_31;"
      "datum_event1.rdb_rejected@enda_31;datum_event1.assim_cld_flag@enda_31;"
      "datum_event1.bad_practice@enda_31;datum_event1.vertpos_outrange@enda_31;"
      "datum_event1.fg2big@enda_31;datum_event1.depar2big@enda_31;"
      "datum_event1.obs_error2big@enda_31;datum_event1.datum_redundant@enda_31;"
      "datum_event1.level_redundant@enda_31;datum_event1.not_analysis_varno@enda_31;"
      "datum_event1.duplicate@enda_31;datum_event1.levels2many@enda_31;"
      "datum_event1.level_selection@enda_31;datum_event1.vertco_consistency@enda_31;"
      "datum_event1.vertco_type_changed@enda_31;datum_event1.combined_flagging@enda_31;"
      "datum_event1.report_rejected@enda_31;datum_event1.varqc_performed@enda_31;"
      "datum_event1.obserror_increased@enda_31;datum_event1.contam_cld_flag@enda_31;"
      "datum_event1.contam_rain_flag@enda_31;datum_event1.contam_aerosol_flag@enda_31;"
      "datum_event1.bad_emissivity@enda_31;datum_event1.model_cld_flag@enda_31;"
      "datum_event1.contam_trgas_flag@enda_31;datum_event1.land_sensitivity@enda_31;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_31_PREPTAG = T;
    CCMA_nT_enda_31_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_31_PREPTAG;
  return CCMA_T_enda_31_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_31(void *T);
extern int CCMA_Unpack_T_enda_31(void *T);
extern int CCMA_Sel_T_enda_31(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_31);
PrePutTable(CCMA, d, double, enda_31);
PreLoadTable(CCMA, enda_31);
PreStoreTable(CCMA, enda_31);
extern void CCMA_Dim_T_enda_31(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_31(void *T);
extern int CCMA_Sql_T_enda_31(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_31(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_32) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_32" : appearance order#157, hierarchy rank# 181, weight = 358.000157 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_32;

#endif /* defined(IS_a_TABLE_enda_32) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_32)
extern const ODB_Tags *CCMA_Set_T_enda_32_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_32_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_32_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_32_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_32_TAG = 0;
PRIVATE int CCMA_nT_enda_32_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_32_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_32_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_32_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_32"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_32"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_32"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_32"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_32"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_32"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_32"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_32"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_32"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_32"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_32"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_32"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_32"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_32"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_32"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_32"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_32"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_32"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_32"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_32"; T[19].name = s; }
    CCMA_T_enda_32_TAG = T;
    CCMA_nT_enda_32_TAG = ntag;
    CCMA_nT_enda_32_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_32_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_32_MEM;
  return CCMA_T_enda_32_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_32_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_32_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_32;report_status@enda_32;report_event1@enda_32;"
      "obsvalue@enda_32;datum_anflag@enda_32;datum_status@enda_32;"
      "datum_event1@enda_32;biascorr@enda_32;biascorr_fg@enda_32;"
      "an_depar@enda_32;fg_depar@enda_32;qc_pge@enda_32;final_obs_error@enda_32;"
      "obs_error@enda_32;fg_error@enda_32;skintemp_1@enda_32;"
      "skintemp_2@enda_32;skintemp_3@enda_32;skintemp_4@enda_32;"
      "skintemp_5@enda_32;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_32;report_status@enda_32;report_event1@enda_32;"
      "obsvalue@enda_32;datum_anflag@enda_32;datum_status@enda_32;"
      "datum_event1@enda_32;biascorr@enda_32;biascorr_fg@enda_32;"
      "an_depar@enda_32;fg_depar@enda_32;qc_pge@enda_32;final_obs_error@enda_32;"
      "obs_error@enda_32;fg_error@enda_32;skintemp_1@enda_32;"
      "skintemp_2@enda_32;skintemp_3@enda_32;skintemp_4@enda_32;"
      "skintemp_5@enda_32;report_status.active@enda_32;report_status.passive@enda_32;"
      "report_status.rejected@enda_32;report_status.blacklisted@enda_32;"
      "report_status.use_emiskf_only@enda_32;report_event1.no_data@enda_32;"
      "report_event1.all_rejected@enda_32;report_event1.bad_practice@enda_32;"
      "report_event1.rdb_rejected@enda_32;report_event1.redundant@enda_32;"
      "report_event1.stalt_missing@enda_32;report_event1.qc_failed@enda_32;"
      "report_event1.overcast_ir@enda_32;report_event1.thinned@enda_32;"
      "report_event1.latlon_corrected@enda_32;report_event1.stalt_corrected@enda_32;"
      "datum_anflag.final@enda_32;datum_anflag.fg@enda_32;"
      "datum_anflag.depar@enda_32;datum_anflag.varqc@enda_32;"
      "datum_anflag.blacklist@enda_32;datum_anflag.ups@enda_32;"
      "datum_anflag.uvt@enda_32;datum_anflag.uhu@enda_32;"
      "datum_anflag.ut2@enda_32;datum_anflag.uh2@enda_32;"
      "datum_anflag.uv1@enda_32;datum_anflag.urr@enda_32;"
      "datum_anflag.usn@enda_32;datum_anflag.usst@enda_32;"
      "datum_status.active@enda_32;datum_status.passive@enda_32;"
      "datum_status.rejected@enda_32;datum_status.blacklisted@enda_32;"
      "datum_status.use_emiskf_only@enda_32;datum_event1.vertco_missing@enda_32;"
      "datum_event1.obsvalue_missing@enda_32;datum_event1.fg_missing@enda_32;"
      "datum_event1.rdb_rejected@enda_32;datum_event1.assim_cld_flag@enda_32;"
      "datum_event1.bad_practice@enda_32;datum_event1.vertpos_outrange@enda_32;"
      "datum_event1.fg2big@enda_32;datum_event1.depar2big@enda_32;"
      "datum_event1.obs_error2big@enda_32;datum_event1.datum_redundant@enda_32;"
      "datum_event1.level_redundant@enda_32;datum_event1.not_analysis_varno@enda_32;"
      "datum_event1.duplicate@enda_32;datum_event1.levels2many@enda_32;"
      "datum_event1.level_selection@enda_32;datum_event1.vertco_consistency@enda_32;"
      "datum_event1.vertco_type_changed@enda_32;datum_event1.combined_flagging@enda_32;"
      "datum_event1.report_rejected@enda_32;datum_event1.varqc_performed@enda_32;"
      "datum_event1.obserror_increased@enda_32;datum_event1.contam_cld_flag@enda_32;"
      "datum_event1.contam_rain_flag@enda_32;datum_event1.contam_aerosol_flag@enda_32;"
      "datum_event1.bad_emissivity@enda_32;datum_event1.model_cld_flag@enda_32;"
      "datum_event1.contam_trgas_flag@enda_32;datum_event1.land_sensitivity@enda_32;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_32_PREPTAG = T;
    CCMA_nT_enda_32_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_32_PREPTAG;
  return CCMA_T_enda_32_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_32(void *T);
extern int CCMA_Unpack_T_enda_32(void *T);
extern int CCMA_Sel_T_enda_32(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_32);
PrePutTable(CCMA, d, double, enda_32);
PreLoadTable(CCMA, enda_32);
PreStoreTable(CCMA, enda_32);
extern void CCMA_Dim_T_enda_32(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_32(void *T);
extern int CCMA_Sql_T_enda_32(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_32(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_33) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_33" : appearance order#158, hierarchy rank# 182, weight = 358.000158 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_33;

#endif /* defined(IS_a_TABLE_enda_33) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_33)
extern const ODB_Tags *CCMA_Set_T_enda_33_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_33_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_33_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_33_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_33_TAG = 0;
PRIVATE int CCMA_nT_enda_33_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_33_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_33_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_33_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_33"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_33"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_33"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_33"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_33"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_33"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_33"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_33"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_33"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_33"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_33"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_33"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_33"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_33"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_33"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_33"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_33"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_33"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_33"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_33"; T[19].name = s; }
    CCMA_T_enda_33_TAG = T;
    CCMA_nT_enda_33_TAG = ntag;
    CCMA_nT_enda_33_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_33_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_33_MEM;
  return CCMA_T_enda_33_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_33_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_33_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_33;report_status@enda_33;report_event1@enda_33;"
      "obsvalue@enda_33;datum_anflag@enda_33;datum_status@enda_33;"
      "datum_event1@enda_33;biascorr@enda_33;biascorr_fg@enda_33;"
      "an_depar@enda_33;fg_depar@enda_33;qc_pge@enda_33;final_obs_error@enda_33;"
      "obs_error@enda_33;fg_error@enda_33;skintemp_1@enda_33;"
      "skintemp_2@enda_33;skintemp_3@enda_33;skintemp_4@enda_33;"
      "skintemp_5@enda_33;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_33;report_status@enda_33;report_event1@enda_33;"
      "obsvalue@enda_33;datum_anflag@enda_33;datum_status@enda_33;"
      "datum_event1@enda_33;biascorr@enda_33;biascorr_fg@enda_33;"
      "an_depar@enda_33;fg_depar@enda_33;qc_pge@enda_33;final_obs_error@enda_33;"
      "obs_error@enda_33;fg_error@enda_33;skintemp_1@enda_33;"
      "skintemp_2@enda_33;skintemp_3@enda_33;skintemp_4@enda_33;"
      "skintemp_5@enda_33;report_status.active@enda_33;report_status.passive@enda_33;"
      "report_status.rejected@enda_33;report_status.blacklisted@enda_33;"
      "report_status.use_emiskf_only@enda_33;report_event1.no_data@enda_33;"
      "report_event1.all_rejected@enda_33;report_event1.bad_practice@enda_33;"
      "report_event1.rdb_rejected@enda_33;report_event1.redundant@enda_33;"
      "report_event1.stalt_missing@enda_33;report_event1.qc_failed@enda_33;"
      "report_event1.overcast_ir@enda_33;report_event1.thinned@enda_33;"
      "report_event1.latlon_corrected@enda_33;report_event1.stalt_corrected@enda_33;"
      "datum_anflag.final@enda_33;datum_anflag.fg@enda_33;"
      "datum_anflag.depar@enda_33;datum_anflag.varqc@enda_33;"
      "datum_anflag.blacklist@enda_33;datum_anflag.ups@enda_33;"
      "datum_anflag.uvt@enda_33;datum_anflag.uhu@enda_33;"
      "datum_anflag.ut2@enda_33;datum_anflag.uh2@enda_33;"
      "datum_anflag.uv1@enda_33;datum_anflag.urr@enda_33;"
      "datum_anflag.usn@enda_33;datum_anflag.usst@enda_33;"
      "datum_status.active@enda_33;datum_status.passive@enda_33;"
      "datum_status.rejected@enda_33;datum_status.blacklisted@enda_33;"
      "datum_status.use_emiskf_only@enda_33;datum_event1.vertco_missing@enda_33;"
      "datum_event1.obsvalue_missing@enda_33;datum_event1.fg_missing@enda_33;"
      "datum_event1.rdb_rejected@enda_33;datum_event1.assim_cld_flag@enda_33;"
      "datum_event1.bad_practice@enda_33;datum_event1.vertpos_outrange@enda_33;"
      "datum_event1.fg2big@enda_33;datum_event1.depar2big@enda_33;"
      "datum_event1.obs_error2big@enda_33;datum_event1.datum_redundant@enda_33;"
      "datum_event1.level_redundant@enda_33;datum_event1.not_analysis_varno@enda_33;"
      "datum_event1.duplicate@enda_33;datum_event1.levels2many@enda_33;"
      "datum_event1.level_selection@enda_33;datum_event1.vertco_consistency@enda_33;"
      "datum_event1.vertco_type_changed@enda_33;datum_event1.combined_flagging@enda_33;"
      "datum_event1.report_rejected@enda_33;datum_event1.varqc_performed@enda_33;"
      "datum_event1.obserror_increased@enda_33;datum_event1.contam_cld_flag@enda_33;"
      "datum_event1.contam_rain_flag@enda_33;datum_event1.contam_aerosol_flag@enda_33;"
      "datum_event1.bad_emissivity@enda_33;datum_event1.model_cld_flag@enda_33;"
      "datum_event1.contam_trgas_flag@enda_33;datum_event1.land_sensitivity@enda_33;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_33_PREPTAG = T;
    CCMA_nT_enda_33_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_33_PREPTAG;
  return CCMA_T_enda_33_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_33(void *T);
extern int CCMA_Unpack_T_enda_33(void *T);
extern int CCMA_Sel_T_enda_33(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_33);
PrePutTable(CCMA, d, double, enda_33);
PreLoadTable(CCMA, enda_33);
PreStoreTable(CCMA, enda_33);
extern void CCMA_Dim_T_enda_33(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_33(void *T);
extern int CCMA_Sql_T_enda_33(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_33(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_34) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_34" : appearance order#159, hierarchy rank# 183, weight = 358.000159 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_34;

#endif /* defined(IS_a_TABLE_enda_34) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_34)
extern const ODB_Tags *CCMA_Set_T_enda_34_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_34_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_34_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_34_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_34_TAG = 0;
PRIVATE int CCMA_nT_enda_34_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_34_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_34_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_34_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_34"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_34"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_34"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_34"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_34"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_34"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_34"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_34"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_34"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_34"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_34"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_34"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_34"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_34"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_34"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_34"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_34"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_34"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_34"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_34"; T[19].name = s; }
    CCMA_T_enda_34_TAG = T;
    CCMA_nT_enda_34_TAG = ntag;
    CCMA_nT_enda_34_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_34_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_34_MEM;
  return CCMA_T_enda_34_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_34_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_34_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_34;report_status@enda_34;report_event1@enda_34;"
      "obsvalue@enda_34;datum_anflag@enda_34;datum_status@enda_34;"
      "datum_event1@enda_34;biascorr@enda_34;biascorr_fg@enda_34;"
      "an_depar@enda_34;fg_depar@enda_34;qc_pge@enda_34;final_obs_error@enda_34;"
      "obs_error@enda_34;fg_error@enda_34;skintemp_1@enda_34;"
      "skintemp_2@enda_34;skintemp_3@enda_34;skintemp_4@enda_34;"
      "skintemp_5@enda_34;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_34;report_status@enda_34;report_event1@enda_34;"
      "obsvalue@enda_34;datum_anflag@enda_34;datum_status@enda_34;"
      "datum_event1@enda_34;biascorr@enda_34;biascorr_fg@enda_34;"
      "an_depar@enda_34;fg_depar@enda_34;qc_pge@enda_34;final_obs_error@enda_34;"
      "obs_error@enda_34;fg_error@enda_34;skintemp_1@enda_34;"
      "skintemp_2@enda_34;skintemp_3@enda_34;skintemp_4@enda_34;"
      "skintemp_5@enda_34;report_status.active@enda_34;report_status.passive@enda_34;"
      "report_status.rejected@enda_34;report_status.blacklisted@enda_34;"
      "report_status.use_emiskf_only@enda_34;report_event1.no_data@enda_34;"
      "report_event1.all_rejected@enda_34;report_event1.bad_practice@enda_34;"
      "report_event1.rdb_rejected@enda_34;report_event1.redundant@enda_34;"
      "report_event1.stalt_missing@enda_34;report_event1.qc_failed@enda_34;"
      "report_event1.overcast_ir@enda_34;report_event1.thinned@enda_34;"
      "report_event1.latlon_corrected@enda_34;report_event1.stalt_corrected@enda_34;"
      "datum_anflag.final@enda_34;datum_anflag.fg@enda_34;"
      "datum_anflag.depar@enda_34;datum_anflag.varqc@enda_34;"
      "datum_anflag.blacklist@enda_34;datum_anflag.ups@enda_34;"
      "datum_anflag.uvt@enda_34;datum_anflag.uhu@enda_34;"
      "datum_anflag.ut2@enda_34;datum_anflag.uh2@enda_34;"
      "datum_anflag.uv1@enda_34;datum_anflag.urr@enda_34;"
      "datum_anflag.usn@enda_34;datum_anflag.usst@enda_34;"
      "datum_status.active@enda_34;datum_status.passive@enda_34;"
      "datum_status.rejected@enda_34;datum_status.blacklisted@enda_34;"
      "datum_status.use_emiskf_only@enda_34;datum_event1.vertco_missing@enda_34;"
      "datum_event1.obsvalue_missing@enda_34;datum_event1.fg_missing@enda_34;"
      "datum_event1.rdb_rejected@enda_34;datum_event1.assim_cld_flag@enda_34;"
      "datum_event1.bad_practice@enda_34;datum_event1.vertpos_outrange@enda_34;"
      "datum_event1.fg2big@enda_34;datum_event1.depar2big@enda_34;"
      "datum_event1.obs_error2big@enda_34;datum_event1.datum_redundant@enda_34;"
      "datum_event1.level_redundant@enda_34;datum_event1.not_analysis_varno@enda_34;"
      "datum_event1.duplicate@enda_34;datum_event1.levels2many@enda_34;"
      "datum_event1.level_selection@enda_34;datum_event1.vertco_consistency@enda_34;"
      "datum_event1.vertco_type_changed@enda_34;datum_event1.combined_flagging@enda_34;"
      "datum_event1.report_rejected@enda_34;datum_event1.varqc_performed@enda_34;"
      "datum_event1.obserror_increased@enda_34;datum_event1.contam_cld_flag@enda_34;"
      "datum_event1.contam_rain_flag@enda_34;datum_event1.contam_aerosol_flag@enda_34;"
      "datum_event1.bad_emissivity@enda_34;datum_event1.model_cld_flag@enda_34;"
      "datum_event1.contam_trgas_flag@enda_34;datum_event1.land_sensitivity@enda_34;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_34_PREPTAG = T;
    CCMA_nT_enda_34_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_34_PREPTAG;
  return CCMA_T_enda_34_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_34(void *T);
extern int CCMA_Unpack_T_enda_34(void *T);
extern int CCMA_Sel_T_enda_34(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_34);
PrePutTable(CCMA, d, double, enda_34);
PreLoadTable(CCMA, enda_34);
PreStoreTable(CCMA, enda_34);
extern void CCMA_Dim_T_enda_34(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_34(void *T);
extern int CCMA_Sql_T_enda_34(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_34(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_35) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_35" : appearance order#160, hierarchy rank# 184, weight = 358.000160 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_35;

#endif /* defined(IS_a_TABLE_enda_35) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_35)
extern const ODB_Tags *CCMA_Set_T_enda_35_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_35_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_35_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_35_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_35_TAG = 0;
PRIVATE int CCMA_nT_enda_35_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_35_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_35_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_35_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_35"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_35"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_35"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_35"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_35"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_35"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_35"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_35"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_35"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_35"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_35"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_35"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_35"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_35"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_35"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_35"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_35"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_35"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_35"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_35"; T[19].name = s; }
    CCMA_T_enda_35_TAG = T;
    CCMA_nT_enda_35_TAG = ntag;
    CCMA_nT_enda_35_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_35_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_35_MEM;
  return CCMA_T_enda_35_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_35_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_35_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_35;report_status@enda_35;report_event1@enda_35;"
      "obsvalue@enda_35;datum_anflag@enda_35;datum_status@enda_35;"
      "datum_event1@enda_35;biascorr@enda_35;biascorr_fg@enda_35;"
      "an_depar@enda_35;fg_depar@enda_35;qc_pge@enda_35;final_obs_error@enda_35;"
      "obs_error@enda_35;fg_error@enda_35;skintemp_1@enda_35;"
      "skintemp_2@enda_35;skintemp_3@enda_35;skintemp_4@enda_35;"
      "skintemp_5@enda_35;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_35;report_status@enda_35;report_event1@enda_35;"
      "obsvalue@enda_35;datum_anflag@enda_35;datum_status@enda_35;"
      "datum_event1@enda_35;biascorr@enda_35;biascorr_fg@enda_35;"
      "an_depar@enda_35;fg_depar@enda_35;qc_pge@enda_35;final_obs_error@enda_35;"
      "obs_error@enda_35;fg_error@enda_35;skintemp_1@enda_35;"
      "skintemp_2@enda_35;skintemp_3@enda_35;skintemp_4@enda_35;"
      "skintemp_5@enda_35;report_status.active@enda_35;report_status.passive@enda_35;"
      "report_status.rejected@enda_35;report_status.blacklisted@enda_35;"
      "report_status.use_emiskf_only@enda_35;report_event1.no_data@enda_35;"
      "report_event1.all_rejected@enda_35;report_event1.bad_practice@enda_35;"
      "report_event1.rdb_rejected@enda_35;report_event1.redundant@enda_35;"
      "report_event1.stalt_missing@enda_35;report_event1.qc_failed@enda_35;"
      "report_event1.overcast_ir@enda_35;report_event1.thinned@enda_35;"
      "report_event1.latlon_corrected@enda_35;report_event1.stalt_corrected@enda_35;"
      "datum_anflag.final@enda_35;datum_anflag.fg@enda_35;"
      "datum_anflag.depar@enda_35;datum_anflag.varqc@enda_35;"
      "datum_anflag.blacklist@enda_35;datum_anflag.ups@enda_35;"
      "datum_anflag.uvt@enda_35;datum_anflag.uhu@enda_35;"
      "datum_anflag.ut2@enda_35;datum_anflag.uh2@enda_35;"
      "datum_anflag.uv1@enda_35;datum_anflag.urr@enda_35;"
      "datum_anflag.usn@enda_35;datum_anflag.usst@enda_35;"
      "datum_status.active@enda_35;datum_status.passive@enda_35;"
      "datum_status.rejected@enda_35;datum_status.blacklisted@enda_35;"
      "datum_status.use_emiskf_only@enda_35;datum_event1.vertco_missing@enda_35;"
      "datum_event1.obsvalue_missing@enda_35;datum_event1.fg_missing@enda_35;"
      "datum_event1.rdb_rejected@enda_35;datum_event1.assim_cld_flag@enda_35;"
      "datum_event1.bad_practice@enda_35;datum_event1.vertpos_outrange@enda_35;"
      "datum_event1.fg2big@enda_35;datum_event1.depar2big@enda_35;"
      "datum_event1.obs_error2big@enda_35;datum_event1.datum_redundant@enda_35;"
      "datum_event1.level_redundant@enda_35;datum_event1.not_analysis_varno@enda_35;"
      "datum_event1.duplicate@enda_35;datum_event1.levels2many@enda_35;"
      "datum_event1.level_selection@enda_35;datum_event1.vertco_consistency@enda_35;"
      "datum_event1.vertco_type_changed@enda_35;datum_event1.combined_flagging@enda_35;"
      "datum_event1.report_rejected@enda_35;datum_event1.varqc_performed@enda_35;"
      "datum_event1.obserror_increased@enda_35;datum_event1.contam_cld_flag@enda_35;"
      "datum_event1.contam_rain_flag@enda_35;datum_event1.contam_aerosol_flag@enda_35;"
      "datum_event1.bad_emissivity@enda_35;datum_event1.model_cld_flag@enda_35;"
      "datum_event1.contam_trgas_flag@enda_35;datum_event1.land_sensitivity@enda_35;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_35_PREPTAG = T;
    CCMA_nT_enda_35_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_35_PREPTAG;
  return CCMA_T_enda_35_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_35(void *T);
extern int CCMA_Unpack_T_enda_35(void *T);
extern int CCMA_Sel_T_enda_35(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_35);
PrePutTable(CCMA, d, double, enda_35);
PreLoadTable(CCMA, enda_35);
PreStoreTable(CCMA, enda_35);
extern void CCMA_Dim_T_enda_35(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_35(void *T);
extern int CCMA_Sql_T_enda_35(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_35(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_36) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_36" : appearance order#161, hierarchy rank# 185, weight = 358.000161 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_36;

#endif /* defined(IS_a_TABLE_enda_36) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_36)
extern const ODB_Tags *CCMA_Set_T_enda_36_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_36_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_36_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_36_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_36_TAG = 0;
PRIVATE int CCMA_nT_enda_36_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_36_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_36_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_36_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_36"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_36"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_36"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_36"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_36"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_36"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_36"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_36"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_36"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_36"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_36"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_36"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_36"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_36"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_36"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_36"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_36"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_36"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_36"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_36"; T[19].name = s; }
    CCMA_T_enda_36_TAG = T;
    CCMA_nT_enda_36_TAG = ntag;
    CCMA_nT_enda_36_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_36_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_36_MEM;
  return CCMA_T_enda_36_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_36_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_36_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_36;report_status@enda_36;report_event1@enda_36;"
      "obsvalue@enda_36;datum_anflag@enda_36;datum_status@enda_36;"
      "datum_event1@enda_36;biascorr@enda_36;biascorr_fg@enda_36;"
      "an_depar@enda_36;fg_depar@enda_36;qc_pge@enda_36;final_obs_error@enda_36;"
      "obs_error@enda_36;fg_error@enda_36;skintemp_1@enda_36;"
      "skintemp_2@enda_36;skintemp_3@enda_36;skintemp_4@enda_36;"
      "skintemp_5@enda_36;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_36;report_status@enda_36;report_event1@enda_36;"
      "obsvalue@enda_36;datum_anflag@enda_36;datum_status@enda_36;"
      "datum_event1@enda_36;biascorr@enda_36;biascorr_fg@enda_36;"
      "an_depar@enda_36;fg_depar@enda_36;qc_pge@enda_36;final_obs_error@enda_36;"
      "obs_error@enda_36;fg_error@enda_36;skintemp_1@enda_36;"
      "skintemp_2@enda_36;skintemp_3@enda_36;skintemp_4@enda_36;"
      "skintemp_5@enda_36;report_status.active@enda_36;report_status.passive@enda_36;"
      "report_status.rejected@enda_36;report_status.blacklisted@enda_36;"
      "report_status.use_emiskf_only@enda_36;report_event1.no_data@enda_36;"
      "report_event1.all_rejected@enda_36;report_event1.bad_practice@enda_36;"
      "report_event1.rdb_rejected@enda_36;report_event1.redundant@enda_36;"
      "report_event1.stalt_missing@enda_36;report_event1.qc_failed@enda_36;"
      "report_event1.overcast_ir@enda_36;report_event1.thinned@enda_36;"
      "report_event1.latlon_corrected@enda_36;report_event1.stalt_corrected@enda_36;"
      "datum_anflag.final@enda_36;datum_anflag.fg@enda_36;"
      "datum_anflag.depar@enda_36;datum_anflag.varqc@enda_36;"
      "datum_anflag.blacklist@enda_36;datum_anflag.ups@enda_36;"
      "datum_anflag.uvt@enda_36;datum_anflag.uhu@enda_36;"
      "datum_anflag.ut2@enda_36;datum_anflag.uh2@enda_36;"
      "datum_anflag.uv1@enda_36;datum_anflag.urr@enda_36;"
      "datum_anflag.usn@enda_36;datum_anflag.usst@enda_36;"
      "datum_status.active@enda_36;datum_status.passive@enda_36;"
      "datum_status.rejected@enda_36;datum_status.blacklisted@enda_36;"
      "datum_status.use_emiskf_only@enda_36;datum_event1.vertco_missing@enda_36;"
      "datum_event1.obsvalue_missing@enda_36;datum_event1.fg_missing@enda_36;"
      "datum_event1.rdb_rejected@enda_36;datum_event1.assim_cld_flag@enda_36;"
      "datum_event1.bad_practice@enda_36;datum_event1.vertpos_outrange@enda_36;"
      "datum_event1.fg2big@enda_36;datum_event1.depar2big@enda_36;"
      "datum_event1.obs_error2big@enda_36;datum_event1.datum_redundant@enda_36;"
      "datum_event1.level_redundant@enda_36;datum_event1.not_analysis_varno@enda_36;"
      "datum_event1.duplicate@enda_36;datum_event1.levels2many@enda_36;"
      "datum_event1.level_selection@enda_36;datum_event1.vertco_consistency@enda_36;"
      "datum_event1.vertco_type_changed@enda_36;datum_event1.combined_flagging@enda_36;"
      "datum_event1.report_rejected@enda_36;datum_event1.varqc_performed@enda_36;"
      "datum_event1.obserror_increased@enda_36;datum_event1.contam_cld_flag@enda_36;"
      "datum_event1.contam_rain_flag@enda_36;datum_event1.contam_aerosol_flag@enda_36;"
      "datum_event1.bad_emissivity@enda_36;datum_event1.model_cld_flag@enda_36;"
      "datum_event1.contam_trgas_flag@enda_36;datum_event1.land_sensitivity@enda_36;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_36_PREPTAG = T;
    CCMA_nT_enda_36_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_36_PREPTAG;
  return CCMA_T_enda_36_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_36(void *T);
extern int CCMA_Unpack_T_enda_36(void *T);
extern int CCMA_Sel_T_enda_36(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_36);
PrePutTable(CCMA, d, double, enda_36);
PreLoadTable(CCMA, enda_36);
PreStoreTable(CCMA, enda_36);
extern void CCMA_Dim_T_enda_36(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_36(void *T);
extern int CCMA_Sql_T_enda_36(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_36(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_37) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_37" : appearance order#162, hierarchy rank# 186, weight = 358.000162 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_37;

#endif /* defined(IS_a_TABLE_enda_37) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_37)
extern const ODB_Tags *CCMA_Set_T_enda_37_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_37_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_37_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_37_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_37_TAG = 0;
PRIVATE int CCMA_nT_enda_37_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_37_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_37_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_37_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_37"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_37"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_37"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_37"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_37"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_37"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_37"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_37"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_37"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_37"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_37"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_37"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_37"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_37"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_37"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_37"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_37"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_37"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_37"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_37"; T[19].name = s; }
    CCMA_T_enda_37_TAG = T;
    CCMA_nT_enda_37_TAG = ntag;
    CCMA_nT_enda_37_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_37_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_37_MEM;
  return CCMA_T_enda_37_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_37_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_37_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_37;report_status@enda_37;report_event1@enda_37;"
      "obsvalue@enda_37;datum_anflag@enda_37;datum_status@enda_37;"
      "datum_event1@enda_37;biascorr@enda_37;biascorr_fg@enda_37;"
      "an_depar@enda_37;fg_depar@enda_37;qc_pge@enda_37;final_obs_error@enda_37;"
      "obs_error@enda_37;fg_error@enda_37;skintemp_1@enda_37;"
      "skintemp_2@enda_37;skintemp_3@enda_37;skintemp_4@enda_37;"
      "skintemp_5@enda_37;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_37;report_status@enda_37;report_event1@enda_37;"
      "obsvalue@enda_37;datum_anflag@enda_37;datum_status@enda_37;"
      "datum_event1@enda_37;biascorr@enda_37;biascorr_fg@enda_37;"
      "an_depar@enda_37;fg_depar@enda_37;qc_pge@enda_37;final_obs_error@enda_37;"
      "obs_error@enda_37;fg_error@enda_37;skintemp_1@enda_37;"
      "skintemp_2@enda_37;skintemp_3@enda_37;skintemp_4@enda_37;"
      "skintemp_5@enda_37;report_status.active@enda_37;report_status.passive@enda_37;"
      "report_status.rejected@enda_37;report_status.blacklisted@enda_37;"
      "report_status.use_emiskf_only@enda_37;report_event1.no_data@enda_37;"
      "report_event1.all_rejected@enda_37;report_event1.bad_practice@enda_37;"
      "report_event1.rdb_rejected@enda_37;report_event1.redundant@enda_37;"
      "report_event1.stalt_missing@enda_37;report_event1.qc_failed@enda_37;"
      "report_event1.overcast_ir@enda_37;report_event1.thinned@enda_37;"
      "report_event1.latlon_corrected@enda_37;report_event1.stalt_corrected@enda_37;"
      "datum_anflag.final@enda_37;datum_anflag.fg@enda_37;"
      "datum_anflag.depar@enda_37;datum_anflag.varqc@enda_37;"
      "datum_anflag.blacklist@enda_37;datum_anflag.ups@enda_37;"
      "datum_anflag.uvt@enda_37;datum_anflag.uhu@enda_37;"
      "datum_anflag.ut2@enda_37;datum_anflag.uh2@enda_37;"
      "datum_anflag.uv1@enda_37;datum_anflag.urr@enda_37;"
      "datum_anflag.usn@enda_37;datum_anflag.usst@enda_37;"
      "datum_status.active@enda_37;datum_status.passive@enda_37;"
      "datum_status.rejected@enda_37;datum_status.blacklisted@enda_37;"
      "datum_status.use_emiskf_only@enda_37;datum_event1.vertco_missing@enda_37;"
      "datum_event1.obsvalue_missing@enda_37;datum_event1.fg_missing@enda_37;"
      "datum_event1.rdb_rejected@enda_37;datum_event1.assim_cld_flag@enda_37;"
      "datum_event1.bad_practice@enda_37;datum_event1.vertpos_outrange@enda_37;"
      "datum_event1.fg2big@enda_37;datum_event1.depar2big@enda_37;"
      "datum_event1.obs_error2big@enda_37;datum_event1.datum_redundant@enda_37;"
      "datum_event1.level_redundant@enda_37;datum_event1.not_analysis_varno@enda_37;"
      "datum_event1.duplicate@enda_37;datum_event1.levels2many@enda_37;"
      "datum_event1.level_selection@enda_37;datum_event1.vertco_consistency@enda_37;"
      "datum_event1.vertco_type_changed@enda_37;datum_event1.combined_flagging@enda_37;"
      "datum_event1.report_rejected@enda_37;datum_event1.varqc_performed@enda_37;"
      "datum_event1.obserror_increased@enda_37;datum_event1.contam_cld_flag@enda_37;"
      "datum_event1.contam_rain_flag@enda_37;datum_event1.contam_aerosol_flag@enda_37;"
      "datum_event1.bad_emissivity@enda_37;datum_event1.model_cld_flag@enda_37;"
      "datum_event1.contam_trgas_flag@enda_37;datum_event1.land_sensitivity@enda_37;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_37_PREPTAG = T;
    CCMA_nT_enda_37_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_37_PREPTAG;
  return CCMA_T_enda_37_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_37(void *T);
extern int CCMA_Unpack_T_enda_37(void *T);
extern int CCMA_Sel_T_enda_37(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_37);
PrePutTable(CCMA, d, double, enda_37);
PreLoadTable(CCMA, enda_37);
PreStoreTable(CCMA, enda_37);
extern void CCMA_Dim_T_enda_37(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_37(void *T);
extern int CCMA_Sql_T_enda_37(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_37(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_38) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_38" : appearance order#163, hierarchy rank# 187, weight = 358.000163 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_38;

#endif /* defined(IS_a_TABLE_enda_38) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_38)
extern const ODB_Tags *CCMA_Set_T_enda_38_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_38_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_38_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_38_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_38_TAG = 0;
PRIVATE int CCMA_nT_enda_38_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_38_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_38_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_38_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_38"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_38"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_38"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_38"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_38"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_38"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_38"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_38"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_38"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_38"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_38"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_38"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_38"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_38"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_38"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_38"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_38"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_38"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_38"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_38"; T[19].name = s; }
    CCMA_T_enda_38_TAG = T;
    CCMA_nT_enda_38_TAG = ntag;
    CCMA_nT_enda_38_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_38_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_38_MEM;
  return CCMA_T_enda_38_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_38_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_38_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_38;report_status@enda_38;report_event1@enda_38;"
      "obsvalue@enda_38;datum_anflag@enda_38;datum_status@enda_38;"
      "datum_event1@enda_38;biascorr@enda_38;biascorr_fg@enda_38;"
      "an_depar@enda_38;fg_depar@enda_38;qc_pge@enda_38;final_obs_error@enda_38;"
      "obs_error@enda_38;fg_error@enda_38;skintemp_1@enda_38;"
      "skintemp_2@enda_38;skintemp_3@enda_38;skintemp_4@enda_38;"
      "skintemp_5@enda_38;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_38;report_status@enda_38;report_event1@enda_38;"
      "obsvalue@enda_38;datum_anflag@enda_38;datum_status@enda_38;"
      "datum_event1@enda_38;biascorr@enda_38;biascorr_fg@enda_38;"
      "an_depar@enda_38;fg_depar@enda_38;qc_pge@enda_38;final_obs_error@enda_38;"
      "obs_error@enda_38;fg_error@enda_38;skintemp_1@enda_38;"
      "skintemp_2@enda_38;skintemp_3@enda_38;skintemp_4@enda_38;"
      "skintemp_5@enda_38;report_status.active@enda_38;report_status.passive@enda_38;"
      "report_status.rejected@enda_38;report_status.blacklisted@enda_38;"
      "report_status.use_emiskf_only@enda_38;report_event1.no_data@enda_38;"
      "report_event1.all_rejected@enda_38;report_event1.bad_practice@enda_38;"
      "report_event1.rdb_rejected@enda_38;report_event1.redundant@enda_38;"
      "report_event1.stalt_missing@enda_38;report_event1.qc_failed@enda_38;"
      "report_event1.overcast_ir@enda_38;report_event1.thinned@enda_38;"
      "report_event1.latlon_corrected@enda_38;report_event1.stalt_corrected@enda_38;"
      "datum_anflag.final@enda_38;datum_anflag.fg@enda_38;"
      "datum_anflag.depar@enda_38;datum_anflag.varqc@enda_38;"
      "datum_anflag.blacklist@enda_38;datum_anflag.ups@enda_38;"
      "datum_anflag.uvt@enda_38;datum_anflag.uhu@enda_38;"
      "datum_anflag.ut2@enda_38;datum_anflag.uh2@enda_38;"
      "datum_anflag.uv1@enda_38;datum_anflag.urr@enda_38;"
      "datum_anflag.usn@enda_38;datum_anflag.usst@enda_38;"
      "datum_status.active@enda_38;datum_status.passive@enda_38;"
      "datum_status.rejected@enda_38;datum_status.blacklisted@enda_38;"
      "datum_status.use_emiskf_only@enda_38;datum_event1.vertco_missing@enda_38;"
      "datum_event1.obsvalue_missing@enda_38;datum_event1.fg_missing@enda_38;"
      "datum_event1.rdb_rejected@enda_38;datum_event1.assim_cld_flag@enda_38;"
      "datum_event1.bad_practice@enda_38;datum_event1.vertpos_outrange@enda_38;"
      "datum_event1.fg2big@enda_38;datum_event1.depar2big@enda_38;"
      "datum_event1.obs_error2big@enda_38;datum_event1.datum_redundant@enda_38;"
      "datum_event1.level_redundant@enda_38;datum_event1.not_analysis_varno@enda_38;"
      "datum_event1.duplicate@enda_38;datum_event1.levels2many@enda_38;"
      "datum_event1.level_selection@enda_38;datum_event1.vertco_consistency@enda_38;"
      "datum_event1.vertco_type_changed@enda_38;datum_event1.combined_flagging@enda_38;"
      "datum_event1.report_rejected@enda_38;datum_event1.varqc_performed@enda_38;"
      "datum_event1.obserror_increased@enda_38;datum_event1.contam_cld_flag@enda_38;"
      "datum_event1.contam_rain_flag@enda_38;datum_event1.contam_aerosol_flag@enda_38;"
      "datum_event1.bad_emissivity@enda_38;datum_event1.model_cld_flag@enda_38;"
      "datum_event1.contam_trgas_flag@enda_38;datum_event1.land_sensitivity@enda_38;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_38_PREPTAG = T;
    CCMA_nT_enda_38_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_38_PREPTAG;
  return CCMA_T_enda_38_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_38(void *T);
extern int CCMA_Unpack_T_enda_38(void *T);
extern int CCMA_Sel_T_enda_38(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_38);
PrePutTable(CCMA, d, double, enda_38);
PreLoadTable(CCMA, enda_38);
PreStoreTable(CCMA, enda_38);
extern void CCMA_Dim_T_enda_38(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_38(void *T);
extern int CCMA_Sql_T_enda_38(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_38(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_39) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_39" : appearance order#164, hierarchy rank# 188, weight = 358.000164 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_39;

#endif /* defined(IS_a_TABLE_enda_39) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_39)
extern const ODB_Tags *CCMA_Set_T_enda_39_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_39_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_39_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_39_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_39_TAG = 0;
PRIVATE int CCMA_nT_enda_39_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_39_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_39_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_39_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_39"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_39"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_39"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_39"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_39"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_39"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_39"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_39"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_39"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_39"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_39"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_39"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_39"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_39"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_39"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_39"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_39"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_39"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_39"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_39"; T[19].name = s; }
    CCMA_T_enda_39_TAG = T;
    CCMA_nT_enda_39_TAG = ntag;
    CCMA_nT_enda_39_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_39_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_39_MEM;
  return CCMA_T_enda_39_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_39_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_39_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_39;report_status@enda_39;report_event1@enda_39;"
      "obsvalue@enda_39;datum_anflag@enda_39;datum_status@enda_39;"
      "datum_event1@enda_39;biascorr@enda_39;biascorr_fg@enda_39;"
      "an_depar@enda_39;fg_depar@enda_39;qc_pge@enda_39;final_obs_error@enda_39;"
      "obs_error@enda_39;fg_error@enda_39;skintemp_1@enda_39;"
      "skintemp_2@enda_39;skintemp_3@enda_39;skintemp_4@enda_39;"
      "skintemp_5@enda_39;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_39;report_status@enda_39;report_event1@enda_39;"
      "obsvalue@enda_39;datum_anflag@enda_39;datum_status@enda_39;"
      "datum_event1@enda_39;biascorr@enda_39;biascorr_fg@enda_39;"
      "an_depar@enda_39;fg_depar@enda_39;qc_pge@enda_39;final_obs_error@enda_39;"
      "obs_error@enda_39;fg_error@enda_39;skintemp_1@enda_39;"
      "skintemp_2@enda_39;skintemp_3@enda_39;skintemp_4@enda_39;"
      "skintemp_5@enda_39;report_status.active@enda_39;report_status.passive@enda_39;"
      "report_status.rejected@enda_39;report_status.blacklisted@enda_39;"
      "report_status.use_emiskf_only@enda_39;report_event1.no_data@enda_39;"
      "report_event1.all_rejected@enda_39;report_event1.bad_practice@enda_39;"
      "report_event1.rdb_rejected@enda_39;report_event1.redundant@enda_39;"
      "report_event1.stalt_missing@enda_39;report_event1.qc_failed@enda_39;"
      "report_event1.overcast_ir@enda_39;report_event1.thinned@enda_39;"
      "report_event1.latlon_corrected@enda_39;report_event1.stalt_corrected@enda_39;"
      "datum_anflag.final@enda_39;datum_anflag.fg@enda_39;"
      "datum_anflag.depar@enda_39;datum_anflag.varqc@enda_39;"
      "datum_anflag.blacklist@enda_39;datum_anflag.ups@enda_39;"
      "datum_anflag.uvt@enda_39;datum_anflag.uhu@enda_39;"
      "datum_anflag.ut2@enda_39;datum_anflag.uh2@enda_39;"
      "datum_anflag.uv1@enda_39;datum_anflag.urr@enda_39;"
      "datum_anflag.usn@enda_39;datum_anflag.usst@enda_39;"
      "datum_status.active@enda_39;datum_status.passive@enda_39;"
      "datum_status.rejected@enda_39;datum_status.blacklisted@enda_39;"
      "datum_status.use_emiskf_only@enda_39;datum_event1.vertco_missing@enda_39;"
      "datum_event1.obsvalue_missing@enda_39;datum_event1.fg_missing@enda_39;"
      "datum_event1.rdb_rejected@enda_39;datum_event1.assim_cld_flag@enda_39;"
      "datum_event1.bad_practice@enda_39;datum_event1.vertpos_outrange@enda_39;"
      "datum_event1.fg2big@enda_39;datum_event1.depar2big@enda_39;"
      "datum_event1.obs_error2big@enda_39;datum_event1.datum_redundant@enda_39;"
      "datum_event1.level_redundant@enda_39;datum_event1.not_analysis_varno@enda_39;"
      "datum_event1.duplicate@enda_39;datum_event1.levels2many@enda_39;"
      "datum_event1.level_selection@enda_39;datum_event1.vertco_consistency@enda_39;"
      "datum_event1.vertco_type_changed@enda_39;datum_event1.combined_flagging@enda_39;"
      "datum_event1.report_rejected@enda_39;datum_event1.varqc_performed@enda_39;"
      "datum_event1.obserror_increased@enda_39;datum_event1.contam_cld_flag@enda_39;"
      "datum_event1.contam_rain_flag@enda_39;datum_event1.contam_aerosol_flag@enda_39;"
      "datum_event1.bad_emissivity@enda_39;datum_event1.model_cld_flag@enda_39;"
      "datum_event1.contam_trgas_flag@enda_39;datum_event1.land_sensitivity@enda_39;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_39_PREPTAG = T;
    CCMA_nT_enda_39_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_39_PREPTAG;
  return CCMA_T_enda_39_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_39(void *T);
extern int CCMA_Unpack_T_enda_39(void *T);
extern int CCMA_Sel_T_enda_39(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_39);
PrePutTable(CCMA, d, double, enda_39);
PreLoadTable(CCMA, enda_39);
PreStoreTable(CCMA, enda_39);
extern void CCMA_Dim_T_enda_39(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_39(void *T);
extern int CCMA_Sql_T_enda_39(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_39(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_40) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_40" : appearance order#165, hierarchy rank# 189, weight = 358.000165 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_40;

#endif /* defined(IS_a_TABLE_enda_40) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_40)
extern const ODB_Tags *CCMA_Set_T_enda_40_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_40_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_40_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_40_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_40_TAG = 0;
PRIVATE int CCMA_nT_enda_40_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_40_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_40_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_40_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_40"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_40"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_40"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_40"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_40"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_40"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_40"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_40"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_40"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_40"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_40"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_40"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_40"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_40"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_40"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_40"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_40"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_40"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_40"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_40"; T[19].name = s; }
    CCMA_T_enda_40_TAG = T;
    CCMA_nT_enda_40_TAG = ntag;
    CCMA_nT_enda_40_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_40_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_40_MEM;
  return CCMA_T_enda_40_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_40_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_40_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_40;report_status@enda_40;report_event1@enda_40;"
      "obsvalue@enda_40;datum_anflag@enda_40;datum_status@enda_40;"
      "datum_event1@enda_40;biascorr@enda_40;biascorr_fg@enda_40;"
      "an_depar@enda_40;fg_depar@enda_40;qc_pge@enda_40;final_obs_error@enda_40;"
      "obs_error@enda_40;fg_error@enda_40;skintemp_1@enda_40;"
      "skintemp_2@enda_40;skintemp_3@enda_40;skintemp_4@enda_40;"
      "skintemp_5@enda_40;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_40;report_status@enda_40;report_event1@enda_40;"
      "obsvalue@enda_40;datum_anflag@enda_40;datum_status@enda_40;"
      "datum_event1@enda_40;biascorr@enda_40;biascorr_fg@enda_40;"
      "an_depar@enda_40;fg_depar@enda_40;qc_pge@enda_40;final_obs_error@enda_40;"
      "obs_error@enda_40;fg_error@enda_40;skintemp_1@enda_40;"
      "skintemp_2@enda_40;skintemp_3@enda_40;skintemp_4@enda_40;"
      "skintemp_5@enda_40;report_status.active@enda_40;report_status.passive@enda_40;"
      "report_status.rejected@enda_40;report_status.blacklisted@enda_40;"
      "report_status.use_emiskf_only@enda_40;report_event1.no_data@enda_40;"
      "report_event1.all_rejected@enda_40;report_event1.bad_practice@enda_40;"
      "report_event1.rdb_rejected@enda_40;report_event1.redundant@enda_40;"
      "report_event1.stalt_missing@enda_40;report_event1.qc_failed@enda_40;"
      "report_event1.overcast_ir@enda_40;report_event1.thinned@enda_40;"
      "report_event1.latlon_corrected@enda_40;report_event1.stalt_corrected@enda_40;"
      "datum_anflag.final@enda_40;datum_anflag.fg@enda_40;"
      "datum_anflag.depar@enda_40;datum_anflag.varqc@enda_40;"
      "datum_anflag.blacklist@enda_40;datum_anflag.ups@enda_40;"
      "datum_anflag.uvt@enda_40;datum_anflag.uhu@enda_40;"
      "datum_anflag.ut2@enda_40;datum_anflag.uh2@enda_40;"
      "datum_anflag.uv1@enda_40;datum_anflag.urr@enda_40;"
      "datum_anflag.usn@enda_40;datum_anflag.usst@enda_40;"
      "datum_status.active@enda_40;datum_status.passive@enda_40;"
      "datum_status.rejected@enda_40;datum_status.blacklisted@enda_40;"
      "datum_status.use_emiskf_only@enda_40;datum_event1.vertco_missing@enda_40;"
      "datum_event1.obsvalue_missing@enda_40;datum_event1.fg_missing@enda_40;"
      "datum_event1.rdb_rejected@enda_40;datum_event1.assim_cld_flag@enda_40;"
      "datum_event1.bad_practice@enda_40;datum_event1.vertpos_outrange@enda_40;"
      "datum_event1.fg2big@enda_40;datum_event1.depar2big@enda_40;"
      "datum_event1.obs_error2big@enda_40;datum_event1.datum_redundant@enda_40;"
      "datum_event1.level_redundant@enda_40;datum_event1.not_analysis_varno@enda_40;"
      "datum_event1.duplicate@enda_40;datum_event1.levels2many@enda_40;"
      "datum_event1.level_selection@enda_40;datum_event1.vertco_consistency@enda_40;"
      "datum_event1.vertco_type_changed@enda_40;datum_event1.combined_flagging@enda_40;"
      "datum_event1.report_rejected@enda_40;datum_event1.varqc_performed@enda_40;"
      "datum_event1.obserror_increased@enda_40;datum_event1.contam_cld_flag@enda_40;"
      "datum_event1.contam_rain_flag@enda_40;datum_event1.contam_aerosol_flag@enda_40;"
      "datum_event1.bad_emissivity@enda_40;datum_event1.model_cld_flag@enda_40;"
      "datum_event1.contam_trgas_flag@enda_40;datum_event1.land_sensitivity@enda_40;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_40_PREPTAG = T;
    CCMA_nT_enda_40_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_40_PREPTAG;
  return CCMA_T_enda_40_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_40(void *T);
extern int CCMA_Unpack_T_enda_40(void *T);
extern int CCMA_Sel_T_enda_40(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_40);
PrePutTable(CCMA, d, double, enda_40);
PreLoadTable(CCMA, enda_40);
PreStoreTable(CCMA, enda_40);
extern void CCMA_Dim_T_enda_40(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_40(void *T);
extern int CCMA_Sql_T_enda_40(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_40(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_41) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_41" : appearance order#166, hierarchy rank# 190, weight = 358.000166 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_41;

#endif /* defined(IS_a_TABLE_enda_41) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_41)
extern const ODB_Tags *CCMA_Set_T_enda_41_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_41_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_41_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_41_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_41_TAG = 0;
PRIVATE int CCMA_nT_enda_41_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_41_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_41_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_41_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_41"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_41"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_41"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_41"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_41"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_41"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_41"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_41"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_41"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_41"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_41"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_41"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_41"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_41"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_41"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_41"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_41"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_41"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_41"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_41"; T[19].name = s; }
    CCMA_T_enda_41_TAG = T;
    CCMA_nT_enda_41_TAG = ntag;
    CCMA_nT_enda_41_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_41_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_41_MEM;
  return CCMA_T_enda_41_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_41_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_41_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_41;report_status@enda_41;report_event1@enda_41;"
      "obsvalue@enda_41;datum_anflag@enda_41;datum_status@enda_41;"
      "datum_event1@enda_41;biascorr@enda_41;biascorr_fg@enda_41;"
      "an_depar@enda_41;fg_depar@enda_41;qc_pge@enda_41;final_obs_error@enda_41;"
      "obs_error@enda_41;fg_error@enda_41;skintemp_1@enda_41;"
      "skintemp_2@enda_41;skintemp_3@enda_41;skintemp_4@enda_41;"
      "skintemp_5@enda_41;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_41;report_status@enda_41;report_event1@enda_41;"
      "obsvalue@enda_41;datum_anflag@enda_41;datum_status@enda_41;"
      "datum_event1@enda_41;biascorr@enda_41;biascorr_fg@enda_41;"
      "an_depar@enda_41;fg_depar@enda_41;qc_pge@enda_41;final_obs_error@enda_41;"
      "obs_error@enda_41;fg_error@enda_41;skintemp_1@enda_41;"
      "skintemp_2@enda_41;skintemp_3@enda_41;skintemp_4@enda_41;"
      "skintemp_5@enda_41;report_status.active@enda_41;report_status.passive@enda_41;"
      "report_status.rejected@enda_41;report_status.blacklisted@enda_41;"
      "report_status.use_emiskf_only@enda_41;report_event1.no_data@enda_41;"
      "report_event1.all_rejected@enda_41;report_event1.bad_practice@enda_41;"
      "report_event1.rdb_rejected@enda_41;report_event1.redundant@enda_41;"
      "report_event1.stalt_missing@enda_41;report_event1.qc_failed@enda_41;"
      "report_event1.overcast_ir@enda_41;report_event1.thinned@enda_41;"
      "report_event1.latlon_corrected@enda_41;report_event1.stalt_corrected@enda_41;"
      "datum_anflag.final@enda_41;datum_anflag.fg@enda_41;"
      "datum_anflag.depar@enda_41;datum_anflag.varqc@enda_41;"
      "datum_anflag.blacklist@enda_41;datum_anflag.ups@enda_41;"
      "datum_anflag.uvt@enda_41;datum_anflag.uhu@enda_41;"
      "datum_anflag.ut2@enda_41;datum_anflag.uh2@enda_41;"
      "datum_anflag.uv1@enda_41;datum_anflag.urr@enda_41;"
      "datum_anflag.usn@enda_41;datum_anflag.usst@enda_41;"
      "datum_status.active@enda_41;datum_status.passive@enda_41;"
      "datum_status.rejected@enda_41;datum_status.blacklisted@enda_41;"
      "datum_status.use_emiskf_only@enda_41;datum_event1.vertco_missing@enda_41;"
      "datum_event1.obsvalue_missing@enda_41;datum_event1.fg_missing@enda_41;"
      "datum_event1.rdb_rejected@enda_41;datum_event1.assim_cld_flag@enda_41;"
      "datum_event1.bad_practice@enda_41;datum_event1.vertpos_outrange@enda_41;"
      "datum_event1.fg2big@enda_41;datum_event1.depar2big@enda_41;"
      "datum_event1.obs_error2big@enda_41;datum_event1.datum_redundant@enda_41;"
      "datum_event1.level_redundant@enda_41;datum_event1.not_analysis_varno@enda_41;"
      "datum_event1.duplicate@enda_41;datum_event1.levels2many@enda_41;"
      "datum_event1.level_selection@enda_41;datum_event1.vertco_consistency@enda_41;"
      "datum_event1.vertco_type_changed@enda_41;datum_event1.combined_flagging@enda_41;"
      "datum_event1.report_rejected@enda_41;datum_event1.varqc_performed@enda_41;"
      "datum_event1.obserror_increased@enda_41;datum_event1.contam_cld_flag@enda_41;"
      "datum_event1.contam_rain_flag@enda_41;datum_event1.contam_aerosol_flag@enda_41;"
      "datum_event1.bad_emissivity@enda_41;datum_event1.model_cld_flag@enda_41;"
      "datum_event1.contam_trgas_flag@enda_41;datum_event1.land_sensitivity@enda_41;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_41_PREPTAG = T;
    CCMA_nT_enda_41_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_41_PREPTAG;
  return CCMA_T_enda_41_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_41(void *T);
extern int CCMA_Unpack_T_enda_41(void *T);
extern int CCMA_Sel_T_enda_41(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_41);
PrePutTable(CCMA, d, double, enda_41);
PreLoadTable(CCMA, enda_41);
PreStoreTable(CCMA, enda_41);
extern void CCMA_Dim_T_enda_41(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_41(void *T);
extern int CCMA_Sql_T_enda_41(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_41(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_42) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_42" : appearance order#167, hierarchy rank# 191, weight = 358.000167 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_42;

#endif /* defined(IS_a_TABLE_enda_42) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_42)
extern const ODB_Tags *CCMA_Set_T_enda_42_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_42_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_42_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_42_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_42_TAG = 0;
PRIVATE int CCMA_nT_enda_42_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_42_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_42_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_42_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_42"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_42"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_42"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_42"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_42"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_42"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_42"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_42"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_42"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_42"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_42"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_42"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_42"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_42"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_42"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_42"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_42"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_42"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_42"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_42"; T[19].name = s; }
    CCMA_T_enda_42_TAG = T;
    CCMA_nT_enda_42_TAG = ntag;
    CCMA_nT_enda_42_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_42_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_42_MEM;
  return CCMA_T_enda_42_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_42_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_42_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_42;report_status@enda_42;report_event1@enda_42;"
      "obsvalue@enda_42;datum_anflag@enda_42;datum_status@enda_42;"
      "datum_event1@enda_42;biascorr@enda_42;biascorr_fg@enda_42;"
      "an_depar@enda_42;fg_depar@enda_42;qc_pge@enda_42;final_obs_error@enda_42;"
      "obs_error@enda_42;fg_error@enda_42;skintemp_1@enda_42;"
      "skintemp_2@enda_42;skintemp_3@enda_42;skintemp_4@enda_42;"
      "skintemp_5@enda_42;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_42;report_status@enda_42;report_event1@enda_42;"
      "obsvalue@enda_42;datum_anflag@enda_42;datum_status@enda_42;"
      "datum_event1@enda_42;biascorr@enda_42;biascorr_fg@enda_42;"
      "an_depar@enda_42;fg_depar@enda_42;qc_pge@enda_42;final_obs_error@enda_42;"
      "obs_error@enda_42;fg_error@enda_42;skintemp_1@enda_42;"
      "skintemp_2@enda_42;skintemp_3@enda_42;skintemp_4@enda_42;"
      "skintemp_5@enda_42;report_status.active@enda_42;report_status.passive@enda_42;"
      "report_status.rejected@enda_42;report_status.blacklisted@enda_42;"
      "report_status.use_emiskf_only@enda_42;report_event1.no_data@enda_42;"
      "report_event1.all_rejected@enda_42;report_event1.bad_practice@enda_42;"
      "report_event1.rdb_rejected@enda_42;report_event1.redundant@enda_42;"
      "report_event1.stalt_missing@enda_42;report_event1.qc_failed@enda_42;"
      "report_event1.overcast_ir@enda_42;report_event1.thinned@enda_42;"
      "report_event1.latlon_corrected@enda_42;report_event1.stalt_corrected@enda_42;"
      "datum_anflag.final@enda_42;datum_anflag.fg@enda_42;"
      "datum_anflag.depar@enda_42;datum_anflag.varqc@enda_42;"
      "datum_anflag.blacklist@enda_42;datum_anflag.ups@enda_42;"
      "datum_anflag.uvt@enda_42;datum_anflag.uhu@enda_42;"
      "datum_anflag.ut2@enda_42;datum_anflag.uh2@enda_42;"
      "datum_anflag.uv1@enda_42;datum_anflag.urr@enda_42;"
      "datum_anflag.usn@enda_42;datum_anflag.usst@enda_42;"
      "datum_status.active@enda_42;datum_status.passive@enda_42;"
      "datum_status.rejected@enda_42;datum_status.blacklisted@enda_42;"
      "datum_status.use_emiskf_only@enda_42;datum_event1.vertco_missing@enda_42;"
      "datum_event1.obsvalue_missing@enda_42;datum_event1.fg_missing@enda_42;"
      "datum_event1.rdb_rejected@enda_42;datum_event1.assim_cld_flag@enda_42;"
      "datum_event1.bad_practice@enda_42;datum_event1.vertpos_outrange@enda_42;"
      "datum_event1.fg2big@enda_42;datum_event1.depar2big@enda_42;"
      "datum_event1.obs_error2big@enda_42;datum_event1.datum_redundant@enda_42;"
      "datum_event1.level_redundant@enda_42;datum_event1.not_analysis_varno@enda_42;"
      "datum_event1.duplicate@enda_42;datum_event1.levels2many@enda_42;"
      "datum_event1.level_selection@enda_42;datum_event1.vertco_consistency@enda_42;"
      "datum_event1.vertco_type_changed@enda_42;datum_event1.combined_flagging@enda_42;"
      "datum_event1.report_rejected@enda_42;datum_event1.varqc_performed@enda_42;"
      "datum_event1.obserror_increased@enda_42;datum_event1.contam_cld_flag@enda_42;"
      "datum_event1.contam_rain_flag@enda_42;datum_event1.contam_aerosol_flag@enda_42;"
      "datum_event1.bad_emissivity@enda_42;datum_event1.model_cld_flag@enda_42;"
      "datum_event1.contam_trgas_flag@enda_42;datum_event1.land_sensitivity@enda_42;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_42_PREPTAG = T;
    CCMA_nT_enda_42_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_42_PREPTAG;
  return CCMA_T_enda_42_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_42(void *T);
extern int CCMA_Unpack_T_enda_42(void *T);
extern int CCMA_Sel_T_enda_42(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_42);
PrePutTable(CCMA, d, double, enda_42);
PreLoadTable(CCMA, enda_42);
PreStoreTable(CCMA, enda_42);
extern void CCMA_Dim_T_enda_42(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_42(void *T);
extern int CCMA_Sql_T_enda_42(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_42(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_43) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_43" : appearance order#168, hierarchy rank# 192, weight = 358.000168 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_43;

#endif /* defined(IS_a_TABLE_enda_43) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_43)
extern const ODB_Tags *CCMA_Set_T_enda_43_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_43_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_43_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_43_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_43_TAG = 0;
PRIVATE int CCMA_nT_enda_43_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_43_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_43_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_43_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_43"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_43"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_43"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_43"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_43"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_43"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_43"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_43"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_43"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_43"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_43"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_43"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_43"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_43"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_43"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_43"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_43"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_43"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_43"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_43"; T[19].name = s; }
    CCMA_T_enda_43_TAG = T;
    CCMA_nT_enda_43_TAG = ntag;
    CCMA_nT_enda_43_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_43_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_43_MEM;
  return CCMA_T_enda_43_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_43_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_43_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_43;report_status@enda_43;report_event1@enda_43;"
      "obsvalue@enda_43;datum_anflag@enda_43;datum_status@enda_43;"
      "datum_event1@enda_43;biascorr@enda_43;biascorr_fg@enda_43;"
      "an_depar@enda_43;fg_depar@enda_43;qc_pge@enda_43;final_obs_error@enda_43;"
      "obs_error@enda_43;fg_error@enda_43;skintemp_1@enda_43;"
      "skintemp_2@enda_43;skintemp_3@enda_43;skintemp_4@enda_43;"
      "skintemp_5@enda_43;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_43;report_status@enda_43;report_event1@enda_43;"
      "obsvalue@enda_43;datum_anflag@enda_43;datum_status@enda_43;"
      "datum_event1@enda_43;biascorr@enda_43;biascorr_fg@enda_43;"
      "an_depar@enda_43;fg_depar@enda_43;qc_pge@enda_43;final_obs_error@enda_43;"
      "obs_error@enda_43;fg_error@enda_43;skintemp_1@enda_43;"
      "skintemp_2@enda_43;skintemp_3@enda_43;skintemp_4@enda_43;"
      "skintemp_5@enda_43;report_status.active@enda_43;report_status.passive@enda_43;"
      "report_status.rejected@enda_43;report_status.blacklisted@enda_43;"
      "report_status.use_emiskf_only@enda_43;report_event1.no_data@enda_43;"
      "report_event1.all_rejected@enda_43;report_event1.bad_practice@enda_43;"
      "report_event1.rdb_rejected@enda_43;report_event1.redundant@enda_43;"
      "report_event1.stalt_missing@enda_43;report_event1.qc_failed@enda_43;"
      "report_event1.overcast_ir@enda_43;report_event1.thinned@enda_43;"
      "report_event1.latlon_corrected@enda_43;report_event1.stalt_corrected@enda_43;"
      "datum_anflag.final@enda_43;datum_anflag.fg@enda_43;"
      "datum_anflag.depar@enda_43;datum_anflag.varqc@enda_43;"
      "datum_anflag.blacklist@enda_43;datum_anflag.ups@enda_43;"
      "datum_anflag.uvt@enda_43;datum_anflag.uhu@enda_43;"
      "datum_anflag.ut2@enda_43;datum_anflag.uh2@enda_43;"
      "datum_anflag.uv1@enda_43;datum_anflag.urr@enda_43;"
      "datum_anflag.usn@enda_43;datum_anflag.usst@enda_43;"
      "datum_status.active@enda_43;datum_status.passive@enda_43;"
      "datum_status.rejected@enda_43;datum_status.blacklisted@enda_43;"
      "datum_status.use_emiskf_only@enda_43;datum_event1.vertco_missing@enda_43;"
      "datum_event1.obsvalue_missing@enda_43;datum_event1.fg_missing@enda_43;"
      "datum_event1.rdb_rejected@enda_43;datum_event1.assim_cld_flag@enda_43;"
      "datum_event1.bad_practice@enda_43;datum_event1.vertpos_outrange@enda_43;"
      "datum_event1.fg2big@enda_43;datum_event1.depar2big@enda_43;"
      "datum_event1.obs_error2big@enda_43;datum_event1.datum_redundant@enda_43;"
      "datum_event1.level_redundant@enda_43;datum_event1.not_analysis_varno@enda_43;"
      "datum_event1.duplicate@enda_43;datum_event1.levels2many@enda_43;"
      "datum_event1.level_selection@enda_43;datum_event1.vertco_consistency@enda_43;"
      "datum_event1.vertco_type_changed@enda_43;datum_event1.combined_flagging@enda_43;"
      "datum_event1.report_rejected@enda_43;datum_event1.varqc_performed@enda_43;"
      "datum_event1.obserror_increased@enda_43;datum_event1.contam_cld_flag@enda_43;"
      "datum_event1.contam_rain_flag@enda_43;datum_event1.contam_aerosol_flag@enda_43;"
      "datum_event1.bad_emissivity@enda_43;datum_event1.model_cld_flag@enda_43;"
      "datum_event1.contam_trgas_flag@enda_43;datum_event1.land_sensitivity@enda_43;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_43_PREPTAG = T;
    CCMA_nT_enda_43_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_43_PREPTAG;
  return CCMA_T_enda_43_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_43(void *T);
extern int CCMA_Unpack_T_enda_43(void *T);
extern int CCMA_Sel_T_enda_43(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_43);
PrePutTable(CCMA, d, double, enda_43);
PreLoadTable(CCMA, enda_43);
PreStoreTable(CCMA, enda_43);
extern void CCMA_Dim_T_enda_43(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_43(void *T);
extern int CCMA_Sql_T_enda_43(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_43(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_44) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_44" : appearance order#169, hierarchy rank# 193, weight = 358.000169 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_44;

#endif /* defined(IS_a_TABLE_enda_44) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_44)
extern const ODB_Tags *CCMA_Set_T_enda_44_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_44_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_44_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_44_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_44_TAG = 0;
PRIVATE int CCMA_nT_enda_44_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_44_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_44_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_44_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_44"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_44"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_44"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_44"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_44"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_44"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_44"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_44"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_44"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_44"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_44"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_44"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_44"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_44"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_44"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_44"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_44"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_44"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_44"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_44"; T[19].name = s; }
    CCMA_T_enda_44_TAG = T;
    CCMA_nT_enda_44_TAG = ntag;
    CCMA_nT_enda_44_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_44_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_44_MEM;
  return CCMA_T_enda_44_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_44_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_44_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_44;report_status@enda_44;report_event1@enda_44;"
      "obsvalue@enda_44;datum_anflag@enda_44;datum_status@enda_44;"
      "datum_event1@enda_44;biascorr@enda_44;biascorr_fg@enda_44;"
      "an_depar@enda_44;fg_depar@enda_44;qc_pge@enda_44;final_obs_error@enda_44;"
      "obs_error@enda_44;fg_error@enda_44;skintemp_1@enda_44;"
      "skintemp_2@enda_44;skintemp_3@enda_44;skintemp_4@enda_44;"
      "skintemp_5@enda_44;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_44;report_status@enda_44;report_event1@enda_44;"
      "obsvalue@enda_44;datum_anflag@enda_44;datum_status@enda_44;"
      "datum_event1@enda_44;biascorr@enda_44;biascorr_fg@enda_44;"
      "an_depar@enda_44;fg_depar@enda_44;qc_pge@enda_44;final_obs_error@enda_44;"
      "obs_error@enda_44;fg_error@enda_44;skintemp_1@enda_44;"
      "skintemp_2@enda_44;skintemp_3@enda_44;skintemp_4@enda_44;"
      "skintemp_5@enda_44;report_status.active@enda_44;report_status.passive@enda_44;"
      "report_status.rejected@enda_44;report_status.blacklisted@enda_44;"
      "report_status.use_emiskf_only@enda_44;report_event1.no_data@enda_44;"
      "report_event1.all_rejected@enda_44;report_event1.bad_practice@enda_44;"
      "report_event1.rdb_rejected@enda_44;report_event1.redundant@enda_44;"
      "report_event1.stalt_missing@enda_44;report_event1.qc_failed@enda_44;"
      "report_event1.overcast_ir@enda_44;report_event1.thinned@enda_44;"
      "report_event1.latlon_corrected@enda_44;report_event1.stalt_corrected@enda_44;"
      "datum_anflag.final@enda_44;datum_anflag.fg@enda_44;"
      "datum_anflag.depar@enda_44;datum_anflag.varqc@enda_44;"
      "datum_anflag.blacklist@enda_44;datum_anflag.ups@enda_44;"
      "datum_anflag.uvt@enda_44;datum_anflag.uhu@enda_44;"
      "datum_anflag.ut2@enda_44;datum_anflag.uh2@enda_44;"
      "datum_anflag.uv1@enda_44;datum_anflag.urr@enda_44;"
      "datum_anflag.usn@enda_44;datum_anflag.usst@enda_44;"
      "datum_status.active@enda_44;datum_status.passive@enda_44;"
      "datum_status.rejected@enda_44;datum_status.blacklisted@enda_44;"
      "datum_status.use_emiskf_only@enda_44;datum_event1.vertco_missing@enda_44;"
      "datum_event1.obsvalue_missing@enda_44;datum_event1.fg_missing@enda_44;"
      "datum_event1.rdb_rejected@enda_44;datum_event1.assim_cld_flag@enda_44;"
      "datum_event1.bad_practice@enda_44;datum_event1.vertpos_outrange@enda_44;"
      "datum_event1.fg2big@enda_44;datum_event1.depar2big@enda_44;"
      "datum_event1.obs_error2big@enda_44;datum_event1.datum_redundant@enda_44;"
      "datum_event1.level_redundant@enda_44;datum_event1.not_analysis_varno@enda_44;"
      "datum_event1.duplicate@enda_44;datum_event1.levels2many@enda_44;"
      "datum_event1.level_selection@enda_44;datum_event1.vertco_consistency@enda_44;"
      "datum_event1.vertco_type_changed@enda_44;datum_event1.combined_flagging@enda_44;"
      "datum_event1.report_rejected@enda_44;datum_event1.varqc_performed@enda_44;"
      "datum_event1.obserror_increased@enda_44;datum_event1.contam_cld_flag@enda_44;"
      "datum_event1.contam_rain_flag@enda_44;datum_event1.contam_aerosol_flag@enda_44;"
      "datum_event1.bad_emissivity@enda_44;datum_event1.model_cld_flag@enda_44;"
      "datum_event1.contam_trgas_flag@enda_44;datum_event1.land_sensitivity@enda_44;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_44_PREPTAG = T;
    CCMA_nT_enda_44_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_44_PREPTAG;
  return CCMA_T_enda_44_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_44(void *T);
extern int CCMA_Unpack_T_enda_44(void *T);
extern int CCMA_Sel_T_enda_44(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_44);
PrePutTable(CCMA, d, double, enda_44);
PreLoadTable(CCMA, enda_44);
PreStoreTable(CCMA, enda_44);
extern void CCMA_Dim_T_enda_44(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_44(void *T);
extern int CCMA_Sql_T_enda_44(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_44(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_45) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_45" : appearance order#170, hierarchy rank# 194, weight = 358.000170 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_45;

#endif /* defined(IS_a_TABLE_enda_45) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_45)
extern const ODB_Tags *CCMA_Set_T_enda_45_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_45_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_45_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_45_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_45_TAG = 0;
PRIVATE int CCMA_nT_enda_45_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_45_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_45_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_45_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_45"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_45"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_45"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_45"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_45"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_45"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_45"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_45"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_45"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_45"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_45"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_45"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_45"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_45"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_45"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_45"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_45"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_45"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_45"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_45"; T[19].name = s; }
    CCMA_T_enda_45_TAG = T;
    CCMA_nT_enda_45_TAG = ntag;
    CCMA_nT_enda_45_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_45_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_45_MEM;
  return CCMA_T_enda_45_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_45_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_45_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_45;report_status@enda_45;report_event1@enda_45;"
      "obsvalue@enda_45;datum_anflag@enda_45;datum_status@enda_45;"
      "datum_event1@enda_45;biascorr@enda_45;biascorr_fg@enda_45;"
      "an_depar@enda_45;fg_depar@enda_45;qc_pge@enda_45;final_obs_error@enda_45;"
      "obs_error@enda_45;fg_error@enda_45;skintemp_1@enda_45;"
      "skintemp_2@enda_45;skintemp_3@enda_45;skintemp_4@enda_45;"
      "skintemp_5@enda_45;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_45;report_status@enda_45;report_event1@enda_45;"
      "obsvalue@enda_45;datum_anflag@enda_45;datum_status@enda_45;"
      "datum_event1@enda_45;biascorr@enda_45;biascorr_fg@enda_45;"
      "an_depar@enda_45;fg_depar@enda_45;qc_pge@enda_45;final_obs_error@enda_45;"
      "obs_error@enda_45;fg_error@enda_45;skintemp_1@enda_45;"
      "skintemp_2@enda_45;skintemp_3@enda_45;skintemp_4@enda_45;"
      "skintemp_5@enda_45;report_status.active@enda_45;report_status.passive@enda_45;"
      "report_status.rejected@enda_45;report_status.blacklisted@enda_45;"
      "report_status.use_emiskf_only@enda_45;report_event1.no_data@enda_45;"
      "report_event1.all_rejected@enda_45;report_event1.bad_practice@enda_45;"
      "report_event1.rdb_rejected@enda_45;report_event1.redundant@enda_45;"
      "report_event1.stalt_missing@enda_45;report_event1.qc_failed@enda_45;"
      "report_event1.overcast_ir@enda_45;report_event1.thinned@enda_45;"
      "report_event1.latlon_corrected@enda_45;report_event1.stalt_corrected@enda_45;"
      "datum_anflag.final@enda_45;datum_anflag.fg@enda_45;"
      "datum_anflag.depar@enda_45;datum_anflag.varqc@enda_45;"
      "datum_anflag.blacklist@enda_45;datum_anflag.ups@enda_45;"
      "datum_anflag.uvt@enda_45;datum_anflag.uhu@enda_45;"
      "datum_anflag.ut2@enda_45;datum_anflag.uh2@enda_45;"
      "datum_anflag.uv1@enda_45;datum_anflag.urr@enda_45;"
      "datum_anflag.usn@enda_45;datum_anflag.usst@enda_45;"
      "datum_status.active@enda_45;datum_status.passive@enda_45;"
      "datum_status.rejected@enda_45;datum_status.blacklisted@enda_45;"
      "datum_status.use_emiskf_only@enda_45;datum_event1.vertco_missing@enda_45;"
      "datum_event1.obsvalue_missing@enda_45;datum_event1.fg_missing@enda_45;"
      "datum_event1.rdb_rejected@enda_45;datum_event1.assim_cld_flag@enda_45;"
      "datum_event1.bad_practice@enda_45;datum_event1.vertpos_outrange@enda_45;"
      "datum_event1.fg2big@enda_45;datum_event1.depar2big@enda_45;"
      "datum_event1.obs_error2big@enda_45;datum_event1.datum_redundant@enda_45;"
      "datum_event1.level_redundant@enda_45;datum_event1.not_analysis_varno@enda_45;"
      "datum_event1.duplicate@enda_45;datum_event1.levels2many@enda_45;"
      "datum_event1.level_selection@enda_45;datum_event1.vertco_consistency@enda_45;"
      "datum_event1.vertco_type_changed@enda_45;datum_event1.combined_flagging@enda_45;"
      "datum_event1.report_rejected@enda_45;datum_event1.varqc_performed@enda_45;"
      "datum_event1.obserror_increased@enda_45;datum_event1.contam_cld_flag@enda_45;"
      "datum_event1.contam_rain_flag@enda_45;datum_event1.contam_aerosol_flag@enda_45;"
      "datum_event1.bad_emissivity@enda_45;datum_event1.model_cld_flag@enda_45;"
      "datum_event1.contam_trgas_flag@enda_45;datum_event1.land_sensitivity@enda_45;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_45_PREPTAG = T;
    CCMA_nT_enda_45_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_45_PREPTAG;
  return CCMA_T_enda_45_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_45(void *T);
extern int CCMA_Unpack_T_enda_45(void *T);
extern int CCMA_Sel_T_enda_45(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_45);
PrePutTable(CCMA, d, double, enda_45);
PreLoadTable(CCMA, enda_45);
PreStoreTable(CCMA, enda_45);
extern void CCMA_Dim_T_enda_45(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_45(void *T);
extern int CCMA_Sql_T_enda_45(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_45(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_46) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_46" : appearance order#171, hierarchy rank# 195, weight = 358.000171 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_46;

#endif /* defined(IS_a_TABLE_enda_46) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_46)
extern const ODB_Tags *CCMA_Set_T_enda_46_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_46_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_46_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_46_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_46_TAG = 0;
PRIVATE int CCMA_nT_enda_46_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_46_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_46_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_46_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_46"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_46"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_46"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_46"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_46"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_46"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_46"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_46"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_46"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_46"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_46"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_46"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_46"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_46"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_46"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_46"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_46"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_46"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_46"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_46"; T[19].name = s; }
    CCMA_T_enda_46_TAG = T;
    CCMA_nT_enda_46_TAG = ntag;
    CCMA_nT_enda_46_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_46_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_46_MEM;
  return CCMA_T_enda_46_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_46_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_46_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_46;report_status@enda_46;report_event1@enda_46;"
      "obsvalue@enda_46;datum_anflag@enda_46;datum_status@enda_46;"
      "datum_event1@enda_46;biascorr@enda_46;biascorr_fg@enda_46;"
      "an_depar@enda_46;fg_depar@enda_46;qc_pge@enda_46;final_obs_error@enda_46;"
      "obs_error@enda_46;fg_error@enda_46;skintemp_1@enda_46;"
      "skintemp_2@enda_46;skintemp_3@enda_46;skintemp_4@enda_46;"
      "skintemp_5@enda_46;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_46;report_status@enda_46;report_event1@enda_46;"
      "obsvalue@enda_46;datum_anflag@enda_46;datum_status@enda_46;"
      "datum_event1@enda_46;biascorr@enda_46;biascorr_fg@enda_46;"
      "an_depar@enda_46;fg_depar@enda_46;qc_pge@enda_46;final_obs_error@enda_46;"
      "obs_error@enda_46;fg_error@enda_46;skintemp_1@enda_46;"
      "skintemp_2@enda_46;skintemp_3@enda_46;skintemp_4@enda_46;"
      "skintemp_5@enda_46;report_status.active@enda_46;report_status.passive@enda_46;"
      "report_status.rejected@enda_46;report_status.blacklisted@enda_46;"
      "report_status.use_emiskf_only@enda_46;report_event1.no_data@enda_46;"
      "report_event1.all_rejected@enda_46;report_event1.bad_practice@enda_46;"
      "report_event1.rdb_rejected@enda_46;report_event1.redundant@enda_46;"
      "report_event1.stalt_missing@enda_46;report_event1.qc_failed@enda_46;"
      "report_event1.overcast_ir@enda_46;report_event1.thinned@enda_46;"
      "report_event1.latlon_corrected@enda_46;report_event1.stalt_corrected@enda_46;"
      "datum_anflag.final@enda_46;datum_anflag.fg@enda_46;"
      "datum_anflag.depar@enda_46;datum_anflag.varqc@enda_46;"
      "datum_anflag.blacklist@enda_46;datum_anflag.ups@enda_46;"
      "datum_anflag.uvt@enda_46;datum_anflag.uhu@enda_46;"
      "datum_anflag.ut2@enda_46;datum_anflag.uh2@enda_46;"
      "datum_anflag.uv1@enda_46;datum_anflag.urr@enda_46;"
      "datum_anflag.usn@enda_46;datum_anflag.usst@enda_46;"
      "datum_status.active@enda_46;datum_status.passive@enda_46;"
      "datum_status.rejected@enda_46;datum_status.blacklisted@enda_46;"
      "datum_status.use_emiskf_only@enda_46;datum_event1.vertco_missing@enda_46;"
      "datum_event1.obsvalue_missing@enda_46;datum_event1.fg_missing@enda_46;"
      "datum_event1.rdb_rejected@enda_46;datum_event1.assim_cld_flag@enda_46;"
      "datum_event1.bad_practice@enda_46;datum_event1.vertpos_outrange@enda_46;"
      "datum_event1.fg2big@enda_46;datum_event1.depar2big@enda_46;"
      "datum_event1.obs_error2big@enda_46;datum_event1.datum_redundant@enda_46;"
      "datum_event1.level_redundant@enda_46;datum_event1.not_analysis_varno@enda_46;"
      "datum_event1.duplicate@enda_46;datum_event1.levels2many@enda_46;"
      "datum_event1.level_selection@enda_46;datum_event1.vertco_consistency@enda_46;"
      "datum_event1.vertco_type_changed@enda_46;datum_event1.combined_flagging@enda_46;"
      "datum_event1.report_rejected@enda_46;datum_event1.varqc_performed@enda_46;"
      "datum_event1.obserror_increased@enda_46;datum_event1.contam_cld_flag@enda_46;"
      "datum_event1.contam_rain_flag@enda_46;datum_event1.contam_aerosol_flag@enda_46;"
      "datum_event1.bad_emissivity@enda_46;datum_event1.model_cld_flag@enda_46;"
      "datum_event1.contam_trgas_flag@enda_46;datum_event1.land_sensitivity@enda_46;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_46_PREPTAG = T;
    CCMA_nT_enda_46_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_46_PREPTAG;
  return CCMA_T_enda_46_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_46(void *T);
extern int CCMA_Unpack_T_enda_46(void *T);
extern int CCMA_Sel_T_enda_46(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_46);
PrePutTable(CCMA, d, double, enda_46);
PreLoadTable(CCMA, enda_46);
PreStoreTable(CCMA, enda_46);
extern void CCMA_Dim_T_enda_46(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_46(void *T);
extern int CCMA_Sql_T_enda_46(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_46(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_47) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_47" : appearance order#172, hierarchy rank# 196, weight = 358.000172 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_47;

#endif /* defined(IS_a_TABLE_enda_47) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_47)
extern const ODB_Tags *CCMA_Set_T_enda_47_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_47_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_47_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_47_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_47_TAG = 0;
PRIVATE int CCMA_nT_enda_47_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_47_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_47_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_47_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_47"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_47"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_47"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_47"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_47"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_47"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_47"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_47"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_47"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_47"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_47"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_47"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_47"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_47"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_47"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_47"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_47"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_47"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_47"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_47"; T[19].name = s; }
    CCMA_T_enda_47_TAG = T;
    CCMA_nT_enda_47_TAG = ntag;
    CCMA_nT_enda_47_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_47_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_47_MEM;
  return CCMA_T_enda_47_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_47_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_47_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_47;report_status@enda_47;report_event1@enda_47;"
      "obsvalue@enda_47;datum_anflag@enda_47;datum_status@enda_47;"
      "datum_event1@enda_47;biascorr@enda_47;biascorr_fg@enda_47;"
      "an_depar@enda_47;fg_depar@enda_47;qc_pge@enda_47;final_obs_error@enda_47;"
      "obs_error@enda_47;fg_error@enda_47;skintemp_1@enda_47;"
      "skintemp_2@enda_47;skintemp_3@enda_47;skintemp_4@enda_47;"
      "skintemp_5@enda_47;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_47;report_status@enda_47;report_event1@enda_47;"
      "obsvalue@enda_47;datum_anflag@enda_47;datum_status@enda_47;"
      "datum_event1@enda_47;biascorr@enda_47;biascorr_fg@enda_47;"
      "an_depar@enda_47;fg_depar@enda_47;qc_pge@enda_47;final_obs_error@enda_47;"
      "obs_error@enda_47;fg_error@enda_47;skintemp_1@enda_47;"
      "skintemp_2@enda_47;skintemp_3@enda_47;skintemp_4@enda_47;"
      "skintemp_5@enda_47;report_status.active@enda_47;report_status.passive@enda_47;"
      "report_status.rejected@enda_47;report_status.blacklisted@enda_47;"
      "report_status.use_emiskf_only@enda_47;report_event1.no_data@enda_47;"
      "report_event1.all_rejected@enda_47;report_event1.bad_practice@enda_47;"
      "report_event1.rdb_rejected@enda_47;report_event1.redundant@enda_47;"
      "report_event1.stalt_missing@enda_47;report_event1.qc_failed@enda_47;"
      "report_event1.overcast_ir@enda_47;report_event1.thinned@enda_47;"
      "report_event1.latlon_corrected@enda_47;report_event1.stalt_corrected@enda_47;"
      "datum_anflag.final@enda_47;datum_anflag.fg@enda_47;"
      "datum_anflag.depar@enda_47;datum_anflag.varqc@enda_47;"
      "datum_anflag.blacklist@enda_47;datum_anflag.ups@enda_47;"
      "datum_anflag.uvt@enda_47;datum_anflag.uhu@enda_47;"
      "datum_anflag.ut2@enda_47;datum_anflag.uh2@enda_47;"
      "datum_anflag.uv1@enda_47;datum_anflag.urr@enda_47;"
      "datum_anflag.usn@enda_47;datum_anflag.usst@enda_47;"
      "datum_status.active@enda_47;datum_status.passive@enda_47;"
      "datum_status.rejected@enda_47;datum_status.blacklisted@enda_47;"
      "datum_status.use_emiskf_only@enda_47;datum_event1.vertco_missing@enda_47;"
      "datum_event1.obsvalue_missing@enda_47;datum_event1.fg_missing@enda_47;"
      "datum_event1.rdb_rejected@enda_47;datum_event1.assim_cld_flag@enda_47;"
      "datum_event1.bad_practice@enda_47;datum_event1.vertpos_outrange@enda_47;"
      "datum_event1.fg2big@enda_47;datum_event1.depar2big@enda_47;"
      "datum_event1.obs_error2big@enda_47;datum_event1.datum_redundant@enda_47;"
      "datum_event1.level_redundant@enda_47;datum_event1.not_analysis_varno@enda_47;"
      "datum_event1.duplicate@enda_47;datum_event1.levels2many@enda_47;"
      "datum_event1.level_selection@enda_47;datum_event1.vertco_consistency@enda_47;"
      "datum_event1.vertco_type_changed@enda_47;datum_event1.combined_flagging@enda_47;"
      "datum_event1.report_rejected@enda_47;datum_event1.varqc_performed@enda_47;"
      "datum_event1.obserror_increased@enda_47;datum_event1.contam_cld_flag@enda_47;"
      "datum_event1.contam_rain_flag@enda_47;datum_event1.contam_aerosol_flag@enda_47;"
      "datum_event1.bad_emissivity@enda_47;datum_event1.model_cld_flag@enda_47;"
      "datum_event1.contam_trgas_flag@enda_47;datum_event1.land_sensitivity@enda_47;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_47_PREPTAG = T;
    CCMA_nT_enda_47_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_47_PREPTAG;
  return CCMA_T_enda_47_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_47(void *T);
extern int CCMA_Unpack_T_enda_47(void *T);
extern int CCMA_Sel_T_enda_47(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_47);
PrePutTable(CCMA, d, double, enda_47);
PreLoadTable(CCMA, enda_47);
PreStoreTable(CCMA, enda_47);
extern void CCMA_Dim_T_enda_47(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_47(void *T);
extern int CCMA_Sql_T_enda_47(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_47(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_48) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_48" : appearance order#173, hierarchy rank# 197, weight = 358.000173 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_48;

#endif /* defined(IS_a_TABLE_enda_48) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_48)
extern const ODB_Tags *CCMA_Set_T_enda_48_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_48_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_48_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_48_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_48_TAG = 0;
PRIVATE int CCMA_nT_enda_48_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_48_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_48_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_48_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_48"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_48"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_48"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_48"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_48"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_48"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_48"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_48"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_48"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_48"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_48"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_48"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_48"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_48"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_48"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_48"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_48"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_48"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_48"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_48"; T[19].name = s; }
    CCMA_T_enda_48_TAG = T;
    CCMA_nT_enda_48_TAG = ntag;
    CCMA_nT_enda_48_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_48_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_48_MEM;
  return CCMA_T_enda_48_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_48_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_48_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_48;report_status@enda_48;report_event1@enda_48;"
      "obsvalue@enda_48;datum_anflag@enda_48;datum_status@enda_48;"
      "datum_event1@enda_48;biascorr@enda_48;biascorr_fg@enda_48;"
      "an_depar@enda_48;fg_depar@enda_48;qc_pge@enda_48;final_obs_error@enda_48;"
      "obs_error@enda_48;fg_error@enda_48;skintemp_1@enda_48;"
      "skintemp_2@enda_48;skintemp_3@enda_48;skintemp_4@enda_48;"
      "skintemp_5@enda_48;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_48;report_status@enda_48;report_event1@enda_48;"
      "obsvalue@enda_48;datum_anflag@enda_48;datum_status@enda_48;"
      "datum_event1@enda_48;biascorr@enda_48;biascorr_fg@enda_48;"
      "an_depar@enda_48;fg_depar@enda_48;qc_pge@enda_48;final_obs_error@enda_48;"
      "obs_error@enda_48;fg_error@enda_48;skintemp_1@enda_48;"
      "skintemp_2@enda_48;skintemp_3@enda_48;skintemp_4@enda_48;"
      "skintemp_5@enda_48;report_status.active@enda_48;report_status.passive@enda_48;"
      "report_status.rejected@enda_48;report_status.blacklisted@enda_48;"
      "report_status.use_emiskf_only@enda_48;report_event1.no_data@enda_48;"
      "report_event1.all_rejected@enda_48;report_event1.bad_practice@enda_48;"
      "report_event1.rdb_rejected@enda_48;report_event1.redundant@enda_48;"
      "report_event1.stalt_missing@enda_48;report_event1.qc_failed@enda_48;"
      "report_event1.overcast_ir@enda_48;report_event1.thinned@enda_48;"
      "report_event1.latlon_corrected@enda_48;report_event1.stalt_corrected@enda_48;"
      "datum_anflag.final@enda_48;datum_anflag.fg@enda_48;"
      "datum_anflag.depar@enda_48;datum_anflag.varqc@enda_48;"
      "datum_anflag.blacklist@enda_48;datum_anflag.ups@enda_48;"
      "datum_anflag.uvt@enda_48;datum_anflag.uhu@enda_48;"
      "datum_anflag.ut2@enda_48;datum_anflag.uh2@enda_48;"
      "datum_anflag.uv1@enda_48;datum_anflag.urr@enda_48;"
      "datum_anflag.usn@enda_48;datum_anflag.usst@enda_48;"
      "datum_status.active@enda_48;datum_status.passive@enda_48;"
      "datum_status.rejected@enda_48;datum_status.blacklisted@enda_48;"
      "datum_status.use_emiskf_only@enda_48;datum_event1.vertco_missing@enda_48;"
      "datum_event1.obsvalue_missing@enda_48;datum_event1.fg_missing@enda_48;"
      "datum_event1.rdb_rejected@enda_48;datum_event1.assim_cld_flag@enda_48;"
      "datum_event1.bad_practice@enda_48;datum_event1.vertpos_outrange@enda_48;"
      "datum_event1.fg2big@enda_48;datum_event1.depar2big@enda_48;"
      "datum_event1.obs_error2big@enda_48;datum_event1.datum_redundant@enda_48;"
      "datum_event1.level_redundant@enda_48;datum_event1.not_analysis_varno@enda_48;"
      "datum_event1.duplicate@enda_48;datum_event1.levels2many@enda_48;"
      "datum_event1.level_selection@enda_48;datum_event1.vertco_consistency@enda_48;"
      "datum_event1.vertco_type_changed@enda_48;datum_event1.combined_flagging@enda_48;"
      "datum_event1.report_rejected@enda_48;datum_event1.varqc_performed@enda_48;"
      "datum_event1.obserror_increased@enda_48;datum_event1.contam_cld_flag@enda_48;"
      "datum_event1.contam_rain_flag@enda_48;datum_event1.contam_aerosol_flag@enda_48;"
      "datum_event1.bad_emissivity@enda_48;datum_event1.model_cld_flag@enda_48;"
      "datum_event1.contam_trgas_flag@enda_48;datum_event1.land_sensitivity@enda_48;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_48_PREPTAG = T;
    CCMA_nT_enda_48_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_48_PREPTAG;
  return CCMA_T_enda_48_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_48(void *T);
extern int CCMA_Unpack_T_enda_48(void *T);
extern int CCMA_Sel_T_enda_48(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_48);
PrePutTable(CCMA, d, double, enda_48);
PreLoadTable(CCMA, enda_48);
PreStoreTable(CCMA, enda_48);
extern void CCMA_Dim_T_enda_48(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_48(void *T);
extern int CCMA_Sql_T_enda_48(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_48(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_49) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_49" : appearance order#174, hierarchy rank# 198, weight = 358.000174 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_49;

#endif /* defined(IS_a_TABLE_enda_49) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_49)
extern const ODB_Tags *CCMA_Set_T_enda_49_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_49_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_49_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_49_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_49_TAG = 0;
PRIVATE int CCMA_nT_enda_49_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_49_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_49_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_49_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_49"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_49"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_49"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_49"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_49"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_49"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_49"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_49"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_49"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_49"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_49"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_49"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_49"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_49"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_49"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_49"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_49"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_49"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_49"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_49"; T[19].name = s; }
    CCMA_T_enda_49_TAG = T;
    CCMA_nT_enda_49_TAG = ntag;
    CCMA_nT_enda_49_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_49_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_49_MEM;
  return CCMA_T_enda_49_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_49_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_49_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_49;report_status@enda_49;report_event1@enda_49;"
      "obsvalue@enda_49;datum_anflag@enda_49;datum_status@enda_49;"
      "datum_event1@enda_49;biascorr@enda_49;biascorr_fg@enda_49;"
      "an_depar@enda_49;fg_depar@enda_49;qc_pge@enda_49;final_obs_error@enda_49;"
      "obs_error@enda_49;fg_error@enda_49;skintemp_1@enda_49;"
      "skintemp_2@enda_49;skintemp_3@enda_49;skintemp_4@enda_49;"
      "skintemp_5@enda_49;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_49;report_status@enda_49;report_event1@enda_49;"
      "obsvalue@enda_49;datum_anflag@enda_49;datum_status@enda_49;"
      "datum_event1@enda_49;biascorr@enda_49;biascorr_fg@enda_49;"
      "an_depar@enda_49;fg_depar@enda_49;qc_pge@enda_49;final_obs_error@enda_49;"
      "obs_error@enda_49;fg_error@enda_49;skintemp_1@enda_49;"
      "skintemp_2@enda_49;skintemp_3@enda_49;skintemp_4@enda_49;"
      "skintemp_5@enda_49;report_status.active@enda_49;report_status.passive@enda_49;"
      "report_status.rejected@enda_49;report_status.blacklisted@enda_49;"
      "report_status.use_emiskf_only@enda_49;report_event1.no_data@enda_49;"
      "report_event1.all_rejected@enda_49;report_event1.bad_practice@enda_49;"
      "report_event1.rdb_rejected@enda_49;report_event1.redundant@enda_49;"
      "report_event1.stalt_missing@enda_49;report_event1.qc_failed@enda_49;"
      "report_event1.overcast_ir@enda_49;report_event1.thinned@enda_49;"
      "report_event1.latlon_corrected@enda_49;report_event1.stalt_corrected@enda_49;"
      "datum_anflag.final@enda_49;datum_anflag.fg@enda_49;"
      "datum_anflag.depar@enda_49;datum_anflag.varqc@enda_49;"
      "datum_anflag.blacklist@enda_49;datum_anflag.ups@enda_49;"
      "datum_anflag.uvt@enda_49;datum_anflag.uhu@enda_49;"
      "datum_anflag.ut2@enda_49;datum_anflag.uh2@enda_49;"
      "datum_anflag.uv1@enda_49;datum_anflag.urr@enda_49;"
      "datum_anflag.usn@enda_49;datum_anflag.usst@enda_49;"
      "datum_status.active@enda_49;datum_status.passive@enda_49;"
      "datum_status.rejected@enda_49;datum_status.blacklisted@enda_49;"
      "datum_status.use_emiskf_only@enda_49;datum_event1.vertco_missing@enda_49;"
      "datum_event1.obsvalue_missing@enda_49;datum_event1.fg_missing@enda_49;"
      "datum_event1.rdb_rejected@enda_49;datum_event1.assim_cld_flag@enda_49;"
      "datum_event1.bad_practice@enda_49;datum_event1.vertpos_outrange@enda_49;"
      "datum_event1.fg2big@enda_49;datum_event1.depar2big@enda_49;"
      "datum_event1.obs_error2big@enda_49;datum_event1.datum_redundant@enda_49;"
      "datum_event1.level_redundant@enda_49;datum_event1.not_analysis_varno@enda_49;"
      "datum_event1.duplicate@enda_49;datum_event1.levels2many@enda_49;"
      "datum_event1.level_selection@enda_49;datum_event1.vertco_consistency@enda_49;"
      "datum_event1.vertco_type_changed@enda_49;datum_event1.combined_flagging@enda_49;"
      "datum_event1.report_rejected@enda_49;datum_event1.varqc_performed@enda_49;"
      "datum_event1.obserror_increased@enda_49;datum_event1.contam_cld_flag@enda_49;"
      "datum_event1.contam_rain_flag@enda_49;datum_event1.contam_aerosol_flag@enda_49;"
      "datum_event1.bad_emissivity@enda_49;datum_event1.model_cld_flag@enda_49;"
      "datum_event1.contam_trgas_flag@enda_49;datum_event1.land_sensitivity@enda_49;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_49_PREPTAG = T;
    CCMA_nT_enda_49_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_49_PREPTAG;
  return CCMA_T_enda_49_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_49(void *T);
extern int CCMA_Unpack_T_enda_49(void *T);
extern int CCMA_Sel_T_enda_49(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_49);
PrePutTable(CCMA, d, double, enda_49);
PreLoadTable(CCMA, enda_49);
PreStoreTable(CCMA, enda_49);
extern void CCMA_Dim_T_enda_49(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_49(void *T);
extern int CCMA_Sql_T_enda_49(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_49(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_50) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_50" : appearance order#175, hierarchy rank# 199, weight = 358.000175 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_50;

#endif /* defined(IS_a_TABLE_enda_50) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_50)
extern const ODB_Tags *CCMA_Set_T_enda_50_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_50_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_50_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_50_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_50_TAG = 0;
PRIVATE int CCMA_nT_enda_50_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_50_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_50_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_50_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_50"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_50"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_50"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_50"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_50"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_50"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_50"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_50"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_50"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_50"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_50"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_50"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_50"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_50"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_50"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_50"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_50"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_50"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_50"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_50"; T[19].name = s; }
    CCMA_T_enda_50_TAG = T;
    CCMA_nT_enda_50_TAG = ntag;
    CCMA_nT_enda_50_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_50_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_50_MEM;
  return CCMA_T_enda_50_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_50_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_50_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_50;report_status@enda_50;report_event1@enda_50;"
      "obsvalue@enda_50;datum_anflag@enda_50;datum_status@enda_50;"
      "datum_event1@enda_50;biascorr@enda_50;biascorr_fg@enda_50;"
      "an_depar@enda_50;fg_depar@enda_50;qc_pge@enda_50;final_obs_error@enda_50;"
      "obs_error@enda_50;fg_error@enda_50;skintemp_1@enda_50;"
      "skintemp_2@enda_50;skintemp_3@enda_50;skintemp_4@enda_50;"
      "skintemp_5@enda_50;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_50;report_status@enda_50;report_event1@enda_50;"
      "obsvalue@enda_50;datum_anflag@enda_50;datum_status@enda_50;"
      "datum_event1@enda_50;biascorr@enda_50;biascorr_fg@enda_50;"
      "an_depar@enda_50;fg_depar@enda_50;qc_pge@enda_50;final_obs_error@enda_50;"
      "obs_error@enda_50;fg_error@enda_50;skintemp_1@enda_50;"
      "skintemp_2@enda_50;skintemp_3@enda_50;skintemp_4@enda_50;"
      "skintemp_5@enda_50;report_status.active@enda_50;report_status.passive@enda_50;"
      "report_status.rejected@enda_50;report_status.blacklisted@enda_50;"
      "report_status.use_emiskf_only@enda_50;report_event1.no_data@enda_50;"
      "report_event1.all_rejected@enda_50;report_event1.bad_practice@enda_50;"
      "report_event1.rdb_rejected@enda_50;report_event1.redundant@enda_50;"
      "report_event1.stalt_missing@enda_50;report_event1.qc_failed@enda_50;"
      "report_event1.overcast_ir@enda_50;report_event1.thinned@enda_50;"
      "report_event1.latlon_corrected@enda_50;report_event1.stalt_corrected@enda_50;"
      "datum_anflag.final@enda_50;datum_anflag.fg@enda_50;"
      "datum_anflag.depar@enda_50;datum_anflag.varqc@enda_50;"
      "datum_anflag.blacklist@enda_50;datum_anflag.ups@enda_50;"
      "datum_anflag.uvt@enda_50;datum_anflag.uhu@enda_50;"
      "datum_anflag.ut2@enda_50;datum_anflag.uh2@enda_50;"
      "datum_anflag.uv1@enda_50;datum_anflag.urr@enda_50;"
      "datum_anflag.usn@enda_50;datum_anflag.usst@enda_50;"
      "datum_status.active@enda_50;datum_status.passive@enda_50;"
      "datum_status.rejected@enda_50;datum_status.blacklisted@enda_50;"
      "datum_status.use_emiskf_only@enda_50;datum_event1.vertco_missing@enda_50;"
      "datum_event1.obsvalue_missing@enda_50;datum_event1.fg_missing@enda_50;"
      "datum_event1.rdb_rejected@enda_50;datum_event1.assim_cld_flag@enda_50;"
      "datum_event1.bad_practice@enda_50;datum_event1.vertpos_outrange@enda_50;"
      "datum_event1.fg2big@enda_50;datum_event1.depar2big@enda_50;"
      "datum_event1.obs_error2big@enda_50;datum_event1.datum_redundant@enda_50;"
      "datum_event1.level_redundant@enda_50;datum_event1.not_analysis_varno@enda_50;"
      "datum_event1.duplicate@enda_50;datum_event1.levels2many@enda_50;"
      "datum_event1.level_selection@enda_50;datum_event1.vertco_consistency@enda_50;"
      "datum_event1.vertco_type_changed@enda_50;datum_event1.combined_flagging@enda_50;"
      "datum_event1.report_rejected@enda_50;datum_event1.varqc_performed@enda_50;"
      "datum_event1.obserror_increased@enda_50;datum_event1.contam_cld_flag@enda_50;"
      "datum_event1.contam_rain_flag@enda_50;datum_event1.contam_aerosol_flag@enda_50;"
      "datum_event1.bad_emissivity@enda_50;datum_event1.model_cld_flag@enda_50;"
      "datum_event1.contam_trgas_flag@enda_50;datum_event1.land_sensitivity@enda_50;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_50_PREPTAG = T;
    CCMA_nT_enda_50_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_50_PREPTAG;
  return CCMA_T_enda_50_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_50(void *T);
extern int CCMA_Unpack_T_enda_50(void *T);
extern int CCMA_Sel_T_enda_50(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_50);
PrePutTable(CCMA, d, double, enda_50);
PreLoadTable(CCMA, enda_50);
PreStoreTable(CCMA, enda_50);
extern void CCMA_Dim_T_enda_50(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_50(void *T);
extern int CCMA_Sql_T_enda_50(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_50(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_51) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_51" : appearance order#176, hierarchy rank# 200, weight = 358.000176 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_51;

#endif /* defined(IS_a_TABLE_enda_51) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_51)
extern const ODB_Tags *CCMA_Set_T_enda_51_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_51_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_51_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_51_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_51_TAG = 0;
PRIVATE int CCMA_nT_enda_51_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_51_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_51_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_51_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_51"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_51"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_51"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_51"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_51"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_51"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_51"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_51"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_51"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_51"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_51"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_51"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_51"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_51"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_51"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_51"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_51"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_51"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_51"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_51"; T[19].name = s; }
    CCMA_T_enda_51_TAG = T;
    CCMA_nT_enda_51_TAG = ntag;
    CCMA_nT_enda_51_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_51_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_51_MEM;
  return CCMA_T_enda_51_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_51_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_51_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_51;report_status@enda_51;report_event1@enda_51;"
      "obsvalue@enda_51;datum_anflag@enda_51;datum_status@enda_51;"
      "datum_event1@enda_51;biascorr@enda_51;biascorr_fg@enda_51;"
      "an_depar@enda_51;fg_depar@enda_51;qc_pge@enda_51;final_obs_error@enda_51;"
      "obs_error@enda_51;fg_error@enda_51;skintemp_1@enda_51;"
      "skintemp_2@enda_51;skintemp_3@enda_51;skintemp_4@enda_51;"
      "skintemp_5@enda_51;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_51;report_status@enda_51;report_event1@enda_51;"
      "obsvalue@enda_51;datum_anflag@enda_51;datum_status@enda_51;"
      "datum_event1@enda_51;biascorr@enda_51;biascorr_fg@enda_51;"
      "an_depar@enda_51;fg_depar@enda_51;qc_pge@enda_51;final_obs_error@enda_51;"
      "obs_error@enda_51;fg_error@enda_51;skintemp_1@enda_51;"
      "skintemp_2@enda_51;skintemp_3@enda_51;skintemp_4@enda_51;"
      "skintemp_5@enda_51;report_status.active@enda_51;report_status.passive@enda_51;"
      "report_status.rejected@enda_51;report_status.blacklisted@enda_51;"
      "report_status.use_emiskf_only@enda_51;report_event1.no_data@enda_51;"
      "report_event1.all_rejected@enda_51;report_event1.bad_practice@enda_51;"
      "report_event1.rdb_rejected@enda_51;report_event1.redundant@enda_51;"
      "report_event1.stalt_missing@enda_51;report_event1.qc_failed@enda_51;"
      "report_event1.overcast_ir@enda_51;report_event1.thinned@enda_51;"
      "report_event1.latlon_corrected@enda_51;report_event1.stalt_corrected@enda_51;"
      "datum_anflag.final@enda_51;datum_anflag.fg@enda_51;"
      "datum_anflag.depar@enda_51;datum_anflag.varqc@enda_51;"
      "datum_anflag.blacklist@enda_51;datum_anflag.ups@enda_51;"
      "datum_anflag.uvt@enda_51;datum_anflag.uhu@enda_51;"
      "datum_anflag.ut2@enda_51;datum_anflag.uh2@enda_51;"
      "datum_anflag.uv1@enda_51;datum_anflag.urr@enda_51;"
      "datum_anflag.usn@enda_51;datum_anflag.usst@enda_51;"
      "datum_status.active@enda_51;datum_status.passive@enda_51;"
      "datum_status.rejected@enda_51;datum_status.blacklisted@enda_51;"
      "datum_status.use_emiskf_only@enda_51;datum_event1.vertco_missing@enda_51;"
      "datum_event1.obsvalue_missing@enda_51;datum_event1.fg_missing@enda_51;"
      "datum_event1.rdb_rejected@enda_51;datum_event1.assim_cld_flag@enda_51;"
      "datum_event1.bad_practice@enda_51;datum_event1.vertpos_outrange@enda_51;"
      "datum_event1.fg2big@enda_51;datum_event1.depar2big@enda_51;"
      "datum_event1.obs_error2big@enda_51;datum_event1.datum_redundant@enda_51;"
      "datum_event1.level_redundant@enda_51;datum_event1.not_analysis_varno@enda_51;"
      "datum_event1.duplicate@enda_51;datum_event1.levels2many@enda_51;"
      "datum_event1.level_selection@enda_51;datum_event1.vertco_consistency@enda_51;"
      "datum_event1.vertco_type_changed@enda_51;datum_event1.combined_flagging@enda_51;"
      "datum_event1.report_rejected@enda_51;datum_event1.varqc_performed@enda_51;"
      "datum_event1.obserror_increased@enda_51;datum_event1.contam_cld_flag@enda_51;"
      "datum_event1.contam_rain_flag@enda_51;datum_event1.contam_aerosol_flag@enda_51;"
      "datum_event1.bad_emissivity@enda_51;datum_event1.model_cld_flag@enda_51;"
      "datum_event1.contam_trgas_flag@enda_51;datum_event1.land_sensitivity@enda_51;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_51_PREPTAG = T;
    CCMA_nT_enda_51_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_51_PREPTAG;
  return CCMA_T_enda_51_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_51(void *T);
extern int CCMA_Unpack_T_enda_51(void *T);
extern int CCMA_Sel_T_enda_51(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_51);
PrePutTable(CCMA, d, double, enda_51);
PreLoadTable(CCMA, enda_51);
PreStoreTable(CCMA, enda_51);
extern void CCMA_Dim_T_enda_51(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_51(void *T);
extern int CCMA_Sql_T_enda_51(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_51(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_52) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_52" : appearance order#177, hierarchy rank# 201, weight = 358.000177 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_52;

#endif /* defined(IS_a_TABLE_enda_52) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_52)
extern const ODB_Tags *CCMA_Set_T_enda_52_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_52_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_52_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_52_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_52_TAG = 0;
PRIVATE int CCMA_nT_enda_52_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_52_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_52_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_52_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_52"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_52"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_52"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_52"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_52"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_52"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_52"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_52"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_52"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_52"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_52"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_52"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_52"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_52"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_52"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_52"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_52"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_52"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_52"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_52"; T[19].name = s; }
    CCMA_T_enda_52_TAG = T;
    CCMA_nT_enda_52_TAG = ntag;
    CCMA_nT_enda_52_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_52_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_52_MEM;
  return CCMA_T_enda_52_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_52_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_52_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_52;report_status@enda_52;report_event1@enda_52;"
      "obsvalue@enda_52;datum_anflag@enda_52;datum_status@enda_52;"
      "datum_event1@enda_52;biascorr@enda_52;biascorr_fg@enda_52;"
      "an_depar@enda_52;fg_depar@enda_52;qc_pge@enda_52;final_obs_error@enda_52;"
      "obs_error@enda_52;fg_error@enda_52;skintemp_1@enda_52;"
      "skintemp_2@enda_52;skintemp_3@enda_52;skintemp_4@enda_52;"
      "skintemp_5@enda_52;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_52;report_status@enda_52;report_event1@enda_52;"
      "obsvalue@enda_52;datum_anflag@enda_52;datum_status@enda_52;"
      "datum_event1@enda_52;biascorr@enda_52;biascorr_fg@enda_52;"
      "an_depar@enda_52;fg_depar@enda_52;qc_pge@enda_52;final_obs_error@enda_52;"
      "obs_error@enda_52;fg_error@enda_52;skintemp_1@enda_52;"
      "skintemp_2@enda_52;skintemp_3@enda_52;skintemp_4@enda_52;"
      "skintemp_5@enda_52;report_status.active@enda_52;report_status.passive@enda_52;"
      "report_status.rejected@enda_52;report_status.blacklisted@enda_52;"
      "report_status.use_emiskf_only@enda_52;report_event1.no_data@enda_52;"
      "report_event1.all_rejected@enda_52;report_event1.bad_practice@enda_52;"
      "report_event1.rdb_rejected@enda_52;report_event1.redundant@enda_52;"
      "report_event1.stalt_missing@enda_52;report_event1.qc_failed@enda_52;"
      "report_event1.overcast_ir@enda_52;report_event1.thinned@enda_52;"
      "report_event1.latlon_corrected@enda_52;report_event1.stalt_corrected@enda_52;"
      "datum_anflag.final@enda_52;datum_anflag.fg@enda_52;"
      "datum_anflag.depar@enda_52;datum_anflag.varqc@enda_52;"
      "datum_anflag.blacklist@enda_52;datum_anflag.ups@enda_52;"
      "datum_anflag.uvt@enda_52;datum_anflag.uhu@enda_52;"
      "datum_anflag.ut2@enda_52;datum_anflag.uh2@enda_52;"
      "datum_anflag.uv1@enda_52;datum_anflag.urr@enda_52;"
      "datum_anflag.usn@enda_52;datum_anflag.usst@enda_52;"
      "datum_status.active@enda_52;datum_status.passive@enda_52;"
      "datum_status.rejected@enda_52;datum_status.blacklisted@enda_52;"
      "datum_status.use_emiskf_only@enda_52;datum_event1.vertco_missing@enda_52;"
      "datum_event1.obsvalue_missing@enda_52;datum_event1.fg_missing@enda_52;"
      "datum_event1.rdb_rejected@enda_52;datum_event1.assim_cld_flag@enda_52;"
      "datum_event1.bad_practice@enda_52;datum_event1.vertpos_outrange@enda_52;"
      "datum_event1.fg2big@enda_52;datum_event1.depar2big@enda_52;"
      "datum_event1.obs_error2big@enda_52;datum_event1.datum_redundant@enda_52;"
      "datum_event1.level_redundant@enda_52;datum_event1.not_analysis_varno@enda_52;"
      "datum_event1.duplicate@enda_52;datum_event1.levels2many@enda_52;"
      "datum_event1.level_selection@enda_52;datum_event1.vertco_consistency@enda_52;"
      "datum_event1.vertco_type_changed@enda_52;datum_event1.combined_flagging@enda_52;"
      "datum_event1.report_rejected@enda_52;datum_event1.varqc_performed@enda_52;"
      "datum_event1.obserror_increased@enda_52;datum_event1.contam_cld_flag@enda_52;"
      "datum_event1.contam_rain_flag@enda_52;datum_event1.contam_aerosol_flag@enda_52;"
      "datum_event1.bad_emissivity@enda_52;datum_event1.model_cld_flag@enda_52;"
      "datum_event1.contam_trgas_flag@enda_52;datum_event1.land_sensitivity@enda_52;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_52_PREPTAG = T;
    CCMA_nT_enda_52_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_52_PREPTAG;
  return CCMA_T_enda_52_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_52(void *T);
extern int CCMA_Unpack_T_enda_52(void *T);
extern int CCMA_Sel_T_enda_52(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_52);
PrePutTable(CCMA, d, double, enda_52);
PreLoadTable(CCMA, enda_52);
PreStoreTable(CCMA, enda_52);
extern void CCMA_Dim_T_enda_52(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_52(void *T);
extern int CCMA_Sql_T_enda_52(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_52(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_53) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_53" : appearance order#178, hierarchy rank# 202, weight = 358.000178 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_53;

#endif /* defined(IS_a_TABLE_enda_53) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_53)
extern const ODB_Tags *CCMA_Set_T_enda_53_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_53_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_53_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_53_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_53_TAG = 0;
PRIVATE int CCMA_nT_enda_53_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_53_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_53_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_53_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_53"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_53"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_53"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_53"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_53"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_53"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_53"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_53"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_53"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_53"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_53"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_53"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_53"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_53"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_53"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_53"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_53"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_53"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_53"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_53"; T[19].name = s; }
    CCMA_T_enda_53_TAG = T;
    CCMA_nT_enda_53_TAG = ntag;
    CCMA_nT_enda_53_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_53_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_53_MEM;
  return CCMA_T_enda_53_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_53_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_53_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_53;report_status@enda_53;report_event1@enda_53;"
      "obsvalue@enda_53;datum_anflag@enda_53;datum_status@enda_53;"
      "datum_event1@enda_53;biascorr@enda_53;biascorr_fg@enda_53;"
      "an_depar@enda_53;fg_depar@enda_53;qc_pge@enda_53;final_obs_error@enda_53;"
      "obs_error@enda_53;fg_error@enda_53;skintemp_1@enda_53;"
      "skintemp_2@enda_53;skintemp_3@enda_53;skintemp_4@enda_53;"
      "skintemp_5@enda_53;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_53;report_status@enda_53;report_event1@enda_53;"
      "obsvalue@enda_53;datum_anflag@enda_53;datum_status@enda_53;"
      "datum_event1@enda_53;biascorr@enda_53;biascorr_fg@enda_53;"
      "an_depar@enda_53;fg_depar@enda_53;qc_pge@enda_53;final_obs_error@enda_53;"
      "obs_error@enda_53;fg_error@enda_53;skintemp_1@enda_53;"
      "skintemp_2@enda_53;skintemp_3@enda_53;skintemp_4@enda_53;"
      "skintemp_5@enda_53;report_status.active@enda_53;report_status.passive@enda_53;"
      "report_status.rejected@enda_53;report_status.blacklisted@enda_53;"
      "report_status.use_emiskf_only@enda_53;report_event1.no_data@enda_53;"
      "report_event1.all_rejected@enda_53;report_event1.bad_practice@enda_53;"
      "report_event1.rdb_rejected@enda_53;report_event1.redundant@enda_53;"
      "report_event1.stalt_missing@enda_53;report_event1.qc_failed@enda_53;"
      "report_event1.overcast_ir@enda_53;report_event1.thinned@enda_53;"
      "report_event1.latlon_corrected@enda_53;report_event1.stalt_corrected@enda_53;"
      "datum_anflag.final@enda_53;datum_anflag.fg@enda_53;"
      "datum_anflag.depar@enda_53;datum_anflag.varqc@enda_53;"
      "datum_anflag.blacklist@enda_53;datum_anflag.ups@enda_53;"
      "datum_anflag.uvt@enda_53;datum_anflag.uhu@enda_53;"
      "datum_anflag.ut2@enda_53;datum_anflag.uh2@enda_53;"
      "datum_anflag.uv1@enda_53;datum_anflag.urr@enda_53;"
      "datum_anflag.usn@enda_53;datum_anflag.usst@enda_53;"
      "datum_status.active@enda_53;datum_status.passive@enda_53;"
      "datum_status.rejected@enda_53;datum_status.blacklisted@enda_53;"
      "datum_status.use_emiskf_only@enda_53;datum_event1.vertco_missing@enda_53;"
      "datum_event1.obsvalue_missing@enda_53;datum_event1.fg_missing@enda_53;"
      "datum_event1.rdb_rejected@enda_53;datum_event1.assim_cld_flag@enda_53;"
      "datum_event1.bad_practice@enda_53;datum_event1.vertpos_outrange@enda_53;"
      "datum_event1.fg2big@enda_53;datum_event1.depar2big@enda_53;"
      "datum_event1.obs_error2big@enda_53;datum_event1.datum_redundant@enda_53;"
      "datum_event1.level_redundant@enda_53;datum_event1.not_analysis_varno@enda_53;"
      "datum_event1.duplicate@enda_53;datum_event1.levels2many@enda_53;"
      "datum_event1.level_selection@enda_53;datum_event1.vertco_consistency@enda_53;"
      "datum_event1.vertco_type_changed@enda_53;datum_event1.combined_flagging@enda_53;"
      "datum_event1.report_rejected@enda_53;datum_event1.varqc_performed@enda_53;"
      "datum_event1.obserror_increased@enda_53;datum_event1.contam_cld_flag@enda_53;"
      "datum_event1.contam_rain_flag@enda_53;datum_event1.contam_aerosol_flag@enda_53;"
      "datum_event1.bad_emissivity@enda_53;datum_event1.model_cld_flag@enda_53;"
      "datum_event1.contam_trgas_flag@enda_53;datum_event1.land_sensitivity@enda_53;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_53_PREPTAG = T;
    CCMA_nT_enda_53_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_53_PREPTAG;
  return CCMA_T_enda_53_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_53(void *T);
extern int CCMA_Unpack_T_enda_53(void *T);
extern int CCMA_Sel_T_enda_53(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_53);
PrePutTable(CCMA, d, double, enda_53);
PreLoadTable(CCMA, enda_53);
PreStoreTable(CCMA, enda_53);
extern void CCMA_Dim_T_enda_53(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_53(void *T);
extern int CCMA_Sql_T_enda_53(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_53(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_54) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_54" : appearance order#179, hierarchy rank# 203, weight = 358.000179 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_54;

#endif /* defined(IS_a_TABLE_enda_54) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_54)
extern const ODB_Tags *CCMA_Set_T_enda_54_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_54_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_54_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_54_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_54_TAG = 0;
PRIVATE int CCMA_nT_enda_54_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_54_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_54_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_54_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_54"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_54"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_54"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_54"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_54"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_54"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_54"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_54"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_54"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_54"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_54"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_54"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_54"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_54"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_54"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_54"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_54"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_54"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_54"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_54"; T[19].name = s; }
    CCMA_T_enda_54_TAG = T;
    CCMA_nT_enda_54_TAG = ntag;
    CCMA_nT_enda_54_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_54_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_54_MEM;
  return CCMA_T_enda_54_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_54_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_54_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_54;report_status@enda_54;report_event1@enda_54;"
      "obsvalue@enda_54;datum_anflag@enda_54;datum_status@enda_54;"
      "datum_event1@enda_54;biascorr@enda_54;biascorr_fg@enda_54;"
      "an_depar@enda_54;fg_depar@enda_54;qc_pge@enda_54;final_obs_error@enda_54;"
      "obs_error@enda_54;fg_error@enda_54;skintemp_1@enda_54;"
      "skintemp_2@enda_54;skintemp_3@enda_54;skintemp_4@enda_54;"
      "skintemp_5@enda_54;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_54;report_status@enda_54;report_event1@enda_54;"
      "obsvalue@enda_54;datum_anflag@enda_54;datum_status@enda_54;"
      "datum_event1@enda_54;biascorr@enda_54;biascorr_fg@enda_54;"
      "an_depar@enda_54;fg_depar@enda_54;qc_pge@enda_54;final_obs_error@enda_54;"
      "obs_error@enda_54;fg_error@enda_54;skintemp_1@enda_54;"
      "skintemp_2@enda_54;skintemp_3@enda_54;skintemp_4@enda_54;"
      "skintemp_5@enda_54;report_status.active@enda_54;report_status.passive@enda_54;"
      "report_status.rejected@enda_54;report_status.blacklisted@enda_54;"
      "report_status.use_emiskf_only@enda_54;report_event1.no_data@enda_54;"
      "report_event1.all_rejected@enda_54;report_event1.bad_practice@enda_54;"
      "report_event1.rdb_rejected@enda_54;report_event1.redundant@enda_54;"
      "report_event1.stalt_missing@enda_54;report_event1.qc_failed@enda_54;"
      "report_event1.overcast_ir@enda_54;report_event1.thinned@enda_54;"
      "report_event1.latlon_corrected@enda_54;report_event1.stalt_corrected@enda_54;"
      "datum_anflag.final@enda_54;datum_anflag.fg@enda_54;"
      "datum_anflag.depar@enda_54;datum_anflag.varqc@enda_54;"
      "datum_anflag.blacklist@enda_54;datum_anflag.ups@enda_54;"
      "datum_anflag.uvt@enda_54;datum_anflag.uhu@enda_54;"
      "datum_anflag.ut2@enda_54;datum_anflag.uh2@enda_54;"
      "datum_anflag.uv1@enda_54;datum_anflag.urr@enda_54;"
      "datum_anflag.usn@enda_54;datum_anflag.usst@enda_54;"
      "datum_status.active@enda_54;datum_status.passive@enda_54;"
      "datum_status.rejected@enda_54;datum_status.blacklisted@enda_54;"
      "datum_status.use_emiskf_only@enda_54;datum_event1.vertco_missing@enda_54;"
      "datum_event1.obsvalue_missing@enda_54;datum_event1.fg_missing@enda_54;"
      "datum_event1.rdb_rejected@enda_54;datum_event1.assim_cld_flag@enda_54;"
      "datum_event1.bad_practice@enda_54;datum_event1.vertpos_outrange@enda_54;"
      "datum_event1.fg2big@enda_54;datum_event1.depar2big@enda_54;"
      "datum_event1.obs_error2big@enda_54;datum_event1.datum_redundant@enda_54;"
      "datum_event1.level_redundant@enda_54;datum_event1.not_analysis_varno@enda_54;"
      "datum_event1.duplicate@enda_54;datum_event1.levels2many@enda_54;"
      "datum_event1.level_selection@enda_54;datum_event1.vertco_consistency@enda_54;"
      "datum_event1.vertco_type_changed@enda_54;datum_event1.combined_flagging@enda_54;"
      "datum_event1.report_rejected@enda_54;datum_event1.varqc_performed@enda_54;"
      "datum_event1.obserror_increased@enda_54;datum_event1.contam_cld_flag@enda_54;"
      "datum_event1.contam_rain_flag@enda_54;datum_event1.contam_aerosol_flag@enda_54;"
      "datum_event1.bad_emissivity@enda_54;datum_event1.model_cld_flag@enda_54;"
      "datum_event1.contam_trgas_flag@enda_54;datum_event1.land_sensitivity@enda_54;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_54_PREPTAG = T;
    CCMA_nT_enda_54_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_54_PREPTAG;
  return CCMA_T_enda_54_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_54(void *T);
extern int CCMA_Unpack_T_enda_54(void *T);
extern int CCMA_Sel_T_enda_54(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_54);
PrePutTable(CCMA, d, double, enda_54);
PreLoadTable(CCMA, enda_54);
PreStoreTable(CCMA, enda_54);
extern void CCMA_Dim_T_enda_54(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_54(void *T);
extern int CCMA_Sql_T_enda_54(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_54(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_55) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_55" : appearance order#180, hierarchy rank# 204, weight = 358.000180 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_55;

#endif /* defined(IS_a_TABLE_enda_55) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_55)
extern const ODB_Tags *CCMA_Set_T_enda_55_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_55_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_55_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_55_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_55_TAG = 0;
PRIVATE int CCMA_nT_enda_55_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_55_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_55_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_55_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_55"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_55"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_55"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_55"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_55"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_55"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_55"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_55"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_55"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_55"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_55"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_55"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_55"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_55"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_55"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_55"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_55"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_55"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_55"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_55"; T[19].name = s; }
    CCMA_T_enda_55_TAG = T;
    CCMA_nT_enda_55_TAG = ntag;
    CCMA_nT_enda_55_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_55_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_55_MEM;
  return CCMA_T_enda_55_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_55_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_55_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_55;report_status@enda_55;report_event1@enda_55;"
      "obsvalue@enda_55;datum_anflag@enda_55;datum_status@enda_55;"
      "datum_event1@enda_55;biascorr@enda_55;biascorr_fg@enda_55;"
      "an_depar@enda_55;fg_depar@enda_55;qc_pge@enda_55;final_obs_error@enda_55;"
      "obs_error@enda_55;fg_error@enda_55;skintemp_1@enda_55;"
      "skintemp_2@enda_55;skintemp_3@enda_55;skintemp_4@enda_55;"
      "skintemp_5@enda_55;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_55;report_status@enda_55;report_event1@enda_55;"
      "obsvalue@enda_55;datum_anflag@enda_55;datum_status@enda_55;"
      "datum_event1@enda_55;biascorr@enda_55;biascorr_fg@enda_55;"
      "an_depar@enda_55;fg_depar@enda_55;qc_pge@enda_55;final_obs_error@enda_55;"
      "obs_error@enda_55;fg_error@enda_55;skintemp_1@enda_55;"
      "skintemp_2@enda_55;skintemp_3@enda_55;skintemp_4@enda_55;"
      "skintemp_5@enda_55;report_status.active@enda_55;report_status.passive@enda_55;"
      "report_status.rejected@enda_55;report_status.blacklisted@enda_55;"
      "report_status.use_emiskf_only@enda_55;report_event1.no_data@enda_55;"
      "report_event1.all_rejected@enda_55;report_event1.bad_practice@enda_55;"
      "report_event1.rdb_rejected@enda_55;report_event1.redundant@enda_55;"
      "report_event1.stalt_missing@enda_55;report_event1.qc_failed@enda_55;"
      "report_event1.overcast_ir@enda_55;report_event1.thinned@enda_55;"
      "report_event1.latlon_corrected@enda_55;report_event1.stalt_corrected@enda_55;"
      "datum_anflag.final@enda_55;datum_anflag.fg@enda_55;"
      "datum_anflag.depar@enda_55;datum_anflag.varqc@enda_55;"
      "datum_anflag.blacklist@enda_55;datum_anflag.ups@enda_55;"
      "datum_anflag.uvt@enda_55;datum_anflag.uhu@enda_55;"
      "datum_anflag.ut2@enda_55;datum_anflag.uh2@enda_55;"
      "datum_anflag.uv1@enda_55;datum_anflag.urr@enda_55;"
      "datum_anflag.usn@enda_55;datum_anflag.usst@enda_55;"
      "datum_status.active@enda_55;datum_status.passive@enda_55;"
      "datum_status.rejected@enda_55;datum_status.blacklisted@enda_55;"
      "datum_status.use_emiskf_only@enda_55;datum_event1.vertco_missing@enda_55;"
      "datum_event1.obsvalue_missing@enda_55;datum_event1.fg_missing@enda_55;"
      "datum_event1.rdb_rejected@enda_55;datum_event1.assim_cld_flag@enda_55;"
      "datum_event1.bad_practice@enda_55;datum_event1.vertpos_outrange@enda_55;"
      "datum_event1.fg2big@enda_55;datum_event1.depar2big@enda_55;"
      "datum_event1.obs_error2big@enda_55;datum_event1.datum_redundant@enda_55;"
      "datum_event1.level_redundant@enda_55;datum_event1.not_analysis_varno@enda_55;"
      "datum_event1.duplicate@enda_55;datum_event1.levels2many@enda_55;"
      "datum_event1.level_selection@enda_55;datum_event1.vertco_consistency@enda_55;"
      "datum_event1.vertco_type_changed@enda_55;datum_event1.combined_flagging@enda_55;"
      "datum_event1.report_rejected@enda_55;datum_event1.varqc_performed@enda_55;"
      "datum_event1.obserror_increased@enda_55;datum_event1.contam_cld_flag@enda_55;"
      "datum_event1.contam_rain_flag@enda_55;datum_event1.contam_aerosol_flag@enda_55;"
      "datum_event1.bad_emissivity@enda_55;datum_event1.model_cld_flag@enda_55;"
      "datum_event1.contam_trgas_flag@enda_55;datum_event1.land_sensitivity@enda_55;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_55_PREPTAG = T;
    CCMA_nT_enda_55_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_55_PREPTAG;
  return CCMA_T_enda_55_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_55(void *T);
extern int CCMA_Unpack_T_enda_55(void *T);
extern int CCMA_Sel_T_enda_55(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_55);
PrePutTable(CCMA, d, double, enda_55);
PreLoadTable(CCMA, enda_55);
PreStoreTable(CCMA, enda_55);
extern void CCMA_Dim_T_enda_55(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_55(void *T);
extern int CCMA_Sql_T_enda_55(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_55(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_56) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_56" : appearance order#181, hierarchy rank# 205, weight = 358.000181 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_56;

#endif /* defined(IS_a_TABLE_enda_56) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_56)
extern const ODB_Tags *CCMA_Set_T_enda_56_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_56_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_56_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_56_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_56_TAG = 0;
PRIVATE int CCMA_nT_enda_56_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_56_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_56_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_56_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_56"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_56"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_56"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_56"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_56"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_56"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_56"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_56"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_56"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_56"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_56"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_56"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_56"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_56"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_56"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_56"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_56"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_56"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_56"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_56"; T[19].name = s; }
    CCMA_T_enda_56_TAG = T;
    CCMA_nT_enda_56_TAG = ntag;
    CCMA_nT_enda_56_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_56_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_56_MEM;
  return CCMA_T_enda_56_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_56_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_56_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_56;report_status@enda_56;report_event1@enda_56;"
      "obsvalue@enda_56;datum_anflag@enda_56;datum_status@enda_56;"
      "datum_event1@enda_56;biascorr@enda_56;biascorr_fg@enda_56;"
      "an_depar@enda_56;fg_depar@enda_56;qc_pge@enda_56;final_obs_error@enda_56;"
      "obs_error@enda_56;fg_error@enda_56;skintemp_1@enda_56;"
      "skintemp_2@enda_56;skintemp_3@enda_56;skintemp_4@enda_56;"
      "skintemp_5@enda_56;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_56;report_status@enda_56;report_event1@enda_56;"
      "obsvalue@enda_56;datum_anflag@enda_56;datum_status@enda_56;"
      "datum_event1@enda_56;biascorr@enda_56;biascorr_fg@enda_56;"
      "an_depar@enda_56;fg_depar@enda_56;qc_pge@enda_56;final_obs_error@enda_56;"
      "obs_error@enda_56;fg_error@enda_56;skintemp_1@enda_56;"
      "skintemp_2@enda_56;skintemp_3@enda_56;skintemp_4@enda_56;"
      "skintemp_5@enda_56;report_status.active@enda_56;report_status.passive@enda_56;"
      "report_status.rejected@enda_56;report_status.blacklisted@enda_56;"
      "report_status.use_emiskf_only@enda_56;report_event1.no_data@enda_56;"
      "report_event1.all_rejected@enda_56;report_event1.bad_practice@enda_56;"
      "report_event1.rdb_rejected@enda_56;report_event1.redundant@enda_56;"
      "report_event1.stalt_missing@enda_56;report_event1.qc_failed@enda_56;"
      "report_event1.overcast_ir@enda_56;report_event1.thinned@enda_56;"
      "report_event1.latlon_corrected@enda_56;report_event1.stalt_corrected@enda_56;"
      "datum_anflag.final@enda_56;datum_anflag.fg@enda_56;"
      "datum_anflag.depar@enda_56;datum_anflag.varqc@enda_56;"
      "datum_anflag.blacklist@enda_56;datum_anflag.ups@enda_56;"
      "datum_anflag.uvt@enda_56;datum_anflag.uhu@enda_56;"
      "datum_anflag.ut2@enda_56;datum_anflag.uh2@enda_56;"
      "datum_anflag.uv1@enda_56;datum_anflag.urr@enda_56;"
      "datum_anflag.usn@enda_56;datum_anflag.usst@enda_56;"
      "datum_status.active@enda_56;datum_status.passive@enda_56;"
      "datum_status.rejected@enda_56;datum_status.blacklisted@enda_56;"
      "datum_status.use_emiskf_only@enda_56;datum_event1.vertco_missing@enda_56;"
      "datum_event1.obsvalue_missing@enda_56;datum_event1.fg_missing@enda_56;"
      "datum_event1.rdb_rejected@enda_56;datum_event1.assim_cld_flag@enda_56;"
      "datum_event1.bad_practice@enda_56;datum_event1.vertpos_outrange@enda_56;"
      "datum_event1.fg2big@enda_56;datum_event1.depar2big@enda_56;"
      "datum_event1.obs_error2big@enda_56;datum_event1.datum_redundant@enda_56;"
      "datum_event1.level_redundant@enda_56;datum_event1.not_analysis_varno@enda_56;"
      "datum_event1.duplicate@enda_56;datum_event1.levels2many@enda_56;"
      "datum_event1.level_selection@enda_56;datum_event1.vertco_consistency@enda_56;"
      "datum_event1.vertco_type_changed@enda_56;datum_event1.combined_flagging@enda_56;"
      "datum_event1.report_rejected@enda_56;datum_event1.varqc_performed@enda_56;"
      "datum_event1.obserror_increased@enda_56;datum_event1.contam_cld_flag@enda_56;"
      "datum_event1.contam_rain_flag@enda_56;datum_event1.contam_aerosol_flag@enda_56;"
      "datum_event1.bad_emissivity@enda_56;datum_event1.model_cld_flag@enda_56;"
      "datum_event1.contam_trgas_flag@enda_56;datum_event1.land_sensitivity@enda_56;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_56_PREPTAG = T;
    CCMA_nT_enda_56_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_56_PREPTAG;
  return CCMA_T_enda_56_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_56(void *T);
extern int CCMA_Unpack_T_enda_56(void *T);
extern int CCMA_Sel_T_enda_56(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_56);
PrePutTable(CCMA, d, double, enda_56);
PreLoadTable(CCMA, enda_56);
PreStoreTable(CCMA, enda_56);
extern void CCMA_Dim_T_enda_56(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_56(void *T);
extern int CCMA_Sql_T_enda_56(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_56(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_57) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_57" : appearance order#182, hierarchy rank# 206, weight = 358.000182 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_57;

#endif /* defined(IS_a_TABLE_enda_57) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_57)
extern const ODB_Tags *CCMA_Set_T_enda_57_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_57_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_57_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_57_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_57_TAG = 0;
PRIVATE int CCMA_nT_enda_57_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_57_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_57_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_57_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_57"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_57"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_57"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_57"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_57"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_57"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_57"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_57"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_57"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_57"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_57"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_57"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_57"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_57"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_57"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_57"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_57"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_57"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_57"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_57"; T[19].name = s; }
    CCMA_T_enda_57_TAG = T;
    CCMA_nT_enda_57_TAG = ntag;
    CCMA_nT_enda_57_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_57_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_57_MEM;
  return CCMA_T_enda_57_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_57_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_57_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_57;report_status@enda_57;report_event1@enda_57;"
      "obsvalue@enda_57;datum_anflag@enda_57;datum_status@enda_57;"
      "datum_event1@enda_57;biascorr@enda_57;biascorr_fg@enda_57;"
      "an_depar@enda_57;fg_depar@enda_57;qc_pge@enda_57;final_obs_error@enda_57;"
      "obs_error@enda_57;fg_error@enda_57;skintemp_1@enda_57;"
      "skintemp_2@enda_57;skintemp_3@enda_57;skintemp_4@enda_57;"
      "skintemp_5@enda_57;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_57;report_status@enda_57;report_event1@enda_57;"
      "obsvalue@enda_57;datum_anflag@enda_57;datum_status@enda_57;"
      "datum_event1@enda_57;biascorr@enda_57;biascorr_fg@enda_57;"
      "an_depar@enda_57;fg_depar@enda_57;qc_pge@enda_57;final_obs_error@enda_57;"
      "obs_error@enda_57;fg_error@enda_57;skintemp_1@enda_57;"
      "skintemp_2@enda_57;skintemp_3@enda_57;skintemp_4@enda_57;"
      "skintemp_5@enda_57;report_status.active@enda_57;report_status.passive@enda_57;"
      "report_status.rejected@enda_57;report_status.blacklisted@enda_57;"
      "report_status.use_emiskf_only@enda_57;report_event1.no_data@enda_57;"
      "report_event1.all_rejected@enda_57;report_event1.bad_practice@enda_57;"
      "report_event1.rdb_rejected@enda_57;report_event1.redundant@enda_57;"
      "report_event1.stalt_missing@enda_57;report_event1.qc_failed@enda_57;"
      "report_event1.overcast_ir@enda_57;report_event1.thinned@enda_57;"
      "report_event1.latlon_corrected@enda_57;report_event1.stalt_corrected@enda_57;"
      "datum_anflag.final@enda_57;datum_anflag.fg@enda_57;"
      "datum_anflag.depar@enda_57;datum_anflag.varqc@enda_57;"
      "datum_anflag.blacklist@enda_57;datum_anflag.ups@enda_57;"
      "datum_anflag.uvt@enda_57;datum_anflag.uhu@enda_57;"
      "datum_anflag.ut2@enda_57;datum_anflag.uh2@enda_57;"
      "datum_anflag.uv1@enda_57;datum_anflag.urr@enda_57;"
      "datum_anflag.usn@enda_57;datum_anflag.usst@enda_57;"
      "datum_status.active@enda_57;datum_status.passive@enda_57;"
      "datum_status.rejected@enda_57;datum_status.blacklisted@enda_57;"
      "datum_status.use_emiskf_only@enda_57;datum_event1.vertco_missing@enda_57;"
      "datum_event1.obsvalue_missing@enda_57;datum_event1.fg_missing@enda_57;"
      "datum_event1.rdb_rejected@enda_57;datum_event1.assim_cld_flag@enda_57;"
      "datum_event1.bad_practice@enda_57;datum_event1.vertpos_outrange@enda_57;"
      "datum_event1.fg2big@enda_57;datum_event1.depar2big@enda_57;"
      "datum_event1.obs_error2big@enda_57;datum_event1.datum_redundant@enda_57;"
      "datum_event1.level_redundant@enda_57;datum_event1.not_analysis_varno@enda_57;"
      "datum_event1.duplicate@enda_57;datum_event1.levels2many@enda_57;"
      "datum_event1.level_selection@enda_57;datum_event1.vertco_consistency@enda_57;"
      "datum_event1.vertco_type_changed@enda_57;datum_event1.combined_flagging@enda_57;"
      "datum_event1.report_rejected@enda_57;datum_event1.varqc_performed@enda_57;"
      "datum_event1.obserror_increased@enda_57;datum_event1.contam_cld_flag@enda_57;"
      "datum_event1.contam_rain_flag@enda_57;datum_event1.contam_aerosol_flag@enda_57;"
      "datum_event1.bad_emissivity@enda_57;datum_event1.model_cld_flag@enda_57;"
      "datum_event1.contam_trgas_flag@enda_57;datum_event1.land_sensitivity@enda_57;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_57_PREPTAG = T;
    CCMA_nT_enda_57_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_57_PREPTAG;
  return CCMA_T_enda_57_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_57(void *T);
extern int CCMA_Unpack_T_enda_57(void *T);
extern int CCMA_Sel_T_enda_57(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_57);
PrePutTable(CCMA, d, double, enda_57);
PreLoadTable(CCMA, enda_57);
PreStoreTable(CCMA, enda_57);
extern void CCMA_Dim_T_enda_57(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_57(void *T);
extern int CCMA_Sql_T_enda_57(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_57(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_58) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_58" : appearance order#183, hierarchy rank# 207, weight = 358.000183 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_58;

#endif /* defined(IS_a_TABLE_enda_58) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_58)
extern const ODB_Tags *CCMA_Set_T_enda_58_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_58_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_58_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_58_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_58_TAG = 0;
PRIVATE int CCMA_nT_enda_58_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_58_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_58_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_58_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_58"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_58"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_58"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_58"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_58"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_58"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_58"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_58"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_58"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_58"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_58"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_58"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_58"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_58"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_58"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_58"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_58"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_58"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_58"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_58"; T[19].name = s; }
    CCMA_T_enda_58_TAG = T;
    CCMA_nT_enda_58_TAG = ntag;
    CCMA_nT_enda_58_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_58_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_58_MEM;
  return CCMA_T_enda_58_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_58_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_58_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_58;report_status@enda_58;report_event1@enda_58;"
      "obsvalue@enda_58;datum_anflag@enda_58;datum_status@enda_58;"
      "datum_event1@enda_58;biascorr@enda_58;biascorr_fg@enda_58;"
      "an_depar@enda_58;fg_depar@enda_58;qc_pge@enda_58;final_obs_error@enda_58;"
      "obs_error@enda_58;fg_error@enda_58;skintemp_1@enda_58;"
      "skintemp_2@enda_58;skintemp_3@enda_58;skintemp_4@enda_58;"
      "skintemp_5@enda_58;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_58;report_status@enda_58;report_event1@enda_58;"
      "obsvalue@enda_58;datum_anflag@enda_58;datum_status@enda_58;"
      "datum_event1@enda_58;biascorr@enda_58;biascorr_fg@enda_58;"
      "an_depar@enda_58;fg_depar@enda_58;qc_pge@enda_58;final_obs_error@enda_58;"
      "obs_error@enda_58;fg_error@enda_58;skintemp_1@enda_58;"
      "skintemp_2@enda_58;skintemp_3@enda_58;skintemp_4@enda_58;"
      "skintemp_5@enda_58;report_status.active@enda_58;report_status.passive@enda_58;"
      "report_status.rejected@enda_58;report_status.blacklisted@enda_58;"
      "report_status.use_emiskf_only@enda_58;report_event1.no_data@enda_58;"
      "report_event1.all_rejected@enda_58;report_event1.bad_practice@enda_58;"
      "report_event1.rdb_rejected@enda_58;report_event1.redundant@enda_58;"
      "report_event1.stalt_missing@enda_58;report_event1.qc_failed@enda_58;"
      "report_event1.overcast_ir@enda_58;report_event1.thinned@enda_58;"
      "report_event1.latlon_corrected@enda_58;report_event1.stalt_corrected@enda_58;"
      "datum_anflag.final@enda_58;datum_anflag.fg@enda_58;"
      "datum_anflag.depar@enda_58;datum_anflag.varqc@enda_58;"
      "datum_anflag.blacklist@enda_58;datum_anflag.ups@enda_58;"
      "datum_anflag.uvt@enda_58;datum_anflag.uhu@enda_58;"
      "datum_anflag.ut2@enda_58;datum_anflag.uh2@enda_58;"
      "datum_anflag.uv1@enda_58;datum_anflag.urr@enda_58;"
      "datum_anflag.usn@enda_58;datum_anflag.usst@enda_58;"
      "datum_status.active@enda_58;datum_status.passive@enda_58;"
      "datum_status.rejected@enda_58;datum_status.blacklisted@enda_58;"
      "datum_status.use_emiskf_only@enda_58;datum_event1.vertco_missing@enda_58;"
      "datum_event1.obsvalue_missing@enda_58;datum_event1.fg_missing@enda_58;"
      "datum_event1.rdb_rejected@enda_58;datum_event1.assim_cld_flag@enda_58;"
      "datum_event1.bad_practice@enda_58;datum_event1.vertpos_outrange@enda_58;"
      "datum_event1.fg2big@enda_58;datum_event1.depar2big@enda_58;"
      "datum_event1.obs_error2big@enda_58;datum_event1.datum_redundant@enda_58;"
      "datum_event1.level_redundant@enda_58;datum_event1.not_analysis_varno@enda_58;"
      "datum_event1.duplicate@enda_58;datum_event1.levels2many@enda_58;"
      "datum_event1.level_selection@enda_58;datum_event1.vertco_consistency@enda_58;"
      "datum_event1.vertco_type_changed@enda_58;datum_event1.combined_flagging@enda_58;"
      "datum_event1.report_rejected@enda_58;datum_event1.varqc_performed@enda_58;"
      "datum_event1.obserror_increased@enda_58;datum_event1.contam_cld_flag@enda_58;"
      "datum_event1.contam_rain_flag@enda_58;datum_event1.contam_aerosol_flag@enda_58;"
      "datum_event1.bad_emissivity@enda_58;datum_event1.model_cld_flag@enda_58;"
      "datum_event1.contam_trgas_flag@enda_58;datum_event1.land_sensitivity@enda_58;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_58_PREPTAG = T;
    CCMA_nT_enda_58_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_58_PREPTAG;
  return CCMA_T_enda_58_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_58(void *T);
extern int CCMA_Unpack_T_enda_58(void *T);
extern int CCMA_Sel_T_enda_58(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_58);
PrePutTable(CCMA, d, double, enda_58);
PreLoadTable(CCMA, enda_58);
PreStoreTable(CCMA, enda_58);
extern void CCMA_Dim_T_enda_58(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_58(void *T);
extern int CCMA_Sql_T_enda_58(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_58(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_59) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_59" : appearance order#184, hierarchy rank# 208, weight = 358.000184 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_59;

#endif /* defined(IS_a_TABLE_enda_59) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_59)
extern const ODB_Tags *CCMA_Set_T_enda_59_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_59_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_59_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_59_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_59_TAG = 0;
PRIVATE int CCMA_nT_enda_59_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_59_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_59_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_59_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_59"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_59"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_59"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_59"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_59"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_59"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_59"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_59"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_59"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_59"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_59"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_59"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_59"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_59"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_59"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_59"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_59"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_59"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_59"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_59"; T[19].name = s; }
    CCMA_T_enda_59_TAG = T;
    CCMA_nT_enda_59_TAG = ntag;
    CCMA_nT_enda_59_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_59_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_59_MEM;
  return CCMA_T_enda_59_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_59_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_59_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_59;report_status@enda_59;report_event1@enda_59;"
      "obsvalue@enda_59;datum_anflag@enda_59;datum_status@enda_59;"
      "datum_event1@enda_59;biascorr@enda_59;biascorr_fg@enda_59;"
      "an_depar@enda_59;fg_depar@enda_59;qc_pge@enda_59;final_obs_error@enda_59;"
      "obs_error@enda_59;fg_error@enda_59;skintemp_1@enda_59;"
      "skintemp_2@enda_59;skintemp_3@enda_59;skintemp_4@enda_59;"
      "skintemp_5@enda_59;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_59;report_status@enda_59;report_event1@enda_59;"
      "obsvalue@enda_59;datum_anflag@enda_59;datum_status@enda_59;"
      "datum_event1@enda_59;biascorr@enda_59;biascorr_fg@enda_59;"
      "an_depar@enda_59;fg_depar@enda_59;qc_pge@enda_59;final_obs_error@enda_59;"
      "obs_error@enda_59;fg_error@enda_59;skintemp_1@enda_59;"
      "skintemp_2@enda_59;skintemp_3@enda_59;skintemp_4@enda_59;"
      "skintemp_5@enda_59;report_status.active@enda_59;report_status.passive@enda_59;"
      "report_status.rejected@enda_59;report_status.blacklisted@enda_59;"
      "report_status.use_emiskf_only@enda_59;report_event1.no_data@enda_59;"
      "report_event1.all_rejected@enda_59;report_event1.bad_practice@enda_59;"
      "report_event1.rdb_rejected@enda_59;report_event1.redundant@enda_59;"
      "report_event1.stalt_missing@enda_59;report_event1.qc_failed@enda_59;"
      "report_event1.overcast_ir@enda_59;report_event1.thinned@enda_59;"
      "report_event1.latlon_corrected@enda_59;report_event1.stalt_corrected@enda_59;"
      "datum_anflag.final@enda_59;datum_anflag.fg@enda_59;"
      "datum_anflag.depar@enda_59;datum_anflag.varqc@enda_59;"
      "datum_anflag.blacklist@enda_59;datum_anflag.ups@enda_59;"
      "datum_anflag.uvt@enda_59;datum_anflag.uhu@enda_59;"
      "datum_anflag.ut2@enda_59;datum_anflag.uh2@enda_59;"
      "datum_anflag.uv1@enda_59;datum_anflag.urr@enda_59;"
      "datum_anflag.usn@enda_59;datum_anflag.usst@enda_59;"
      "datum_status.active@enda_59;datum_status.passive@enda_59;"
      "datum_status.rejected@enda_59;datum_status.blacklisted@enda_59;"
      "datum_status.use_emiskf_only@enda_59;datum_event1.vertco_missing@enda_59;"
      "datum_event1.obsvalue_missing@enda_59;datum_event1.fg_missing@enda_59;"
      "datum_event1.rdb_rejected@enda_59;datum_event1.assim_cld_flag@enda_59;"
      "datum_event1.bad_practice@enda_59;datum_event1.vertpos_outrange@enda_59;"
      "datum_event1.fg2big@enda_59;datum_event1.depar2big@enda_59;"
      "datum_event1.obs_error2big@enda_59;datum_event1.datum_redundant@enda_59;"
      "datum_event1.level_redundant@enda_59;datum_event1.not_analysis_varno@enda_59;"
      "datum_event1.duplicate@enda_59;datum_event1.levels2many@enda_59;"
      "datum_event1.level_selection@enda_59;datum_event1.vertco_consistency@enda_59;"
      "datum_event1.vertco_type_changed@enda_59;datum_event1.combined_flagging@enda_59;"
      "datum_event1.report_rejected@enda_59;datum_event1.varqc_performed@enda_59;"
      "datum_event1.obserror_increased@enda_59;datum_event1.contam_cld_flag@enda_59;"
      "datum_event1.contam_rain_flag@enda_59;datum_event1.contam_aerosol_flag@enda_59;"
      "datum_event1.bad_emissivity@enda_59;datum_event1.model_cld_flag@enda_59;"
      "datum_event1.contam_trgas_flag@enda_59;datum_event1.land_sensitivity@enda_59;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_59_PREPTAG = T;
    CCMA_nT_enda_59_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_59_PREPTAG;
  return CCMA_T_enda_59_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_59(void *T);
extern int CCMA_Unpack_T_enda_59(void *T);
extern int CCMA_Sel_T_enda_59(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_59);
PrePutTable(CCMA, d, double, enda_59);
PreLoadTable(CCMA, enda_59);
PreStoreTable(CCMA, enda_59);
extern void CCMA_Dim_T_enda_59(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_59(void *T);
extern int CCMA_Sql_T_enda_59(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_59(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_60) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_60" : appearance order#185, hierarchy rank# 209, weight = 358.000185 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_60;

#endif /* defined(IS_a_TABLE_enda_60) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_60)
extern const ODB_Tags *CCMA_Set_T_enda_60_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_60_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_60_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_60_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_60_TAG = 0;
PRIVATE int CCMA_nT_enda_60_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_60_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_60_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_60_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_60"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_60"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_60"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_60"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_60"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_60"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_60"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_60"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_60"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_60"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_60"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_60"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_60"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_60"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_60"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_60"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_60"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_60"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_60"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_60"; T[19].name = s; }
    CCMA_T_enda_60_TAG = T;
    CCMA_nT_enda_60_TAG = ntag;
    CCMA_nT_enda_60_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_60_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_60_MEM;
  return CCMA_T_enda_60_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_60_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_60_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_60;report_status@enda_60;report_event1@enda_60;"
      "obsvalue@enda_60;datum_anflag@enda_60;datum_status@enda_60;"
      "datum_event1@enda_60;biascorr@enda_60;biascorr_fg@enda_60;"
      "an_depar@enda_60;fg_depar@enda_60;qc_pge@enda_60;final_obs_error@enda_60;"
      "obs_error@enda_60;fg_error@enda_60;skintemp_1@enda_60;"
      "skintemp_2@enda_60;skintemp_3@enda_60;skintemp_4@enda_60;"
      "skintemp_5@enda_60;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_60;report_status@enda_60;report_event1@enda_60;"
      "obsvalue@enda_60;datum_anflag@enda_60;datum_status@enda_60;"
      "datum_event1@enda_60;biascorr@enda_60;biascorr_fg@enda_60;"
      "an_depar@enda_60;fg_depar@enda_60;qc_pge@enda_60;final_obs_error@enda_60;"
      "obs_error@enda_60;fg_error@enda_60;skintemp_1@enda_60;"
      "skintemp_2@enda_60;skintemp_3@enda_60;skintemp_4@enda_60;"
      "skintemp_5@enda_60;report_status.active@enda_60;report_status.passive@enda_60;"
      "report_status.rejected@enda_60;report_status.blacklisted@enda_60;"
      "report_status.use_emiskf_only@enda_60;report_event1.no_data@enda_60;"
      "report_event1.all_rejected@enda_60;report_event1.bad_practice@enda_60;"
      "report_event1.rdb_rejected@enda_60;report_event1.redundant@enda_60;"
      "report_event1.stalt_missing@enda_60;report_event1.qc_failed@enda_60;"
      "report_event1.overcast_ir@enda_60;report_event1.thinned@enda_60;"
      "report_event1.latlon_corrected@enda_60;report_event1.stalt_corrected@enda_60;"
      "datum_anflag.final@enda_60;datum_anflag.fg@enda_60;"
      "datum_anflag.depar@enda_60;datum_anflag.varqc@enda_60;"
      "datum_anflag.blacklist@enda_60;datum_anflag.ups@enda_60;"
      "datum_anflag.uvt@enda_60;datum_anflag.uhu@enda_60;"
      "datum_anflag.ut2@enda_60;datum_anflag.uh2@enda_60;"
      "datum_anflag.uv1@enda_60;datum_anflag.urr@enda_60;"
      "datum_anflag.usn@enda_60;datum_anflag.usst@enda_60;"
      "datum_status.active@enda_60;datum_status.passive@enda_60;"
      "datum_status.rejected@enda_60;datum_status.blacklisted@enda_60;"
      "datum_status.use_emiskf_only@enda_60;datum_event1.vertco_missing@enda_60;"
      "datum_event1.obsvalue_missing@enda_60;datum_event1.fg_missing@enda_60;"
      "datum_event1.rdb_rejected@enda_60;datum_event1.assim_cld_flag@enda_60;"
      "datum_event1.bad_practice@enda_60;datum_event1.vertpos_outrange@enda_60;"
      "datum_event1.fg2big@enda_60;datum_event1.depar2big@enda_60;"
      "datum_event1.obs_error2big@enda_60;datum_event1.datum_redundant@enda_60;"
      "datum_event1.level_redundant@enda_60;datum_event1.not_analysis_varno@enda_60;"
      "datum_event1.duplicate@enda_60;datum_event1.levels2many@enda_60;"
      "datum_event1.level_selection@enda_60;datum_event1.vertco_consistency@enda_60;"
      "datum_event1.vertco_type_changed@enda_60;datum_event1.combined_flagging@enda_60;"
      "datum_event1.report_rejected@enda_60;datum_event1.varqc_performed@enda_60;"
      "datum_event1.obserror_increased@enda_60;datum_event1.contam_cld_flag@enda_60;"
      "datum_event1.contam_rain_flag@enda_60;datum_event1.contam_aerosol_flag@enda_60;"
      "datum_event1.bad_emissivity@enda_60;datum_event1.model_cld_flag@enda_60;"
      "datum_event1.contam_trgas_flag@enda_60;datum_event1.land_sensitivity@enda_60;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_60_PREPTAG = T;
    CCMA_nT_enda_60_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_60_PREPTAG;
  return CCMA_T_enda_60_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_60(void *T);
extern int CCMA_Unpack_T_enda_60(void *T);
extern int CCMA_Sel_T_enda_60(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_60);
PrePutTable(CCMA, d, double, enda_60);
PreLoadTable(CCMA, enda_60);
PreStoreTable(CCMA, enda_60);
extern void CCMA_Dim_T_enda_60(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_60(void *T);
extern int CCMA_Sql_T_enda_60(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_60(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_61) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_61" : appearance order#186, hierarchy rank# 210, weight = 358.000186 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_61;

#endif /* defined(IS_a_TABLE_enda_61) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_61)
extern const ODB_Tags *CCMA_Set_T_enda_61_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_61_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_61_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_61_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_61_TAG = 0;
PRIVATE int CCMA_nT_enda_61_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_61_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_61_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_61_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_61"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_61"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_61"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_61"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_61"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_61"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_61"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_61"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_61"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_61"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_61"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_61"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_61"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_61"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_61"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_61"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_61"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_61"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_61"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_61"; T[19].name = s; }
    CCMA_T_enda_61_TAG = T;
    CCMA_nT_enda_61_TAG = ntag;
    CCMA_nT_enda_61_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_61_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_61_MEM;
  return CCMA_T_enda_61_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_61_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_61_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_61;report_status@enda_61;report_event1@enda_61;"
      "obsvalue@enda_61;datum_anflag@enda_61;datum_status@enda_61;"
      "datum_event1@enda_61;biascorr@enda_61;biascorr_fg@enda_61;"
      "an_depar@enda_61;fg_depar@enda_61;qc_pge@enda_61;final_obs_error@enda_61;"
      "obs_error@enda_61;fg_error@enda_61;skintemp_1@enda_61;"
      "skintemp_2@enda_61;skintemp_3@enda_61;skintemp_4@enda_61;"
      "skintemp_5@enda_61;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_61;report_status@enda_61;report_event1@enda_61;"
      "obsvalue@enda_61;datum_anflag@enda_61;datum_status@enda_61;"
      "datum_event1@enda_61;biascorr@enda_61;biascorr_fg@enda_61;"
      "an_depar@enda_61;fg_depar@enda_61;qc_pge@enda_61;final_obs_error@enda_61;"
      "obs_error@enda_61;fg_error@enda_61;skintemp_1@enda_61;"
      "skintemp_2@enda_61;skintemp_3@enda_61;skintemp_4@enda_61;"
      "skintemp_5@enda_61;report_status.active@enda_61;report_status.passive@enda_61;"
      "report_status.rejected@enda_61;report_status.blacklisted@enda_61;"
      "report_status.use_emiskf_only@enda_61;report_event1.no_data@enda_61;"
      "report_event1.all_rejected@enda_61;report_event1.bad_practice@enda_61;"
      "report_event1.rdb_rejected@enda_61;report_event1.redundant@enda_61;"
      "report_event1.stalt_missing@enda_61;report_event1.qc_failed@enda_61;"
      "report_event1.overcast_ir@enda_61;report_event1.thinned@enda_61;"
      "report_event1.latlon_corrected@enda_61;report_event1.stalt_corrected@enda_61;"
      "datum_anflag.final@enda_61;datum_anflag.fg@enda_61;"
      "datum_anflag.depar@enda_61;datum_anflag.varqc@enda_61;"
      "datum_anflag.blacklist@enda_61;datum_anflag.ups@enda_61;"
      "datum_anflag.uvt@enda_61;datum_anflag.uhu@enda_61;"
      "datum_anflag.ut2@enda_61;datum_anflag.uh2@enda_61;"
      "datum_anflag.uv1@enda_61;datum_anflag.urr@enda_61;"
      "datum_anflag.usn@enda_61;datum_anflag.usst@enda_61;"
      "datum_status.active@enda_61;datum_status.passive@enda_61;"
      "datum_status.rejected@enda_61;datum_status.blacklisted@enda_61;"
      "datum_status.use_emiskf_only@enda_61;datum_event1.vertco_missing@enda_61;"
      "datum_event1.obsvalue_missing@enda_61;datum_event1.fg_missing@enda_61;"
      "datum_event1.rdb_rejected@enda_61;datum_event1.assim_cld_flag@enda_61;"
      "datum_event1.bad_practice@enda_61;datum_event1.vertpos_outrange@enda_61;"
      "datum_event1.fg2big@enda_61;datum_event1.depar2big@enda_61;"
      "datum_event1.obs_error2big@enda_61;datum_event1.datum_redundant@enda_61;"
      "datum_event1.level_redundant@enda_61;datum_event1.not_analysis_varno@enda_61;"
      "datum_event1.duplicate@enda_61;datum_event1.levels2many@enda_61;"
      "datum_event1.level_selection@enda_61;datum_event1.vertco_consistency@enda_61;"
      "datum_event1.vertco_type_changed@enda_61;datum_event1.combined_flagging@enda_61;"
      "datum_event1.report_rejected@enda_61;datum_event1.varqc_performed@enda_61;"
      "datum_event1.obserror_increased@enda_61;datum_event1.contam_cld_flag@enda_61;"
      "datum_event1.contam_rain_flag@enda_61;datum_event1.contam_aerosol_flag@enda_61;"
      "datum_event1.bad_emissivity@enda_61;datum_event1.model_cld_flag@enda_61;"
      "datum_event1.contam_trgas_flag@enda_61;datum_event1.land_sensitivity@enda_61;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_61_PREPTAG = T;
    CCMA_nT_enda_61_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_61_PREPTAG;
  return CCMA_T_enda_61_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_61(void *T);
extern int CCMA_Unpack_T_enda_61(void *T);
extern int CCMA_Sel_T_enda_61(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_61);
PrePutTable(CCMA, d, double, enda_61);
PreLoadTable(CCMA, enda_61);
PreStoreTable(CCMA, enda_61);
extern void CCMA_Dim_T_enda_61(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_61(void *T);
extern int CCMA_Sql_T_enda_61(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_61(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_62) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_62" : appearance order#187, hierarchy rank# 211, weight = 358.000187 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_62;

#endif /* defined(IS_a_TABLE_enda_62) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_62)
extern const ODB_Tags *CCMA_Set_T_enda_62_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_62_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_62_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_62_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_62_TAG = 0;
PRIVATE int CCMA_nT_enda_62_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_62_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_62_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_62_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_62"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_62"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_62"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_62"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_62"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_62"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_62"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_62"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_62"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_62"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_62"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_62"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_62"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_62"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_62"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_62"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_62"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_62"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_62"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_62"; T[19].name = s; }
    CCMA_T_enda_62_TAG = T;
    CCMA_nT_enda_62_TAG = ntag;
    CCMA_nT_enda_62_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_62_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_62_MEM;
  return CCMA_T_enda_62_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_62_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_62_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_62;report_status@enda_62;report_event1@enda_62;"
      "obsvalue@enda_62;datum_anflag@enda_62;datum_status@enda_62;"
      "datum_event1@enda_62;biascorr@enda_62;biascorr_fg@enda_62;"
      "an_depar@enda_62;fg_depar@enda_62;qc_pge@enda_62;final_obs_error@enda_62;"
      "obs_error@enda_62;fg_error@enda_62;skintemp_1@enda_62;"
      "skintemp_2@enda_62;skintemp_3@enda_62;skintemp_4@enda_62;"
      "skintemp_5@enda_62;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_62;report_status@enda_62;report_event1@enda_62;"
      "obsvalue@enda_62;datum_anflag@enda_62;datum_status@enda_62;"
      "datum_event1@enda_62;biascorr@enda_62;biascorr_fg@enda_62;"
      "an_depar@enda_62;fg_depar@enda_62;qc_pge@enda_62;final_obs_error@enda_62;"
      "obs_error@enda_62;fg_error@enda_62;skintemp_1@enda_62;"
      "skintemp_2@enda_62;skintemp_3@enda_62;skintemp_4@enda_62;"
      "skintemp_5@enda_62;report_status.active@enda_62;report_status.passive@enda_62;"
      "report_status.rejected@enda_62;report_status.blacklisted@enda_62;"
      "report_status.use_emiskf_only@enda_62;report_event1.no_data@enda_62;"
      "report_event1.all_rejected@enda_62;report_event1.bad_practice@enda_62;"
      "report_event1.rdb_rejected@enda_62;report_event1.redundant@enda_62;"
      "report_event1.stalt_missing@enda_62;report_event1.qc_failed@enda_62;"
      "report_event1.overcast_ir@enda_62;report_event1.thinned@enda_62;"
      "report_event1.latlon_corrected@enda_62;report_event1.stalt_corrected@enda_62;"
      "datum_anflag.final@enda_62;datum_anflag.fg@enda_62;"
      "datum_anflag.depar@enda_62;datum_anflag.varqc@enda_62;"
      "datum_anflag.blacklist@enda_62;datum_anflag.ups@enda_62;"
      "datum_anflag.uvt@enda_62;datum_anflag.uhu@enda_62;"
      "datum_anflag.ut2@enda_62;datum_anflag.uh2@enda_62;"
      "datum_anflag.uv1@enda_62;datum_anflag.urr@enda_62;"
      "datum_anflag.usn@enda_62;datum_anflag.usst@enda_62;"
      "datum_status.active@enda_62;datum_status.passive@enda_62;"
      "datum_status.rejected@enda_62;datum_status.blacklisted@enda_62;"
      "datum_status.use_emiskf_only@enda_62;datum_event1.vertco_missing@enda_62;"
      "datum_event1.obsvalue_missing@enda_62;datum_event1.fg_missing@enda_62;"
      "datum_event1.rdb_rejected@enda_62;datum_event1.assim_cld_flag@enda_62;"
      "datum_event1.bad_practice@enda_62;datum_event1.vertpos_outrange@enda_62;"
      "datum_event1.fg2big@enda_62;datum_event1.depar2big@enda_62;"
      "datum_event1.obs_error2big@enda_62;datum_event1.datum_redundant@enda_62;"
      "datum_event1.level_redundant@enda_62;datum_event1.not_analysis_varno@enda_62;"
      "datum_event1.duplicate@enda_62;datum_event1.levels2many@enda_62;"
      "datum_event1.level_selection@enda_62;datum_event1.vertco_consistency@enda_62;"
      "datum_event1.vertco_type_changed@enda_62;datum_event1.combined_flagging@enda_62;"
      "datum_event1.report_rejected@enda_62;datum_event1.varqc_performed@enda_62;"
      "datum_event1.obserror_increased@enda_62;datum_event1.contam_cld_flag@enda_62;"
      "datum_event1.contam_rain_flag@enda_62;datum_event1.contam_aerosol_flag@enda_62;"
      "datum_event1.bad_emissivity@enda_62;datum_event1.model_cld_flag@enda_62;"
      "datum_event1.contam_trgas_flag@enda_62;datum_event1.land_sensitivity@enda_62;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_62_PREPTAG = T;
    CCMA_nT_enda_62_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_62_PREPTAG;
  return CCMA_T_enda_62_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_62(void *T);
extern int CCMA_Unpack_T_enda_62(void *T);
extern int CCMA_Sel_T_enda_62(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_62);
PrePutTable(CCMA, d, double, enda_62);
PreLoadTable(CCMA, enda_62);
PreStoreTable(CCMA, enda_62);
extern void CCMA_Dim_T_enda_62(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_62(void *T);
extern int CCMA_Sql_T_enda_62(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_62(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_63) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_63" : appearance order#188, hierarchy rank# 212, weight = 358.000188 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_63;

#endif /* defined(IS_a_TABLE_enda_63) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_63)
extern const ODB_Tags *CCMA_Set_T_enda_63_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_63_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_63_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_63_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_63_TAG = 0;
PRIVATE int CCMA_nT_enda_63_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_63_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_63_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_63_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_63"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_63"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_63"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_63"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_63"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_63"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_63"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_63"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_63"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_63"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_63"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_63"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_63"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_63"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_63"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_63"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_63"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_63"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_63"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_63"; T[19].name = s; }
    CCMA_T_enda_63_TAG = T;
    CCMA_nT_enda_63_TAG = ntag;
    CCMA_nT_enda_63_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_63_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_63_MEM;
  return CCMA_T_enda_63_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_63_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_63_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_63;report_status@enda_63;report_event1@enda_63;"
      "obsvalue@enda_63;datum_anflag@enda_63;datum_status@enda_63;"
      "datum_event1@enda_63;biascorr@enda_63;biascorr_fg@enda_63;"
      "an_depar@enda_63;fg_depar@enda_63;qc_pge@enda_63;final_obs_error@enda_63;"
      "obs_error@enda_63;fg_error@enda_63;skintemp_1@enda_63;"
      "skintemp_2@enda_63;skintemp_3@enda_63;skintemp_4@enda_63;"
      "skintemp_5@enda_63;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_63;report_status@enda_63;report_event1@enda_63;"
      "obsvalue@enda_63;datum_anflag@enda_63;datum_status@enda_63;"
      "datum_event1@enda_63;biascorr@enda_63;biascorr_fg@enda_63;"
      "an_depar@enda_63;fg_depar@enda_63;qc_pge@enda_63;final_obs_error@enda_63;"
      "obs_error@enda_63;fg_error@enda_63;skintemp_1@enda_63;"
      "skintemp_2@enda_63;skintemp_3@enda_63;skintemp_4@enda_63;"
      "skintemp_5@enda_63;report_status.active@enda_63;report_status.passive@enda_63;"
      "report_status.rejected@enda_63;report_status.blacklisted@enda_63;"
      "report_status.use_emiskf_only@enda_63;report_event1.no_data@enda_63;"
      "report_event1.all_rejected@enda_63;report_event1.bad_practice@enda_63;"
      "report_event1.rdb_rejected@enda_63;report_event1.redundant@enda_63;"
      "report_event1.stalt_missing@enda_63;report_event1.qc_failed@enda_63;"
      "report_event1.overcast_ir@enda_63;report_event1.thinned@enda_63;"
      "report_event1.latlon_corrected@enda_63;report_event1.stalt_corrected@enda_63;"
      "datum_anflag.final@enda_63;datum_anflag.fg@enda_63;"
      "datum_anflag.depar@enda_63;datum_anflag.varqc@enda_63;"
      "datum_anflag.blacklist@enda_63;datum_anflag.ups@enda_63;"
      "datum_anflag.uvt@enda_63;datum_anflag.uhu@enda_63;"
      "datum_anflag.ut2@enda_63;datum_anflag.uh2@enda_63;"
      "datum_anflag.uv1@enda_63;datum_anflag.urr@enda_63;"
      "datum_anflag.usn@enda_63;datum_anflag.usst@enda_63;"
      "datum_status.active@enda_63;datum_status.passive@enda_63;"
      "datum_status.rejected@enda_63;datum_status.blacklisted@enda_63;"
      "datum_status.use_emiskf_only@enda_63;datum_event1.vertco_missing@enda_63;"
      "datum_event1.obsvalue_missing@enda_63;datum_event1.fg_missing@enda_63;"
      "datum_event1.rdb_rejected@enda_63;datum_event1.assim_cld_flag@enda_63;"
      "datum_event1.bad_practice@enda_63;datum_event1.vertpos_outrange@enda_63;"
      "datum_event1.fg2big@enda_63;datum_event1.depar2big@enda_63;"
      "datum_event1.obs_error2big@enda_63;datum_event1.datum_redundant@enda_63;"
      "datum_event1.level_redundant@enda_63;datum_event1.not_analysis_varno@enda_63;"
      "datum_event1.duplicate@enda_63;datum_event1.levels2many@enda_63;"
      "datum_event1.level_selection@enda_63;datum_event1.vertco_consistency@enda_63;"
      "datum_event1.vertco_type_changed@enda_63;datum_event1.combined_flagging@enda_63;"
      "datum_event1.report_rejected@enda_63;datum_event1.varqc_performed@enda_63;"
      "datum_event1.obserror_increased@enda_63;datum_event1.contam_cld_flag@enda_63;"
      "datum_event1.contam_rain_flag@enda_63;datum_event1.contam_aerosol_flag@enda_63;"
      "datum_event1.bad_emissivity@enda_63;datum_event1.model_cld_flag@enda_63;"
      "datum_event1.contam_trgas_flag@enda_63;datum_event1.land_sensitivity@enda_63;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_63_PREPTAG = T;
    CCMA_nT_enda_63_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_63_PREPTAG;
  return CCMA_T_enda_63_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_63(void *T);
extern int CCMA_Unpack_T_enda_63(void *T);
extern int CCMA_Sel_T_enda_63(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_63);
PrePutTable(CCMA, d, double, enda_63);
PreLoadTable(CCMA, enda_63);
PreStoreTable(CCMA, enda_63);
extern void CCMA_Dim_T_enda_63(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_63(void *T);
extern int CCMA_Sql_T_enda_63(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_63(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_64) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_64" : appearance order#189, hierarchy rank# 213, weight = 358.000189 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_64;

#endif /* defined(IS_a_TABLE_enda_64) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_64)
extern const ODB_Tags *CCMA_Set_T_enda_64_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_64_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_64_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_64_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_64_TAG = 0;
PRIVATE int CCMA_nT_enda_64_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_64_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_64_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_64_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_64"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_64"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_64"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_64"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_64"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_64"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_64"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_64"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_64"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_64"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_64"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_64"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_64"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_64"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_64"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_64"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_64"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_64"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_64"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_64"; T[19].name = s; }
    CCMA_T_enda_64_TAG = T;
    CCMA_nT_enda_64_TAG = ntag;
    CCMA_nT_enda_64_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_64_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_64_MEM;
  return CCMA_T_enda_64_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_64_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_64_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_64;report_status@enda_64;report_event1@enda_64;"
      "obsvalue@enda_64;datum_anflag@enda_64;datum_status@enda_64;"
      "datum_event1@enda_64;biascorr@enda_64;biascorr_fg@enda_64;"
      "an_depar@enda_64;fg_depar@enda_64;qc_pge@enda_64;final_obs_error@enda_64;"
      "obs_error@enda_64;fg_error@enda_64;skintemp_1@enda_64;"
      "skintemp_2@enda_64;skintemp_3@enda_64;skintemp_4@enda_64;"
      "skintemp_5@enda_64;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_64;report_status@enda_64;report_event1@enda_64;"
      "obsvalue@enda_64;datum_anflag@enda_64;datum_status@enda_64;"
      "datum_event1@enda_64;biascorr@enda_64;biascorr_fg@enda_64;"
      "an_depar@enda_64;fg_depar@enda_64;qc_pge@enda_64;final_obs_error@enda_64;"
      "obs_error@enda_64;fg_error@enda_64;skintemp_1@enda_64;"
      "skintemp_2@enda_64;skintemp_3@enda_64;skintemp_4@enda_64;"
      "skintemp_5@enda_64;report_status.active@enda_64;report_status.passive@enda_64;"
      "report_status.rejected@enda_64;report_status.blacklisted@enda_64;"
      "report_status.use_emiskf_only@enda_64;report_event1.no_data@enda_64;"
      "report_event1.all_rejected@enda_64;report_event1.bad_practice@enda_64;"
      "report_event1.rdb_rejected@enda_64;report_event1.redundant@enda_64;"
      "report_event1.stalt_missing@enda_64;report_event1.qc_failed@enda_64;"
      "report_event1.overcast_ir@enda_64;report_event1.thinned@enda_64;"
      "report_event1.latlon_corrected@enda_64;report_event1.stalt_corrected@enda_64;"
      "datum_anflag.final@enda_64;datum_anflag.fg@enda_64;"
      "datum_anflag.depar@enda_64;datum_anflag.varqc@enda_64;"
      "datum_anflag.blacklist@enda_64;datum_anflag.ups@enda_64;"
      "datum_anflag.uvt@enda_64;datum_anflag.uhu@enda_64;"
      "datum_anflag.ut2@enda_64;datum_anflag.uh2@enda_64;"
      "datum_anflag.uv1@enda_64;datum_anflag.urr@enda_64;"
      "datum_anflag.usn@enda_64;datum_anflag.usst@enda_64;"
      "datum_status.active@enda_64;datum_status.passive@enda_64;"
      "datum_status.rejected@enda_64;datum_status.blacklisted@enda_64;"
      "datum_status.use_emiskf_only@enda_64;datum_event1.vertco_missing@enda_64;"
      "datum_event1.obsvalue_missing@enda_64;datum_event1.fg_missing@enda_64;"
      "datum_event1.rdb_rejected@enda_64;datum_event1.assim_cld_flag@enda_64;"
      "datum_event1.bad_practice@enda_64;datum_event1.vertpos_outrange@enda_64;"
      "datum_event1.fg2big@enda_64;datum_event1.depar2big@enda_64;"
      "datum_event1.obs_error2big@enda_64;datum_event1.datum_redundant@enda_64;"
      "datum_event1.level_redundant@enda_64;datum_event1.not_analysis_varno@enda_64;"
      "datum_event1.duplicate@enda_64;datum_event1.levels2many@enda_64;"
      "datum_event1.level_selection@enda_64;datum_event1.vertco_consistency@enda_64;"
      "datum_event1.vertco_type_changed@enda_64;datum_event1.combined_flagging@enda_64;"
      "datum_event1.report_rejected@enda_64;datum_event1.varqc_performed@enda_64;"
      "datum_event1.obserror_increased@enda_64;datum_event1.contam_cld_flag@enda_64;"
      "datum_event1.contam_rain_flag@enda_64;datum_event1.contam_aerosol_flag@enda_64;"
      "datum_event1.bad_emissivity@enda_64;datum_event1.model_cld_flag@enda_64;"
      "datum_event1.contam_trgas_flag@enda_64;datum_event1.land_sensitivity@enda_64;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_64_PREPTAG = T;
    CCMA_nT_enda_64_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_64_PREPTAG;
  return CCMA_T_enda_64_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_64(void *T);
extern int CCMA_Unpack_T_enda_64(void *T);
extern int CCMA_Sel_T_enda_64(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_64);
PrePutTable(CCMA, d, double, enda_64);
PreLoadTable(CCMA, enda_64);
PreStoreTable(CCMA, enda_64);
extern void CCMA_Dim_T_enda_64(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_64(void *T);
extern int CCMA_Sql_T_enda_64(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_64(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_65) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_65" : appearance order#190, hierarchy rank# 214, weight = 358.000190 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_65;

#endif /* defined(IS_a_TABLE_enda_65) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_65)
extern const ODB_Tags *CCMA_Set_T_enda_65_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_65_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_65_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_65_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_65_TAG = 0;
PRIVATE int CCMA_nT_enda_65_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_65_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_65_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_65_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_65"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_65"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_65"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_65"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_65"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_65"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_65"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_65"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_65"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_65"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_65"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_65"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_65"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_65"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_65"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_65"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_65"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_65"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_65"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_65"; T[19].name = s; }
    CCMA_T_enda_65_TAG = T;
    CCMA_nT_enda_65_TAG = ntag;
    CCMA_nT_enda_65_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_65_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_65_MEM;
  return CCMA_T_enda_65_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_65_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_65_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_65;report_status@enda_65;report_event1@enda_65;"
      "obsvalue@enda_65;datum_anflag@enda_65;datum_status@enda_65;"
      "datum_event1@enda_65;biascorr@enda_65;biascorr_fg@enda_65;"
      "an_depar@enda_65;fg_depar@enda_65;qc_pge@enda_65;final_obs_error@enda_65;"
      "obs_error@enda_65;fg_error@enda_65;skintemp_1@enda_65;"
      "skintemp_2@enda_65;skintemp_3@enda_65;skintemp_4@enda_65;"
      "skintemp_5@enda_65;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_65;report_status@enda_65;report_event1@enda_65;"
      "obsvalue@enda_65;datum_anflag@enda_65;datum_status@enda_65;"
      "datum_event1@enda_65;biascorr@enda_65;biascorr_fg@enda_65;"
      "an_depar@enda_65;fg_depar@enda_65;qc_pge@enda_65;final_obs_error@enda_65;"
      "obs_error@enda_65;fg_error@enda_65;skintemp_1@enda_65;"
      "skintemp_2@enda_65;skintemp_3@enda_65;skintemp_4@enda_65;"
      "skintemp_5@enda_65;report_status.active@enda_65;report_status.passive@enda_65;"
      "report_status.rejected@enda_65;report_status.blacklisted@enda_65;"
      "report_status.use_emiskf_only@enda_65;report_event1.no_data@enda_65;"
      "report_event1.all_rejected@enda_65;report_event1.bad_practice@enda_65;"
      "report_event1.rdb_rejected@enda_65;report_event1.redundant@enda_65;"
      "report_event1.stalt_missing@enda_65;report_event1.qc_failed@enda_65;"
      "report_event1.overcast_ir@enda_65;report_event1.thinned@enda_65;"
      "report_event1.latlon_corrected@enda_65;report_event1.stalt_corrected@enda_65;"
      "datum_anflag.final@enda_65;datum_anflag.fg@enda_65;"
      "datum_anflag.depar@enda_65;datum_anflag.varqc@enda_65;"
      "datum_anflag.blacklist@enda_65;datum_anflag.ups@enda_65;"
      "datum_anflag.uvt@enda_65;datum_anflag.uhu@enda_65;"
      "datum_anflag.ut2@enda_65;datum_anflag.uh2@enda_65;"
      "datum_anflag.uv1@enda_65;datum_anflag.urr@enda_65;"
      "datum_anflag.usn@enda_65;datum_anflag.usst@enda_65;"
      "datum_status.active@enda_65;datum_status.passive@enda_65;"
      "datum_status.rejected@enda_65;datum_status.blacklisted@enda_65;"
      "datum_status.use_emiskf_only@enda_65;datum_event1.vertco_missing@enda_65;"
      "datum_event1.obsvalue_missing@enda_65;datum_event1.fg_missing@enda_65;"
      "datum_event1.rdb_rejected@enda_65;datum_event1.assim_cld_flag@enda_65;"
      "datum_event1.bad_practice@enda_65;datum_event1.vertpos_outrange@enda_65;"
      "datum_event1.fg2big@enda_65;datum_event1.depar2big@enda_65;"
      "datum_event1.obs_error2big@enda_65;datum_event1.datum_redundant@enda_65;"
      "datum_event1.level_redundant@enda_65;datum_event1.not_analysis_varno@enda_65;"
      "datum_event1.duplicate@enda_65;datum_event1.levels2many@enda_65;"
      "datum_event1.level_selection@enda_65;datum_event1.vertco_consistency@enda_65;"
      "datum_event1.vertco_type_changed@enda_65;datum_event1.combined_flagging@enda_65;"
      "datum_event1.report_rejected@enda_65;datum_event1.varqc_performed@enda_65;"
      "datum_event1.obserror_increased@enda_65;datum_event1.contam_cld_flag@enda_65;"
      "datum_event1.contam_rain_flag@enda_65;datum_event1.contam_aerosol_flag@enda_65;"
      "datum_event1.bad_emissivity@enda_65;datum_event1.model_cld_flag@enda_65;"
      "datum_event1.contam_trgas_flag@enda_65;datum_event1.land_sensitivity@enda_65;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_65_PREPTAG = T;
    CCMA_nT_enda_65_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_65_PREPTAG;
  return CCMA_T_enda_65_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_65(void *T);
extern int CCMA_Unpack_T_enda_65(void *T);
extern int CCMA_Sel_T_enda_65(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_65);
PrePutTable(CCMA, d, double, enda_65);
PreLoadTable(CCMA, enda_65);
PreStoreTable(CCMA, enda_65);
extern void CCMA_Dim_T_enda_65(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_65(void *T);
extern int CCMA_Sql_T_enda_65(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_65(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_66) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_66" : appearance order#191, hierarchy rank# 215, weight = 358.000191 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_66;

#endif /* defined(IS_a_TABLE_enda_66) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_66)
extern const ODB_Tags *CCMA_Set_T_enda_66_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_66_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_66_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_66_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_66_TAG = 0;
PRIVATE int CCMA_nT_enda_66_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_66_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_66_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_66_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_66"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_66"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_66"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_66"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_66"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_66"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_66"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_66"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_66"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_66"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_66"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_66"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_66"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_66"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_66"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_66"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_66"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_66"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_66"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_66"; T[19].name = s; }
    CCMA_T_enda_66_TAG = T;
    CCMA_nT_enda_66_TAG = ntag;
    CCMA_nT_enda_66_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_66_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_66_MEM;
  return CCMA_T_enda_66_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_66_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_66_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_66;report_status@enda_66;report_event1@enda_66;"
      "obsvalue@enda_66;datum_anflag@enda_66;datum_status@enda_66;"
      "datum_event1@enda_66;biascorr@enda_66;biascorr_fg@enda_66;"
      "an_depar@enda_66;fg_depar@enda_66;qc_pge@enda_66;final_obs_error@enda_66;"
      "obs_error@enda_66;fg_error@enda_66;skintemp_1@enda_66;"
      "skintemp_2@enda_66;skintemp_3@enda_66;skintemp_4@enda_66;"
      "skintemp_5@enda_66;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_66;report_status@enda_66;report_event1@enda_66;"
      "obsvalue@enda_66;datum_anflag@enda_66;datum_status@enda_66;"
      "datum_event1@enda_66;biascorr@enda_66;biascorr_fg@enda_66;"
      "an_depar@enda_66;fg_depar@enda_66;qc_pge@enda_66;final_obs_error@enda_66;"
      "obs_error@enda_66;fg_error@enda_66;skintemp_1@enda_66;"
      "skintemp_2@enda_66;skintemp_3@enda_66;skintemp_4@enda_66;"
      "skintemp_5@enda_66;report_status.active@enda_66;report_status.passive@enda_66;"
      "report_status.rejected@enda_66;report_status.blacklisted@enda_66;"
      "report_status.use_emiskf_only@enda_66;report_event1.no_data@enda_66;"
      "report_event1.all_rejected@enda_66;report_event1.bad_practice@enda_66;"
      "report_event1.rdb_rejected@enda_66;report_event1.redundant@enda_66;"
      "report_event1.stalt_missing@enda_66;report_event1.qc_failed@enda_66;"
      "report_event1.overcast_ir@enda_66;report_event1.thinned@enda_66;"
      "report_event1.latlon_corrected@enda_66;report_event1.stalt_corrected@enda_66;"
      "datum_anflag.final@enda_66;datum_anflag.fg@enda_66;"
      "datum_anflag.depar@enda_66;datum_anflag.varqc@enda_66;"
      "datum_anflag.blacklist@enda_66;datum_anflag.ups@enda_66;"
      "datum_anflag.uvt@enda_66;datum_anflag.uhu@enda_66;"
      "datum_anflag.ut2@enda_66;datum_anflag.uh2@enda_66;"
      "datum_anflag.uv1@enda_66;datum_anflag.urr@enda_66;"
      "datum_anflag.usn@enda_66;datum_anflag.usst@enda_66;"
      "datum_status.active@enda_66;datum_status.passive@enda_66;"
      "datum_status.rejected@enda_66;datum_status.blacklisted@enda_66;"
      "datum_status.use_emiskf_only@enda_66;datum_event1.vertco_missing@enda_66;"
      "datum_event1.obsvalue_missing@enda_66;datum_event1.fg_missing@enda_66;"
      "datum_event1.rdb_rejected@enda_66;datum_event1.assim_cld_flag@enda_66;"
      "datum_event1.bad_practice@enda_66;datum_event1.vertpos_outrange@enda_66;"
      "datum_event1.fg2big@enda_66;datum_event1.depar2big@enda_66;"
      "datum_event1.obs_error2big@enda_66;datum_event1.datum_redundant@enda_66;"
      "datum_event1.level_redundant@enda_66;datum_event1.not_analysis_varno@enda_66;"
      "datum_event1.duplicate@enda_66;datum_event1.levels2many@enda_66;"
      "datum_event1.level_selection@enda_66;datum_event1.vertco_consistency@enda_66;"
      "datum_event1.vertco_type_changed@enda_66;datum_event1.combined_flagging@enda_66;"
      "datum_event1.report_rejected@enda_66;datum_event1.varqc_performed@enda_66;"
      "datum_event1.obserror_increased@enda_66;datum_event1.contam_cld_flag@enda_66;"
      "datum_event1.contam_rain_flag@enda_66;datum_event1.contam_aerosol_flag@enda_66;"
      "datum_event1.bad_emissivity@enda_66;datum_event1.model_cld_flag@enda_66;"
      "datum_event1.contam_trgas_flag@enda_66;datum_event1.land_sensitivity@enda_66;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_66_PREPTAG = T;
    CCMA_nT_enda_66_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_66_PREPTAG;
  return CCMA_T_enda_66_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_66(void *T);
extern int CCMA_Unpack_T_enda_66(void *T);
extern int CCMA_Sel_T_enda_66(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_66);
PrePutTable(CCMA, d, double, enda_66);
PreLoadTable(CCMA, enda_66);
PreStoreTable(CCMA, enda_66);
extern void CCMA_Dim_T_enda_66(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_66(void *T);
extern int CCMA_Sql_T_enda_66(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_66(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_67) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_67" : appearance order#192, hierarchy rank# 216, weight = 358.000192 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_67;

#endif /* defined(IS_a_TABLE_enda_67) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_67)
extern const ODB_Tags *CCMA_Set_T_enda_67_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_67_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_67_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_67_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_67_TAG = 0;
PRIVATE int CCMA_nT_enda_67_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_67_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_67_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_67_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_67"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_67"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_67"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_67"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_67"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_67"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_67"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_67"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_67"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_67"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_67"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_67"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_67"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_67"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_67"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_67"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_67"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_67"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_67"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_67"; T[19].name = s; }
    CCMA_T_enda_67_TAG = T;
    CCMA_nT_enda_67_TAG = ntag;
    CCMA_nT_enda_67_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_67_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_67_MEM;
  return CCMA_T_enda_67_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_67_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_67_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_67;report_status@enda_67;report_event1@enda_67;"
      "obsvalue@enda_67;datum_anflag@enda_67;datum_status@enda_67;"
      "datum_event1@enda_67;biascorr@enda_67;biascorr_fg@enda_67;"
      "an_depar@enda_67;fg_depar@enda_67;qc_pge@enda_67;final_obs_error@enda_67;"
      "obs_error@enda_67;fg_error@enda_67;skintemp_1@enda_67;"
      "skintemp_2@enda_67;skintemp_3@enda_67;skintemp_4@enda_67;"
      "skintemp_5@enda_67;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_67;report_status@enda_67;report_event1@enda_67;"
      "obsvalue@enda_67;datum_anflag@enda_67;datum_status@enda_67;"
      "datum_event1@enda_67;biascorr@enda_67;biascorr_fg@enda_67;"
      "an_depar@enda_67;fg_depar@enda_67;qc_pge@enda_67;final_obs_error@enda_67;"
      "obs_error@enda_67;fg_error@enda_67;skintemp_1@enda_67;"
      "skintemp_2@enda_67;skintemp_3@enda_67;skintemp_4@enda_67;"
      "skintemp_5@enda_67;report_status.active@enda_67;report_status.passive@enda_67;"
      "report_status.rejected@enda_67;report_status.blacklisted@enda_67;"
      "report_status.use_emiskf_only@enda_67;report_event1.no_data@enda_67;"
      "report_event1.all_rejected@enda_67;report_event1.bad_practice@enda_67;"
      "report_event1.rdb_rejected@enda_67;report_event1.redundant@enda_67;"
      "report_event1.stalt_missing@enda_67;report_event1.qc_failed@enda_67;"
      "report_event1.overcast_ir@enda_67;report_event1.thinned@enda_67;"
      "report_event1.latlon_corrected@enda_67;report_event1.stalt_corrected@enda_67;"
      "datum_anflag.final@enda_67;datum_anflag.fg@enda_67;"
      "datum_anflag.depar@enda_67;datum_anflag.varqc@enda_67;"
      "datum_anflag.blacklist@enda_67;datum_anflag.ups@enda_67;"
      "datum_anflag.uvt@enda_67;datum_anflag.uhu@enda_67;"
      "datum_anflag.ut2@enda_67;datum_anflag.uh2@enda_67;"
      "datum_anflag.uv1@enda_67;datum_anflag.urr@enda_67;"
      "datum_anflag.usn@enda_67;datum_anflag.usst@enda_67;"
      "datum_status.active@enda_67;datum_status.passive@enda_67;"
      "datum_status.rejected@enda_67;datum_status.blacklisted@enda_67;"
      "datum_status.use_emiskf_only@enda_67;datum_event1.vertco_missing@enda_67;"
      "datum_event1.obsvalue_missing@enda_67;datum_event1.fg_missing@enda_67;"
      "datum_event1.rdb_rejected@enda_67;datum_event1.assim_cld_flag@enda_67;"
      "datum_event1.bad_practice@enda_67;datum_event1.vertpos_outrange@enda_67;"
      "datum_event1.fg2big@enda_67;datum_event1.depar2big@enda_67;"
      "datum_event1.obs_error2big@enda_67;datum_event1.datum_redundant@enda_67;"
      "datum_event1.level_redundant@enda_67;datum_event1.not_analysis_varno@enda_67;"
      "datum_event1.duplicate@enda_67;datum_event1.levels2many@enda_67;"
      "datum_event1.level_selection@enda_67;datum_event1.vertco_consistency@enda_67;"
      "datum_event1.vertco_type_changed@enda_67;datum_event1.combined_flagging@enda_67;"
      "datum_event1.report_rejected@enda_67;datum_event1.varqc_performed@enda_67;"
      "datum_event1.obserror_increased@enda_67;datum_event1.contam_cld_flag@enda_67;"
      "datum_event1.contam_rain_flag@enda_67;datum_event1.contam_aerosol_flag@enda_67;"
      "datum_event1.bad_emissivity@enda_67;datum_event1.model_cld_flag@enda_67;"
      "datum_event1.contam_trgas_flag@enda_67;datum_event1.land_sensitivity@enda_67;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_67_PREPTAG = T;
    CCMA_nT_enda_67_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_67_PREPTAG;
  return CCMA_T_enda_67_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_67(void *T);
extern int CCMA_Unpack_T_enda_67(void *T);
extern int CCMA_Sel_T_enda_67(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_67);
PrePutTable(CCMA, d, double, enda_67);
PreLoadTable(CCMA, enda_67);
PreStoreTable(CCMA, enda_67);
extern void CCMA_Dim_T_enda_67(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_67(void *T);
extern int CCMA_Sql_T_enda_67(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_67(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_68) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_68" : appearance order#193, hierarchy rank# 217, weight = 358.000193 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_68;

#endif /* defined(IS_a_TABLE_enda_68) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_68)
extern const ODB_Tags *CCMA_Set_T_enda_68_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_68_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_68_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_68_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_68_TAG = 0;
PRIVATE int CCMA_nT_enda_68_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_68_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_68_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_68_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_68"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_68"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_68"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_68"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_68"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_68"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_68"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_68"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_68"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_68"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_68"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_68"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_68"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_68"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_68"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_68"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_68"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_68"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_68"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_68"; T[19].name = s; }
    CCMA_T_enda_68_TAG = T;
    CCMA_nT_enda_68_TAG = ntag;
    CCMA_nT_enda_68_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_68_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_68_MEM;
  return CCMA_T_enda_68_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_68_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_68_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_68;report_status@enda_68;report_event1@enda_68;"
      "obsvalue@enda_68;datum_anflag@enda_68;datum_status@enda_68;"
      "datum_event1@enda_68;biascorr@enda_68;biascorr_fg@enda_68;"
      "an_depar@enda_68;fg_depar@enda_68;qc_pge@enda_68;final_obs_error@enda_68;"
      "obs_error@enda_68;fg_error@enda_68;skintemp_1@enda_68;"
      "skintemp_2@enda_68;skintemp_3@enda_68;skintemp_4@enda_68;"
      "skintemp_5@enda_68;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_68;report_status@enda_68;report_event1@enda_68;"
      "obsvalue@enda_68;datum_anflag@enda_68;datum_status@enda_68;"
      "datum_event1@enda_68;biascorr@enda_68;biascorr_fg@enda_68;"
      "an_depar@enda_68;fg_depar@enda_68;qc_pge@enda_68;final_obs_error@enda_68;"
      "obs_error@enda_68;fg_error@enda_68;skintemp_1@enda_68;"
      "skintemp_2@enda_68;skintemp_3@enda_68;skintemp_4@enda_68;"
      "skintemp_5@enda_68;report_status.active@enda_68;report_status.passive@enda_68;"
      "report_status.rejected@enda_68;report_status.blacklisted@enda_68;"
      "report_status.use_emiskf_only@enda_68;report_event1.no_data@enda_68;"
      "report_event1.all_rejected@enda_68;report_event1.bad_practice@enda_68;"
      "report_event1.rdb_rejected@enda_68;report_event1.redundant@enda_68;"
      "report_event1.stalt_missing@enda_68;report_event1.qc_failed@enda_68;"
      "report_event1.overcast_ir@enda_68;report_event1.thinned@enda_68;"
      "report_event1.latlon_corrected@enda_68;report_event1.stalt_corrected@enda_68;"
      "datum_anflag.final@enda_68;datum_anflag.fg@enda_68;"
      "datum_anflag.depar@enda_68;datum_anflag.varqc@enda_68;"
      "datum_anflag.blacklist@enda_68;datum_anflag.ups@enda_68;"
      "datum_anflag.uvt@enda_68;datum_anflag.uhu@enda_68;"
      "datum_anflag.ut2@enda_68;datum_anflag.uh2@enda_68;"
      "datum_anflag.uv1@enda_68;datum_anflag.urr@enda_68;"
      "datum_anflag.usn@enda_68;datum_anflag.usst@enda_68;"
      "datum_status.active@enda_68;datum_status.passive@enda_68;"
      "datum_status.rejected@enda_68;datum_status.blacklisted@enda_68;"
      "datum_status.use_emiskf_only@enda_68;datum_event1.vertco_missing@enda_68;"
      "datum_event1.obsvalue_missing@enda_68;datum_event1.fg_missing@enda_68;"
      "datum_event1.rdb_rejected@enda_68;datum_event1.assim_cld_flag@enda_68;"
      "datum_event1.bad_practice@enda_68;datum_event1.vertpos_outrange@enda_68;"
      "datum_event1.fg2big@enda_68;datum_event1.depar2big@enda_68;"
      "datum_event1.obs_error2big@enda_68;datum_event1.datum_redundant@enda_68;"
      "datum_event1.level_redundant@enda_68;datum_event1.not_analysis_varno@enda_68;"
      "datum_event1.duplicate@enda_68;datum_event1.levels2many@enda_68;"
      "datum_event1.level_selection@enda_68;datum_event1.vertco_consistency@enda_68;"
      "datum_event1.vertco_type_changed@enda_68;datum_event1.combined_flagging@enda_68;"
      "datum_event1.report_rejected@enda_68;datum_event1.varqc_performed@enda_68;"
      "datum_event1.obserror_increased@enda_68;datum_event1.contam_cld_flag@enda_68;"
      "datum_event1.contam_rain_flag@enda_68;datum_event1.contam_aerosol_flag@enda_68;"
      "datum_event1.bad_emissivity@enda_68;datum_event1.model_cld_flag@enda_68;"
      "datum_event1.contam_trgas_flag@enda_68;datum_event1.land_sensitivity@enda_68;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_68_PREPTAG = T;
    CCMA_nT_enda_68_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_68_PREPTAG;
  return CCMA_T_enda_68_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_68(void *T);
extern int CCMA_Unpack_T_enda_68(void *T);
extern int CCMA_Sel_T_enda_68(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_68);
PrePutTable(CCMA, d, double, enda_68);
PreLoadTable(CCMA, enda_68);
PreStoreTable(CCMA, enda_68);
extern void CCMA_Dim_T_enda_68(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_68(void *T);
extern int CCMA_Sql_T_enda_68(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_68(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_69) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_69" : appearance order#194, hierarchy rank# 218, weight = 358.000194 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_69;

#endif /* defined(IS_a_TABLE_enda_69) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_69)
extern const ODB_Tags *CCMA_Set_T_enda_69_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_69_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_69_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_69_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_69_TAG = 0;
PRIVATE int CCMA_nT_enda_69_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_69_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_69_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_69_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_69"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_69"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_69"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_69"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_69"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_69"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_69"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_69"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_69"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_69"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_69"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_69"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_69"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_69"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_69"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_69"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_69"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_69"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_69"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_69"; T[19].name = s; }
    CCMA_T_enda_69_TAG = T;
    CCMA_nT_enda_69_TAG = ntag;
    CCMA_nT_enda_69_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_69_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_69_MEM;
  return CCMA_T_enda_69_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_69_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_69_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_69;report_status@enda_69;report_event1@enda_69;"
      "obsvalue@enda_69;datum_anflag@enda_69;datum_status@enda_69;"
      "datum_event1@enda_69;biascorr@enda_69;biascorr_fg@enda_69;"
      "an_depar@enda_69;fg_depar@enda_69;qc_pge@enda_69;final_obs_error@enda_69;"
      "obs_error@enda_69;fg_error@enda_69;skintemp_1@enda_69;"
      "skintemp_2@enda_69;skintemp_3@enda_69;skintemp_4@enda_69;"
      "skintemp_5@enda_69;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_69;report_status@enda_69;report_event1@enda_69;"
      "obsvalue@enda_69;datum_anflag@enda_69;datum_status@enda_69;"
      "datum_event1@enda_69;biascorr@enda_69;biascorr_fg@enda_69;"
      "an_depar@enda_69;fg_depar@enda_69;qc_pge@enda_69;final_obs_error@enda_69;"
      "obs_error@enda_69;fg_error@enda_69;skintemp_1@enda_69;"
      "skintemp_2@enda_69;skintemp_3@enda_69;skintemp_4@enda_69;"
      "skintemp_5@enda_69;report_status.active@enda_69;report_status.passive@enda_69;"
      "report_status.rejected@enda_69;report_status.blacklisted@enda_69;"
      "report_status.use_emiskf_only@enda_69;report_event1.no_data@enda_69;"
      "report_event1.all_rejected@enda_69;report_event1.bad_practice@enda_69;"
      "report_event1.rdb_rejected@enda_69;report_event1.redundant@enda_69;"
      "report_event1.stalt_missing@enda_69;report_event1.qc_failed@enda_69;"
      "report_event1.overcast_ir@enda_69;report_event1.thinned@enda_69;"
      "report_event1.latlon_corrected@enda_69;report_event1.stalt_corrected@enda_69;"
      "datum_anflag.final@enda_69;datum_anflag.fg@enda_69;"
      "datum_anflag.depar@enda_69;datum_anflag.varqc@enda_69;"
      "datum_anflag.blacklist@enda_69;datum_anflag.ups@enda_69;"
      "datum_anflag.uvt@enda_69;datum_anflag.uhu@enda_69;"
      "datum_anflag.ut2@enda_69;datum_anflag.uh2@enda_69;"
      "datum_anflag.uv1@enda_69;datum_anflag.urr@enda_69;"
      "datum_anflag.usn@enda_69;datum_anflag.usst@enda_69;"
      "datum_status.active@enda_69;datum_status.passive@enda_69;"
      "datum_status.rejected@enda_69;datum_status.blacklisted@enda_69;"
      "datum_status.use_emiskf_only@enda_69;datum_event1.vertco_missing@enda_69;"
      "datum_event1.obsvalue_missing@enda_69;datum_event1.fg_missing@enda_69;"
      "datum_event1.rdb_rejected@enda_69;datum_event1.assim_cld_flag@enda_69;"
      "datum_event1.bad_practice@enda_69;datum_event1.vertpos_outrange@enda_69;"
      "datum_event1.fg2big@enda_69;datum_event1.depar2big@enda_69;"
      "datum_event1.obs_error2big@enda_69;datum_event1.datum_redundant@enda_69;"
      "datum_event1.level_redundant@enda_69;datum_event1.not_analysis_varno@enda_69;"
      "datum_event1.duplicate@enda_69;datum_event1.levels2many@enda_69;"
      "datum_event1.level_selection@enda_69;datum_event1.vertco_consistency@enda_69;"
      "datum_event1.vertco_type_changed@enda_69;datum_event1.combined_flagging@enda_69;"
      "datum_event1.report_rejected@enda_69;datum_event1.varqc_performed@enda_69;"
      "datum_event1.obserror_increased@enda_69;datum_event1.contam_cld_flag@enda_69;"
      "datum_event1.contam_rain_flag@enda_69;datum_event1.contam_aerosol_flag@enda_69;"
      "datum_event1.bad_emissivity@enda_69;datum_event1.model_cld_flag@enda_69;"
      "datum_event1.contam_trgas_flag@enda_69;datum_event1.land_sensitivity@enda_69;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_69_PREPTAG = T;
    CCMA_nT_enda_69_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_69_PREPTAG;
  return CCMA_T_enda_69_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_69(void *T);
extern int CCMA_Unpack_T_enda_69(void *T);
extern int CCMA_Sel_T_enda_69(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_69);
PrePutTable(CCMA, d, double, enda_69);
PreLoadTable(CCMA, enda_69);
PreStoreTable(CCMA, enda_69);
extern void CCMA_Dim_T_enda_69(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_69(void *T);
extern int CCMA_Sql_T_enda_69(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_69(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_70) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_70" : appearance order#195, hierarchy rank# 219, weight = 358.000195 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_70;

#endif /* defined(IS_a_TABLE_enda_70) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_70)
extern const ODB_Tags *CCMA_Set_T_enda_70_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_70_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_70_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_70_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_70_TAG = 0;
PRIVATE int CCMA_nT_enda_70_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_70_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_70_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_70_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_70"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_70"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_70"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_70"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_70"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_70"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_70"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_70"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_70"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_70"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_70"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_70"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_70"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_70"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_70"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_70"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_70"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_70"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_70"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_70"; T[19].name = s; }
    CCMA_T_enda_70_TAG = T;
    CCMA_nT_enda_70_TAG = ntag;
    CCMA_nT_enda_70_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_70_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_70_MEM;
  return CCMA_T_enda_70_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_70_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_70_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_70;report_status@enda_70;report_event1@enda_70;"
      "obsvalue@enda_70;datum_anflag@enda_70;datum_status@enda_70;"
      "datum_event1@enda_70;biascorr@enda_70;biascorr_fg@enda_70;"
      "an_depar@enda_70;fg_depar@enda_70;qc_pge@enda_70;final_obs_error@enda_70;"
      "obs_error@enda_70;fg_error@enda_70;skintemp_1@enda_70;"
      "skintemp_2@enda_70;skintemp_3@enda_70;skintemp_4@enda_70;"
      "skintemp_5@enda_70;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_70;report_status@enda_70;report_event1@enda_70;"
      "obsvalue@enda_70;datum_anflag@enda_70;datum_status@enda_70;"
      "datum_event1@enda_70;biascorr@enda_70;biascorr_fg@enda_70;"
      "an_depar@enda_70;fg_depar@enda_70;qc_pge@enda_70;final_obs_error@enda_70;"
      "obs_error@enda_70;fg_error@enda_70;skintemp_1@enda_70;"
      "skintemp_2@enda_70;skintemp_3@enda_70;skintemp_4@enda_70;"
      "skintemp_5@enda_70;report_status.active@enda_70;report_status.passive@enda_70;"
      "report_status.rejected@enda_70;report_status.blacklisted@enda_70;"
      "report_status.use_emiskf_only@enda_70;report_event1.no_data@enda_70;"
      "report_event1.all_rejected@enda_70;report_event1.bad_practice@enda_70;"
      "report_event1.rdb_rejected@enda_70;report_event1.redundant@enda_70;"
      "report_event1.stalt_missing@enda_70;report_event1.qc_failed@enda_70;"
      "report_event1.overcast_ir@enda_70;report_event1.thinned@enda_70;"
      "report_event1.latlon_corrected@enda_70;report_event1.stalt_corrected@enda_70;"
      "datum_anflag.final@enda_70;datum_anflag.fg@enda_70;"
      "datum_anflag.depar@enda_70;datum_anflag.varqc@enda_70;"
      "datum_anflag.blacklist@enda_70;datum_anflag.ups@enda_70;"
      "datum_anflag.uvt@enda_70;datum_anflag.uhu@enda_70;"
      "datum_anflag.ut2@enda_70;datum_anflag.uh2@enda_70;"
      "datum_anflag.uv1@enda_70;datum_anflag.urr@enda_70;"
      "datum_anflag.usn@enda_70;datum_anflag.usst@enda_70;"
      "datum_status.active@enda_70;datum_status.passive@enda_70;"
      "datum_status.rejected@enda_70;datum_status.blacklisted@enda_70;"
      "datum_status.use_emiskf_only@enda_70;datum_event1.vertco_missing@enda_70;"
      "datum_event1.obsvalue_missing@enda_70;datum_event1.fg_missing@enda_70;"
      "datum_event1.rdb_rejected@enda_70;datum_event1.assim_cld_flag@enda_70;"
      "datum_event1.bad_practice@enda_70;datum_event1.vertpos_outrange@enda_70;"
      "datum_event1.fg2big@enda_70;datum_event1.depar2big@enda_70;"
      "datum_event1.obs_error2big@enda_70;datum_event1.datum_redundant@enda_70;"
      "datum_event1.level_redundant@enda_70;datum_event1.not_analysis_varno@enda_70;"
      "datum_event1.duplicate@enda_70;datum_event1.levels2many@enda_70;"
      "datum_event1.level_selection@enda_70;datum_event1.vertco_consistency@enda_70;"
      "datum_event1.vertco_type_changed@enda_70;datum_event1.combined_flagging@enda_70;"
      "datum_event1.report_rejected@enda_70;datum_event1.varqc_performed@enda_70;"
      "datum_event1.obserror_increased@enda_70;datum_event1.contam_cld_flag@enda_70;"
      "datum_event1.contam_rain_flag@enda_70;datum_event1.contam_aerosol_flag@enda_70;"
      "datum_event1.bad_emissivity@enda_70;datum_event1.model_cld_flag@enda_70;"
      "datum_event1.contam_trgas_flag@enda_70;datum_event1.land_sensitivity@enda_70;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_70_PREPTAG = T;
    CCMA_nT_enda_70_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_70_PREPTAG;
  return CCMA_T_enda_70_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_70(void *T);
extern int CCMA_Unpack_T_enda_70(void *T);
extern int CCMA_Sel_T_enda_70(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_70);
PrePutTable(CCMA, d, double, enda_70);
PreLoadTable(CCMA, enda_70);
PreStoreTable(CCMA, enda_70);
extern void CCMA_Dim_T_enda_70(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_70(void *T);
extern int CCMA_Sql_T_enda_70(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_70(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_71) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_71" : appearance order#196, hierarchy rank# 220, weight = 358.000196 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_71;

#endif /* defined(IS_a_TABLE_enda_71) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_71)
extern const ODB_Tags *CCMA_Set_T_enda_71_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_71_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_71_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_71_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_71_TAG = 0;
PRIVATE int CCMA_nT_enda_71_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_71_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_71_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_71_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_71"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_71"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_71"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_71"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_71"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_71"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_71"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_71"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_71"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_71"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_71"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_71"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_71"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_71"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_71"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_71"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_71"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_71"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_71"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_71"; T[19].name = s; }
    CCMA_T_enda_71_TAG = T;
    CCMA_nT_enda_71_TAG = ntag;
    CCMA_nT_enda_71_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_71_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_71_MEM;
  return CCMA_T_enda_71_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_71_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_71_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_71;report_status@enda_71;report_event1@enda_71;"
      "obsvalue@enda_71;datum_anflag@enda_71;datum_status@enda_71;"
      "datum_event1@enda_71;biascorr@enda_71;biascorr_fg@enda_71;"
      "an_depar@enda_71;fg_depar@enda_71;qc_pge@enda_71;final_obs_error@enda_71;"
      "obs_error@enda_71;fg_error@enda_71;skintemp_1@enda_71;"
      "skintemp_2@enda_71;skintemp_3@enda_71;skintemp_4@enda_71;"
      "skintemp_5@enda_71;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_71;report_status@enda_71;report_event1@enda_71;"
      "obsvalue@enda_71;datum_anflag@enda_71;datum_status@enda_71;"
      "datum_event1@enda_71;biascorr@enda_71;biascorr_fg@enda_71;"
      "an_depar@enda_71;fg_depar@enda_71;qc_pge@enda_71;final_obs_error@enda_71;"
      "obs_error@enda_71;fg_error@enda_71;skintemp_1@enda_71;"
      "skintemp_2@enda_71;skintemp_3@enda_71;skintemp_4@enda_71;"
      "skintemp_5@enda_71;report_status.active@enda_71;report_status.passive@enda_71;"
      "report_status.rejected@enda_71;report_status.blacklisted@enda_71;"
      "report_status.use_emiskf_only@enda_71;report_event1.no_data@enda_71;"
      "report_event1.all_rejected@enda_71;report_event1.bad_practice@enda_71;"
      "report_event1.rdb_rejected@enda_71;report_event1.redundant@enda_71;"
      "report_event1.stalt_missing@enda_71;report_event1.qc_failed@enda_71;"
      "report_event1.overcast_ir@enda_71;report_event1.thinned@enda_71;"
      "report_event1.latlon_corrected@enda_71;report_event1.stalt_corrected@enda_71;"
      "datum_anflag.final@enda_71;datum_anflag.fg@enda_71;"
      "datum_anflag.depar@enda_71;datum_anflag.varqc@enda_71;"
      "datum_anflag.blacklist@enda_71;datum_anflag.ups@enda_71;"
      "datum_anflag.uvt@enda_71;datum_anflag.uhu@enda_71;"
      "datum_anflag.ut2@enda_71;datum_anflag.uh2@enda_71;"
      "datum_anflag.uv1@enda_71;datum_anflag.urr@enda_71;"
      "datum_anflag.usn@enda_71;datum_anflag.usst@enda_71;"
      "datum_status.active@enda_71;datum_status.passive@enda_71;"
      "datum_status.rejected@enda_71;datum_status.blacklisted@enda_71;"
      "datum_status.use_emiskf_only@enda_71;datum_event1.vertco_missing@enda_71;"
      "datum_event1.obsvalue_missing@enda_71;datum_event1.fg_missing@enda_71;"
      "datum_event1.rdb_rejected@enda_71;datum_event1.assim_cld_flag@enda_71;"
      "datum_event1.bad_practice@enda_71;datum_event1.vertpos_outrange@enda_71;"
      "datum_event1.fg2big@enda_71;datum_event1.depar2big@enda_71;"
      "datum_event1.obs_error2big@enda_71;datum_event1.datum_redundant@enda_71;"
      "datum_event1.level_redundant@enda_71;datum_event1.not_analysis_varno@enda_71;"
      "datum_event1.duplicate@enda_71;datum_event1.levels2many@enda_71;"
      "datum_event1.level_selection@enda_71;datum_event1.vertco_consistency@enda_71;"
      "datum_event1.vertco_type_changed@enda_71;datum_event1.combined_flagging@enda_71;"
      "datum_event1.report_rejected@enda_71;datum_event1.varqc_performed@enda_71;"
      "datum_event1.obserror_increased@enda_71;datum_event1.contam_cld_flag@enda_71;"
      "datum_event1.contam_rain_flag@enda_71;datum_event1.contam_aerosol_flag@enda_71;"
      "datum_event1.bad_emissivity@enda_71;datum_event1.model_cld_flag@enda_71;"
      "datum_event1.contam_trgas_flag@enda_71;datum_event1.land_sensitivity@enda_71;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_71_PREPTAG = T;
    CCMA_nT_enda_71_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_71_PREPTAG;
  return CCMA_T_enda_71_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_71(void *T);
extern int CCMA_Unpack_T_enda_71(void *T);
extern int CCMA_Sel_T_enda_71(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_71);
PrePutTable(CCMA, d, double, enda_71);
PreLoadTable(CCMA, enda_71);
PreStoreTable(CCMA, enda_71);
extern void CCMA_Dim_T_enda_71(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_71(void *T);
extern int CCMA_Sql_T_enda_71(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_71(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_72) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_72" : appearance order#197, hierarchy rank# 221, weight = 358.000197 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_72;

#endif /* defined(IS_a_TABLE_enda_72) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_72)
extern const ODB_Tags *CCMA_Set_T_enda_72_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_72_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_72_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_72_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_72_TAG = 0;
PRIVATE int CCMA_nT_enda_72_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_72_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_72_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_72_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_72"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_72"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_72"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_72"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_72"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_72"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_72"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_72"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_72"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_72"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_72"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_72"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_72"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_72"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_72"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_72"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_72"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_72"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_72"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_72"; T[19].name = s; }
    CCMA_T_enda_72_TAG = T;
    CCMA_nT_enda_72_TAG = ntag;
    CCMA_nT_enda_72_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_72_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_72_MEM;
  return CCMA_T_enda_72_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_72_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_72_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_72;report_status@enda_72;report_event1@enda_72;"
      "obsvalue@enda_72;datum_anflag@enda_72;datum_status@enda_72;"
      "datum_event1@enda_72;biascorr@enda_72;biascorr_fg@enda_72;"
      "an_depar@enda_72;fg_depar@enda_72;qc_pge@enda_72;final_obs_error@enda_72;"
      "obs_error@enda_72;fg_error@enda_72;skintemp_1@enda_72;"
      "skintemp_2@enda_72;skintemp_3@enda_72;skintemp_4@enda_72;"
      "skintemp_5@enda_72;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_72;report_status@enda_72;report_event1@enda_72;"
      "obsvalue@enda_72;datum_anflag@enda_72;datum_status@enda_72;"
      "datum_event1@enda_72;biascorr@enda_72;biascorr_fg@enda_72;"
      "an_depar@enda_72;fg_depar@enda_72;qc_pge@enda_72;final_obs_error@enda_72;"
      "obs_error@enda_72;fg_error@enda_72;skintemp_1@enda_72;"
      "skintemp_2@enda_72;skintemp_3@enda_72;skintemp_4@enda_72;"
      "skintemp_5@enda_72;report_status.active@enda_72;report_status.passive@enda_72;"
      "report_status.rejected@enda_72;report_status.blacklisted@enda_72;"
      "report_status.use_emiskf_only@enda_72;report_event1.no_data@enda_72;"
      "report_event1.all_rejected@enda_72;report_event1.bad_practice@enda_72;"
      "report_event1.rdb_rejected@enda_72;report_event1.redundant@enda_72;"
      "report_event1.stalt_missing@enda_72;report_event1.qc_failed@enda_72;"
      "report_event1.overcast_ir@enda_72;report_event1.thinned@enda_72;"
      "report_event1.latlon_corrected@enda_72;report_event1.stalt_corrected@enda_72;"
      "datum_anflag.final@enda_72;datum_anflag.fg@enda_72;"
      "datum_anflag.depar@enda_72;datum_anflag.varqc@enda_72;"
      "datum_anflag.blacklist@enda_72;datum_anflag.ups@enda_72;"
      "datum_anflag.uvt@enda_72;datum_anflag.uhu@enda_72;"
      "datum_anflag.ut2@enda_72;datum_anflag.uh2@enda_72;"
      "datum_anflag.uv1@enda_72;datum_anflag.urr@enda_72;"
      "datum_anflag.usn@enda_72;datum_anflag.usst@enda_72;"
      "datum_status.active@enda_72;datum_status.passive@enda_72;"
      "datum_status.rejected@enda_72;datum_status.blacklisted@enda_72;"
      "datum_status.use_emiskf_only@enda_72;datum_event1.vertco_missing@enda_72;"
      "datum_event1.obsvalue_missing@enda_72;datum_event1.fg_missing@enda_72;"
      "datum_event1.rdb_rejected@enda_72;datum_event1.assim_cld_flag@enda_72;"
      "datum_event1.bad_practice@enda_72;datum_event1.vertpos_outrange@enda_72;"
      "datum_event1.fg2big@enda_72;datum_event1.depar2big@enda_72;"
      "datum_event1.obs_error2big@enda_72;datum_event1.datum_redundant@enda_72;"
      "datum_event1.level_redundant@enda_72;datum_event1.not_analysis_varno@enda_72;"
      "datum_event1.duplicate@enda_72;datum_event1.levels2many@enda_72;"
      "datum_event1.level_selection@enda_72;datum_event1.vertco_consistency@enda_72;"
      "datum_event1.vertco_type_changed@enda_72;datum_event1.combined_flagging@enda_72;"
      "datum_event1.report_rejected@enda_72;datum_event1.varqc_performed@enda_72;"
      "datum_event1.obserror_increased@enda_72;datum_event1.contam_cld_flag@enda_72;"
      "datum_event1.contam_rain_flag@enda_72;datum_event1.contam_aerosol_flag@enda_72;"
      "datum_event1.bad_emissivity@enda_72;datum_event1.model_cld_flag@enda_72;"
      "datum_event1.contam_trgas_flag@enda_72;datum_event1.land_sensitivity@enda_72;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_72_PREPTAG = T;
    CCMA_nT_enda_72_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_72_PREPTAG;
  return CCMA_T_enda_72_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_72(void *T);
extern int CCMA_Unpack_T_enda_72(void *T);
extern int CCMA_Sel_T_enda_72(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_72);
PrePutTable(CCMA, d, double, enda_72);
PreLoadTable(CCMA, enda_72);
PreStoreTable(CCMA, enda_72);
extern void CCMA_Dim_T_enda_72(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_72(void *T);
extern int CCMA_Sql_T_enda_72(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_72(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_73) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_73" : appearance order#198, hierarchy rank# 222, weight = 358.000198 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_73;

#endif /* defined(IS_a_TABLE_enda_73) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_73)
extern const ODB_Tags *CCMA_Set_T_enda_73_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_73_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_73_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_73_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_73_TAG = 0;
PRIVATE int CCMA_nT_enda_73_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_73_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_73_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_73_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_73"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_73"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_73"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_73"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_73"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_73"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_73"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_73"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_73"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_73"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_73"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_73"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_73"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_73"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_73"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_73"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_73"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_73"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_73"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_73"; T[19].name = s; }
    CCMA_T_enda_73_TAG = T;
    CCMA_nT_enda_73_TAG = ntag;
    CCMA_nT_enda_73_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_73_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_73_MEM;
  return CCMA_T_enda_73_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_73_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_73_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_73;report_status@enda_73;report_event1@enda_73;"
      "obsvalue@enda_73;datum_anflag@enda_73;datum_status@enda_73;"
      "datum_event1@enda_73;biascorr@enda_73;biascorr_fg@enda_73;"
      "an_depar@enda_73;fg_depar@enda_73;qc_pge@enda_73;final_obs_error@enda_73;"
      "obs_error@enda_73;fg_error@enda_73;skintemp_1@enda_73;"
      "skintemp_2@enda_73;skintemp_3@enda_73;skintemp_4@enda_73;"
      "skintemp_5@enda_73;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_73;report_status@enda_73;report_event1@enda_73;"
      "obsvalue@enda_73;datum_anflag@enda_73;datum_status@enda_73;"
      "datum_event1@enda_73;biascorr@enda_73;biascorr_fg@enda_73;"
      "an_depar@enda_73;fg_depar@enda_73;qc_pge@enda_73;final_obs_error@enda_73;"
      "obs_error@enda_73;fg_error@enda_73;skintemp_1@enda_73;"
      "skintemp_2@enda_73;skintemp_3@enda_73;skintemp_4@enda_73;"
      "skintemp_5@enda_73;report_status.active@enda_73;report_status.passive@enda_73;"
      "report_status.rejected@enda_73;report_status.blacklisted@enda_73;"
      "report_status.use_emiskf_only@enda_73;report_event1.no_data@enda_73;"
      "report_event1.all_rejected@enda_73;report_event1.bad_practice@enda_73;"
      "report_event1.rdb_rejected@enda_73;report_event1.redundant@enda_73;"
      "report_event1.stalt_missing@enda_73;report_event1.qc_failed@enda_73;"
      "report_event1.overcast_ir@enda_73;report_event1.thinned@enda_73;"
      "report_event1.latlon_corrected@enda_73;report_event1.stalt_corrected@enda_73;"
      "datum_anflag.final@enda_73;datum_anflag.fg@enda_73;"
      "datum_anflag.depar@enda_73;datum_anflag.varqc@enda_73;"
      "datum_anflag.blacklist@enda_73;datum_anflag.ups@enda_73;"
      "datum_anflag.uvt@enda_73;datum_anflag.uhu@enda_73;"
      "datum_anflag.ut2@enda_73;datum_anflag.uh2@enda_73;"
      "datum_anflag.uv1@enda_73;datum_anflag.urr@enda_73;"
      "datum_anflag.usn@enda_73;datum_anflag.usst@enda_73;"
      "datum_status.active@enda_73;datum_status.passive@enda_73;"
      "datum_status.rejected@enda_73;datum_status.blacklisted@enda_73;"
      "datum_status.use_emiskf_only@enda_73;datum_event1.vertco_missing@enda_73;"
      "datum_event1.obsvalue_missing@enda_73;datum_event1.fg_missing@enda_73;"
      "datum_event1.rdb_rejected@enda_73;datum_event1.assim_cld_flag@enda_73;"
      "datum_event1.bad_practice@enda_73;datum_event1.vertpos_outrange@enda_73;"
      "datum_event1.fg2big@enda_73;datum_event1.depar2big@enda_73;"
      "datum_event1.obs_error2big@enda_73;datum_event1.datum_redundant@enda_73;"
      "datum_event1.level_redundant@enda_73;datum_event1.not_analysis_varno@enda_73;"
      "datum_event1.duplicate@enda_73;datum_event1.levels2many@enda_73;"
      "datum_event1.level_selection@enda_73;datum_event1.vertco_consistency@enda_73;"
      "datum_event1.vertco_type_changed@enda_73;datum_event1.combined_flagging@enda_73;"
      "datum_event1.report_rejected@enda_73;datum_event1.varqc_performed@enda_73;"
      "datum_event1.obserror_increased@enda_73;datum_event1.contam_cld_flag@enda_73;"
      "datum_event1.contam_rain_flag@enda_73;datum_event1.contam_aerosol_flag@enda_73;"
      "datum_event1.bad_emissivity@enda_73;datum_event1.model_cld_flag@enda_73;"
      "datum_event1.contam_trgas_flag@enda_73;datum_event1.land_sensitivity@enda_73;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_73_PREPTAG = T;
    CCMA_nT_enda_73_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_73_PREPTAG;
  return CCMA_T_enda_73_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_73(void *T);
extern int CCMA_Unpack_T_enda_73(void *T);
extern int CCMA_Sel_T_enda_73(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_73);
PrePutTable(CCMA, d, double, enda_73);
PreLoadTable(CCMA, enda_73);
PreStoreTable(CCMA, enda_73);
extern void CCMA_Dim_T_enda_73(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_73(void *T);
extern int CCMA_Sql_T_enda_73(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_73(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_74) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_74" : appearance order#199, hierarchy rank# 223, weight = 358.000199 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_74;

#endif /* defined(IS_a_TABLE_enda_74) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_74)
extern const ODB_Tags *CCMA_Set_T_enda_74_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_74_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_74_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_74_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_74_TAG = 0;
PRIVATE int CCMA_nT_enda_74_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_74_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_74_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_74_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_74"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_74"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_74"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_74"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_74"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_74"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_74"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_74"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_74"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_74"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_74"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_74"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_74"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_74"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_74"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_74"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_74"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_74"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_74"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_74"; T[19].name = s; }
    CCMA_T_enda_74_TAG = T;
    CCMA_nT_enda_74_TAG = ntag;
    CCMA_nT_enda_74_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_74_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_74_MEM;
  return CCMA_T_enda_74_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_74_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_74_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_74;report_status@enda_74;report_event1@enda_74;"
      "obsvalue@enda_74;datum_anflag@enda_74;datum_status@enda_74;"
      "datum_event1@enda_74;biascorr@enda_74;biascorr_fg@enda_74;"
      "an_depar@enda_74;fg_depar@enda_74;qc_pge@enda_74;final_obs_error@enda_74;"
      "obs_error@enda_74;fg_error@enda_74;skintemp_1@enda_74;"
      "skintemp_2@enda_74;skintemp_3@enda_74;skintemp_4@enda_74;"
      "skintemp_5@enda_74;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_74;report_status@enda_74;report_event1@enda_74;"
      "obsvalue@enda_74;datum_anflag@enda_74;datum_status@enda_74;"
      "datum_event1@enda_74;biascorr@enda_74;biascorr_fg@enda_74;"
      "an_depar@enda_74;fg_depar@enda_74;qc_pge@enda_74;final_obs_error@enda_74;"
      "obs_error@enda_74;fg_error@enda_74;skintemp_1@enda_74;"
      "skintemp_2@enda_74;skintemp_3@enda_74;skintemp_4@enda_74;"
      "skintemp_5@enda_74;report_status.active@enda_74;report_status.passive@enda_74;"
      "report_status.rejected@enda_74;report_status.blacklisted@enda_74;"
      "report_status.use_emiskf_only@enda_74;report_event1.no_data@enda_74;"
      "report_event1.all_rejected@enda_74;report_event1.bad_practice@enda_74;"
      "report_event1.rdb_rejected@enda_74;report_event1.redundant@enda_74;"
      "report_event1.stalt_missing@enda_74;report_event1.qc_failed@enda_74;"
      "report_event1.overcast_ir@enda_74;report_event1.thinned@enda_74;"
      "report_event1.latlon_corrected@enda_74;report_event1.stalt_corrected@enda_74;"
      "datum_anflag.final@enda_74;datum_anflag.fg@enda_74;"
      "datum_anflag.depar@enda_74;datum_anflag.varqc@enda_74;"
      "datum_anflag.blacklist@enda_74;datum_anflag.ups@enda_74;"
      "datum_anflag.uvt@enda_74;datum_anflag.uhu@enda_74;"
      "datum_anflag.ut2@enda_74;datum_anflag.uh2@enda_74;"
      "datum_anflag.uv1@enda_74;datum_anflag.urr@enda_74;"
      "datum_anflag.usn@enda_74;datum_anflag.usst@enda_74;"
      "datum_status.active@enda_74;datum_status.passive@enda_74;"
      "datum_status.rejected@enda_74;datum_status.blacklisted@enda_74;"
      "datum_status.use_emiskf_only@enda_74;datum_event1.vertco_missing@enda_74;"
      "datum_event1.obsvalue_missing@enda_74;datum_event1.fg_missing@enda_74;"
      "datum_event1.rdb_rejected@enda_74;datum_event1.assim_cld_flag@enda_74;"
      "datum_event1.bad_practice@enda_74;datum_event1.vertpos_outrange@enda_74;"
      "datum_event1.fg2big@enda_74;datum_event1.depar2big@enda_74;"
      "datum_event1.obs_error2big@enda_74;datum_event1.datum_redundant@enda_74;"
      "datum_event1.level_redundant@enda_74;datum_event1.not_analysis_varno@enda_74;"
      "datum_event1.duplicate@enda_74;datum_event1.levels2many@enda_74;"
      "datum_event1.level_selection@enda_74;datum_event1.vertco_consistency@enda_74;"
      "datum_event1.vertco_type_changed@enda_74;datum_event1.combined_flagging@enda_74;"
      "datum_event1.report_rejected@enda_74;datum_event1.varqc_performed@enda_74;"
      "datum_event1.obserror_increased@enda_74;datum_event1.contam_cld_flag@enda_74;"
      "datum_event1.contam_rain_flag@enda_74;datum_event1.contam_aerosol_flag@enda_74;"
      "datum_event1.bad_emissivity@enda_74;datum_event1.model_cld_flag@enda_74;"
      "datum_event1.contam_trgas_flag@enda_74;datum_event1.land_sensitivity@enda_74;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_74_PREPTAG = T;
    CCMA_nT_enda_74_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_74_PREPTAG;
  return CCMA_T_enda_74_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_74(void *T);
extern int CCMA_Unpack_T_enda_74(void *T);
extern int CCMA_Sel_T_enda_74(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_74);
PrePutTable(CCMA, d, double, enda_74);
PreLoadTable(CCMA, enda_74);
PreStoreTable(CCMA, enda_74);
extern void CCMA_Dim_T_enda_74(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_74(void *T);
extern int CCMA_Sql_T_enda_74(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_74(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_75) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_75" : appearance order#200, hierarchy rank# 224, weight = 358.000200 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_75;

#endif /* defined(IS_a_TABLE_enda_75) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_75)
extern const ODB_Tags *CCMA_Set_T_enda_75_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_75_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_75_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_75_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_75_TAG = 0;
PRIVATE int CCMA_nT_enda_75_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_75_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_75_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_75_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_75"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_75"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_75"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_75"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_75"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_75"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_75"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_75"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_75"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_75"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_75"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_75"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_75"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_75"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_75"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_75"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_75"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_75"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_75"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_75"; T[19].name = s; }
    CCMA_T_enda_75_TAG = T;
    CCMA_nT_enda_75_TAG = ntag;
    CCMA_nT_enda_75_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_75_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_75_MEM;
  return CCMA_T_enda_75_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_75_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_75_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_75;report_status@enda_75;report_event1@enda_75;"
      "obsvalue@enda_75;datum_anflag@enda_75;datum_status@enda_75;"
      "datum_event1@enda_75;biascorr@enda_75;biascorr_fg@enda_75;"
      "an_depar@enda_75;fg_depar@enda_75;qc_pge@enda_75;final_obs_error@enda_75;"
      "obs_error@enda_75;fg_error@enda_75;skintemp_1@enda_75;"
      "skintemp_2@enda_75;skintemp_3@enda_75;skintemp_4@enda_75;"
      "skintemp_5@enda_75;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_75;report_status@enda_75;report_event1@enda_75;"
      "obsvalue@enda_75;datum_anflag@enda_75;datum_status@enda_75;"
      "datum_event1@enda_75;biascorr@enda_75;biascorr_fg@enda_75;"
      "an_depar@enda_75;fg_depar@enda_75;qc_pge@enda_75;final_obs_error@enda_75;"
      "obs_error@enda_75;fg_error@enda_75;skintemp_1@enda_75;"
      "skintemp_2@enda_75;skintemp_3@enda_75;skintemp_4@enda_75;"
      "skintemp_5@enda_75;report_status.active@enda_75;report_status.passive@enda_75;"
      "report_status.rejected@enda_75;report_status.blacklisted@enda_75;"
      "report_status.use_emiskf_only@enda_75;report_event1.no_data@enda_75;"
      "report_event1.all_rejected@enda_75;report_event1.bad_practice@enda_75;"
      "report_event1.rdb_rejected@enda_75;report_event1.redundant@enda_75;"
      "report_event1.stalt_missing@enda_75;report_event1.qc_failed@enda_75;"
      "report_event1.overcast_ir@enda_75;report_event1.thinned@enda_75;"
      "report_event1.latlon_corrected@enda_75;report_event1.stalt_corrected@enda_75;"
      "datum_anflag.final@enda_75;datum_anflag.fg@enda_75;"
      "datum_anflag.depar@enda_75;datum_anflag.varqc@enda_75;"
      "datum_anflag.blacklist@enda_75;datum_anflag.ups@enda_75;"
      "datum_anflag.uvt@enda_75;datum_anflag.uhu@enda_75;"
      "datum_anflag.ut2@enda_75;datum_anflag.uh2@enda_75;"
      "datum_anflag.uv1@enda_75;datum_anflag.urr@enda_75;"
      "datum_anflag.usn@enda_75;datum_anflag.usst@enda_75;"
      "datum_status.active@enda_75;datum_status.passive@enda_75;"
      "datum_status.rejected@enda_75;datum_status.blacklisted@enda_75;"
      "datum_status.use_emiskf_only@enda_75;datum_event1.vertco_missing@enda_75;"
      "datum_event1.obsvalue_missing@enda_75;datum_event1.fg_missing@enda_75;"
      "datum_event1.rdb_rejected@enda_75;datum_event1.assim_cld_flag@enda_75;"
      "datum_event1.bad_practice@enda_75;datum_event1.vertpos_outrange@enda_75;"
      "datum_event1.fg2big@enda_75;datum_event1.depar2big@enda_75;"
      "datum_event1.obs_error2big@enda_75;datum_event1.datum_redundant@enda_75;"
      "datum_event1.level_redundant@enda_75;datum_event1.not_analysis_varno@enda_75;"
      "datum_event1.duplicate@enda_75;datum_event1.levels2many@enda_75;"
      "datum_event1.level_selection@enda_75;datum_event1.vertco_consistency@enda_75;"
      "datum_event1.vertco_type_changed@enda_75;datum_event1.combined_flagging@enda_75;"
      "datum_event1.report_rejected@enda_75;datum_event1.varqc_performed@enda_75;"
      "datum_event1.obserror_increased@enda_75;datum_event1.contam_cld_flag@enda_75;"
      "datum_event1.contam_rain_flag@enda_75;datum_event1.contam_aerosol_flag@enda_75;"
      "datum_event1.bad_emissivity@enda_75;datum_event1.model_cld_flag@enda_75;"
      "datum_event1.contam_trgas_flag@enda_75;datum_event1.land_sensitivity@enda_75;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_75_PREPTAG = T;
    CCMA_nT_enda_75_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_75_PREPTAG;
  return CCMA_T_enda_75_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_75(void *T);
extern int CCMA_Unpack_T_enda_75(void *T);
extern int CCMA_Sel_T_enda_75(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_75);
PrePutTable(CCMA, d, double, enda_75);
PreLoadTable(CCMA, enda_75);
PreStoreTable(CCMA, enda_75);
extern void CCMA_Dim_T_enda_75(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_75(void *T);
extern int CCMA_Sql_T_enda_75(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_75(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_76) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_76" : appearance order#201, hierarchy rank# 225, weight = 358.000201 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_76;

#endif /* defined(IS_a_TABLE_enda_76) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_76)
extern const ODB_Tags *CCMA_Set_T_enda_76_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_76_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_76_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_76_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_76_TAG = 0;
PRIVATE int CCMA_nT_enda_76_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_76_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_76_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_76_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_76"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_76"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_76"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_76"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_76"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_76"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_76"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_76"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_76"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_76"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_76"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_76"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_76"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_76"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_76"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_76"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_76"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_76"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_76"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_76"; T[19].name = s; }
    CCMA_T_enda_76_TAG = T;
    CCMA_nT_enda_76_TAG = ntag;
    CCMA_nT_enda_76_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_76_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_76_MEM;
  return CCMA_T_enda_76_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_76_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_76_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_76;report_status@enda_76;report_event1@enda_76;"
      "obsvalue@enda_76;datum_anflag@enda_76;datum_status@enda_76;"
      "datum_event1@enda_76;biascorr@enda_76;biascorr_fg@enda_76;"
      "an_depar@enda_76;fg_depar@enda_76;qc_pge@enda_76;final_obs_error@enda_76;"
      "obs_error@enda_76;fg_error@enda_76;skintemp_1@enda_76;"
      "skintemp_2@enda_76;skintemp_3@enda_76;skintemp_4@enda_76;"
      "skintemp_5@enda_76;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_76;report_status@enda_76;report_event1@enda_76;"
      "obsvalue@enda_76;datum_anflag@enda_76;datum_status@enda_76;"
      "datum_event1@enda_76;biascorr@enda_76;biascorr_fg@enda_76;"
      "an_depar@enda_76;fg_depar@enda_76;qc_pge@enda_76;final_obs_error@enda_76;"
      "obs_error@enda_76;fg_error@enda_76;skintemp_1@enda_76;"
      "skintemp_2@enda_76;skintemp_3@enda_76;skintemp_4@enda_76;"
      "skintemp_5@enda_76;report_status.active@enda_76;report_status.passive@enda_76;"
      "report_status.rejected@enda_76;report_status.blacklisted@enda_76;"
      "report_status.use_emiskf_only@enda_76;report_event1.no_data@enda_76;"
      "report_event1.all_rejected@enda_76;report_event1.bad_practice@enda_76;"
      "report_event1.rdb_rejected@enda_76;report_event1.redundant@enda_76;"
      "report_event1.stalt_missing@enda_76;report_event1.qc_failed@enda_76;"
      "report_event1.overcast_ir@enda_76;report_event1.thinned@enda_76;"
      "report_event1.latlon_corrected@enda_76;report_event1.stalt_corrected@enda_76;"
      "datum_anflag.final@enda_76;datum_anflag.fg@enda_76;"
      "datum_anflag.depar@enda_76;datum_anflag.varqc@enda_76;"
      "datum_anflag.blacklist@enda_76;datum_anflag.ups@enda_76;"
      "datum_anflag.uvt@enda_76;datum_anflag.uhu@enda_76;"
      "datum_anflag.ut2@enda_76;datum_anflag.uh2@enda_76;"
      "datum_anflag.uv1@enda_76;datum_anflag.urr@enda_76;"
      "datum_anflag.usn@enda_76;datum_anflag.usst@enda_76;"
      "datum_status.active@enda_76;datum_status.passive@enda_76;"
      "datum_status.rejected@enda_76;datum_status.blacklisted@enda_76;"
      "datum_status.use_emiskf_only@enda_76;datum_event1.vertco_missing@enda_76;"
      "datum_event1.obsvalue_missing@enda_76;datum_event1.fg_missing@enda_76;"
      "datum_event1.rdb_rejected@enda_76;datum_event1.assim_cld_flag@enda_76;"
      "datum_event1.bad_practice@enda_76;datum_event1.vertpos_outrange@enda_76;"
      "datum_event1.fg2big@enda_76;datum_event1.depar2big@enda_76;"
      "datum_event1.obs_error2big@enda_76;datum_event1.datum_redundant@enda_76;"
      "datum_event1.level_redundant@enda_76;datum_event1.not_analysis_varno@enda_76;"
      "datum_event1.duplicate@enda_76;datum_event1.levels2many@enda_76;"
      "datum_event1.level_selection@enda_76;datum_event1.vertco_consistency@enda_76;"
      "datum_event1.vertco_type_changed@enda_76;datum_event1.combined_flagging@enda_76;"
      "datum_event1.report_rejected@enda_76;datum_event1.varqc_performed@enda_76;"
      "datum_event1.obserror_increased@enda_76;datum_event1.contam_cld_flag@enda_76;"
      "datum_event1.contam_rain_flag@enda_76;datum_event1.contam_aerosol_flag@enda_76;"
      "datum_event1.bad_emissivity@enda_76;datum_event1.model_cld_flag@enda_76;"
      "datum_event1.contam_trgas_flag@enda_76;datum_event1.land_sensitivity@enda_76;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_76_PREPTAG = T;
    CCMA_nT_enda_76_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_76_PREPTAG;
  return CCMA_T_enda_76_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_76(void *T);
extern int CCMA_Unpack_T_enda_76(void *T);
extern int CCMA_Sel_T_enda_76(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_76);
PrePutTable(CCMA, d, double, enda_76);
PreLoadTable(CCMA, enda_76);
PreStoreTable(CCMA, enda_76);
extern void CCMA_Dim_T_enda_76(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_76(void *T);
extern int CCMA_Sql_T_enda_76(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_76(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_77) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_77" : appearance order#202, hierarchy rank# 226, weight = 358.000202 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_77;

#endif /* defined(IS_a_TABLE_enda_77) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_77)
extern const ODB_Tags *CCMA_Set_T_enda_77_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_77_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_77_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_77_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_77_TAG = 0;
PRIVATE int CCMA_nT_enda_77_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_77_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_77_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_77_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_77"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_77"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_77"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_77"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_77"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_77"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_77"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_77"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_77"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_77"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_77"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_77"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_77"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_77"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_77"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_77"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_77"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_77"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_77"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_77"; T[19].name = s; }
    CCMA_T_enda_77_TAG = T;
    CCMA_nT_enda_77_TAG = ntag;
    CCMA_nT_enda_77_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_77_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_77_MEM;
  return CCMA_T_enda_77_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_77_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_77_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_77;report_status@enda_77;report_event1@enda_77;"
      "obsvalue@enda_77;datum_anflag@enda_77;datum_status@enda_77;"
      "datum_event1@enda_77;biascorr@enda_77;biascorr_fg@enda_77;"
      "an_depar@enda_77;fg_depar@enda_77;qc_pge@enda_77;final_obs_error@enda_77;"
      "obs_error@enda_77;fg_error@enda_77;skintemp_1@enda_77;"
      "skintemp_2@enda_77;skintemp_3@enda_77;skintemp_4@enda_77;"
      "skintemp_5@enda_77;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_77;report_status@enda_77;report_event1@enda_77;"
      "obsvalue@enda_77;datum_anflag@enda_77;datum_status@enda_77;"
      "datum_event1@enda_77;biascorr@enda_77;biascorr_fg@enda_77;"
      "an_depar@enda_77;fg_depar@enda_77;qc_pge@enda_77;final_obs_error@enda_77;"
      "obs_error@enda_77;fg_error@enda_77;skintemp_1@enda_77;"
      "skintemp_2@enda_77;skintemp_3@enda_77;skintemp_4@enda_77;"
      "skintemp_5@enda_77;report_status.active@enda_77;report_status.passive@enda_77;"
      "report_status.rejected@enda_77;report_status.blacklisted@enda_77;"
      "report_status.use_emiskf_only@enda_77;report_event1.no_data@enda_77;"
      "report_event1.all_rejected@enda_77;report_event1.bad_practice@enda_77;"
      "report_event1.rdb_rejected@enda_77;report_event1.redundant@enda_77;"
      "report_event1.stalt_missing@enda_77;report_event1.qc_failed@enda_77;"
      "report_event1.overcast_ir@enda_77;report_event1.thinned@enda_77;"
      "report_event1.latlon_corrected@enda_77;report_event1.stalt_corrected@enda_77;"
      "datum_anflag.final@enda_77;datum_anflag.fg@enda_77;"
      "datum_anflag.depar@enda_77;datum_anflag.varqc@enda_77;"
      "datum_anflag.blacklist@enda_77;datum_anflag.ups@enda_77;"
      "datum_anflag.uvt@enda_77;datum_anflag.uhu@enda_77;"
      "datum_anflag.ut2@enda_77;datum_anflag.uh2@enda_77;"
      "datum_anflag.uv1@enda_77;datum_anflag.urr@enda_77;"
      "datum_anflag.usn@enda_77;datum_anflag.usst@enda_77;"
      "datum_status.active@enda_77;datum_status.passive@enda_77;"
      "datum_status.rejected@enda_77;datum_status.blacklisted@enda_77;"
      "datum_status.use_emiskf_only@enda_77;datum_event1.vertco_missing@enda_77;"
      "datum_event1.obsvalue_missing@enda_77;datum_event1.fg_missing@enda_77;"
      "datum_event1.rdb_rejected@enda_77;datum_event1.assim_cld_flag@enda_77;"
      "datum_event1.bad_practice@enda_77;datum_event1.vertpos_outrange@enda_77;"
      "datum_event1.fg2big@enda_77;datum_event1.depar2big@enda_77;"
      "datum_event1.obs_error2big@enda_77;datum_event1.datum_redundant@enda_77;"
      "datum_event1.level_redundant@enda_77;datum_event1.not_analysis_varno@enda_77;"
      "datum_event1.duplicate@enda_77;datum_event1.levels2many@enda_77;"
      "datum_event1.level_selection@enda_77;datum_event1.vertco_consistency@enda_77;"
      "datum_event1.vertco_type_changed@enda_77;datum_event1.combined_flagging@enda_77;"
      "datum_event1.report_rejected@enda_77;datum_event1.varqc_performed@enda_77;"
      "datum_event1.obserror_increased@enda_77;datum_event1.contam_cld_flag@enda_77;"
      "datum_event1.contam_rain_flag@enda_77;datum_event1.contam_aerosol_flag@enda_77;"
      "datum_event1.bad_emissivity@enda_77;datum_event1.model_cld_flag@enda_77;"
      "datum_event1.contam_trgas_flag@enda_77;datum_event1.land_sensitivity@enda_77;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_77_PREPTAG = T;
    CCMA_nT_enda_77_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_77_PREPTAG;
  return CCMA_T_enda_77_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_77(void *T);
extern int CCMA_Unpack_T_enda_77(void *T);
extern int CCMA_Sel_T_enda_77(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_77);
PrePutTable(CCMA, d, double, enda_77);
PreLoadTable(CCMA, enda_77);
PreStoreTable(CCMA, enda_77);
extern void CCMA_Dim_T_enda_77(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_77(void *T);
extern int CCMA_Sql_T_enda_77(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_77(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_78) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_78" : appearance order#203, hierarchy rank# 227, weight = 358.000203 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_78;

#endif /* defined(IS_a_TABLE_enda_78) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_78)
extern const ODB_Tags *CCMA_Set_T_enda_78_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_78_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_78_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_78_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_78_TAG = 0;
PRIVATE int CCMA_nT_enda_78_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_78_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_78_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_78_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_78"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_78"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_78"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_78"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_78"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_78"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_78"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_78"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_78"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_78"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_78"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_78"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_78"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_78"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_78"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_78"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_78"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_78"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_78"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_78"; T[19].name = s; }
    CCMA_T_enda_78_TAG = T;
    CCMA_nT_enda_78_TAG = ntag;
    CCMA_nT_enda_78_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_78_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_78_MEM;
  return CCMA_T_enda_78_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_78_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_78_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_78;report_status@enda_78;report_event1@enda_78;"
      "obsvalue@enda_78;datum_anflag@enda_78;datum_status@enda_78;"
      "datum_event1@enda_78;biascorr@enda_78;biascorr_fg@enda_78;"
      "an_depar@enda_78;fg_depar@enda_78;qc_pge@enda_78;final_obs_error@enda_78;"
      "obs_error@enda_78;fg_error@enda_78;skintemp_1@enda_78;"
      "skintemp_2@enda_78;skintemp_3@enda_78;skintemp_4@enda_78;"
      "skintemp_5@enda_78;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_78;report_status@enda_78;report_event1@enda_78;"
      "obsvalue@enda_78;datum_anflag@enda_78;datum_status@enda_78;"
      "datum_event1@enda_78;biascorr@enda_78;biascorr_fg@enda_78;"
      "an_depar@enda_78;fg_depar@enda_78;qc_pge@enda_78;final_obs_error@enda_78;"
      "obs_error@enda_78;fg_error@enda_78;skintemp_1@enda_78;"
      "skintemp_2@enda_78;skintemp_3@enda_78;skintemp_4@enda_78;"
      "skintemp_5@enda_78;report_status.active@enda_78;report_status.passive@enda_78;"
      "report_status.rejected@enda_78;report_status.blacklisted@enda_78;"
      "report_status.use_emiskf_only@enda_78;report_event1.no_data@enda_78;"
      "report_event1.all_rejected@enda_78;report_event1.bad_practice@enda_78;"
      "report_event1.rdb_rejected@enda_78;report_event1.redundant@enda_78;"
      "report_event1.stalt_missing@enda_78;report_event1.qc_failed@enda_78;"
      "report_event1.overcast_ir@enda_78;report_event1.thinned@enda_78;"
      "report_event1.latlon_corrected@enda_78;report_event1.stalt_corrected@enda_78;"
      "datum_anflag.final@enda_78;datum_anflag.fg@enda_78;"
      "datum_anflag.depar@enda_78;datum_anflag.varqc@enda_78;"
      "datum_anflag.blacklist@enda_78;datum_anflag.ups@enda_78;"
      "datum_anflag.uvt@enda_78;datum_anflag.uhu@enda_78;"
      "datum_anflag.ut2@enda_78;datum_anflag.uh2@enda_78;"
      "datum_anflag.uv1@enda_78;datum_anflag.urr@enda_78;"
      "datum_anflag.usn@enda_78;datum_anflag.usst@enda_78;"
      "datum_status.active@enda_78;datum_status.passive@enda_78;"
      "datum_status.rejected@enda_78;datum_status.blacklisted@enda_78;"
      "datum_status.use_emiskf_only@enda_78;datum_event1.vertco_missing@enda_78;"
      "datum_event1.obsvalue_missing@enda_78;datum_event1.fg_missing@enda_78;"
      "datum_event1.rdb_rejected@enda_78;datum_event1.assim_cld_flag@enda_78;"
      "datum_event1.bad_practice@enda_78;datum_event1.vertpos_outrange@enda_78;"
      "datum_event1.fg2big@enda_78;datum_event1.depar2big@enda_78;"
      "datum_event1.obs_error2big@enda_78;datum_event1.datum_redundant@enda_78;"
      "datum_event1.level_redundant@enda_78;datum_event1.not_analysis_varno@enda_78;"
      "datum_event1.duplicate@enda_78;datum_event1.levels2many@enda_78;"
      "datum_event1.level_selection@enda_78;datum_event1.vertco_consistency@enda_78;"
      "datum_event1.vertco_type_changed@enda_78;datum_event1.combined_flagging@enda_78;"
      "datum_event1.report_rejected@enda_78;datum_event1.varqc_performed@enda_78;"
      "datum_event1.obserror_increased@enda_78;datum_event1.contam_cld_flag@enda_78;"
      "datum_event1.contam_rain_flag@enda_78;datum_event1.contam_aerosol_flag@enda_78;"
      "datum_event1.bad_emissivity@enda_78;datum_event1.model_cld_flag@enda_78;"
      "datum_event1.contam_trgas_flag@enda_78;datum_event1.land_sensitivity@enda_78;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_78_PREPTAG = T;
    CCMA_nT_enda_78_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_78_PREPTAG;
  return CCMA_T_enda_78_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_78(void *T);
extern int CCMA_Unpack_T_enda_78(void *T);
extern int CCMA_Sel_T_enda_78(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_78);
PrePutTable(CCMA, d, double, enda_78);
PreLoadTable(CCMA, enda_78);
PreStoreTable(CCMA, enda_78);
extern void CCMA_Dim_T_enda_78(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_78(void *T);
extern int CCMA_Sql_T_enda_78(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_78(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_79) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_79" : appearance order#204, hierarchy rank# 228, weight = 358.000204 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_79;

#endif /* defined(IS_a_TABLE_enda_79) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_79)
extern const ODB_Tags *CCMA_Set_T_enda_79_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_79_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_79_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_79_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_79_TAG = 0;
PRIVATE int CCMA_nT_enda_79_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_79_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_79_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_79_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_79"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_79"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_79"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_79"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_79"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_79"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_79"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_79"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_79"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_79"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_79"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_79"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_79"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_79"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_79"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_79"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_79"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_79"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_79"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_79"; T[19].name = s; }
    CCMA_T_enda_79_TAG = T;
    CCMA_nT_enda_79_TAG = ntag;
    CCMA_nT_enda_79_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_79_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_79_MEM;
  return CCMA_T_enda_79_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_79_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_79_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_79;report_status@enda_79;report_event1@enda_79;"
      "obsvalue@enda_79;datum_anflag@enda_79;datum_status@enda_79;"
      "datum_event1@enda_79;biascorr@enda_79;biascorr_fg@enda_79;"
      "an_depar@enda_79;fg_depar@enda_79;qc_pge@enda_79;final_obs_error@enda_79;"
      "obs_error@enda_79;fg_error@enda_79;skintemp_1@enda_79;"
      "skintemp_2@enda_79;skintemp_3@enda_79;skintemp_4@enda_79;"
      "skintemp_5@enda_79;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_79;report_status@enda_79;report_event1@enda_79;"
      "obsvalue@enda_79;datum_anflag@enda_79;datum_status@enda_79;"
      "datum_event1@enda_79;biascorr@enda_79;biascorr_fg@enda_79;"
      "an_depar@enda_79;fg_depar@enda_79;qc_pge@enda_79;final_obs_error@enda_79;"
      "obs_error@enda_79;fg_error@enda_79;skintemp_1@enda_79;"
      "skintemp_2@enda_79;skintemp_3@enda_79;skintemp_4@enda_79;"
      "skintemp_5@enda_79;report_status.active@enda_79;report_status.passive@enda_79;"
      "report_status.rejected@enda_79;report_status.blacklisted@enda_79;"
      "report_status.use_emiskf_only@enda_79;report_event1.no_data@enda_79;"
      "report_event1.all_rejected@enda_79;report_event1.bad_practice@enda_79;"
      "report_event1.rdb_rejected@enda_79;report_event1.redundant@enda_79;"
      "report_event1.stalt_missing@enda_79;report_event1.qc_failed@enda_79;"
      "report_event1.overcast_ir@enda_79;report_event1.thinned@enda_79;"
      "report_event1.latlon_corrected@enda_79;report_event1.stalt_corrected@enda_79;"
      "datum_anflag.final@enda_79;datum_anflag.fg@enda_79;"
      "datum_anflag.depar@enda_79;datum_anflag.varqc@enda_79;"
      "datum_anflag.blacklist@enda_79;datum_anflag.ups@enda_79;"
      "datum_anflag.uvt@enda_79;datum_anflag.uhu@enda_79;"
      "datum_anflag.ut2@enda_79;datum_anflag.uh2@enda_79;"
      "datum_anflag.uv1@enda_79;datum_anflag.urr@enda_79;"
      "datum_anflag.usn@enda_79;datum_anflag.usst@enda_79;"
      "datum_status.active@enda_79;datum_status.passive@enda_79;"
      "datum_status.rejected@enda_79;datum_status.blacklisted@enda_79;"
      "datum_status.use_emiskf_only@enda_79;datum_event1.vertco_missing@enda_79;"
      "datum_event1.obsvalue_missing@enda_79;datum_event1.fg_missing@enda_79;"
      "datum_event1.rdb_rejected@enda_79;datum_event1.assim_cld_flag@enda_79;"
      "datum_event1.bad_practice@enda_79;datum_event1.vertpos_outrange@enda_79;"
      "datum_event1.fg2big@enda_79;datum_event1.depar2big@enda_79;"
      "datum_event1.obs_error2big@enda_79;datum_event1.datum_redundant@enda_79;"
      "datum_event1.level_redundant@enda_79;datum_event1.not_analysis_varno@enda_79;"
      "datum_event1.duplicate@enda_79;datum_event1.levels2many@enda_79;"
      "datum_event1.level_selection@enda_79;datum_event1.vertco_consistency@enda_79;"
      "datum_event1.vertco_type_changed@enda_79;datum_event1.combined_flagging@enda_79;"
      "datum_event1.report_rejected@enda_79;datum_event1.varqc_performed@enda_79;"
      "datum_event1.obserror_increased@enda_79;datum_event1.contam_cld_flag@enda_79;"
      "datum_event1.contam_rain_flag@enda_79;datum_event1.contam_aerosol_flag@enda_79;"
      "datum_event1.bad_emissivity@enda_79;datum_event1.model_cld_flag@enda_79;"
      "datum_event1.contam_trgas_flag@enda_79;datum_event1.land_sensitivity@enda_79;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_79_PREPTAG = T;
    CCMA_nT_enda_79_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_79_PREPTAG;
  return CCMA_T_enda_79_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_79(void *T);
extern int CCMA_Unpack_T_enda_79(void *T);
extern int CCMA_Sel_T_enda_79(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_79);
PrePutTable(CCMA, d, double, enda_79);
PreLoadTable(CCMA, enda_79);
PreStoreTable(CCMA, enda_79);
extern void CCMA_Dim_T_enda_79(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_79(void *T);
extern int CCMA_Sql_T_enda_79(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_79(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_80) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_80" : appearance order#205, hierarchy rank# 229, weight = 358.000205 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_80;

#endif /* defined(IS_a_TABLE_enda_80) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_80)
extern const ODB_Tags *CCMA_Set_T_enda_80_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_80_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_80_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_80_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_80_TAG = 0;
PRIVATE int CCMA_nT_enda_80_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_80_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_80_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_80_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_80"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_80"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_80"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_80"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_80"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_80"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_80"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_80"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_80"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_80"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_80"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_80"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_80"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_80"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_80"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_80"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_80"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_80"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_80"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_80"; T[19].name = s; }
    CCMA_T_enda_80_TAG = T;
    CCMA_nT_enda_80_TAG = ntag;
    CCMA_nT_enda_80_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_80_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_80_MEM;
  return CCMA_T_enda_80_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_80_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_80_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_80;report_status@enda_80;report_event1@enda_80;"
      "obsvalue@enda_80;datum_anflag@enda_80;datum_status@enda_80;"
      "datum_event1@enda_80;biascorr@enda_80;biascorr_fg@enda_80;"
      "an_depar@enda_80;fg_depar@enda_80;qc_pge@enda_80;final_obs_error@enda_80;"
      "obs_error@enda_80;fg_error@enda_80;skintemp_1@enda_80;"
      "skintemp_2@enda_80;skintemp_3@enda_80;skintemp_4@enda_80;"
      "skintemp_5@enda_80;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_80;report_status@enda_80;report_event1@enda_80;"
      "obsvalue@enda_80;datum_anflag@enda_80;datum_status@enda_80;"
      "datum_event1@enda_80;biascorr@enda_80;biascorr_fg@enda_80;"
      "an_depar@enda_80;fg_depar@enda_80;qc_pge@enda_80;final_obs_error@enda_80;"
      "obs_error@enda_80;fg_error@enda_80;skintemp_1@enda_80;"
      "skintemp_2@enda_80;skintemp_3@enda_80;skintemp_4@enda_80;"
      "skintemp_5@enda_80;report_status.active@enda_80;report_status.passive@enda_80;"
      "report_status.rejected@enda_80;report_status.blacklisted@enda_80;"
      "report_status.use_emiskf_only@enda_80;report_event1.no_data@enda_80;"
      "report_event1.all_rejected@enda_80;report_event1.bad_practice@enda_80;"
      "report_event1.rdb_rejected@enda_80;report_event1.redundant@enda_80;"
      "report_event1.stalt_missing@enda_80;report_event1.qc_failed@enda_80;"
      "report_event1.overcast_ir@enda_80;report_event1.thinned@enda_80;"
      "report_event1.latlon_corrected@enda_80;report_event1.stalt_corrected@enda_80;"
      "datum_anflag.final@enda_80;datum_anflag.fg@enda_80;"
      "datum_anflag.depar@enda_80;datum_anflag.varqc@enda_80;"
      "datum_anflag.blacklist@enda_80;datum_anflag.ups@enda_80;"
      "datum_anflag.uvt@enda_80;datum_anflag.uhu@enda_80;"
      "datum_anflag.ut2@enda_80;datum_anflag.uh2@enda_80;"
      "datum_anflag.uv1@enda_80;datum_anflag.urr@enda_80;"
      "datum_anflag.usn@enda_80;datum_anflag.usst@enda_80;"
      "datum_status.active@enda_80;datum_status.passive@enda_80;"
      "datum_status.rejected@enda_80;datum_status.blacklisted@enda_80;"
      "datum_status.use_emiskf_only@enda_80;datum_event1.vertco_missing@enda_80;"
      "datum_event1.obsvalue_missing@enda_80;datum_event1.fg_missing@enda_80;"
      "datum_event1.rdb_rejected@enda_80;datum_event1.assim_cld_flag@enda_80;"
      "datum_event1.bad_practice@enda_80;datum_event1.vertpos_outrange@enda_80;"
      "datum_event1.fg2big@enda_80;datum_event1.depar2big@enda_80;"
      "datum_event1.obs_error2big@enda_80;datum_event1.datum_redundant@enda_80;"
      "datum_event1.level_redundant@enda_80;datum_event1.not_analysis_varno@enda_80;"
      "datum_event1.duplicate@enda_80;datum_event1.levels2many@enda_80;"
      "datum_event1.level_selection@enda_80;datum_event1.vertco_consistency@enda_80;"
      "datum_event1.vertco_type_changed@enda_80;datum_event1.combined_flagging@enda_80;"
      "datum_event1.report_rejected@enda_80;datum_event1.varqc_performed@enda_80;"
      "datum_event1.obserror_increased@enda_80;datum_event1.contam_cld_flag@enda_80;"
      "datum_event1.contam_rain_flag@enda_80;datum_event1.contam_aerosol_flag@enda_80;"
      "datum_event1.bad_emissivity@enda_80;datum_event1.model_cld_flag@enda_80;"
      "datum_event1.contam_trgas_flag@enda_80;datum_event1.land_sensitivity@enda_80;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_80_PREPTAG = T;
    CCMA_nT_enda_80_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_80_PREPTAG;
  return CCMA_T_enda_80_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_80(void *T);
extern int CCMA_Unpack_T_enda_80(void *T);
extern int CCMA_Sel_T_enda_80(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_80);
PrePutTable(CCMA, d, double, enda_80);
PreLoadTable(CCMA, enda_80);
PreStoreTable(CCMA, enda_80);
extern void CCMA_Dim_T_enda_80(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_80(void *T);
extern int CCMA_Sql_T_enda_80(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_80(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_81) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_81" : appearance order#206, hierarchy rank# 230, weight = 358.000206 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_81;

#endif /* defined(IS_a_TABLE_enda_81) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_81)
extern const ODB_Tags *CCMA_Set_T_enda_81_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_81_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_81_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_81_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_81_TAG = 0;
PRIVATE int CCMA_nT_enda_81_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_81_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_81_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_81_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_81"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_81"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_81"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_81"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_81"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_81"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_81"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_81"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_81"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_81"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_81"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_81"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_81"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_81"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_81"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_81"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_81"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_81"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_81"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_81"; T[19].name = s; }
    CCMA_T_enda_81_TAG = T;
    CCMA_nT_enda_81_TAG = ntag;
    CCMA_nT_enda_81_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_81_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_81_MEM;
  return CCMA_T_enda_81_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_81_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_81_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_81;report_status@enda_81;report_event1@enda_81;"
      "obsvalue@enda_81;datum_anflag@enda_81;datum_status@enda_81;"
      "datum_event1@enda_81;biascorr@enda_81;biascorr_fg@enda_81;"
      "an_depar@enda_81;fg_depar@enda_81;qc_pge@enda_81;final_obs_error@enda_81;"
      "obs_error@enda_81;fg_error@enda_81;skintemp_1@enda_81;"
      "skintemp_2@enda_81;skintemp_3@enda_81;skintemp_4@enda_81;"
      "skintemp_5@enda_81;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_81;report_status@enda_81;report_event1@enda_81;"
      "obsvalue@enda_81;datum_anflag@enda_81;datum_status@enda_81;"
      "datum_event1@enda_81;biascorr@enda_81;biascorr_fg@enda_81;"
      "an_depar@enda_81;fg_depar@enda_81;qc_pge@enda_81;final_obs_error@enda_81;"
      "obs_error@enda_81;fg_error@enda_81;skintemp_1@enda_81;"
      "skintemp_2@enda_81;skintemp_3@enda_81;skintemp_4@enda_81;"
      "skintemp_5@enda_81;report_status.active@enda_81;report_status.passive@enda_81;"
      "report_status.rejected@enda_81;report_status.blacklisted@enda_81;"
      "report_status.use_emiskf_only@enda_81;report_event1.no_data@enda_81;"
      "report_event1.all_rejected@enda_81;report_event1.bad_practice@enda_81;"
      "report_event1.rdb_rejected@enda_81;report_event1.redundant@enda_81;"
      "report_event1.stalt_missing@enda_81;report_event1.qc_failed@enda_81;"
      "report_event1.overcast_ir@enda_81;report_event1.thinned@enda_81;"
      "report_event1.latlon_corrected@enda_81;report_event1.stalt_corrected@enda_81;"
      "datum_anflag.final@enda_81;datum_anflag.fg@enda_81;"
      "datum_anflag.depar@enda_81;datum_anflag.varqc@enda_81;"
      "datum_anflag.blacklist@enda_81;datum_anflag.ups@enda_81;"
      "datum_anflag.uvt@enda_81;datum_anflag.uhu@enda_81;"
      "datum_anflag.ut2@enda_81;datum_anflag.uh2@enda_81;"
      "datum_anflag.uv1@enda_81;datum_anflag.urr@enda_81;"
      "datum_anflag.usn@enda_81;datum_anflag.usst@enda_81;"
      "datum_status.active@enda_81;datum_status.passive@enda_81;"
      "datum_status.rejected@enda_81;datum_status.blacklisted@enda_81;"
      "datum_status.use_emiskf_only@enda_81;datum_event1.vertco_missing@enda_81;"
      "datum_event1.obsvalue_missing@enda_81;datum_event1.fg_missing@enda_81;"
      "datum_event1.rdb_rejected@enda_81;datum_event1.assim_cld_flag@enda_81;"
      "datum_event1.bad_practice@enda_81;datum_event1.vertpos_outrange@enda_81;"
      "datum_event1.fg2big@enda_81;datum_event1.depar2big@enda_81;"
      "datum_event1.obs_error2big@enda_81;datum_event1.datum_redundant@enda_81;"
      "datum_event1.level_redundant@enda_81;datum_event1.not_analysis_varno@enda_81;"
      "datum_event1.duplicate@enda_81;datum_event1.levels2many@enda_81;"
      "datum_event1.level_selection@enda_81;datum_event1.vertco_consistency@enda_81;"
      "datum_event1.vertco_type_changed@enda_81;datum_event1.combined_flagging@enda_81;"
      "datum_event1.report_rejected@enda_81;datum_event1.varqc_performed@enda_81;"
      "datum_event1.obserror_increased@enda_81;datum_event1.contam_cld_flag@enda_81;"
      "datum_event1.contam_rain_flag@enda_81;datum_event1.contam_aerosol_flag@enda_81;"
      "datum_event1.bad_emissivity@enda_81;datum_event1.model_cld_flag@enda_81;"
      "datum_event1.contam_trgas_flag@enda_81;datum_event1.land_sensitivity@enda_81;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_81_PREPTAG = T;
    CCMA_nT_enda_81_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_81_PREPTAG;
  return CCMA_T_enda_81_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_81(void *T);
extern int CCMA_Unpack_T_enda_81(void *T);
extern int CCMA_Sel_T_enda_81(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_81);
PrePutTable(CCMA, d, double, enda_81);
PreLoadTable(CCMA, enda_81);
PreStoreTable(CCMA, enda_81);
extern void CCMA_Dim_T_enda_81(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_81(void *T);
extern int CCMA_Sql_T_enda_81(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_81(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_82) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_82" : appearance order#207, hierarchy rank# 231, weight = 358.000207 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_82;

#endif /* defined(IS_a_TABLE_enda_82) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_82)
extern const ODB_Tags *CCMA_Set_T_enda_82_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_82_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_82_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_82_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_82_TAG = 0;
PRIVATE int CCMA_nT_enda_82_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_82_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_82_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_82_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_82"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_82"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_82"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_82"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_82"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_82"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_82"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_82"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_82"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_82"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_82"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_82"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_82"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_82"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_82"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_82"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_82"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_82"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_82"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_82"; T[19].name = s; }
    CCMA_T_enda_82_TAG = T;
    CCMA_nT_enda_82_TAG = ntag;
    CCMA_nT_enda_82_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_82_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_82_MEM;
  return CCMA_T_enda_82_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_82_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_82_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_82;report_status@enda_82;report_event1@enda_82;"
      "obsvalue@enda_82;datum_anflag@enda_82;datum_status@enda_82;"
      "datum_event1@enda_82;biascorr@enda_82;biascorr_fg@enda_82;"
      "an_depar@enda_82;fg_depar@enda_82;qc_pge@enda_82;final_obs_error@enda_82;"
      "obs_error@enda_82;fg_error@enda_82;skintemp_1@enda_82;"
      "skintemp_2@enda_82;skintemp_3@enda_82;skintemp_4@enda_82;"
      "skintemp_5@enda_82;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_82;report_status@enda_82;report_event1@enda_82;"
      "obsvalue@enda_82;datum_anflag@enda_82;datum_status@enda_82;"
      "datum_event1@enda_82;biascorr@enda_82;biascorr_fg@enda_82;"
      "an_depar@enda_82;fg_depar@enda_82;qc_pge@enda_82;final_obs_error@enda_82;"
      "obs_error@enda_82;fg_error@enda_82;skintemp_1@enda_82;"
      "skintemp_2@enda_82;skintemp_3@enda_82;skintemp_4@enda_82;"
      "skintemp_5@enda_82;report_status.active@enda_82;report_status.passive@enda_82;"
      "report_status.rejected@enda_82;report_status.blacklisted@enda_82;"
      "report_status.use_emiskf_only@enda_82;report_event1.no_data@enda_82;"
      "report_event1.all_rejected@enda_82;report_event1.bad_practice@enda_82;"
      "report_event1.rdb_rejected@enda_82;report_event1.redundant@enda_82;"
      "report_event1.stalt_missing@enda_82;report_event1.qc_failed@enda_82;"
      "report_event1.overcast_ir@enda_82;report_event1.thinned@enda_82;"
      "report_event1.latlon_corrected@enda_82;report_event1.stalt_corrected@enda_82;"
      "datum_anflag.final@enda_82;datum_anflag.fg@enda_82;"
      "datum_anflag.depar@enda_82;datum_anflag.varqc@enda_82;"
      "datum_anflag.blacklist@enda_82;datum_anflag.ups@enda_82;"
      "datum_anflag.uvt@enda_82;datum_anflag.uhu@enda_82;"
      "datum_anflag.ut2@enda_82;datum_anflag.uh2@enda_82;"
      "datum_anflag.uv1@enda_82;datum_anflag.urr@enda_82;"
      "datum_anflag.usn@enda_82;datum_anflag.usst@enda_82;"
      "datum_status.active@enda_82;datum_status.passive@enda_82;"
      "datum_status.rejected@enda_82;datum_status.blacklisted@enda_82;"
      "datum_status.use_emiskf_only@enda_82;datum_event1.vertco_missing@enda_82;"
      "datum_event1.obsvalue_missing@enda_82;datum_event1.fg_missing@enda_82;"
      "datum_event1.rdb_rejected@enda_82;datum_event1.assim_cld_flag@enda_82;"
      "datum_event1.bad_practice@enda_82;datum_event1.vertpos_outrange@enda_82;"
      "datum_event1.fg2big@enda_82;datum_event1.depar2big@enda_82;"
      "datum_event1.obs_error2big@enda_82;datum_event1.datum_redundant@enda_82;"
      "datum_event1.level_redundant@enda_82;datum_event1.not_analysis_varno@enda_82;"
      "datum_event1.duplicate@enda_82;datum_event1.levels2many@enda_82;"
      "datum_event1.level_selection@enda_82;datum_event1.vertco_consistency@enda_82;"
      "datum_event1.vertco_type_changed@enda_82;datum_event1.combined_flagging@enda_82;"
      "datum_event1.report_rejected@enda_82;datum_event1.varqc_performed@enda_82;"
      "datum_event1.obserror_increased@enda_82;datum_event1.contam_cld_flag@enda_82;"
      "datum_event1.contam_rain_flag@enda_82;datum_event1.contam_aerosol_flag@enda_82;"
      "datum_event1.bad_emissivity@enda_82;datum_event1.model_cld_flag@enda_82;"
      "datum_event1.contam_trgas_flag@enda_82;datum_event1.land_sensitivity@enda_82;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_82_PREPTAG = T;
    CCMA_nT_enda_82_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_82_PREPTAG;
  return CCMA_T_enda_82_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_82(void *T);
extern int CCMA_Unpack_T_enda_82(void *T);
extern int CCMA_Sel_T_enda_82(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_82);
PrePutTable(CCMA, d, double, enda_82);
PreLoadTable(CCMA, enda_82);
PreStoreTable(CCMA, enda_82);
extern void CCMA_Dim_T_enda_82(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_82(void *T);
extern int CCMA_Sql_T_enda_82(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_82(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_83) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_83" : appearance order#208, hierarchy rank# 232, weight = 358.000208 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_83;

#endif /* defined(IS_a_TABLE_enda_83) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_83)
extern const ODB_Tags *CCMA_Set_T_enda_83_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_83_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_83_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_83_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_83_TAG = 0;
PRIVATE int CCMA_nT_enda_83_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_83_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_83_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_83_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_83"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_83"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_83"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_83"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_83"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_83"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_83"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_83"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_83"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_83"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_83"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_83"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_83"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_83"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_83"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_83"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_83"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_83"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_83"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_83"; T[19].name = s; }
    CCMA_T_enda_83_TAG = T;
    CCMA_nT_enda_83_TAG = ntag;
    CCMA_nT_enda_83_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_83_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_83_MEM;
  return CCMA_T_enda_83_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_83_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_83_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_83;report_status@enda_83;report_event1@enda_83;"
      "obsvalue@enda_83;datum_anflag@enda_83;datum_status@enda_83;"
      "datum_event1@enda_83;biascorr@enda_83;biascorr_fg@enda_83;"
      "an_depar@enda_83;fg_depar@enda_83;qc_pge@enda_83;final_obs_error@enda_83;"
      "obs_error@enda_83;fg_error@enda_83;skintemp_1@enda_83;"
      "skintemp_2@enda_83;skintemp_3@enda_83;skintemp_4@enda_83;"
      "skintemp_5@enda_83;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_83;report_status@enda_83;report_event1@enda_83;"
      "obsvalue@enda_83;datum_anflag@enda_83;datum_status@enda_83;"
      "datum_event1@enda_83;biascorr@enda_83;biascorr_fg@enda_83;"
      "an_depar@enda_83;fg_depar@enda_83;qc_pge@enda_83;final_obs_error@enda_83;"
      "obs_error@enda_83;fg_error@enda_83;skintemp_1@enda_83;"
      "skintemp_2@enda_83;skintemp_3@enda_83;skintemp_4@enda_83;"
      "skintemp_5@enda_83;report_status.active@enda_83;report_status.passive@enda_83;"
      "report_status.rejected@enda_83;report_status.blacklisted@enda_83;"
      "report_status.use_emiskf_only@enda_83;report_event1.no_data@enda_83;"
      "report_event1.all_rejected@enda_83;report_event1.bad_practice@enda_83;"
      "report_event1.rdb_rejected@enda_83;report_event1.redundant@enda_83;"
      "report_event1.stalt_missing@enda_83;report_event1.qc_failed@enda_83;"
      "report_event1.overcast_ir@enda_83;report_event1.thinned@enda_83;"
      "report_event1.latlon_corrected@enda_83;report_event1.stalt_corrected@enda_83;"
      "datum_anflag.final@enda_83;datum_anflag.fg@enda_83;"
      "datum_anflag.depar@enda_83;datum_anflag.varqc@enda_83;"
      "datum_anflag.blacklist@enda_83;datum_anflag.ups@enda_83;"
      "datum_anflag.uvt@enda_83;datum_anflag.uhu@enda_83;"
      "datum_anflag.ut2@enda_83;datum_anflag.uh2@enda_83;"
      "datum_anflag.uv1@enda_83;datum_anflag.urr@enda_83;"
      "datum_anflag.usn@enda_83;datum_anflag.usst@enda_83;"
      "datum_status.active@enda_83;datum_status.passive@enda_83;"
      "datum_status.rejected@enda_83;datum_status.blacklisted@enda_83;"
      "datum_status.use_emiskf_only@enda_83;datum_event1.vertco_missing@enda_83;"
      "datum_event1.obsvalue_missing@enda_83;datum_event1.fg_missing@enda_83;"
      "datum_event1.rdb_rejected@enda_83;datum_event1.assim_cld_flag@enda_83;"
      "datum_event1.bad_practice@enda_83;datum_event1.vertpos_outrange@enda_83;"
      "datum_event1.fg2big@enda_83;datum_event1.depar2big@enda_83;"
      "datum_event1.obs_error2big@enda_83;datum_event1.datum_redundant@enda_83;"
      "datum_event1.level_redundant@enda_83;datum_event1.not_analysis_varno@enda_83;"
      "datum_event1.duplicate@enda_83;datum_event1.levels2many@enda_83;"
      "datum_event1.level_selection@enda_83;datum_event1.vertco_consistency@enda_83;"
      "datum_event1.vertco_type_changed@enda_83;datum_event1.combined_flagging@enda_83;"
      "datum_event1.report_rejected@enda_83;datum_event1.varqc_performed@enda_83;"
      "datum_event1.obserror_increased@enda_83;datum_event1.contam_cld_flag@enda_83;"
      "datum_event1.contam_rain_flag@enda_83;datum_event1.contam_aerosol_flag@enda_83;"
      "datum_event1.bad_emissivity@enda_83;datum_event1.model_cld_flag@enda_83;"
      "datum_event1.contam_trgas_flag@enda_83;datum_event1.land_sensitivity@enda_83;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_83_PREPTAG = T;
    CCMA_nT_enda_83_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_83_PREPTAG;
  return CCMA_T_enda_83_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_83(void *T);
extern int CCMA_Unpack_T_enda_83(void *T);
extern int CCMA_Sel_T_enda_83(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_83);
PrePutTable(CCMA, d, double, enda_83);
PreLoadTable(CCMA, enda_83);
PreStoreTable(CCMA, enda_83);
extern void CCMA_Dim_T_enda_83(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_83(void *T);
extern int CCMA_Sql_T_enda_83(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_83(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_84) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_84" : appearance order#209, hierarchy rank# 233, weight = 358.000209 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_84;

#endif /* defined(IS_a_TABLE_enda_84) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_84)
extern const ODB_Tags *CCMA_Set_T_enda_84_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_84_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_84_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_84_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_84_TAG = 0;
PRIVATE int CCMA_nT_enda_84_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_84_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_84_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_84_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_84"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_84"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_84"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_84"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_84"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_84"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_84"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_84"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_84"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_84"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_84"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_84"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_84"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_84"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_84"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_84"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_84"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_84"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_84"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_84"; T[19].name = s; }
    CCMA_T_enda_84_TAG = T;
    CCMA_nT_enda_84_TAG = ntag;
    CCMA_nT_enda_84_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_84_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_84_MEM;
  return CCMA_T_enda_84_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_84_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_84_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_84;report_status@enda_84;report_event1@enda_84;"
      "obsvalue@enda_84;datum_anflag@enda_84;datum_status@enda_84;"
      "datum_event1@enda_84;biascorr@enda_84;biascorr_fg@enda_84;"
      "an_depar@enda_84;fg_depar@enda_84;qc_pge@enda_84;final_obs_error@enda_84;"
      "obs_error@enda_84;fg_error@enda_84;skintemp_1@enda_84;"
      "skintemp_2@enda_84;skintemp_3@enda_84;skintemp_4@enda_84;"
      "skintemp_5@enda_84;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_84;report_status@enda_84;report_event1@enda_84;"
      "obsvalue@enda_84;datum_anflag@enda_84;datum_status@enda_84;"
      "datum_event1@enda_84;biascorr@enda_84;biascorr_fg@enda_84;"
      "an_depar@enda_84;fg_depar@enda_84;qc_pge@enda_84;final_obs_error@enda_84;"
      "obs_error@enda_84;fg_error@enda_84;skintemp_1@enda_84;"
      "skintemp_2@enda_84;skintemp_3@enda_84;skintemp_4@enda_84;"
      "skintemp_5@enda_84;report_status.active@enda_84;report_status.passive@enda_84;"
      "report_status.rejected@enda_84;report_status.blacklisted@enda_84;"
      "report_status.use_emiskf_only@enda_84;report_event1.no_data@enda_84;"
      "report_event1.all_rejected@enda_84;report_event1.bad_practice@enda_84;"
      "report_event1.rdb_rejected@enda_84;report_event1.redundant@enda_84;"
      "report_event1.stalt_missing@enda_84;report_event1.qc_failed@enda_84;"
      "report_event1.overcast_ir@enda_84;report_event1.thinned@enda_84;"
      "report_event1.latlon_corrected@enda_84;report_event1.stalt_corrected@enda_84;"
      "datum_anflag.final@enda_84;datum_anflag.fg@enda_84;"
      "datum_anflag.depar@enda_84;datum_anflag.varqc@enda_84;"
      "datum_anflag.blacklist@enda_84;datum_anflag.ups@enda_84;"
      "datum_anflag.uvt@enda_84;datum_anflag.uhu@enda_84;"
      "datum_anflag.ut2@enda_84;datum_anflag.uh2@enda_84;"
      "datum_anflag.uv1@enda_84;datum_anflag.urr@enda_84;"
      "datum_anflag.usn@enda_84;datum_anflag.usst@enda_84;"
      "datum_status.active@enda_84;datum_status.passive@enda_84;"
      "datum_status.rejected@enda_84;datum_status.blacklisted@enda_84;"
      "datum_status.use_emiskf_only@enda_84;datum_event1.vertco_missing@enda_84;"
      "datum_event1.obsvalue_missing@enda_84;datum_event1.fg_missing@enda_84;"
      "datum_event1.rdb_rejected@enda_84;datum_event1.assim_cld_flag@enda_84;"
      "datum_event1.bad_practice@enda_84;datum_event1.vertpos_outrange@enda_84;"
      "datum_event1.fg2big@enda_84;datum_event1.depar2big@enda_84;"
      "datum_event1.obs_error2big@enda_84;datum_event1.datum_redundant@enda_84;"
      "datum_event1.level_redundant@enda_84;datum_event1.not_analysis_varno@enda_84;"
      "datum_event1.duplicate@enda_84;datum_event1.levels2many@enda_84;"
      "datum_event1.level_selection@enda_84;datum_event1.vertco_consistency@enda_84;"
      "datum_event1.vertco_type_changed@enda_84;datum_event1.combined_flagging@enda_84;"
      "datum_event1.report_rejected@enda_84;datum_event1.varqc_performed@enda_84;"
      "datum_event1.obserror_increased@enda_84;datum_event1.contam_cld_flag@enda_84;"
      "datum_event1.contam_rain_flag@enda_84;datum_event1.contam_aerosol_flag@enda_84;"
      "datum_event1.bad_emissivity@enda_84;datum_event1.model_cld_flag@enda_84;"
      "datum_event1.contam_trgas_flag@enda_84;datum_event1.land_sensitivity@enda_84;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_84_PREPTAG = T;
    CCMA_nT_enda_84_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_84_PREPTAG;
  return CCMA_T_enda_84_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_84(void *T);
extern int CCMA_Unpack_T_enda_84(void *T);
extern int CCMA_Sel_T_enda_84(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_84);
PrePutTable(CCMA, d, double, enda_84);
PreLoadTable(CCMA, enda_84);
PreStoreTable(CCMA, enda_84);
extern void CCMA_Dim_T_enda_84(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_84(void *T);
extern int CCMA_Sql_T_enda_84(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_84(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_85) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_85" : appearance order#210, hierarchy rank# 234, weight = 358.000210 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_85;

#endif /* defined(IS_a_TABLE_enda_85) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_85)
extern const ODB_Tags *CCMA_Set_T_enda_85_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_85_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_85_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_85_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_85_TAG = 0;
PRIVATE int CCMA_nT_enda_85_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_85_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_85_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_85_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_85"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_85"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_85"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_85"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_85"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_85"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_85"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_85"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_85"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_85"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_85"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_85"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_85"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_85"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_85"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_85"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_85"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_85"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_85"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_85"; T[19].name = s; }
    CCMA_T_enda_85_TAG = T;
    CCMA_nT_enda_85_TAG = ntag;
    CCMA_nT_enda_85_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_85_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_85_MEM;
  return CCMA_T_enda_85_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_85_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_85_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_85;report_status@enda_85;report_event1@enda_85;"
      "obsvalue@enda_85;datum_anflag@enda_85;datum_status@enda_85;"
      "datum_event1@enda_85;biascorr@enda_85;biascorr_fg@enda_85;"
      "an_depar@enda_85;fg_depar@enda_85;qc_pge@enda_85;final_obs_error@enda_85;"
      "obs_error@enda_85;fg_error@enda_85;skintemp_1@enda_85;"
      "skintemp_2@enda_85;skintemp_3@enda_85;skintemp_4@enda_85;"
      "skintemp_5@enda_85;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_85;report_status@enda_85;report_event1@enda_85;"
      "obsvalue@enda_85;datum_anflag@enda_85;datum_status@enda_85;"
      "datum_event1@enda_85;biascorr@enda_85;biascorr_fg@enda_85;"
      "an_depar@enda_85;fg_depar@enda_85;qc_pge@enda_85;final_obs_error@enda_85;"
      "obs_error@enda_85;fg_error@enda_85;skintemp_1@enda_85;"
      "skintemp_2@enda_85;skintemp_3@enda_85;skintemp_4@enda_85;"
      "skintemp_5@enda_85;report_status.active@enda_85;report_status.passive@enda_85;"
      "report_status.rejected@enda_85;report_status.blacklisted@enda_85;"
      "report_status.use_emiskf_only@enda_85;report_event1.no_data@enda_85;"
      "report_event1.all_rejected@enda_85;report_event1.bad_practice@enda_85;"
      "report_event1.rdb_rejected@enda_85;report_event1.redundant@enda_85;"
      "report_event1.stalt_missing@enda_85;report_event1.qc_failed@enda_85;"
      "report_event1.overcast_ir@enda_85;report_event1.thinned@enda_85;"
      "report_event1.latlon_corrected@enda_85;report_event1.stalt_corrected@enda_85;"
      "datum_anflag.final@enda_85;datum_anflag.fg@enda_85;"
      "datum_anflag.depar@enda_85;datum_anflag.varqc@enda_85;"
      "datum_anflag.blacklist@enda_85;datum_anflag.ups@enda_85;"
      "datum_anflag.uvt@enda_85;datum_anflag.uhu@enda_85;"
      "datum_anflag.ut2@enda_85;datum_anflag.uh2@enda_85;"
      "datum_anflag.uv1@enda_85;datum_anflag.urr@enda_85;"
      "datum_anflag.usn@enda_85;datum_anflag.usst@enda_85;"
      "datum_status.active@enda_85;datum_status.passive@enda_85;"
      "datum_status.rejected@enda_85;datum_status.blacklisted@enda_85;"
      "datum_status.use_emiskf_only@enda_85;datum_event1.vertco_missing@enda_85;"
      "datum_event1.obsvalue_missing@enda_85;datum_event1.fg_missing@enda_85;"
      "datum_event1.rdb_rejected@enda_85;datum_event1.assim_cld_flag@enda_85;"
      "datum_event1.bad_practice@enda_85;datum_event1.vertpos_outrange@enda_85;"
      "datum_event1.fg2big@enda_85;datum_event1.depar2big@enda_85;"
      "datum_event1.obs_error2big@enda_85;datum_event1.datum_redundant@enda_85;"
      "datum_event1.level_redundant@enda_85;datum_event1.not_analysis_varno@enda_85;"
      "datum_event1.duplicate@enda_85;datum_event1.levels2many@enda_85;"
      "datum_event1.level_selection@enda_85;datum_event1.vertco_consistency@enda_85;"
      "datum_event1.vertco_type_changed@enda_85;datum_event1.combined_flagging@enda_85;"
      "datum_event1.report_rejected@enda_85;datum_event1.varqc_performed@enda_85;"
      "datum_event1.obserror_increased@enda_85;datum_event1.contam_cld_flag@enda_85;"
      "datum_event1.contam_rain_flag@enda_85;datum_event1.contam_aerosol_flag@enda_85;"
      "datum_event1.bad_emissivity@enda_85;datum_event1.model_cld_flag@enda_85;"
      "datum_event1.contam_trgas_flag@enda_85;datum_event1.land_sensitivity@enda_85;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_85_PREPTAG = T;
    CCMA_nT_enda_85_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_85_PREPTAG;
  return CCMA_T_enda_85_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_85(void *T);
extern int CCMA_Unpack_T_enda_85(void *T);
extern int CCMA_Sel_T_enda_85(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_85);
PrePutTable(CCMA, d, double, enda_85);
PreLoadTable(CCMA, enda_85);
PreStoreTable(CCMA, enda_85);
extern void CCMA_Dim_T_enda_85(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_85(void *T);
extern int CCMA_Sql_T_enda_85(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_85(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_86) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_86" : appearance order#211, hierarchy rank# 235, weight = 358.000211 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_86;

#endif /* defined(IS_a_TABLE_enda_86) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_86)
extern const ODB_Tags *CCMA_Set_T_enda_86_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_86_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_86_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_86_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_86_TAG = 0;
PRIVATE int CCMA_nT_enda_86_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_86_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_86_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_86_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_86"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_86"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_86"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_86"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_86"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_86"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_86"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_86"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_86"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_86"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_86"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_86"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_86"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_86"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_86"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_86"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_86"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_86"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_86"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_86"; T[19].name = s; }
    CCMA_T_enda_86_TAG = T;
    CCMA_nT_enda_86_TAG = ntag;
    CCMA_nT_enda_86_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_86_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_86_MEM;
  return CCMA_T_enda_86_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_86_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_86_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_86;report_status@enda_86;report_event1@enda_86;"
      "obsvalue@enda_86;datum_anflag@enda_86;datum_status@enda_86;"
      "datum_event1@enda_86;biascorr@enda_86;biascorr_fg@enda_86;"
      "an_depar@enda_86;fg_depar@enda_86;qc_pge@enda_86;final_obs_error@enda_86;"
      "obs_error@enda_86;fg_error@enda_86;skintemp_1@enda_86;"
      "skintemp_2@enda_86;skintemp_3@enda_86;skintemp_4@enda_86;"
      "skintemp_5@enda_86;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_86;report_status@enda_86;report_event1@enda_86;"
      "obsvalue@enda_86;datum_anflag@enda_86;datum_status@enda_86;"
      "datum_event1@enda_86;biascorr@enda_86;biascorr_fg@enda_86;"
      "an_depar@enda_86;fg_depar@enda_86;qc_pge@enda_86;final_obs_error@enda_86;"
      "obs_error@enda_86;fg_error@enda_86;skintemp_1@enda_86;"
      "skintemp_2@enda_86;skintemp_3@enda_86;skintemp_4@enda_86;"
      "skintemp_5@enda_86;report_status.active@enda_86;report_status.passive@enda_86;"
      "report_status.rejected@enda_86;report_status.blacklisted@enda_86;"
      "report_status.use_emiskf_only@enda_86;report_event1.no_data@enda_86;"
      "report_event1.all_rejected@enda_86;report_event1.bad_practice@enda_86;"
      "report_event1.rdb_rejected@enda_86;report_event1.redundant@enda_86;"
      "report_event1.stalt_missing@enda_86;report_event1.qc_failed@enda_86;"
      "report_event1.overcast_ir@enda_86;report_event1.thinned@enda_86;"
      "report_event1.latlon_corrected@enda_86;report_event1.stalt_corrected@enda_86;"
      "datum_anflag.final@enda_86;datum_anflag.fg@enda_86;"
      "datum_anflag.depar@enda_86;datum_anflag.varqc@enda_86;"
      "datum_anflag.blacklist@enda_86;datum_anflag.ups@enda_86;"
      "datum_anflag.uvt@enda_86;datum_anflag.uhu@enda_86;"
      "datum_anflag.ut2@enda_86;datum_anflag.uh2@enda_86;"
      "datum_anflag.uv1@enda_86;datum_anflag.urr@enda_86;"
      "datum_anflag.usn@enda_86;datum_anflag.usst@enda_86;"
      "datum_status.active@enda_86;datum_status.passive@enda_86;"
      "datum_status.rejected@enda_86;datum_status.blacklisted@enda_86;"
      "datum_status.use_emiskf_only@enda_86;datum_event1.vertco_missing@enda_86;"
      "datum_event1.obsvalue_missing@enda_86;datum_event1.fg_missing@enda_86;"
      "datum_event1.rdb_rejected@enda_86;datum_event1.assim_cld_flag@enda_86;"
      "datum_event1.bad_practice@enda_86;datum_event1.vertpos_outrange@enda_86;"
      "datum_event1.fg2big@enda_86;datum_event1.depar2big@enda_86;"
      "datum_event1.obs_error2big@enda_86;datum_event1.datum_redundant@enda_86;"
      "datum_event1.level_redundant@enda_86;datum_event1.not_analysis_varno@enda_86;"
      "datum_event1.duplicate@enda_86;datum_event1.levels2many@enda_86;"
      "datum_event1.level_selection@enda_86;datum_event1.vertco_consistency@enda_86;"
      "datum_event1.vertco_type_changed@enda_86;datum_event1.combined_flagging@enda_86;"
      "datum_event1.report_rejected@enda_86;datum_event1.varqc_performed@enda_86;"
      "datum_event1.obserror_increased@enda_86;datum_event1.contam_cld_flag@enda_86;"
      "datum_event1.contam_rain_flag@enda_86;datum_event1.contam_aerosol_flag@enda_86;"
      "datum_event1.bad_emissivity@enda_86;datum_event1.model_cld_flag@enda_86;"
      "datum_event1.contam_trgas_flag@enda_86;datum_event1.land_sensitivity@enda_86;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_86_PREPTAG = T;
    CCMA_nT_enda_86_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_86_PREPTAG;
  return CCMA_T_enda_86_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_86(void *T);
extern int CCMA_Unpack_T_enda_86(void *T);
extern int CCMA_Sel_T_enda_86(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_86);
PrePutTable(CCMA, d, double, enda_86);
PreLoadTable(CCMA, enda_86);
PreStoreTable(CCMA, enda_86);
extern void CCMA_Dim_T_enda_86(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_86(void *T);
extern int CCMA_Sql_T_enda_86(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_86(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_87) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_87" : appearance order#212, hierarchy rank# 236, weight = 358.000212 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_87;

#endif /* defined(IS_a_TABLE_enda_87) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_87)
extern const ODB_Tags *CCMA_Set_T_enda_87_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_87_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_87_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_87_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_87_TAG = 0;
PRIVATE int CCMA_nT_enda_87_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_87_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_87_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_87_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_87"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_87"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_87"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_87"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_87"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_87"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_87"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_87"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_87"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_87"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_87"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_87"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_87"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_87"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_87"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_87"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_87"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_87"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_87"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_87"; T[19].name = s; }
    CCMA_T_enda_87_TAG = T;
    CCMA_nT_enda_87_TAG = ntag;
    CCMA_nT_enda_87_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_87_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_87_MEM;
  return CCMA_T_enda_87_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_87_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_87_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_87;report_status@enda_87;report_event1@enda_87;"
      "obsvalue@enda_87;datum_anflag@enda_87;datum_status@enda_87;"
      "datum_event1@enda_87;biascorr@enda_87;biascorr_fg@enda_87;"
      "an_depar@enda_87;fg_depar@enda_87;qc_pge@enda_87;final_obs_error@enda_87;"
      "obs_error@enda_87;fg_error@enda_87;skintemp_1@enda_87;"
      "skintemp_2@enda_87;skintemp_3@enda_87;skintemp_4@enda_87;"
      "skintemp_5@enda_87;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_87;report_status@enda_87;report_event1@enda_87;"
      "obsvalue@enda_87;datum_anflag@enda_87;datum_status@enda_87;"
      "datum_event1@enda_87;biascorr@enda_87;biascorr_fg@enda_87;"
      "an_depar@enda_87;fg_depar@enda_87;qc_pge@enda_87;final_obs_error@enda_87;"
      "obs_error@enda_87;fg_error@enda_87;skintemp_1@enda_87;"
      "skintemp_2@enda_87;skintemp_3@enda_87;skintemp_4@enda_87;"
      "skintemp_5@enda_87;report_status.active@enda_87;report_status.passive@enda_87;"
      "report_status.rejected@enda_87;report_status.blacklisted@enda_87;"
      "report_status.use_emiskf_only@enda_87;report_event1.no_data@enda_87;"
      "report_event1.all_rejected@enda_87;report_event1.bad_practice@enda_87;"
      "report_event1.rdb_rejected@enda_87;report_event1.redundant@enda_87;"
      "report_event1.stalt_missing@enda_87;report_event1.qc_failed@enda_87;"
      "report_event1.overcast_ir@enda_87;report_event1.thinned@enda_87;"
      "report_event1.latlon_corrected@enda_87;report_event1.stalt_corrected@enda_87;"
      "datum_anflag.final@enda_87;datum_anflag.fg@enda_87;"
      "datum_anflag.depar@enda_87;datum_anflag.varqc@enda_87;"
      "datum_anflag.blacklist@enda_87;datum_anflag.ups@enda_87;"
      "datum_anflag.uvt@enda_87;datum_anflag.uhu@enda_87;"
      "datum_anflag.ut2@enda_87;datum_anflag.uh2@enda_87;"
      "datum_anflag.uv1@enda_87;datum_anflag.urr@enda_87;"
      "datum_anflag.usn@enda_87;datum_anflag.usst@enda_87;"
      "datum_status.active@enda_87;datum_status.passive@enda_87;"
      "datum_status.rejected@enda_87;datum_status.blacklisted@enda_87;"
      "datum_status.use_emiskf_only@enda_87;datum_event1.vertco_missing@enda_87;"
      "datum_event1.obsvalue_missing@enda_87;datum_event1.fg_missing@enda_87;"
      "datum_event1.rdb_rejected@enda_87;datum_event1.assim_cld_flag@enda_87;"
      "datum_event1.bad_practice@enda_87;datum_event1.vertpos_outrange@enda_87;"
      "datum_event1.fg2big@enda_87;datum_event1.depar2big@enda_87;"
      "datum_event1.obs_error2big@enda_87;datum_event1.datum_redundant@enda_87;"
      "datum_event1.level_redundant@enda_87;datum_event1.not_analysis_varno@enda_87;"
      "datum_event1.duplicate@enda_87;datum_event1.levels2many@enda_87;"
      "datum_event1.level_selection@enda_87;datum_event1.vertco_consistency@enda_87;"
      "datum_event1.vertco_type_changed@enda_87;datum_event1.combined_flagging@enda_87;"
      "datum_event1.report_rejected@enda_87;datum_event1.varqc_performed@enda_87;"
      "datum_event1.obserror_increased@enda_87;datum_event1.contam_cld_flag@enda_87;"
      "datum_event1.contam_rain_flag@enda_87;datum_event1.contam_aerosol_flag@enda_87;"
      "datum_event1.bad_emissivity@enda_87;datum_event1.model_cld_flag@enda_87;"
      "datum_event1.contam_trgas_flag@enda_87;datum_event1.land_sensitivity@enda_87;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_87_PREPTAG = T;
    CCMA_nT_enda_87_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_87_PREPTAG;
  return CCMA_T_enda_87_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_87(void *T);
extern int CCMA_Unpack_T_enda_87(void *T);
extern int CCMA_Sel_T_enda_87(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_87);
PrePutTable(CCMA, d, double, enda_87);
PreLoadTable(CCMA, enda_87);
PreStoreTable(CCMA, enda_87);
extern void CCMA_Dim_T_enda_87(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_87(void *T);
extern int CCMA_Sql_T_enda_87(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_87(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_88) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_88" : appearance order#213, hierarchy rank# 237, weight = 358.000213 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_88;

#endif /* defined(IS_a_TABLE_enda_88) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_88)
extern const ODB_Tags *CCMA_Set_T_enda_88_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_88_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_88_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_88_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_88_TAG = 0;
PRIVATE int CCMA_nT_enda_88_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_88_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_88_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_88_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_88"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_88"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_88"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_88"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_88"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_88"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_88"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_88"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_88"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_88"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_88"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_88"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_88"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_88"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_88"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_88"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_88"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_88"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_88"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_88"; T[19].name = s; }
    CCMA_T_enda_88_TAG = T;
    CCMA_nT_enda_88_TAG = ntag;
    CCMA_nT_enda_88_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_88_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_88_MEM;
  return CCMA_T_enda_88_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_88_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_88_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_88;report_status@enda_88;report_event1@enda_88;"
      "obsvalue@enda_88;datum_anflag@enda_88;datum_status@enda_88;"
      "datum_event1@enda_88;biascorr@enda_88;biascorr_fg@enda_88;"
      "an_depar@enda_88;fg_depar@enda_88;qc_pge@enda_88;final_obs_error@enda_88;"
      "obs_error@enda_88;fg_error@enda_88;skintemp_1@enda_88;"
      "skintemp_2@enda_88;skintemp_3@enda_88;skintemp_4@enda_88;"
      "skintemp_5@enda_88;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_88;report_status@enda_88;report_event1@enda_88;"
      "obsvalue@enda_88;datum_anflag@enda_88;datum_status@enda_88;"
      "datum_event1@enda_88;biascorr@enda_88;biascorr_fg@enda_88;"
      "an_depar@enda_88;fg_depar@enda_88;qc_pge@enda_88;final_obs_error@enda_88;"
      "obs_error@enda_88;fg_error@enda_88;skintemp_1@enda_88;"
      "skintemp_2@enda_88;skintemp_3@enda_88;skintemp_4@enda_88;"
      "skintemp_5@enda_88;report_status.active@enda_88;report_status.passive@enda_88;"
      "report_status.rejected@enda_88;report_status.blacklisted@enda_88;"
      "report_status.use_emiskf_only@enda_88;report_event1.no_data@enda_88;"
      "report_event1.all_rejected@enda_88;report_event1.bad_practice@enda_88;"
      "report_event1.rdb_rejected@enda_88;report_event1.redundant@enda_88;"
      "report_event1.stalt_missing@enda_88;report_event1.qc_failed@enda_88;"
      "report_event1.overcast_ir@enda_88;report_event1.thinned@enda_88;"
      "report_event1.latlon_corrected@enda_88;report_event1.stalt_corrected@enda_88;"
      "datum_anflag.final@enda_88;datum_anflag.fg@enda_88;"
      "datum_anflag.depar@enda_88;datum_anflag.varqc@enda_88;"
      "datum_anflag.blacklist@enda_88;datum_anflag.ups@enda_88;"
      "datum_anflag.uvt@enda_88;datum_anflag.uhu@enda_88;"
      "datum_anflag.ut2@enda_88;datum_anflag.uh2@enda_88;"
      "datum_anflag.uv1@enda_88;datum_anflag.urr@enda_88;"
      "datum_anflag.usn@enda_88;datum_anflag.usst@enda_88;"
      "datum_status.active@enda_88;datum_status.passive@enda_88;"
      "datum_status.rejected@enda_88;datum_status.blacklisted@enda_88;"
      "datum_status.use_emiskf_only@enda_88;datum_event1.vertco_missing@enda_88;"
      "datum_event1.obsvalue_missing@enda_88;datum_event1.fg_missing@enda_88;"
      "datum_event1.rdb_rejected@enda_88;datum_event1.assim_cld_flag@enda_88;"
      "datum_event1.bad_practice@enda_88;datum_event1.vertpos_outrange@enda_88;"
      "datum_event1.fg2big@enda_88;datum_event1.depar2big@enda_88;"
      "datum_event1.obs_error2big@enda_88;datum_event1.datum_redundant@enda_88;"
      "datum_event1.level_redundant@enda_88;datum_event1.not_analysis_varno@enda_88;"
      "datum_event1.duplicate@enda_88;datum_event1.levels2many@enda_88;"
      "datum_event1.level_selection@enda_88;datum_event1.vertco_consistency@enda_88;"
      "datum_event1.vertco_type_changed@enda_88;datum_event1.combined_flagging@enda_88;"
      "datum_event1.report_rejected@enda_88;datum_event1.varqc_performed@enda_88;"
      "datum_event1.obserror_increased@enda_88;datum_event1.contam_cld_flag@enda_88;"
      "datum_event1.contam_rain_flag@enda_88;datum_event1.contam_aerosol_flag@enda_88;"
      "datum_event1.bad_emissivity@enda_88;datum_event1.model_cld_flag@enda_88;"
      "datum_event1.contam_trgas_flag@enda_88;datum_event1.land_sensitivity@enda_88;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_88_PREPTAG = T;
    CCMA_nT_enda_88_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_88_PREPTAG;
  return CCMA_T_enda_88_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_88(void *T);
extern int CCMA_Unpack_T_enda_88(void *T);
extern int CCMA_Sel_T_enda_88(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_88);
PrePutTable(CCMA, d, double, enda_88);
PreLoadTable(CCMA, enda_88);
PreStoreTable(CCMA, enda_88);
extern void CCMA_Dim_T_enda_88(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_88(void *T);
extern int CCMA_Sql_T_enda_88(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_88(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_89) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_89" : appearance order#214, hierarchy rank# 238, weight = 358.000214 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_89;

#endif /* defined(IS_a_TABLE_enda_89) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_89)
extern const ODB_Tags *CCMA_Set_T_enda_89_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_89_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_89_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_89_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_89_TAG = 0;
PRIVATE int CCMA_nT_enda_89_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_89_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_89_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_89_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_89"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_89"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_89"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_89"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_89"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_89"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_89"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_89"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_89"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_89"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_89"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_89"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_89"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_89"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_89"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_89"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_89"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_89"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_89"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_89"; T[19].name = s; }
    CCMA_T_enda_89_TAG = T;
    CCMA_nT_enda_89_TAG = ntag;
    CCMA_nT_enda_89_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_89_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_89_MEM;
  return CCMA_T_enda_89_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_89_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_89_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_89;report_status@enda_89;report_event1@enda_89;"
      "obsvalue@enda_89;datum_anflag@enda_89;datum_status@enda_89;"
      "datum_event1@enda_89;biascorr@enda_89;biascorr_fg@enda_89;"
      "an_depar@enda_89;fg_depar@enda_89;qc_pge@enda_89;final_obs_error@enda_89;"
      "obs_error@enda_89;fg_error@enda_89;skintemp_1@enda_89;"
      "skintemp_2@enda_89;skintemp_3@enda_89;skintemp_4@enda_89;"
      "skintemp_5@enda_89;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_89;report_status@enda_89;report_event1@enda_89;"
      "obsvalue@enda_89;datum_anflag@enda_89;datum_status@enda_89;"
      "datum_event1@enda_89;biascorr@enda_89;biascorr_fg@enda_89;"
      "an_depar@enda_89;fg_depar@enda_89;qc_pge@enda_89;final_obs_error@enda_89;"
      "obs_error@enda_89;fg_error@enda_89;skintemp_1@enda_89;"
      "skintemp_2@enda_89;skintemp_3@enda_89;skintemp_4@enda_89;"
      "skintemp_5@enda_89;report_status.active@enda_89;report_status.passive@enda_89;"
      "report_status.rejected@enda_89;report_status.blacklisted@enda_89;"
      "report_status.use_emiskf_only@enda_89;report_event1.no_data@enda_89;"
      "report_event1.all_rejected@enda_89;report_event1.bad_practice@enda_89;"
      "report_event1.rdb_rejected@enda_89;report_event1.redundant@enda_89;"
      "report_event1.stalt_missing@enda_89;report_event1.qc_failed@enda_89;"
      "report_event1.overcast_ir@enda_89;report_event1.thinned@enda_89;"
      "report_event1.latlon_corrected@enda_89;report_event1.stalt_corrected@enda_89;"
      "datum_anflag.final@enda_89;datum_anflag.fg@enda_89;"
      "datum_anflag.depar@enda_89;datum_anflag.varqc@enda_89;"
      "datum_anflag.blacklist@enda_89;datum_anflag.ups@enda_89;"
      "datum_anflag.uvt@enda_89;datum_anflag.uhu@enda_89;"
      "datum_anflag.ut2@enda_89;datum_anflag.uh2@enda_89;"
      "datum_anflag.uv1@enda_89;datum_anflag.urr@enda_89;"
      "datum_anflag.usn@enda_89;datum_anflag.usst@enda_89;"
      "datum_status.active@enda_89;datum_status.passive@enda_89;"
      "datum_status.rejected@enda_89;datum_status.blacklisted@enda_89;"
      "datum_status.use_emiskf_only@enda_89;datum_event1.vertco_missing@enda_89;"
      "datum_event1.obsvalue_missing@enda_89;datum_event1.fg_missing@enda_89;"
      "datum_event1.rdb_rejected@enda_89;datum_event1.assim_cld_flag@enda_89;"
      "datum_event1.bad_practice@enda_89;datum_event1.vertpos_outrange@enda_89;"
      "datum_event1.fg2big@enda_89;datum_event1.depar2big@enda_89;"
      "datum_event1.obs_error2big@enda_89;datum_event1.datum_redundant@enda_89;"
      "datum_event1.level_redundant@enda_89;datum_event1.not_analysis_varno@enda_89;"
      "datum_event1.duplicate@enda_89;datum_event1.levels2many@enda_89;"
      "datum_event1.level_selection@enda_89;datum_event1.vertco_consistency@enda_89;"
      "datum_event1.vertco_type_changed@enda_89;datum_event1.combined_flagging@enda_89;"
      "datum_event1.report_rejected@enda_89;datum_event1.varqc_performed@enda_89;"
      "datum_event1.obserror_increased@enda_89;datum_event1.contam_cld_flag@enda_89;"
      "datum_event1.contam_rain_flag@enda_89;datum_event1.contam_aerosol_flag@enda_89;"
      "datum_event1.bad_emissivity@enda_89;datum_event1.model_cld_flag@enda_89;"
      "datum_event1.contam_trgas_flag@enda_89;datum_event1.land_sensitivity@enda_89;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_89_PREPTAG = T;
    CCMA_nT_enda_89_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_89_PREPTAG;
  return CCMA_T_enda_89_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_89(void *T);
extern int CCMA_Unpack_T_enda_89(void *T);
extern int CCMA_Sel_T_enda_89(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_89);
PrePutTable(CCMA, d, double, enda_89);
PreLoadTable(CCMA, enda_89);
PreStoreTable(CCMA, enda_89);
extern void CCMA_Dim_T_enda_89(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_89(void *T);
extern int CCMA_Sql_T_enda_89(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_89(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_90) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_90" : appearance order#215, hierarchy rank# 239, weight = 358.000215 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_90;

#endif /* defined(IS_a_TABLE_enda_90) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_90)
extern const ODB_Tags *CCMA_Set_T_enda_90_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_90_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_90_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_90_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_90_TAG = 0;
PRIVATE int CCMA_nT_enda_90_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_90_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_90_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_90_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_90"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_90"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_90"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_90"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_90"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_90"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_90"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_90"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_90"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_90"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_90"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_90"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_90"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_90"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_90"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_90"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_90"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_90"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_90"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_90"; T[19].name = s; }
    CCMA_T_enda_90_TAG = T;
    CCMA_nT_enda_90_TAG = ntag;
    CCMA_nT_enda_90_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_90_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_90_MEM;
  return CCMA_T_enda_90_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_90_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_90_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_90;report_status@enda_90;report_event1@enda_90;"
      "obsvalue@enda_90;datum_anflag@enda_90;datum_status@enda_90;"
      "datum_event1@enda_90;biascorr@enda_90;biascorr_fg@enda_90;"
      "an_depar@enda_90;fg_depar@enda_90;qc_pge@enda_90;final_obs_error@enda_90;"
      "obs_error@enda_90;fg_error@enda_90;skintemp_1@enda_90;"
      "skintemp_2@enda_90;skintemp_3@enda_90;skintemp_4@enda_90;"
      "skintemp_5@enda_90;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_90;report_status@enda_90;report_event1@enda_90;"
      "obsvalue@enda_90;datum_anflag@enda_90;datum_status@enda_90;"
      "datum_event1@enda_90;biascorr@enda_90;biascorr_fg@enda_90;"
      "an_depar@enda_90;fg_depar@enda_90;qc_pge@enda_90;final_obs_error@enda_90;"
      "obs_error@enda_90;fg_error@enda_90;skintemp_1@enda_90;"
      "skintemp_2@enda_90;skintemp_3@enda_90;skintemp_4@enda_90;"
      "skintemp_5@enda_90;report_status.active@enda_90;report_status.passive@enda_90;"
      "report_status.rejected@enda_90;report_status.blacklisted@enda_90;"
      "report_status.use_emiskf_only@enda_90;report_event1.no_data@enda_90;"
      "report_event1.all_rejected@enda_90;report_event1.bad_practice@enda_90;"
      "report_event1.rdb_rejected@enda_90;report_event1.redundant@enda_90;"
      "report_event1.stalt_missing@enda_90;report_event1.qc_failed@enda_90;"
      "report_event1.overcast_ir@enda_90;report_event1.thinned@enda_90;"
      "report_event1.latlon_corrected@enda_90;report_event1.stalt_corrected@enda_90;"
      "datum_anflag.final@enda_90;datum_anflag.fg@enda_90;"
      "datum_anflag.depar@enda_90;datum_anflag.varqc@enda_90;"
      "datum_anflag.blacklist@enda_90;datum_anflag.ups@enda_90;"
      "datum_anflag.uvt@enda_90;datum_anflag.uhu@enda_90;"
      "datum_anflag.ut2@enda_90;datum_anflag.uh2@enda_90;"
      "datum_anflag.uv1@enda_90;datum_anflag.urr@enda_90;"
      "datum_anflag.usn@enda_90;datum_anflag.usst@enda_90;"
      "datum_status.active@enda_90;datum_status.passive@enda_90;"
      "datum_status.rejected@enda_90;datum_status.blacklisted@enda_90;"
      "datum_status.use_emiskf_only@enda_90;datum_event1.vertco_missing@enda_90;"
      "datum_event1.obsvalue_missing@enda_90;datum_event1.fg_missing@enda_90;"
      "datum_event1.rdb_rejected@enda_90;datum_event1.assim_cld_flag@enda_90;"
      "datum_event1.bad_practice@enda_90;datum_event1.vertpos_outrange@enda_90;"
      "datum_event1.fg2big@enda_90;datum_event1.depar2big@enda_90;"
      "datum_event1.obs_error2big@enda_90;datum_event1.datum_redundant@enda_90;"
      "datum_event1.level_redundant@enda_90;datum_event1.not_analysis_varno@enda_90;"
      "datum_event1.duplicate@enda_90;datum_event1.levels2many@enda_90;"
      "datum_event1.level_selection@enda_90;datum_event1.vertco_consistency@enda_90;"
      "datum_event1.vertco_type_changed@enda_90;datum_event1.combined_flagging@enda_90;"
      "datum_event1.report_rejected@enda_90;datum_event1.varqc_performed@enda_90;"
      "datum_event1.obserror_increased@enda_90;datum_event1.contam_cld_flag@enda_90;"
      "datum_event1.contam_rain_flag@enda_90;datum_event1.contam_aerosol_flag@enda_90;"
      "datum_event1.bad_emissivity@enda_90;datum_event1.model_cld_flag@enda_90;"
      "datum_event1.contam_trgas_flag@enda_90;datum_event1.land_sensitivity@enda_90;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_90_PREPTAG = T;
    CCMA_nT_enda_90_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_90_PREPTAG;
  return CCMA_T_enda_90_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_90(void *T);
extern int CCMA_Unpack_T_enda_90(void *T);
extern int CCMA_Sel_T_enda_90(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_90);
PrePutTable(CCMA, d, double, enda_90);
PreLoadTable(CCMA, enda_90);
PreStoreTable(CCMA, enda_90);
extern void CCMA_Dim_T_enda_90(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_90(void *T);
extern int CCMA_Sql_T_enda_90(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_90(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_91) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_91" : appearance order#216, hierarchy rank# 240, weight = 358.000216 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_91;

#endif /* defined(IS_a_TABLE_enda_91) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_91)
extern const ODB_Tags *CCMA_Set_T_enda_91_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_91_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_91_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_91_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_91_TAG = 0;
PRIVATE int CCMA_nT_enda_91_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_91_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_91_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_91_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_91"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_91"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_91"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_91"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_91"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_91"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_91"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_91"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_91"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_91"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_91"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_91"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_91"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_91"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_91"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_91"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_91"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_91"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_91"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_91"; T[19].name = s; }
    CCMA_T_enda_91_TAG = T;
    CCMA_nT_enda_91_TAG = ntag;
    CCMA_nT_enda_91_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_91_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_91_MEM;
  return CCMA_T_enda_91_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_91_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_91_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_91;report_status@enda_91;report_event1@enda_91;"
      "obsvalue@enda_91;datum_anflag@enda_91;datum_status@enda_91;"
      "datum_event1@enda_91;biascorr@enda_91;biascorr_fg@enda_91;"
      "an_depar@enda_91;fg_depar@enda_91;qc_pge@enda_91;final_obs_error@enda_91;"
      "obs_error@enda_91;fg_error@enda_91;skintemp_1@enda_91;"
      "skintemp_2@enda_91;skintemp_3@enda_91;skintemp_4@enda_91;"
      "skintemp_5@enda_91;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_91;report_status@enda_91;report_event1@enda_91;"
      "obsvalue@enda_91;datum_anflag@enda_91;datum_status@enda_91;"
      "datum_event1@enda_91;biascorr@enda_91;biascorr_fg@enda_91;"
      "an_depar@enda_91;fg_depar@enda_91;qc_pge@enda_91;final_obs_error@enda_91;"
      "obs_error@enda_91;fg_error@enda_91;skintemp_1@enda_91;"
      "skintemp_2@enda_91;skintemp_3@enda_91;skintemp_4@enda_91;"
      "skintemp_5@enda_91;report_status.active@enda_91;report_status.passive@enda_91;"
      "report_status.rejected@enda_91;report_status.blacklisted@enda_91;"
      "report_status.use_emiskf_only@enda_91;report_event1.no_data@enda_91;"
      "report_event1.all_rejected@enda_91;report_event1.bad_practice@enda_91;"
      "report_event1.rdb_rejected@enda_91;report_event1.redundant@enda_91;"
      "report_event1.stalt_missing@enda_91;report_event1.qc_failed@enda_91;"
      "report_event1.overcast_ir@enda_91;report_event1.thinned@enda_91;"
      "report_event1.latlon_corrected@enda_91;report_event1.stalt_corrected@enda_91;"
      "datum_anflag.final@enda_91;datum_anflag.fg@enda_91;"
      "datum_anflag.depar@enda_91;datum_anflag.varqc@enda_91;"
      "datum_anflag.blacklist@enda_91;datum_anflag.ups@enda_91;"
      "datum_anflag.uvt@enda_91;datum_anflag.uhu@enda_91;"
      "datum_anflag.ut2@enda_91;datum_anflag.uh2@enda_91;"
      "datum_anflag.uv1@enda_91;datum_anflag.urr@enda_91;"
      "datum_anflag.usn@enda_91;datum_anflag.usst@enda_91;"
      "datum_status.active@enda_91;datum_status.passive@enda_91;"
      "datum_status.rejected@enda_91;datum_status.blacklisted@enda_91;"
      "datum_status.use_emiskf_only@enda_91;datum_event1.vertco_missing@enda_91;"
      "datum_event1.obsvalue_missing@enda_91;datum_event1.fg_missing@enda_91;"
      "datum_event1.rdb_rejected@enda_91;datum_event1.assim_cld_flag@enda_91;"
      "datum_event1.bad_practice@enda_91;datum_event1.vertpos_outrange@enda_91;"
      "datum_event1.fg2big@enda_91;datum_event1.depar2big@enda_91;"
      "datum_event1.obs_error2big@enda_91;datum_event1.datum_redundant@enda_91;"
      "datum_event1.level_redundant@enda_91;datum_event1.not_analysis_varno@enda_91;"
      "datum_event1.duplicate@enda_91;datum_event1.levels2many@enda_91;"
      "datum_event1.level_selection@enda_91;datum_event1.vertco_consistency@enda_91;"
      "datum_event1.vertco_type_changed@enda_91;datum_event1.combined_flagging@enda_91;"
      "datum_event1.report_rejected@enda_91;datum_event1.varqc_performed@enda_91;"
      "datum_event1.obserror_increased@enda_91;datum_event1.contam_cld_flag@enda_91;"
      "datum_event1.contam_rain_flag@enda_91;datum_event1.contam_aerosol_flag@enda_91;"
      "datum_event1.bad_emissivity@enda_91;datum_event1.model_cld_flag@enda_91;"
      "datum_event1.contam_trgas_flag@enda_91;datum_event1.land_sensitivity@enda_91;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_91_PREPTAG = T;
    CCMA_nT_enda_91_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_91_PREPTAG;
  return CCMA_T_enda_91_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_91(void *T);
extern int CCMA_Unpack_T_enda_91(void *T);
extern int CCMA_Sel_T_enda_91(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_91);
PrePutTable(CCMA, d, double, enda_91);
PreLoadTable(CCMA, enda_91);
PreStoreTable(CCMA, enda_91);
extern void CCMA_Dim_T_enda_91(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_91(void *T);
extern int CCMA_Sql_T_enda_91(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_91(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_92) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_92" : appearance order#217, hierarchy rank# 241, weight = 358.000217 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_92;

#endif /* defined(IS_a_TABLE_enda_92) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_92)
extern const ODB_Tags *CCMA_Set_T_enda_92_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_92_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_92_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_92_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_92_TAG = 0;
PRIVATE int CCMA_nT_enda_92_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_92_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_92_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_92_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_92"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_92"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_92"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_92"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_92"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_92"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_92"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_92"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_92"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_92"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_92"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_92"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_92"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_92"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_92"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_92"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_92"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_92"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_92"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_92"; T[19].name = s; }
    CCMA_T_enda_92_TAG = T;
    CCMA_nT_enda_92_TAG = ntag;
    CCMA_nT_enda_92_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_92_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_92_MEM;
  return CCMA_T_enda_92_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_92_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_92_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_92;report_status@enda_92;report_event1@enda_92;"
      "obsvalue@enda_92;datum_anflag@enda_92;datum_status@enda_92;"
      "datum_event1@enda_92;biascorr@enda_92;biascorr_fg@enda_92;"
      "an_depar@enda_92;fg_depar@enda_92;qc_pge@enda_92;final_obs_error@enda_92;"
      "obs_error@enda_92;fg_error@enda_92;skintemp_1@enda_92;"
      "skintemp_2@enda_92;skintemp_3@enda_92;skintemp_4@enda_92;"
      "skintemp_5@enda_92;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_92;report_status@enda_92;report_event1@enda_92;"
      "obsvalue@enda_92;datum_anflag@enda_92;datum_status@enda_92;"
      "datum_event1@enda_92;biascorr@enda_92;biascorr_fg@enda_92;"
      "an_depar@enda_92;fg_depar@enda_92;qc_pge@enda_92;final_obs_error@enda_92;"
      "obs_error@enda_92;fg_error@enda_92;skintemp_1@enda_92;"
      "skintemp_2@enda_92;skintemp_3@enda_92;skintemp_4@enda_92;"
      "skintemp_5@enda_92;report_status.active@enda_92;report_status.passive@enda_92;"
      "report_status.rejected@enda_92;report_status.blacklisted@enda_92;"
      "report_status.use_emiskf_only@enda_92;report_event1.no_data@enda_92;"
      "report_event1.all_rejected@enda_92;report_event1.bad_practice@enda_92;"
      "report_event1.rdb_rejected@enda_92;report_event1.redundant@enda_92;"
      "report_event1.stalt_missing@enda_92;report_event1.qc_failed@enda_92;"
      "report_event1.overcast_ir@enda_92;report_event1.thinned@enda_92;"
      "report_event1.latlon_corrected@enda_92;report_event1.stalt_corrected@enda_92;"
      "datum_anflag.final@enda_92;datum_anflag.fg@enda_92;"
      "datum_anflag.depar@enda_92;datum_anflag.varqc@enda_92;"
      "datum_anflag.blacklist@enda_92;datum_anflag.ups@enda_92;"
      "datum_anflag.uvt@enda_92;datum_anflag.uhu@enda_92;"
      "datum_anflag.ut2@enda_92;datum_anflag.uh2@enda_92;"
      "datum_anflag.uv1@enda_92;datum_anflag.urr@enda_92;"
      "datum_anflag.usn@enda_92;datum_anflag.usst@enda_92;"
      "datum_status.active@enda_92;datum_status.passive@enda_92;"
      "datum_status.rejected@enda_92;datum_status.blacklisted@enda_92;"
      "datum_status.use_emiskf_only@enda_92;datum_event1.vertco_missing@enda_92;"
      "datum_event1.obsvalue_missing@enda_92;datum_event1.fg_missing@enda_92;"
      "datum_event1.rdb_rejected@enda_92;datum_event1.assim_cld_flag@enda_92;"
      "datum_event1.bad_practice@enda_92;datum_event1.vertpos_outrange@enda_92;"
      "datum_event1.fg2big@enda_92;datum_event1.depar2big@enda_92;"
      "datum_event1.obs_error2big@enda_92;datum_event1.datum_redundant@enda_92;"
      "datum_event1.level_redundant@enda_92;datum_event1.not_analysis_varno@enda_92;"
      "datum_event1.duplicate@enda_92;datum_event1.levels2many@enda_92;"
      "datum_event1.level_selection@enda_92;datum_event1.vertco_consistency@enda_92;"
      "datum_event1.vertco_type_changed@enda_92;datum_event1.combined_flagging@enda_92;"
      "datum_event1.report_rejected@enda_92;datum_event1.varqc_performed@enda_92;"
      "datum_event1.obserror_increased@enda_92;datum_event1.contam_cld_flag@enda_92;"
      "datum_event1.contam_rain_flag@enda_92;datum_event1.contam_aerosol_flag@enda_92;"
      "datum_event1.bad_emissivity@enda_92;datum_event1.model_cld_flag@enda_92;"
      "datum_event1.contam_trgas_flag@enda_92;datum_event1.land_sensitivity@enda_92;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_92_PREPTAG = T;
    CCMA_nT_enda_92_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_92_PREPTAG;
  return CCMA_T_enda_92_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_92(void *T);
extern int CCMA_Unpack_T_enda_92(void *T);
extern int CCMA_Sel_T_enda_92(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_92);
PrePutTable(CCMA, d, double, enda_92);
PreLoadTable(CCMA, enda_92);
PreStoreTable(CCMA, enda_92);
extern void CCMA_Dim_T_enda_92(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_92(void *T);
extern int CCMA_Sql_T_enda_92(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_92(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_93) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_93" : appearance order#218, hierarchy rank# 242, weight = 358.000218 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_93;

#endif /* defined(IS_a_TABLE_enda_93) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_93)
extern const ODB_Tags *CCMA_Set_T_enda_93_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_93_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_93_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_93_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_93_TAG = 0;
PRIVATE int CCMA_nT_enda_93_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_93_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_93_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_93_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_93"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_93"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_93"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_93"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_93"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_93"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_93"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_93"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_93"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_93"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_93"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_93"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_93"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_93"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_93"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_93"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_93"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_93"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_93"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_93"; T[19].name = s; }
    CCMA_T_enda_93_TAG = T;
    CCMA_nT_enda_93_TAG = ntag;
    CCMA_nT_enda_93_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_93_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_93_MEM;
  return CCMA_T_enda_93_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_93_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_93_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_93;report_status@enda_93;report_event1@enda_93;"
      "obsvalue@enda_93;datum_anflag@enda_93;datum_status@enda_93;"
      "datum_event1@enda_93;biascorr@enda_93;biascorr_fg@enda_93;"
      "an_depar@enda_93;fg_depar@enda_93;qc_pge@enda_93;final_obs_error@enda_93;"
      "obs_error@enda_93;fg_error@enda_93;skintemp_1@enda_93;"
      "skintemp_2@enda_93;skintemp_3@enda_93;skintemp_4@enda_93;"
      "skintemp_5@enda_93;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_93;report_status@enda_93;report_event1@enda_93;"
      "obsvalue@enda_93;datum_anflag@enda_93;datum_status@enda_93;"
      "datum_event1@enda_93;biascorr@enda_93;biascorr_fg@enda_93;"
      "an_depar@enda_93;fg_depar@enda_93;qc_pge@enda_93;final_obs_error@enda_93;"
      "obs_error@enda_93;fg_error@enda_93;skintemp_1@enda_93;"
      "skintemp_2@enda_93;skintemp_3@enda_93;skintemp_4@enda_93;"
      "skintemp_5@enda_93;report_status.active@enda_93;report_status.passive@enda_93;"
      "report_status.rejected@enda_93;report_status.blacklisted@enda_93;"
      "report_status.use_emiskf_only@enda_93;report_event1.no_data@enda_93;"
      "report_event1.all_rejected@enda_93;report_event1.bad_practice@enda_93;"
      "report_event1.rdb_rejected@enda_93;report_event1.redundant@enda_93;"
      "report_event1.stalt_missing@enda_93;report_event1.qc_failed@enda_93;"
      "report_event1.overcast_ir@enda_93;report_event1.thinned@enda_93;"
      "report_event1.latlon_corrected@enda_93;report_event1.stalt_corrected@enda_93;"
      "datum_anflag.final@enda_93;datum_anflag.fg@enda_93;"
      "datum_anflag.depar@enda_93;datum_anflag.varqc@enda_93;"
      "datum_anflag.blacklist@enda_93;datum_anflag.ups@enda_93;"
      "datum_anflag.uvt@enda_93;datum_anflag.uhu@enda_93;"
      "datum_anflag.ut2@enda_93;datum_anflag.uh2@enda_93;"
      "datum_anflag.uv1@enda_93;datum_anflag.urr@enda_93;"
      "datum_anflag.usn@enda_93;datum_anflag.usst@enda_93;"
      "datum_status.active@enda_93;datum_status.passive@enda_93;"
      "datum_status.rejected@enda_93;datum_status.blacklisted@enda_93;"
      "datum_status.use_emiskf_only@enda_93;datum_event1.vertco_missing@enda_93;"
      "datum_event1.obsvalue_missing@enda_93;datum_event1.fg_missing@enda_93;"
      "datum_event1.rdb_rejected@enda_93;datum_event1.assim_cld_flag@enda_93;"
      "datum_event1.bad_practice@enda_93;datum_event1.vertpos_outrange@enda_93;"
      "datum_event1.fg2big@enda_93;datum_event1.depar2big@enda_93;"
      "datum_event1.obs_error2big@enda_93;datum_event1.datum_redundant@enda_93;"
      "datum_event1.level_redundant@enda_93;datum_event1.not_analysis_varno@enda_93;"
      "datum_event1.duplicate@enda_93;datum_event1.levels2many@enda_93;"
      "datum_event1.level_selection@enda_93;datum_event1.vertco_consistency@enda_93;"
      "datum_event1.vertco_type_changed@enda_93;datum_event1.combined_flagging@enda_93;"
      "datum_event1.report_rejected@enda_93;datum_event1.varqc_performed@enda_93;"
      "datum_event1.obserror_increased@enda_93;datum_event1.contam_cld_flag@enda_93;"
      "datum_event1.contam_rain_flag@enda_93;datum_event1.contam_aerosol_flag@enda_93;"
      "datum_event1.bad_emissivity@enda_93;datum_event1.model_cld_flag@enda_93;"
      "datum_event1.contam_trgas_flag@enda_93;datum_event1.land_sensitivity@enda_93;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_93_PREPTAG = T;
    CCMA_nT_enda_93_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_93_PREPTAG;
  return CCMA_T_enda_93_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_93(void *T);
extern int CCMA_Unpack_T_enda_93(void *T);
extern int CCMA_Sel_T_enda_93(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_93);
PrePutTable(CCMA, d, double, enda_93);
PreLoadTable(CCMA, enda_93);
PreStoreTable(CCMA, enda_93);
extern void CCMA_Dim_T_enda_93(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_93(void *T);
extern int CCMA_Sql_T_enda_93(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_93(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_94) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_94" : appearance order#219, hierarchy rank# 243, weight = 358.000219 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_94;

#endif /* defined(IS_a_TABLE_enda_94) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_94)
extern const ODB_Tags *CCMA_Set_T_enda_94_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_94_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_94_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_94_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_94_TAG = 0;
PRIVATE int CCMA_nT_enda_94_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_94_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_94_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_94_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_94"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_94"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_94"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_94"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_94"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_94"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_94"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_94"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_94"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_94"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_94"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_94"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_94"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_94"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_94"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_94"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_94"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_94"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_94"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_94"; T[19].name = s; }
    CCMA_T_enda_94_TAG = T;
    CCMA_nT_enda_94_TAG = ntag;
    CCMA_nT_enda_94_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_94_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_94_MEM;
  return CCMA_T_enda_94_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_94_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_94_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_94;report_status@enda_94;report_event1@enda_94;"
      "obsvalue@enda_94;datum_anflag@enda_94;datum_status@enda_94;"
      "datum_event1@enda_94;biascorr@enda_94;biascorr_fg@enda_94;"
      "an_depar@enda_94;fg_depar@enda_94;qc_pge@enda_94;final_obs_error@enda_94;"
      "obs_error@enda_94;fg_error@enda_94;skintemp_1@enda_94;"
      "skintemp_2@enda_94;skintemp_3@enda_94;skintemp_4@enda_94;"
      "skintemp_5@enda_94;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_94;report_status@enda_94;report_event1@enda_94;"
      "obsvalue@enda_94;datum_anflag@enda_94;datum_status@enda_94;"
      "datum_event1@enda_94;biascorr@enda_94;biascorr_fg@enda_94;"
      "an_depar@enda_94;fg_depar@enda_94;qc_pge@enda_94;final_obs_error@enda_94;"
      "obs_error@enda_94;fg_error@enda_94;skintemp_1@enda_94;"
      "skintemp_2@enda_94;skintemp_3@enda_94;skintemp_4@enda_94;"
      "skintemp_5@enda_94;report_status.active@enda_94;report_status.passive@enda_94;"
      "report_status.rejected@enda_94;report_status.blacklisted@enda_94;"
      "report_status.use_emiskf_only@enda_94;report_event1.no_data@enda_94;"
      "report_event1.all_rejected@enda_94;report_event1.bad_practice@enda_94;"
      "report_event1.rdb_rejected@enda_94;report_event1.redundant@enda_94;"
      "report_event1.stalt_missing@enda_94;report_event1.qc_failed@enda_94;"
      "report_event1.overcast_ir@enda_94;report_event1.thinned@enda_94;"
      "report_event1.latlon_corrected@enda_94;report_event1.stalt_corrected@enda_94;"
      "datum_anflag.final@enda_94;datum_anflag.fg@enda_94;"
      "datum_anflag.depar@enda_94;datum_anflag.varqc@enda_94;"
      "datum_anflag.blacklist@enda_94;datum_anflag.ups@enda_94;"
      "datum_anflag.uvt@enda_94;datum_anflag.uhu@enda_94;"
      "datum_anflag.ut2@enda_94;datum_anflag.uh2@enda_94;"
      "datum_anflag.uv1@enda_94;datum_anflag.urr@enda_94;"
      "datum_anflag.usn@enda_94;datum_anflag.usst@enda_94;"
      "datum_status.active@enda_94;datum_status.passive@enda_94;"
      "datum_status.rejected@enda_94;datum_status.blacklisted@enda_94;"
      "datum_status.use_emiskf_only@enda_94;datum_event1.vertco_missing@enda_94;"
      "datum_event1.obsvalue_missing@enda_94;datum_event1.fg_missing@enda_94;"
      "datum_event1.rdb_rejected@enda_94;datum_event1.assim_cld_flag@enda_94;"
      "datum_event1.bad_practice@enda_94;datum_event1.vertpos_outrange@enda_94;"
      "datum_event1.fg2big@enda_94;datum_event1.depar2big@enda_94;"
      "datum_event1.obs_error2big@enda_94;datum_event1.datum_redundant@enda_94;"
      "datum_event1.level_redundant@enda_94;datum_event1.not_analysis_varno@enda_94;"
      "datum_event1.duplicate@enda_94;datum_event1.levels2many@enda_94;"
      "datum_event1.level_selection@enda_94;datum_event1.vertco_consistency@enda_94;"
      "datum_event1.vertco_type_changed@enda_94;datum_event1.combined_flagging@enda_94;"
      "datum_event1.report_rejected@enda_94;datum_event1.varqc_performed@enda_94;"
      "datum_event1.obserror_increased@enda_94;datum_event1.contam_cld_flag@enda_94;"
      "datum_event1.contam_rain_flag@enda_94;datum_event1.contam_aerosol_flag@enda_94;"
      "datum_event1.bad_emissivity@enda_94;datum_event1.model_cld_flag@enda_94;"
      "datum_event1.contam_trgas_flag@enda_94;datum_event1.land_sensitivity@enda_94;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_94_PREPTAG = T;
    CCMA_nT_enda_94_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_94_PREPTAG;
  return CCMA_T_enda_94_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_94(void *T);
extern int CCMA_Unpack_T_enda_94(void *T);
extern int CCMA_Sel_T_enda_94(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_94);
PrePutTable(CCMA, d, double, enda_94);
PreLoadTable(CCMA, enda_94);
PreStoreTable(CCMA, enda_94);
extern void CCMA_Dim_T_enda_94(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_94(void *T);
extern int CCMA_Sql_T_enda_94(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_94(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_95) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_95" : appearance order#220, hierarchy rank# 244, weight = 358.000220 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_95;

#endif /* defined(IS_a_TABLE_enda_95) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_95)
extern const ODB_Tags *CCMA_Set_T_enda_95_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_95_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_95_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_95_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_95_TAG = 0;
PRIVATE int CCMA_nT_enda_95_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_95_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_95_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_95_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_95"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_95"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_95"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_95"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_95"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_95"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_95"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_95"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_95"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_95"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_95"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_95"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_95"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_95"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_95"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_95"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_95"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_95"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_95"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_95"; T[19].name = s; }
    CCMA_T_enda_95_TAG = T;
    CCMA_nT_enda_95_TAG = ntag;
    CCMA_nT_enda_95_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_95_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_95_MEM;
  return CCMA_T_enda_95_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_95_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_95_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_95;report_status@enda_95;report_event1@enda_95;"
      "obsvalue@enda_95;datum_anflag@enda_95;datum_status@enda_95;"
      "datum_event1@enda_95;biascorr@enda_95;biascorr_fg@enda_95;"
      "an_depar@enda_95;fg_depar@enda_95;qc_pge@enda_95;final_obs_error@enda_95;"
      "obs_error@enda_95;fg_error@enda_95;skintemp_1@enda_95;"
      "skintemp_2@enda_95;skintemp_3@enda_95;skintemp_4@enda_95;"
      "skintemp_5@enda_95;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_95;report_status@enda_95;report_event1@enda_95;"
      "obsvalue@enda_95;datum_anflag@enda_95;datum_status@enda_95;"
      "datum_event1@enda_95;biascorr@enda_95;biascorr_fg@enda_95;"
      "an_depar@enda_95;fg_depar@enda_95;qc_pge@enda_95;final_obs_error@enda_95;"
      "obs_error@enda_95;fg_error@enda_95;skintemp_1@enda_95;"
      "skintemp_2@enda_95;skintemp_3@enda_95;skintemp_4@enda_95;"
      "skintemp_5@enda_95;report_status.active@enda_95;report_status.passive@enda_95;"
      "report_status.rejected@enda_95;report_status.blacklisted@enda_95;"
      "report_status.use_emiskf_only@enda_95;report_event1.no_data@enda_95;"
      "report_event1.all_rejected@enda_95;report_event1.bad_practice@enda_95;"
      "report_event1.rdb_rejected@enda_95;report_event1.redundant@enda_95;"
      "report_event1.stalt_missing@enda_95;report_event1.qc_failed@enda_95;"
      "report_event1.overcast_ir@enda_95;report_event1.thinned@enda_95;"
      "report_event1.latlon_corrected@enda_95;report_event1.stalt_corrected@enda_95;"
      "datum_anflag.final@enda_95;datum_anflag.fg@enda_95;"
      "datum_anflag.depar@enda_95;datum_anflag.varqc@enda_95;"
      "datum_anflag.blacklist@enda_95;datum_anflag.ups@enda_95;"
      "datum_anflag.uvt@enda_95;datum_anflag.uhu@enda_95;"
      "datum_anflag.ut2@enda_95;datum_anflag.uh2@enda_95;"
      "datum_anflag.uv1@enda_95;datum_anflag.urr@enda_95;"
      "datum_anflag.usn@enda_95;datum_anflag.usst@enda_95;"
      "datum_status.active@enda_95;datum_status.passive@enda_95;"
      "datum_status.rejected@enda_95;datum_status.blacklisted@enda_95;"
      "datum_status.use_emiskf_only@enda_95;datum_event1.vertco_missing@enda_95;"
      "datum_event1.obsvalue_missing@enda_95;datum_event1.fg_missing@enda_95;"
      "datum_event1.rdb_rejected@enda_95;datum_event1.assim_cld_flag@enda_95;"
      "datum_event1.bad_practice@enda_95;datum_event1.vertpos_outrange@enda_95;"
      "datum_event1.fg2big@enda_95;datum_event1.depar2big@enda_95;"
      "datum_event1.obs_error2big@enda_95;datum_event1.datum_redundant@enda_95;"
      "datum_event1.level_redundant@enda_95;datum_event1.not_analysis_varno@enda_95;"
      "datum_event1.duplicate@enda_95;datum_event1.levels2many@enda_95;"
      "datum_event1.level_selection@enda_95;datum_event1.vertco_consistency@enda_95;"
      "datum_event1.vertco_type_changed@enda_95;datum_event1.combined_flagging@enda_95;"
      "datum_event1.report_rejected@enda_95;datum_event1.varqc_performed@enda_95;"
      "datum_event1.obserror_increased@enda_95;datum_event1.contam_cld_flag@enda_95;"
      "datum_event1.contam_rain_flag@enda_95;datum_event1.contam_aerosol_flag@enda_95;"
      "datum_event1.bad_emissivity@enda_95;datum_event1.model_cld_flag@enda_95;"
      "datum_event1.contam_trgas_flag@enda_95;datum_event1.land_sensitivity@enda_95;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_95_PREPTAG = T;
    CCMA_nT_enda_95_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_95_PREPTAG;
  return CCMA_T_enda_95_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_95(void *T);
extern int CCMA_Unpack_T_enda_95(void *T);
extern int CCMA_Sel_T_enda_95(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_95);
PrePutTable(CCMA, d, double, enda_95);
PreLoadTable(CCMA, enda_95);
PreStoreTable(CCMA, enda_95);
extern void CCMA_Dim_T_enda_95(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_95(void *T);
extern int CCMA_Sql_T_enda_95(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_95(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_96) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_96" : appearance order#221, hierarchy rank# 245, weight = 358.000221 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_96;

#endif /* defined(IS_a_TABLE_enda_96) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_96)
extern const ODB_Tags *CCMA_Set_T_enda_96_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_96_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_96_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_96_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_96_TAG = 0;
PRIVATE int CCMA_nT_enda_96_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_96_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_96_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_96_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_96"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_96"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_96"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_96"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_96"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_96"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_96"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_96"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_96"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_96"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_96"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_96"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_96"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_96"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_96"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_96"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_96"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_96"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_96"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_96"; T[19].name = s; }
    CCMA_T_enda_96_TAG = T;
    CCMA_nT_enda_96_TAG = ntag;
    CCMA_nT_enda_96_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_96_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_96_MEM;
  return CCMA_T_enda_96_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_96_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_96_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_96;report_status@enda_96;report_event1@enda_96;"
      "obsvalue@enda_96;datum_anflag@enda_96;datum_status@enda_96;"
      "datum_event1@enda_96;biascorr@enda_96;biascorr_fg@enda_96;"
      "an_depar@enda_96;fg_depar@enda_96;qc_pge@enda_96;final_obs_error@enda_96;"
      "obs_error@enda_96;fg_error@enda_96;skintemp_1@enda_96;"
      "skintemp_2@enda_96;skintemp_3@enda_96;skintemp_4@enda_96;"
      "skintemp_5@enda_96;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_96;report_status@enda_96;report_event1@enda_96;"
      "obsvalue@enda_96;datum_anflag@enda_96;datum_status@enda_96;"
      "datum_event1@enda_96;biascorr@enda_96;biascorr_fg@enda_96;"
      "an_depar@enda_96;fg_depar@enda_96;qc_pge@enda_96;final_obs_error@enda_96;"
      "obs_error@enda_96;fg_error@enda_96;skintemp_1@enda_96;"
      "skintemp_2@enda_96;skintemp_3@enda_96;skintemp_4@enda_96;"
      "skintemp_5@enda_96;report_status.active@enda_96;report_status.passive@enda_96;"
      "report_status.rejected@enda_96;report_status.blacklisted@enda_96;"
      "report_status.use_emiskf_only@enda_96;report_event1.no_data@enda_96;"
      "report_event1.all_rejected@enda_96;report_event1.bad_practice@enda_96;"
      "report_event1.rdb_rejected@enda_96;report_event1.redundant@enda_96;"
      "report_event1.stalt_missing@enda_96;report_event1.qc_failed@enda_96;"
      "report_event1.overcast_ir@enda_96;report_event1.thinned@enda_96;"
      "report_event1.latlon_corrected@enda_96;report_event1.stalt_corrected@enda_96;"
      "datum_anflag.final@enda_96;datum_anflag.fg@enda_96;"
      "datum_anflag.depar@enda_96;datum_anflag.varqc@enda_96;"
      "datum_anflag.blacklist@enda_96;datum_anflag.ups@enda_96;"
      "datum_anflag.uvt@enda_96;datum_anflag.uhu@enda_96;"
      "datum_anflag.ut2@enda_96;datum_anflag.uh2@enda_96;"
      "datum_anflag.uv1@enda_96;datum_anflag.urr@enda_96;"
      "datum_anflag.usn@enda_96;datum_anflag.usst@enda_96;"
      "datum_status.active@enda_96;datum_status.passive@enda_96;"
      "datum_status.rejected@enda_96;datum_status.blacklisted@enda_96;"
      "datum_status.use_emiskf_only@enda_96;datum_event1.vertco_missing@enda_96;"
      "datum_event1.obsvalue_missing@enda_96;datum_event1.fg_missing@enda_96;"
      "datum_event1.rdb_rejected@enda_96;datum_event1.assim_cld_flag@enda_96;"
      "datum_event1.bad_practice@enda_96;datum_event1.vertpos_outrange@enda_96;"
      "datum_event1.fg2big@enda_96;datum_event1.depar2big@enda_96;"
      "datum_event1.obs_error2big@enda_96;datum_event1.datum_redundant@enda_96;"
      "datum_event1.level_redundant@enda_96;datum_event1.not_analysis_varno@enda_96;"
      "datum_event1.duplicate@enda_96;datum_event1.levels2many@enda_96;"
      "datum_event1.level_selection@enda_96;datum_event1.vertco_consistency@enda_96;"
      "datum_event1.vertco_type_changed@enda_96;datum_event1.combined_flagging@enda_96;"
      "datum_event1.report_rejected@enda_96;datum_event1.varqc_performed@enda_96;"
      "datum_event1.obserror_increased@enda_96;datum_event1.contam_cld_flag@enda_96;"
      "datum_event1.contam_rain_flag@enda_96;datum_event1.contam_aerosol_flag@enda_96;"
      "datum_event1.bad_emissivity@enda_96;datum_event1.model_cld_flag@enda_96;"
      "datum_event1.contam_trgas_flag@enda_96;datum_event1.land_sensitivity@enda_96;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_96_PREPTAG = T;
    CCMA_nT_enda_96_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_96_PREPTAG;
  return CCMA_T_enda_96_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_96(void *T);
extern int CCMA_Unpack_T_enda_96(void *T);
extern int CCMA_Sel_T_enda_96(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_96);
PrePutTable(CCMA, d, double, enda_96);
PreLoadTable(CCMA, enda_96);
PreStoreTable(CCMA, enda_96);
extern void CCMA_Dim_T_enda_96(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_96(void *T);
extern int CCMA_Sql_T_enda_96(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_96(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_97) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_97" : appearance order#222, hierarchy rank# 246, weight = 358.000222 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_97;

#endif /* defined(IS_a_TABLE_enda_97) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_97)
extern const ODB_Tags *CCMA_Set_T_enda_97_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_97_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_97_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_97_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_97_TAG = 0;
PRIVATE int CCMA_nT_enda_97_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_97_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_97_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_97_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_97"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_97"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_97"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_97"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_97"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_97"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_97"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_97"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_97"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_97"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_97"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_97"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_97"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_97"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_97"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_97"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_97"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_97"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_97"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_97"; T[19].name = s; }
    CCMA_T_enda_97_TAG = T;
    CCMA_nT_enda_97_TAG = ntag;
    CCMA_nT_enda_97_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_97_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_97_MEM;
  return CCMA_T_enda_97_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_97_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_97_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_97;report_status@enda_97;report_event1@enda_97;"
      "obsvalue@enda_97;datum_anflag@enda_97;datum_status@enda_97;"
      "datum_event1@enda_97;biascorr@enda_97;biascorr_fg@enda_97;"
      "an_depar@enda_97;fg_depar@enda_97;qc_pge@enda_97;final_obs_error@enda_97;"
      "obs_error@enda_97;fg_error@enda_97;skintemp_1@enda_97;"
      "skintemp_2@enda_97;skintemp_3@enda_97;skintemp_4@enda_97;"
      "skintemp_5@enda_97;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_97;report_status@enda_97;report_event1@enda_97;"
      "obsvalue@enda_97;datum_anflag@enda_97;datum_status@enda_97;"
      "datum_event1@enda_97;biascorr@enda_97;biascorr_fg@enda_97;"
      "an_depar@enda_97;fg_depar@enda_97;qc_pge@enda_97;final_obs_error@enda_97;"
      "obs_error@enda_97;fg_error@enda_97;skintemp_1@enda_97;"
      "skintemp_2@enda_97;skintemp_3@enda_97;skintemp_4@enda_97;"
      "skintemp_5@enda_97;report_status.active@enda_97;report_status.passive@enda_97;"
      "report_status.rejected@enda_97;report_status.blacklisted@enda_97;"
      "report_status.use_emiskf_only@enda_97;report_event1.no_data@enda_97;"
      "report_event1.all_rejected@enda_97;report_event1.bad_practice@enda_97;"
      "report_event1.rdb_rejected@enda_97;report_event1.redundant@enda_97;"
      "report_event1.stalt_missing@enda_97;report_event1.qc_failed@enda_97;"
      "report_event1.overcast_ir@enda_97;report_event1.thinned@enda_97;"
      "report_event1.latlon_corrected@enda_97;report_event1.stalt_corrected@enda_97;"
      "datum_anflag.final@enda_97;datum_anflag.fg@enda_97;"
      "datum_anflag.depar@enda_97;datum_anflag.varqc@enda_97;"
      "datum_anflag.blacklist@enda_97;datum_anflag.ups@enda_97;"
      "datum_anflag.uvt@enda_97;datum_anflag.uhu@enda_97;"
      "datum_anflag.ut2@enda_97;datum_anflag.uh2@enda_97;"
      "datum_anflag.uv1@enda_97;datum_anflag.urr@enda_97;"
      "datum_anflag.usn@enda_97;datum_anflag.usst@enda_97;"
      "datum_status.active@enda_97;datum_status.passive@enda_97;"
      "datum_status.rejected@enda_97;datum_status.blacklisted@enda_97;"
      "datum_status.use_emiskf_only@enda_97;datum_event1.vertco_missing@enda_97;"
      "datum_event1.obsvalue_missing@enda_97;datum_event1.fg_missing@enda_97;"
      "datum_event1.rdb_rejected@enda_97;datum_event1.assim_cld_flag@enda_97;"
      "datum_event1.bad_practice@enda_97;datum_event1.vertpos_outrange@enda_97;"
      "datum_event1.fg2big@enda_97;datum_event1.depar2big@enda_97;"
      "datum_event1.obs_error2big@enda_97;datum_event1.datum_redundant@enda_97;"
      "datum_event1.level_redundant@enda_97;datum_event1.not_analysis_varno@enda_97;"
      "datum_event1.duplicate@enda_97;datum_event1.levels2many@enda_97;"
      "datum_event1.level_selection@enda_97;datum_event1.vertco_consistency@enda_97;"
      "datum_event1.vertco_type_changed@enda_97;datum_event1.combined_flagging@enda_97;"
      "datum_event1.report_rejected@enda_97;datum_event1.varqc_performed@enda_97;"
      "datum_event1.obserror_increased@enda_97;datum_event1.contam_cld_flag@enda_97;"
      "datum_event1.contam_rain_flag@enda_97;datum_event1.contam_aerosol_flag@enda_97;"
      "datum_event1.bad_emissivity@enda_97;datum_event1.model_cld_flag@enda_97;"
      "datum_event1.contam_trgas_flag@enda_97;datum_event1.land_sensitivity@enda_97;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_97_PREPTAG = T;
    CCMA_nT_enda_97_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_97_PREPTAG;
  return CCMA_T_enda_97_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_97(void *T);
extern int CCMA_Unpack_T_enda_97(void *T);
extern int CCMA_Sel_T_enda_97(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_97);
PrePutTable(CCMA, d, double, enda_97);
PreLoadTable(CCMA, enda_97);
PreStoreTable(CCMA, enda_97);
extern void CCMA_Dim_T_enda_97(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_97(void *T);
extern int CCMA_Sql_T_enda_97(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_97(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_98) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_98" : appearance order#223, hierarchy rank# 247, weight = 358.000223 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_98;

#endif /* defined(IS_a_TABLE_enda_98) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_98)
extern const ODB_Tags *CCMA_Set_T_enda_98_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_98_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_98_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_98_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_98_TAG = 0;
PRIVATE int CCMA_nT_enda_98_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_98_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_98_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_98_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_98"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_98"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_98"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_98"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_98"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_98"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_98"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_98"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_98"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_98"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_98"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_98"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_98"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_98"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_98"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_98"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_98"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_98"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_98"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_98"; T[19].name = s; }
    CCMA_T_enda_98_TAG = T;
    CCMA_nT_enda_98_TAG = ntag;
    CCMA_nT_enda_98_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_98_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_98_MEM;
  return CCMA_T_enda_98_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_98_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_98_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_98;report_status@enda_98;report_event1@enda_98;"
      "obsvalue@enda_98;datum_anflag@enda_98;datum_status@enda_98;"
      "datum_event1@enda_98;biascorr@enda_98;biascorr_fg@enda_98;"
      "an_depar@enda_98;fg_depar@enda_98;qc_pge@enda_98;final_obs_error@enda_98;"
      "obs_error@enda_98;fg_error@enda_98;skintemp_1@enda_98;"
      "skintemp_2@enda_98;skintemp_3@enda_98;skintemp_4@enda_98;"
      "skintemp_5@enda_98;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_98;report_status@enda_98;report_event1@enda_98;"
      "obsvalue@enda_98;datum_anflag@enda_98;datum_status@enda_98;"
      "datum_event1@enda_98;biascorr@enda_98;biascorr_fg@enda_98;"
      "an_depar@enda_98;fg_depar@enda_98;qc_pge@enda_98;final_obs_error@enda_98;"
      "obs_error@enda_98;fg_error@enda_98;skintemp_1@enda_98;"
      "skintemp_2@enda_98;skintemp_3@enda_98;skintemp_4@enda_98;"
      "skintemp_5@enda_98;report_status.active@enda_98;report_status.passive@enda_98;"
      "report_status.rejected@enda_98;report_status.blacklisted@enda_98;"
      "report_status.use_emiskf_only@enda_98;report_event1.no_data@enda_98;"
      "report_event1.all_rejected@enda_98;report_event1.bad_practice@enda_98;"
      "report_event1.rdb_rejected@enda_98;report_event1.redundant@enda_98;"
      "report_event1.stalt_missing@enda_98;report_event1.qc_failed@enda_98;"
      "report_event1.overcast_ir@enda_98;report_event1.thinned@enda_98;"
      "report_event1.latlon_corrected@enda_98;report_event1.stalt_corrected@enda_98;"
      "datum_anflag.final@enda_98;datum_anflag.fg@enda_98;"
      "datum_anflag.depar@enda_98;datum_anflag.varqc@enda_98;"
      "datum_anflag.blacklist@enda_98;datum_anflag.ups@enda_98;"
      "datum_anflag.uvt@enda_98;datum_anflag.uhu@enda_98;"
      "datum_anflag.ut2@enda_98;datum_anflag.uh2@enda_98;"
      "datum_anflag.uv1@enda_98;datum_anflag.urr@enda_98;"
      "datum_anflag.usn@enda_98;datum_anflag.usst@enda_98;"
      "datum_status.active@enda_98;datum_status.passive@enda_98;"
      "datum_status.rejected@enda_98;datum_status.blacklisted@enda_98;"
      "datum_status.use_emiskf_only@enda_98;datum_event1.vertco_missing@enda_98;"
      "datum_event1.obsvalue_missing@enda_98;datum_event1.fg_missing@enda_98;"
      "datum_event1.rdb_rejected@enda_98;datum_event1.assim_cld_flag@enda_98;"
      "datum_event1.bad_practice@enda_98;datum_event1.vertpos_outrange@enda_98;"
      "datum_event1.fg2big@enda_98;datum_event1.depar2big@enda_98;"
      "datum_event1.obs_error2big@enda_98;datum_event1.datum_redundant@enda_98;"
      "datum_event1.level_redundant@enda_98;datum_event1.not_analysis_varno@enda_98;"
      "datum_event1.duplicate@enda_98;datum_event1.levels2many@enda_98;"
      "datum_event1.level_selection@enda_98;datum_event1.vertco_consistency@enda_98;"
      "datum_event1.vertco_type_changed@enda_98;datum_event1.combined_flagging@enda_98;"
      "datum_event1.report_rejected@enda_98;datum_event1.varqc_performed@enda_98;"
      "datum_event1.obserror_increased@enda_98;datum_event1.contam_cld_flag@enda_98;"
      "datum_event1.contam_rain_flag@enda_98;datum_event1.contam_aerosol_flag@enda_98;"
      "datum_event1.bad_emissivity@enda_98;datum_event1.model_cld_flag@enda_98;"
      "datum_event1.contam_trgas_flag@enda_98;datum_event1.land_sensitivity@enda_98;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_98_PREPTAG = T;
    CCMA_nT_enda_98_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_98_PREPTAG;
  return CCMA_T_enda_98_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_98(void *T);
extern int CCMA_Unpack_T_enda_98(void *T);
extern int CCMA_Sel_T_enda_98(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_98);
PrePutTable(CCMA, d, double, enda_98);
PreLoadTable(CCMA, enda_98);
PreStoreTable(CCMA, enda_98);
extern void CCMA_Dim_T_enda_98(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_98(void *T);
extern int CCMA_Sql_T_enda_98(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_98(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_99) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_99" : appearance order#224, hierarchy rank# 248, weight = 358.000224 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_99;

#endif /* defined(IS_a_TABLE_enda_99) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_99)
extern const ODB_Tags *CCMA_Set_T_enda_99_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_99_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_99_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_99_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_99_TAG = 0;
PRIVATE int CCMA_nT_enda_99_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_99_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_99_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_99_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_99"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_99"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_99"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_99"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_99"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_99"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_99"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_99"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_99"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_99"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_99"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_99"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_99"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_99"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_99"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_99"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_99"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_99"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_99"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_99"; T[19].name = s; }
    CCMA_T_enda_99_TAG = T;
    CCMA_nT_enda_99_TAG = ntag;
    CCMA_nT_enda_99_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_99_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_99_MEM;
  return CCMA_T_enda_99_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_99_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_99_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 380;
    { static char s[] =
      ";member@enda_99;report_status@enda_99;report_event1@enda_99;"
      "obsvalue@enda_99;datum_anflag@enda_99;datum_status@enda_99;"
      "datum_event1@enda_99;biascorr@enda_99;biascorr_fg@enda_99;"
      "an_depar@enda_99;fg_depar@enda_99;qc_pge@enda_99;final_obs_error@enda_99;"
      "obs_error@enda_99;fg_error@enda_99;skintemp_1@enda_99;"
      "skintemp_2@enda_99;skintemp_3@enda_99;skintemp_4@enda_99;"
      "skintemp_5@enda_99;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2493;
    { static char s[] =
      ";member@enda_99;report_status@enda_99;report_event1@enda_99;"
      "obsvalue@enda_99;datum_anflag@enda_99;datum_status@enda_99;"
      "datum_event1@enda_99;biascorr@enda_99;biascorr_fg@enda_99;"
      "an_depar@enda_99;fg_depar@enda_99;qc_pge@enda_99;final_obs_error@enda_99;"
      "obs_error@enda_99;fg_error@enda_99;skintemp_1@enda_99;"
      "skintemp_2@enda_99;skintemp_3@enda_99;skintemp_4@enda_99;"
      "skintemp_5@enda_99;report_status.active@enda_99;report_status.passive@enda_99;"
      "report_status.rejected@enda_99;report_status.blacklisted@enda_99;"
      "report_status.use_emiskf_only@enda_99;report_event1.no_data@enda_99;"
      "report_event1.all_rejected@enda_99;report_event1.bad_practice@enda_99;"
      "report_event1.rdb_rejected@enda_99;report_event1.redundant@enda_99;"
      "report_event1.stalt_missing@enda_99;report_event1.qc_failed@enda_99;"
      "report_event1.overcast_ir@enda_99;report_event1.thinned@enda_99;"
      "report_event1.latlon_corrected@enda_99;report_event1.stalt_corrected@enda_99;"
      "datum_anflag.final@enda_99;datum_anflag.fg@enda_99;"
      "datum_anflag.depar@enda_99;datum_anflag.varqc@enda_99;"
      "datum_anflag.blacklist@enda_99;datum_anflag.ups@enda_99;"
      "datum_anflag.uvt@enda_99;datum_anflag.uhu@enda_99;"
      "datum_anflag.ut2@enda_99;datum_anflag.uh2@enda_99;"
      "datum_anflag.uv1@enda_99;datum_anflag.urr@enda_99;"
      "datum_anflag.usn@enda_99;datum_anflag.usst@enda_99;"
      "datum_status.active@enda_99;datum_status.passive@enda_99;"
      "datum_status.rejected@enda_99;datum_status.blacklisted@enda_99;"
      "datum_status.use_emiskf_only@enda_99;datum_event1.vertco_missing@enda_99;"
      "datum_event1.obsvalue_missing@enda_99;datum_event1.fg_missing@enda_99;"
      "datum_event1.rdb_rejected@enda_99;datum_event1.assim_cld_flag@enda_99;"
      "datum_event1.bad_practice@enda_99;datum_event1.vertpos_outrange@enda_99;"
      "datum_event1.fg2big@enda_99;datum_event1.depar2big@enda_99;"
      "datum_event1.obs_error2big@enda_99;datum_event1.datum_redundant@enda_99;"
      "datum_event1.level_redundant@enda_99;datum_event1.not_analysis_varno@enda_99;"
      "datum_event1.duplicate@enda_99;datum_event1.levels2many@enda_99;"
      "datum_event1.level_selection@enda_99;datum_event1.vertco_consistency@enda_99;"
      "datum_event1.vertco_type_changed@enda_99;datum_event1.combined_flagging@enda_99;"
      "datum_event1.report_rejected@enda_99;datum_event1.varqc_performed@enda_99;"
      "datum_event1.obserror_increased@enda_99;datum_event1.contam_cld_flag@enda_99;"
      "datum_event1.contam_rain_flag@enda_99;datum_event1.contam_aerosol_flag@enda_99;"
      "datum_event1.bad_emissivity@enda_99;datum_event1.model_cld_flag@enda_99;"
      "datum_event1.contam_trgas_flag@enda_99;datum_event1.land_sensitivity@enda_99;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_99_PREPTAG = T;
    CCMA_nT_enda_99_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_99_PREPTAG;
  return CCMA_T_enda_99_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_99(void *T);
extern int CCMA_Unpack_T_enda_99(void *T);
extern int CCMA_Sel_T_enda_99(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_99);
PrePutTable(CCMA, d, double, enda_99);
PreLoadTable(CCMA, enda_99);
PreStoreTable(CCMA, enda_99);
extern void CCMA_Dim_T_enda_99(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_99(void *T);
extern int CCMA_Sql_T_enda_99(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_99(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_enda_100) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "enda_100" : appearance order#225, hierarchy rank# 249, weight = 358.000225 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,member);
  DeclareDS(Bitfield,report_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,report_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obsvalue);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
} TABLE_enda_100;

#endif /* defined(IS_a_TABLE_enda_100) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_enda_100)
extern const ODB_Tags *CCMA_Set_T_enda_100_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_enda_100_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_enda_100_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_enda_100_PREPTAG = NULL;
PRIVATE int CCMA_nT_enda_100_TAG = 0;
PRIVATE int CCMA_nT_enda_100_PREPTAG = 0;
PRIVATE int CCMA_nT_enda_100_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_enda_100_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_enda_100_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:member@enda_100"; T[0].name = s; }
    { static char s[] = "Bitfield:report_status@enda_100"; T[1].name = s; }
    T[1].nmem = 5;
ALLOC(T[1].memb, 5);
      { static char s[] = "active 1"; T[1].memb[0] = s; }
      { static char s[] = "passive 1"; T[1].memb[1] = s; }
      { static char s[] = "rejected 1"; T[1].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[1].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[1].memb[4] = s; }
    { static char s[] = "Bitfield:report_event1@enda_100"; T[2].name = s; }
    T[2].nmem = 11;
ALLOC(T[2].memb, 11);
      { static char s[] = "no_data 1"; T[2].memb[0] = s; }
      { static char s[] = "all_rejected 1"; T[2].memb[1] = s; }
      { static char s[] = "bad_practice 1"; T[2].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[2].memb[3] = s; }
      { static char s[] = "redundant 1"; T[2].memb[4] = s; }
      { static char s[] = "stalt_missing 1"; T[2].memb[5] = s; }
      { static char s[] = "qc_failed 1"; T[2].memb[6] = s; }
      { static char s[] = "overcast_ir 1"; T[2].memb[7] = s; }
      { static char s[] = "thinned 1"; T[2].memb[8] = s; }
      { static char s[] = "latlon_corrected 1"; T[2].memb[9] = s; }
      { static char s[] = "stalt_corrected 1"; T[2].memb[10] = s; }
    { static char s[] = "pk9real:obsvalue@enda_100"; T[3].name = s; }
    { static char s[] = "Bitfield:datum_anflag@enda_100"; T[4].name = s; }
    T[4].nmem = 14;
ALLOC(T[4].memb, 14);
      { static char s[] = "final 4"; T[4].memb[0] = s; }
      { static char s[] = "fg 4"; T[4].memb[1] = s; }
      { static char s[] = "depar 4"; T[4].memb[2] = s; }
      { static char s[] = "varqc 4"; T[4].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[4].memb[4] = s; }
      { static char s[] = "ups 1"; T[4].memb[5] = s; }
      { static char s[] = "uvt 1"; T[4].memb[6] = s; }
      { static char s[] = "uhu 1"; T[4].memb[7] = s; }
      { static char s[] = "ut2 1"; T[4].memb[8] = s; }
      { static char s[] = "uh2 1"; T[4].memb[9] = s; }
      { static char s[] = "uv1 1"; T[4].memb[10] = s; }
      { static char s[] = "urr 1"; T[4].memb[11] = s; }
      { static char s[] = "usn 1"; T[4].memb[12] = s; }
      { static char s[] = "usst 1"; T[4].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@enda_100"; T[5].name = s; }
    T[5].nmem = 5;
ALLOC(T[5].memb, 5);
      { static char s[] = "active 1"; T[5].memb[0] = s; }
      { static char s[] = "passive 1"; T[5].memb[1] = s; }
      { static char s[] = "rejected 1"; T[5].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[5].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[5].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@enda_100"; T[6].name = s; }
    T[6].nmem = 29;
ALLOC(T[6].memb, 29);
      { static char s[] = "vertco_missing 1"; T[6].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[6].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[6].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[6].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[6].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[6].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[6].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[6].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[6].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[6].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[6].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[6].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[6].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[6].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[6].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[6].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[6].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[6].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[6].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[6].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[6].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[6].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[6].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[6].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[6].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[6].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[6].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[6].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[6].memb[28] = s; }
    { static char s[] = "pk9real:biascorr@enda_100"; T[7].name = s; }
    { static char s[] = "pk9real:biascorr_fg@enda_100"; T[8].name = s; }
    { static char s[] = "pk9real:an_depar@enda_100"; T[9].name = s; }
    { static char s[] = "pk9real:fg_depar@enda_100"; T[10].name = s; }
    { static char s[] = "pk9real:qc_pge@enda_100"; T[11].name = s; }
    { static char s[] = "pk9real:final_obs_error@enda_100"; T[12].name = s; }
    { static char s[] = "pk9real:obs_error@enda_100"; T[13].name = s; }
    { static char s[] = "pk9real:fg_error@enda_100"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_1@enda_100"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_2@enda_100"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_3@enda_100"; T[17].name = s; }
    { static char s[] = "pk9real:skintemp_4@enda_100"; T[18].name = s; }
    { static char s[] = "pk9real:skintemp_5@enda_100"; T[19].name = s; }
    CCMA_T_enda_100_TAG = T;
    CCMA_nT_enda_100_TAG = ntag;
    CCMA_nT_enda_100_MEM = 64;
  }
  if (ntag_out) *ntag_out = CCMA_nT_enda_100_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_enda_100_MEM;
  return CCMA_T_enda_100_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_enda_100_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_enda_100_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 400;
    { static char s[] =
      ";member@enda_100;report_status@enda_100;report_event1@enda_100;"
      "obsvalue@enda_100;datum_anflag@enda_100;datum_status@enda_100;"
      "datum_event1@enda_100;biascorr@enda_100;biascorr_fg@enda_100;"
      "an_depar@enda_100;fg_depar@enda_100;qc_pge@enda_100;"
      "final_obs_error@enda_100;obs_error@enda_100;fg_error@enda_100;"
      "skintemp_1@enda_100;skintemp_2@enda_100;skintemp_3@enda_100;"
      "skintemp_4@enda_100;skintemp_5@enda_100;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 165;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2577;
    { static char s[] =
      ";member@enda_100;report_status@enda_100;report_event1@enda_100;"
      "obsvalue@enda_100;datum_anflag@enda_100;datum_status@enda_100;"
      "datum_event1@enda_100;biascorr@enda_100;biascorr_fg@enda_100;"
      "an_depar@enda_100;fg_depar@enda_100;qc_pge@enda_100;"
      "final_obs_error@enda_100;obs_error@enda_100;fg_error@enda_100;"
      "skintemp_1@enda_100;skintemp_2@enda_100;skintemp_3@enda_100;"
      "skintemp_4@enda_100;skintemp_5@enda_100;report_status.active@enda_100;"
      "report_status.passive@enda_100;report_status.rejected@enda_100;"
      "report_status.blacklisted@enda_100;report_status.use_emiskf_only@enda_100;"
      "report_event1.no_data@enda_100;report_event1.all_rejected@enda_100;"
      "report_event1.bad_practice@enda_100;report_event1.rdb_rejected@enda_100;"
      "report_event1.redundant@enda_100;report_event1.stalt_missing@enda_100;"
      "report_event1.qc_failed@enda_100;report_event1.overcast_ir@enda_100;"
      "report_event1.thinned@enda_100;report_event1.latlon_corrected@enda_100;"
      "report_event1.stalt_corrected@enda_100;datum_anflag.final@enda_100;"
      "datum_anflag.fg@enda_100;datum_anflag.depar@enda_100;"
      "datum_anflag.varqc@enda_100;datum_anflag.blacklist@enda_100;"
      "datum_anflag.ups@enda_100;datum_anflag.uvt@enda_100;"
      "datum_anflag.uhu@enda_100;datum_anflag.ut2@enda_100;"
      "datum_anflag.uh2@enda_100;datum_anflag.uv1@enda_100;"
      "datum_anflag.urr@enda_100;datum_anflag.usn@enda_100;"
      "datum_anflag.usst@enda_100;datum_status.active@enda_100;"
      "datum_status.passive@enda_100;datum_status.rejected@enda_100;"
      "datum_status.blacklisted@enda_100;datum_status.use_emiskf_only@enda_100;"
      "datum_event1.vertco_missing@enda_100;datum_event1.obsvalue_missing@enda_100;"
      "datum_event1.fg_missing@enda_100;datum_event1.rdb_rejected@enda_100;"
      "datum_event1.assim_cld_flag@enda_100;datum_event1.bad_practice@enda_100;"
      "datum_event1.vertpos_outrange@enda_100;datum_event1.fg2big@enda_100;"
      "datum_event1.depar2big@enda_100;datum_event1.obs_error2big@enda_100;"
      "datum_event1.datum_redundant@enda_100;datum_event1.level_redundant@enda_100;"
      "datum_event1.not_analysis_varno@enda_100;datum_event1.duplicate@enda_100;"
      "datum_event1.levels2many@enda_100;datum_event1.level_selection@enda_100;"
      "datum_event1.vertco_consistency@enda_100;datum_event1.vertco_type_changed@enda_100;"
      "datum_event1.combined_flagging@enda_100;datum_event1.report_rejected@enda_100;"
      "datum_event1.varqc_performed@enda_100;datum_event1.obserror_increased@enda_100;"
      "datum_event1.contam_cld_flag@enda_100;datum_event1.contam_rain_flag@enda_100;"
      "datum_event1.contam_aerosol_flag@enda_100;datum_event1.bad_emissivity@enda_100;"
      "datum_event1.model_cld_flag@enda_100;datum_event1.contam_trgas_flag@enda_100;"
      "datum_event1.land_sensitivity@enda_100;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 485;
    { static char s[] =
      ";pk1int;Bitfield;Bitfield;pk9real;Bitfield;Bitfield;"
      "Bitfield;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit4;bit4;bit4;bit4;"
      "bit4;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_enda_100_PREPTAG = T;
    CCMA_nT_enda_100_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_enda_100_PREPTAG;
  return CCMA_T_enda_100_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_enda_100(void *T);
extern int CCMA_Unpack_T_enda_100(void *T);
extern int CCMA_Sel_T_enda_100(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, enda_100);
PrePutTable(CCMA, d, double, enda_100);
PreLoadTable(CCMA, enda_100);
PreStoreTable(CCMA, enda_100);
extern void CCMA_Dim_T_enda_100(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_enda_100(void *T);
extern int CCMA_Sql_T_enda_100(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_enda_100(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_1) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_1" : appearance order#226, hierarchy rank# 250, weight = 358.000226 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_1;

#endif /* defined(IS_a_TABLE_surfbody_feedback_1) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_1)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_1_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_1_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_1_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_1_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_1_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_1_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_1_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_1_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_1_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_1"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_1"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_1"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_1"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_1"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_1"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_1"; T[6].name = s; }
    CCMA_T_surfbody_feedback_1_TAG = T;
    CCMA_nT_surfbody_feedback_1_TAG = ntag;
    CCMA_nT_surfbody_feedback_1_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_1_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_1_MEM;
  return CCMA_T_surfbody_feedback_1_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_1_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_1_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_1;datum_sfc_event@surfbody_feedback_1;"
      "an_depar@surfbody_feedback_1;fg_depar@surfbody_feedback_1;"
      "snow_depth@surfbody_feedback_1;snow_density@surfbody_feedback_1;"
      "lsm@surfbody_feedback_1;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_1;datum_sfc_event@surfbody_feedback_1;"
      "an_depar@surfbody_feedback_1;fg_depar@surfbody_feedback_1;"
      "snow_depth@surfbody_feedback_1;snow_density@surfbody_feedback_1;"
      "lsm@surfbody_feedback_1;datum_status.active@surfbody_feedback_1;"
      "datum_status.passive@surfbody_feedback_1;datum_status.rejected@surfbody_feedback_1;"
      "datum_status.blacklisted@surfbody_feedback_1;datum_status.use_emiskf_only@surfbody_feedback_1;"
      "datum_sfc_event.statid@surfbody_feedback_1;datum_sfc_event.lsmask@surfbody_feedback_1;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_1;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_1;"
      "datum_sfc_event.fg_missing@surfbody_feedback_1;datum_sfc_event.fg2big@surfbody_feedback_1;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_1;"
      "datum_sfc_event.redundant@surfbody_feedback_1;datum_sfc_event.report_rejected@surfbody_feedback_1;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_1_PREPTAG = T;
    CCMA_nT_surfbody_feedback_1_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_1_PREPTAG;
  return CCMA_T_surfbody_feedback_1_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_1(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_1(void *T);
extern int CCMA_Sel_T_surfbody_feedback_1(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_1);
PrePutTable(CCMA, d, double, surfbody_feedback_1);
PreLoadTable(CCMA, surfbody_feedback_1);
PreStoreTable(CCMA, surfbody_feedback_1);
extern void CCMA_Dim_T_surfbody_feedback_1(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_1(void *T);
extern int CCMA_Sql_T_surfbody_feedback_1(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_1(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_2) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_2" : appearance order#227, hierarchy rank# 251, weight = 358.000227 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_2;

#endif /* defined(IS_a_TABLE_surfbody_feedback_2) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_2)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_2_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_2_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_2_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_2_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_2_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_2_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_2_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_2_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_2_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_2"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_2"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_2"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_2"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_2"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_2"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_2"; T[6].name = s; }
    CCMA_T_surfbody_feedback_2_TAG = T;
    CCMA_nT_surfbody_feedback_2_TAG = ntag;
    CCMA_nT_surfbody_feedback_2_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_2_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_2_MEM;
  return CCMA_T_surfbody_feedback_2_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_2_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_2_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_2;datum_sfc_event@surfbody_feedback_2;"
      "an_depar@surfbody_feedback_2;fg_depar@surfbody_feedback_2;"
      "snow_depth@surfbody_feedback_2;snow_density@surfbody_feedback_2;"
      "lsm@surfbody_feedback_2;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_2;datum_sfc_event@surfbody_feedback_2;"
      "an_depar@surfbody_feedback_2;fg_depar@surfbody_feedback_2;"
      "snow_depth@surfbody_feedback_2;snow_density@surfbody_feedback_2;"
      "lsm@surfbody_feedback_2;datum_status.active@surfbody_feedback_2;"
      "datum_status.passive@surfbody_feedback_2;datum_status.rejected@surfbody_feedback_2;"
      "datum_status.blacklisted@surfbody_feedback_2;datum_status.use_emiskf_only@surfbody_feedback_2;"
      "datum_sfc_event.statid@surfbody_feedback_2;datum_sfc_event.lsmask@surfbody_feedback_2;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_2;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_2;"
      "datum_sfc_event.fg_missing@surfbody_feedback_2;datum_sfc_event.fg2big@surfbody_feedback_2;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_2;"
      "datum_sfc_event.redundant@surfbody_feedback_2;datum_sfc_event.report_rejected@surfbody_feedback_2;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_2_PREPTAG = T;
    CCMA_nT_surfbody_feedback_2_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_2_PREPTAG;
  return CCMA_T_surfbody_feedback_2_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_2(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_2(void *T);
extern int CCMA_Sel_T_surfbody_feedback_2(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_2);
PrePutTable(CCMA, d, double, surfbody_feedback_2);
PreLoadTable(CCMA, surfbody_feedback_2);
PreStoreTable(CCMA, surfbody_feedback_2);
extern void CCMA_Dim_T_surfbody_feedback_2(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_2(void *T);
extern int CCMA_Sql_T_surfbody_feedback_2(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_2(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_3) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_3" : appearance order#228, hierarchy rank# 252, weight = 358.000228 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_3;

#endif /* defined(IS_a_TABLE_surfbody_feedback_3) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_3)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_3_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_3_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_3_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_3_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_3_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_3_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_3_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_3_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_3_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_3"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_3"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_3"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_3"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_3"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_3"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_3"; T[6].name = s; }
    CCMA_T_surfbody_feedback_3_TAG = T;
    CCMA_nT_surfbody_feedback_3_TAG = ntag;
    CCMA_nT_surfbody_feedback_3_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_3_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_3_MEM;
  return CCMA_T_surfbody_feedback_3_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_3_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_3_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_3;datum_sfc_event@surfbody_feedback_3;"
      "an_depar@surfbody_feedback_3;fg_depar@surfbody_feedback_3;"
      "snow_depth@surfbody_feedback_3;snow_density@surfbody_feedback_3;"
      "lsm@surfbody_feedback_3;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_3;datum_sfc_event@surfbody_feedback_3;"
      "an_depar@surfbody_feedback_3;fg_depar@surfbody_feedback_3;"
      "snow_depth@surfbody_feedback_3;snow_density@surfbody_feedback_3;"
      "lsm@surfbody_feedback_3;datum_status.active@surfbody_feedback_3;"
      "datum_status.passive@surfbody_feedback_3;datum_status.rejected@surfbody_feedback_3;"
      "datum_status.blacklisted@surfbody_feedback_3;datum_status.use_emiskf_only@surfbody_feedback_3;"
      "datum_sfc_event.statid@surfbody_feedback_3;datum_sfc_event.lsmask@surfbody_feedback_3;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_3;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_3;"
      "datum_sfc_event.fg_missing@surfbody_feedback_3;datum_sfc_event.fg2big@surfbody_feedback_3;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_3;"
      "datum_sfc_event.redundant@surfbody_feedback_3;datum_sfc_event.report_rejected@surfbody_feedback_3;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_3_PREPTAG = T;
    CCMA_nT_surfbody_feedback_3_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_3_PREPTAG;
  return CCMA_T_surfbody_feedback_3_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_3(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_3(void *T);
extern int CCMA_Sel_T_surfbody_feedback_3(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_3);
PrePutTable(CCMA, d, double, surfbody_feedback_3);
PreLoadTable(CCMA, surfbody_feedback_3);
PreStoreTable(CCMA, surfbody_feedback_3);
extern void CCMA_Dim_T_surfbody_feedback_3(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_3(void *T);
extern int CCMA_Sql_T_surfbody_feedback_3(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_3(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_4) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_4" : appearance order#229, hierarchy rank# 253, weight = 358.000229 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_4;

#endif /* defined(IS_a_TABLE_surfbody_feedback_4) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_4)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_4_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_4_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_4_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_4_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_4_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_4_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_4_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_4_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_4_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_4"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_4"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_4"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_4"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_4"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_4"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_4"; T[6].name = s; }
    CCMA_T_surfbody_feedback_4_TAG = T;
    CCMA_nT_surfbody_feedback_4_TAG = ntag;
    CCMA_nT_surfbody_feedback_4_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_4_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_4_MEM;
  return CCMA_T_surfbody_feedback_4_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_4_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_4_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_4;datum_sfc_event@surfbody_feedback_4;"
      "an_depar@surfbody_feedback_4;fg_depar@surfbody_feedback_4;"
      "snow_depth@surfbody_feedback_4;snow_density@surfbody_feedback_4;"
      "lsm@surfbody_feedback_4;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_4;datum_sfc_event@surfbody_feedback_4;"
      "an_depar@surfbody_feedback_4;fg_depar@surfbody_feedback_4;"
      "snow_depth@surfbody_feedback_4;snow_density@surfbody_feedback_4;"
      "lsm@surfbody_feedback_4;datum_status.active@surfbody_feedback_4;"
      "datum_status.passive@surfbody_feedback_4;datum_status.rejected@surfbody_feedback_4;"
      "datum_status.blacklisted@surfbody_feedback_4;datum_status.use_emiskf_only@surfbody_feedback_4;"
      "datum_sfc_event.statid@surfbody_feedback_4;datum_sfc_event.lsmask@surfbody_feedback_4;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_4;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_4;"
      "datum_sfc_event.fg_missing@surfbody_feedback_4;datum_sfc_event.fg2big@surfbody_feedback_4;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_4;"
      "datum_sfc_event.redundant@surfbody_feedback_4;datum_sfc_event.report_rejected@surfbody_feedback_4;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_4_PREPTAG = T;
    CCMA_nT_surfbody_feedback_4_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_4_PREPTAG;
  return CCMA_T_surfbody_feedback_4_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_4(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_4(void *T);
extern int CCMA_Sel_T_surfbody_feedback_4(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_4);
PrePutTable(CCMA, d, double, surfbody_feedback_4);
PreLoadTable(CCMA, surfbody_feedback_4);
PreStoreTable(CCMA, surfbody_feedback_4);
extern void CCMA_Dim_T_surfbody_feedback_4(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_4(void *T);
extern int CCMA_Sql_T_surfbody_feedback_4(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_4(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_5) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_5" : appearance order#230, hierarchy rank# 254, weight = 358.000230 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_5;

#endif /* defined(IS_a_TABLE_surfbody_feedback_5) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_5)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_5_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_5_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_5_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_5_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_5_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_5_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_5_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_5_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_5_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_5"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_5"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_5"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_5"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_5"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_5"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_5"; T[6].name = s; }
    CCMA_T_surfbody_feedback_5_TAG = T;
    CCMA_nT_surfbody_feedback_5_TAG = ntag;
    CCMA_nT_surfbody_feedback_5_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_5_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_5_MEM;
  return CCMA_T_surfbody_feedback_5_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_5_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_5_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_5;datum_sfc_event@surfbody_feedback_5;"
      "an_depar@surfbody_feedback_5;fg_depar@surfbody_feedback_5;"
      "snow_depth@surfbody_feedback_5;snow_density@surfbody_feedback_5;"
      "lsm@surfbody_feedback_5;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_5;datum_sfc_event@surfbody_feedback_5;"
      "an_depar@surfbody_feedback_5;fg_depar@surfbody_feedback_5;"
      "snow_depth@surfbody_feedback_5;snow_density@surfbody_feedback_5;"
      "lsm@surfbody_feedback_5;datum_status.active@surfbody_feedback_5;"
      "datum_status.passive@surfbody_feedback_5;datum_status.rejected@surfbody_feedback_5;"
      "datum_status.blacklisted@surfbody_feedback_5;datum_status.use_emiskf_only@surfbody_feedback_5;"
      "datum_sfc_event.statid@surfbody_feedback_5;datum_sfc_event.lsmask@surfbody_feedback_5;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_5;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_5;"
      "datum_sfc_event.fg_missing@surfbody_feedback_5;datum_sfc_event.fg2big@surfbody_feedback_5;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_5;"
      "datum_sfc_event.redundant@surfbody_feedback_5;datum_sfc_event.report_rejected@surfbody_feedback_5;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_5_PREPTAG = T;
    CCMA_nT_surfbody_feedback_5_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_5_PREPTAG;
  return CCMA_T_surfbody_feedback_5_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_5(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_5(void *T);
extern int CCMA_Sel_T_surfbody_feedback_5(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_5);
PrePutTable(CCMA, d, double, surfbody_feedback_5);
PreLoadTable(CCMA, surfbody_feedback_5);
PreStoreTable(CCMA, surfbody_feedback_5);
extern void CCMA_Dim_T_surfbody_feedback_5(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_5(void *T);
extern int CCMA_Sql_T_surfbody_feedback_5(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_5(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_6) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_6" : appearance order#231, hierarchy rank# 255, weight = 358.000231 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_6;

#endif /* defined(IS_a_TABLE_surfbody_feedback_6) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_6)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_6_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_6_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_6_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_6_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_6_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_6_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_6_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_6_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_6_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_6"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_6"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_6"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_6"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_6"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_6"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_6"; T[6].name = s; }
    CCMA_T_surfbody_feedback_6_TAG = T;
    CCMA_nT_surfbody_feedback_6_TAG = ntag;
    CCMA_nT_surfbody_feedback_6_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_6_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_6_MEM;
  return CCMA_T_surfbody_feedback_6_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_6_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_6_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_6;datum_sfc_event@surfbody_feedback_6;"
      "an_depar@surfbody_feedback_6;fg_depar@surfbody_feedback_6;"
      "snow_depth@surfbody_feedback_6;snow_density@surfbody_feedback_6;"
      "lsm@surfbody_feedback_6;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_6;datum_sfc_event@surfbody_feedback_6;"
      "an_depar@surfbody_feedback_6;fg_depar@surfbody_feedback_6;"
      "snow_depth@surfbody_feedback_6;snow_density@surfbody_feedback_6;"
      "lsm@surfbody_feedback_6;datum_status.active@surfbody_feedback_6;"
      "datum_status.passive@surfbody_feedback_6;datum_status.rejected@surfbody_feedback_6;"
      "datum_status.blacklisted@surfbody_feedback_6;datum_status.use_emiskf_only@surfbody_feedback_6;"
      "datum_sfc_event.statid@surfbody_feedback_6;datum_sfc_event.lsmask@surfbody_feedback_6;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_6;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_6;"
      "datum_sfc_event.fg_missing@surfbody_feedback_6;datum_sfc_event.fg2big@surfbody_feedback_6;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_6;"
      "datum_sfc_event.redundant@surfbody_feedback_6;datum_sfc_event.report_rejected@surfbody_feedback_6;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_6_PREPTAG = T;
    CCMA_nT_surfbody_feedback_6_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_6_PREPTAG;
  return CCMA_T_surfbody_feedback_6_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_6(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_6(void *T);
extern int CCMA_Sel_T_surfbody_feedback_6(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_6);
PrePutTable(CCMA, d, double, surfbody_feedback_6);
PreLoadTable(CCMA, surfbody_feedback_6);
PreStoreTable(CCMA, surfbody_feedback_6);
extern void CCMA_Dim_T_surfbody_feedback_6(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_6(void *T);
extern int CCMA_Sql_T_surfbody_feedback_6(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_6(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_7) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_7" : appearance order#232, hierarchy rank# 256, weight = 358.000232 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_7;

#endif /* defined(IS_a_TABLE_surfbody_feedback_7) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_7)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_7_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_7_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_7_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_7_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_7_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_7_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_7_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_7_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_7_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_7"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_7"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_7"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_7"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_7"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_7"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_7"; T[6].name = s; }
    CCMA_T_surfbody_feedback_7_TAG = T;
    CCMA_nT_surfbody_feedback_7_TAG = ntag;
    CCMA_nT_surfbody_feedback_7_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_7_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_7_MEM;
  return CCMA_T_surfbody_feedback_7_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_7_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_7_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_7;datum_sfc_event@surfbody_feedback_7;"
      "an_depar@surfbody_feedback_7;fg_depar@surfbody_feedback_7;"
      "snow_depth@surfbody_feedback_7;snow_density@surfbody_feedback_7;"
      "lsm@surfbody_feedback_7;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_7;datum_sfc_event@surfbody_feedback_7;"
      "an_depar@surfbody_feedback_7;fg_depar@surfbody_feedback_7;"
      "snow_depth@surfbody_feedback_7;snow_density@surfbody_feedback_7;"
      "lsm@surfbody_feedback_7;datum_status.active@surfbody_feedback_7;"
      "datum_status.passive@surfbody_feedback_7;datum_status.rejected@surfbody_feedback_7;"
      "datum_status.blacklisted@surfbody_feedback_7;datum_status.use_emiskf_only@surfbody_feedback_7;"
      "datum_sfc_event.statid@surfbody_feedback_7;datum_sfc_event.lsmask@surfbody_feedback_7;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_7;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_7;"
      "datum_sfc_event.fg_missing@surfbody_feedback_7;datum_sfc_event.fg2big@surfbody_feedback_7;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_7;"
      "datum_sfc_event.redundant@surfbody_feedback_7;datum_sfc_event.report_rejected@surfbody_feedback_7;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_7_PREPTAG = T;
    CCMA_nT_surfbody_feedback_7_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_7_PREPTAG;
  return CCMA_T_surfbody_feedback_7_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_7(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_7(void *T);
extern int CCMA_Sel_T_surfbody_feedback_7(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_7);
PrePutTable(CCMA, d, double, surfbody_feedback_7);
PreLoadTable(CCMA, surfbody_feedback_7);
PreStoreTable(CCMA, surfbody_feedback_7);
extern void CCMA_Dim_T_surfbody_feedback_7(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_7(void *T);
extern int CCMA_Sql_T_surfbody_feedback_7(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_7(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_8) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_8" : appearance order#233, hierarchy rank# 257, weight = 358.000233 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_8;

#endif /* defined(IS_a_TABLE_surfbody_feedback_8) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_8)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_8_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_8_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_8_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_8_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_8_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_8_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_8_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_8_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_8_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_8"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_8"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_8"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_8"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_8"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_8"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_8"; T[6].name = s; }
    CCMA_T_surfbody_feedback_8_TAG = T;
    CCMA_nT_surfbody_feedback_8_TAG = ntag;
    CCMA_nT_surfbody_feedback_8_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_8_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_8_MEM;
  return CCMA_T_surfbody_feedback_8_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_8_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_8_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_8;datum_sfc_event@surfbody_feedback_8;"
      "an_depar@surfbody_feedback_8;fg_depar@surfbody_feedback_8;"
      "snow_depth@surfbody_feedback_8;snow_density@surfbody_feedback_8;"
      "lsm@surfbody_feedback_8;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_8;datum_sfc_event@surfbody_feedback_8;"
      "an_depar@surfbody_feedback_8;fg_depar@surfbody_feedback_8;"
      "snow_depth@surfbody_feedback_8;snow_density@surfbody_feedback_8;"
      "lsm@surfbody_feedback_8;datum_status.active@surfbody_feedback_8;"
      "datum_status.passive@surfbody_feedback_8;datum_status.rejected@surfbody_feedback_8;"
      "datum_status.blacklisted@surfbody_feedback_8;datum_status.use_emiskf_only@surfbody_feedback_8;"
      "datum_sfc_event.statid@surfbody_feedback_8;datum_sfc_event.lsmask@surfbody_feedback_8;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_8;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_8;"
      "datum_sfc_event.fg_missing@surfbody_feedback_8;datum_sfc_event.fg2big@surfbody_feedback_8;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_8;"
      "datum_sfc_event.redundant@surfbody_feedback_8;datum_sfc_event.report_rejected@surfbody_feedback_8;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_8_PREPTAG = T;
    CCMA_nT_surfbody_feedback_8_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_8_PREPTAG;
  return CCMA_T_surfbody_feedback_8_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_8(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_8(void *T);
extern int CCMA_Sel_T_surfbody_feedback_8(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_8);
PrePutTable(CCMA, d, double, surfbody_feedback_8);
PreLoadTable(CCMA, surfbody_feedback_8);
PreStoreTable(CCMA, surfbody_feedback_8);
extern void CCMA_Dim_T_surfbody_feedback_8(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_8(void *T);
extern int CCMA_Sql_T_surfbody_feedback_8(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_8(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_9) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_9" : appearance order#234, hierarchy rank# 258, weight = 358.000234 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_9;

#endif /* defined(IS_a_TABLE_surfbody_feedback_9) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_9)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_9_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_9_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_9_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_9_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_9_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_9_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_9_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_9_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_9_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_9"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_9"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_9"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_9"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_9"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_9"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_9"; T[6].name = s; }
    CCMA_T_surfbody_feedback_9_TAG = T;
    CCMA_nT_surfbody_feedback_9_TAG = ntag;
    CCMA_nT_surfbody_feedback_9_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_9_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_9_MEM;
  return CCMA_T_surfbody_feedback_9_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_9_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_9_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 216;
    { static char s[] =
      ";datum_status@surfbody_feedback_9;datum_sfc_event@surfbody_feedback_9;"
      "an_depar@surfbody_feedback_9;fg_depar@surfbody_feedback_9;"
      "snow_depth@surfbody_feedback_9;snow_density@surfbody_feedback_9;"
      "lsm@surfbody_feedback_9;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 865;
    { static char s[] =
      ";datum_status@surfbody_feedback_9;datum_sfc_event@surfbody_feedback_9;"
      "an_depar@surfbody_feedback_9;fg_depar@surfbody_feedback_9;"
      "snow_depth@surfbody_feedback_9;snow_density@surfbody_feedback_9;"
      "lsm@surfbody_feedback_9;datum_status.active@surfbody_feedback_9;"
      "datum_status.passive@surfbody_feedback_9;datum_status.rejected@surfbody_feedback_9;"
      "datum_status.blacklisted@surfbody_feedback_9;datum_status.use_emiskf_only@surfbody_feedback_9;"
      "datum_sfc_event.statid@surfbody_feedback_9;datum_sfc_event.lsmask@surfbody_feedback_9;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_9;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_9;"
      "datum_sfc_event.fg_missing@surfbody_feedback_9;datum_sfc_event.fg2big@surfbody_feedback_9;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_9;"
      "datum_sfc_event.redundant@surfbody_feedback_9;datum_sfc_event.report_rejected@surfbody_feedback_9;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_9_PREPTAG = T;
    CCMA_nT_surfbody_feedback_9_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_9_PREPTAG;
  return CCMA_T_surfbody_feedback_9_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_9(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_9(void *T);
extern int CCMA_Sel_T_surfbody_feedback_9(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_9);
PrePutTable(CCMA, d, double, surfbody_feedback_9);
PreLoadTable(CCMA, surfbody_feedback_9);
PreStoreTable(CCMA, surfbody_feedback_9);
extern void CCMA_Dim_T_surfbody_feedback_9(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_9(void *T);
extern int CCMA_Sql_T_surfbody_feedback_9(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_9(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_10) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_10" : appearance order#235, hierarchy rank# 259, weight = 358.000235 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_10;

#endif /* defined(IS_a_TABLE_surfbody_feedback_10) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_10)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_10_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_10_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_10_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_10_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_10_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_10_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_10_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_10_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_10_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_10"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_10"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_10"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_10"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_10"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_10"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_10"; T[6].name = s; }
    CCMA_T_surfbody_feedback_10_TAG = T;
    CCMA_nT_surfbody_feedback_10_TAG = ntag;
    CCMA_nT_surfbody_feedback_10_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_10_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_10_MEM;
  return CCMA_T_surfbody_feedback_10_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_10_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_10_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_10;datum_sfc_event@surfbody_feedback_10;"
      "an_depar@surfbody_feedback_10;fg_depar@surfbody_feedback_10;"
      "snow_depth@surfbody_feedback_10;snow_density@surfbody_feedback_10;"
      "lsm@surfbody_feedback_10;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_10;datum_sfc_event@surfbody_feedback_10;"
      "an_depar@surfbody_feedback_10;fg_depar@surfbody_feedback_10;"
      "snow_depth@surfbody_feedback_10;snow_density@surfbody_feedback_10;"
      "lsm@surfbody_feedback_10;datum_status.active@surfbody_feedback_10;"
      "datum_status.passive@surfbody_feedback_10;datum_status.rejected@surfbody_feedback_10;"
      "datum_status.blacklisted@surfbody_feedback_10;datum_status.use_emiskf_only@surfbody_feedback_10;"
      "datum_sfc_event.statid@surfbody_feedback_10;datum_sfc_event.lsmask@surfbody_feedback_10;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_10;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_10;"
      "datum_sfc_event.fg_missing@surfbody_feedback_10;datum_sfc_event.fg2big@surfbody_feedback_10;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_10;"
      "datum_sfc_event.redundant@surfbody_feedback_10;datum_sfc_event.report_rejected@surfbody_feedback_10;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_10_PREPTAG = T;
    CCMA_nT_surfbody_feedback_10_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_10_PREPTAG;
  return CCMA_T_surfbody_feedback_10_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_10(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_10(void *T);
extern int CCMA_Sel_T_surfbody_feedback_10(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_10);
PrePutTable(CCMA, d, double, surfbody_feedback_10);
PreLoadTable(CCMA, surfbody_feedback_10);
PreStoreTable(CCMA, surfbody_feedback_10);
extern void CCMA_Dim_T_surfbody_feedback_10(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_10(void *T);
extern int CCMA_Sql_T_surfbody_feedback_10(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_10(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_11) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_11" : appearance order#236, hierarchy rank# 260, weight = 358.000236 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_11;

#endif /* defined(IS_a_TABLE_surfbody_feedback_11) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_11)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_11_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_11_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_11_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_11_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_11_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_11_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_11_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_11_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_11_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_11"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_11"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_11"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_11"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_11"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_11"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_11"; T[6].name = s; }
    CCMA_T_surfbody_feedback_11_TAG = T;
    CCMA_nT_surfbody_feedback_11_TAG = ntag;
    CCMA_nT_surfbody_feedback_11_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_11_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_11_MEM;
  return CCMA_T_surfbody_feedback_11_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_11_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_11_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_11;datum_sfc_event@surfbody_feedback_11;"
      "an_depar@surfbody_feedback_11;fg_depar@surfbody_feedback_11;"
      "snow_depth@surfbody_feedback_11;snow_density@surfbody_feedback_11;"
      "lsm@surfbody_feedback_11;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_11;datum_sfc_event@surfbody_feedback_11;"
      "an_depar@surfbody_feedback_11;fg_depar@surfbody_feedback_11;"
      "snow_depth@surfbody_feedback_11;snow_density@surfbody_feedback_11;"
      "lsm@surfbody_feedback_11;datum_status.active@surfbody_feedback_11;"
      "datum_status.passive@surfbody_feedback_11;datum_status.rejected@surfbody_feedback_11;"
      "datum_status.blacklisted@surfbody_feedback_11;datum_status.use_emiskf_only@surfbody_feedback_11;"
      "datum_sfc_event.statid@surfbody_feedback_11;datum_sfc_event.lsmask@surfbody_feedback_11;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_11;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_11;"
      "datum_sfc_event.fg_missing@surfbody_feedback_11;datum_sfc_event.fg2big@surfbody_feedback_11;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_11;"
      "datum_sfc_event.redundant@surfbody_feedback_11;datum_sfc_event.report_rejected@surfbody_feedback_11;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_11_PREPTAG = T;
    CCMA_nT_surfbody_feedback_11_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_11_PREPTAG;
  return CCMA_T_surfbody_feedback_11_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_11(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_11(void *T);
extern int CCMA_Sel_T_surfbody_feedback_11(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_11);
PrePutTable(CCMA, d, double, surfbody_feedback_11);
PreLoadTable(CCMA, surfbody_feedback_11);
PreStoreTable(CCMA, surfbody_feedback_11);
extern void CCMA_Dim_T_surfbody_feedback_11(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_11(void *T);
extern int CCMA_Sql_T_surfbody_feedback_11(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_11(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_12) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_12" : appearance order#237, hierarchy rank# 261, weight = 358.000237 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_12;

#endif /* defined(IS_a_TABLE_surfbody_feedback_12) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_12)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_12_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_12_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_12_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_12_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_12_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_12_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_12_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_12_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_12_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_12"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_12"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_12"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_12"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_12"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_12"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_12"; T[6].name = s; }
    CCMA_T_surfbody_feedback_12_TAG = T;
    CCMA_nT_surfbody_feedback_12_TAG = ntag;
    CCMA_nT_surfbody_feedback_12_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_12_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_12_MEM;
  return CCMA_T_surfbody_feedback_12_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_12_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_12_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_12;datum_sfc_event@surfbody_feedback_12;"
      "an_depar@surfbody_feedback_12;fg_depar@surfbody_feedback_12;"
      "snow_depth@surfbody_feedback_12;snow_density@surfbody_feedback_12;"
      "lsm@surfbody_feedback_12;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_12;datum_sfc_event@surfbody_feedback_12;"
      "an_depar@surfbody_feedback_12;fg_depar@surfbody_feedback_12;"
      "snow_depth@surfbody_feedback_12;snow_density@surfbody_feedback_12;"
      "lsm@surfbody_feedback_12;datum_status.active@surfbody_feedback_12;"
      "datum_status.passive@surfbody_feedback_12;datum_status.rejected@surfbody_feedback_12;"
      "datum_status.blacklisted@surfbody_feedback_12;datum_status.use_emiskf_only@surfbody_feedback_12;"
      "datum_sfc_event.statid@surfbody_feedback_12;datum_sfc_event.lsmask@surfbody_feedback_12;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_12;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_12;"
      "datum_sfc_event.fg_missing@surfbody_feedback_12;datum_sfc_event.fg2big@surfbody_feedback_12;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_12;"
      "datum_sfc_event.redundant@surfbody_feedback_12;datum_sfc_event.report_rejected@surfbody_feedback_12;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_12_PREPTAG = T;
    CCMA_nT_surfbody_feedback_12_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_12_PREPTAG;
  return CCMA_T_surfbody_feedback_12_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_12(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_12(void *T);
extern int CCMA_Sel_T_surfbody_feedback_12(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_12);
PrePutTable(CCMA, d, double, surfbody_feedback_12);
PreLoadTable(CCMA, surfbody_feedback_12);
PreStoreTable(CCMA, surfbody_feedback_12);
extern void CCMA_Dim_T_surfbody_feedback_12(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_12(void *T);
extern int CCMA_Sql_T_surfbody_feedback_12(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_12(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_13) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_13" : appearance order#238, hierarchy rank# 262, weight = 358.000238 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_13;

#endif /* defined(IS_a_TABLE_surfbody_feedback_13) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_13)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_13_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_13_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_13_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_13_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_13_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_13_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_13_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_13_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_13_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_13"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_13"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_13"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_13"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_13"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_13"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_13"; T[6].name = s; }
    CCMA_T_surfbody_feedback_13_TAG = T;
    CCMA_nT_surfbody_feedback_13_TAG = ntag;
    CCMA_nT_surfbody_feedback_13_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_13_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_13_MEM;
  return CCMA_T_surfbody_feedback_13_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_13_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_13_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_13;datum_sfc_event@surfbody_feedback_13;"
      "an_depar@surfbody_feedback_13;fg_depar@surfbody_feedback_13;"
      "snow_depth@surfbody_feedback_13;snow_density@surfbody_feedback_13;"
      "lsm@surfbody_feedback_13;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_13;datum_sfc_event@surfbody_feedback_13;"
      "an_depar@surfbody_feedback_13;fg_depar@surfbody_feedback_13;"
      "snow_depth@surfbody_feedback_13;snow_density@surfbody_feedback_13;"
      "lsm@surfbody_feedback_13;datum_status.active@surfbody_feedback_13;"
      "datum_status.passive@surfbody_feedback_13;datum_status.rejected@surfbody_feedback_13;"
      "datum_status.blacklisted@surfbody_feedback_13;datum_status.use_emiskf_only@surfbody_feedback_13;"
      "datum_sfc_event.statid@surfbody_feedback_13;datum_sfc_event.lsmask@surfbody_feedback_13;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_13;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_13;"
      "datum_sfc_event.fg_missing@surfbody_feedback_13;datum_sfc_event.fg2big@surfbody_feedback_13;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_13;"
      "datum_sfc_event.redundant@surfbody_feedback_13;datum_sfc_event.report_rejected@surfbody_feedback_13;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_13_PREPTAG = T;
    CCMA_nT_surfbody_feedback_13_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_13_PREPTAG;
  return CCMA_T_surfbody_feedback_13_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_13(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_13(void *T);
extern int CCMA_Sel_T_surfbody_feedback_13(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_13);
PrePutTable(CCMA, d, double, surfbody_feedback_13);
PreLoadTable(CCMA, surfbody_feedback_13);
PreStoreTable(CCMA, surfbody_feedback_13);
extern void CCMA_Dim_T_surfbody_feedback_13(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_13(void *T);
extern int CCMA_Sql_T_surfbody_feedback_13(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_13(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_14) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_14" : appearance order#239, hierarchy rank# 263, weight = 358.000239 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_14;

#endif /* defined(IS_a_TABLE_surfbody_feedback_14) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_14)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_14_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_14_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_14_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_14_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_14_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_14_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_14_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_14_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_14_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_14"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_14"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_14"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_14"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_14"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_14"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_14"; T[6].name = s; }
    CCMA_T_surfbody_feedback_14_TAG = T;
    CCMA_nT_surfbody_feedback_14_TAG = ntag;
    CCMA_nT_surfbody_feedback_14_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_14_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_14_MEM;
  return CCMA_T_surfbody_feedback_14_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_14_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_14_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_14;datum_sfc_event@surfbody_feedback_14;"
      "an_depar@surfbody_feedback_14;fg_depar@surfbody_feedback_14;"
      "snow_depth@surfbody_feedback_14;snow_density@surfbody_feedback_14;"
      "lsm@surfbody_feedback_14;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_14;datum_sfc_event@surfbody_feedback_14;"
      "an_depar@surfbody_feedback_14;fg_depar@surfbody_feedback_14;"
      "snow_depth@surfbody_feedback_14;snow_density@surfbody_feedback_14;"
      "lsm@surfbody_feedback_14;datum_status.active@surfbody_feedback_14;"
      "datum_status.passive@surfbody_feedback_14;datum_status.rejected@surfbody_feedback_14;"
      "datum_status.blacklisted@surfbody_feedback_14;datum_status.use_emiskf_only@surfbody_feedback_14;"
      "datum_sfc_event.statid@surfbody_feedback_14;datum_sfc_event.lsmask@surfbody_feedback_14;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_14;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_14;"
      "datum_sfc_event.fg_missing@surfbody_feedback_14;datum_sfc_event.fg2big@surfbody_feedback_14;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_14;"
      "datum_sfc_event.redundant@surfbody_feedback_14;datum_sfc_event.report_rejected@surfbody_feedback_14;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_14_PREPTAG = T;
    CCMA_nT_surfbody_feedback_14_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_14_PREPTAG;
  return CCMA_T_surfbody_feedback_14_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_14(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_14(void *T);
extern int CCMA_Sel_T_surfbody_feedback_14(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_14);
PrePutTable(CCMA, d, double, surfbody_feedback_14);
PreLoadTable(CCMA, surfbody_feedback_14);
PreStoreTable(CCMA, surfbody_feedback_14);
extern void CCMA_Dim_T_surfbody_feedback_14(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_14(void *T);
extern int CCMA_Sql_T_surfbody_feedback_14(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_14(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_15) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_15" : appearance order#240, hierarchy rank# 264, weight = 358.000240 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_15;

#endif /* defined(IS_a_TABLE_surfbody_feedback_15) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_15)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_15_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_15_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_15_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_15_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_15_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_15_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_15_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_15_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_15_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_15"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_15"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_15"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_15"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_15"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_15"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_15"; T[6].name = s; }
    CCMA_T_surfbody_feedback_15_TAG = T;
    CCMA_nT_surfbody_feedback_15_TAG = ntag;
    CCMA_nT_surfbody_feedback_15_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_15_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_15_MEM;
  return CCMA_T_surfbody_feedback_15_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_15_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_15_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_15;datum_sfc_event@surfbody_feedback_15;"
      "an_depar@surfbody_feedback_15;fg_depar@surfbody_feedback_15;"
      "snow_depth@surfbody_feedback_15;snow_density@surfbody_feedback_15;"
      "lsm@surfbody_feedback_15;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_15;datum_sfc_event@surfbody_feedback_15;"
      "an_depar@surfbody_feedback_15;fg_depar@surfbody_feedback_15;"
      "snow_depth@surfbody_feedback_15;snow_density@surfbody_feedback_15;"
      "lsm@surfbody_feedback_15;datum_status.active@surfbody_feedback_15;"
      "datum_status.passive@surfbody_feedback_15;datum_status.rejected@surfbody_feedback_15;"
      "datum_status.blacklisted@surfbody_feedback_15;datum_status.use_emiskf_only@surfbody_feedback_15;"
      "datum_sfc_event.statid@surfbody_feedback_15;datum_sfc_event.lsmask@surfbody_feedback_15;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_15;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_15;"
      "datum_sfc_event.fg_missing@surfbody_feedback_15;datum_sfc_event.fg2big@surfbody_feedback_15;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_15;"
      "datum_sfc_event.redundant@surfbody_feedback_15;datum_sfc_event.report_rejected@surfbody_feedback_15;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_15_PREPTAG = T;
    CCMA_nT_surfbody_feedback_15_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_15_PREPTAG;
  return CCMA_T_surfbody_feedback_15_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_15(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_15(void *T);
extern int CCMA_Sel_T_surfbody_feedback_15(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_15);
PrePutTable(CCMA, d, double, surfbody_feedback_15);
PreLoadTable(CCMA, surfbody_feedback_15);
PreStoreTable(CCMA, surfbody_feedback_15);
extern void CCMA_Dim_T_surfbody_feedback_15(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_15(void *T);
extern int CCMA_Sql_T_surfbody_feedback_15(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_15(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_16) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_16" : appearance order#241, hierarchy rank# 265, weight = 358.000241 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_16;

#endif /* defined(IS_a_TABLE_surfbody_feedback_16) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_16)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_16_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_16_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_16_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_16_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_16_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_16_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_16_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_16_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_16_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_16"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_16"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_16"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_16"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_16"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_16"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_16"; T[6].name = s; }
    CCMA_T_surfbody_feedback_16_TAG = T;
    CCMA_nT_surfbody_feedback_16_TAG = ntag;
    CCMA_nT_surfbody_feedback_16_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_16_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_16_MEM;
  return CCMA_T_surfbody_feedback_16_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_16_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_16_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_16;datum_sfc_event@surfbody_feedback_16;"
      "an_depar@surfbody_feedback_16;fg_depar@surfbody_feedback_16;"
      "snow_depth@surfbody_feedback_16;snow_density@surfbody_feedback_16;"
      "lsm@surfbody_feedback_16;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_16;datum_sfc_event@surfbody_feedback_16;"
      "an_depar@surfbody_feedback_16;fg_depar@surfbody_feedback_16;"
      "snow_depth@surfbody_feedback_16;snow_density@surfbody_feedback_16;"
      "lsm@surfbody_feedback_16;datum_status.active@surfbody_feedback_16;"
      "datum_status.passive@surfbody_feedback_16;datum_status.rejected@surfbody_feedback_16;"
      "datum_status.blacklisted@surfbody_feedback_16;datum_status.use_emiskf_only@surfbody_feedback_16;"
      "datum_sfc_event.statid@surfbody_feedback_16;datum_sfc_event.lsmask@surfbody_feedback_16;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_16;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_16;"
      "datum_sfc_event.fg_missing@surfbody_feedback_16;datum_sfc_event.fg2big@surfbody_feedback_16;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_16;"
      "datum_sfc_event.redundant@surfbody_feedback_16;datum_sfc_event.report_rejected@surfbody_feedback_16;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_16_PREPTAG = T;
    CCMA_nT_surfbody_feedback_16_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_16_PREPTAG;
  return CCMA_T_surfbody_feedback_16_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_16(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_16(void *T);
extern int CCMA_Sel_T_surfbody_feedback_16(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_16);
PrePutTable(CCMA, d, double, surfbody_feedback_16);
PreLoadTable(CCMA, surfbody_feedback_16);
PreStoreTable(CCMA, surfbody_feedback_16);
extern void CCMA_Dim_T_surfbody_feedback_16(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_16(void *T);
extern int CCMA_Sql_T_surfbody_feedback_16(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_16(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_17) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_17" : appearance order#242, hierarchy rank# 266, weight = 358.000242 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_17;

#endif /* defined(IS_a_TABLE_surfbody_feedback_17) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_17)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_17_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_17_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_17_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_17_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_17_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_17_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_17_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_17_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_17_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_17"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_17"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_17"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_17"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_17"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_17"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_17"; T[6].name = s; }
    CCMA_T_surfbody_feedback_17_TAG = T;
    CCMA_nT_surfbody_feedback_17_TAG = ntag;
    CCMA_nT_surfbody_feedback_17_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_17_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_17_MEM;
  return CCMA_T_surfbody_feedback_17_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_17_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_17_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_17;datum_sfc_event@surfbody_feedback_17;"
      "an_depar@surfbody_feedback_17;fg_depar@surfbody_feedback_17;"
      "snow_depth@surfbody_feedback_17;snow_density@surfbody_feedback_17;"
      "lsm@surfbody_feedback_17;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_17;datum_sfc_event@surfbody_feedback_17;"
      "an_depar@surfbody_feedback_17;fg_depar@surfbody_feedback_17;"
      "snow_depth@surfbody_feedback_17;snow_density@surfbody_feedback_17;"
      "lsm@surfbody_feedback_17;datum_status.active@surfbody_feedback_17;"
      "datum_status.passive@surfbody_feedback_17;datum_status.rejected@surfbody_feedback_17;"
      "datum_status.blacklisted@surfbody_feedback_17;datum_status.use_emiskf_only@surfbody_feedback_17;"
      "datum_sfc_event.statid@surfbody_feedback_17;datum_sfc_event.lsmask@surfbody_feedback_17;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_17;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_17;"
      "datum_sfc_event.fg_missing@surfbody_feedback_17;datum_sfc_event.fg2big@surfbody_feedback_17;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_17;"
      "datum_sfc_event.redundant@surfbody_feedback_17;datum_sfc_event.report_rejected@surfbody_feedback_17;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_17_PREPTAG = T;
    CCMA_nT_surfbody_feedback_17_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_17_PREPTAG;
  return CCMA_T_surfbody_feedback_17_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_17(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_17(void *T);
extern int CCMA_Sel_T_surfbody_feedback_17(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_17);
PrePutTable(CCMA, d, double, surfbody_feedback_17);
PreLoadTable(CCMA, surfbody_feedback_17);
PreStoreTable(CCMA, surfbody_feedback_17);
extern void CCMA_Dim_T_surfbody_feedback_17(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_17(void *T);
extern int CCMA_Sql_T_surfbody_feedback_17(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_17(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_18) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_18" : appearance order#243, hierarchy rank# 267, weight = 358.000243 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_18;

#endif /* defined(IS_a_TABLE_surfbody_feedback_18) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_18)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_18_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_18_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_18_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_18_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_18_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_18_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_18_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_18_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_18_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_18"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_18"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_18"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_18"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_18"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_18"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_18"; T[6].name = s; }
    CCMA_T_surfbody_feedback_18_TAG = T;
    CCMA_nT_surfbody_feedback_18_TAG = ntag;
    CCMA_nT_surfbody_feedback_18_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_18_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_18_MEM;
  return CCMA_T_surfbody_feedback_18_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_18_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_18_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_18;datum_sfc_event@surfbody_feedback_18;"
      "an_depar@surfbody_feedback_18;fg_depar@surfbody_feedback_18;"
      "snow_depth@surfbody_feedback_18;snow_density@surfbody_feedback_18;"
      "lsm@surfbody_feedback_18;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_18;datum_sfc_event@surfbody_feedback_18;"
      "an_depar@surfbody_feedback_18;fg_depar@surfbody_feedback_18;"
      "snow_depth@surfbody_feedback_18;snow_density@surfbody_feedback_18;"
      "lsm@surfbody_feedback_18;datum_status.active@surfbody_feedback_18;"
      "datum_status.passive@surfbody_feedback_18;datum_status.rejected@surfbody_feedback_18;"
      "datum_status.blacklisted@surfbody_feedback_18;datum_status.use_emiskf_only@surfbody_feedback_18;"
      "datum_sfc_event.statid@surfbody_feedback_18;datum_sfc_event.lsmask@surfbody_feedback_18;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_18;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_18;"
      "datum_sfc_event.fg_missing@surfbody_feedback_18;datum_sfc_event.fg2big@surfbody_feedback_18;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_18;"
      "datum_sfc_event.redundant@surfbody_feedback_18;datum_sfc_event.report_rejected@surfbody_feedback_18;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_18_PREPTAG = T;
    CCMA_nT_surfbody_feedback_18_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_18_PREPTAG;
  return CCMA_T_surfbody_feedback_18_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_18(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_18(void *T);
extern int CCMA_Sel_T_surfbody_feedback_18(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_18);
PrePutTable(CCMA, d, double, surfbody_feedback_18);
PreLoadTable(CCMA, surfbody_feedback_18);
PreStoreTable(CCMA, surfbody_feedback_18);
extern void CCMA_Dim_T_surfbody_feedback_18(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_18(void *T);
extern int CCMA_Sql_T_surfbody_feedback_18(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_18(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_19) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_19" : appearance order#244, hierarchy rank# 268, weight = 358.000244 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_19;

#endif /* defined(IS_a_TABLE_surfbody_feedback_19) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_19)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_19_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_19_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_19_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_19_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_19_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_19_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_19_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_19_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_19_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_19"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_19"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_19"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_19"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_19"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_19"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_19"; T[6].name = s; }
    CCMA_T_surfbody_feedback_19_TAG = T;
    CCMA_nT_surfbody_feedback_19_TAG = ntag;
    CCMA_nT_surfbody_feedback_19_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_19_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_19_MEM;
  return CCMA_T_surfbody_feedback_19_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_19_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_19_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_19;datum_sfc_event@surfbody_feedback_19;"
      "an_depar@surfbody_feedback_19;fg_depar@surfbody_feedback_19;"
      "snow_depth@surfbody_feedback_19;snow_density@surfbody_feedback_19;"
      "lsm@surfbody_feedback_19;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_19;datum_sfc_event@surfbody_feedback_19;"
      "an_depar@surfbody_feedback_19;fg_depar@surfbody_feedback_19;"
      "snow_depth@surfbody_feedback_19;snow_density@surfbody_feedback_19;"
      "lsm@surfbody_feedback_19;datum_status.active@surfbody_feedback_19;"
      "datum_status.passive@surfbody_feedback_19;datum_status.rejected@surfbody_feedback_19;"
      "datum_status.blacklisted@surfbody_feedback_19;datum_status.use_emiskf_only@surfbody_feedback_19;"
      "datum_sfc_event.statid@surfbody_feedback_19;datum_sfc_event.lsmask@surfbody_feedback_19;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_19;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_19;"
      "datum_sfc_event.fg_missing@surfbody_feedback_19;datum_sfc_event.fg2big@surfbody_feedback_19;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_19;"
      "datum_sfc_event.redundant@surfbody_feedback_19;datum_sfc_event.report_rejected@surfbody_feedback_19;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_19_PREPTAG = T;
    CCMA_nT_surfbody_feedback_19_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_19_PREPTAG;
  return CCMA_T_surfbody_feedback_19_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_19(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_19(void *T);
extern int CCMA_Sel_T_surfbody_feedback_19(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_19);
PrePutTable(CCMA, d, double, surfbody_feedback_19);
PreLoadTable(CCMA, surfbody_feedback_19);
PreStoreTable(CCMA, surfbody_feedback_19);
extern void CCMA_Dim_T_surfbody_feedback_19(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_19(void *T);
extern int CCMA_Sql_T_surfbody_feedback_19(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_19(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_20) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_20" : appearance order#245, hierarchy rank# 269, weight = 358.000245 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_20;

#endif /* defined(IS_a_TABLE_surfbody_feedback_20) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_20)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_20_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_20_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_20_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_20_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_20_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_20_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_20_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_20_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_20_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_20"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_20"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_20"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_20"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_20"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_20"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_20"; T[6].name = s; }
    CCMA_T_surfbody_feedback_20_TAG = T;
    CCMA_nT_surfbody_feedback_20_TAG = ntag;
    CCMA_nT_surfbody_feedback_20_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_20_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_20_MEM;
  return CCMA_T_surfbody_feedback_20_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_20_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_20_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_20;datum_sfc_event@surfbody_feedback_20;"
      "an_depar@surfbody_feedback_20;fg_depar@surfbody_feedback_20;"
      "snow_depth@surfbody_feedback_20;snow_density@surfbody_feedback_20;"
      "lsm@surfbody_feedback_20;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_20;datum_sfc_event@surfbody_feedback_20;"
      "an_depar@surfbody_feedback_20;fg_depar@surfbody_feedback_20;"
      "snow_depth@surfbody_feedback_20;snow_density@surfbody_feedback_20;"
      "lsm@surfbody_feedback_20;datum_status.active@surfbody_feedback_20;"
      "datum_status.passive@surfbody_feedback_20;datum_status.rejected@surfbody_feedback_20;"
      "datum_status.blacklisted@surfbody_feedback_20;datum_status.use_emiskf_only@surfbody_feedback_20;"
      "datum_sfc_event.statid@surfbody_feedback_20;datum_sfc_event.lsmask@surfbody_feedback_20;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_20;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_20;"
      "datum_sfc_event.fg_missing@surfbody_feedback_20;datum_sfc_event.fg2big@surfbody_feedback_20;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_20;"
      "datum_sfc_event.redundant@surfbody_feedback_20;datum_sfc_event.report_rejected@surfbody_feedback_20;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_20_PREPTAG = T;
    CCMA_nT_surfbody_feedback_20_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_20_PREPTAG;
  return CCMA_T_surfbody_feedback_20_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_20(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_20(void *T);
extern int CCMA_Sel_T_surfbody_feedback_20(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_20);
PrePutTable(CCMA, d, double, surfbody_feedback_20);
PreLoadTable(CCMA, surfbody_feedback_20);
PreStoreTable(CCMA, surfbody_feedback_20);
extern void CCMA_Dim_T_surfbody_feedback_20(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_20(void *T);
extern int CCMA_Sql_T_surfbody_feedback_20(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_20(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_21) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_21" : appearance order#246, hierarchy rank# 270, weight = 358.000246 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_21;

#endif /* defined(IS_a_TABLE_surfbody_feedback_21) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_21)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_21_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_21_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_21_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_21_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_21_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_21_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_21_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_21_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_21_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_21"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_21"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_21"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_21"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_21"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_21"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_21"; T[6].name = s; }
    CCMA_T_surfbody_feedback_21_TAG = T;
    CCMA_nT_surfbody_feedback_21_TAG = ntag;
    CCMA_nT_surfbody_feedback_21_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_21_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_21_MEM;
  return CCMA_T_surfbody_feedback_21_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_21_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_21_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_21;datum_sfc_event@surfbody_feedback_21;"
      "an_depar@surfbody_feedback_21;fg_depar@surfbody_feedback_21;"
      "snow_depth@surfbody_feedback_21;snow_density@surfbody_feedback_21;"
      "lsm@surfbody_feedback_21;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_21;datum_sfc_event@surfbody_feedback_21;"
      "an_depar@surfbody_feedback_21;fg_depar@surfbody_feedback_21;"
      "snow_depth@surfbody_feedback_21;snow_density@surfbody_feedback_21;"
      "lsm@surfbody_feedback_21;datum_status.active@surfbody_feedback_21;"
      "datum_status.passive@surfbody_feedback_21;datum_status.rejected@surfbody_feedback_21;"
      "datum_status.blacklisted@surfbody_feedback_21;datum_status.use_emiskf_only@surfbody_feedback_21;"
      "datum_sfc_event.statid@surfbody_feedback_21;datum_sfc_event.lsmask@surfbody_feedback_21;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_21;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_21;"
      "datum_sfc_event.fg_missing@surfbody_feedback_21;datum_sfc_event.fg2big@surfbody_feedback_21;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_21;"
      "datum_sfc_event.redundant@surfbody_feedback_21;datum_sfc_event.report_rejected@surfbody_feedback_21;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_21_PREPTAG = T;
    CCMA_nT_surfbody_feedback_21_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_21_PREPTAG;
  return CCMA_T_surfbody_feedback_21_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_21(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_21(void *T);
extern int CCMA_Sel_T_surfbody_feedback_21(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_21);
PrePutTable(CCMA, d, double, surfbody_feedback_21);
PreLoadTable(CCMA, surfbody_feedback_21);
PreStoreTable(CCMA, surfbody_feedback_21);
extern void CCMA_Dim_T_surfbody_feedback_21(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_21(void *T);
extern int CCMA_Sql_T_surfbody_feedback_21(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_21(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_22) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_22" : appearance order#247, hierarchy rank# 271, weight = 358.000247 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_22;

#endif /* defined(IS_a_TABLE_surfbody_feedback_22) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_22)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_22_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_22_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_22_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_22_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_22_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_22_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_22_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_22_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_22_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_22"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_22"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_22"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_22"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_22"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_22"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_22"; T[6].name = s; }
    CCMA_T_surfbody_feedback_22_TAG = T;
    CCMA_nT_surfbody_feedback_22_TAG = ntag;
    CCMA_nT_surfbody_feedback_22_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_22_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_22_MEM;
  return CCMA_T_surfbody_feedback_22_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_22_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_22_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_22;datum_sfc_event@surfbody_feedback_22;"
      "an_depar@surfbody_feedback_22;fg_depar@surfbody_feedback_22;"
      "snow_depth@surfbody_feedback_22;snow_density@surfbody_feedback_22;"
      "lsm@surfbody_feedback_22;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_22;datum_sfc_event@surfbody_feedback_22;"
      "an_depar@surfbody_feedback_22;fg_depar@surfbody_feedback_22;"
      "snow_depth@surfbody_feedback_22;snow_density@surfbody_feedback_22;"
      "lsm@surfbody_feedback_22;datum_status.active@surfbody_feedback_22;"
      "datum_status.passive@surfbody_feedback_22;datum_status.rejected@surfbody_feedback_22;"
      "datum_status.blacklisted@surfbody_feedback_22;datum_status.use_emiskf_only@surfbody_feedback_22;"
      "datum_sfc_event.statid@surfbody_feedback_22;datum_sfc_event.lsmask@surfbody_feedback_22;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_22;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_22;"
      "datum_sfc_event.fg_missing@surfbody_feedback_22;datum_sfc_event.fg2big@surfbody_feedback_22;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_22;"
      "datum_sfc_event.redundant@surfbody_feedback_22;datum_sfc_event.report_rejected@surfbody_feedback_22;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_22_PREPTAG = T;
    CCMA_nT_surfbody_feedback_22_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_22_PREPTAG;
  return CCMA_T_surfbody_feedback_22_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_22(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_22(void *T);
extern int CCMA_Sel_T_surfbody_feedback_22(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_22);
PrePutTable(CCMA, d, double, surfbody_feedback_22);
PreLoadTable(CCMA, surfbody_feedback_22);
PreStoreTable(CCMA, surfbody_feedback_22);
extern void CCMA_Dim_T_surfbody_feedback_22(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_22(void *T);
extern int CCMA_Sql_T_surfbody_feedback_22(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_22(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_23) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_23" : appearance order#248, hierarchy rank# 272, weight = 358.000248 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_23;

#endif /* defined(IS_a_TABLE_surfbody_feedback_23) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_23)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_23_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_23_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_23_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_23_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_23_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_23_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_23_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_23_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_23_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_23"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_23"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_23"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_23"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_23"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_23"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_23"; T[6].name = s; }
    CCMA_T_surfbody_feedback_23_TAG = T;
    CCMA_nT_surfbody_feedback_23_TAG = ntag;
    CCMA_nT_surfbody_feedback_23_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_23_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_23_MEM;
  return CCMA_T_surfbody_feedback_23_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_23_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_23_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_23;datum_sfc_event@surfbody_feedback_23;"
      "an_depar@surfbody_feedback_23;fg_depar@surfbody_feedback_23;"
      "snow_depth@surfbody_feedback_23;snow_density@surfbody_feedback_23;"
      "lsm@surfbody_feedback_23;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_23;datum_sfc_event@surfbody_feedback_23;"
      "an_depar@surfbody_feedback_23;fg_depar@surfbody_feedback_23;"
      "snow_depth@surfbody_feedback_23;snow_density@surfbody_feedback_23;"
      "lsm@surfbody_feedback_23;datum_status.active@surfbody_feedback_23;"
      "datum_status.passive@surfbody_feedback_23;datum_status.rejected@surfbody_feedback_23;"
      "datum_status.blacklisted@surfbody_feedback_23;datum_status.use_emiskf_only@surfbody_feedback_23;"
      "datum_sfc_event.statid@surfbody_feedback_23;datum_sfc_event.lsmask@surfbody_feedback_23;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_23;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_23;"
      "datum_sfc_event.fg_missing@surfbody_feedback_23;datum_sfc_event.fg2big@surfbody_feedback_23;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_23;"
      "datum_sfc_event.redundant@surfbody_feedback_23;datum_sfc_event.report_rejected@surfbody_feedback_23;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_23_PREPTAG = T;
    CCMA_nT_surfbody_feedback_23_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_23_PREPTAG;
  return CCMA_T_surfbody_feedback_23_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_23(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_23(void *T);
extern int CCMA_Sel_T_surfbody_feedback_23(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_23);
PrePutTable(CCMA, d, double, surfbody_feedback_23);
PreLoadTable(CCMA, surfbody_feedback_23);
PreStoreTable(CCMA, surfbody_feedback_23);
extern void CCMA_Dim_T_surfbody_feedback_23(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_23(void *T);
extern int CCMA_Sql_T_surfbody_feedback_23(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_23(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_24) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_24" : appearance order#249, hierarchy rank# 273, weight = 358.000249 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_24;

#endif /* defined(IS_a_TABLE_surfbody_feedback_24) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_24)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_24_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_24_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_24_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_24_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_24_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_24_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_24_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_24_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_24_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_24"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_24"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_24"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_24"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_24"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_24"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_24"; T[6].name = s; }
    CCMA_T_surfbody_feedback_24_TAG = T;
    CCMA_nT_surfbody_feedback_24_TAG = ntag;
    CCMA_nT_surfbody_feedback_24_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_24_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_24_MEM;
  return CCMA_T_surfbody_feedback_24_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_24_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_24_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_24;datum_sfc_event@surfbody_feedback_24;"
      "an_depar@surfbody_feedback_24;fg_depar@surfbody_feedback_24;"
      "snow_depth@surfbody_feedback_24;snow_density@surfbody_feedback_24;"
      "lsm@surfbody_feedback_24;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_24;datum_sfc_event@surfbody_feedback_24;"
      "an_depar@surfbody_feedback_24;fg_depar@surfbody_feedback_24;"
      "snow_depth@surfbody_feedback_24;snow_density@surfbody_feedback_24;"
      "lsm@surfbody_feedback_24;datum_status.active@surfbody_feedback_24;"
      "datum_status.passive@surfbody_feedback_24;datum_status.rejected@surfbody_feedback_24;"
      "datum_status.blacklisted@surfbody_feedback_24;datum_status.use_emiskf_only@surfbody_feedback_24;"
      "datum_sfc_event.statid@surfbody_feedback_24;datum_sfc_event.lsmask@surfbody_feedback_24;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_24;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_24;"
      "datum_sfc_event.fg_missing@surfbody_feedback_24;datum_sfc_event.fg2big@surfbody_feedback_24;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_24;"
      "datum_sfc_event.redundant@surfbody_feedback_24;datum_sfc_event.report_rejected@surfbody_feedback_24;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_24_PREPTAG = T;
    CCMA_nT_surfbody_feedback_24_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_24_PREPTAG;
  return CCMA_T_surfbody_feedback_24_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_24(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_24(void *T);
extern int CCMA_Sel_T_surfbody_feedback_24(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_24);
PrePutTable(CCMA, d, double, surfbody_feedback_24);
PreLoadTable(CCMA, surfbody_feedback_24);
PreStoreTable(CCMA, surfbody_feedback_24);
extern void CCMA_Dim_T_surfbody_feedback_24(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_24(void *T);
extern int CCMA_Sql_T_surfbody_feedback_24(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_24(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_25) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_25" : appearance order#250, hierarchy rank# 274, weight = 358.000250 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_25;

#endif /* defined(IS_a_TABLE_surfbody_feedback_25) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_25)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_25_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_25_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_25_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_25_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_25_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_25_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_25_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_25_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_25_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_25"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_25"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_25"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_25"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_25"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_25"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_25"; T[6].name = s; }
    CCMA_T_surfbody_feedback_25_TAG = T;
    CCMA_nT_surfbody_feedback_25_TAG = ntag;
    CCMA_nT_surfbody_feedback_25_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_25_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_25_MEM;
  return CCMA_T_surfbody_feedback_25_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_25_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_25_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_25;datum_sfc_event@surfbody_feedback_25;"
      "an_depar@surfbody_feedback_25;fg_depar@surfbody_feedback_25;"
      "snow_depth@surfbody_feedback_25;snow_density@surfbody_feedback_25;"
      "lsm@surfbody_feedback_25;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_25;datum_sfc_event@surfbody_feedback_25;"
      "an_depar@surfbody_feedback_25;fg_depar@surfbody_feedback_25;"
      "snow_depth@surfbody_feedback_25;snow_density@surfbody_feedback_25;"
      "lsm@surfbody_feedback_25;datum_status.active@surfbody_feedback_25;"
      "datum_status.passive@surfbody_feedback_25;datum_status.rejected@surfbody_feedback_25;"
      "datum_status.blacklisted@surfbody_feedback_25;datum_status.use_emiskf_only@surfbody_feedback_25;"
      "datum_sfc_event.statid@surfbody_feedback_25;datum_sfc_event.lsmask@surfbody_feedback_25;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_25;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_25;"
      "datum_sfc_event.fg_missing@surfbody_feedback_25;datum_sfc_event.fg2big@surfbody_feedback_25;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_25;"
      "datum_sfc_event.redundant@surfbody_feedback_25;datum_sfc_event.report_rejected@surfbody_feedback_25;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_25_PREPTAG = T;
    CCMA_nT_surfbody_feedback_25_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_25_PREPTAG;
  return CCMA_T_surfbody_feedback_25_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_25(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_25(void *T);
extern int CCMA_Sel_T_surfbody_feedback_25(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_25);
PrePutTable(CCMA, d, double, surfbody_feedback_25);
PreLoadTable(CCMA, surfbody_feedback_25);
PreStoreTable(CCMA, surfbody_feedback_25);
extern void CCMA_Dim_T_surfbody_feedback_25(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_25(void *T);
extern int CCMA_Sql_T_surfbody_feedback_25(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_25(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_26) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_26" : appearance order#251, hierarchy rank# 275, weight = 358.000251 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_26;

#endif /* defined(IS_a_TABLE_surfbody_feedback_26) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_26)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_26_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_26_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_26_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_26_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_26_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_26_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_26_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_26_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_26_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_26"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_26"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_26"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_26"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_26"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_26"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_26"; T[6].name = s; }
    CCMA_T_surfbody_feedback_26_TAG = T;
    CCMA_nT_surfbody_feedback_26_TAG = ntag;
    CCMA_nT_surfbody_feedback_26_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_26_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_26_MEM;
  return CCMA_T_surfbody_feedback_26_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_26_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_26_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_26;datum_sfc_event@surfbody_feedback_26;"
      "an_depar@surfbody_feedback_26;fg_depar@surfbody_feedback_26;"
      "snow_depth@surfbody_feedback_26;snow_density@surfbody_feedback_26;"
      "lsm@surfbody_feedback_26;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_26;datum_sfc_event@surfbody_feedback_26;"
      "an_depar@surfbody_feedback_26;fg_depar@surfbody_feedback_26;"
      "snow_depth@surfbody_feedback_26;snow_density@surfbody_feedback_26;"
      "lsm@surfbody_feedback_26;datum_status.active@surfbody_feedback_26;"
      "datum_status.passive@surfbody_feedback_26;datum_status.rejected@surfbody_feedback_26;"
      "datum_status.blacklisted@surfbody_feedback_26;datum_status.use_emiskf_only@surfbody_feedback_26;"
      "datum_sfc_event.statid@surfbody_feedback_26;datum_sfc_event.lsmask@surfbody_feedback_26;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_26;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_26;"
      "datum_sfc_event.fg_missing@surfbody_feedback_26;datum_sfc_event.fg2big@surfbody_feedback_26;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_26;"
      "datum_sfc_event.redundant@surfbody_feedback_26;datum_sfc_event.report_rejected@surfbody_feedback_26;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_26_PREPTAG = T;
    CCMA_nT_surfbody_feedback_26_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_26_PREPTAG;
  return CCMA_T_surfbody_feedback_26_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_26(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_26(void *T);
extern int CCMA_Sel_T_surfbody_feedback_26(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_26);
PrePutTable(CCMA, d, double, surfbody_feedback_26);
PreLoadTable(CCMA, surfbody_feedback_26);
PreStoreTable(CCMA, surfbody_feedback_26);
extern void CCMA_Dim_T_surfbody_feedback_26(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_26(void *T);
extern int CCMA_Sql_T_surfbody_feedback_26(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_26(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_27) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_27" : appearance order#252, hierarchy rank# 276, weight = 358.000252 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_27;

#endif /* defined(IS_a_TABLE_surfbody_feedback_27) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_27)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_27_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_27_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_27_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_27_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_27_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_27_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_27_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_27_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_27_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_27"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_27"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_27"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_27"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_27"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_27"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_27"; T[6].name = s; }
    CCMA_T_surfbody_feedback_27_TAG = T;
    CCMA_nT_surfbody_feedback_27_TAG = ntag;
    CCMA_nT_surfbody_feedback_27_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_27_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_27_MEM;
  return CCMA_T_surfbody_feedback_27_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_27_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_27_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_27;datum_sfc_event@surfbody_feedback_27;"
      "an_depar@surfbody_feedback_27;fg_depar@surfbody_feedback_27;"
      "snow_depth@surfbody_feedback_27;snow_density@surfbody_feedback_27;"
      "lsm@surfbody_feedback_27;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_27;datum_sfc_event@surfbody_feedback_27;"
      "an_depar@surfbody_feedback_27;fg_depar@surfbody_feedback_27;"
      "snow_depth@surfbody_feedback_27;snow_density@surfbody_feedback_27;"
      "lsm@surfbody_feedback_27;datum_status.active@surfbody_feedback_27;"
      "datum_status.passive@surfbody_feedback_27;datum_status.rejected@surfbody_feedback_27;"
      "datum_status.blacklisted@surfbody_feedback_27;datum_status.use_emiskf_only@surfbody_feedback_27;"
      "datum_sfc_event.statid@surfbody_feedback_27;datum_sfc_event.lsmask@surfbody_feedback_27;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_27;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_27;"
      "datum_sfc_event.fg_missing@surfbody_feedback_27;datum_sfc_event.fg2big@surfbody_feedback_27;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_27;"
      "datum_sfc_event.redundant@surfbody_feedback_27;datum_sfc_event.report_rejected@surfbody_feedback_27;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_27_PREPTAG = T;
    CCMA_nT_surfbody_feedback_27_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_27_PREPTAG;
  return CCMA_T_surfbody_feedback_27_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_27(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_27(void *T);
extern int CCMA_Sel_T_surfbody_feedback_27(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_27);
PrePutTable(CCMA, d, double, surfbody_feedback_27);
PreLoadTable(CCMA, surfbody_feedback_27);
PreStoreTable(CCMA, surfbody_feedback_27);
extern void CCMA_Dim_T_surfbody_feedback_27(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_27(void *T);
extern int CCMA_Sql_T_surfbody_feedback_27(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_27(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_28) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_28" : appearance order#253, hierarchy rank# 277, weight = 358.000253 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_28;

#endif /* defined(IS_a_TABLE_surfbody_feedback_28) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_28)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_28_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_28_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_28_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_28_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_28_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_28_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_28_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_28_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_28_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_28"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_28"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_28"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_28"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_28"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_28"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_28"; T[6].name = s; }
    CCMA_T_surfbody_feedback_28_TAG = T;
    CCMA_nT_surfbody_feedback_28_TAG = ntag;
    CCMA_nT_surfbody_feedback_28_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_28_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_28_MEM;
  return CCMA_T_surfbody_feedback_28_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_28_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_28_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_28;datum_sfc_event@surfbody_feedback_28;"
      "an_depar@surfbody_feedback_28;fg_depar@surfbody_feedback_28;"
      "snow_depth@surfbody_feedback_28;snow_density@surfbody_feedback_28;"
      "lsm@surfbody_feedback_28;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_28;datum_sfc_event@surfbody_feedback_28;"
      "an_depar@surfbody_feedback_28;fg_depar@surfbody_feedback_28;"
      "snow_depth@surfbody_feedback_28;snow_density@surfbody_feedback_28;"
      "lsm@surfbody_feedback_28;datum_status.active@surfbody_feedback_28;"
      "datum_status.passive@surfbody_feedback_28;datum_status.rejected@surfbody_feedback_28;"
      "datum_status.blacklisted@surfbody_feedback_28;datum_status.use_emiskf_only@surfbody_feedback_28;"
      "datum_sfc_event.statid@surfbody_feedback_28;datum_sfc_event.lsmask@surfbody_feedback_28;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_28;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_28;"
      "datum_sfc_event.fg_missing@surfbody_feedback_28;datum_sfc_event.fg2big@surfbody_feedback_28;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_28;"
      "datum_sfc_event.redundant@surfbody_feedback_28;datum_sfc_event.report_rejected@surfbody_feedback_28;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_28_PREPTAG = T;
    CCMA_nT_surfbody_feedback_28_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_28_PREPTAG;
  return CCMA_T_surfbody_feedback_28_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_28(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_28(void *T);
extern int CCMA_Sel_T_surfbody_feedback_28(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_28);
PrePutTable(CCMA, d, double, surfbody_feedback_28);
PreLoadTable(CCMA, surfbody_feedback_28);
PreStoreTable(CCMA, surfbody_feedback_28);
extern void CCMA_Dim_T_surfbody_feedback_28(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_28(void *T);
extern int CCMA_Sql_T_surfbody_feedback_28(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_28(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_29) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_29" : appearance order#254, hierarchy rank# 278, weight = 358.000254 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_29;

#endif /* defined(IS_a_TABLE_surfbody_feedback_29) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_29)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_29_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_29_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_29_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_29_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_29_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_29_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_29_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_29_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_29_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_29"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_29"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_29"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_29"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_29"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_29"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_29"; T[6].name = s; }
    CCMA_T_surfbody_feedback_29_TAG = T;
    CCMA_nT_surfbody_feedback_29_TAG = ntag;
    CCMA_nT_surfbody_feedback_29_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_29_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_29_MEM;
  return CCMA_T_surfbody_feedback_29_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_29_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_29_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_29;datum_sfc_event@surfbody_feedback_29;"
      "an_depar@surfbody_feedback_29;fg_depar@surfbody_feedback_29;"
      "snow_depth@surfbody_feedback_29;snow_density@surfbody_feedback_29;"
      "lsm@surfbody_feedback_29;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_29;datum_sfc_event@surfbody_feedback_29;"
      "an_depar@surfbody_feedback_29;fg_depar@surfbody_feedback_29;"
      "snow_depth@surfbody_feedback_29;snow_density@surfbody_feedback_29;"
      "lsm@surfbody_feedback_29;datum_status.active@surfbody_feedback_29;"
      "datum_status.passive@surfbody_feedback_29;datum_status.rejected@surfbody_feedback_29;"
      "datum_status.blacklisted@surfbody_feedback_29;datum_status.use_emiskf_only@surfbody_feedback_29;"
      "datum_sfc_event.statid@surfbody_feedback_29;datum_sfc_event.lsmask@surfbody_feedback_29;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_29;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_29;"
      "datum_sfc_event.fg_missing@surfbody_feedback_29;datum_sfc_event.fg2big@surfbody_feedback_29;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_29;"
      "datum_sfc_event.redundant@surfbody_feedback_29;datum_sfc_event.report_rejected@surfbody_feedback_29;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_29_PREPTAG = T;
    CCMA_nT_surfbody_feedback_29_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_29_PREPTAG;
  return CCMA_T_surfbody_feedback_29_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_29(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_29(void *T);
extern int CCMA_Sel_T_surfbody_feedback_29(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_29);
PrePutTable(CCMA, d, double, surfbody_feedback_29);
PreLoadTable(CCMA, surfbody_feedback_29);
PreStoreTable(CCMA, surfbody_feedback_29);
extern void CCMA_Dim_T_surfbody_feedback_29(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_29(void *T);
extern int CCMA_Sql_T_surfbody_feedback_29(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_29(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_30) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_30" : appearance order#255, hierarchy rank# 279, weight = 358.000255 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_30;

#endif /* defined(IS_a_TABLE_surfbody_feedback_30) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_30)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_30_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_30_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_30_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_30_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_30_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_30_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_30_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_30_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_30_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_30"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_30"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_30"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_30"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_30"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_30"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_30"; T[6].name = s; }
    CCMA_T_surfbody_feedback_30_TAG = T;
    CCMA_nT_surfbody_feedback_30_TAG = ntag;
    CCMA_nT_surfbody_feedback_30_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_30_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_30_MEM;
  return CCMA_T_surfbody_feedback_30_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_30_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_30_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_30;datum_sfc_event@surfbody_feedback_30;"
      "an_depar@surfbody_feedback_30;fg_depar@surfbody_feedback_30;"
      "snow_depth@surfbody_feedback_30;snow_density@surfbody_feedback_30;"
      "lsm@surfbody_feedback_30;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_30;datum_sfc_event@surfbody_feedback_30;"
      "an_depar@surfbody_feedback_30;fg_depar@surfbody_feedback_30;"
      "snow_depth@surfbody_feedback_30;snow_density@surfbody_feedback_30;"
      "lsm@surfbody_feedback_30;datum_status.active@surfbody_feedback_30;"
      "datum_status.passive@surfbody_feedback_30;datum_status.rejected@surfbody_feedback_30;"
      "datum_status.blacklisted@surfbody_feedback_30;datum_status.use_emiskf_only@surfbody_feedback_30;"
      "datum_sfc_event.statid@surfbody_feedback_30;datum_sfc_event.lsmask@surfbody_feedback_30;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_30;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_30;"
      "datum_sfc_event.fg_missing@surfbody_feedback_30;datum_sfc_event.fg2big@surfbody_feedback_30;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_30;"
      "datum_sfc_event.redundant@surfbody_feedback_30;datum_sfc_event.report_rejected@surfbody_feedback_30;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_30_PREPTAG = T;
    CCMA_nT_surfbody_feedback_30_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_30_PREPTAG;
  return CCMA_T_surfbody_feedback_30_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_30(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_30(void *T);
extern int CCMA_Sel_T_surfbody_feedback_30(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_30);
PrePutTable(CCMA, d, double, surfbody_feedback_30);
PreLoadTable(CCMA, surfbody_feedback_30);
PreStoreTable(CCMA, surfbody_feedback_30);
extern void CCMA_Dim_T_surfbody_feedback_30(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_30(void *T);
extern int CCMA_Sql_T_surfbody_feedback_30(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_30(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_31) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_31" : appearance order#256, hierarchy rank# 280, weight = 358.000256 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_31;

#endif /* defined(IS_a_TABLE_surfbody_feedback_31) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_31)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_31_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_31_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_31_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_31_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_31_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_31_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_31_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_31_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_31_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_31"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_31"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_31"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_31"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_31"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_31"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_31"; T[6].name = s; }
    CCMA_T_surfbody_feedback_31_TAG = T;
    CCMA_nT_surfbody_feedback_31_TAG = ntag;
    CCMA_nT_surfbody_feedback_31_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_31_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_31_MEM;
  return CCMA_T_surfbody_feedback_31_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_31_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_31_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_31;datum_sfc_event@surfbody_feedback_31;"
      "an_depar@surfbody_feedback_31;fg_depar@surfbody_feedback_31;"
      "snow_depth@surfbody_feedback_31;snow_density@surfbody_feedback_31;"
      "lsm@surfbody_feedback_31;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_31;datum_sfc_event@surfbody_feedback_31;"
      "an_depar@surfbody_feedback_31;fg_depar@surfbody_feedback_31;"
      "snow_depth@surfbody_feedback_31;snow_density@surfbody_feedback_31;"
      "lsm@surfbody_feedback_31;datum_status.active@surfbody_feedback_31;"
      "datum_status.passive@surfbody_feedback_31;datum_status.rejected@surfbody_feedback_31;"
      "datum_status.blacklisted@surfbody_feedback_31;datum_status.use_emiskf_only@surfbody_feedback_31;"
      "datum_sfc_event.statid@surfbody_feedback_31;datum_sfc_event.lsmask@surfbody_feedback_31;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_31;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_31;"
      "datum_sfc_event.fg_missing@surfbody_feedback_31;datum_sfc_event.fg2big@surfbody_feedback_31;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_31;"
      "datum_sfc_event.redundant@surfbody_feedback_31;datum_sfc_event.report_rejected@surfbody_feedback_31;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_31_PREPTAG = T;
    CCMA_nT_surfbody_feedback_31_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_31_PREPTAG;
  return CCMA_T_surfbody_feedback_31_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_31(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_31(void *T);
extern int CCMA_Sel_T_surfbody_feedback_31(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_31);
PrePutTable(CCMA, d, double, surfbody_feedback_31);
PreLoadTable(CCMA, surfbody_feedback_31);
PreStoreTable(CCMA, surfbody_feedback_31);
extern void CCMA_Dim_T_surfbody_feedback_31(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_31(void *T);
extern int CCMA_Sql_T_surfbody_feedback_31(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_31(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_32) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_32" : appearance order#257, hierarchy rank# 281, weight = 358.000257 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_32;

#endif /* defined(IS_a_TABLE_surfbody_feedback_32) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_32)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_32_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_32_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_32_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_32_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_32_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_32_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_32_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_32_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_32_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_32"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_32"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_32"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_32"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_32"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_32"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_32"; T[6].name = s; }
    CCMA_T_surfbody_feedback_32_TAG = T;
    CCMA_nT_surfbody_feedback_32_TAG = ntag;
    CCMA_nT_surfbody_feedback_32_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_32_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_32_MEM;
  return CCMA_T_surfbody_feedback_32_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_32_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_32_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_32;datum_sfc_event@surfbody_feedback_32;"
      "an_depar@surfbody_feedback_32;fg_depar@surfbody_feedback_32;"
      "snow_depth@surfbody_feedback_32;snow_density@surfbody_feedback_32;"
      "lsm@surfbody_feedback_32;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_32;datum_sfc_event@surfbody_feedback_32;"
      "an_depar@surfbody_feedback_32;fg_depar@surfbody_feedback_32;"
      "snow_depth@surfbody_feedback_32;snow_density@surfbody_feedback_32;"
      "lsm@surfbody_feedback_32;datum_status.active@surfbody_feedback_32;"
      "datum_status.passive@surfbody_feedback_32;datum_status.rejected@surfbody_feedback_32;"
      "datum_status.blacklisted@surfbody_feedback_32;datum_status.use_emiskf_only@surfbody_feedback_32;"
      "datum_sfc_event.statid@surfbody_feedback_32;datum_sfc_event.lsmask@surfbody_feedback_32;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_32;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_32;"
      "datum_sfc_event.fg_missing@surfbody_feedback_32;datum_sfc_event.fg2big@surfbody_feedback_32;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_32;"
      "datum_sfc_event.redundant@surfbody_feedback_32;datum_sfc_event.report_rejected@surfbody_feedback_32;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_32_PREPTAG = T;
    CCMA_nT_surfbody_feedback_32_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_32_PREPTAG;
  return CCMA_T_surfbody_feedback_32_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_32(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_32(void *T);
extern int CCMA_Sel_T_surfbody_feedback_32(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_32);
PrePutTable(CCMA, d, double, surfbody_feedback_32);
PreLoadTable(CCMA, surfbody_feedback_32);
PreStoreTable(CCMA, surfbody_feedback_32);
extern void CCMA_Dim_T_surfbody_feedback_32(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_32(void *T);
extern int CCMA_Sql_T_surfbody_feedback_32(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_32(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_33) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_33" : appearance order#258, hierarchy rank# 282, weight = 358.000258 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_33;

#endif /* defined(IS_a_TABLE_surfbody_feedback_33) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_33)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_33_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_33_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_33_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_33_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_33_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_33_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_33_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_33_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_33_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_33"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_33"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_33"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_33"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_33"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_33"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_33"; T[6].name = s; }
    CCMA_T_surfbody_feedback_33_TAG = T;
    CCMA_nT_surfbody_feedback_33_TAG = ntag;
    CCMA_nT_surfbody_feedback_33_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_33_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_33_MEM;
  return CCMA_T_surfbody_feedback_33_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_33_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_33_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_33;datum_sfc_event@surfbody_feedback_33;"
      "an_depar@surfbody_feedback_33;fg_depar@surfbody_feedback_33;"
      "snow_depth@surfbody_feedback_33;snow_density@surfbody_feedback_33;"
      "lsm@surfbody_feedback_33;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_33;datum_sfc_event@surfbody_feedback_33;"
      "an_depar@surfbody_feedback_33;fg_depar@surfbody_feedback_33;"
      "snow_depth@surfbody_feedback_33;snow_density@surfbody_feedback_33;"
      "lsm@surfbody_feedback_33;datum_status.active@surfbody_feedback_33;"
      "datum_status.passive@surfbody_feedback_33;datum_status.rejected@surfbody_feedback_33;"
      "datum_status.blacklisted@surfbody_feedback_33;datum_status.use_emiskf_only@surfbody_feedback_33;"
      "datum_sfc_event.statid@surfbody_feedback_33;datum_sfc_event.lsmask@surfbody_feedback_33;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_33;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_33;"
      "datum_sfc_event.fg_missing@surfbody_feedback_33;datum_sfc_event.fg2big@surfbody_feedback_33;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_33;"
      "datum_sfc_event.redundant@surfbody_feedback_33;datum_sfc_event.report_rejected@surfbody_feedback_33;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_33_PREPTAG = T;
    CCMA_nT_surfbody_feedback_33_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_33_PREPTAG;
  return CCMA_T_surfbody_feedback_33_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_33(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_33(void *T);
extern int CCMA_Sel_T_surfbody_feedback_33(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_33);
PrePutTable(CCMA, d, double, surfbody_feedback_33);
PreLoadTable(CCMA, surfbody_feedback_33);
PreStoreTable(CCMA, surfbody_feedback_33);
extern void CCMA_Dim_T_surfbody_feedback_33(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_33(void *T);
extern int CCMA_Sql_T_surfbody_feedback_33(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_33(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_34) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_34" : appearance order#259, hierarchy rank# 283, weight = 358.000259 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_34;

#endif /* defined(IS_a_TABLE_surfbody_feedback_34) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_34)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_34_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_34_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_34_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_34_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_34_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_34_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_34_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_34_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_34_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_34"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_34"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_34"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_34"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_34"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_34"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_34"; T[6].name = s; }
    CCMA_T_surfbody_feedback_34_TAG = T;
    CCMA_nT_surfbody_feedback_34_TAG = ntag;
    CCMA_nT_surfbody_feedback_34_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_34_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_34_MEM;
  return CCMA_T_surfbody_feedback_34_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_34_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_34_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_34;datum_sfc_event@surfbody_feedback_34;"
      "an_depar@surfbody_feedback_34;fg_depar@surfbody_feedback_34;"
      "snow_depth@surfbody_feedback_34;snow_density@surfbody_feedback_34;"
      "lsm@surfbody_feedback_34;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_34;datum_sfc_event@surfbody_feedback_34;"
      "an_depar@surfbody_feedback_34;fg_depar@surfbody_feedback_34;"
      "snow_depth@surfbody_feedback_34;snow_density@surfbody_feedback_34;"
      "lsm@surfbody_feedback_34;datum_status.active@surfbody_feedback_34;"
      "datum_status.passive@surfbody_feedback_34;datum_status.rejected@surfbody_feedback_34;"
      "datum_status.blacklisted@surfbody_feedback_34;datum_status.use_emiskf_only@surfbody_feedback_34;"
      "datum_sfc_event.statid@surfbody_feedback_34;datum_sfc_event.lsmask@surfbody_feedback_34;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_34;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_34;"
      "datum_sfc_event.fg_missing@surfbody_feedback_34;datum_sfc_event.fg2big@surfbody_feedback_34;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_34;"
      "datum_sfc_event.redundant@surfbody_feedback_34;datum_sfc_event.report_rejected@surfbody_feedback_34;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_34_PREPTAG = T;
    CCMA_nT_surfbody_feedback_34_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_34_PREPTAG;
  return CCMA_T_surfbody_feedback_34_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_34(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_34(void *T);
extern int CCMA_Sel_T_surfbody_feedback_34(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_34);
PrePutTable(CCMA, d, double, surfbody_feedback_34);
PreLoadTable(CCMA, surfbody_feedback_34);
PreStoreTable(CCMA, surfbody_feedback_34);
extern void CCMA_Dim_T_surfbody_feedback_34(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_34(void *T);
extern int CCMA_Sql_T_surfbody_feedback_34(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_34(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_35) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_35" : appearance order#260, hierarchy rank# 284, weight = 358.000260 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_35;

#endif /* defined(IS_a_TABLE_surfbody_feedback_35) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_35)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_35_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_35_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_35_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_35_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_35_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_35_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_35_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_35_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_35_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_35"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_35"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_35"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_35"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_35"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_35"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_35"; T[6].name = s; }
    CCMA_T_surfbody_feedback_35_TAG = T;
    CCMA_nT_surfbody_feedback_35_TAG = ntag;
    CCMA_nT_surfbody_feedback_35_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_35_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_35_MEM;
  return CCMA_T_surfbody_feedback_35_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_35_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_35_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_35;datum_sfc_event@surfbody_feedback_35;"
      "an_depar@surfbody_feedback_35;fg_depar@surfbody_feedback_35;"
      "snow_depth@surfbody_feedback_35;snow_density@surfbody_feedback_35;"
      "lsm@surfbody_feedback_35;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_35;datum_sfc_event@surfbody_feedback_35;"
      "an_depar@surfbody_feedback_35;fg_depar@surfbody_feedback_35;"
      "snow_depth@surfbody_feedback_35;snow_density@surfbody_feedback_35;"
      "lsm@surfbody_feedback_35;datum_status.active@surfbody_feedback_35;"
      "datum_status.passive@surfbody_feedback_35;datum_status.rejected@surfbody_feedback_35;"
      "datum_status.blacklisted@surfbody_feedback_35;datum_status.use_emiskf_only@surfbody_feedback_35;"
      "datum_sfc_event.statid@surfbody_feedback_35;datum_sfc_event.lsmask@surfbody_feedback_35;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_35;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_35;"
      "datum_sfc_event.fg_missing@surfbody_feedback_35;datum_sfc_event.fg2big@surfbody_feedback_35;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_35;"
      "datum_sfc_event.redundant@surfbody_feedback_35;datum_sfc_event.report_rejected@surfbody_feedback_35;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_35_PREPTAG = T;
    CCMA_nT_surfbody_feedback_35_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_35_PREPTAG;
  return CCMA_T_surfbody_feedback_35_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_35(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_35(void *T);
extern int CCMA_Sel_T_surfbody_feedback_35(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_35);
PrePutTable(CCMA, d, double, surfbody_feedback_35);
PreLoadTable(CCMA, surfbody_feedback_35);
PreStoreTable(CCMA, surfbody_feedback_35);
extern void CCMA_Dim_T_surfbody_feedback_35(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_35(void *T);
extern int CCMA_Sql_T_surfbody_feedback_35(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_35(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_36) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_36" : appearance order#261, hierarchy rank# 285, weight = 358.000261 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_36;

#endif /* defined(IS_a_TABLE_surfbody_feedback_36) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_36)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_36_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_36_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_36_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_36_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_36_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_36_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_36_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_36_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_36_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_36"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_36"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_36"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_36"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_36"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_36"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_36"; T[6].name = s; }
    CCMA_T_surfbody_feedback_36_TAG = T;
    CCMA_nT_surfbody_feedback_36_TAG = ntag;
    CCMA_nT_surfbody_feedback_36_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_36_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_36_MEM;
  return CCMA_T_surfbody_feedback_36_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_36_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_36_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_36;datum_sfc_event@surfbody_feedback_36;"
      "an_depar@surfbody_feedback_36;fg_depar@surfbody_feedback_36;"
      "snow_depth@surfbody_feedback_36;snow_density@surfbody_feedback_36;"
      "lsm@surfbody_feedback_36;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_36;datum_sfc_event@surfbody_feedback_36;"
      "an_depar@surfbody_feedback_36;fg_depar@surfbody_feedback_36;"
      "snow_depth@surfbody_feedback_36;snow_density@surfbody_feedback_36;"
      "lsm@surfbody_feedback_36;datum_status.active@surfbody_feedback_36;"
      "datum_status.passive@surfbody_feedback_36;datum_status.rejected@surfbody_feedback_36;"
      "datum_status.blacklisted@surfbody_feedback_36;datum_status.use_emiskf_only@surfbody_feedback_36;"
      "datum_sfc_event.statid@surfbody_feedback_36;datum_sfc_event.lsmask@surfbody_feedback_36;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_36;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_36;"
      "datum_sfc_event.fg_missing@surfbody_feedback_36;datum_sfc_event.fg2big@surfbody_feedback_36;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_36;"
      "datum_sfc_event.redundant@surfbody_feedback_36;datum_sfc_event.report_rejected@surfbody_feedback_36;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_36_PREPTAG = T;
    CCMA_nT_surfbody_feedback_36_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_36_PREPTAG;
  return CCMA_T_surfbody_feedback_36_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_36(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_36(void *T);
extern int CCMA_Sel_T_surfbody_feedback_36(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_36);
PrePutTable(CCMA, d, double, surfbody_feedback_36);
PreLoadTable(CCMA, surfbody_feedback_36);
PreStoreTable(CCMA, surfbody_feedback_36);
extern void CCMA_Dim_T_surfbody_feedback_36(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_36(void *T);
extern int CCMA_Sql_T_surfbody_feedback_36(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_36(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_37) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_37" : appearance order#262, hierarchy rank# 286, weight = 358.000262 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_37;

#endif /* defined(IS_a_TABLE_surfbody_feedback_37) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_37)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_37_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_37_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_37_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_37_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_37_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_37_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_37_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_37_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_37_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_37"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_37"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_37"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_37"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_37"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_37"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_37"; T[6].name = s; }
    CCMA_T_surfbody_feedback_37_TAG = T;
    CCMA_nT_surfbody_feedback_37_TAG = ntag;
    CCMA_nT_surfbody_feedback_37_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_37_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_37_MEM;
  return CCMA_T_surfbody_feedback_37_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_37_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_37_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_37;datum_sfc_event@surfbody_feedback_37;"
      "an_depar@surfbody_feedback_37;fg_depar@surfbody_feedback_37;"
      "snow_depth@surfbody_feedback_37;snow_density@surfbody_feedback_37;"
      "lsm@surfbody_feedback_37;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_37;datum_sfc_event@surfbody_feedback_37;"
      "an_depar@surfbody_feedback_37;fg_depar@surfbody_feedback_37;"
      "snow_depth@surfbody_feedback_37;snow_density@surfbody_feedback_37;"
      "lsm@surfbody_feedback_37;datum_status.active@surfbody_feedback_37;"
      "datum_status.passive@surfbody_feedback_37;datum_status.rejected@surfbody_feedback_37;"
      "datum_status.blacklisted@surfbody_feedback_37;datum_status.use_emiskf_only@surfbody_feedback_37;"
      "datum_sfc_event.statid@surfbody_feedback_37;datum_sfc_event.lsmask@surfbody_feedback_37;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_37;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_37;"
      "datum_sfc_event.fg_missing@surfbody_feedback_37;datum_sfc_event.fg2big@surfbody_feedback_37;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_37;"
      "datum_sfc_event.redundant@surfbody_feedback_37;datum_sfc_event.report_rejected@surfbody_feedback_37;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_37_PREPTAG = T;
    CCMA_nT_surfbody_feedback_37_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_37_PREPTAG;
  return CCMA_T_surfbody_feedback_37_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_37(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_37(void *T);
extern int CCMA_Sel_T_surfbody_feedback_37(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_37);
PrePutTable(CCMA, d, double, surfbody_feedback_37);
PreLoadTable(CCMA, surfbody_feedback_37);
PreStoreTable(CCMA, surfbody_feedback_37);
extern void CCMA_Dim_T_surfbody_feedback_37(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_37(void *T);
extern int CCMA_Sql_T_surfbody_feedback_37(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_37(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_38) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_38" : appearance order#263, hierarchy rank# 287, weight = 358.000263 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_38;

#endif /* defined(IS_a_TABLE_surfbody_feedback_38) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_38)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_38_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_38_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_38_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_38_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_38_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_38_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_38_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_38_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_38_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_38"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_38"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_38"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_38"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_38"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_38"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_38"; T[6].name = s; }
    CCMA_T_surfbody_feedback_38_TAG = T;
    CCMA_nT_surfbody_feedback_38_TAG = ntag;
    CCMA_nT_surfbody_feedback_38_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_38_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_38_MEM;
  return CCMA_T_surfbody_feedback_38_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_38_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_38_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_38;datum_sfc_event@surfbody_feedback_38;"
      "an_depar@surfbody_feedback_38;fg_depar@surfbody_feedback_38;"
      "snow_depth@surfbody_feedback_38;snow_density@surfbody_feedback_38;"
      "lsm@surfbody_feedback_38;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_38;datum_sfc_event@surfbody_feedback_38;"
      "an_depar@surfbody_feedback_38;fg_depar@surfbody_feedback_38;"
      "snow_depth@surfbody_feedback_38;snow_density@surfbody_feedback_38;"
      "lsm@surfbody_feedback_38;datum_status.active@surfbody_feedback_38;"
      "datum_status.passive@surfbody_feedback_38;datum_status.rejected@surfbody_feedback_38;"
      "datum_status.blacklisted@surfbody_feedback_38;datum_status.use_emiskf_only@surfbody_feedback_38;"
      "datum_sfc_event.statid@surfbody_feedback_38;datum_sfc_event.lsmask@surfbody_feedback_38;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_38;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_38;"
      "datum_sfc_event.fg_missing@surfbody_feedback_38;datum_sfc_event.fg2big@surfbody_feedback_38;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_38;"
      "datum_sfc_event.redundant@surfbody_feedback_38;datum_sfc_event.report_rejected@surfbody_feedback_38;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_38_PREPTAG = T;
    CCMA_nT_surfbody_feedback_38_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_38_PREPTAG;
  return CCMA_T_surfbody_feedback_38_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_38(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_38(void *T);
extern int CCMA_Sel_T_surfbody_feedback_38(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_38);
PrePutTable(CCMA, d, double, surfbody_feedback_38);
PreLoadTable(CCMA, surfbody_feedback_38);
PreStoreTable(CCMA, surfbody_feedback_38);
extern void CCMA_Dim_T_surfbody_feedback_38(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_38(void *T);
extern int CCMA_Sql_T_surfbody_feedback_38(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_38(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_39) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_39" : appearance order#264, hierarchy rank# 288, weight = 358.000264 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_39;

#endif /* defined(IS_a_TABLE_surfbody_feedback_39) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_39)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_39_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_39_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_39_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_39_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_39_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_39_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_39_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_39_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_39_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_39"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_39"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_39"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_39"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_39"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_39"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_39"; T[6].name = s; }
    CCMA_T_surfbody_feedback_39_TAG = T;
    CCMA_nT_surfbody_feedback_39_TAG = ntag;
    CCMA_nT_surfbody_feedback_39_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_39_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_39_MEM;
  return CCMA_T_surfbody_feedback_39_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_39_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_39_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_39;datum_sfc_event@surfbody_feedback_39;"
      "an_depar@surfbody_feedback_39;fg_depar@surfbody_feedback_39;"
      "snow_depth@surfbody_feedback_39;snow_density@surfbody_feedback_39;"
      "lsm@surfbody_feedback_39;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_39;datum_sfc_event@surfbody_feedback_39;"
      "an_depar@surfbody_feedback_39;fg_depar@surfbody_feedback_39;"
      "snow_depth@surfbody_feedback_39;snow_density@surfbody_feedback_39;"
      "lsm@surfbody_feedback_39;datum_status.active@surfbody_feedback_39;"
      "datum_status.passive@surfbody_feedback_39;datum_status.rejected@surfbody_feedback_39;"
      "datum_status.blacklisted@surfbody_feedback_39;datum_status.use_emiskf_only@surfbody_feedback_39;"
      "datum_sfc_event.statid@surfbody_feedback_39;datum_sfc_event.lsmask@surfbody_feedback_39;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_39;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_39;"
      "datum_sfc_event.fg_missing@surfbody_feedback_39;datum_sfc_event.fg2big@surfbody_feedback_39;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_39;"
      "datum_sfc_event.redundant@surfbody_feedback_39;datum_sfc_event.report_rejected@surfbody_feedback_39;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_39_PREPTAG = T;
    CCMA_nT_surfbody_feedback_39_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_39_PREPTAG;
  return CCMA_T_surfbody_feedback_39_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_39(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_39(void *T);
extern int CCMA_Sel_T_surfbody_feedback_39(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_39);
PrePutTable(CCMA, d, double, surfbody_feedback_39);
PreLoadTable(CCMA, surfbody_feedback_39);
PreStoreTable(CCMA, surfbody_feedback_39);
extern void CCMA_Dim_T_surfbody_feedback_39(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_39(void *T);
extern int CCMA_Sql_T_surfbody_feedback_39(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_39(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_40) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_40" : appearance order#265, hierarchy rank# 289, weight = 358.000265 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_40;

#endif /* defined(IS_a_TABLE_surfbody_feedback_40) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_40)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_40_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_40_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_40_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_40_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_40_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_40_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_40_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_40_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_40_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_40"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_40"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_40"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_40"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_40"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_40"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_40"; T[6].name = s; }
    CCMA_T_surfbody_feedback_40_TAG = T;
    CCMA_nT_surfbody_feedback_40_TAG = ntag;
    CCMA_nT_surfbody_feedback_40_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_40_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_40_MEM;
  return CCMA_T_surfbody_feedback_40_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_40_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_40_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_40;datum_sfc_event@surfbody_feedback_40;"
      "an_depar@surfbody_feedback_40;fg_depar@surfbody_feedback_40;"
      "snow_depth@surfbody_feedback_40;snow_density@surfbody_feedback_40;"
      "lsm@surfbody_feedback_40;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_40;datum_sfc_event@surfbody_feedback_40;"
      "an_depar@surfbody_feedback_40;fg_depar@surfbody_feedback_40;"
      "snow_depth@surfbody_feedback_40;snow_density@surfbody_feedback_40;"
      "lsm@surfbody_feedback_40;datum_status.active@surfbody_feedback_40;"
      "datum_status.passive@surfbody_feedback_40;datum_status.rejected@surfbody_feedback_40;"
      "datum_status.blacklisted@surfbody_feedback_40;datum_status.use_emiskf_only@surfbody_feedback_40;"
      "datum_sfc_event.statid@surfbody_feedback_40;datum_sfc_event.lsmask@surfbody_feedback_40;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_40;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_40;"
      "datum_sfc_event.fg_missing@surfbody_feedback_40;datum_sfc_event.fg2big@surfbody_feedback_40;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_40;"
      "datum_sfc_event.redundant@surfbody_feedback_40;datum_sfc_event.report_rejected@surfbody_feedback_40;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_40_PREPTAG = T;
    CCMA_nT_surfbody_feedback_40_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_40_PREPTAG;
  return CCMA_T_surfbody_feedback_40_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_40(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_40(void *T);
extern int CCMA_Sel_T_surfbody_feedback_40(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_40);
PrePutTable(CCMA, d, double, surfbody_feedback_40);
PreLoadTable(CCMA, surfbody_feedback_40);
PreStoreTable(CCMA, surfbody_feedback_40);
extern void CCMA_Dim_T_surfbody_feedback_40(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_40(void *T);
extern int CCMA_Sql_T_surfbody_feedback_40(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_40(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_41) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_41" : appearance order#266, hierarchy rank# 290, weight = 358.000266 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_41;

#endif /* defined(IS_a_TABLE_surfbody_feedback_41) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_41)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_41_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_41_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_41_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_41_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_41_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_41_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_41_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_41_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_41_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_41"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_41"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_41"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_41"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_41"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_41"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_41"; T[6].name = s; }
    CCMA_T_surfbody_feedback_41_TAG = T;
    CCMA_nT_surfbody_feedback_41_TAG = ntag;
    CCMA_nT_surfbody_feedback_41_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_41_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_41_MEM;
  return CCMA_T_surfbody_feedback_41_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_41_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_41_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_41;datum_sfc_event@surfbody_feedback_41;"
      "an_depar@surfbody_feedback_41;fg_depar@surfbody_feedback_41;"
      "snow_depth@surfbody_feedback_41;snow_density@surfbody_feedback_41;"
      "lsm@surfbody_feedback_41;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_41;datum_sfc_event@surfbody_feedback_41;"
      "an_depar@surfbody_feedback_41;fg_depar@surfbody_feedback_41;"
      "snow_depth@surfbody_feedback_41;snow_density@surfbody_feedback_41;"
      "lsm@surfbody_feedback_41;datum_status.active@surfbody_feedback_41;"
      "datum_status.passive@surfbody_feedback_41;datum_status.rejected@surfbody_feedback_41;"
      "datum_status.blacklisted@surfbody_feedback_41;datum_status.use_emiskf_only@surfbody_feedback_41;"
      "datum_sfc_event.statid@surfbody_feedback_41;datum_sfc_event.lsmask@surfbody_feedback_41;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_41;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_41;"
      "datum_sfc_event.fg_missing@surfbody_feedback_41;datum_sfc_event.fg2big@surfbody_feedback_41;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_41;"
      "datum_sfc_event.redundant@surfbody_feedback_41;datum_sfc_event.report_rejected@surfbody_feedback_41;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_41_PREPTAG = T;
    CCMA_nT_surfbody_feedback_41_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_41_PREPTAG;
  return CCMA_T_surfbody_feedback_41_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_41(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_41(void *T);
extern int CCMA_Sel_T_surfbody_feedback_41(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_41);
PrePutTable(CCMA, d, double, surfbody_feedback_41);
PreLoadTable(CCMA, surfbody_feedback_41);
PreStoreTable(CCMA, surfbody_feedback_41);
extern void CCMA_Dim_T_surfbody_feedback_41(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_41(void *T);
extern int CCMA_Sql_T_surfbody_feedback_41(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_41(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_42) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_42" : appearance order#267, hierarchy rank# 291, weight = 358.000267 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_42;

#endif /* defined(IS_a_TABLE_surfbody_feedback_42) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_42)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_42_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_42_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_42_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_42_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_42_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_42_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_42_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_42_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_42_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_42"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_42"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_42"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_42"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_42"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_42"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_42"; T[6].name = s; }
    CCMA_T_surfbody_feedback_42_TAG = T;
    CCMA_nT_surfbody_feedback_42_TAG = ntag;
    CCMA_nT_surfbody_feedback_42_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_42_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_42_MEM;
  return CCMA_T_surfbody_feedback_42_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_42_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_42_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_42;datum_sfc_event@surfbody_feedback_42;"
      "an_depar@surfbody_feedback_42;fg_depar@surfbody_feedback_42;"
      "snow_depth@surfbody_feedback_42;snow_density@surfbody_feedback_42;"
      "lsm@surfbody_feedback_42;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_42;datum_sfc_event@surfbody_feedback_42;"
      "an_depar@surfbody_feedback_42;fg_depar@surfbody_feedback_42;"
      "snow_depth@surfbody_feedback_42;snow_density@surfbody_feedback_42;"
      "lsm@surfbody_feedback_42;datum_status.active@surfbody_feedback_42;"
      "datum_status.passive@surfbody_feedback_42;datum_status.rejected@surfbody_feedback_42;"
      "datum_status.blacklisted@surfbody_feedback_42;datum_status.use_emiskf_only@surfbody_feedback_42;"
      "datum_sfc_event.statid@surfbody_feedback_42;datum_sfc_event.lsmask@surfbody_feedback_42;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_42;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_42;"
      "datum_sfc_event.fg_missing@surfbody_feedback_42;datum_sfc_event.fg2big@surfbody_feedback_42;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_42;"
      "datum_sfc_event.redundant@surfbody_feedback_42;datum_sfc_event.report_rejected@surfbody_feedback_42;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_42_PREPTAG = T;
    CCMA_nT_surfbody_feedback_42_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_42_PREPTAG;
  return CCMA_T_surfbody_feedback_42_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_42(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_42(void *T);
extern int CCMA_Sel_T_surfbody_feedback_42(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_42);
PrePutTable(CCMA, d, double, surfbody_feedback_42);
PreLoadTable(CCMA, surfbody_feedback_42);
PreStoreTable(CCMA, surfbody_feedback_42);
extern void CCMA_Dim_T_surfbody_feedback_42(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_42(void *T);
extern int CCMA_Sql_T_surfbody_feedback_42(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_42(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_43) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_43" : appearance order#268, hierarchy rank# 292, weight = 358.000268 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_43;

#endif /* defined(IS_a_TABLE_surfbody_feedback_43) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_43)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_43_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_43_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_43_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_43_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_43_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_43_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_43_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_43_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_43_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_43"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_43"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_43"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_43"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_43"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_43"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_43"; T[6].name = s; }
    CCMA_T_surfbody_feedback_43_TAG = T;
    CCMA_nT_surfbody_feedback_43_TAG = ntag;
    CCMA_nT_surfbody_feedback_43_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_43_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_43_MEM;
  return CCMA_T_surfbody_feedback_43_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_43_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_43_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_43;datum_sfc_event@surfbody_feedback_43;"
      "an_depar@surfbody_feedback_43;fg_depar@surfbody_feedback_43;"
      "snow_depth@surfbody_feedback_43;snow_density@surfbody_feedback_43;"
      "lsm@surfbody_feedback_43;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_43;datum_sfc_event@surfbody_feedback_43;"
      "an_depar@surfbody_feedback_43;fg_depar@surfbody_feedback_43;"
      "snow_depth@surfbody_feedback_43;snow_density@surfbody_feedback_43;"
      "lsm@surfbody_feedback_43;datum_status.active@surfbody_feedback_43;"
      "datum_status.passive@surfbody_feedback_43;datum_status.rejected@surfbody_feedback_43;"
      "datum_status.blacklisted@surfbody_feedback_43;datum_status.use_emiskf_only@surfbody_feedback_43;"
      "datum_sfc_event.statid@surfbody_feedback_43;datum_sfc_event.lsmask@surfbody_feedback_43;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_43;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_43;"
      "datum_sfc_event.fg_missing@surfbody_feedback_43;datum_sfc_event.fg2big@surfbody_feedback_43;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_43;"
      "datum_sfc_event.redundant@surfbody_feedback_43;datum_sfc_event.report_rejected@surfbody_feedback_43;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_43_PREPTAG = T;
    CCMA_nT_surfbody_feedback_43_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_43_PREPTAG;
  return CCMA_T_surfbody_feedback_43_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_43(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_43(void *T);
extern int CCMA_Sel_T_surfbody_feedback_43(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_43);
PrePutTable(CCMA, d, double, surfbody_feedback_43);
PreLoadTable(CCMA, surfbody_feedback_43);
PreStoreTable(CCMA, surfbody_feedback_43);
extern void CCMA_Dim_T_surfbody_feedback_43(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_43(void *T);
extern int CCMA_Sql_T_surfbody_feedback_43(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_43(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_44) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_44" : appearance order#269, hierarchy rank# 293, weight = 358.000269 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_44;

#endif /* defined(IS_a_TABLE_surfbody_feedback_44) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_44)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_44_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_44_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_44_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_44_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_44_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_44_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_44_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_44_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_44_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_44"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_44"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_44"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_44"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_44"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_44"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_44"; T[6].name = s; }
    CCMA_T_surfbody_feedback_44_TAG = T;
    CCMA_nT_surfbody_feedback_44_TAG = ntag;
    CCMA_nT_surfbody_feedback_44_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_44_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_44_MEM;
  return CCMA_T_surfbody_feedback_44_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_44_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_44_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_44;datum_sfc_event@surfbody_feedback_44;"
      "an_depar@surfbody_feedback_44;fg_depar@surfbody_feedback_44;"
      "snow_depth@surfbody_feedback_44;snow_density@surfbody_feedback_44;"
      "lsm@surfbody_feedback_44;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_44;datum_sfc_event@surfbody_feedback_44;"
      "an_depar@surfbody_feedback_44;fg_depar@surfbody_feedback_44;"
      "snow_depth@surfbody_feedback_44;snow_density@surfbody_feedback_44;"
      "lsm@surfbody_feedback_44;datum_status.active@surfbody_feedback_44;"
      "datum_status.passive@surfbody_feedback_44;datum_status.rejected@surfbody_feedback_44;"
      "datum_status.blacklisted@surfbody_feedback_44;datum_status.use_emiskf_only@surfbody_feedback_44;"
      "datum_sfc_event.statid@surfbody_feedback_44;datum_sfc_event.lsmask@surfbody_feedback_44;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_44;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_44;"
      "datum_sfc_event.fg_missing@surfbody_feedback_44;datum_sfc_event.fg2big@surfbody_feedback_44;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_44;"
      "datum_sfc_event.redundant@surfbody_feedback_44;datum_sfc_event.report_rejected@surfbody_feedback_44;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_44_PREPTAG = T;
    CCMA_nT_surfbody_feedback_44_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_44_PREPTAG;
  return CCMA_T_surfbody_feedback_44_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_44(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_44(void *T);
extern int CCMA_Sel_T_surfbody_feedback_44(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_44);
PrePutTable(CCMA, d, double, surfbody_feedback_44);
PreLoadTable(CCMA, surfbody_feedback_44);
PreStoreTable(CCMA, surfbody_feedback_44);
extern void CCMA_Dim_T_surfbody_feedback_44(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_44(void *T);
extern int CCMA_Sql_T_surfbody_feedback_44(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_44(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_45) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_45" : appearance order#270, hierarchy rank# 294, weight = 358.000270 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_45;

#endif /* defined(IS_a_TABLE_surfbody_feedback_45) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_45)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_45_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_45_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_45_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_45_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_45_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_45_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_45_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_45_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_45_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_45"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_45"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_45"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_45"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_45"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_45"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_45"; T[6].name = s; }
    CCMA_T_surfbody_feedback_45_TAG = T;
    CCMA_nT_surfbody_feedback_45_TAG = ntag;
    CCMA_nT_surfbody_feedback_45_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_45_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_45_MEM;
  return CCMA_T_surfbody_feedback_45_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_45_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_45_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_45;datum_sfc_event@surfbody_feedback_45;"
      "an_depar@surfbody_feedback_45;fg_depar@surfbody_feedback_45;"
      "snow_depth@surfbody_feedback_45;snow_density@surfbody_feedback_45;"
      "lsm@surfbody_feedback_45;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_45;datum_sfc_event@surfbody_feedback_45;"
      "an_depar@surfbody_feedback_45;fg_depar@surfbody_feedback_45;"
      "snow_depth@surfbody_feedback_45;snow_density@surfbody_feedback_45;"
      "lsm@surfbody_feedback_45;datum_status.active@surfbody_feedback_45;"
      "datum_status.passive@surfbody_feedback_45;datum_status.rejected@surfbody_feedback_45;"
      "datum_status.blacklisted@surfbody_feedback_45;datum_status.use_emiskf_only@surfbody_feedback_45;"
      "datum_sfc_event.statid@surfbody_feedback_45;datum_sfc_event.lsmask@surfbody_feedback_45;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_45;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_45;"
      "datum_sfc_event.fg_missing@surfbody_feedback_45;datum_sfc_event.fg2big@surfbody_feedback_45;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_45;"
      "datum_sfc_event.redundant@surfbody_feedback_45;datum_sfc_event.report_rejected@surfbody_feedback_45;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_45_PREPTAG = T;
    CCMA_nT_surfbody_feedback_45_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_45_PREPTAG;
  return CCMA_T_surfbody_feedback_45_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_45(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_45(void *T);
extern int CCMA_Sel_T_surfbody_feedback_45(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_45);
PrePutTable(CCMA, d, double, surfbody_feedback_45);
PreLoadTable(CCMA, surfbody_feedback_45);
PreStoreTable(CCMA, surfbody_feedback_45);
extern void CCMA_Dim_T_surfbody_feedback_45(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_45(void *T);
extern int CCMA_Sql_T_surfbody_feedback_45(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_45(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_46) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_46" : appearance order#271, hierarchy rank# 295, weight = 358.000271 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_46;

#endif /* defined(IS_a_TABLE_surfbody_feedback_46) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_46)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_46_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_46_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_46_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_46_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_46_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_46_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_46_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_46_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_46_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_46"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_46"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_46"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_46"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_46"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_46"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_46"; T[6].name = s; }
    CCMA_T_surfbody_feedback_46_TAG = T;
    CCMA_nT_surfbody_feedback_46_TAG = ntag;
    CCMA_nT_surfbody_feedback_46_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_46_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_46_MEM;
  return CCMA_T_surfbody_feedback_46_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_46_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_46_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_46;datum_sfc_event@surfbody_feedback_46;"
      "an_depar@surfbody_feedback_46;fg_depar@surfbody_feedback_46;"
      "snow_depth@surfbody_feedback_46;snow_density@surfbody_feedback_46;"
      "lsm@surfbody_feedback_46;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_46;datum_sfc_event@surfbody_feedback_46;"
      "an_depar@surfbody_feedback_46;fg_depar@surfbody_feedback_46;"
      "snow_depth@surfbody_feedback_46;snow_density@surfbody_feedback_46;"
      "lsm@surfbody_feedback_46;datum_status.active@surfbody_feedback_46;"
      "datum_status.passive@surfbody_feedback_46;datum_status.rejected@surfbody_feedback_46;"
      "datum_status.blacklisted@surfbody_feedback_46;datum_status.use_emiskf_only@surfbody_feedback_46;"
      "datum_sfc_event.statid@surfbody_feedback_46;datum_sfc_event.lsmask@surfbody_feedback_46;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_46;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_46;"
      "datum_sfc_event.fg_missing@surfbody_feedback_46;datum_sfc_event.fg2big@surfbody_feedback_46;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_46;"
      "datum_sfc_event.redundant@surfbody_feedback_46;datum_sfc_event.report_rejected@surfbody_feedback_46;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_46_PREPTAG = T;
    CCMA_nT_surfbody_feedback_46_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_46_PREPTAG;
  return CCMA_T_surfbody_feedback_46_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_46(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_46(void *T);
extern int CCMA_Sel_T_surfbody_feedback_46(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_46);
PrePutTable(CCMA, d, double, surfbody_feedback_46);
PreLoadTable(CCMA, surfbody_feedback_46);
PreStoreTable(CCMA, surfbody_feedback_46);
extern void CCMA_Dim_T_surfbody_feedback_46(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_46(void *T);
extern int CCMA_Sql_T_surfbody_feedback_46(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_46(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_47) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_47" : appearance order#272, hierarchy rank# 296, weight = 358.000272 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_47;

#endif /* defined(IS_a_TABLE_surfbody_feedback_47) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_47)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_47_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_47_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_47_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_47_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_47_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_47_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_47_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_47_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_47_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_47"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_47"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_47"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_47"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_47"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_47"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_47"; T[6].name = s; }
    CCMA_T_surfbody_feedback_47_TAG = T;
    CCMA_nT_surfbody_feedback_47_TAG = ntag;
    CCMA_nT_surfbody_feedback_47_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_47_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_47_MEM;
  return CCMA_T_surfbody_feedback_47_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_47_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_47_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_47;datum_sfc_event@surfbody_feedback_47;"
      "an_depar@surfbody_feedback_47;fg_depar@surfbody_feedback_47;"
      "snow_depth@surfbody_feedback_47;snow_density@surfbody_feedback_47;"
      "lsm@surfbody_feedback_47;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_47;datum_sfc_event@surfbody_feedback_47;"
      "an_depar@surfbody_feedback_47;fg_depar@surfbody_feedback_47;"
      "snow_depth@surfbody_feedback_47;snow_density@surfbody_feedback_47;"
      "lsm@surfbody_feedback_47;datum_status.active@surfbody_feedback_47;"
      "datum_status.passive@surfbody_feedback_47;datum_status.rejected@surfbody_feedback_47;"
      "datum_status.blacklisted@surfbody_feedback_47;datum_status.use_emiskf_only@surfbody_feedback_47;"
      "datum_sfc_event.statid@surfbody_feedback_47;datum_sfc_event.lsmask@surfbody_feedback_47;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_47;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_47;"
      "datum_sfc_event.fg_missing@surfbody_feedback_47;datum_sfc_event.fg2big@surfbody_feedback_47;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_47;"
      "datum_sfc_event.redundant@surfbody_feedback_47;datum_sfc_event.report_rejected@surfbody_feedback_47;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_47_PREPTAG = T;
    CCMA_nT_surfbody_feedback_47_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_47_PREPTAG;
  return CCMA_T_surfbody_feedback_47_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_47(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_47(void *T);
extern int CCMA_Sel_T_surfbody_feedback_47(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_47);
PrePutTable(CCMA, d, double, surfbody_feedback_47);
PreLoadTable(CCMA, surfbody_feedback_47);
PreStoreTable(CCMA, surfbody_feedback_47);
extern void CCMA_Dim_T_surfbody_feedback_47(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_47(void *T);
extern int CCMA_Sql_T_surfbody_feedback_47(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_47(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_48) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_48" : appearance order#273, hierarchy rank# 297, weight = 358.000273 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_48;

#endif /* defined(IS_a_TABLE_surfbody_feedback_48) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_48)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_48_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_48_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_48_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_48_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_48_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_48_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_48_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_48_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_48_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_48"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_48"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_48"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_48"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_48"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_48"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_48"; T[6].name = s; }
    CCMA_T_surfbody_feedback_48_TAG = T;
    CCMA_nT_surfbody_feedback_48_TAG = ntag;
    CCMA_nT_surfbody_feedback_48_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_48_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_48_MEM;
  return CCMA_T_surfbody_feedback_48_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_48_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_48_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_48;datum_sfc_event@surfbody_feedback_48;"
      "an_depar@surfbody_feedback_48;fg_depar@surfbody_feedback_48;"
      "snow_depth@surfbody_feedback_48;snow_density@surfbody_feedback_48;"
      "lsm@surfbody_feedback_48;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_48;datum_sfc_event@surfbody_feedback_48;"
      "an_depar@surfbody_feedback_48;fg_depar@surfbody_feedback_48;"
      "snow_depth@surfbody_feedback_48;snow_density@surfbody_feedback_48;"
      "lsm@surfbody_feedback_48;datum_status.active@surfbody_feedback_48;"
      "datum_status.passive@surfbody_feedback_48;datum_status.rejected@surfbody_feedback_48;"
      "datum_status.blacklisted@surfbody_feedback_48;datum_status.use_emiskf_only@surfbody_feedback_48;"
      "datum_sfc_event.statid@surfbody_feedback_48;datum_sfc_event.lsmask@surfbody_feedback_48;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_48;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_48;"
      "datum_sfc_event.fg_missing@surfbody_feedback_48;datum_sfc_event.fg2big@surfbody_feedback_48;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_48;"
      "datum_sfc_event.redundant@surfbody_feedback_48;datum_sfc_event.report_rejected@surfbody_feedback_48;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_48_PREPTAG = T;
    CCMA_nT_surfbody_feedback_48_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_48_PREPTAG;
  return CCMA_T_surfbody_feedback_48_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_48(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_48(void *T);
extern int CCMA_Sel_T_surfbody_feedback_48(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_48);
PrePutTable(CCMA, d, double, surfbody_feedback_48);
PreLoadTable(CCMA, surfbody_feedback_48);
PreStoreTable(CCMA, surfbody_feedback_48);
extern void CCMA_Dim_T_surfbody_feedback_48(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_48(void *T);
extern int CCMA_Sql_T_surfbody_feedback_48(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_48(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_49) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_49" : appearance order#274, hierarchy rank# 298, weight = 358.000274 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_49;

#endif /* defined(IS_a_TABLE_surfbody_feedback_49) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_49)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_49_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_49_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_49_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_49_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_49_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_49_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_49_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_49_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_49_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_49"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_49"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_49"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_49"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_49"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_49"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_49"; T[6].name = s; }
    CCMA_T_surfbody_feedback_49_TAG = T;
    CCMA_nT_surfbody_feedback_49_TAG = ntag;
    CCMA_nT_surfbody_feedback_49_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_49_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_49_MEM;
  return CCMA_T_surfbody_feedback_49_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_49_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_49_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_49;datum_sfc_event@surfbody_feedback_49;"
      "an_depar@surfbody_feedback_49;fg_depar@surfbody_feedback_49;"
      "snow_depth@surfbody_feedback_49;snow_density@surfbody_feedback_49;"
      "lsm@surfbody_feedback_49;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_49;datum_sfc_event@surfbody_feedback_49;"
      "an_depar@surfbody_feedback_49;fg_depar@surfbody_feedback_49;"
      "snow_depth@surfbody_feedback_49;snow_density@surfbody_feedback_49;"
      "lsm@surfbody_feedback_49;datum_status.active@surfbody_feedback_49;"
      "datum_status.passive@surfbody_feedback_49;datum_status.rejected@surfbody_feedback_49;"
      "datum_status.blacklisted@surfbody_feedback_49;datum_status.use_emiskf_only@surfbody_feedback_49;"
      "datum_sfc_event.statid@surfbody_feedback_49;datum_sfc_event.lsmask@surfbody_feedback_49;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_49;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_49;"
      "datum_sfc_event.fg_missing@surfbody_feedback_49;datum_sfc_event.fg2big@surfbody_feedback_49;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_49;"
      "datum_sfc_event.redundant@surfbody_feedback_49;datum_sfc_event.report_rejected@surfbody_feedback_49;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_49_PREPTAG = T;
    CCMA_nT_surfbody_feedback_49_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_49_PREPTAG;
  return CCMA_T_surfbody_feedback_49_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_49(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_49(void *T);
extern int CCMA_Sel_T_surfbody_feedback_49(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_49);
PrePutTable(CCMA, d, double, surfbody_feedback_49);
PreLoadTable(CCMA, surfbody_feedback_49);
PreStoreTable(CCMA, surfbody_feedback_49);
extern void CCMA_Dim_T_surfbody_feedback_49(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_49(void *T);
extern int CCMA_Sql_T_surfbody_feedback_49(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_49(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_50) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_50" : appearance order#275, hierarchy rank# 299, weight = 358.000275 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_50;

#endif /* defined(IS_a_TABLE_surfbody_feedback_50) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_50)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_50_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_50_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_50_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_50_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_50_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_50_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_50_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_50_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_50_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_50"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_50"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_50"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_50"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_50"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_50"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_50"; T[6].name = s; }
    CCMA_T_surfbody_feedback_50_TAG = T;
    CCMA_nT_surfbody_feedback_50_TAG = ntag;
    CCMA_nT_surfbody_feedback_50_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_50_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_50_MEM;
  return CCMA_T_surfbody_feedback_50_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_50_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_50_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_50;datum_sfc_event@surfbody_feedback_50;"
      "an_depar@surfbody_feedback_50;fg_depar@surfbody_feedback_50;"
      "snow_depth@surfbody_feedback_50;snow_density@surfbody_feedback_50;"
      "lsm@surfbody_feedback_50;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_50;datum_sfc_event@surfbody_feedback_50;"
      "an_depar@surfbody_feedback_50;fg_depar@surfbody_feedback_50;"
      "snow_depth@surfbody_feedback_50;snow_density@surfbody_feedback_50;"
      "lsm@surfbody_feedback_50;datum_status.active@surfbody_feedback_50;"
      "datum_status.passive@surfbody_feedback_50;datum_status.rejected@surfbody_feedback_50;"
      "datum_status.blacklisted@surfbody_feedback_50;datum_status.use_emiskf_only@surfbody_feedback_50;"
      "datum_sfc_event.statid@surfbody_feedback_50;datum_sfc_event.lsmask@surfbody_feedback_50;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_50;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_50;"
      "datum_sfc_event.fg_missing@surfbody_feedback_50;datum_sfc_event.fg2big@surfbody_feedback_50;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_50;"
      "datum_sfc_event.redundant@surfbody_feedback_50;datum_sfc_event.report_rejected@surfbody_feedback_50;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_50_PREPTAG = T;
    CCMA_nT_surfbody_feedback_50_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_50_PREPTAG;
  return CCMA_T_surfbody_feedback_50_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_50(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_50(void *T);
extern int CCMA_Sel_T_surfbody_feedback_50(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_50);
PrePutTable(CCMA, d, double, surfbody_feedback_50);
PreLoadTable(CCMA, surfbody_feedback_50);
PreStoreTable(CCMA, surfbody_feedback_50);
extern void CCMA_Dim_T_surfbody_feedback_50(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_50(void *T);
extern int CCMA_Sql_T_surfbody_feedback_50(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_50(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_51) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_51" : appearance order#276, hierarchy rank# 300, weight = 358.000276 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_51;

#endif /* defined(IS_a_TABLE_surfbody_feedback_51) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_51)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_51_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_51_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_51_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_51_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_51_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_51_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_51_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_51_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_51_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_51"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_51"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_51"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_51"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_51"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_51"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_51"; T[6].name = s; }
    CCMA_T_surfbody_feedback_51_TAG = T;
    CCMA_nT_surfbody_feedback_51_TAG = ntag;
    CCMA_nT_surfbody_feedback_51_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_51_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_51_MEM;
  return CCMA_T_surfbody_feedback_51_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_51_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_51_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_51;datum_sfc_event@surfbody_feedback_51;"
      "an_depar@surfbody_feedback_51;fg_depar@surfbody_feedback_51;"
      "snow_depth@surfbody_feedback_51;snow_density@surfbody_feedback_51;"
      "lsm@surfbody_feedback_51;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_51;datum_sfc_event@surfbody_feedback_51;"
      "an_depar@surfbody_feedback_51;fg_depar@surfbody_feedback_51;"
      "snow_depth@surfbody_feedback_51;snow_density@surfbody_feedback_51;"
      "lsm@surfbody_feedback_51;datum_status.active@surfbody_feedback_51;"
      "datum_status.passive@surfbody_feedback_51;datum_status.rejected@surfbody_feedback_51;"
      "datum_status.blacklisted@surfbody_feedback_51;datum_status.use_emiskf_only@surfbody_feedback_51;"
      "datum_sfc_event.statid@surfbody_feedback_51;datum_sfc_event.lsmask@surfbody_feedback_51;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_51;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_51;"
      "datum_sfc_event.fg_missing@surfbody_feedback_51;datum_sfc_event.fg2big@surfbody_feedback_51;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_51;"
      "datum_sfc_event.redundant@surfbody_feedback_51;datum_sfc_event.report_rejected@surfbody_feedback_51;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_51_PREPTAG = T;
    CCMA_nT_surfbody_feedback_51_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_51_PREPTAG;
  return CCMA_T_surfbody_feedback_51_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_51(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_51(void *T);
extern int CCMA_Sel_T_surfbody_feedback_51(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_51);
PrePutTable(CCMA, d, double, surfbody_feedback_51);
PreLoadTable(CCMA, surfbody_feedback_51);
PreStoreTable(CCMA, surfbody_feedback_51);
extern void CCMA_Dim_T_surfbody_feedback_51(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_51(void *T);
extern int CCMA_Sql_T_surfbody_feedback_51(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_51(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_52) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_52" : appearance order#277, hierarchy rank# 301, weight = 358.000277 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_52;

#endif /* defined(IS_a_TABLE_surfbody_feedback_52) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_52)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_52_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_52_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_52_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_52_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_52_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_52_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_52_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_52_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_52_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_52"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_52"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_52"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_52"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_52"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_52"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_52"; T[6].name = s; }
    CCMA_T_surfbody_feedback_52_TAG = T;
    CCMA_nT_surfbody_feedback_52_TAG = ntag;
    CCMA_nT_surfbody_feedback_52_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_52_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_52_MEM;
  return CCMA_T_surfbody_feedback_52_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_52_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_52_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_52;datum_sfc_event@surfbody_feedback_52;"
      "an_depar@surfbody_feedback_52;fg_depar@surfbody_feedback_52;"
      "snow_depth@surfbody_feedback_52;snow_density@surfbody_feedback_52;"
      "lsm@surfbody_feedback_52;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_52;datum_sfc_event@surfbody_feedback_52;"
      "an_depar@surfbody_feedback_52;fg_depar@surfbody_feedback_52;"
      "snow_depth@surfbody_feedback_52;snow_density@surfbody_feedback_52;"
      "lsm@surfbody_feedback_52;datum_status.active@surfbody_feedback_52;"
      "datum_status.passive@surfbody_feedback_52;datum_status.rejected@surfbody_feedback_52;"
      "datum_status.blacklisted@surfbody_feedback_52;datum_status.use_emiskf_only@surfbody_feedback_52;"
      "datum_sfc_event.statid@surfbody_feedback_52;datum_sfc_event.lsmask@surfbody_feedback_52;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_52;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_52;"
      "datum_sfc_event.fg_missing@surfbody_feedback_52;datum_sfc_event.fg2big@surfbody_feedback_52;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_52;"
      "datum_sfc_event.redundant@surfbody_feedback_52;datum_sfc_event.report_rejected@surfbody_feedback_52;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_52_PREPTAG = T;
    CCMA_nT_surfbody_feedback_52_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_52_PREPTAG;
  return CCMA_T_surfbody_feedback_52_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_52(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_52(void *T);
extern int CCMA_Sel_T_surfbody_feedback_52(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_52);
PrePutTable(CCMA, d, double, surfbody_feedback_52);
PreLoadTable(CCMA, surfbody_feedback_52);
PreStoreTable(CCMA, surfbody_feedback_52);
extern void CCMA_Dim_T_surfbody_feedback_52(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_52(void *T);
extern int CCMA_Sql_T_surfbody_feedback_52(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_52(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_53) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_53" : appearance order#278, hierarchy rank# 302, weight = 358.000278 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_53;

#endif /* defined(IS_a_TABLE_surfbody_feedback_53) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_53)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_53_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_53_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_53_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_53_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_53_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_53_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_53_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_53_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_53_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_53"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_53"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_53"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_53"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_53"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_53"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_53"; T[6].name = s; }
    CCMA_T_surfbody_feedback_53_TAG = T;
    CCMA_nT_surfbody_feedback_53_TAG = ntag;
    CCMA_nT_surfbody_feedback_53_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_53_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_53_MEM;
  return CCMA_T_surfbody_feedback_53_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_53_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_53_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_53;datum_sfc_event@surfbody_feedback_53;"
      "an_depar@surfbody_feedback_53;fg_depar@surfbody_feedback_53;"
      "snow_depth@surfbody_feedback_53;snow_density@surfbody_feedback_53;"
      "lsm@surfbody_feedback_53;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_53;datum_sfc_event@surfbody_feedback_53;"
      "an_depar@surfbody_feedback_53;fg_depar@surfbody_feedback_53;"
      "snow_depth@surfbody_feedback_53;snow_density@surfbody_feedback_53;"
      "lsm@surfbody_feedback_53;datum_status.active@surfbody_feedback_53;"
      "datum_status.passive@surfbody_feedback_53;datum_status.rejected@surfbody_feedback_53;"
      "datum_status.blacklisted@surfbody_feedback_53;datum_status.use_emiskf_only@surfbody_feedback_53;"
      "datum_sfc_event.statid@surfbody_feedback_53;datum_sfc_event.lsmask@surfbody_feedback_53;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_53;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_53;"
      "datum_sfc_event.fg_missing@surfbody_feedback_53;datum_sfc_event.fg2big@surfbody_feedback_53;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_53;"
      "datum_sfc_event.redundant@surfbody_feedback_53;datum_sfc_event.report_rejected@surfbody_feedback_53;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_53_PREPTAG = T;
    CCMA_nT_surfbody_feedback_53_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_53_PREPTAG;
  return CCMA_T_surfbody_feedback_53_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_53(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_53(void *T);
extern int CCMA_Sel_T_surfbody_feedback_53(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_53);
PrePutTable(CCMA, d, double, surfbody_feedback_53);
PreLoadTable(CCMA, surfbody_feedback_53);
PreStoreTable(CCMA, surfbody_feedback_53);
extern void CCMA_Dim_T_surfbody_feedback_53(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_53(void *T);
extern int CCMA_Sql_T_surfbody_feedback_53(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_53(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_54) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_54" : appearance order#279, hierarchy rank# 303, weight = 358.000279 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_54;

#endif /* defined(IS_a_TABLE_surfbody_feedback_54) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_54)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_54_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_54_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_54_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_54_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_54_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_54_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_54_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_54_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_54_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_54"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_54"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_54"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_54"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_54"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_54"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_54"; T[6].name = s; }
    CCMA_T_surfbody_feedback_54_TAG = T;
    CCMA_nT_surfbody_feedback_54_TAG = ntag;
    CCMA_nT_surfbody_feedback_54_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_54_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_54_MEM;
  return CCMA_T_surfbody_feedback_54_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_54_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_54_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_54;datum_sfc_event@surfbody_feedback_54;"
      "an_depar@surfbody_feedback_54;fg_depar@surfbody_feedback_54;"
      "snow_depth@surfbody_feedback_54;snow_density@surfbody_feedback_54;"
      "lsm@surfbody_feedback_54;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_54;datum_sfc_event@surfbody_feedback_54;"
      "an_depar@surfbody_feedback_54;fg_depar@surfbody_feedback_54;"
      "snow_depth@surfbody_feedback_54;snow_density@surfbody_feedback_54;"
      "lsm@surfbody_feedback_54;datum_status.active@surfbody_feedback_54;"
      "datum_status.passive@surfbody_feedback_54;datum_status.rejected@surfbody_feedback_54;"
      "datum_status.blacklisted@surfbody_feedback_54;datum_status.use_emiskf_only@surfbody_feedback_54;"
      "datum_sfc_event.statid@surfbody_feedback_54;datum_sfc_event.lsmask@surfbody_feedback_54;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_54;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_54;"
      "datum_sfc_event.fg_missing@surfbody_feedback_54;datum_sfc_event.fg2big@surfbody_feedback_54;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_54;"
      "datum_sfc_event.redundant@surfbody_feedback_54;datum_sfc_event.report_rejected@surfbody_feedback_54;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_54_PREPTAG = T;
    CCMA_nT_surfbody_feedback_54_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_54_PREPTAG;
  return CCMA_T_surfbody_feedback_54_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_54(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_54(void *T);
extern int CCMA_Sel_T_surfbody_feedback_54(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_54);
PrePutTable(CCMA, d, double, surfbody_feedback_54);
PreLoadTable(CCMA, surfbody_feedback_54);
PreStoreTable(CCMA, surfbody_feedback_54);
extern void CCMA_Dim_T_surfbody_feedback_54(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_54(void *T);
extern int CCMA_Sql_T_surfbody_feedback_54(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_54(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_55) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_55" : appearance order#280, hierarchy rank# 304, weight = 358.000280 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_55;

#endif /* defined(IS_a_TABLE_surfbody_feedback_55) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_55)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_55_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_55_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_55_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_55_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_55_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_55_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_55_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_55_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_55_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_55"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_55"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_55"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_55"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_55"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_55"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_55"; T[6].name = s; }
    CCMA_T_surfbody_feedback_55_TAG = T;
    CCMA_nT_surfbody_feedback_55_TAG = ntag;
    CCMA_nT_surfbody_feedback_55_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_55_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_55_MEM;
  return CCMA_T_surfbody_feedback_55_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_55_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_55_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_55;datum_sfc_event@surfbody_feedback_55;"
      "an_depar@surfbody_feedback_55;fg_depar@surfbody_feedback_55;"
      "snow_depth@surfbody_feedback_55;snow_density@surfbody_feedback_55;"
      "lsm@surfbody_feedback_55;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_55;datum_sfc_event@surfbody_feedback_55;"
      "an_depar@surfbody_feedback_55;fg_depar@surfbody_feedback_55;"
      "snow_depth@surfbody_feedback_55;snow_density@surfbody_feedback_55;"
      "lsm@surfbody_feedback_55;datum_status.active@surfbody_feedback_55;"
      "datum_status.passive@surfbody_feedback_55;datum_status.rejected@surfbody_feedback_55;"
      "datum_status.blacklisted@surfbody_feedback_55;datum_status.use_emiskf_only@surfbody_feedback_55;"
      "datum_sfc_event.statid@surfbody_feedback_55;datum_sfc_event.lsmask@surfbody_feedback_55;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_55;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_55;"
      "datum_sfc_event.fg_missing@surfbody_feedback_55;datum_sfc_event.fg2big@surfbody_feedback_55;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_55;"
      "datum_sfc_event.redundant@surfbody_feedback_55;datum_sfc_event.report_rejected@surfbody_feedback_55;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_55_PREPTAG = T;
    CCMA_nT_surfbody_feedback_55_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_55_PREPTAG;
  return CCMA_T_surfbody_feedback_55_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_55(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_55(void *T);
extern int CCMA_Sel_T_surfbody_feedback_55(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_55);
PrePutTable(CCMA, d, double, surfbody_feedback_55);
PreLoadTable(CCMA, surfbody_feedback_55);
PreStoreTable(CCMA, surfbody_feedback_55);
extern void CCMA_Dim_T_surfbody_feedback_55(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_55(void *T);
extern int CCMA_Sql_T_surfbody_feedback_55(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_55(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_56) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_56" : appearance order#281, hierarchy rank# 305, weight = 358.000281 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_56;

#endif /* defined(IS_a_TABLE_surfbody_feedback_56) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_56)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_56_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_56_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_56_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_56_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_56_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_56_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_56_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_56_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_56_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_56"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_56"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_56"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_56"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_56"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_56"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_56"; T[6].name = s; }
    CCMA_T_surfbody_feedback_56_TAG = T;
    CCMA_nT_surfbody_feedback_56_TAG = ntag;
    CCMA_nT_surfbody_feedback_56_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_56_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_56_MEM;
  return CCMA_T_surfbody_feedback_56_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_56_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_56_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_56;datum_sfc_event@surfbody_feedback_56;"
      "an_depar@surfbody_feedback_56;fg_depar@surfbody_feedback_56;"
      "snow_depth@surfbody_feedback_56;snow_density@surfbody_feedback_56;"
      "lsm@surfbody_feedback_56;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_56;datum_sfc_event@surfbody_feedback_56;"
      "an_depar@surfbody_feedback_56;fg_depar@surfbody_feedback_56;"
      "snow_depth@surfbody_feedback_56;snow_density@surfbody_feedback_56;"
      "lsm@surfbody_feedback_56;datum_status.active@surfbody_feedback_56;"
      "datum_status.passive@surfbody_feedback_56;datum_status.rejected@surfbody_feedback_56;"
      "datum_status.blacklisted@surfbody_feedback_56;datum_status.use_emiskf_only@surfbody_feedback_56;"
      "datum_sfc_event.statid@surfbody_feedback_56;datum_sfc_event.lsmask@surfbody_feedback_56;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_56;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_56;"
      "datum_sfc_event.fg_missing@surfbody_feedback_56;datum_sfc_event.fg2big@surfbody_feedback_56;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_56;"
      "datum_sfc_event.redundant@surfbody_feedback_56;datum_sfc_event.report_rejected@surfbody_feedback_56;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_56_PREPTAG = T;
    CCMA_nT_surfbody_feedback_56_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_56_PREPTAG;
  return CCMA_T_surfbody_feedback_56_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_56(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_56(void *T);
extern int CCMA_Sel_T_surfbody_feedback_56(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_56);
PrePutTable(CCMA, d, double, surfbody_feedback_56);
PreLoadTable(CCMA, surfbody_feedback_56);
PreStoreTable(CCMA, surfbody_feedback_56);
extern void CCMA_Dim_T_surfbody_feedback_56(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_56(void *T);
extern int CCMA_Sql_T_surfbody_feedback_56(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_56(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_57) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_57" : appearance order#282, hierarchy rank# 306, weight = 358.000282 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_57;

#endif /* defined(IS_a_TABLE_surfbody_feedback_57) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_57)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_57_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_57_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_57_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_57_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_57_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_57_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_57_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_57_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_57_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_57"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_57"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_57"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_57"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_57"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_57"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_57"; T[6].name = s; }
    CCMA_T_surfbody_feedback_57_TAG = T;
    CCMA_nT_surfbody_feedback_57_TAG = ntag;
    CCMA_nT_surfbody_feedback_57_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_57_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_57_MEM;
  return CCMA_T_surfbody_feedback_57_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_57_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_57_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_57;datum_sfc_event@surfbody_feedback_57;"
      "an_depar@surfbody_feedback_57;fg_depar@surfbody_feedback_57;"
      "snow_depth@surfbody_feedback_57;snow_density@surfbody_feedback_57;"
      "lsm@surfbody_feedback_57;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_57;datum_sfc_event@surfbody_feedback_57;"
      "an_depar@surfbody_feedback_57;fg_depar@surfbody_feedback_57;"
      "snow_depth@surfbody_feedback_57;snow_density@surfbody_feedback_57;"
      "lsm@surfbody_feedback_57;datum_status.active@surfbody_feedback_57;"
      "datum_status.passive@surfbody_feedback_57;datum_status.rejected@surfbody_feedback_57;"
      "datum_status.blacklisted@surfbody_feedback_57;datum_status.use_emiskf_only@surfbody_feedback_57;"
      "datum_sfc_event.statid@surfbody_feedback_57;datum_sfc_event.lsmask@surfbody_feedback_57;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_57;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_57;"
      "datum_sfc_event.fg_missing@surfbody_feedback_57;datum_sfc_event.fg2big@surfbody_feedback_57;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_57;"
      "datum_sfc_event.redundant@surfbody_feedback_57;datum_sfc_event.report_rejected@surfbody_feedback_57;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_57_PREPTAG = T;
    CCMA_nT_surfbody_feedback_57_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_57_PREPTAG;
  return CCMA_T_surfbody_feedback_57_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_57(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_57(void *T);
extern int CCMA_Sel_T_surfbody_feedback_57(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_57);
PrePutTable(CCMA, d, double, surfbody_feedback_57);
PreLoadTable(CCMA, surfbody_feedback_57);
PreStoreTable(CCMA, surfbody_feedback_57);
extern void CCMA_Dim_T_surfbody_feedback_57(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_57(void *T);
extern int CCMA_Sql_T_surfbody_feedback_57(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_57(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_58) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_58" : appearance order#283, hierarchy rank# 307, weight = 358.000283 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_58;

#endif /* defined(IS_a_TABLE_surfbody_feedback_58) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_58)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_58_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_58_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_58_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_58_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_58_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_58_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_58_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_58_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_58_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_58"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_58"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_58"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_58"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_58"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_58"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_58"; T[6].name = s; }
    CCMA_T_surfbody_feedback_58_TAG = T;
    CCMA_nT_surfbody_feedback_58_TAG = ntag;
    CCMA_nT_surfbody_feedback_58_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_58_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_58_MEM;
  return CCMA_T_surfbody_feedback_58_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_58_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_58_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_58;datum_sfc_event@surfbody_feedback_58;"
      "an_depar@surfbody_feedback_58;fg_depar@surfbody_feedback_58;"
      "snow_depth@surfbody_feedback_58;snow_density@surfbody_feedback_58;"
      "lsm@surfbody_feedback_58;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_58;datum_sfc_event@surfbody_feedback_58;"
      "an_depar@surfbody_feedback_58;fg_depar@surfbody_feedback_58;"
      "snow_depth@surfbody_feedback_58;snow_density@surfbody_feedback_58;"
      "lsm@surfbody_feedback_58;datum_status.active@surfbody_feedback_58;"
      "datum_status.passive@surfbody_feedback_58;datum_status.rejected@surfbody_feedback_58;"
      "datum_status.blacklisted@surfbody_feedback_58;datum_status.use_emiskf_only@surfbody_feedback_58;"
      "datum_sfc_event.statid@surfbody_feedback_58;datum_sfc_event.lsmask@surfbody_feedback_58;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_58;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_58;"
      "datum_sfc_event.fg_missing@surfbody_feedback_58;datum_sfc_event.fg2big@surfbody_feedback_58;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_58;"
      "datum_sfc_event.redundant@surfbody_feedback_58;datum_sfc_event.report_rejected@surfbody_feedback_58;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_58_PREPTAG = T;
    CCMA_nT_surfbody_feedback_58_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_58_PREPTAG;
  return CCMA_T_surfbody_feedback_58_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_58(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_58(void *T);
extern int CCMA_Sel_T_surfbody_feedback_58(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_58);
PrePutTable(CCMA, d, double, surfbody_feedback_58);
PreLoadTable(CCMA, surfbody_feedback_58);
PreStoreTable(CCMA, surfbody_feedback_58);
extern void CCMA_Dim_T_surfbody_feedback_58(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_58(void *T);
extern int CCMA_Sql_T_surfbody_feedback_58(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_58(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_59) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_59" : appearance order#284, hierarchy rank# 308, weight = 358.000284 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_59;

#endif /* defined(IS_a_TABLE_surfbody_feedback_59) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_59)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_59_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_59_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_59_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_59_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_59_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_59_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_59_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_59_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_59_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_59"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_59"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_59"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_59"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_59"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_59"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_59"; T[6].name = s; }
    CCMA_T_surfbody_feedback_59_TAG = T;
    CCMA_nT_surfbody_feedback_59_TAG = ntag;
    CCMA_nT_surfbody_feedback_59_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_59_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_59_MEM;
  return CCMA_T_surfbody_feedback_59_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_59_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_59_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_59;datum_sfc_event@surfbody_feedback_59;"
      "an_depar@surfbody_feedback_59;fg_depar@surfbody_feedback_59;"
      "snow_depth@surfbody_feedback_59;snow_density@surfbody_feedback_59;"
      "lsm@surfbody_feedback_59;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_59;datum_sfc_event@surfbody_feedback_59;"
      "an_depar@surfbody_feedback_59;fg_depar@surfbody_feedback_59;"
      "snow_depth@surfbody_feedback_59;snow_density@surfbody_feedback_59;"
      "lsm@surfbody_feedback_59;datum_status.active@surfbody_feedback_59;"
      "datum_status.passive@surfbody_feedback_59;datum_status.rejected@surfbody_feedback_59;"
      "datum_status.blacklisted@surfbody_feedback_59;datum_status.use_emiskf_only@surfbody_feedback_59;"
      "datum_sfc_event.statid@surfbody_feedback_59;datum_sfc_event.lsmask@surfbody_feedback_59;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_59;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_59;"
      "datum_sfc_event.fg_missing@surfbody_feedback_59;datum_sfc_event.fg2big@surfbody_feedback_59;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_59;"
      "datum_sfc_event.redundant@surfbody_feedback_59;datum_sfc_event.report_rejected@surfbody_feedback_59;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_59_PREPTAG = T;
    CCMA_nT_surfbody_feedback_59_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_59_PREPTAG;
  return CCMA_T_surfbody_feedback_59_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_59(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_59(void *T);
extern int CCMA_Sel_T_surfbody_feedback_59(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_59);
PrePutTable(CCMA, d, double, surfbody_feedback_59);
PreLoadTable(CCMA, surfbody_feedback_59);
PreStoreTable(CCMA, surfbody_feedback_59);
extern void CCMA_Dim_T_surfbody_feedback_59(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_59(void *T);
extern int CCMA_Sql_T_surfbody_feedback_59(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_59(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_60) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_60" : appearance order#285, hierarchy rank# 309, weight = 358.000285 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_60;

#endif /* defined(IS_a_TABLE_surfbody_feedback_60) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_60)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_60_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_60_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_60_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_60_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_60_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_60_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_60_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_60_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_60_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_60"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_60"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_60"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_60"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_60"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_60"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_60"; T[6].name = s; }
    CCMA_T_surfbody_feedback_60_TAG = T;
    CCMA_nT_surfbody_feedback_60_TAG = ntag;
    CCMA_nT_surfbody_feedback_60_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_60_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_60_MEM;
  return CCMA_T_surfbody_feedback_60_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_60_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_60_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_60;datum_sfc_event@surfbody_feedback_60;"
      "an_depar@surfbody_feedback_60;fg_depar@surfbody_feedback_60;"
      "snow_depth@surfbody_feedback_60;snow_density@surfbody_feedback_60;"
      "lsm@surfbody_feedback_60;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_60;datum_sfc_event@surfbody_feedback_60;"
      "an_depar@surfbody_feedback_60;fg_depar@surfbody_feedback_60;"
      "snow_depth@surfbody_feedback_60;snow_density@surfbody_feedback_60;"
      "lsm@surfbody_feedback_60;datum_status.active@surfbody_feedback_60;"
      "datum_status.passive@surfbody_feedback_60;datum_status.rejected@surfbody_feedback_60;"
      "datum_status.blacklisted@surfbody_feedback_60;datum_status.use_emiskf_only@surfbody_feedback_60;"
      "datum_sfc_event.statid@surfbody_feedback_60;datum_sfc_event.lsmask@surfbody_feedback_60;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_60;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_60;"
      "datum_sfc_event.fg_missing@surfbody_feedback_60;datum_sfc_event.fg2big@surfbody_feedback_60;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_60;"
      "datum_sfc_event.redundant@surfbody_feedback_60;datum_sfc_event.report_rejected@surfbody_feedback_60;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_60_PREPTAG = T;
    CCMA_nT_surfbody_feedback_60_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_60_PREPTAG;
  return CCMA_T_surfbody_feedback_60_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_60(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_60(void *T);
extern int CCMA_Sel_T_surfbody_feedback_60(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_60);
PrePutTable(CCMA, d, double, surfbody_feedback_60);
PreLoadTable(CCMA, surfbody_feedback_60);
PreStoreTable(CCMA, surfbody_feedback_60);
extern void CCMA_Dim_T_surfbody_feedback_60(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_60(void *T);
extern int CCMA_Sql_T_surfbody_feedback_60(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_60(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_61) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_61" : appearance order#286, hierarchy rank# 310, weight = 358.000286 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_61;

#endif /* defined(IS_a_TABLE_surfbody_feedback_61) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_61)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_61_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_61_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_61_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_61_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_61_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_61_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_61_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_61_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_61_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_61"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_61"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_61"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_61"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_61"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_61"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_61"; T[6].name = s; }
    CCMA_T_surfbody_feedback_61_TAG = T;
    CCMA_nT_surfbody_feedback_61_TAG = ntag;
    CCMA_nT_surfbody_feedback_61_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_61_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_61_MEM;
  return CCMA_T_surfbody_feedback_61_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_61_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_61_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_61;datum_sfc_event@surfbody_feedback_61;"
      "an_depar@surfbody_feedback_61;fg_depar@surfbody_feedback_61;"
      "snow_depth@surfbody_feedback_61;snow_density@surfbody_feedback_61;"
      "lsm@surfbody_feedback_61;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_61;datum_sfc_event@surfbody_feedback_61;"
      "an_depar@surfbody_feedback_61;fg_depar@surfbody_feedback_61;"
      "snow_depth@surfbody_feedback_61;snow_density@surfbody_feedback_61;"
      "lsm@surfbody_feedback_61;datum_status.active@surfbody_feedback_61;"
      "datum_status.passive@surfbody_feedback_61;datum_status.rejected@surfbody_feedback_61;"
      "datum_status.blacklisted@surfbody_feedback_61;datum_status.use_emiskf_only@surfbody_feedback_61;"
      "datum_sfc_event.statid@surfbody_feedback_61;datum_sfc_event.lsmask@surfbody_feedback_61;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_61;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_61;"
      "datum_sfc_event.fg_missing@surfbody_feedback_61;datum_sfc_event.fg2big@surfbody_feedback_61;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_61;"
      "datum_sfc_event.redundant@surfbody_feedback_61;datum_sfc_event.report_rejected@surfbody_feedback_61;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_61_PREPTAG = T;
    CCMA_nT_surfbody_feedback_61_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_61_PREPTAG;
  return CCMA_T_surfbody_feedback_61_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_61(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_61(void *T);
extern int CCMA_Sel_T_surfbody_feedback_61(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_61);
PrePutTable(CCMA, d, double, surfbody_feedback_61);
PreLoadTable(CCMA, surfbody_feedback_61);
PreStoreTable(CCMA, surfbody_feedback_61);
extern void CCMA_Dim_T_surfbody_feedback_61(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_61(void *T);
extern int CCMA_Sql_T_surfbody_feedback_61(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_61(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_62) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_62" : appearance order#287, hierarchy rank# 311, weight = 358.000287 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_62;

#endif /* defined(IS_a_TABLE_surfbody_feedback_62) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_62)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_62_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_62_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_62_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_62_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_62_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_62_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_62_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_62_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_62_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_62"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_62"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_62"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_62"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_62"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_62"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_62"; T[6].name = s; }
    CCMA_T_surfbody_feedback_62_TAG = T;
    CCMA_nT_surfbody_feedback_62_TAG = ntag;
    CCMA_nT_surfbody_feedback_62_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_62_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_62_MEM;
  return CCMA_T_surfbody_feedback_62_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_62_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_62_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_62;datum_sfc_event@surfbody_feedback_62;"
      "an_depar@surfbody_feedback_62;fg_depar@surfbody_feedback_62;"
      "snow_depth@surfbody_feedback_62;snow_density@surfbody_feedback_62;"
      "lsm@surfbody_feedback_62;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_62;datum_sfc_event@surfbody_feedback_62;"
      "an_depar@surfbody_feedback_62;fg_depar@surfbody_feedback_62;"
      "snow_depth@surfbody_feedback_62;snow_density@surfbody_feedback_62;"
      "lsm@surfbody_feedback_62;datum_status.active@surfbody_feedback_62;"
      "datum_status.passive@surfbody_feedback_62;datum_status.rejected@surfbody_feedback_62;"
      "datum_status.blacklisted@surfbody_feedback_62;datum_status.use_emiskf_only@surfbody_feedback_62;"
      "datum_sfc_event.statid@surfbody_feedback_62;datum_sfc_event.lsmask@surfbody_feedback_62;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_62;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_62;"
      "datum_sfc_event.fg_missing@surfbody_feedback_62;datum_sfc_event.fg2big@surfbody_feedback_62;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_62;"
      "datum_sfc_event.redundant@surfbody_feedback_62;datum_sfc_event.report_rejected@surfbody_feedback_62;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_62_PREPTAG = T;
    CCMA_nT_surfbody_feedback_62_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_62_PREPTAG;
  return CCMA_T_surfbody_feedback_62_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_62(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_62(void *T);
extern int CCMA_Sel_T_surfbody_feedback_62(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_62);
PrePutTable(CCMA, d, double, surfbody_feedback_62);
PreLoadTable(CCMA, surfbody_feedback_62);
PreStoreTable(CCMA, surfbody_feedback_62);
extern void CCMA_Dim_T_surfbody_feedback_62(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_62(void *T);
extern int CCMA_Sql_T_surfbody_feedback_62(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_62(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_63) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_63" : appearance order#288, hierarchy rank# 312, weight = 358.000288 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_63;

#endif /* defined(IS_a_TABLE_surfbody_feedback_63) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_63)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_63_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_63_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_63_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_63_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_63_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_63_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_63_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_63_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_63_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_63"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_63"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_63"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_63"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_63"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_63"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_63"; T[6].name = s; }
    CCMA_T_surfbody_feedback_63_TAG = T;
    CCMA_nT_surfbody_feedback_63_TAG = ntag;
    CCMA_nT_surfbody_feedback_63_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_63_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_63_MEM;
  return CCMA_T_surfbody_feedback_63_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_63_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_63_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_63;datum_sfc_event@surfbody_feedback_63;"
      "an_depar@surfbody_feedback_63;fg_depar@surfbody_feedback_63;"
      "snow_depth@surfbody_feedback_63;snow_density@surfbody_feedback_63;"
      "lsm@surfbody_feedback_63;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_63;datum_sfc_event@surfbody_feedback_63;"
      "an_depar@surfbody_feedback_63;fg_depar@surfbody_feedback_63;"
      "snow_depth@surfbody_feedback_63;snow_density@surfbody_feedback_63;"
      "lsm@surfbody_feedback_63;datum_status.active@surfbody_feedback_63;"
      "datum_status.passive@surfbody_feedback_63;datum_status.rejected@surfbody_feedback_63;"
      "datum_status.blacklisted@surfbody_feedback_63;datum_status.use_emiskf_only@surfbody_feedback_63;"
      "datum_sfc_event.statid@surfbody_feedback_63;datum_sfc_event.lsmask@surfbody_feedback_63;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_63;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_63;"
      "datum_sfc_event.fg_missing@surfbody_feedback_63;datum_sfc_event.fg2big@surfbody_feedback_63;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_63;"
      "datum_sfc_event.redundant@surfbody_feedback_63;datum_sfc_event.report_rejected@surfbody_feedback_63;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_63_PREPTAG = T;
    CCMA_nT_surfbody_feedback_63_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_63_PREPTAG;
  return CCMA_T_surfbody_feedback_63_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_63(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_63(void *T);
extern int CCMA_Sel_T_surfbody_feedback_63(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_63);
PrePutTable(CCMA, d, double, surfbody_feedback_63);
PreLoadTable(CCMA, surfbody_feedback_63);
PreStoreTable(CCMA, surfbody_feedback_63);
extern void CCMA_Dim_T_surfbody_feedback_63(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_63(void *T);
extern int CCMA_Sql_T_surfbody_feedback_63(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_63(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_64) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_64" : appearance order#289, hierarchy rank# 313, weight = 358.000289 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_64;

#endif /* defined(IS_a_TABLE_surfbody_feedback_64) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_64)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_64_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_64_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_64_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_64_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_64_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_64_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_64_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_64_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_64_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_64"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_64"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_64"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_64"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_64"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_64"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_64"; T[6].name = s; }
    CCMA_T_surfbody_feedback_64_TAG = T;
    CCMA_nT_surfbody_feedback_64_TAG = ntag;
    CCMA_nT_surfbody_feedback_64_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_64_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_64_MEM;
  return CCMA_T_surfbody_feedback_64_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_64_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_64_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_64;datum_sfc_event@surfbody_feedback_64;"
      "an_depar@surfbody_feedback_64;fg_depar@surfbody_feedback_64;"
      "snow_depth@surfbody_feedback_64;snow_density@surfbody_feedback_64;"
      "lsm@surfbody_feedback_64;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_64;datum_sfc_event@surfbody_feedback_64;"
      "an_depar@surfbody_feedback_64;fg_depar@surfbody_feedback_64;"
      "snow_depth@surfbody_feedback_64;snow_density@surfbody_feedback_64;"
      "lsm@surfbody_feedback_64;datum_status.active@surfbody_feedback_64;"
      "datum_status.passive@surfbody_feedback_64;datum_status.rejected@surfbody_feedback_64;"
      "datum_status.blacklisted@surfbody_feedback_64;datum_status.use_emiskf_only@surfbody_feedback_64;"
      "datum_sfc_event.statid@surfbody_feedback_64;datum_sfc_event.lsmask@surfbody_feedback_64;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_64;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_64;"
      "datum_sfc_event.fg_missing@surfbody_feedback_64;datum_sfc_event.fg2big@surfbody_feedback_64;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_64;"
      "datum_sfc_event.redundant@surfbody_feedback_64;datum_sfc_event.report_rejected@surfbody_feedback_64;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_64_PREPTAG = T;
    CCMA_nT_surfbody_feedback_64_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_64_PREPTAG;
  return CCMA_T_surfbody_feedback_64_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_64(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_64(void *T);
extern int CCMA_Sel_T_surfbody_feedback_64(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_64);
PrePutTable(CCMA, d, double, surfbody_feedback_64);
PreLoadTable(CCMA, surfbody_feedback_64);
PreStoreTable(CCMA, surfbody_feedback_64);
extern void CCMA_Dim_T_surfbody_feedback_64(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_64(void *T);
extern int CCMA_Sql_T_surfbody_feedback_64(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_64(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_65) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_65" : appearance order#290, hierarchy rank# 314, weight = 358.000290 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_65;

#endif /* defined(IS_a_TABLE_surfbody_feedback_65) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_65)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_65_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_65_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_65_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_65_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_65_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_65_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_65_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_65_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_65_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_65"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_65"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_65"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_65"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_65"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_65"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_65"; T[6].name = s; }
    CCMA_T_surfbody_feedback_65_TAG = T;
    CCMA_nT_surfbody_feedback_65_TAG = ntag;
    CCMA_nT_surfbody_feedback_65_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_65_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_65_MEM;
  return CCMA_T_surfbody_feedback_65_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_65_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_65_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_65;datum_sfc_event@surfbody_feedback_65;"
      "an_depar@surfbody_feedback_65;fg_depar@surfbody_feedback_65;"
      "snow_depth@surfbody_feedback_65;snow_density@surfbody_feedback_65;"
      "lsm@surfbody_feedback_65;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_65;datum_sfc_event@surfbody_feedback_65;"
      "an_depar@surfbody_feedback_65;fg_depar@surfbody_feedback_65;"
      "snow_depth@surfbody_feedback_65;snow_density@surfbody_feedback_65;"
      "lsm@surfbody_feedback_65;datum_status.active@surfbody_feedback_65;"
      "datum_status.passive@surfbody_feedback_65;datum_status.rejected@surfbody_feedback_65;"
      "datum_status.blacklisted@surfbody_feedback_65;datum_status.use_emiskf_only@surfbody_feedback_65;"
      "datum_sfc_event.statid@surfbody_feedback_65;datum_sfc_event.lsmask@surfbody_feedback_65;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_65;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_65;"
      "datum_sfc_event.fg_missing@surfbody_feedback_65;datum_sfc_event.fg2big@surfbody_feedback_65;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_65;"
      "datum_sfc_event.redundant@surfbody_feedback_65;datum_sfc_event.report_rejected@surfbody_feedback_65;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_65_PREPTAG = T;
    CCMA_nT_surfbody_feedback_65_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_65_PREPTAG;
  return CCMA_T_surfbody_feedback_65_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_65(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_65(void *T);
extern int CCMA_Sel_T_surfbody_feedback_65(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_65);
PrePutTable(CCMA, d, double, surfbody_feedback_65);
PreLoadTable(CCMA, surfbody_feedback_65);
PreStoreTable(CCMA, surfbody_feedback_65);
extern void CCMA_Dim_T_surfbody_feedback_65(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_65(void *T);
extern int CCMA_Sql_T_surfbody_feedback_65(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_65(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_66) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_66" : appearance order#291, hierarchy rank# 315, weight = 358.000291 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_66;

#endif /* defined(IS_a_TABLE_surfbody_feedback_66) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_66)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_66_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_66_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_66_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_66_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_66_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_66_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_66_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_66_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_66_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_66"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_66"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_66"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_66"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_66"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_66"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_66"; T[6].name = s; }
    CCMA_T_surfbody_feedback_66_TAG = T;
    CCMA_nT_surfbody_feedback_66_TAG = ntag;
    CCMA_nT_surfbody_feedback_66_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_66_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_66_MEM;
  return CCMA_T_surfbody_feedback_66_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_66_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_66_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_66;datum_sfc_event@surfbody_feedback_66;"
      "an_depar@surfbody_feedback_66;fg_depar@surfbody_feedback_66;"
      "snow_depth@surfbody_feedback_66;snow_density@surfbody_feedback_66;"
      "lsm@surfbody_feedback_66;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_66;datum_sfc_event@surfbody_feedback_66;"
      "an_depar@surfbody_feedback_66;fg_depar@surfbody_feedback_66;"
      "snow_depth@surfbody_feedback_66;snow_density@surfbody_feedback_66;"
      "lsm@surfbody_feedback_66;datum_status.active@surfbody_feedback_66;"
      "datum_status.passive@surfbody_feedback_66;datum_status.rejected@surfbody_feedback_66;"
      "datum_status.blacklisted@surfbody_feedback_66;datum_status.use_emiskf_only@surfbody_feedback_66;"
      "datum_sfc_event.statid@surfbody_feedback_66;datum_sfc_event.lsmask@surfbody_feedback_66;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_66;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_66;"
      "datum_sfc_event.fg_missing@surfbody_feedback_66;datum_sfc_event.fg2big@surfbody_feedback_66;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_66;"
      "datum_sfc_event.redundant@surfbody_feedback_66;datum_sfc_event.report_rejected@surfbody_feedback_66;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_66_PREPTAG = T;
    CCMA_nT_surfbody_feedback_66_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_66_PREPTAG;
  return CCMA_T_surfbody_feedback_66_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_66(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_66(void *T);
extern int CCMA_Sel_T_surfbody_feedback_66(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_66);
PrePutTable(CCMA, d, double, surfbody_feedback_66);
PreLoadTable(CCMA, surfbody_feedback_66);
PreStoreTable(CCMA, surfbody_feedback_66);
extern void CCMA_Dim_T_surfbody_feedback_66(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_66(void *T);
extern int CCMA_Sql_T_surfbody_feedback_66(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_66(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_67) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_67" : appearance order#292, hierarchy rank# 316, weight = 358.000292 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_67;

#endif /* defined(IS_a_TABLE_surfbody_feedback_67) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_67)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_67_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_67_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_67_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_67_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_67_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_67_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_67_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_67_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_67_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_67"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_67"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_67"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_67"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_67"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_67"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_67"; T[6].name = s; }
    CCMA_T_surfbody_feedback_67_TAG = T;
    CCMA_nT_surfbody_feedback_67_TAG = ntag;
    CCMA_nT_surfbody_feedback_67_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_67_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_67_MEM;
  return CCMA_T_surfbody_feedback_67_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_67_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_67_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_67;datum_sfc_event@surfbody_feedback_67;"
      "an_depar@surfbody_feedback_67;fg_depar@surfbody_feedback_67;"
      "snow_depth@surfbody_feedback_67;snow_density@surfbody_feedback_67;"
      "lsm@surfbody_feedback_67;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_67;datum_sfc_event@surfbody_feedback_67;"
      "an_depar@surfbody_feedback_67;fg_depar@surfbody_feedback_67;"
      "snow_depth@surfbody_feedback_67;snow_density@surfbody_feedback_67;"
      "lsm@surfbody_feedback_67;datum_status.active@surfbody_feedback_67;"
      "datum_status.passive@surfbody_feedback_67;datum_status.rejected@surfbody_feedback_67;"
      "datum_status.blacklisted@surfbody_feedback_67;datum_status.use_emiskf_only@surfbody_feedback_67;"
      "datum_sfc_event.statid@surfbody_feedback_67;datum_sfc_event.lsmask@surfbody_feedback_67;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_67;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_67;"
      "datum_sfc_event.fg_missing@surfbody_feedback_67;datum_sfc_event.fg2big@surfbody_feedback_67;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_67;"
      "datum_sfc_event.redundant@surfbody_feedback_67;datum_sfc_event.report_rejected@surfbody_feedback_67;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_67_PREPTAG = T;
    CCMA_nT_surfbody_feedback_67_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_67_PREPTAG;
  return CCMA_T_surfbody_feedback_67_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_67(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_67(void *T);
extern int CCMA_Sel_T_surfbody_feedback_67(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_67);
PrePutTable(CCMA, d, double, surfbody_feedback_67);
PreLoadTable(CCMA, surfbody_feedback_67);
PreStoreTable(CCMA, surfbody_feedback_67);
extern void CCMA_Dim_T_surfbody_feedback_67(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_67(void *T);
extern int CCMA_Sql_T_surfbody_feedback_67(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_67(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_68) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_68" : appearance order#293, hierarchy rank# 317, weight = 358.000293 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_68;

#endif /* defined(IS_a_TABLE_surfbody_feedback_68) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_68)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_68_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_68_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_68_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_68_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_68_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_68_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_68_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_68_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_68_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_68"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_68"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_68"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_68"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_68"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_68"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_68"; T[6].name = s; }
    CCMA_T_surfbody_feedback_68_TAG = T;
    CCMA_nT_surfbody_feedback_68_TAG = ntag;
    CCMA_nT_surfbody_feedback_68_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_68_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_68_MEM;
  return CCMA_T_surfbody_feedback_68_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_68_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_68_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_68;datum_sfc_event@surfbody_feedback_68;"
      "an_depar@surfbody_feedback_68;fg_depar@surfbody_feedback_68;"
      "snow_depth@surfbody_feedback_68;snow_density@surfbody_feedback_68;"
      "lsm@surfbody_feedback_68;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_68;datum_sfc_event@surfbody_feedback_68;"
      "an_depar@surfbody_feedback_68;fg_depar@surfbody_feedback_68;"
      "snow_depth@surfbody_feedback_68;snow_density@surfbody_feedback_68;"
      "lsm@surfbody_feedback_68;datum_status.active@surfbody_feedback_68;"
      "datum_status.passive@surfbody_feedback_68;datum_status.rejected@surfbody_feedback_68;"
      "datum_status.blacklisted@surfbody_feedback_68;datum_status.use_emiskf_only@surfbody_feedback_68;"
      "datum_sfc_event.statid@surfbody_feedback_68;datum_sfc_event.lsmask@surfbody_feedback_68;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_68;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_68;"
      "datum_sfc_event.fg_missing@surfbody_feedback_68;datum_sfc_event.fg2big@surfbody_feedback_68;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_68;"
      "datum_sfc_event.redundant@surfbody_feedback_68;datum_sfc_event.report_rejected@surfbody_feedback_68;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_68_PREPTAG = T;
    CCMA_nT_surfbody_feedback_68_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_68_PREPTAG;
  return CCMA_T_surfbody_feedback_68_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_68(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_68(void *T);
extern int CCMA_Sel_T_surfbody_feedback_68(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_68);
PrePutTable(CCMA, d, double, surfbody_feedback_68);
PreLoadTable(CCMA, surfbody_feedback_68);
PreStoreTable(CCMA, surfbody_feedback_68);
extern void CCMA_Dim_T_surfbody_feedback_68(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_68(void *T);
extern int CCMA_Sql_T_surfbody_feedback_68(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_68(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_69) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_69" : appearance order#294, hierarchy rank# 318, weight = 358.000294 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_69;

#endif /* defined(IS_a_TABLE_surfbody_feedback_69) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_69)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_69_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_69_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_69_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_69_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_69_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_69_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_69_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_69_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_69_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_69"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_69"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_69"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_69"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_69"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_69"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_69"; T[6].name = s; }
    CCMA_T_surfbody_feedback_69_TAG = T;
    CCMA_nT_surfbody_feedback_69_TAG = ntag;
    CCMA_nT_surfbody_feedback_69_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_69_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_69_MEM;
  return CCMA_T_surfbody_feedback_69_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_69_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_69_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_69;datum_sfc_event@surfbody_feedback_69;"
      "an_depar@surfbody_feedback_69;fg_depar@surfbody_feedback_69;"
      "snow_depth@surfbody_feedback_69;snow_density@surfbody_feedback_69;"
      "lsm@surfbody_feedback_69;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_69;datum_sfc_event@surfbody_feedback_69;"
      "an_depar@surfbody_feedback_69;fg_depar@surfbody_feedback_69;"
      "snow_depth@surfbody_feedback_69;snow_density@surfbody_feedback_69;"
      "lsm@surfbody_feedback_69;datum_status.active@surfbody_feedback_69;"
      "datum_status.passive@surfbody_feedback_69;datum_status.rejected@surfbody_feedback_69;"
      "datum_status.blacklisted@surfbody_feedback_69;datum_status.use_emiskf_only@surfbody_feedback_69;"
      "datum_sfc_event.statid@surfbody_feedback_69;datum_sfc_event.lsmask@surfbody_feedback_69;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_69;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_69;"
      "datum_sfc_event.fg_missing@surfbody_feedback_69;datum_sfc_event.fg2big@surfbody_feedback_69;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_69;"
      "datum_sfc_event.redundant@surfbody_feedback_69;datum_sfc_event.report_rejected@surfbody_feedback_69;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_69_PREPTAG = T;
    CCMA_nT_surfbody_feedback_69_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_69_PREPTAG;
  return CCMA_T_surfbody_feedback_69_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_69(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_69(void *T);
extern int CCMA_Sel_T_surfbody_feedback_69(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_69);
PrePutTable(CCMA, d, double, surfbody_feedback_69);
PreLoadTable(CCMA, surfbody_feedback_69);
PreStoreTable(CCMA, surfbody_feedback_69);
extern void CCMA_Dim_T_surfbody_feedback_69(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_69(void *T);
extern int CCMA_Sql_T_surfbody_feedback_69(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_69(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_70) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_70" : appearance order#295, hierarchy rank# 319, weight = 358.000295 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_70;

#endif /* defined(IS_a_TABLE_surfbody_feedback_70) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_70)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_70_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_70_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_70_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_70_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_70_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_70_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_70_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_70_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_70_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_70"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_70"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_70"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_70"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_70"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_70"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_70"; T[6].name = s; }
    CCMA_T_surfbody_feedback_70_TAG = T;
    CCMA_nT_surfbody_feedback_70_TAG = ntag;
    CCMA_nT_surfbody_feedback_70_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_70_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_70_MEM;
  return CCMA_T_surfbody_feedback_70_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_70_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_70_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_70;datum_sfc_event@surfbody_feedback_70;"
      "an_depar@surfbody_feedback_70;fg_depar@surfbody_feedback_70;"
      "snow_depth@surfbody_feedback_70;snow_density@surfbody_feedback_70;"
      "lsm@surfbody_feedback_70;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_70;datum_sfc_event@surfbody_feedback_70;"
      "an_depar@surfbody_feedback_70;fg_depar@surfbody_feedback_70;"
      "snow_depth@surfbody_feedback_70;snow_density@surfbody_feedback_70;"
      "lsm@surfbody_feedback_70;datum_status.active@surfbody_feedback_70;"
      "datum_status.passive@surfbody_feedback_70;datum_status.rejected@surfbody_feedback_70;"
      "datum_status.blacklisted@surfbody_feedback_70;datum_status.use_emiskf_only@surfbody_feedback_70;"
      "datum_sfc_event.statid@surfbody_feedback_70;datum_sfc_event.lsmask@surfbody_feedback_70;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_70;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_70;"
      "datum_sfc_event.fg_missing@surfbody_feedback_70;datum_sfc_event.fg2big@surfbody_feedback_70;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_70;"
      "datum_sfc_event.redundant@surfbody_feedback_70;datum_sfc_event.report_rejected@surfbody_feedback_70;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_70_PREPTAG = T;
    CCMA_nT_surfbody_feedback_70_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_70_PREPTAG;
  return CCMA_T_surfbody_feedback_70_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_70(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_70(void *T);
extern int CCMA_Sel_T_surfbody_feedback_70(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_70);
PrePutTable(CCMA, d, double, surfbody_feedback_70);
PreLoadTable(CCMA, surfbody_feedback_70);
PreStoreTable(CCMA, surfbody_feedback_70);
extern void CCMA_Dim_T_surfbody_feedback_70(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_70(void *T);
extern int CCMA_Sql_T_surfbody_feedback_70(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_70(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_71) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_71" : appearance order#296, hierarchy rank# 320, weight = 358.000296 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_71;

#endif /* defined(IS_a_TABLE_surfbody_feedback_71) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_71)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_71_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_71_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_71_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_71_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_71_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_71_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_71_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_71_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_71_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_71"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_71"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_71"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_71"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_71"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_71"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_71"; T[6].name = s; }
    CCMA_T_surfbody_feedback_71_TAG = T;
    CCMA_nT_surfbody_feedback_71_TAG = ntag;
    CCMA_nT_surfbody_feedback_71_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_71_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_71_MEM;
  return CCMA_T_surfbody_feedback_71_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_71_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_71_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_71;datum_sfc_event@surfbody_feedback_71;"
      "an_depar@surfbody_feedback_71;fg_depar@surfbody_feedback_71;"
      "snow_depth@surfbody_feedback_71;snow_density@surfbody_feedback_71;"
      "lsm@surfbody_feedback_71;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_71;datum_sfc_event@surfbody_feedback_71;"
      "an_depar@surfbody_feedback_71;fg_depar@surfbody_feedback_71;"
      "snow_depth@surfbody_feedback_71;snow_density@surfbody_feedback_71;"
      "lsm@surfbody_feedback_71;datum_status.active@surfbody_feedback_71;"
      "datum_status.passive@surfbody_feedback_71;datum_status.rejected@surfbody_feedback_71;"
      "datum_status.blacklisted@surfbody_feedback_71;datum_status.use_emiskf_only@surfbody_feedback_71;"
      "datum_sfc_event.statid@surfbody_feedback_71;datum_sfc_event.lsmask@surfbody_feedback_71;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_71;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_71;"
      "datum_sfc_event.fg_missing@surfbody_feedback_71;datum_sfc_event.fg2big@surfbody_feedback_71;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_71;"
      "datum_sfc_event.redundant@surfbody_feedback_71;datum_sfc_event.report_rejected@surfbody_feedback_71;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_71_PREPTAG = T;
    CCMA_nT_surfbody_feedback_71_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_71_PREPTAG;
  return CCMA_T_surfbody_feedback_71_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_71(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_71(void *T);
extern int CCMA_Sel_T_surfbody_feedback_71(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_71);
PrePutTable(CCMA, d, double, surfbody_feedback_71);
PreLoadTable(CCMA, surfbody_feedback_71);
PreStoreTable(CCMA, surfbody_feedback_71);
extern void CCMA_Dim_T_surfbody_feedback_71(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_71(void *T);
extern int CCMA_Sql_T_surfbody_feedback_71(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_71(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_72) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_72" : appearance order#297, hierarchy rank# 321, weight = 358.000297 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_72;

#endif /* defined(IS_a_TABLE_surfbody_feedback_72) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_72)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_72_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_72_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_72_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_72_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_72_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_72_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_72_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_72_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_72_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_72"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_72"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_72"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_72"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_72"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_72"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_72"; T[6].name = s; }
    CCMA_T_surfbody_feedback_72_TAG = T;
    CCMA_nT_surfbody_feedback_72_TAG = ntag;
    CCMA_nT_surfbody_feedback_72_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_72_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_72_MEM;
  return CCMA_T_surfbody_feedback_72_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_72_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_72_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_72;datum_sfc_event@surfbody_feedback_72;"
      "an_depar@surfbody_feedback_72;fg_depar@surfbody_feedback_72;"
      "snow_depth@surfbody_feedback_72;snow_density@surfbody_feedback_72;"
      "lsm@surfbody_feedback_72;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_72;datum_sfc_event@surfbody_feedback_72;"
      "an_depar@surfbody_feedback_72;fg_depar@surfbody_feedback_72;"
      "snow_depth@surfbody_feedback_72;snow_density@surfbody_feedback_72;"
      "lsm@surfbody_feedback_72;datum_status.active@surfbody_feedback_72;"
      "datum_status.passive@surfbody_feedback_72;datum_status.rejected@surfbody_feedback_72;"
      "datum_status.blacklisted@surfbody_feedback_72;datum_status.use_emiskf_only@surfbody_feedback_72;"
      "datum_sfc_event.statid@surfbody_feedback_72;datum_sfc_event.lsmask@surfbody_feedback_72;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_72;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_72;"
      "datum_sfc_event.fg_missing@surfbody_feedback_72;datum_sfc_event.fg2big@surfbody_feedback_72;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_72;"
      "datum_sfc_event.redundant@surfbody_feedback_72;datum_sfc_event.report_rejected@surfbody_feedback_72;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_72_PREPTAG = T;
    CCMA_nT_surfbody_feedback_72_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_72_PREPTAG;
  return CCMA_T_surfbody_feedback_72_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_72(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_72(void *T);
extern int CCMA_Sel_T_surfbody_feedback_72(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_72);
PrePutTable(CCMA, d, double, surfbody_feedback_72);
PreLoadTable(CCMA, surfbody_feedback_72);
PreStoreTable(CCMA, surfbody_feedback_72);
extern void CCMA_Dim_T_surfbody_feedback_72(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_72(void *T);
extern int CCMA_Sql_T_surfbody_feedback_72(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_72(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_73) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_73" : appearance order#298, hierarchy rank# 322, weight = 358.000298 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_73;

#endif /* defined(IS_a_TABLE_surfbody_feedback_73) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_73)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_73_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_73_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_73_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_73_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_73_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_73_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_73_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_73_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_73_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_73"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_73"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_73"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_73"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_73"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_73"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_73"; T[6].name = s; }
    CCMA_T_surfbody_feedback_73_TAG = T;
    CCMA_nT_surfbody_feedback_73_TAG = ntag;
    CCMA_nT_surfbody_feedback_73_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_73_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_73_MEM;
  return CCMA_T_surfbody_feedback_73_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_73_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_73_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_73;datum_sfc_event@surfbody_feedback_73;"
      "an_depar@surfbody_feedback_73;fg_depar@surfbody_feedback_73;"
      "snow_depth@surfbody_feedback_73;snow_density@surfbody_feedback_73;"
      "lsm@surfbody_feedback_73;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_73;datum_sfc_event@surfbody_feedback_73;"
      "an_depar@surfbody_feedback_73;fg_depar@surfbody_feedback_73;"
      "snow_depth@surfbody_feedback_73;snow_density@surfbody_feedback_73;"
      "lsm@surfbody_feedback_73;datum_status.active@surfbody_feedback_73;"
      "datum_status.passive@surfbody_feedback_73;datum_status.rejected@surfbody_feedback_73;"
      "datum_status.blacklisted@surfbody_feedback_73;datum_status.use_emiskf_only@surfbody_feedback_73;"
      "datum_sfc_event.statid@surfbody_feedback_73;datum_sfc_event.lsmask@surfbody_feedback_73;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_73;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_73;"
      "datum_sfc_event.fg_missing@surfbody_feedback_73;datum_sfc_event.fg2big@surfbody_feedback_73;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_73;"
      "datum_sfc_event.redundant@surfbody_feedback_73;datum_sfc_event.report_rejected@surfbody_feedback_73;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_73_PREPTAG = T;
    CCMA_nT_surfbody_feedback_73_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_73_PREPTAG;
  return CCMA_T_surfbody_feedback_73_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_73(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_73(void *T);
extern int CCMA_Sel_T_surfbody_feedback_73(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_73);
PrePutTable(CCMA, d, double, surfbody_feedback_73);
PreLoadTable(CCMA, surfbody_feedback_73);
PreStoreTable(CCMA, surfbody_feedback_73);
extern void CCMA_Dim_T_surfbody_feedback_73(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_73(void *T);
extern int CCMA_Sql_T_surfbody_feedback_73(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_73(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_74) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_74" : appearance order#299, hierarchy rank# 323, weight = 358.000299 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_74;

#endif /* defined(IS_a_TABLE_surfbody_feedback_74) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_74)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_74_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_74_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_74_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_74_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_74_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_74_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_74_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_74_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_74_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_74"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_74"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_74"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_74"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_74"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_74"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_74"; T[6].name = s; }
    CCMA_T_surfbody_feedback_74_TAG = T;
    CCMA_nT_surfbody_feedback_74_TAG = ntag;
    CCMA_nT_surfbody_feedback_74_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_74_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_74_MEM;
  return CCMA_T_surfbody_feedback_74_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_74_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_74_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_74;datum_sfc_event@surfbody_feedback_74;"
      "an_depar@surfbody_feedback_74;fg_depar@surfbody_feedback_74;"
      "snow_depth@surfbody_feedback_74;snow_density@surfbody_feedback_74;"
      "lsm@surfbody_feedback_74;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_74;datum_sfc_event@surfbody_feedback_74;"
      "an_depar@surfbody_feedback_74;fg_depar@surfbody_feedback_74;"
      "snow_depth@surfbody_feedback_74;snow_density@surfbody_feedback_74;"
      "lsm@surfbody_feedback_74;datum_status.active@surfbody_feedback_74;"
      "datum_status.passive@surfbody_feedback_74;datum_status.rejected@surfbody_feedback_74;"
      "datum_status.blacklisted@surfbody_feedback_74;datum_status.use_emiskf_only@surfbody_feedback_74;"
      "datum_sfc_event.statid@surfbody_feedback_74;datum_sfc_event.lsmask@surfbody_feedback_74;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_74;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_74;"
      "datum_sfc_event.fg_missing@surfbody_feedback_74;datum_sfc_event.fg2big@surfbody_feedback_74;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_74;"
      "datum_sfc_event.redundant@surfbody_feedback_74;datum_sfc_event.report_rejected@surfbody_feedback_74;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_74_PREPTAG = T;
    CCMA_nT_surfbody_feedback_74_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_74_PREPTAG;
  return CCMA_T_surfbody_feedback_74_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_74(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_74(void *T);
extern int CCMA_Sel_T_surfbody_feedback_74(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_74);
PrePutTable(CCMA, d, double, surfbody_feedback_74);
PreLoadTable(CCMA, surfbody_feedback_74);
PreStoreTable(CCMA, surfbody_feedback_74);
extern void CCMA_Dim_T_surfbody_feedback_74(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_74(void *T);
extern int CCMA_Sql_T_surfbody_feedback_74(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_74(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_75) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_75" : appearance order#300, hierarchy rank# 324, weight = 358.000300 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_75;

#endif /* defined(IS_a_TABLE_surfbody_feedback_75) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_75)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_75_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_75_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_75_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_75_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_75_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_75_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_75_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_75_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_75_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_75"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_75"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_75"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_75"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_75"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_75"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_75"; T[6].name = s; }
    CCMA_T_surfbody_feedback_75_TAG = T;
    CCMA_nT_surfbody_feedback_75_TAG = ntag;
    CCMA_nT_surfbody_feedback_75_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_75_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_75_MEM;
  return CCMA_T_surfbody_feedback_75_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_75_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_75_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_75;datum_sfc_event@surfbody_feedback_75;"
      "an_depar@surfbody_feedback_75;fg_depar@surfbody_feedback_75;"
      "snow_depth@surfbody_feedback_75;snow_density@surfbody_feedback_75;"
      "lsm@surfbody_feedback_75;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_75;datum_sfc_event@surfbody_feedback_75;"
      "an_depar@surfbody_feedback_75;fg_depar@surfbody_feedback_75;"
      "snow_depth@surfbody_feedback_75;snow_density@surfbody_feedback_75;"
      "lsm@surfbody_feedback_75;datum_status.active@surfbody_feedback_75;"
      "datum_status.passive@surfbody_feedback_75;datum_status.rejected@surfbody_feedback_75;"
      "datum_status.blacklisted@surfbody_feedback_75;datum_status.use_emiskf_only@surfbody_feedback_75;"
      "datum_sfc_event.statid@surfbody_feedback_75;datum_sfc_event.lsmask@surfbody_feedback_75;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_75;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_75;"
      "datum_sfc_event.fg_missing@surfbody_feedback_75;datum_sfc_event.fg2big@surfbody_feedback_75;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_75;"
      "datum_sfc_event.redundant@surfbody_feedback_75;datum_sfc_event.report_rejected@surfbody_feedback_75;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_75_PREPTAG = T;
    CCMA_nT_surfbody_feedback_75_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_75_PREPTAG;
  return CCMA_T_surfbody_feedback_75_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_75(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_75(void *T);
extern int CCMA_Sel_T_surfbody_feedback_75(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_75);
PrePutTable(CCMA, d, double, surfbody_feedback_75);
PreLoadTable(CCMA, surfbody_feedback_75);
PreStoreTable(CCMA, surfbody_feedback_75);
extern void CCMA_Dim_T_surfbody_feedback_75(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_75(void *T);
extern int CCMA_Sql_T_surfbody_feedback_75(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_75(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_76) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_76" : appearance order#301, hierarchy rank# 325, weight = 358.000301 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_76;

#endif /* defined(IS_a_TABLE_surfbody_feedback_76) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_76)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_76_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_76_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_76_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_76_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_76_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_76_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_76_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_76_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_76_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_76"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_76"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_76"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_76"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_76"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_76"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_76"; T[6].name = s; }
    CCMA_T_surfbody_feedback_76_TAG = T;
    CCMA_nT_surfbody_feedback_76_TAG = ntag;
    CCMA_nT_surfbody_feedback_76_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_76_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_76_MEM;
  return CCMA_T_surfbody_feedback_76_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_76_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_76_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_76;datum_sfc_event@surfbody_feedback_76;"
      "an_depar@surfbody_feedback_76;fg_depar@surfbody_feedback_76;"
      "snow_depth@surfbody_feedback_76;snow_density@surfbody_feedback_76;"
      "lsm@surfbody_feedback_76;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_76;datum_sfc_event@surfbody_feedback_76;"
      "an_depar@surfbody_feedback_76;fg_depar@surfbody_feedback_76;"
      "snow_depth@surfbody_feedback_76;snow_density@surfbody_feedback_76;"
      "lsm@surfbody_feedback_76;datum_status.active@surfbody_feedback_76;"
      "datum_status.passive@surfbody_feedback_76;datum_status.rejected@surfbody_feedback_76;"
      "datum_status.blacklisted@surfbody_feedback_76;datum_status.use_emiskf_only@surfbody_feedback_76;"
      "datum_sfc_event.statid@surfbody_feedback_76;datum_sfc_event.lsmask@surfbody_feedback_76;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_76;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_76;"
      "datum_sfc_event.fg_missing@surfbody_feedback_76;datum_sfc_event.fg2big@surfbody_feedback_76;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_76;"
      "datum_sfc_event.redundant@surfbody_feedback_76;datum_sfc_event.report_rejected@surfbody_feedback_76;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_76_PREPTAG = T;
    CCMA_nT_surfbody_feedback_76_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_76_PREPTAG;
  return CCMA_T_surfbody_feedback_76_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_76(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_76(void *T);
extern int CCMA_Sel_T_surfbody_feedback_76(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_76);
PrePutTable(CCMA, d, double, surfbody_feedback_76);
PreLoadTable(CCMA, surfbody_feedback_76);
PreStoreTable(CCMA, surfbody_feedback_76);
extern void CCMA_Dim_T_surfbody_feedback_76(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_76(void *T);
extern int CCMA_Sql_T_surfbody_feedback_76(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_76(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_77) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_77" : appearance order#302, hierarchy rank# 326, weight = 358.000302 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_77;

#endif /* defined(IS_a_TABLE_surfbody_feedback_77) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_77)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_77_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_77_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_77_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_77_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_77_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_77_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_77_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_77_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_77_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_77"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_77"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_77"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_77"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_77"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_77"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_77"; T[6].name = s; }
    CCMA_T_surfbody_feedback_77_TAG = T;
    CCMA_nT_surfbody_feedback_77_TAG = ntag;
    CCMA_nT_surfbody_feedback_77_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_77_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_77_MEM;
  return CCMA_T_surfbody_feedback_77_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_77_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_77_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_77;datum_sfc_event@surfbody_feedback_77;"
      "an_depar@surfbody_feedback_77;fg_depar@surfbody_feedback_77;"
      "snow_depth@surfbody_feedback_77;snow_density@surfbody_feedback_77;"
      "lsm@surfbody_feedback_77;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_77;datum_sfc_event@surfbody_feedback_77;"
      "an_depar@surfbody_feedback_77;fg_depar@surfbody_feedback_77;"
      "snow_depth@surfbody_feedback_77;snow_density@surfbody_feedback_77;"
      "lsm@surfbody_feedback_77;datum_status.active@surfbody_feedback_77;"
      "datum_status.passive@surfbody_feedback_77;datum_status.rejected@surfbody_feedback_77;"
      "datum_status.blacklisted@surfbody_feedback_77;datum_status.use_emiskf_only@surfbody_feedback_77;"
      "datum_sfc_event.statid@surfbody_feedback_77;datum_sfc_event.lsmask@surfbody_feedback_77;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_77;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_77;"
      "datum_sfc_event.fg_missing@surfbody_feedback_77;datum_sfc_event.fg2big@surfbody_feedback_77;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_77;"
      "datum_sfc_event.redundant@surfbody_feedback_77;datum_sfc_event.report_rejected@surfbody_feedback_77;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_77_PREPTAG = T;
    CCMA_nT_surfbody_feedback_77_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_77_PREPTAG;
  return CCMA_T_surfbody_feedback_77_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_77(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_77(void *T);
extern int CCMA_Sel_T_surfbody_feedback_77(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_77);
PrePutTable(CCMA, d, double, surfbody_feedback_77);
PreLoadTable(CCMA, surfbody_feedback_77);
PreStoreTable(CCMA, surfbody_feedback_77);
extern void CCMA_Dim_T_surfbody_feedback_77(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_77(void *T);
extern int CCMA_Sql_T_surfbody_feedback_77(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_77(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_78) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_78" : appearance order#303, hierarchy rank# 327, weight = 358.000303 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_78;

#endif /* defined(IS_a_TABLE_surfbody_feedback_78) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_78)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_78_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_78_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_78_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_78_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_78_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_78_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_78_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_78_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_78_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_78"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_78"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_78"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_78"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_78"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_78"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_78"; T[6].name = s; }
    CCMA_T_surfbody_feedback_78_TAG = T;
    CCMA_nT_surfbody_feedback_78_TAG = ntag;
    CCMA_nT_surfbody_feedback_78_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_78_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_78_MEM;
  return CCMA_T_surfbody_feedback_78_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_78_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_78_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_78;datum_sfc_event@surfbody_feedback_78;"
      "an_depar@surfbody_feedback_78;fg_depar@surfbody_feedback_78;"
      "snow_depth@surfbody_feedback_78;snow_density@surfbody_feedback_78;"
      "lsm@surfbody_feedback_78;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_78;datum_sfc_event@surfbody_feedback_78;"
      "an_depar@surfbody_feedback_78;fg_depar@surfbody_feedback_78;"
      "snow_depth@surfbody_feedback_78;snow_density@surfbody_feedback_78;"
      "lsm@surfbody_feedback_78;datum_status.active@surfbody_feedback_78;"
      "datum_status.passive@surfbody_feedback_78;datum_status.rejected@surfbody_feedback_78;"
      "datum_status.blacklisted@surfbody_feedback_78;datum_status.use_emiskf_only@surfbody_feedback_78;"
      "datum_sfc_event.statid@surfbody_feedback_78;datum_sfc_event.lsmask@surfbody_feedback_78;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_78;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_78;"
      "datum_sfc_event.fg_missing@surfbody_feedback_78;datum_sfc_event.fg2big@surfbody_feedback_78;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_78;"
      "datum_sfc_event.redundant@surfbody_feedback_78;datum_sfc_event.report_rejected@surfbody_feedback_78;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_78_PREPTAG = T;
    CCMA_nT_surfbody_feedback_78_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_78_PREPTAG;
  return CCMA_T_surfbody_feedback_78_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_78(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_78(void *T);
extern int CCMA_Sel_T_surfbody_feedback_78(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_78);
PrePutTable(CCMA, d, double, surfbody_feedback_78);
PreLoadTable(CCMA, surfbody_feedback_78);
PreStoreTable(CCMA, surfbody_feedback_78);
extern void CCMA_Dim_T_surfbody_feedback_78(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_78(void *T);
extern int CCMA_Sql_T_surfbody_feedback_78(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_78(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_79) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_79" : appearance order#304, hierarchy rank# 328, weight = 358.000304 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_79;

#endif /* defined(IS_a_TABLE_surfbody_feedback_79) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_79)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_79_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_79_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_79_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_79_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_79_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_79_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_79_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_79_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_79_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_79"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_79"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_79"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_79"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_79"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_79"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_79"; T[6].name = s; }
    CCMA_T_surfbody_feedback_79_TAG = T;
    CCMA_nT_surfbody_feedback_79_TAG = ntag;
    CCMA_nT_surfbody_feedback_79_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_79_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_79_MEM;
  return CCMA_T_surfbody_feedback_79_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_79_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_79_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_79;datum_sfc_event@surfbody_feedback_79;"
      "an_depar@surfbody_feedback_79;fg_depar@surfbody_feedback_79;"
      "snow_depth@surfbody_feedback_79;snow_density@surfbody_feedback_79;"
      "lsm@surfbody_feedback_79;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_79;datum_sfc_event@surfbody_feedback_79;"
      "an_depar@surfbody_feedback_79;fg_depar@surfbody_feedback_79;"
      "snow_depth@surfbody_feedback_79;snow_density@surfbody_feedback_79;"
      "lsm@surfbody_feedback_79;datum_status.active@surfbody_feedback_79;"
      "datum_status.passive@surfbody_feedback_79;datum_status.rejected@surfbody_feedback_79;"
      "datum_status.blacklisted@surfbody_feedback_79;datum_status.use_emiskf_only@surfbody_feedback_79;"
      "datum_sfc_event.statid@surfbody_feedback_79;datum_sfc_event.lsmask@surfbody_feedback_79;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_79;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_79;"
      "datum_sfc_event.fg_missing@surfbody_feedback_79;datum_sfc_event.fg2big@surfbody_feedback_79;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_79;"
      "datum_sfc_event.redundant@surfbody_feedback_79;datum_sfc_event.report_rejected@surfbody_feedback_79;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_79_PREPTAG = T;
    CCMA_nT_surfbody_feedback_79_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_79_PREPTAG;
  return CCMA_T_surfbody_feedback_79_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_79(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_79(void *T);
extern int CCMA_Sel_T_surfbody_feedback_79(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_79);
PrePutTable(CCMA, d, double, surfbody_feedback_79);
PreLoadTable(CCMA, surfbody_feedback_79);
PreStoreTable(CCMA, surfbody_feedback_79);
extern void CCMA_Dim_T_surfbody_feedback_79(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_79(void *T);
extern int CCMA_Sql_T_surfbody_feedback_79(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_79(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_80) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_80" : appearance order#305, hierarchy rank# 329, weight = 358.000305 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_80;

#endif /* defined(IS_a_TABLE_surfbody_feedback_80) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_80)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_80_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_80_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_80_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_80_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_80_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_80_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_80_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_80_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_80_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_80"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_80"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_80"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_80"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_80"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_80"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_80"; T[6].name = s; }
    CCMA_T_surfbody_feedback_80_TAG = T;
    CCMA_nT_surfbody_feedback_80_TAG = ntag;
    CCMA_nT_surfbody_feedback_80_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_80_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_80_MEM;
  return CCMA_T_surfbody_feedback_80_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_80_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_80_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_80;datum_sfc_event@surfbody_feedback_80;"
      "an_depar@surfbody_feedback_80;fg_depar@surfbody_feedback_80;"
      "snow_depth@surfbody_feedback_80;snow_density@surfbody_feedback_80;"
      "lsm@surfbody_feedback_80;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_80;datum_sfc_event@surfbody_feedback_80;"
      "an_depar@surfbody_feedback_80;fg_depar@surfbody_feedback_80;"
      "snow_depth@surfbody_feedback_80;snow_density@surfbody_feedback_80;"
      "lsm@surfbody_feedback_80;datum_status.active@surfbody_feedback_80;"
      "datum_status.passive@surfbody_feedback_80;datum_status.rejected@surfbody_feedback_80;"
      "datum_status.blacklisted@surfbody_feedback_80;datum_status.use_emiskf_only@surfbody_feedback_80;"
      "datum_sfc_event.statid@surfbody_feedback_80;datum_sfc_event.lsmask@surfbody_feedback_80;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_80;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_80;"
      "datum_sfc_event.fg_missing@surfbody_feedback_80;datum_sfc_event.fg2big@surfbody_feedback_80;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_80;"
      "datum_sfc_event.redundant@surfbody_feedback_80;datum_sfc_event.report_rejected@surfbody_feedback_80;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_80_PREPTAG = T;
    CCMA_nT_surfbody_feedback_80_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_80_PREPTAG;
  return CCMA_T_surfbody_feedback_80_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_80(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_80(void *T);
extern int CCMA_Sel_T_surfbody_feedback_80(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_80);
PrePutTable(CCMA, d, double, surfbody_feedback_80);
PreLoadTable(CCMA, surfbody_feedback_80);
PreStoreTable(CCMA, surfbody_feedback_80);
extern void CCMA_Dim_T_surfbody_feedback_80(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_80(void *T);
extern int CCMA_Sql_T_surfbody_feedback_80(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_80(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_81) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_81" : appearance order#306, hierarchy rank# 330, weight = 358.000306 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_81;

#endif /* defined(IS_a_TABLE_surfbody_feedback_81) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_81)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_81_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_81_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_81_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_81_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_81_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_81_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_81_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_81_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_81_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_81"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_81"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_81"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_81"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_81"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_81"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_81"; T[6].name = s; }
    CCMA_T_surfbody_feedback_81_TAG = T;
    CCMA_nT_surfbody_feedback_81_TAG = ntag;
    CCMA_nT_surfbody_feedback_81_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_81_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_81_MEM;
  return CCMA_T_surfbody_feedback_81_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_81_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_81_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_81;datum_sfc_event@surfbody_feedback_81;"
      "an_depar@surfbody_feedback_81;fg_depar@surfbody_feedback_81;"
      "snow_depth@surfbody_feedback_81;snow_density@surfbody_feedback_81;"
      "lsm@surfbody_feedback_81;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_81;datum_sfc_event@surfbody_feedback_81;"
      "an_depar@surfbody_feedback_81;fg_depar@surfbody_feedback_81;"
      "snow_depth@surfbody_feedback_81;snow_density@surfbody_feedback_81;"
      "lsm@surfbody_feedback_81;datum_status.active@surfbody_feedback_81;"
      "datum_status.passive@surfbody_feedback_81;datum_status.rejected@surfbody_feedback_81;"
      "datum_status.blacklisted@surfbody_feedback_81;datum_status.use_emiskf_only@surfbody_feedback_81;"
      "datum_sfc_event.statid@surfbody_feedback_81;datum_sfc_event.lsmask@surfbody_feedback_81;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_81;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_81;"
      "datum_sfc_event.fg_missing@surfbody_feedback_81;datum_sfc_event.fg2big@surfbody_feedback_81;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_81;"
      "datum_sfc_event.redundant@surfbody_feedback_81;datum_sfc_event.report_rejected@surfbody_feedback_81;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_81_PREPTAG = T;
    CCMA_nT_surfbody_feedback_81_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_81_PREPTAG;
  return CCMA_T_surfbody_feedback_81_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_81(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_81(void *T);
extern int CCMA_Sel_T_surfbody_feedback_81(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_81);
PrePutTable(CCMA, d, double, surfbody_feedback_81);
PreLoadTable(CCMA, surfbody_feedback_81);
PreStoreTable(CCMA, surfbody_feedback_81);
extern void CCMA_Dim_T_surfbody_feedback_81(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_81(void *T);
extern int CCMA_Sql_T_surfbody_feedback_81(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_81(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_82) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_82" : appearance order#307, hierarchy rank# 331, weight = 358.000307 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_82;

#endif /* defined(IS_a_TABLE_surfbody_feedback_82) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_82)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_82_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_82_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_82_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_82_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_82_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_82_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_82_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_82_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_82_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_82"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_82"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_82"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_82"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_82"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_82"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_82"; T[6].name = s; }
    CCMA_T_surfbody_feedback_82_TAG = T;
    CCMA_nT_surfbody_feedback_82_TAG = ntag;
    CCMA_nT_surfbody_feedback_82_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_82_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_82_MEM;
  return CCMA_T_surfbody_feedback_82_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_82_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_82_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_82;datum_sfc_event@surfbody_feedback_82;"
      "an_depar@surfbody_feedback_82;fg_depar@surfbody_feedback_82;"
      "snow_depth@surfbody_feedback_82;snow_density@surfbody_feedback_82;"
      "lsm@surfbody_feedback_82;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_82;datum_sfc_event@surfbody_feedback_82;"
      "an_depar@surfbody_feedback_82;fg_depar@surfbody_feedback_82;"
      "snow_depth@surfbody_feedback_82;snow_density@surfbody_feedback_82;"
      "lsm@surfbody_feedback_82;datum_status.active@surfbody_feedback_82;"
      "datum_status.passive@surfbody_feedback_82;datum_status.rejected@surfbody_feedback_82;"
      "datum_status.blacklisted@surfbody_feedback_82;datum_status.use_emiskf_only@surfbody_feedback_82;"
      "datum_sfc_event.statid@surfbody_feedback_82;datum_sfc_event.lsmask@surfbody_feedback_82;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_82;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_82;"
      "datum_sfc_event.fg_missing@surfbody_feedback_82;datum_sfc_event.fg2big@surfbody_feedback_82;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_82;"
      "datum_sfc_event.redundant@surfbody_feedback_82;datum_sfc_event.report_rejected@surfbody_feedback_82;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_82_PREPTAG = T;
    CCMA_nT_surfbody_feedback_82_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_82_PREPTAG;
  return CCMA_T_surfbody_feedback_82_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_82(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_82(void *T);
extern int CCMA_Sel_T_surfbody_feedback_82(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_82);
PrePutTable(CCMA, d, double, surfbody_feedback_82);
PreLoadTable(CCMA, surfbody_feedback_82);
PreStoreTable(CCMA, surfbody_feedback_82);
extern void CCMA_Dim_T_surfbody_feedback_82(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_82(void *T);
extern int CCMA_Sql_T_surfbody_feedback_82(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_82(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_83) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_83" : appearance order#308, hierarchy rank# 332, weight = 358.000308 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_83;

#endif /* defined(IS_a_TABLE_surfbody_feedback_83) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_83)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_83_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_83_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_83_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_83_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_83_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_83_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_83_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_83_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_83_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_83"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_83"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_83"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_83"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_83"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_83"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_83"; T[6].name = s; }
    CCMA_T_surfbody_feedback_83_TAG = T;
    CCMA_nT_surfbody_feedback_83_TAG = ntag;
    CCMA_nT_surfbody_feedback_83_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_83_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_83_MEM;
  return CCMA_T_surfbody_feedback_83_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_83_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_83_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_83;datum_sfc_event@surfbody_feedback_83;"
      "an_depar@surfbody_feedback_83;fg_depar@surfbody_feedback_83;"
      "snow_depth@surfbody_feedback_83;snow_density@surfbody_feedback_83;"
      "lsm@surfbody_feedback_83;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_83;datum_sfc_event@surfbody_feedback_83;"
      "an_depar@surfbody_feedback_83;fg_depar@surfbody_feedback_83;"
      "snow_depth@surfbody_feedback_83;snow_density@surfbody_feedback_83;"
      "lsm@surfbody_feedback_83;datum_status.active@surfbody_feedback_83;"
      "datum_status.passive@surfbody_feedback_83;datum_status.rejected@surfbody_feedback_83;"
      "datum_status.blacklisted@surfbody_feedback_83;datum_status.use_emiskf_only@surfbody_feedback_83;"
      "datum_sfc_event.statid@surfbody_feedback_83;datum_sfc_event.lsmask@surfbody_feedback_83;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_83;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_83;"
      "datum_sfc_event.fg_missing@surfbody_feedback_83;datum_sfc_event.fg2big@surfbody_feedback_83;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_83;"
      "datum_sfc_event.redundant@surfbody_feedback_83;datum_sfc_event.report_rejected@surfbody_feedback_83;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_83_PREPTAG = T;
    CCMA_nT_surfbody_feedback_83_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_83_PREPTAG;
  return CCMA_T_surfbody_feedback_83_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_83(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_83(void *T);
extern int CCMA_Sel_T_surfbody_feedback_83(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_83);
PrePutTable(CCMA, d, double, surfbody_feedback_83);
PreLoadTable(CCMA, surfbody_feedback_83);
PreStoreTable(CCMA, surfbody_feedback_83);
extern void CCMA_Dim_T_surfbody_feedback_83(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_83(void *T);
extern int CCMA_Sql_T_surfbody_feedback_83(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_83(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_84) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_84" : appearance order#309, hierarchy rank# 333, weight = 358.000309 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_84;

#endif /* defined(IS_a_TABLE_surfbody_feedback_84) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_84)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_84_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_84_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_84_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_84_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_84_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_84_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_84_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_84_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_84_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_84"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_84"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_84"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_84"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_84"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_84"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_84"; T[6].name = s; }
    CCMA_T_surfbody_feedback_84_TAG = T;
    CCMA_nT_surfbody_feedback_84_TAG = ntag;
    CCMA_nT_surfbody_feedback_84_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_84_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_84_MEM;
  return CCMA_T_surfbody_feedback_84_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_84_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_84_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_84;datum_sfc_event@surfbody_feedback_84;"
      "an_depar@surfbody_feedback_84;fg_depar@surfbody_feedback_84;"
      "snow_depth@surfbody_feedback_84;snow_density@surfbody_feedback_84;"
      "lsm@surfbody_feedback_84;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_84;datum_sfc_event@surfbody_feedback_84;"
      "an_depar@surfbody_feedback_84;fg_depar@surfbody_feedback_84;"
      "snow_depth@surfbody_feedback_84;snow_density@surfbody_feedback_84;"
      "lsm@surfbody_feedback_84;datum_status.active@surfbody_feedback_84;"
      "datum_status.passive@surfbody_feedback_84;datum_status.rejected@surfbody_feedback_84;"
      "datum_status.blacklisted@surfbody_feedback_84;datum_status.use_emiskf_only@surfbody_feedback_84;"
      "datum_sfc_event.statid@surfbody_feedback_84;datum_sfc_event.lsmask@surfbody_feedback_84;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_84;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_84;"
      "datum_sfc_event.fg_missing@surfbody_feedback_84;datum_sfc_event.fg2big@surfbody_feedback_84;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_84;"
      "datum_sfc_event.redundant@surfbody_feedback_84;datum_sfc_event.report_rejected@surfbody_feedback_84;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_84_PREPTAG = T;
    CCMA_nT_surfbody_feedback_84_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_84_PREPTAG;
  return CCMA_T_surfbody_feedback_84_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_84(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_84(void *T);
extern int CCMA_Sel_T_surfbody_feedback_84(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_84);
PrePutTable(CCMA, d, double, surfbody_feedback_84);
PreLoadTable(CCMA, surfbody_feedback_84);
PreStoreTable(CCMA, surfbody_feedback_84);
extern void CCMA_Dim_T_surfbody_feedback_84(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_84(void *T);
extern int CCMA_Sql_T_surfbody_feedback_84(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_84(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_85) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_85" : appearance order#310, hierarchy rank# 334, weight = 358.000310 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_85;

#endif /* defined(IS_a_TABLE_surfbody_feedback_85) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_85)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_85_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_85_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_85_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_85_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_85_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_85_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_85_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_85_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_85_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_85"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_85"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_85"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_85"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_85"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_85"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_85"; T[6].name = s; }
    CCMA_T_surfbody_feedback_85_TAG = T;
    CCMA_nT_surfbody_feedback_85_TAG = ntag;
    CCMA_nT_surfbody_feedback_85_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_85_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_85_MEM;
  return CCMA_T_surfbody_feedback_85_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_85_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_85_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_85;datum_sfc_event@surfbody_feedback_85;"
      "an_depar@surfbody_feedback_85;fg_depar@surfbody_feedback_85;"
      "snow_depth@surfbody_feedback_85;snow_density@surfbody_feedback_85;"
      "lsm@surfbody_feedback_85;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_85;datum_sfc_event@surfbody_feedback_85;"
      "an_depar@surfbody_feedback_85;fg_depar@surfbody_feedback_85;"
      "snow_depth@surfbody_feedback_85;snow_density@surfbody_feedback_85;"
      "lsm@surfbody_feedback_85;datum_status.active@surfbody_feedback_85;"
      "datum_status.passive@surfbody_feedback_85;datum_status.rejected@surfbody_feedback_85;"
      "datum_status.blacklisted@surfbody_feedback_85;datum_status.use_emiskf_only@surfbody_feedback_85;"
      "datum_sfc_event.statid@surfbody_feedback_85;datum_sfc_event.lsmask@surfbody_feedback_85;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_85;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_85;"
      "datum_sfc_event.fg_missing@surfbody_feedback_85;datum_sfc_event.fg2big@surfbody_feedback_85;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_85;"
      "datum_sfc_event.redundant@surfbody_feedback_85;datum_sfc_event.report_rejected@surfbody_feedback_85;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_85_PREPTAG = T;
    CCMA_nT_surfbody_feedback_85_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_85_PREPTAG;
  return CCMA_T_surfbody_feedback_85_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_85(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_85(void *T);
extern int CCMA_Sel_T_surfbody_feedback_85(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_85);
PrePutTable(CCMA, d, double, surfbody_feedback_85);
PreLoadTable(CCMA, surfbody_feedback_85);
PreStoreTable(CCMA, surfbody_feedback_85);
extern void CCMA_Dim_T_surfbody_feedback_85(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_85(void *T);
extern int CCMA_Sql_T_surfbody_feedback_85(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_85(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_86) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_86" : appearance order#311, hierarchy rank# 335, weight = 358.000311 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_86;

#endif /* defined(IS_a_TABLE_surfbody_feedback_86) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_86)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_86_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_86_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_86_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_86_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_86_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_86_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_86_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_86_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_86_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_86"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_86"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_86"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_86"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_86"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_86"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_86"; T[6].name = s; }
    CCMA_T_surfbody_feedback_86_TAG = T;
    CCMA_nT_surfbody_feedback_86_TAG = ntag;
    CCMA_nT_surfbody_feedback_86_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_86_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_86_MEM;
  return CCMA_T_surfbody_feedback_86_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_86_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_86_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_86;datum_sfc_event@surfbody_feedback_86;"
      "an_depar@surfbody_feedback_86;fg_depar@surfbody_feedback_86;"
      "snow_depth@surfbody_feedback_86;snow_density@surfbody_feedback_86;"
      "lsm@surfbody_feedback_86;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_86;datum_sfc_event@surfbody_feedback_86;"
      "an_depar@surfbody_feedback_86;fg_depar@surfbody_feedback_86;"
      "snow_depth@surfbody_feedback_86;snow_density@surfbody_feedback_86;"
      "lsm@surfbody_feedback_86;datum_status.active@surfbody_feedback_86;"
      "datum_status.passive@surfbody_feedback_86;datum_status.rejected@surfbody_feedback_86;"
      "datum_status.blacklisted@surfbody_feedback_86;datum_status.use_emiskf_only@surfbody_feedback_86;"
      "datum_sfc_event.statid@surfbody_feedback_86;datum_sfc_event.lsmask@surfbody_feedback_86;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_86;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_86;"
      "datum_sfc_event.fg_missing@surfbody_feedback_86;datum_sfc_event.fg2big@surfbody_feedback_86;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_86;"
      "datum_sfc_event.redundant@surfbody_feedback_86;datum_sfc_event.report_rejected@surfbody_feedback_86;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_86_PREPTAG = T;
    CCMA_nT_surfbody_feedback_86_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_86_PREPTAG;
  return CCMA_T_surfbody_feedback_86_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_86(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_86(void *T);
extern int CCMA_Sel_T_surfbody_feedback_86(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_86);
PrePutTable(CCMA, d, double, surfbody_feedback_86);
PreLoadTable(CCMA, surfbody_feedback_86);
PreStoreTable(CCMA, surfbody_feedback_86);
extern void CCMA_Dim_T_surfbody_feedback_86(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_86(void *T);
extern int CCMA_Sql_T_surfbody_feedback_86(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_86(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_87) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_87" : appearance order#312, hierarchy rank# 336, weight = 358.000312 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_87;

#endif /* defined(IS_a_TABLE_surfbody_feedback_87) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_87)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_87_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_87_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_87_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_87_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_87_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_87_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_87_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_87_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_87_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_87"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_87"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_87"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_87"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_87"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_87"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_87"; T[6].name = s; }
    CCMA_T_surfbody_feedback_87_TAG = T;
    CCMA_nT_surfbody_feedback_87_TAG = ntag;
    CCMA_nT_surfbody_feedback_87_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_87_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_87_MEM;
  return CCMA_T_surfbody_feedback_87_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_87_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_87_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_87;datum_sfc_event@surfbody_feedback_87;"
      "an_depar@surfbody_feedback_87;fg_depar@surfbody_feedback_87;"
      "snow_depth@surfbody_feedback_87;snow_density@surfbody_feedback_87;"
      "lsm@surfbody_feedback_87;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_87;datum_sfc_event@surfbody_feedback_87;"
      "an_depar@surfbody_feedback_87;fg_depar@surfbody_feedback_87;"
      "snow_depth@surfbody_feedback_87;snow_density@surfbody_feedback_87;"
      "lsm@surfbody_feedback_87;datum_status.active@surfbody_feedback_87;"
      "datum_status.passive@surfbody_feedback_87;datum_status.rejected@surfbody_feedback_87;"
      "datum_status.blacklisted@surfbody_feedback_87;datum_status.use_emiskf_only@surfbody_feedback_87;"
      "datum_sfc_event.statid@surfbody_feedback_87;datum_sfc_event.lsmask@surfbody_feedback_87;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_87;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_87;"
      "datum_sfc_event.fg_missing@surfbody_feedback_87;datum_sfc_event.fg2big@surfbody_feedback_87;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_87;"
      "datum_sfc_event.redundant@surfbody_feedback_87;datum_sfc_event.report_rejected@surfbody_feedback_87;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_87_PREPTAG = T;
    CCMA_nT_surfbody_feedback_87_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_87_PREPTAG;
  return CCMA_T_surfbody_feedback_87_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_87(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_87(void *T);
extern int CCMA_Sel_T_surfbody_feedback_87(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_87);
PrePutTable(CCMA, d, double, surfbody_feedback_87);
PreLoadTable(CCMA, surfbody_feedback_87);
PreStoreTable(CCMA, surfbody_feedback_87);
extern void CCMA_Dim_T_surfbody_feedback_87(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_87(void *T);
extern int CCMA_Sql_T_surfbody_feedback_87(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_87(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_88) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_88" : appearance order#313, hierarchy rank# 337, weight = 358.000313 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_88;

#endif /* defined(IS_a_TABLE_surfbody_feedback_88) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_88)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_88_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_88_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_88_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_88_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_88_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_88_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_88_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_88_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_88_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_88"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_88"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_88"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_88"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_88"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_88"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_88"; T[6].name = s; }
    CCMA_T_surfbody_feedback_88_TAG = T;
    CCMA_nT_surfbody_feedback_88_TAG = ntag;
    CCMA_nT_surfbody_feedback_88_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_88_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_88_MEM;
  return CCMA_T_surfbody_feedback_88_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_88_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_88_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_88;datum_sfc_event@surfbody_feedback_88;"
      "an_depar@surfbody_feedback_88;fg_depar@surfbody_feedback_88;"
      "snow_depth@surfbody_feedback_88;snow_density@surfbody_feedback_88;"
      "lsm@surfbody_feedback_88;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_88;datum_sfc_event@surfbody_feedback_88;"
      "an_depar@surfbody_feedback_88;fg_depar@surfbody_feedback_88;"
      "snow_depth@surfbody_feedback_88;snow_density@surfbody_feedback_88;"
      "lsm@surfbody_feedback_88;datum_status.active@surfbody_feedback_88;"
      "datum_status.passive@surfbody_feedback_88;datum_status.rejected@surfbody_feedback_88;"
      "datum_status.blacklisted@surfbody_feedback_88;datum_status.use_emiskf_only@surfbody_feedback_88;"
      "datum_sfc_event.statid@surfbody_feedback_88;datum_sfc_event.lsmask@surfbody_feedback_88;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_88;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_88;"
      "datum_sfc_event.fg_missing@surfbody_feedback_88;datum_sfc_event.fg2big@surfbody_feedback_88;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_88;"
      "datum_sfc_event.redundant@surfbody_feedback_88;datum_sfc_event.report_rejected@surfbody_feedback_88;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_88_PREPTAG = T;
    CCMA_nT_surfbody_feedback_88_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_88_PREPTAG;
  return CCMA_T_surfbody_feedback_88_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_88(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_88(void *T);
extern int CCMA_Sel_T_surfbody_feedback_88(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_88);
PrePutTable(CCMA, d, double, surfbody_feedback_88);
PreLoadTable(CCMA, surfbody_feedback_88);
PreStoreTable(CCMA, surfbody_feedback_88);
extern void CCMA_Dim_T_surfbody_feedback_88(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_88(void *T);
extern int CCMA_Sql_T_surfbody_feedback_88(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_88(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_89) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_89" : appearance order#314, hierarchy rank# 338, weight = 358.000314 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_89;

#endif /* defined(IS_a_TABLE_surfbody_feedback_89) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_89)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_89_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_89_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_89_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_89_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_89_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_89_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_89_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_89_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_89_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_89"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_89"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_89"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_89"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_89"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_89"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_89"; T[6].name = s; }
    CCMA_T_surfbody_feedback_89_TAG = T;
    CCMA_nT_surfbody_feedback_89_TAG = ntag;
    CCMA_nT_surfbody_feedback_89_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_89_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_89_MEM;
  return CCMA_T_surfbody_feedback_89_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_89_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_89_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_89;datum_sfc_event@surfbody_feedback_89;"
      "an_depar@surfbody_feedback_89;fg_depar@surfbody_feedback_89;"
      "snow_depth@surfbody_feedback_89;snow_density@surfbody_feedback_89;"
      "lsm@surfbody_feedback_89;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_89;datum_sfc_event@surfbody_feedback_89;"
      "an_depar@surfbody_feedback_89;fg_depar@surfbody_feedback_89;"
      "snow_depth@surfbody_feedback_89;snow_density@surfbody_feedback_89;"
      "lsm@surfbody_feedback_89;datum_status.active@surfbody_feedback_89;"
      "datum_status.passive@surfbody_feedback_89;datum_status.rejected@surfbody_feedback_89;"
      "datum_status.blacklisted@surfbody_feedback_89;datum_status.use_emiskf_only@surfbody_feedback_89;"
      "datum_sfc_event.statid@surfbody_feedback_89;datum_sfc_event.lsmask@surfbody_feedback_89;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_89;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_89;"
      "datum_sfc_event.fg_missing@surfbody_feedback_89;datum_sfc_event.fg2big@surfbody_feedback_89;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_89;"
      "datum_sfc_event.redundant@surfbody_feedback_89;datum_sfc_event.report_rejected@surfbody_feedback_89;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_89_PREPTAG = T;
    CCMA_nT_surfbody_feedback_89_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_89_PREPTAG;
  return CCMA_T_surfbody_feedback_89_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_89(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_89(void *T);
extern int CCMA_Sel_T_surfbody_feedback_89(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_89);
PrePutTable(CCMA, d, double, surfbody_feedback_89);
PreLoadTable(CCMA, surfbody_feedback_89);
PreStoreTable(CCMA, surfbody_feedback_89);
extern void CCMA_Dim_T_surfbody_feedback_89(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_89(void *T);
extern int CCMA_Sql_T_surfbody_feedback_89(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_89(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_90) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_90" : appearance order#315, hierarchy rank# 339, weight = 358.000315 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_90;

#endif /* defined(IS_a_TABLE_surfbody_feedback_90) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_90)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_90_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_90_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_90_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_90_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_90_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_90_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_90_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_90_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_90_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_90"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_90"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_90"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_90"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_90"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_90"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_90"; T[6].name = s; }
    CCMA_T_surfbody_feedback_90_TAG = T;
    CCMA_nT_surfbody_feedback_90_TAG = ntag;
    CCMA_nT_surfbody_feedback_90_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_90_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_90_MEM;
  return CCMA_T_surfbody_feedback_90_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_90_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_90_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_90;datum_sfc_event@surfbody_feedback_90;"
      "an_depar@surfbody_feedback_90;fg_depar@surfbody_feedback_90;"
      "snow_depth@surfbody_feedback_90;snow_density@surfbody_feedback_90;"
      "lsm@surfbody_feedback_90;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_90;datum_sfc_event@surfbody_feedback_90;"
      "an_depar@surfbody_feedback_90;fg_depar@surfbody_feedback_90;"
      "snow_depth@surfbody_feedback_90;snow_density@surfbody_feedback_90;"
      "lsm@surfbody_feedback_90;datum_status.active@surfbody_feedback_90;"
      "datum_status.passive@surfbody_feedback_90;datum_status.rejected@surfbody_feedback_90;"
      "datum_status.blacklisted@surfbody_feedback_90;datum_status.use_emiskf_only@surfbody_feedback_90;"
      "datum_sfc_event.statid@surfbody_feedback_90;datum_sfc_event.lsmask@surfbody_feedback_90;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_90;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_90;"
      "datum_sfc_event.fg_missing@surfbody_feedback_90;datum_sfc_event.fg2big@surfbody_feedback_90;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_90;"
      "datum_sfc_event.redundant@surfbody_feedback_90;datum_sfc_event.report_rejected@surfbody_feedback_90;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_90_PREPTAG = T;
    CCMA_nT_surfbody_feedback_90_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_90_PREPTAG;
  return CCMA_T_surfbody_feedback_90_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_90(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_90(void *T);
extern int CCMA_Sel_T_surfbody_feedback_90(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_90);
PrePutTable(CCMA, d, double, surfbody_feedback_90);
PreLoadTable(CCMA, surfbody_feedback_90);
PreStoreTable(CCMA, surfbody_feedback_90);
extern void CCMA_Dim_T_surfbody_feedback_90(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_90(void *T);
extern int CCMA_Sql_T_surfbody_feedback_90(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_90(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_91) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_91" : appearance order#316, hierarchy rank# 340, weight = 358.000316 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_91;

#endif /* defined(IS_a_TABLE_surfbody_feedback_91) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_91)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_91_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_91_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_91_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_91_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_91_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_91_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_91_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_91_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_91_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_91"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_91"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_91"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_91"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_91"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_91"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_91"; T[6].name = s; }
    CCMA_T_surfbody_feedback_91_TAG = T;
    CCMA_nT_surfbody_feedback_91_TAG = ntag;
    CCMA_nT_surfbody_feedback_91_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_91_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_91_MEM;
  return CCMA_T_surfbody_feedback_91_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_91_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_91_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_91;datum_sfc_event@surfbody_feedback_91;"
      "an_depar@surfbody_feedback_91;fg_depar@surfbody_feedback_91;"
      "snow_depth@surfbody_feedback_91;snow_density@surfbody_feedback_91;"
      "lsm@surfbody_feedback_91;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_91;datum_sfc_event@surfbody_feedback_91;"
      "an_depar@surfbody_feedback_91;fg_depar@surfbody_feedback_91;"
      "snow_depth@surfbody_feedback_91;snow_density@surfbody_feedback_91;"
      "lsm@surfbody_feedback_91;datum_status.active@surfbody_feedback_91;"
      "datum_status.passive@surfbody_feedback_91;datum_status.rejected@surfbody_feedback_91;"
      "datum_status.blacklisted@surfbody_feedback_91;datum_status.use_emiskf_only@surfbody_feedback_91;"
      "datum_sfc_event.statid@surfbody_feedback_91;datum_sfc_event.lsmask@surfbody_feedback_91;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_91;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_91;"
      "datum_sfc_event.fg_missing@surfbody_feedback_91;datum_sfc_event.fg2big@surfbody_feedback_91;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_91;"
      "datum_sfc_event.redundant@surfbody_feedback_91;datum_sfc_event.report_rejected@surfbody_feedback_91;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_91_PREPTAG = T;
    CCMA_nT_surfbody_feedback_91_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_91_PREPTAG;
  return CCMA_T_surfbody_feedback_91_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_91(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_91(void *T);
extern int CCMA_Sel_T_surfbody_feedback_91(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_91);
PrePutTable(CCMA, d, double, surfbody_feedback_91);
PreLoadTable(CCMA, surfbody_feedback_91);
PreStoreTable(CCMA, surfbody_feedback_91);
extern void CCMA_Dim_T_surfbody_feedback_91(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_91(void *T);
extern int CCMA_Sql_T_surfbody_feedback_91(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_91(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_92) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_92" : appearance order#317, hierarchy rank# 341, weight = 358.000317 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_92;

#endif /* defined(IS_a_TABLE_surfbody_feedback_92) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_92)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_92_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_92_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_92_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_92_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_92_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_92_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_92_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_92_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_92_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_92"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_92"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_92"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_92"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_92"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_92"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_92"; T[6].name = s; }
    CCMA_T_surfbody_feedback_92_TAG = T;
    CCMA_nT_surfbody_feedback_92_TAG = ntag;
    CCMA_nT_surfbody_feedback_92_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_92_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_92_MEM;
  return CCMA_T_surfbody_feedback_92_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_92_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_92_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_92;datum_sfc_event@surfbody_feedback_92;"
      "an_depar@surfbody_feedback_92;fg_depar@surfbody_feedback_92;"
      "snow_depth@surfbody_feedback_92;snow_density@surfbody_feedback_92;"
      "lsm@surfbody_feedback_92;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_92;datum_sfc_event@surfbody_feedback_92;"
      "an_depar@surfbody_feedback_92;fg_depar@surfbody_feedback_92;"
      "snow_depth@surfbody_feedback_92;snow_density@surfbody_feedback_92;"
      "lsm@surfbody_feedback_92;datum_status.active@surfbody_feedback_92;"
      "datum_status.passive@surfbody_feedback_92;datum_status.rejected@surfbody_feedback_92;"
      "datum_status.blacklisted@surfbody_feedback_92;datum_status.use_emiskf_only@surfbody_feedback_92;"
      "datum_sfc_event.statid@surfbody_feedback_92;datum_sfc_event.lsmask@surfbody_feedback_92;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_92;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_92;"
      "datum_sfc_event.fg_missing@surfbody_feedback_92;datum_sfc_event.fg2big@surfbody_feedback_92;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_92;"
      "datum_sfc_event.redundant@surfbody_feedback_92;datum_sfc_event.report_rejected@surfbody_feedback_92;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_92_PREPTAG = T;
    CCMA_nT_surfbody_feedback_92_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_92_PREPTAG;
  return CCMA_T_surfbody_feedback_92_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_92(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_92(void *T);
extern int CCMA_Sel_T_surfbody_feedback_92(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_92);
PrePutTable(CCMA, d, double, surfbody_feedback_92);
PreLoadTable(CCMA, surfbody_feedback_92);
PreStoreTable(CCMA, surfbody_feedback_92);
extern void CCMA_Dim_T_surfbody_feedback_92(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_92(void *T);
extern int CCMA_Sql_T_surfbody_feedback_92(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_92(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_93) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_93" : appearance order#318, hierarchy rank# 342, weight = 358.000318 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_93;

#endif /* defined(IS_a_TABLE_surfbody_feedback_93) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_93)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_93_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_93_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_93_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_93_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_93_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_93_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_93_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_93_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_93_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_93"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_93"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_93"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_93"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_93"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_93"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_93"; T[6].name = s; }
    CCMA_T_surfbody_feedback_93_TAG = T;
    CCMA_nT_surfbody_feedback_93_TAG = ntag;
    CCMA_nT_surfbody_feedback_93_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_93_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_93_MEM;
  return CCMA_T_surfbody_feedback_93_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_93_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_93_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_93;datum_sfc_event@surfbody_feedback_93;"
      "an_depar@surfbody_feedback_93;fg_depar@surfbody_feedback_93;"
      "snow_depth@surfbody_feedback_93;snow_density@surfbody_feedback_93;"
      "lsm@surfbody_feedback_93;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_93;datum_sfc_event@surfbody_feedback_93;"
      "an_depar@surfbody_feedback_93;fg_depar@surfbody_feedback_93;"
      "snow_depth@surfbody_feedback_93;snow_density@surfbody_feedback_93;"
      "lsm@surfbody_feedback_93;datum_status.active@surfbody_feedback_93;"
      "datum_status.passive@surfbody_feedback_93;datum_status.rejected@surfbody_feedback_93;"
      "datum_status.blacklisted@surfbody_feedback_93;datum_status.use_emiskf_only@surfbody_feedback_93;"
      "datum_sfc_event.statid@surfbody_feedback_93;datum_sfc_event.lsmask@surfbody_feedback_93;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_93;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_93;"
      "datum_sfc_event.fg_missing@surfbody_feedback_93;datum_sfc_event.fg2big@surfbody_feedback_93;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_93;"
      "datum_sfc_event.redundant@surfbody_feedback_93;datum_sfc_event.report_rejected@surfbody_feedback_93;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_93_PREPTAG = T;
    CCMA_nT_surfbody_feedback_93_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_93_PREPTAG;
  return CCMA_T_surfbody_feedback_93_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_93(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_93(void *T);
extern int CCMA_Sel_T_surfbody_feedback_93(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_93);
PrePutTable(CCMA, d, double, surfbody_feedback_93);
PreLoadTable(CCMA, surfbody_feedback_93);
PreStoreTable(CCMA, surfbody_feedback_93);
extern void CCMA_Dim_T_surfbody_feedback_93(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_93(void *T);
extern int CCMA_Sql_T_surfbody_feedback_93(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_93(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_94) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_94" : appearance order#319, hierarchy rank# 343, weight = 358.000319 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_94;

#endif /* defined(IS_a_TABLE_surfbody_feedback_94) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_94)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_94_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_94_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_94_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_94_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_94_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_94_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_94_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_94_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_94_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_94"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_94"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_94"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_94"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_94"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_94"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_94"; T[6].name = s; }
    CCMA_T_surfbody_feedback_94_TAG = T;
    CCMA_nT_surfbody_feedback_94_TAG = ntag;
    CCMA_nT_surfbody_feedback_94_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_94_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_94_MEM;
  return CCMA_T_surfbody_feedback_94_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_94_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_94_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_94;datum_sfc_event@surfbody_feedback_94;"
      "an_depar@surfbody_feedback_94;fg_depar@surfbody_feedback_94;"
      "snow_depth@surfbody_feedback_94;snow_density@surfbody_feedback_94;"
      "lsm@surfbody_feedback_94;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_94;datum_sfc_event@surfbody_feedback_94;"
      "an_depar@surfbody_feedback_94;fg_depar@surfbody_feedback_94;"
      "snow_depth@surfbody_feedback_94;snow_density@surfbody_feedback_94;"
      "lsm@surfbody_feedback_94;datum_status.active@surfbody_feedback_94;"
      "datum_status.passive@surfbody_feedback_94;datum_status.rejected@surfbody_feedback_94;"
      "datum_status.blacklisted@surfbody_feedback_94;datum_status.use_emiskf_only@surfbody_feedback_94;"
      "datum_sfc_event.statid@surfbody_feedback_94;datum_sfc_event.lsmask@surfbody_feedback_94;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_94;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_94;"
      "datum_sfc_event.fg_missing@surfbody_feedback_94;datum_sfc_event.fg2big@surfbody_feedback_94;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_94;"
      "datum_sfc_event.redundant@surfbody_feedback_94;datum_sfc_event.report_rejected@surfbody_feedback_94;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_94_PREPTAG = T;
    CCMA_nT_surfbody_feedback_94_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_94_PREPTAG;
  return CCMA_T_surfbody_feedback_94_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_94(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_94(void *T);
extern int CCMA_Sel_T_surfbody_feedback_94(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_94);
PrePutTable(CCMA, d, double, surfbody_feedback_94);
PreLoadTable(CCMA, surfbody_feedback_94);
PreStoreTable(CCMA, surfbody_feedback_94);
extern void CCMA_Dim_T_surfbody_feedback_94(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_94(void *T);
extern int CCMA_Sql_T_surfbody_feedback_94(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_94(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_95) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_95" : appearance order#320, hierarchy rank# 344, weight = 358.000320 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_95;

#endif /* defined(IS_a_TABLE_surfbody_feedback_95) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_95)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_95_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_95_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_95_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_95_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_95_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_95_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_95_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_95_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_95_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_95"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_95"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_95"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_95"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_95"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_95"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_95"; T[6].name = s; }
    CCMA_T_surfbody_feedback_95_TAG = T;
    CCMA_nT_surfbody_feedback_95_TAG = ntag;
    CCMA_nT_surfbody_feedback_95_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_95_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_95_MEM;
  return CCMA_T_surfbody_feedback_95_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_95_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_95_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_95;datum_sfc_event@surfbody_feedback_95;"
      "an_depar@surfbody_feedback_95;fg_depar@surfbody_feedback_95;"
      "snow_depth@surfbody_feedback_95;snow_density@surfbody_feedback_95;"
      "lsm@surfbody_feedback_95;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_95;datum_sfc_event@surfbody_feedback_95;"
      "an_depar@surfbody_feedback_95;fg_depar@surfbody_feedback_95;"
      "snow_depth@surfbody_feedback_95;snow_density@surfbody_feedback_95;"
      "lsm@surfbody_feedback_95;datum_status.active@surfbody_feedback_95;"
      "datum_status.passive@surfbody_feedback_95;datum_status.rejected@surfbody_feedback_95;"
      "datum_status.blacklisted@surfbody_feedback_95;datum_status.use_emiskf_only@surfbody_feedback_95;"
      "datum_sfc_event.statid@surfbody_feedback_95;datum_sfc_event.lsmask@surfbody_feedback_95;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_95;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_95;"
      "datum_sfc_event.fg_missing@surfbody_feedback_95;datum_sfc_event.fg2big@surfbody_feedback_95;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_95;"
      "datum_sfc_event.redundant@surfbody_feedback_95;datum_sfc_event.report_rejected@surfbody_feedback_95;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_95_PREPTAG = T;
    CCMA_nT_surfbody_feedback_95_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_95_PREPTAG;
  return CCMA_T_surfbody_feedback_95_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_95(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_95(void *T);
extern int CCMA_Sel_T_surfbody_feedback_95(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_95);
PrePutTable(CCMA, d, double, surfbody_feedback_95);
PreLoadTable(CCMA, surfbody_feedback_95);
PreStoreTable(CCMA, surfbody_feedback_95);
extern void CCMA_Dim_T_surfbody_feedback_95(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_95(void *T);
extern int CCMA_Sql_T_surfbody_feedback_95(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_95(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_96) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_96" : appearance order#321, hierarchy rank# 345, weight = 358.000321 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_96;

#endif /* defined(IS_a_TABLE_surfbody_feedback_96) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_96)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_96_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_96_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_96_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_96_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_96_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_96_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_96_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_96_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_96_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_96"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_96"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_96"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_96"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_96"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_96"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_96"; T[6].name = s; }
    CCMA_T_surfbody_feedback_96_TAG = T;
    CCMA_nT_surfbody_feedback_96_TAG = ntag;
    CCMA_nT_surfbody_feedback_96_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_96_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_96_MEM;
  return CCMA_T_surfbody_feedback_96_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_96_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_96_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_96;datum_sfc_event@surfbody_feedback_96;"
      "an_depar@surfbody_feedback_96;fg_depar@surfbody_feedback_96;"
      "snow_depth@surfbody_feedback_96;snow_density@surfbody_feedback_96;"
      "lsm@surfbody_feedback_96;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_96;datum_sfc_event@surfbody_feedback_96;"
      "an_depar@surfbody_feedback_96;fg_depar@surfbody_feedback_96;"
      "snow_depth@surfbody_feedback_96;snow_density@surfbody_feedback_96;"
      "lsm@surfbody_feedback_96;datum_status.active@surfbody_feedback_96;"
      "datum_status.passive@surfbody_feedback_96;datum_status.rejected@surfbody_feedback_96;"
      "datum_status.blacklisted@surfbody_feedback_96;datum_status.use_emiskf_only@surfbody_feedback_96;"
      "datum_sfc_event.statid@surfbody_feedback_96;datum_sfc_event.lsmask@surfbody_feedback_96;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_96;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_96;"
      "datum_sfc_event.fg_missing@surfbody_feedback_96;datum_sfc_event.fg2big@surfbody_feedback_96;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_96;"
      "datum_sfc_event.redundant@surfbody_feedback_96;datum_sfc_event.report_rejected@surfbody_feedback_96;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_96_PREPTAG = T;
    CCMA_nT_surfbody_feedback_96_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_96_PREPTAG;
  return CCMA_T_surfbody_feedback_96_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_96(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_96(void *T);
extern int CCMA_Sel_T_surfbody_feedback_96(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_96);
PrePutTable(CCMA, d, double, surfbody_feedback_96);
PreLoadTable(CCMA, surfbody_feedback_96);
PreStoreTable(CCMA, surfbody_feedback_96);
extern void CCMA_Dim_T_surfbody_feedback_96(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_96(void *T);
extern int CCMA_Sql_T_surfbody_feedback_96(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_96(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_97) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_97" : appearance order#322, hierarchy rank# 346, weight = 358.000322 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_97;

#endif /* defined(IS_a_TABLE_surfbody_feedback_97) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_97)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_97_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_97_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_97_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_97_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_97_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_97_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_97_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_97_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_97_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_97"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_97"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_97"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_97"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_97"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_97"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_97"; T[6].name = s; }
    CCMA_T_surfbody_feedback_97_TAG = T;
    CCMA_nT_surfbody_feedback_97_TAG = ntag;
    CCMA_nT_surfbody_feedback_97_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_97_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_97_MEM;
  return CCMA_T_surfbody_feedback_97_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_97_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_97_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_97;datum_sfc_event@surfbody_feedback_97;"
      "an_depar@surfbody_feedback_97;fg_depar@surfbody_feedback_97;"
      "snow_depth@surfbody_feedback_97;snow_density@surfbody_feedback_97;"
      "lsm@surfbody_feedback_97;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_97;datum_sfc_event@surfbody_feedback_97;"
      "an_depar@surfbody_feedback_97;fg_depar@surfbody_feedback_97;"
      "snow_depth@surfbody_feedback_97;snow_density@surfbody_feedback_97;"
      "lsm@surfbody_feedback_97;datum_status.active@surfbody_feedback_97;"
      "datum_status.passive@surfbody_feedback_97;datum_status.rejected@surfbody_feedback_97;"
      "datum_status.blacklisted@surfbody_feedback_97;datum_status.use_emiskf_only@surfbody_feedback_97;"
      "datum_sfc_event.statid@surfbody_feedback_97;datum_sfc_event.lsmask@surfbody_feedback_97;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_97;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_97;"
      "datum_sfc_event.fg_missing@surfbody_feedback_97;datum_sfc_event.fg2big@surfbody_feedback_97;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_97;"
      "datum_sfc_event.redundant@surfbody_feedback_97;datum_sfc_event.report_rejected@surfbody_feedback_97;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_97_PREPTAG = T;
    CCMA_nT_surfbody_feedback_97_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_97_PREPTAG;
  return CCMA_T_surfbody_feedback_97_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_97(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_97(void *T);
extern int CCMA_Sel_T_surfbody_feedback_97(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_97);
PrePutTable(CCMA, d, double, surfbody_feedback_97);
PreLoadTable(CCMA, surfbody_feedback_97);
PreStoreTable(CCMA, surfbody_feedback_97);
extern void CCMA_Dim_T_surfbody_feedback_97(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_97(void *T);
extern int CCMA_Sql_T_surfbody_feedback_97(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_97(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_98) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_98" : appearance order#323, hierarchy rank# 347, weight = 358.000323 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_98;

#endif /* defined(IS_a_TABLE_surfbody_feedback_98) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_98)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_98_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_98_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_98_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_98_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_98_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_98_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_98_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_98_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_98_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_98"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_98"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_98"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_98"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_98"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_98"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_98"; T[6].name = s; }
    CCMA_T_surfbody_feedback_98_TAG = T;
    CCMA_nT_surfbody_feedback_98_TAG = ntag;
    CCMA_nT_surfbody_feedback_98_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_98_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_98_MEM;
  return CCMA_T_surfbody_feedback_98_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_98_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_98_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_98;datum_sfc_event@surfbody_feedback_98;"
      "an_depar@surfbody_feedback_98;fg_depar@surfbody_feedback_98;"
      "snow_depth@surfbody_feedback_98;snow_density@surfbody_feedback_98;"
      "lsm@surfbody_feedback_98;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_98;datum_sfc_event@surfbody_feedback_98;"
      "an_depar@surfbody_feedback_98;fg_depar@surfbody_feedback_98;"
      "snow_depth@surfbody_feedback_98;snow_density@surfbody_feedback_98;"
      "lsm@surfbody_feedback_98;datum_status.active@surfbody_feedback_98;"
      "datum_status.passive@surfbody_feedback_98;datum_status.rejected@surfbody_feedback_98;"
      "datum_status.blacklisted@surfbody_feedback_98;datum_status.use_emiskf_only@surfbody_feedback_98;"
      "datum_sfc_event.statid@surfbody_feedback_98;datum_sfc_event.lsmask@surfbody_feedback_98;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_98;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_98;"
      "datum_sfc_event.fg_missing@surfbody_feedback_98;datum_sfc_event.fg2big@surfbody_feedback_98;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_98;"
      "datum_sfc_event.redundant@surfbody_feedback_98;datum_sfc_event.report_rejected@surfbody_feedback_98;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_98_PREPTAG = T;
    CCMA_nT_surfbody_feedback_98_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_98_PREPTAG;
  return CCMA_T_surfbody_feedback_98_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_98(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_98(void *T);
extern int CCMA_Sel_T_surfbody_feedback_98(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_98);
PrePutTable(CCMA, d, double, surfbody_feedback_98);
PreLoadTable(CCMA, surfbody_feedback_98);
PreStoreTable(CCMA, surfbody_feedback_98);
extern void CCMA_Dim_T_surfbody_feedback_98(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_98(void *T);
extern int CCMA_Sql_T_surfbody_feedback_98(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_98(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_99) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_99" : appearance order#324, hierarchy rank# 348, weight = 358.000324 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_99;

#endif /* defined(IS_a_TABLE_surfbody_feedback_99) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_99)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_99_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_99_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_99_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_99_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_99_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_99_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_99_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_99_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_99_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_99"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_99"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_99"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_99"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_99"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_99"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_99"; T[6].name = s; }
    CCMA_T_surfbody_feedback_99_TAG = T;
    CCMA_nT_surfbody_feedback_99_TAG = ntag;
    CCMA_nT_surfbody_feedback_99_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_99_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_99_MEM;
  return CCMA_T_surfbody_feedback_99_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_99_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_99_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 223;
    { static char s[] =
      ";datum_status@surfbody_feedback_99;datum_sfc_event@surfbody_feedback_99;"
      "an_depar@surfbody_feedback_99;fg_depar@surfbody_feedback_99;"
      "snow_depth@surfbody_feedback_99;snow_density@surfbody_feedback_99;"
      "lsm@surfbody_feedback_99;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 886;
    { static char s[] =
      ";datum_status@surfbody_feedback_99;datum_sfc_event@surfbody_feedback_99;"
      "an_depar@surfbody_feedback_99;fg_depar@surfbody_feedback_99;"
      "snow_depth@surfbody_feedback_99;snow_density@surfbody_feedback_99;"
      "lsm@surfbody_feedback_99;datum_status.active@surfbody_feedback_99;"
      "datum_status.passive@surfbody_feedback_99;datum_status.rejected@surfbody_feedback_99;"
      "datum_status.blacklisted@surfbody_feedback_99;datum_status.use_emiskf_only@surfbody_feedback_99;"
      "datum_sfc_event.statid@surfbody_feedback_99;datum_sfc_event.lsmask@surfbody_feedback_99;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_99;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_99;"
      "datum_sfc_event.fg_missing@surfbody_feedback_99;datum_sfc_event.fg2big@surfbody_feedback_99;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_99;"
      "datum_sfc_event.redundant@surfbody_feedback_99;datum_sfc_event.report_rejected@surfbody_feedback_99;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_99_PREPTAG = T;
    CCMA_nT_surfbody_feedback_99_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_99_PREPTAG;
  return CCMA_T_surfbody_feedback_99_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_99(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_99(void *T);
extern int CCMA_Sel_T_surfbody_feedback_99(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_99);
PrePutTable(CCMA, d, double, surfbody_feedback_99);
PreLoadTable(CCMA, surfbody_feedback_99);
PreStoreTable(CCMA, surfbody_feedback_99);
extern void CCMA_Dim_T_surfbody_feedback_99(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_99(void *T);
extern int CCMA_Sql_T_surfbody_feedback_99(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_99(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback_100) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback_100" : appearance order#325, hierarchy rank# 349, weight = 358.000325 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback_100;

#endif /* defined(IS_a_TABLE_surfbody_feedback_100) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback_100)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_100_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_100_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_100_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_100_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_100_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_100_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_100_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_100_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_100_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback_100"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback_100"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback_100"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback_100"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback_100"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback_100"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback_100"; T[6].name = s; }
    CCMA_T_surfbody_feedback_100_TAG = T;
    CCMA_nT_surfbody_feedback_100_TAG = ntag;
    CCMA_nT_surfbody_feedback_100_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_100_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_100_MEM;
  return CCMA_T_surfbody_feedback_100_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_100_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_100_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 230;
    { static char s[] =
      ";datum_status@surfbody_feedback_100;datum_sfc_event@surfbody_feedback_100;"
      "an_depar@surfbody_feedback_100;fg_depar@surfbody_feedback_100;"
      "snow_depth@surfbody_feedback_100;snow_density@surfbody_feedback_100;"
      "lsm@surfbody_feedback_100;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 907;
    { static char s[] =
      ";datum_status@surfbody_feedback_100;datum_sfc_event@surfbody_feedback_100;"
      "an_depar@surfbody_feedback_100;fg_depar@surfbody_feedback_100;"
      "snow_depth@surfbody_feedback_100;snow_density@surfbody_feedback_100;"
      "lsm@surfbody_feedback_100;datum_status.active@surfbody_feedback_100;"
      "datum_status.passive@surfbody_feedback_100;datum_status.rejected@surfbody_feedback_100;"
      "datum_status.blacklisted@surfbody_feedback_100;datum_status.use_emiskf_only@surfbody_feedback_100;"
      "datum_sfc_event.statid@surfbody_feedback_100;datum_sfc_event.lsmask@surfbody_feedback_100;"
      "datum_sfc_event.stalt_missing@surfbody_feedback_100;"
      "datum_sfc_event.obsvalue_missing@surfbody_feedback_100;"
      "datum_sfc_event.fg_missing@surfbody_feedback_100;datum_sfc_event.fg2big@surfbody_feedback_100;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback_100;"
      "datum_sfc_event.redundant@surfbody_feedback_100;datum_sfc_event.report_rejected@surfbody_feedback_100;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_100_PREPTAG = T;
    CCMA_nT_surfbody_feedback_100_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_100_PREPTAG;
  return CCMA_T_surfbody_feedback_100_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback_100(void *T);
extern int CCMA_Unpack_T_surfbody_feedback_100(void *T);
extern int CCMA_Sel_T_surfbody_feedback_100(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback_100);
PrePutTable(CCMA, d, double, surfbody_feedback_100);
PreLoadTable(CCMA, surfbody_feedback_100);
PreStoreTable(CCMA, surfbody_feedback_100);
extern void CCMA_Dim_T_surfbody_feedback_100(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback_100(void *T);
extern int CCMA_Sql_T_surfbody_feedback_100(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback_100(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic" : appearance order#326, hierarchy rank# 5, weight = 3.000326 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,max_fcdiag);
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_1));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_1));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_2));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_2));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_3));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_3));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_4));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_4));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_5));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_5));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_6));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_6));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_7));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_7));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_8));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_8));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_9));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_9));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_10));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_10));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_11));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_11));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_12));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_12));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_13));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_13));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_14));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_14));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_15));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_15));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_16));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_16));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_17));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_17));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_18));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_18));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_19));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_19));
  DeclareDS(linkoffset_t,LINKOFFSET(fcdiagnostic_body_20));
  DeclareDS(linklen_t,LINKLEN(fcdiagnostic_body_20));
} TABLE_fcdiagnostic;

#endif /* defined(IS_a_TABLE_fcdiagnostic) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_TAG) {
    int ntag = 41;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:max_fcdiag@fcdiagnostic"; T[0].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_1)@fcdiagnostic"; T[1].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_1)@fcdiagnostic"; T[2].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_2)@fcdiagnostic"; T[3].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_2)@fcdiagnostic"; T[4].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_3)@fcdiagnostic"; T[5].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_3)@fcdiagnostic"; T[6].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_4)@fcdiagnostic"; T[7].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_4)@fcdiagnostic"; T[8].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_5)@fcdiagnostic"; T[9].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_5)@fcdiagnostic"; T[10].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_6)@fcdiagnostic"; T[11].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_6)@fcdiagnostic"; T[12].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_7)@fcdiagnostic"; T[13].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_7)@fcdiagnostic"; T[14].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_8)@fcdiagnostic"; T[15].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_8)@fcdiagnostic"; T[16].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_9)@fcdiagnostic"; T[17].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_9)@fcdiagnostic"; T[18].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_10)@fcdiagnostic"; T[19].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_10)@fcdiagnostic"; T[20].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_11)@fcdiagnostic"; T[21].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_11)@fcdiagnostic"; T[22].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_12)@fcdiagnostic"; T[23].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_12)@fcdiagnostic"; T[24].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_13)@fcdiagnostic"; T[25].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_13)@fcdiagnostic"; T[26].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_14)@fcdiagnostic"; T[27].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_14)@fcdiagnostic"; T[28].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_15)@fcdiagnostic"; T[29].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_15)@fcdiagnostic"; T[30].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_16)@fcdiagnostic"; T[31].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_16)@fcdiagnostic"; T[32].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_17)@fcdiagnostic"; T[33].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_17)@fcdiagnostic"; T[34].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_18)@fcdiagnostic"; T[35].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_18)@fcdiagnostic"; T[36].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_19)@fcdiagnostic"; T[37].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_19)@fcdiagnostic"; T[38].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(fcdiagnostic_body_20)@fcdiagnostic"; T[39].name = s; }
    { static char s[] = "linklen_t:LINKLEN(fcdiagnostic_body_20)@fcdiagnostic"; T[40].name = s; }
    CCMA_T_fcdiagnostic_TAG = T;
    CCMA_nT_fcdiagnostic_TAG = ntag;
    CCMA_nT_fcdiagnostic_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_MEM;
  return CCMA_T_fcdiagnostic_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 1787;
    { static char s[] =
      ";max_fcdiag@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_1)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_1)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_2)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_2)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_3)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_3)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_4)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_4)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_5)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_5)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_6)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_6)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_7)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_7)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_8)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_8)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_9)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_9)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_10)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_10)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_11)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_11)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_12)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_12)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_13)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_13)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_14)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_14)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_15)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_15)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_16)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_16)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_17)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_17)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_18)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_18)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_19)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_19)@fcdiagnostic;LINKOFFSET(fcdiagnostic_body_20)@fcdiagnostic;"
      "LINKLEN(fcdiagnostic_body_20)@fcdiagnostic;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 468;
    { static char s[] =
      ";pk1int;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_PREPTAG = T;
    CCMA_nT_fcdiagnostic_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_PREPTAG;
  return CCMA_T_fcdiagnostic_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic(void *T);
extern int CCMA_Unpack_T_fcdiagnostic(void *T);
extern int CCMA_Sel_T_fcdiagnostic(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic);
PrePutTable(CCMA, d, double, fcdiagnostic);
PreLoadTable(CCMA, fcdiagnostic);
PreStoreTable(CCMA, fcdiagnostic);
extern void CCMA_Dim_T_fcdiagnostic(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic(void *T);
extern int CCMA_Sql_T_fcdiagnostic(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_1) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_1" : appearance order#327, hierarchy rank# 350, weight = 358.000327 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_1;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_1) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_1)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_1_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_1_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_1_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_1_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_1_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_1_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_1_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_1_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_1_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_1"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_1"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_1_TAG = T;
    CCMA_nT_fcdiagnostic_body_1_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_1_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_1_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_1_MEM;
  return CCMA_T_fcdiagnostic_body_1_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_1_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_1_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_1;fc_step@fcdiagnostic_body_1;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_1_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_1_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_1_PREPTAG;
  return CCMA_T_fcdiagnostic_body_1_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_1(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_1(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_1(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_1);
PrePutTable(CCMA, d, double, fcdiagnostic_body_1);
PreLoadTable(CCMA, fcdiagnostic_body_1);
PreStoreTable(CCMA, fcdiagnostic_body_1);
extern void CCMA_Dim_T_fcdiagnostic_body_1(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_1(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_1(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_1(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_2) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_2" : appearance order#328, hierarchy rank# 351, weight = 358.000328 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_2;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_2) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_2)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_2_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_2_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_2_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_2_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_2_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_2_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_2_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_2_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_2_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_2"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_2"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_2_TAG = T;
    CCMA_nT_fcdiagnostic_body_2_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_2_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_2_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_2_MEM;
  return CCMA_T_fcdiagnostic_body_2_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_2_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_2_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_2;fc_step@fcdiagnostic_body_2;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_2_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_2_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_2_PREPTAG;
  return CCMA_T_fcdiagnostic_body_2_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_2(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_2(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_2(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_2);
PrePutTable(CCMA, d, double, fcdiagnostic_body_2);
PreLoadTable(CCMA, fcdiagnostic_body_2);
PreStoreTable(CCMA, fcdiagnostic_body_2);
extern void CCMA_Dim_T_fcdiagnostic_body_2(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_2(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_2(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_2(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_3) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_3" : appearance order#329, hierarchy rank# 352, weight = 358.000329 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_3;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_3) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_3)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_3_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_3_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_3_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_3_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_3_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_3_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_3_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_3_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_3_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_3"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_3"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_3_TAG = T;
    CCMA_nT_fcdiagnostic_body_3_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_3_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_3_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_3_MEM;
  return CCMA_T_fcdiagnostic_body_3_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_3_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_3_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_3;fc_step@fcdiagnostic_body_3;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_3_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_3_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_3_PREPTAG;
  return CCMA_T_fcdiagnostic_body_3_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_3(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_3(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_3(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_3);
PrePutTable(CCMA, d, double, fcdiagnostic_body_3);
PreLoadTable(CCMA, fcdiagnostic_body_3);
PreStoreTable(CCMA, fcdiagnostic_body_3);
extern void CCMA_Dim_T_fcdiagnostic_body_3(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_3(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_3(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_3(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_4) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_4" : appearance order#330, hierarchy rank# 353, weight = 358.000330 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_4;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_4) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_4)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_4_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_4_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_4_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_4_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_4_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_4_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_4_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_4_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_4_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_4"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_4"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_4_TAG = T;
    CCMA_nT_fcdiagnostic_body_4_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_4_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_4_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_4_MEM;
  return CCMA_T_fcdiagnostic_body_4_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_4_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_4_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_4;fc_step@fcdiagnostic_body_4;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_4_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_4_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_4_PREPTAG;
  return CCMA_T_fcdiagnostic_body_4_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_4(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_4(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_4(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_4);
PrePutTable(CCMA, d, double, fcdiagnostic_body_4);
PreLoadTable(CCMA, fcdiagnostic_body_4);
PreStoreTable(CCMA, fcdiagnostic_body_4);
extern void CCMA_Dim_T_fcdiagnostic_body_4(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_4(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_4(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_4(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_5) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_5" : appearance order#331, hierarchy rank# 354, weight = 358.000331 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_5;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_5) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_5)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_5_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_5_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_5_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_5_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_5_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_5_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_5_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_5_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_5_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_5"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_5"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_5_TAG = T;
    CCMA_nT_fcdiagnostic_body_5_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_5_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_5_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_5_MEM;
  return CCMA_T_fcdiagnostic_body_5_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_5_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_5_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_5;fc_step@fcdiagnostic_body_5;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_5_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_5_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_5_PREPTAG;
  return CCMA_T_fcdiagnostic_body_5_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_5(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_5(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_5(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_5);
PrePutTable(CCMA, d, double, fcdiagnostic_body_5);
PreLoadTable(CCMA, fcdiagnostic_body_5);
PreStoreTable(CCMA, fcdiagnostic_body_5);
extern void CCMA_Dim_T_fcdiagnostic_body_5(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_5(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_5(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_5(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_6) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_6" : appearance order#332, hierarchy rank# 355, weight = 358.000332 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_6;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_6) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_6)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_6_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_6_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_6_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_6_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_6_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_6_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_6_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_6_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_6_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_6"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_6"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_6_TAG = T;
    CCMA_nT_fcdiagnostic_body_6_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_6_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_6_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_6_MEM;
  return CCMA_T_fcdiagnostic_body_6_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_6_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_6_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_6;fc_step@fcdiagnostic_body_6;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_6_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_6_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_6_PREPTAG;
  return CCMA_T_fcdiagnostic_body_6_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_6(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_6(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_6(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_6);
PrePutTable(CCMA, d, double, fcdiagnostic_body_6);
PreLoadTable(CCMA, fcdiagnostic_body_6);
PreStoreTable(CCMA, fcdiagnostic_body_6);
extern void CCMA_Dim_T_fcdiagnostic_body_6(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_6(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_6(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_6(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_7) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_7" : appearance order#333, hierarchy rank# 356, weight = 358.000333 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_7;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_7) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_7)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_7_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_7_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_7_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_7_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_7_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_7_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_7_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_7_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_7_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_7"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_7"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_7_TAG = T;
    CCMA_nT_fcdiagnostic_body_7_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_7_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_7_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_7_MEM;
  return CCMA_T_fcdiagnostic_body_7_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_7_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_7_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_7;fc_step@fcdiagnostic_body_7;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_7_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_7_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_7_PREPTAG;
  return CCMA_T_fcdiagnostic_body_7_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_7(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_7(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_7(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_7);
PrePutTable(CCMA, d, double, fcdiagnostic_body_7);
PreLoadTable(CCMA, fcdiagnostic_body_7);
PreStoreTable(CCMA, fcdiagnostic_body_7);
extern void CCMA_Dim_T_fcdiagnostic_body_7(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_7(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_7(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_7(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_8) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_8" : appearance order#334, hierarchy rank# 357, weight = 358.000334 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_8;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_8) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_8)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_8_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_8_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_8_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_8_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_8_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_8_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_8_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_8_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_8_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_8"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_8"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_8_TAG = T;
    CCMA_nT_fcdiagnostic_body_8_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_8_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_8_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_8_MEM;
  return CCMA_T_fcdiagnostic_body_8_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_8_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_8_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_8;fc_step@fcdiagnostic_body_8;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_8_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_8_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_8_PREPTAG;
  return CCMA_T_fcdiagnostic_body_8_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_8(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_8(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_8(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_8);
PrePutTable(CCMA, d, double, fcdiagnostic_body_8);
PreLoadTable(CCMA, fcdiagnostic_body_8);
PreStoreTable(CCMA, fcdiagnostic_body_8);
extern void CCMA_Dim_T_fcdiagnostic_body_8(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_8(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_8(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_8(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_9) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_9" : appearance order#335, hierarchy rank# 358, weight = 358.000335 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_9;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_9) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_9)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_9_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_9_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_9_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_9_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_9_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_9_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_9_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_9_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_9_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_9"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_9"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_9_TAG = T;
    CCMA_nT_fcdiagnostic_body_9_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_9_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_9_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_9_MEM;
  return CCMA_T_fcdiagnostic_body_9_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_9_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_9_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 58;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_9;fc_step@fcdiagnostic_body_9;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_9_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_9_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_9_PREPTAG;
  return CCMA_T_fcdiagnostic_body_9_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_9(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_9(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_9(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_9);
PrePutTable(CCMA, d, double, fcdiagnostic_body_9);
PreLoadTable(CCMA, fcdiagnostic_body_9);
PreStoreTable(CCMA, fcdiagnostic_body_9);
extern void CCMA_Dim_T_fcdiagnostic_body_9(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_9(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_9(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_9(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_10) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_10" : appearance order#336, hierarchy rank# 359, weight = 358.000336 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_10;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_10) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_10)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_10_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_10_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_10_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_10_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_10_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_10_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_10_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_10_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_10_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_10"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_10"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_10_TAG = T;
    CCMA_nT_fcdiagnostic_body_10_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_10_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_10_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_10_MEM;
  return CCMA_T_fcdiagnostic_body_10_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_10_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_10_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_10;fc_step@fcdiagnostic_body_10;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_10_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_10_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_10_PREPTAG;
  return CCMA_T_fcdiagnostic_body_10_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_10(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_10(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_10(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_10);
PrePutTable(CCMA, d, double, fcdiagnostic_body_10);
PreLoadTable(CCMA, fcdiagnostic_body_10);
PreStoreTable(CCMA, fcdiagnostic_body_10);
extern void CCMA_Dim_T_fcdiagnostic_body_10(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_10(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_10(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_10(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_11) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_11" : appearance order#337, hierarchy rank# 360, weight = 358.000337 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_11;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_11) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_11)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_11_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_11_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_11_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_11_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_11_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_11_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_11_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_11_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_11_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_11"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_11"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_11_TAG = T;
    CCMA_nT_fcdiagnostic_body_11_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_11_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_11_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_11_MEM;
  return CCMA_T_fcdiagnostic_body_11_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_11_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_11_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_11;fc_step@fcdiagnostic_body_11;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_11_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_11_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_11_PREPTAG;
  return CCMA_T_fcdiagnostic_body_11_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_11(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_11(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_11(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_11);
PrePutTable(CCMA, d, double, fcdiagnostic_body_11);
PreLoadTable(CCMA, fcdiagnostic_body_11);
PreStoreTable(CCMA, fcdiagnostic_body_11);
extern void CCMA_Dim_T_fcdiagnostic_body_11(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_11(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_11(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_11(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_12) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_12" : appearance order#338, hierarchy rank# 361, weight = 358.000338 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_12;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_12) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_12)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_12_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_12_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_12_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_12_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_12_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_12_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_12_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_12_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_12_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_12"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_12"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_12_TAG = T;
    CCMA_nT_fcdiagnostic_body_12_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_12_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_12_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_12_MEM;
  return CCMA_T_fcdiagnostic_body_12_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_12_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_12_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_12;fc_step@fcdiagnostic_body_12;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_12_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_12_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_12_PREPTAG;
  return CCMA_T_fcdiagnostic_body_12_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_12(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_12(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_12(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_12);
PrePutTable(CCMA, d, double, fcdiagnostic_body_12);
PreLoadTable(CCMA, fcdiagnostic_body_12);
PreStoreTable(CCMA, fcdiagnostic_body_12);
extern void CCMA_Dim_T_fcdiagnostic_body_12(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_12(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_12(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_12(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_13) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_13" : appearance order#339, hierarchy rank# 362, weight = 358.000339 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_13;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_13) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_13)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_13_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_13_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_13_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_13_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_13_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_13_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_13_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_13_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_13_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_13"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_13"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_13_TAG = T;
    CCMA_nT_fcdiagnostic_body_13_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_13_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_13_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_13_MEM;
  return CCMA_T_fcdiagnostic_body_13_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_13_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_13_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_13;fc_step@fcdiagnostic_body_13;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_13_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_13_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_13_PREPTAG;
  return CCMA_T_fcdiagnostic_body_13_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_13(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_13(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_13(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_13);
PrePutTable(CCMA, d, double, fcdiagnostic_body_13);
PreLoadTable(CCMA, fcdiagnostic_body_13);
PreStoreTable(CCMA, fcdiagnostic_body_13);
extern void CCMA_Dim_T_fcdiagnostic_body_13(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_13(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_13(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_13(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_14) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_14" : appearance order#340, hierarchy rank# 363, weight = 358.000340 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_14;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_14) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_14)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_14_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_14_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_14_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_14_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_14_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_14_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_14_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_14_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_14_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_14"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_14"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_14_TAG = T;
    CCMA_nT_fcdiagnostic_body_14_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_14_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_14_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_14_MEM;
  return CCMA_T_fcdiagnostic_body_14_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_14_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_14_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_14;fc_step@fcdiagnostic_body_14;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_14_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_14_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_14_PREPTAG;
  return CCMA_T_fcdiagnostic_body_14_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_14(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_14(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_14(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_14);
PrePutTable(CCMA, d, double, fcdiagnostic_body_14);
PreLoadTable(CCMA, fcdiagnostic_body_14);
PreStoreTable(CCMA, fcdiagnostic_body_14);
extern void CCMA_Dim_T_fcdiagnostic_body_14(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_14(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_14(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_14(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_15) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_15" : appearance order#341, hierarchy rank# 364, weight = 358.000341 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_15;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_15) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_15)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_15_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_15_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_15_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_15_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_15_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_15_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_15_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_15_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_15_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_15"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_15"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_15_TAG = T;
    CCMA_nT_fcdiagnostic_body_15_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_15_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_15_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_15_MEM;
  return CCMA_T_fcdiagnostic_body_15_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_15_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_15_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_15;fc_step@fcdiagnostic_body_15;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_15_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_15_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_15_PREPTAG;
  return CCMA_T_fcdiagnostic_body_15_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_15(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_15(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_15(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_15);
PrePutTable(CCMA, d, double, fcdiagnostic_body_15);
PreLoadTable(CCMA, fcdiagnostic_body_15);
PreStoreTable(CCMA, fcdiagnostic_body_15);
extern void CCMA_Dim_T_fcdiagnostic_body_15(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_15(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_15(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_15(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_16) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_16" : appearance order#342, hierarchy rank# 365, weight = 358.000342 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_16;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_16) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_16)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_16_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_16_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_16_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_16_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_16_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_16_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_16_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_16_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_16_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_16"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_16"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_16_TAG = T;
    CCMA_nT_fcdiagnostic_body_16_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_16_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_16_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_16_MEM;
  return CCMA_T_fcdiagnostic_body_16_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_16_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_16_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_16;fc_step@fcdiagnostic_body_16;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_16_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_16_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_16_PREPTAG;
  return CCMA_T_fcdiagnostic_body_16_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_16(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_16(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_16(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_16);
PrePutTable(CCMA, d, double, fcdiagnostic_body_16);
PreLoadTable(CCMA, fcdiagnostic_body_16);
PreStoreTable(CCMA, fcdiagnostic_body_16);
extern void CCMA_Dim_T_fcdiagnostic_body_16(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_16(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_16(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_16(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_17) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_17" : appearance order#343, hierarchy rank# 366, weight = 358.000343 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_17;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_17) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_17)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_17_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_17_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_17_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_17_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_17_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_17_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_17_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_17_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_17_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_17"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_17"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_17_TAG = T;
    CCMA_nT_fcdiagnostic_body_17_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_17_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_17_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_17_MEM;
  return CCMA_T_fcdiagnostic_body_17_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_17_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_17_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_17;fc_step@fcdiagnostic_body_17;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_17_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_17_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_17_PREPTAG;
  return CCMA_T_fcdiagnostic_body_17_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_17(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_17(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_17(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_17);
PrePutTable(CCMA, d, double, fcdiagnostic_body_17);
PreLoadTable(CCMA, fcdiagnostic_body_17);
PreStoreTable(CCMA, fcdiagnostic_body_17);
extern void CCMA_Dim_T_fcdiagnostic_body_17(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_17(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_17(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_17(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_18) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_18" : appearance order#344, hierarchy rank# 367, weight = 358.000344 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_18;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_18) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_18)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_18_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_18_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_18_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_18_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_18_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_18_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_18_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_18_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_18_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_18"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_18"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_18_TAG = T;
    CCMA_nT_fcdiagnostic_body_18_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_18_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_18_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_18_MEM;
  return CCMA_T_fcdiagnostic_body_18_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_18_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_18_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_18;fc_step@fcdiagnostic_body_18;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_18_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_18_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_18_PREPTAG;
  return CCMA_T_fcdiagnostic_body_18_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_18(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_18(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_18(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_18);
PrePutTable(CCMA, d, double, fcdiagnostic_body_18);
PreLoadTable(CCMA, fcdiagnostic_body_18);
PreStoreTable(CCMA, fcdiagnostic_body_18);
extern void CCMA_Dim_T_fcdiagnostic_body_18(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_18(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_18(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_18(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_19) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_19" : appearance order#345, hierarchy rank# 368, weight = 358.000345 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_19;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_19) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_19)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_19_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_19_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_19_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_19_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_19_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_19_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_19_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_19_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_19_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_19"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_19"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_19_TAG = T;
    CCMA_nT_fcdiagnostic_body_19_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_19_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_19_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_19_MEM;
  return CCMA_T_fcdiagnostic_body_19_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_19_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_19_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_19;fc_step@fcdiagnostic_body_19;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_19_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_19_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_19_PREPTAG;
  return CCMA_T_fcdiagnostic_body_19_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_19(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_19(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_19(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_19);
PrePutTable(CCMA, d, double, fcdiagnostic_body_19);
PreLoadTable(CCMA, fcdiagnostic_body_19);
PreStoreTable(CCMA, fcdiagnostic_body_19);
extern void CCMA_Dim_T_fcdiagnostic_body_19(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_19(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_19(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_19(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_fcdiagnostic_body_20) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "fcdiagnostic_body_20" : appearance order#346, hierarchy rank# 369, weight = 358.000346 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fc_depar);
  DeclareDS(yyyymmdd,fc_step);
} TABLE_fcdiagnostic_body_20;

#endif /* defined(IS_a_TABLE_fcdiagnostic_body_20) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_fcdiagnostic_body_20)
extern const ODB_Tags *CCMA_Set_T_fcdiagnostic_body_20_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_fcdiagnostic_body_20_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_fcdiagnostic_body_20_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_fcdiagnostic_body_20_PREPTAG = NULL;
PRIVATE int CCMA_nT_fcdiagnostic_body_20_TAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_20_PREPTAG = 0;
PRIVATE int CCMA_nT_fcdiagnostic_body_20_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_fcdiagnostic_body_20_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_fcdiagnostic_body_20_TAG) {
    int ntag = 2;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fc_depar@fcdiagnostic_body_20"; T[0].name = s; }
    { static char s[] = "yyyymmdd:fc_step@fcdiagnostic_body_20"; T[1].name = s; }
    CCMA_T_fcdiagnostic_body_20_TAG = T;
    CCMA_nT_fcdiagnostic_body_20_TAG = ntag;
    CCMA_nT_fcdiagnostic_body_20_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_fcdiagnostic_body_20_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_fcdiagnostic_body_20_MEM;
  return CCMA_T_fcdiagnostic_body_20_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_fcdiagnostic_body_20_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_fcdiagnostic_body_20_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 60;
    { static char s[] =
      ";fc_depar@fcdiagnostic_body_20;fc_step@fcdiagnostic_body_20;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 18;
    { static char s[] =
      ";pk9real;yyyymmdd;";
      T[1].longname = s; }
    CCMA_T_fcdiagnostic_body_20_PREPTAG = T;
    CCMA_nT_fcdiagnostic_body_20_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_fcdiagnostic_body_20_PREPTAG;
  return CCMA_T_fcdiagnostic_body_20_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_fcdiagnostic_body_20(void *T);
extern int CCMA_Unpack_T_fcdiagnostic_body_20(void *T);
extern int CCMA_Sel_T_fcdiagnostic_body_20(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, fcdiagnostic_body_20);
PrePutTable(CCMA, d, double, fcdiagnostic_body_20);
PreLoadTable(CCMA, fcdiagnostic_body_20);
PreStoreTable(CCMA, fcdiagnostic_body_20);
extern void CCMA_Dim_T_fcdiagnostic_body_20(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_fcdiagnostic_body_20(void *T);
extern int CCMA_Sql_T_fcdiagnostic_body_20(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_fcdiagnostic_body_20(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_gbrad) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "gbrad" : appearance order#347, hierarchy rank# 7, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,report_rrflag);
  DeclareDS(linkoffset_t,LINKOFFSET(gbrad_body));
  DeclareDS(linklen_t,LINKLEN(gbrad_body));
} TABLE_gbrad;

#endif /* defined(IS_a_TABLE_gbrad) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_gbrad)
extern const ODB_Tags *CCMA_Set_T_gbrad_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_gbrad_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_gbrad_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_gbrad_PREPTAG = NULL;
PRIVATE int CCMA_nT_gbrad_TAG = 0;
PRIVATE int CCMA_nT_gbrad_PREPTAG = 0;
PRIVATE int CCMA_nT_gbrad_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_gbrad_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_gbrad_TAG) {
    int ntag = 3;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:report_rrflag@gbrad"; T[0].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(gbrad_body)@gbrad"; T[1].name = s; }
    { static char s[] = "linklen_t:LINKLEN(gbrad_body)@gbrad"; T[2].name = s; }
    CCMA_T_gbrad_TAG = T;
    CCMA_nT_gbrad_TAG = ntag;
    CCMA_nT_gbrad_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_gbrad_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_gbrad_MEM;
  return CCMA_T_gbrad_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_gbrad_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_gbrad_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 76;
    { static char s[] =
      ";report_rrflag@gbrad;LINKOFFSET(gbrad_body)@gbrad;"
      "LINKLEN(gbrad_body)@gbrad;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 31;
    { static char s[] =
      ";pk1int;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_gbrad_PREPTAG = T;
    CCMA_nT_gbrad_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_gbrad_PREPTAG;
  return CCMA_T_gbrad_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_gbrad(void *T);
extern int CCMA_Unpack_T_gbrad(void *T);
extern int CCMA_Sel_T_gbrad(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, gbrad);
PrePutTable(CCMA, d, double, gbrad);
PreLoadTable(CCMA, gbrad);
PreStoreTable(CCMA, gbrad);
extern void CCMA_Dim_T_gbrad(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_gbrad(void *T);
extern int CCMA_Sql_T_gbrad(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_gbrad(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_gbrad_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "gbrad_body" : appearance order#348, hierarchy rank# 370, weight = 358.000348 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,rrvalue);
  DeclareDS(pk9real,rrvaluetl);
  DeclareDS(pk9real,rrvaluead);
} TABLE_gbrad_body;

#endif /* defined(IS_a_TABLE_gbrad_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_gbrad_body)
extern const ODB_Tags *CCMA_Set_T_gbrad_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_gbrad_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_gbrad_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_gbrad_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_gbrad_body_TAG = 0;
PRIVATE int CCMA_nT_gbrad_body_PREPTAG = 0;
PRIVATE int CCMA_nT_gbrad_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_gbrad_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_gbrad_body_TAG) {
    int ntag = 3;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:rrvalue@gbrad_body"; T[0].name = s; }
    { static char s[] = "pk9real:rrvaluetl@gbrad_body"; T[1].name = s; }
    { static char s[] = "pk9real:rrvaluead@gbrad_body"; T[2].name = s; }
    CCMA_T_gbrad_body_TAG = T;
    CCMA_nT_gbrad_body_TAG = ntag;
    CCMA_nT_gbrad_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_gbrad_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_gbrad_body_MEM;
  return CCMA_T_gbrad_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_gbrad_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_gbrad_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 62;
    { static char s[] =
      ";rrvalue@gbrad_body;rrvaluetl@gbrad_body;rrvaluead@gbrad_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 25;
    { static char s[] =
      ";pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_gbrad_body_PREPTAG = T;
    CCMA_nT_gbrad_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_gbrad_body_PREPTAG;
  return CCMA_T_gbrad_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_gbrad_body(void *T);
extern int CCMA_Unpack_T_gbrad_body(void *T);
extern int CCMA_Sel_T_gbrad_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, gbrad_body);
PrePutTable(CCMA, d, double, gbrad_body);
PreLoadTable(CCMA, gbrad_body);
PreStoreTable(CCMA, gbrad_body);
extern void CCMA_Dim_T_gbrad_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_gbrad_body(void *T);
extern int CCMA_Sql_T_gbrad_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_gbrad_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_raingg) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "raingg" : appearance order#349, hierarchy rank# 8, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,report_rrflag);
  DeclareDS(linkoffset_t,LINKOFFSET(raingg_body));
  DeclareDS(linklen_t,LINKLEN(raingg_body));
} TABLE_raingg;

#endif /* defined(IS_a_TABLE_raingg) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_raingg)
extern const ODB_Tags *CCMA_Set_T_raingg_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_raingg_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_raingg_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_raingg_PREPTAG = NULL;
PRIVATE int CCMA_nT_raingg_TAG = 0;
PRIVATE int CCMA_nT_raingg_PREPTAG = 0;
PRIVATE int CCMA_nT_raingg_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_raingg_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_raingg_TAG) {
    int ntag = 3;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:report_rrflag@raingg"; T[0].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(raingg_body)@raingg"; T[1].name = s; }
    { static char s[] = "linklen_t:LINKLEN(raingg_body)@raingg"; T[2].name = s; }
    CCMA_T_raingg_TAG = T;
    CCMA_nT_raingg_TAG = ntag;
    CCMA_nT_raingg_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_raingg_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_raingg_MEM;
  return CCMA_T_raingg_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_raingg_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_raingg_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 81;
    { static char s[] =
      ";report_rrflag@raingg;LINKOFFSET(raingg_body)@raingg;"
      "LINKLEN(raingg_body)@raingg;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 31;
    { static char s[] =
      ";pk1int;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_raingg_PREPTAG = T;
    CCMA_nT_raingg_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_raingg_PREPTAG;
  return CCMA_T_raingg_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_raingg(void *T);
extern int CCMA_Unpack_T_raingg(void *T);
extern int CCMA_Sel_T_raingg(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, raingg);
PrePutTable(CCMA, d, double, raingg);
PreLoadTable(CCMA, raingg);
PreStoreTable(CCMA, raingg);
extern void CCMA_Dim_T_raingg(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_raingg(void *T);
extern int CCMA_Sql_T_raingg(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_raingg(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_raingg_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "raingg_body" : appearance order#350, hierarchy rank# 371, weight = 358.000350 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,rrvalue);
  DeclareDS(pk9real,rrvaluetl);
  DeclareDS(pk9real,rrvaluead);
} TABLE_raingg_body;

#endif /* defined(IS_a_TABLE_raingg_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_raingg_body)
extern const ODB_Tags *CCMA_Set_T_raingg_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_raingg_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_raingg_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_raingg_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_raingg_body_TAG = 0;
PRIVATE int CCMA_nT_raingg_body_PREPTAG = 0;
PRIVATE int CCMA_nT_raingg_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_raingg_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_raingg_body_TAG) {
    int ntag = 3;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:rrvalue@raingg_body"; T[0].name = s; }
    { static char s[] = "pk9real:rrvaluetl@raingg_body"; T[1].name = s; }
    { static char s[] = "pk9real:rrvaluead@raingg_body"; T[2].name = s; }
    CCMA_T_raingg_body_TAG = T;
    CCMA_nT_raingg_body_TAG = ntag;
    CCMA_nT_raingg_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_raingg_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_raingg_body_MEM;
  return CCMA_T_raingg_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_raingg_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_raingg_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 65;
    { static char s[] =
      ";rrvalue@raingg_body;rrvaluetl@raingg_body;rrvaluead@raingg_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 25;
    { static char s[] =
      ";pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_raingg_body_PREPTAG = T;
    CCMA_nT_raingg_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_raingg_body_PREPTAG;
  return CCMA_T_raingg_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_raingg_body(void *T);
extern int CCMA_Unpack_T_raingg_body(void *T);
extern int CCMA_Sel_T_raingg_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, raingg_body);
PrePutTable(CCMA, d, double, raingg_body);
PreLoadTable(CCMA, raingg_body);
PreStoreTable(CCMA, raingg_body);
extern void CCMA_Dim_T_raingg_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_raingg_body(void *T);
extern int CCMA_Sql_T_raingg_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_raingg_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_conv) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "conv" : appearance order#351, hierarchy rank# 9, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,flight_phase);
  DeclareDS(pk9real,flight_dp_o_dt);
  DeclareDS(pk9real,anemoht);
  DeclareDS(pk9real,baroht);
  DeclareDS(pk1int,station_type);
  DeclareDS(pk1int,sonde_type);
  DeclareDS(pk1int,collection_identifier);
  DeclareDS(pk1int,country);
  DeclareDS(pk1int,unique_identifier);
  DeclareDS(pk1int,timeseries_index);
  DeclareDS(pk9real,heading);
  DeclareDS(string,aircraft_type);
  DeclareDS(linkoffset_t,LINKOFFSET(conv_body));
  DeclareDS(linklen_t,LINKLEN(conv_body));
} TABLE_conv;

#endif /* defined(IS_a_TABLE_conv) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_conv)
extern const ODB_Tags *CCMA_Set_T_conv_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_conv_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_conv_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_conv_PREPTAG = NULL;
PRIVATE int CCMA_nT_conv_TAG = 0;
PRIVATE int CCMA_nT_conv_PREPTAG = 0;
PRIVATE int CCMA_nT_conv_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_conv_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_conv_TAG) {
    int ntag = 14;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:flight_phase@conv"; T[0].name = s; }
    { static char s[] = "pk9real:flight_dp_o_dt@conv"; T[1].name = s; }
    { static char s[] = "pk9real:anemoht@conv"; T[2].name = s; }
    { static char s[] = "pk9real:baroht@conv"; T[3].name = s; }
    { static char s[] = "pk1int:station_type@conv"; T[4].name = s; }
    { static char s[] = "pk1int:sonde_type@conv"; T[5].name = s; }
    { static char s[] = "pk1int:collection_identifier@conv"; T[6].name = s; }
    { static char s[] = "pk1int:country@conv"; T[7].name = s; }
    { static char s[] = "pk1int:unique_identifier@conv"; T[8].name = s; }
    { static char s[] = "pk1int:timeseries_index@conv"; T[9].name = s; }
    { static char s[] = "pk9real:heading@conv"; T[10].name = s; }
    { static char s[] = "string:aircraft_type@conv"; T[11].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(conv_body)@conv"; T[12].name = s; }
    { static char s[] = "linklen_t:LINKLEN(conv_body)@conv"; T[13].name = s; }
    CCMA_T_conv_TAG = T;
    CCMA_nT_conv_TAG = ntag;
    CCMA_nT_conv_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_conv_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_conv_MEM;
  return CCMA_T_conv_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_conv_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_conv_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 266;
    { static char s[] =
      ";flight_phase@conv;flight_dp_o_dt@conv;anemoht@conv;"
      "baroht@conv;station_type@conv;sonde_type@conv;collection_identifier@conv;"
      "country@conv;unique_identifier@conv;timeseries_index@conv;"
      "heading@conv;aircraft_type@conv;LINKOFFSET(conv_body)@conv;"
      "LINKLEN(conv_body)@conv;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 112;
    { static char s[] =
      ";pk1int;pk9real;pk9real;pk9real;pk1int;pk1int;pk1int;"
      "pk1int;pk1int;pk1int;pk9real;string;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_conv_PREPTAG = T;
    CCMA_nT_conv_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_conv_PREPTAG;
  return CCMA_T_conv_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_conv(void *T);
extern int CCMA_Unpack_T_conv(void *T);
extern int CCMA_Sel_T_conv(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, conv);
PrePutTable(CCMA, d, double, conv);
PreLoadTable(CCMA, conv);
PreStoreTable(CCMA, conv);
extern void CCMA_Dim_T_conv(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_conv(void *T);
extern int CCMA_Sql_T_conv(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_conv(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_conv_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "conv_body" : appearance order#352, hierarchy rank# 372, weight = 358.000352 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,ppcode);
  DeclareDS(Bitfield,level); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk1int,datum_qcflag);
} TABLE_conv_body;

#endif /* defined(IS_a_TABLE_conv_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_conv_body)
extern const ODB_Tags *CCMA_Set_T_conv_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_conv_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_conv_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_conv_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_conv_body_TAG = 0;
PRIVATE int CCMA_nT_conv_body_PREPTAG = 0;
PRIVATE int CCMA_nT_conv_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_conv_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_conv_body_TAG) {
    int ntag = 3;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:ppcode@conv_body"; T[0].name = s; }
    { static char s[] = "Bitfield:level@conv_body"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "maxwind 1"; T[1].memb[0] = s; }
      { static char s[] = "tropopause 1"; T[1].memb[1] = s; }
      { static char s[] = "d_part 1"; T[1].memb[2] = s; }
      { static char s[] = "c_part 1"; T[1].memb[3] = s; }
      { static char s[] = "b_part 1"; T[1].memb[4] = s; }
      { static char s[] = "a_part 1"; T[1].memb[5] = s; }
      { static char s[] = "surface 1"; T[1].memb[6] = s; }
      { static char s[] = "signwind 1"; T[1].memb[7] = s; }
      { static char s[] = "signtemp 1"; T[1].memb[8] = s; }
    { static char s[] = "pk1int:datum_qcflag@conv_body"; T[2].name = s; }
    CCMA_T_conv_body_TAG = T;
    CCMA_nT_conv_body_TAG = ntag;
    CCMA_nT_conv_body_MEM = 9;
  }
  if (ntag_out) *ntag_out = CCMA_nT_conv_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_conv_body_MEM;
  return CCMA_T_conv_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_conv_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_conv_body_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 57;
    { static char s[] =
      ";ppcode@conv_body;level@conv_body;datum_qcflag@conv_body;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 24;
    { static char s[] =
      ";pk1int;Bitfield;pk1int;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 274;
    { static char s[] =
      ";ppcode@conv_body;level@conv_body;datum_qcflag@conv_body;"
      "level.maxwind@conv_body;level.tropopause@conv_body;"
      "level.d_part@conv_body;level.c_part@conv_body;level.b_part@conv_body;"
      "level.a_part@conv_body;level.surface@conv_body;level.signwind@conv_body;"
      "level.signtemp@conv_body;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 69;
    { static char s[] =
      ";pk1int;Bitfield;pk1int;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_conv_body_PREPTAG = T;
    CCMA_nT_conv_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_conv_body_PREPTAG;
  return CCMA_T_conv_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_conv_body(void *T);
extern int CCMA_Unpack_T_conv_body(void *T);
extern int CCMA_Sel_T_conv_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, conv_body);
PrePutTable(CCMA, d, double, conv_body);
PreLoadTable(CCMA, conv_body);
PreStoreTable(CCMA, conv_body);
extern void CCMA_Dim_T_conv_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_conv_body(void *T);
extern int CCMA_Sql_T_conv_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_conv_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_sat) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "sat" : appearance order#353, hierarchy rank# 10, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,satellite_identifier);
  DeclareDS(pk1int,satellite_instrument);
  DeclareDS(pk9real,zenith);
  DeclareDS(pk9real,azimuth);
  DeclareDS(pk9real,solar_zenith);
  DeclareDS(pk9real,solar_azimuth);
  DeclareDS(pk9real,range);
  DeclareDS(pk9real,arg_lat);
  DeclareDS(pk9real,lsm_fov);
  DeclareDS(pk1int,gen_centre);
  DeclareDS(pk1int,gen_subcentre);
  DeclareDS(pk1int,datastream);
  DeclareDS(linkoffset_t,LINKOFFSET(radiance));
  DeclareDS(linklen_t,LINKLEN(radiance));
  DeclareDS(linkoffset_t,LINKOFFSET(resat));
  DeclareDS(linklen_t,LINKLEN(resat));
  DeclareDS(linkoffset_t,LINKOFFSET(gnssro));
  DeclareDS(linklen_t,LINKLEN(gnssro));
  DeclareDS(linkoffset_t,LINKOFFSET(satob));
  DeclareDS(linklen_t,LINKLEN(satob));
  DeclareDS(linkoffset_t,LINKOFFSET(limb));
  DeclareDS(linklen_t,LINKLEN(limb));
  DeclareDS(linkoffset_t,LINKOFFSET(ssmi));
  DeclareDS(linklen_t,LINKLEN(ssmi));
  DeclareDS(linkoffset_t,LINKOFFSET(smos));
  DeclareDS(linklen_t,LINKLEN(smos));
  DeclareDS(linkoffset_t,LINKOFFSET(scatt));
  DeclareDS(linklen_t,LINKLEN(scatt));
  DeclareDS(linkoffset_t,LINKOFFSET(aeolus_hdr));
  DeclareDS(linklen_t,LINKLEN(aeolus_hdr));
  DeclareDS(linkoffset_t,LINKOFFSET(radar_station));
  DeclareDS(linklen_t,LINKLEN(radar_station));
  DeclareDS(linkoffset_t,LINKOFFSET(radar));
  DeclareDS(linklen_t,LINKLEN(radar));
} TABLE_sat;

#endif /* defined(IS_a_TABLE_sat) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_sat)
extern const ODB_Tags *CCMA_Set_T_sat_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_sat_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_sat_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_sat_PREPTAG = NULL;
PRIVATE int CCMA_nT_sat_TAG = 0;
PRIVATE int CCMA_nT_sat_PREPTAG = 0;
PRIVATE int CCMA_nT_sat_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_sat_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_sat_TAG) {
    int ntag = 34;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:satellite_identifier@sat"; T[0].name = s; }
    { static char s[] = "pk1int:satellite_instrument@sat"; T[1].name = s; }
    { static char s[] = "pk9real:zenith@sat"; T[2].name = s; }
    { static char s[] = "pk9real:azimuth@sat"; T[3].name = s; }
    { static char s[] = "pk9real:solar_zenith@sat"; T[4].name = s; }
    { static char s[] = "pk9real:solar_azimuth@sat"; T[5].name = s; }
    { static char s[] = "pk9real:range@sat"; T[6].name = s; }
    { static char s[] = "pk9real:arg_lat@sat"; T[7].name = s; }
    { static char s[] = "pk9real:lsm_fov@sat"; T[8].name = s; }
    { static char s[] = "pk1int:gen_centre@sat"; T[9].name = s; }
    { static char s[] = "pk1int:gen_subcentre@sat"; T[10].name = s; }
    { static char s[] = "pk1int:datastream@sat"; T[11].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(radiance)@sat"; T[12].name = s; }
    { static char s[] = "linklen_t:LINKLEN(radiance)@sat"; T[13].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(resat)@sat"; T[14].name = s; }
    { static char s[] = "linklen_t:LINKLEN(resat)@sat"; T[15].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(gnssro)@sat"; T[16].name = s; }
    { static char s[] = "linklen_t:LINKLEN(gnssro)@sat"; T[17].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(satob)@sat"; T[18].name = s; }
    { static char s[] = "linklen_t:LINKLEN(satob)@sat"; T[19].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(limb)@sat"; T[20].name = s; }
    { static char s[] = "linklen_t:LINKLEN(limb)@sat"; T[21].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(ssmi)@sat"; T[22].name = s; }
    { static char s[] = "linklen_t:LINKLEN(ssmi)@sat"; T[23].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(smos)@sat"; T[24].name = s; }
    { static char s[] = "linklen_t:LINKLEN(smos)@sat"; T[25].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(scatt)@sat"; T[26].name = s; }
    { static char s[] = "linklen_t:LINKLEN(scatt)@sat"; T[27].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(aeolus_hdr)@sat"; T[28].name = s; }
    { static char s[] = "linklen_t:LINKLEN(aeolus_hdr)@sat"; T[29].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(radar_station)@sat"; T[30].name = s; }
    { static char s[] = "linklen_t:LINKLEN(radar_station)@sat"; T[31].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(radar)@sat"; T[32].name = s; }
    { static char s[] = "linklen_t:LINKLEN(radar)@sat"; T[33].name = s; }
    CCMA_T_sat_TAG = T;
    CCMA_nT_sat_TAG = ntag;
    CCMA_nT_sat_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_sat_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_sat_MEM;
  return CCMA_T_sat_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_sat_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_sat_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 670;
    { static char s[] =
      ";satellite_identifier@sat;satellite_instrument@sat;"
      "zenith@sat;azimuth@sat;solar_zenith@sat;solar_azimuth@sat;"
      "range@sat;arg_lat@sat;lsm_fov@sat;gen_centre@sat;gen_subcentre@sat;"
      "datastream@sat;LINKOFFSET(radiance)@sat;LINKLEN(radiance)@sat;"
      "LINKOFFSET(resat)@sat;LINKLEN(resat)@sat;LINKOFFSET(gnssro)@sat;"
      "LINKLEN(gnssro)@sat;LINKOFFSET(satob)@sat;LINKLEN(satob)@sat;"
      "LINKOFFSET(limb)@sat;LINKLEN(limb)@sat;LINKOFFSET(ssmi)@sat;"
      "LINKLEN(ssmi)@sat;LINKOFFSET(smos)@sat;LINKLEN(smos)@sat;"
      "LINKOFFSET(scatt)@sat;LINKLEN(scatt)@sat;LINKOFFSET(aeolus_hdr)@sat;"
      "LINKLEN(aeolus_hdr)@sat;LINKOFFSET(radar_station)@sat;"
      "LINKLEN(radar_station)@sat;LINKOFFSET(radar)@sat;LINKLEN(radar)@sat;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 345;
    { static char s[] =
      ";pk1int;pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk1int;pk1int;pk1int;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;linkoffset_t;linklen_t;linkoffset_t;"
      "linklen_t;";
      T[1].longname = s; }
    CCMA_T_sat_PREPTAG = T;
    CCMA_nT_sat_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_sat_PREPTAG;
  return CCMA_T_sat_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_sat(void *T);
extern int CCMA_Unpack_T_sat(void *T);
extern int CCMA_Sel_T_sat(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, sat);
PrePutTable(CCMA, d, double, sat);
PreLoadTable(CCMA, sat);
PreStoreTable(CCMA, sat);
extern void CCMA_Dim_T_sat(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_sat(void *T);
extern int CCMA_Sql_T_sat(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_sat(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_modsurf) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "modsurf" : appearance order#354, hierarchy rank# 11, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,lsm);
  DeclareDS(pk9real,seaice);
  DeclareDS(pk9real,orography);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,t2m);
  DeclareDS(pk9real,albedo);
  DeclareDS(pk9real,windspeed10m);
  DeclareDS(pk9real,u10m);
  DeclareDS(pk9real,v10m);
  DeclareDS(pk1int,surface_class);
  DeclareDS(pk9real,tsfc);
} TABLE_modsurf;

#endif /* defined(IS_a_TABLE_modsurf) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_modsurf)
extern const ODB_Tags *CCMA_Set_T_modsurf_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_modsurf_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_modsurf_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_modsurf_PREPTAG = NULL;
PRIVATE int CCMA_nT_modsurf_TAG = 0;
PRIVATE int CCMA_nT_modsurf_PREPTAG = 0;
PRIVATE int CCMA_nT_modsurf_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_modsurf_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_modsurf_TAG) {
    int ntag = 11;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:lsm@modsurf"; T[0].name = s; }
    { static char s[] = "pk9real:seaice@modsurf"; T[1].name = s; }
    { static char s[] = "pk9real:orography@modsurf"; T[2].name = s; }
    { static char s[] = "pk9real:snow_depth@modsurf"; T[3].name = s; }
    { static char s[] = "pk9real:t2m@modsurf"; T[4].name = s; }
    { static char s[] = "pk9real:albedo@modsurf"; T[5].name = s; }
    { static char s[] = "pk9real:windspeed10m@modsurf"; T[6].name = s; }
    { static char s[] = "pk9real:u10m@modsurf"; T[7].name = s; }
    { static char s[] = "pk9real:v10m@modsurf"; T[8].name = s; }
    { static char s[] = "pk1int:surface_class@modsurf"; T[9].name = s; }
    { static char s[] = "pk9real:tsfc@modsurf"; T[10].name = s; }
    CCMA_T_modsurf_TAG = T;
    CCMA_nT_modsurf_TAG = ntag;
    CCMA_nT_modsurf_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_modsurf_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_modsurf_MEM;
  return CCMA_T_modsurf_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_modsurf_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_modsurf_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 174;
    { static char s[] =
      ";lsm@modsurf;seaice@modsurf;orography@modsurf;snow_depth@modsurf;"
      "t2m@modsurf;albedo@modsurf;windspeed10m@modsurf;u10m@modsurf;"
      "v10m@modsurf;surface_class@modsurf;tsfc@modsurf;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 88;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_modsurf_PREPTAG = T;
    CCMA_nT_modsurf_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_modsurf_PREPTAG;
  return CCMA_T_modsurf_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_modsurf(void *T);
extern int CCMA_Unpack_T_modsurf(void *T);
extern int CCMA_Sel_T_modsurf(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, modsurf);
PrePutTable(CCMA, d, double, modsurf);
PreLoadTable(CCMA, modsurf);
PreStoreTable(CCMA, modsurf);
extern void CCMA_Dim_T_modsurf(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_modsurf(void *T);
extern int CCMA_Sql_T_modsurf(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_modsurf(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_surfbody_feedback) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "surfbody_feedback" : appearance order#355, hierarchy rank# 373, weight = 358.000355 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_sfc_event); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,snow_depth);
  DeclareDS(pk9real,snow_density);
  DeclareDS(pk9real,lsm);
} TABLE_surfbody_feedback;

#endif /* defined(IS_a_TABLE_surfbody_feedback) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_surfbody_feedback)
extern const ODB_Tags *CCMA_Set_T_surfbody_feedback_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_surfbody_feedback_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_surfbody_feedback_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_surfbody_feedback_PREPTAG = NULL;
PRIVATE int CCMA_nT_surfbody_feedback_TAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_PREPTAG = 0;
PRIVATE int CCMA_nT_surfbody_feedback_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_surfbody_feedback_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_surfbody_feedback_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:datum_status@surfbody_feedback"; T[0].name = s; }
    T[0].nmem = 5;
ALLOC(T[0].memb, 5);
      { static char s[] = "active 1"; T[0].memb[0] = s; }
      { static char s[] = "passive 1"; T[0].memb[1] = s; }
      { static char s[] = "rejected 1"; T[0].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[0].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[0].memb[4] = s; }
    { static char s[] = "Bitfield:datum_sfc_event@surfbody_feedback"; T[1].name = s; }
    T[1].nmem = 9;
ALLOC(T[1].memb, 9);
      { static char s[] = "statid 1"; T[1].memb[0] = s; }
      { static char s[] = "lsmask 1"; T[1].memb[1] = s; }
      { static char s[] = "stalt_missing 1"; T[1].memb[2] = s; }
      { static char s[] = "obsvalue_missing 1"; T[1].memb[3] = s; }
      { static char s[] = "fg_missing 1"; T[1].memb[4] = s; }
      { static char s[] = "fg2big 1"; T[1].memb[5] = s; }
      { static char s[] = "not_analysis_varno 1"; T[1].memb[6] = s; }
      { static char s[] = "redundant 1"; T[1].memb[7] = s; }
      { static char s[] = "report_rejected 1"; T[1].memb[8] = s; }
    { static char s[] = "pk9real:an_depar@surfbody_feedback"; T[2].name = s; }
    { static char s[] = "pk9real:fg_depar@surfbody_feedback"; T[3].name = s; }
    { static char s[] = "pk9real:snow_depth@surfbody_feedback"; T[4].name = s; }
    { static char s[] = "pk9real:snow_density@surfbody_feedback"; T[5].name = s; }
    { static char s[] = "pk9real:lsm@surfbody_feedback"; T[6].name = s; }
    CCMA_T_surfbody_feedback_TAG = T;
    CCMA_nT_surfbody_feedback_TAG = ntag;
    CCMA_nT_surfbody_feedback_MEM = 14;
  }
  if (ntag_out) *ntag_out = CCMA_nT_surfbody_feedback_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_surfbody_feedback_MEM;
  return CCMA_T_surfbody_feedback_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_surfbody_feedback_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_surfbody_feedback_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 202;
    { static char s[] =
      ";datum_status@surfbody_feedback;datum_sfc_event@surfbody_feedback;"
      "an_depar@surfbody_feedback;fg_depar@surfbody_feedback;"
      "snow_depth@surfbody_feedback;snow_density@surfbody_feedback;"
      "lsm@surfbody_feedback;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 59;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 823;
    { static char s[] =
      ";datum_status@surfbody_feedback;datum_sfc_event@surfbody_feedback;"
      "an_depar@surfbody_feedback;fg_depar@surfbody_feedback;"
      "snow_depth@surfbody_feedback;snow_density@surfbody_feedback;"
      "lsm@surfbody_feedback;datum_status.active@surfbody_feedback;"
      "datum_status.passive@surfbody_feedback;datum_status.rejected@surfbody_feedback;"
      "datum_status.blacklisted@surfbody_feedback;datum_status.use_emiskf_only@surfbody_feedback;"
      "datum_sfc_event.statid@surfbody_feedback;datum_sfc_event.lsmask@surfbody_feedback;"
      "datum_sfc_event.stalt_missing@surfbody_feedback;datum_sfc_event.obsvalue_missing@surfbody_feedback;"
      "datum_sfc_event.fg_missing@surfbody_feedback;datum_sfc_event.fg2big@surfbody_feedback;"
      "datum_sfc_event.not_analysis_varno@surfbody_feedback;"
      "datum_sfc_event.redundant@surfbody_feedback;datum_sfc_event.report_rejected@surfbody_feedback;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 129;
    { static char s[] =
      ";Bitfield;Bitfield;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_surfbody_feedback_PREPTAG = T;
    CCMA_nT_surfbody_feedback_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_surfbody_feedback_PREPTAG;
  return CCMA_T_surfbody_feedback_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_surfbody_feedback(void *T);
extern int CCMA_Unpack_T_surfbody_feedback(void *T);
extern int CCMA_Sel_T_surfbody_feedback(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, surfbody_feedback);
PrePutTable(CCMA, d, double, surfbody_feedback);
PreLoadTable(CCMA, surfbody_feedback);
PreStoreTable(CCMA, surfbody_feedback);
extern void CCMA_Dim_T_surfbody_feedback(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_surfbody_feedback(void *T);
extern int CCMA_Sql_T_surfbody_feedback(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_surfbody_feedback(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_radiance) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "radiance" : appearance order#356, hierarchy rank# 13, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,scanline);
  DeclareDS(pk1int,scanpos);
  DeclareDS(pk1int,orbit);
  DeclareDS(pk1int,typesurf);
  DeclareDS(pk1int,corr_version);
  DeclareDS(pk1int,cldcover);
  DeclareDS(pk9real,cldptop_1);
  DeclareDS(pk9real,cldptop_2);
  DeclareDS(pk9real,cldptop_3);
  DeclareDS(pk9real,cldne_1);
  DeclareDS(pk9real,cldne_2);
  DeclareDS(pk9real,cldne_3);
  DeclareDS(pk9real,skintemper);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,skintemp_2);
  DeclareDS(pk9real,skintemp_3);
  DeclareDS(pk9real,skintemp_4);
  DeclareDS(pk9real,skintemp_5);
  DeclareDS(pk9real,scatterindex_89_157);
  DeclareDS(pk9real,scatterindex_23_89);
  DeclareDS(pk9real,scatterindex_23_165);
  DeclareDS(pk9real,lwp_obs);
  DeclareDS(pk1int,asr_pclear);
  DeclareDS(pk1int,asr_pcloudy);
  DeclareDS(pk1int,asr_pcloudy_low);
  DeclareDS(pk1int,asr_pcloudy_middle);
  DeclareDS(pk1int,asr_pcloudy_high);
  DeclareDS(linkoffset_t,LINKOFFSET(allsky));
  DeclareDS(linklen_t,LINKLEN(allsky));
  DeclareDS(linkoffset_t,LINKOFFSET(cloud_sink));
  DeclareDS(linklen_t,LINKLEN(cloud_sink));
  DeclareDS(linkoffset_t,LINKOFFSET(collocated_imager_information));
  DeclareDS(linklen_t,LINKLEN(collocated_imager_information));
  DeclareDS(linkoffset_t,LINKOFFSET(radiance_body));
  DeclareDS(linklen_t,LINKLEN(radiance_body));
} TABLE_radiance;

#endif /* defined(IS_a_TABLE_radiance) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_radiance)
extern const ODB_Tags *CCMA_Set_T_radiance_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_radiance_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_radiance_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_radiance_PREPTAG = NULL;
PRIVATE int CCMA_nT_radiance_TAG = 0;
PRIVATE int CCMA_nT_radiance_PREPTAG = 0;
PRIVATE int CCMA_nT_radiance_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_radiance_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_radiance_TAG) {
    int ntag = 35;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:scanline@radiance"; T[0].name = s; }
    { static char s[] = "pk1int:scanpos@radiance"; T[1].name = s; }
    { static char s[] = "pk1int:orbit@radiance"; T[2].name = s; }
    { static char s[] = "pk1int:typesurf@radiance"; T[3].name = s; }
    { static char s[] = "pk1int:corr_version@radiance"; T[4].name = s; }
    { static char s[] = "pk1int:cldcover@radiance"; T[5].name = s; }
    { static char s[] = "pk9real:cldptop_1@radiance"; T[6].name = s; }
    { static char s[] = "pk9real:cldptop_2@radiance"; T[7].name = s; }
    { static char s[] = "pk9real:cldptop_3@radiance"; T[8].name = s; }
    { static char s[] = "pk9real:cldne_1@radiance"; T[9].name = s; }
    { static char s[] = "pk9real:cldne_2@radiance"; T[10].name = s; }
    { static char s[] = "pk9real:cldne_3@radiance"; T[11].name = s; }
    { static char s[] = "pk9real:skintemper@radiance"; T[12].name = s; }
    { static char s[] = "pk9real:skintemp_1@radiance"; T[13].name = s; }
    { static char s[] = "pk9real:skintemp_2@radiance"; T[14].name = s; }
    { static char s[] = "pk9real:skintemp_3@radiance"; T[15].name = s; }
    { static char s[] = "pk9real:skintemp_4@radiance"; T[16].name = s; }
    { static char s[] = "pk9real:skintemp_5@radiance"; T[17].name = s; }
    { static char s[] = "pk9real:scatterindex_89_157@radiance"; T[18].name = s; }
    { static char s[] = "pk9real:scatterindex_23_89@radiance"; T[19].name = s; }
    { static char s[] = "pk9real:scatterindex_23_165@radiance"; T[20].name = s; }
    { static char s[] = "pk9real:lwp_obs@radiance"; T[21].name = s; }
    { static char s[] = "pk1int:asr_pclear@radiance"; T[22].name = s; }
    { static char s[] = "pk1int:asr_pcloudy@radiance"; T[23].name = s; }
    { static char s[] = "pk1int:asr_pcloudy_low@radiance"; T[24].name = s; }
    { static char s[] = "pk1int:asr_pcloudy_middle@radiance"; T[25].name = s; }
    { static char s[] = "pk1int:asr_pcloudy_high@radiance"; T[26].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(allsky)@radiance"; T[27].name = s; }
    { static char s[] = "linklen_t:LINKLEN(allsky)@radiance"; T[28].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(cloud_sink)@radiance"; T[29].name = s; }
    { static char s[] = "linklen_t:LINKLEN(cloud_sink)@radiance"; T[30].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(collocated_imager_information)@radiance"; T[31].name = s; }
    { static char s[] = "linklen_t:LINKLEN(collocated_imager_information)@radiance"; T[32].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(radiance_body)@radiance"; T[33].name = s; }
    { static char s[] = "linklen_t:LINKLEN(radiance_body)@radiance"; T[34].name = s; }
    CCMA_T_radiance_TAG = T;
    CCMA_nT_radiance_TAG = ntag;
    CCMA_nT_radiance_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_radiance_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_radiance_MEM;
  return CCMA_T_radiance_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_radiance_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_radiance_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 840;
    { static char s[] =
      ";scanline@radiance;scanpos@radiance;orbit@radiance;"
      "typesurf@radiance;corr_version@radiance;cldcover@radiance;"
      "cldptop_1@radiance;cldptop_2@radiance;cldptop_3@radiance;"
      "cldne_1@radiance;cldne_2@radiance;cldne_3@radiance;"
      "skintemper@radiance;skintemp_1@radiance;skintemp_2@radiance;"
      "skintemp_3@radiance;skintemp_4@radiance;skintemp_5@radiance;"
      "scatterindex_89_157@radiance;scatterindex_23_89@radiance;"
      "scatterindex_23_165@radiance;lwp_obs@radiance;asr_pclear@radiance;"
      "asr_pcloudy@radiance;asr_pcloudy_low@radiance;asr_pcloudy_middle@radiance;"
      "asr_pcloudy_high@radiance;LINKOFFSET(allsky)@radiance;"
      "LINKLEN(allsky)@radiance;LINKOFFSET(cloud_sink)@radiance;"
      "LINKLEN(cloud_sink)@radiance;LINKOFFSET(collocated_imager_information)@radiance;"
      "LINKLEN(collocated_imager_information)@radiance;LINKOFFSET(radiance_body)@radiance;"
      "LINKLEN(radiance_body)@radiance;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 298;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk1int;pk1int;pk1int;pk1int;pk1int;linkoffset_t;"
      "linklen_t;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_radiance_PREPTAG = T;
    CCMA_nT_radiance_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_radiance_PREPTAG;
  return CCMA_T_radiance_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_radiance(void *T);
extern int CCMA_Unpack_T_radiance(void *T);
extern int CCMA_Sel_T_radiance(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, radiance);
PrePutTable(CCMA, d, double, radiance);
PreLoadTable(CCMA, radiance);
PreStoreTable(CCMA, radiance);
extern void CCMA_Dim_T_radiance(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_radiance(void *T);
extern int CCMA_Sql_T_radiance(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_radiance(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_radiance_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "radiance_body" : appearance order#357, hierarchy rank# 374, weight = 358.000357 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,csr_pclear);
  DeclareDS(pk9real,cld_fg_depar);
  DeclareDS(pk9real,rank_cld);
  DeclareDS(pk9real,tausfc);
  DeclareDS(pk9real,skintemp_retr);
  DeclareDS(pk9real,tbclear);
  DeclareDS(pk9real,emis_rtin);
  DeclareDS(pk9real,emis_atlas);
  DeclareDS(pk9real,emis_atlas_error);
  DeclareDS(pk9real,emis_retr);
  DeclareDS(pk9real,emis_fg);
  DeclareDS(pk9real,cold_nedt);
  DeclareDS(pk9real,warm_nedt);
  DeclareDS(pk1int,channel_qc);
  DeclareDS(pk1int,nobs_averaged);
  DeclareDS(pk9real,stdev_averaged);
  DeclareDS(pk9real,zenith_by_channel);
  DeclareDS(pk9real,dust_aod_ir);
} TABLE_radiance_body;

#endif /* defined(IS_a_TABLE_radiance_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_radiance_body)
extern const ODB_Tags *CCMA_Set_T_radiance_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_radiance_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_radiance_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_radiance_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_radiance_body_TAG = 0;
PRIVATE int CCMA_nT_radiance_body_PREPTAG = 0;
PRIVATE int CCMA_nT_radiance_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_radiance_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_radiance_body_TAG) {
    int ntag = 18;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:csr_pclear@radiance_body"; T[0].name = s; }
    { static char s[] = "pk9real:cld_fg_depar@radiance_body"; T[1].name = s; }
    { static char s[] = "pk9real:rank_cld@radiance_body"; T[2].name = s; }
    { static char s[] = "pk9real:tausfc@radiance_body"; T[3].name = s; }
    { static char s[] = "pk9real:skintemp_retr@radiance_body"; T[4].name = s; }
    { static char s[] = "pk9real:tbclear@radiance_body"; T[5].name = s; }
    { static char s[] = "pk9real:emis_rtin@radiance_body"; T[6].name = s; }
    { static char s[] = "pk9real:emis_atlas@radiance_body"; T[7].name = s; }
    { static char s[] = "pk9real:emis_atlas_error@radiance_body"; T[8].name = s; }
    { static char s[] = "pk9real:emis_retr@radiance_body"; T[9].name = s; }
    { static char s[] = "pk9real:emis_fg@radiance_body"; T[10].name = s; }
    { static char s[] = "pk9real:cold_nedt@radiance_body"; T[11].name = s; }
    { static char s[] = "pk9real:warm_nedt@radiance_body"; T[12].name = s; }
    { static char s[] = "pk1int:channel_qc@radiance_body"; T[13].name = s; }
    { static char s[] = "pk1int:nobs_averaged@radiance_body"; T[14].name = s; }
    { static char s[] = "pk9real:stdev_averaged@radiance_body"; T[15].name = s; }
    { static char s[] = "pk9real:zenith_by_channel@radiance_body"; T[16].name = s; }
    { static char s[] = "pk9real:dust_aod_ir@radiance_body"; T[17].name = s; }
    CCMA_T_radiance_body_TAG = T;
    CCMA_nT_radiance_body_TAG = ntag;
    CCMA_nT_radiance_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_radiance_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_radiance_body_MEM;
  return CCMA_T_radiance_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_radiance_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_radiance_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 461;
    { static char s[] =
      ";csr_pclear@radiance_body;cld_fg_depar@radiance_body;"
      "rank_cld@radiance_body;tausfc@radiance_body;skintemp_retr@radiance_body;"
      "tbclear@radiance_body;emis_rtin@radiance_body;emis_atlas@radiance_body;"
      "emis_atlas_error@radiance_body;emis_retr@radiance_body;"
      "emis_fg@radiance_body;cold_nedt@radiance_body;warm_nedt@radiance_body;"
      "channel_qc@radiance_body;nobs_averaged@radiance_body;"
      "stdev_averaged@radiance_body;zenith_by_channel@radiance_body;"
      "dust_aod_ir@radiance_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 143;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk1int;"
      "pk1int;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_radiance_body_PREPTAG = T;
    CCMA_nT_radiance_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_radiance_body_PREPTAG;
  return CCMA_T_radiance_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_radiance_body(void *T);
extern int CCMA_Unpack_T_radiance_body(void *T);
extern int CCMA_Sel_T_radiance_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, radiance_body);
PrePutTable(CCMA, d, double, radiance_body);
PreLoadTable(CCMA, radiance_body);
PreStoreTable(CCMA, radiance_body);
extern void CCMA_Dim_T_radiance_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_radiance_body(void *T);
extern int CCMA_Sql_T_radiance_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_radiance_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_allsky) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "allsky" : appearance order#358, hierarchy rank# 24, weight = 3.003004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,fg_rain_rate);
  DeclareDS(pk9real,fg_snow_rate);
  DeclareDS(pk9real,fg_tcwv);
  DeclareDS(pk9real,fg_cwp);
  DeclareDS(pk9real,fg_iwp);
  DeclareDS(pk9real,fg_rwp);
  DeclareDS(pk9real,fg_swp);
  DeclareDS(pk9real,fg_rttov_cld_fraction);
  DeclareDS(pk9real,fg_theta700);
  DeclareDS(pk9real,fg_thetasfc);
  DeclareDS(pk9real,fg_uth);
  DeclareDS(pk9real,fg_conv);
  DeclareDS(pk9real,fg_pbl);
  DeclareDS(pk9real,an_rain_rate);
  DeclareDS(pk9real,an_snow_rate);
  DeclareDS(pk9real,an_tcwv);
  DeclareDS(pk9real,an_cwp);
  DeclareDS(pk9real,an_iwp);
  DeclareDS(pk9real,an_rwp);
  DeclareDS(pk9real,an_swp);
  DeclareDS(pk9real,an_rttov_cld_fraction);
  DeclareDS(pk9real,an_theta700);
  DeclareDS(pk9real,an_thetasfc);
  DeclareDS(pk9real,an_uth);
  DeclareDS(pk9real,an_conv);
  DeclareDS(pk9real,an_pbl);
  DeclareDS(pk9real,gnorm_10mwind);
  DeclareDS(pk9real,gnorm_skintemp);
  DeclareDS(pk9real,gnorm_temp);
  DeclareDS(pk9real,gnorm_q);
  DeclareDS(pk9real,gnorm_rainflux);
  DeclareDS(pk9real,gnorm_snowflux);
  DeclareDS(pk9real,gnorm_clw);
  DeclareDS(pk9real,gnorm_ciw);
  DeclareDS(pk9real,gnorm_cc);
  DeclareDS(pk9real,ob_p19);
  DeclareDS(pk9real,fg_p19);
  DeclareDS(pk9real,an_p19);
  DeclareDS(pk9real,ob_p37);
  DeclareDS(pk9real,fg_p37);
  DeclareDS(pk9real,an_p37);
  DeclareDS(pk1int,report_tbcloud);
  DeclareDS(linkoffset_t,LINKOFFSET(allsky_body));
  DeclareDS(linklen_t,LINKLEN(allsky_body));
} TABLE_allsky;

#endif /* defined(IS_a_TABLE_allsky) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_allsky)
extern const ODB_Tags *CCMA_Set_T_allsky_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_allsky_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_allsky_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_allsky_PREPTAG = NULL;
PRIVATE int CCMA_nT_allsky_TAG = 0;
PRIVATE int CCMA_nT_allsky_PREPTAG = 0;
PRIVATE int CCMA_nT_allsky_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_allsky_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_allsky_TAG) {
    int ntag = 44;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:fg_rain_rate@allsky"; T[0].name = s; }
    { static char s[] = "pk9real:fg_snow_rate@allsky"; T[1].name = s; }
    { static char s[] = "pk9real:fg_tcwv@allsky"; T[2].name = s; }
    { static char s[] = "pk9real:fg_cwp@allsky"; T[3].name = s; }
    { static char s[] = "pk9real:fg_iwp@allsky"; T[4].name = s; }
    { static char s[] = "pk9real:fg_rwp@allsky"; T[5].name = s; }
    { static char s[] = "pk9real:fg_swp@allsky"; T[6].name = s; }
    { static char s[] = "pk9real:fg_rttov_cld_fraction@allsky"; T[7].name = s; }
    { static char s[] = "pk9real:fg_theta700@allsky"; T[8].name = s; }
    { static char s[] = "pk9real:fg_thetasfc@allsky"; T[9].name = s; }
    { static char s[] = "pk9real:fg_uth@allsky"; T[10].name = s; }
    { static char s[] = "pk9real:fg_conv@allsky"; T[11].name = s; }
    { static char s[] = "pk9real:fg_pbl@allsky"; T[12].name = s; }
    { static char s[] = "pk9real:an_rain_rate@allsky"; T[13].name = s; }
    { static char s[] = "pk9real:an_snow_rate@allsky"; T[14].name = s; }
    { static char s[] = "pk9real:an_tcwv@allsky"; T[15].name = s; }
    { static char s[] = "pk9real:an_cwp@allsky"; T[16].name = s; }
    { static char s[] = "pk9real:an_iwp@allsky"; T[17].name = s; }
    { static char s[] = "pk9real:an_rwp@allsky"; T[18].name = s; }
    { static char s[] = "pk9real:an_swp@allsky"; T[19].name = s; }
    { static char s[] = "pk9real:an_rttov_cld_fraction@allsky"; T[20].name = s; }
    { static char s[] = "pk9real:an_theta700@allsky"; T[21].name = s; }
    { static char s[] = "pk9real:an_thetasfc@allsky"; T[22].name = s; }
    { static char s[] = "pk9real:an_uth@allsky"; T[23].name = s; }
    { static char s[] = "pk9real:an_conv@allsky"; T[24].name = s; }
    { static char s[] = "pk9real:an_pbl@allsky"; T[25].name = s; }
    { static char s[] = "pk9real:gnorm_10mwind@allsky"; T[26].name = s; }
    { static char s[] = "pk9real:gnorm_skintemp@allsky"; T[27].name = s; }
    { static char s[] = "pk9real:gnorm_temp@allsky"; T[28].name = s; }
    { static char s[] = "pk9real:gnorm_q@allsky"; T[29].name = s; }
    { static char s[] = "pk9real:gnorm_rainflux@allsky"; T[30].name = s; }
    { static char s[] = "pk9real:gnorm_snowflux@allsky"; T[31].name = s; }
    { static char s[] = "pk9real:gnorm_clw@allsky"; T[32].name = s; }
    { static char s[] = "pk9real:gnorm_ciw@allsky"; T[33].name = s; }
    { static char s[] = "pk9real:gnorm_cc@allsky"; T[34].name = s; }
    { static char s[] = "pk9real:ob_p19@allsky"; T[35].name = s; }
    { static char s[] = "pk9real:fg_p19@allsky"; T[36].name = s; }
    { static char s[] = "pk9real:an_p19@allsky"; T[37].name = s; }
    { static char s[] = "pk9real:ob_p37@allsky"; T[38].name = s; }
    { static char s[] = "pk9real:fg_p37@allsky"; T[39].name = s; }
    { static char s[] = "pk9real:an_p37@allsky"; T[40].name = s; }
    { static char s[] = "pk1int:report_tbcloud@allsky"; T[41].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(allsky_body)@allsky"; T[42].name = s; }
    { static char s[] = "linklen_t:LINKLEN(allsky_body)@allsky"; T[43].name = s; }
    CCMA_T_allsky_TAG = T;
    CCMA_nT_allsky_TAG = ntag;
    CCMA_nT_allsky_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_allsky_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_allsky_MEM;
  return CCMA_T_allsky_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_allsky_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_allsky_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 778;
    { static char s[] =
      ";fg_rain_rate@allsky;fg_snow_rate@allsky;fg_tcwv@allsky;"
      "fg_cwp@allsky;fg_iwp@allsky;fg_rwp@allsky;fg_swp@allsky;"
      "fg_rttov_cld_fraction@allsky;fg_theta700@allsky;fg_thetasfc@allsky;"
      "fg_uth@allsky;fg_conv@allsky;fg_pbl@allsky;an_rain_rate@allsky;"
      "an_snow_rate@allsky;an_tcwv@allsky;an_cwp@allsky;an_iwp@allsky;"
      "an_rwp@allsky;an_swp@allsky;an_rttov_cld_fraction@allsky;"
      "an_theta700@allsky;an_thetasfc@allsky;an_uth@allsky;"
      "an_conv@allsky;an_pbl@allsky;gnorm_10mwind@allsky;"
      "gnorm_skintemp@allsky;gnorm_temp@allsky;gnorm_q@allsky;"
      "gnorm_rainflux@allsky;gnorm_snowflux@allsky;gnorm_clw@allsky;"
      "gnorm_ciw@allsky;gnorm_cc@allsky;ob_p19@allsky;fg_p19@allsky;"
      "an_p19@allsky;ob_p37@allsky;fg_p37@allsky;an_p37@allsky;"
      "report_tbcloud@allsky;LINKOFFSET(allsky_body)@allsky;"
      "LINKLEN(allsky_body)@allsky;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 359;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk1int;"
      "linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_allsky_PREPTAG = T;
    CCMA_nT_allsky_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_allsky_PREPTAG;
  return CCMA_T_allsky_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_allsky(void *T);
extern int CCMA_Unpack_T_allsky(void *T);
extern int CCMA_Sel_T_allsky(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, allsky);
PrePutTable(CCMA, d, double, allsky);
PreLoadTable(CCMA, allsky);
PreStoreTable(CCMA, allsky);
extern void CCMA_Dim_T_allsky(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_allsky(void *T);
extern int CCMA_Sql_T_allsky(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_allsky(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_allsky_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "allsky_body" : appearance order#359, hierarchy rank# 375, weight = 358.000359 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,tbvalue);
  DeclareDS(pk9real,tbvaluetl);
  DeclareDS(pk9real,tbvaluead);
  DeclareDS(pk1int,datum_tbflag);
} TABLE_allsky_body;

#endif /* defined(IS_a_TABLE_allsky_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_allsky_body)
extern const ODB_Tags *CCMA_Set_T_allsky_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_allsky_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_allsky_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_allsky_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_allsky_body_TAG = 0;
PRIVATE int CCMA_nT_allsky_body_PREPTAG = 0;
PRIVATE int CCMA_nT_allsky_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_allsky_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_allsky_body_TAG) {
    int ntag = 4;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:tbvalue@allsky_body"; T[0].name = s; }
    { static char s[] = "pk9real:tbvaluetl@allsky_body"; T[1].name = s; }
    { static char s[] = "pk9real:tbvaluead@allsky_body"; T[2].name = s; }
    { static char s[] = "pk1int:datum_tbflag@allsky_body"; T[3].name = s; }
    CCMA_T_allsky_body_TAG = T;
    CCMA_nT_allsky_body_TAG = ntag;
    CCMA_nT_allsky_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_allsky_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_allsky_body_MEM;
  return CCMA_T_allsky_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_allsky_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_allsky_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 90;
    { static char s[] =
      ";tbvalue@allsky_body;tbvaluetl@allsky_body;tbvaluead@allsky_body;"
      "datum_tbflag@allsky_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 32;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk1int;";
      T[1].longname = s; }
    CCMA_T_allsky_body_PREPTAG = T;
    CCMA_nT_allsky_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_allsky_body_PREPTAG;
  return CCMA_T_allsky_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_allsky_body(void *T);
extern int CCMA_Unpack_T_allsky_body(void *T);
extern int CCMA_Sel_T_allsky_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, allsky_body);
PrePutTable(CCMA, d, double, allsky_body);
PreLoadTable(CCMA, allsky_body);
PreStoreTable(CCMA, allsky_body);
extern void CCMA_Dim_T_allsky_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_allsky_body(void *T);
extern int CCMA_Sql_T_allsky_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_allsky_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_cloud_sink) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "cloud_sink" : appearance order#360, hierarchy rank# 25, weight = 3.003004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,ctop_1);
  DeclareDS(pk9real,ctop_2);
  DeclareDS(pk9real,ctop_3);
  DeclareDS(pk9real,ctop_4);
  DeclareDS(pk9real,camt_1);
  DeclareDS(pk9real,camt_2);
  DeclareDS(pk9real,camt_3);
  DeclareDS(pk9real,camt_4);
  DeclareDS(pk9real,ctopbg);
  DeclareDS(pk9real,ctoper);
  DeclareDS(pk9real,ctopinc);
  DeclareDS(pk9real,camtbg);
  DeclareDS(pk9real,camter);
  DeclareDS(pk9real,camtinc);
} TABLE_cloud_sink;

#endif /* defined(IS_a_TABLE_cloud_sink) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_cloud_sink)
extern const ODB_Tags *CCMA_Set_T_cloud_sink_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_cloud_sink_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_cloud_sink_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_cloud_sink_PREPTAG = NULL;
PRIVATE int CCMA_nT_cloud_sink_TAG = 0;
PRIVATE int CCMA_nT_cloud_sink_PREPTAG = 0;
PRIVATE int CCMA_nT_cloud_sink_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_cloud_sink_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_cloud_sink_TAG) {
    int ntag = 14;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:ctop_1@cloud_sink"; T[0].name = s; }
    { static char s[] = "pk9real:ctop_2@cloud_sink"; T[1].name = s; }
    { static char s[] = "pk9real:ctop_3@cloud_sink"; T[2].name = s; }
    { static char s[] = "pk9real:ctop_4@cloud_sink"; T[3].name = s; }
    { static char s[] = "pk9real:camt_1@cloud_sink"; T[4].name = s; }
    { static char s[] = "pk9real:camt_2@cloud_sink"; T[5].name = s; }
    { static char s[] = "pk9real:camt_3@cloud_sink"; T[6].name = s; }
    { static char s[] = "pk9real:camt_4@cloud_sink"; T[7].name = s; }
    { static char s[] = "pk9real:ctopbg@cloud_sink"; T[8].name = s; }
    { static char s[] = "pk9real:ctoper@cloud_sink"; T[9].name = s; }
    { static char s[] = "pk9real:ctopinc@cloud_sink"; T[10].name = s; }
    { static char s[] = "pk9real:camtbg@cloud_sink"; T[11].name = s; }
    { static char s[] = "pk9real:camter@cloud_sink"; T[12].name = s; }
    { static char s[] = "pk9real:camtinc@cloud_sink"; T[13].name = s; }
    CCMA_T_cloud_sink_TAG = T;
    CCMA_nT_cloud_sink_TAG = ntag;
    CCMA_nT_cloud_sink_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_cloud_sink_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_cloud_sink_MEM;
  return CCMA_T_cloud_sink_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_cloud_sink_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_cloud_sink_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 255;
    { static char s[] =
      ";ctop_1@cloud_sink;ctop_2@cloud_sink;ctop_3@cloud_sink;"
      "ctop_4@cloud_sink;camt_1@cloud_sink;camt_2@cloud_sink;"
      "camt_3@cloud_sink;camt_4@cloud_sink;ctopbg@cloud_sink;"
      "ctoper@cloud_sink;ctopinc@cloud_sink;camtbg@cloud_sink;"
      "camter@cloud_sink;camtinc@cloud_sink;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 113;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_cloud_sink_PREPTAG = T;
    CCMA_nT_cloud_sink_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_cloud_sink_PREPTAG;
  return CCMA_T_cloud_sink_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_cloud_sink(void *T);
extern int CCMA_Unpack_T_cloud_sink(void *T);
extern int CCMA_Sel_T_cloud_sink(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, cloud_sink);
PrePutTable(CCMA, d, double, cloud_sink);
PreLoadTable(CCMA, cloud_sink);
PreStoreTable(CCMA, cloud_sink);
extern void CCMA_Dim_T_cloud_sink(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_cloud_sink(void *T);
extern int CCMA_Sql_T_cloud_sink(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_cloud_sink(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_collocated_imager_information) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "collocated_imager_information" : appearance order#361, hierarchy rank# 26, weight = 3.003004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,avhrr_mean_ir);
  DeclareDS(pk9real,avhrr_stddev_ir);
  DeclareDS(pk9real,avhrr_stddev_ir2);
  DeclareDS(pk9real,avhrr_num_clusters);
  DeclareDS(pk9real,avhrr_mean_vis);
  DeclareDS(pk9real,avhrr_stddev_vis);
  DeclareDS(pk9real,avhrr_max_cluster);
  DeclareDS(pk9real,avhrr_coldest_cluster_ir);
  DeclareDS(pk9real,avhrr_warmest_cluster_ir);
  DeclareDS(pk9real,avhrr_largest_cluster_ir);
  DeclareDS(pk1int,provider_qc);
  DeclareDS(pk9real,avhrr_frac_cl1);
  DeclareDS(pk9real,avhrr_frac_cl2);
  DeclareDS(pk9real,avhrr_frac_cl3);
  DeclareDS(pk9real,avhrr_frac_cl4);
  DeclareDS(pk9real,avhrr_frac_cl5);
  DeclareDS(pk9real,avhrr_frac_cl6);
  DeclareDS(pk9real,avhrr_frac_cl7);
  DeclareDS(pk9real,avhrr_m_ir1_cl1);
  DeclareDS(pk9real,avhrr_m_ir1_cl2);
  DeclareDS(pk9real,avhrr_m_ir1_cl3);
  DeclareDS(pk9real,avhrr_m_ir1_cl4);
  DeclareDS(pk9real,avhrr_m_ir1_cl5);
  DeclareDS(pk9real,avhrr_m_ir1_cl6);
  DeclareDS(pk9real,avhrr_m_ir1_cl7);
  DeclareDS(pk9real,avhrr_m_ir2_cl1);
  DeclareDS(pk9real,avhrr_m_ir2_cl2);
  DeclareDS(pk9real,avhrr_m_ir2_cl3);
  DeclareDS(pk9real,avhrr_m_ir2_cl4);
  DeclareDS(pk9real,avhrr_m_ir2_cl5);
  DeclareDS(pk9real,avhrr_m_ir2_cl6);
  DeclareDS(pk9real,avhrr_m_ir2_cl7);
  DeclareDS(pk9real,avhrr_fg_ir1);
  DeclareDS(pk9real,avhrr_fg_ir2);
  DeclareDS(pk1int,avhrr_cloud_flag);
} TABLE_collocated_imager_information;

#endif /* defined(IS_a_TABLE_collocated_imager_information) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_collocated_imager_information)
extern const ODB_Tags *CCMA_Set_T_collocated_imager_information_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_collocated_imager_information_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_collocated_imager_information_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_collocated_imager_information_PREPTAG = NULL;
PRIVATE int CCMA_nT_collocated_imager_information_TAG = 0;
PRIVATE int CCMA_nT_collocated_imager_information_PREPTAG = 0;
PRIVATE int CCMA_nT_collocated_imager_information_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_collocated_imager_information_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_collocated_imager_information_TAG) {
    int ntag = 35;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:avhrr_mean_ir@collocated_imager_information"; T[0].name = s; }
    { static char s[] = "pk9real:avhrr_stddev_ir@collocated_imager_information"; T[1].name = s; }
    { static char s[] = "pk9real:avhrr_stddev_ir2@collocated_imager_information"; T[2].name = s; }
    { static char s[] = "pk9real:avhrr_num_clusters@collocated_imager_information"; T[3].name = s; }
    { static char s[] = "pk9real:avhrr_mean_vis@collocated_imager_information"; T[4].name = s; }
    { static char s[] = "pk9real:avhrr_stddev_vis@collocated_imager_information"; T[5].name = s; }
    { static char s[] = "pk9real:avhrr_max_cluster@collocated_imager_information"; T[6].name = s; }
    { static char s[] = "pk9real:avhrr_coldest_cluster_ir@collocated_imager_information"; T[7].name = s; }
    { static char s[] = "pk9real:avhrr_warmest_cluster_ir@collocated_imager_information"; T[8].name = s; }
    { static char s[] = "pk9real:avhrr_largest_cluster_ir@collocated_imager_information"; T[9].name = s; }
    { static char s[] = "pk1int:provider_qc@collocated_imager_information"; T[10].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl1@collocated_imager_information"; T[11].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl2@collocated_imager_information"; T[12].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl3@collocated_imager_information"; T[13].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl4@collocated_imager_information"; T[14].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl5@collocated_imager_information"; T[15].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl6@collocated_imager_information"; T[16].name = s; }
    { static char s[] = "pk9real:avhrr_frac_cl7@collocated_imager_information"; T[17].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl1@collocated_imager_information"; T[18].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl2@collocated_imager_information"; T[19].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl3@collocated_imager_information"; T[20].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl4@collocated_imager_information"; T[21].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl5@collocated_imager_information"; T[22].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl6@collocated_imager_information"; T[23].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir1_cl7@collocated_imager_information"; T[24].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl1@collocated_imager_information"; T[25].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl2@collocated_imager_information"; T[26].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl3@collocated_imager_information"; T[27].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl4@collocated_imager_information"; T[28].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl5@collocated_imager_information"; T[29].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl6@collocated_imager_information"; T[30].name = s; }
    { static char s[] = "pk9real:avhrr_m_ir2_cl7@collocated_imager_information"; T[31].name = s; }
    { static char s[] = "pk9real:avhrr_fg_ir1@collocated_imager_information"; T[32].name = s; }
    { static char s[] = "pk9real:avhrr_fg_ir2@collocated_imager_information"; T[33].name = s; }
    { static char s[] = "pk1int:avhrr_cloud_flag@collocated_imager_information"; T[34].name = s; }
    CCMA_T_collocated_imager_information_TAG = T;
    CCMA_nT_collocated_imager_information_TAG = ntag;
    CCMA_nT_collocated_imager_information_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_collocated_imager_information_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_collocated_imager_information_MEM;
  return CCMA_T_collocated_imager_information_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_collocated_imager_information_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_collocated_imager_information_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 1626;
    { static char s[] =
      ";avhrr_mean_ir@collocated_imager_information;avhrr_stddev_ir@collocated_imager_information;"
      "avhrr_stddev_ir2@collocated_imager_information;avhrr_num_clusters@collocated_imager_information;"
      "avhrr_mean_vis@collocated_imager_information;avhrr_stddev_vis@collocated_imager_information;"
      "avhrr_max_cluster@collocated_imager_information;avhrr_coldest_cluster_ir@collocated_imager_information;"
      "avhrr_warmest_cluster_ir@collocated_imager_information;"
      "avhrr_largest_cluster_ir@collocated_imager_information;"
      "provider_qc@collocated_imager_information;avhrr_frac_cl1@collocated_imager_information;"
      "avhrr_frac_cl2@collocated_imager_information;avhrr_frac_cl3@collocated_imager_information;"
      "avhrr_frac_cl4@collocated_imager_information;avhrr_frac_cl5@collocated_imager_information;"
      "avhrr_frac_cl6@collocated_imager_information;avhrr_frac_cl7@collocated_imager_information;"
      "avhrr_m_ir1_cl1@collocated_imager_information;avhrr_m_ir1_cl2@collocated_imager_information;"
      "avhrr_m_ir1_cl3@collocated_imager_information;avhrr_m_ir1_cl4@collocated_imager_information;"
      "avhrr_m_ir1_cl5@collocated_imager_information;avhrr_m_ir1_cl6@collocated_imager_information;"
      "avhrr_m_ir1_cl7@collocated_imager_information;avhrr_m_ir2_cl1@collocated_imager_information;"
      "avhrr_m_ir2_cl2@collocated_imager_information;avhrr_m_ir2_cl3@collocated_imager_information;"
      "avhrr_m_ir2_cl4@collocated_imager_information;avhrr_m_ir2_cl5@collocated_imager_information;"
      "avhrr_m_ir2_cl6@collocated_imager_information;avhrr_m_ir2_cl7@collocated_imager_information;"
      "avhrr_fg_ir1@collocated_imager_information;avhrr_fg_ir2@collocated_imager_information;"
      "avhrr_cloud_flag@collocated_imager_information;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 279;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk1int;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk1int;";
      T[1].longname = s; }
    CCMA_T_collocated_imager_information_PREPTAG = T;
    CCMA_nT_collocated_imager_information_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_collocated_imager_information_PREPTAG;
  return CCMA_T_collocated_imager_information_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_collocated_imager_information(void *T);
extern int CCMA_Unpack_T_collocated_imager_information(void *T);
extern int CCMA_Sel_T_collocated_imager_information(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, collocated_imager_information);
PrePutTable(CCMA, d, double, collocated_imager_information);
PreLoadTable(CCMA, collocated_imager_information);
PreStoreTable(CCMA, collocated_imager_information);
extern void CCMA_Dim_T_collocated_imager_information(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_collocated_imager_information(void *T);
extern int CCMA_Sql_T_collocated_imager_information(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_collocated_imager_information(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_auxiliary) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "auxiliary" : appearance order#362, hierarchy rank# 12, weight = 3.001004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,report_aux_1);
  DeclareDS(pk9real,report_aux_2);
  DeclareDS(pk9real,report_aux_3);
  DeclareDS(pk9real,report_aux_4);
  DeclareDS(pk9real,report_aux_5);
  DeclareDS(pk9real,report_aux_6);
  DeclareDS(pk9real,report_aux_7);
  DeclareDS(pk9real,report_aux_8);
  DeclareDS(pk9real,report_aux_9);
  DeclareDS(linkoffset_t,LINKOFFSET(auxiliary_body));
  DeclareDS(linklen_t,LINKLEN(auxiliary_body));
} TABLE_auxiliary;

#endif /* defined(IS_a_TABLE_auxiliary) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_auxiliary)
extern const ODB_Tags *CCMA_Set_T_auxiliary_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_auxiliary_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_auxiliary_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_auxiliary_PREPTAG = NULL;
PRIVATE int CCMA_nT_auxiliary_TAG = 0;
PRIVATE int CCMA_nT_auxiliary_PREPTAG = 0;
PRIVATE int CCMA_nT_auxiliary_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_auxiliary_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_auxiliary_TAG) {
    int ntag = 11;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:report_aux_1@auxiliary"; T[0].name = s; }
    { static char s[] = "pk9real:report_aux_2@auxiliary"; T[1].name = s; }
    { static char s[] = "pk9real:report_aux_3@auxiliary"; T[2].name = s; }
    { static char s[] = "pk9real:report_aux_4@auxiliary"; T[3].name = s; }
    { static char s[] = "pk9real:report_aux_5@auxiliary"; T[4].name = s; }
    { static char s[] = "pk9real:report_aux_6@auxiliary"; T[5].name = s; }
    { static char s[] = "pk9real:report_aux_7@auxiliary"; T[6].name = s; }
    { static char s[] = "pk9real:report_aux_8@auxiliary"; T[7].name = s; }
    { static char s[] = "pk9real:report_aux_9@auxiliary"; T[8].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(auxiliary_body)@auxiliary"; T[9].name = s; }
    { static char s[] = "linklen_t:LINKLEN(auxiliary_body)@auxiliary"; T[10].name = s; }
    CCMA_T_auxiliary_TAG = T;
    CCMA_nT_auxiliary_TAG = ntag;
    CCMA_nT_auxiliary_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_auxiliary_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_auxiliary_MEM;
  return CCMA_T_auxiliary_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_auxiliary_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_auxiliary_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 279;
    { static char s[] =
      ";report_aux_1@auxiliary;report_aux_2@auxiliary;report_aux_3@auxiliary;"
      "report_aux_4@auxiliary;report_aux_5@auxiliary;report_aux_6@auxiliary;"
      "report_aux_7@auxiliary;report_aux_8@auxiliary;report_aux_9@auxiliary;"
      "LINKOFFSET(auxiliary_body)@auxiliary;LINKLEN(auxiliary_body)@auxiliary;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 96;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_auxiliary_PREPTAG = T;
    CCMA_nT_auxiliary_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_auxiliary_PREPTAG;
  return CCMA_T_auxiliary_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_auxiliary(void *T);
extern int CCMA_Unpack_T_auxiliary(void *T);
extern int CCMA_Sel_T_auxiliary(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, auxiliary);
PrePutTable(CCMA, d, double, auxiliary);
PreLoadTable(CCMA, auxiliary);
PreStoreTable(CCMA, auxiliary);
extern void CCMA_Dim_T_auxiliary(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_auxiliary(void *T);
extern int CCMA_Sql_T_auxiliary(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_auxiliary(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_auxiliary_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "auxiliary_body" : appearance order#363, hierarchy rank# 376, weight = 358.000363 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,datum_aux_1);
  DeclareDS(pk9real,datum_aux_2);
  DeclareDS(pk9real,datum_aux_3);
  DeclareDS(pk9real,datum_aux_4);
  DeclareDS(pk9real,datum_aux_5);
  DeclareDS(pk9real,datum_aux_6);
  DeclareDS(pk9real,datum_aux_7);
  DeclareDS(pk9real,datum_aux_8);
  DeclareDS(pk9real,datum_aux_9);
} TABLE_auxiliary_body;

#endif /* defined(IS_a_TABLE_auxiliary_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_auxiliary_body)
extern const ODB_Tags *CCMA_Set_T_auxiliary_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_auxiliary_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_auxiliary_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_auxiliary_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_auxiliary_body_TAG = 0;
PRIVATE int CCMA_nT_auxiliary_body_PREPTAG = 0;
PRIVATE int CCMA_nT_auxiliary_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_auxiliary_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_auxiliary_body_TAG) {
    int ntag = 9;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:datum_aux_1@auxiliary_body"; T[0].name = s; }
    { static char s[] = "pk9real:datum_aux_2@auxiliary_body"; T[1].name = s; }
    { static char s[] = "pk9real:datum_aux_3@auxiliary_body"; T[2].name = s; }
    { static char s[] = "pk9real:datum_aux_4@auxiliary_body"; T[3].name = s; }
    { static char s[] = "pk9real:datum_aux_5@auxiliary_body"; T[4].name = s; }
    { static char s[] = "pk9real:datum_aux_6@auxiliary_body"; T[5].name = s; }
    { static char s[] = "pk9real:datum_aux_7@auxiliary_body"; T[6].name = s; }
    { static char s[] = "pk9real:datum_aux_8@auxiliary_body"; T[7].name = s; }
    { static char s[] = "pk9real:datum_aux_9@auxiliary_body"; T[8].name = s; }
    CCMA_T_auxiliary_body_TAG = T;
    CCMA_nT_auxiliary_body_TAG = ntag;
    CCMA_nT_auxiliary_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_auxiliary_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_auxiliary_body_MEM;
  return CCMA_T_auxiliary_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_auxiliary_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_auxiliary_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 244;
    { static char s[] =
      ";datum_aux_1@auxiliary_body;datum_aux_2@auxiliary_body;"
      "datum_aux_3@auxiliary_body;datum_aux_4@auxiliary_body;"
      "datum_aux_5@auxiliary_body;datum_aux_6@auxiliary_body;"
      "datum_aux_7@auxiliary_body;datum_aux_8@auxiliary_body;"
      "datum_aux_9@auxiliary_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 73;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_auxiliary_body_PREPTAG = T;
    CCMA_nT_auxiliary_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_auxiliary_body_PREPTAG;
  return CCMA_T_auxiliary_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_auxiliary_body(void *T);
extern int CCMA_Unpack_T_auxiliary_body(void *T);
extern int CCMA_Sel_T_auxiliary_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, auxiliary_body);
PrePutTable(CCMA, d, double, auxiliary_body);
PreLoadTable(CCMA, auxiliary_body);
PreStoreTable(CCMA, auxiliary_body);
extern void CCMA_Dim_T_auxiliary_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_auxiliary_body(void *T);
extern int CCMA_Sql_T_auxiliary_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_auxiliary_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_resat) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "resat" : appearance order#364, hierarchy rank# 14, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,instrument_type);
  DeclareDS(pk1int,product_type);
  DeclareDS(pk9real,lat_fovcorner_1);
  DeclareDS(pk9real,lat_fovcorner_2);
  DeclareDS(pk9real,lat_fovcorner_3);
  DeclareDS(pk9real,lat_fovcorner_4);
  DeclareDS(pk9real,lon_fovcorner_1);
  DeclareDS(pk9real,lon_fovcorner_2);
  DeclareDS(pk9real,lon_fovcorner_3);
  DeclareDS(pk9real,lon_fovcorner_4);
  DeclareDS(pk9real,solar_elevation);
  DeclareDS(pk1int,scanpos);
  DeclareDS(pk9real,cloud_cover);
  DeclareDS(pk9real,cloud_top_press);
  DeclareDS(pk1int,quality_retrieval);
  DeclareDS(pk1int,number_layers);
  DeclareDS(linkoffset_t,LINKOFFSET(resat_averaging_kernel));
  DeclareDS(linklen_t,LINKLEN(resat_averaging_kernel));
  DeclareDS(pk1int,snow_ice_indicator);
  DeclareDS(pk1int,surface_type_indicator);
  DeclareDS(pk9real,methane_correction);
  DeclareDS(pk9real,surface_height);
  DeclareDS(pk1int,retrsource);
} TABLE_resat;

#endif /* defined(IS_a_TABLE_resat) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_resat)
extern const ODB_Tags *CCMA_Set_T_resat_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_resat_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_resat_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_resat_PREPTAG = NULL;
PRIVATE int CCMA_nT_resat_TAG = 0;
PRIVATE int CCMA_nT_resat_PREPTAG = 0;
PRIVATE int CCMA_nT_resat_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_resat_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_resat_TAG) {
    int ntag = 23;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:instrument_type@resat"; T[0].name = s; }
    { static char s[] = "pk1int:product_type@resat"; T[1].name = s; }
    { static char s[] = "pk9real:lat_fovcorner_1@resat"; T[2].name = s; }
    { static char s[] = "pk9real:lat_fovcorner_2@resat"; T[3].name = s; }
    { static char s[] = "pk9real:lat_fovcorner_3@resat"; T[4].name = s; }
    { static char s[] = "pk9real:lat_fovcorner_4@resat"; T[5].name = s; }
    { static char s[] = "pk9real:lon_fovcorner_1@resat"; T[6].name = s; }
    { static char s[] = "pk9real:lon_fovcorner_2@resat"; T[7].name = s; }
    { static char s[] = "pk9real:lon_fovcorner_3@resat"; T[8].name = s; }
    { static char s[] = "pk9real:lon_fovcorner_4@resat"; T[9].name = s; }
    { static char s[] = "pk9real:solar_elevation@resat"; T[10].name = s; }
    { static char s[] = "pk1int:scanpos@resat"; T[11].name = s; }
    { static char s[] = "pk9real:cloud_cover@resat"; T[12].name = s; }
    { static char s[] = "pk9real:cloud_top_press@resat"; T[13].name = s; }
    { static char s[] = "pk1int:quality_retrieval@resat"; T[14].name = s; }
    { static char s[] = "pk1int:number_layers@resat"; T[15].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(resat_averaging_kernel)@resat"; T[16].name = s; }
    { static char s[] = "linklen_t:LINKLEN(resat_averaging_kernel)@resat"; T[17].name = s; }
    { static char s[] = "pk1int:snow_ice_indicator@resat"; T[18].name = s; }
    { static char s[] = "pk1int:surface_type_indicator@resat"; T[19].name = s; }
    { static char s[] = "pk9real:methane_correction@resat"; T[20].name = s; }
    { static char s[] = "pk9real:surface_height@resat"; T[21].name = s; }
    { static char s[] = "pk1int:retrsource@resat"; T[22].name = s; }
    CCMA_T_resat_TAG = T;
    CCMA_nT_resat_TAG = ntag;
    CCMA_nT_resat_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_resat_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_resat_MEM;
  return CCMA_T_resat_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_resat_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_resat_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 534;
    { static char s[] =
      ";instrument_type@resat;product_type@resat;lat_fovcorner_1@resat;"
      "lat_fovcorner_2@resat;lat_fovcorner_3@resat;lat_fovcorner_4@resat;"
      "lon_fovcorner_1@resat;lon_fovcorner_2@resat;lon_fovcorner_3@resat;"
      "lon_fovcorner_4@resat;solar_elevation@resat;scanpos@resat;"
      "cloud_cover@resat;cloud_top_press@resat;quality_retrieval@resat;"
      "number_layers@resat;LINKOFFSET(resat_averaging_kernel)@resat;"
      "LINKLEN(resat_averaging_kernel)@resat;snow_ice_indicator@resat;"
      "surface_type_indicator@resat;methane_correction@resat;"
      "surface_height@resat;retrsource@resat;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 184;
    { static char s[] =
      ";pk1int;pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk1int;pk9real;pk9real;"
      "pk1int;pk1int;linkoffset_t;linklen_t;pk1int;pk1int;"
      "pk9real;pk9real;pk1int;";
      T[1].longname = s; }
    CCMA_T_resat_PREPTAG = T;
    CCMA_nT_resat_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_resat_PREPTAG;
  return CCMA_T_resat_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_resat(void *T);
extern int CCMA_Unpack_T_resat(void *T);
extern int CCMA_Sel_T_resat(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, resat);
PrePutTable(CCMA, d, double, resat);
PreLoadTable(CCMA, resat);
PreStoreTable(CCMA, resat);
extern void CCMA_Dim_T_resat(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_resat(void *T);
extern int CCMA_Sql_T_resat(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_resat(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_resat_averaging_kernel) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "resat_averaging_kernel" : appearance order#365, hierarchy rank# 377, weight = 358.000365 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,nak);
  DeclareDS(pk9real,wak_1);
  DeclareDS(pk9real,wak_2);
  DeclareDS(pk9real,wak_3);
  DeclareDS(pk9real,wak_4);
  DeclareDS(pk9real,wak_5);
  DeclareDS(pk9real,wak_6);
  DeclareDS(pk9real,wak_7);
  DeclareDS(pk9real,wak_8);
  DeclareDS(pk9real,wak_9);
  DeclareDS(pk9real,wak_10);
  DeclareDS(pk9real,wak_11);
  DeclareDS(pk9real,wak_12);
  DeclareDS(pk9real,wak_13);
  DeclareDS(pk9real,wak_14);
  DeclareDS(pk9real,wak_15);
  DeclareDS(pk9real,wak_16);
  DeclareDS(pk9real,wak_17);
  DeclareDS(pk9real,wak_18);
  DeclareDS(pk9real,wak_19);
  DeclareDS(pk9real,wak_20);
  DeclareDS(pk9real,wak_21);
  DeclareDS(pk9real,wak_22);
  DeclareDS(pk9real,wak_23);
  DeclareDS(pk9real,wak_24);
  DeclareDS(pk9real,wak_25);
  DeclareDS(pk9real,wak_26);
  DeclareDS(pk9real,wak_27);
  DeclareDS(pk9real,wak_28);
  DeclareDS(pk9real,wak_29);
  DeclareDS(pk9real,wak_30);
  DeclareDS(pk9real,wak_31);
  DeclareDS(pk9real,wak_32);
  DeclareDS(pk9real,wak_33);
  DeclareDS(pk9real,wak_34);
  DeclareDS(pk9real,wak_35);
  DeclareDS(pk9real,wak_36);
  DeclareDS(pk9real,wak_37);
  DeclareDS(pk9real,wak_38);
  DeclareDS(pk9real,wak_39);
  DeclareDS(pk9real,wak_40);
  DeclareDS(pk9real,wak_41);
  DeclareDS(pk9real,wak_42);
  DeclareDS(pk9real,wak_43);
  DeclareDS(pk9real,wak_44);
  DeclareDS(pk9real,wak_45);
  DeclareDS(pk9real,wak_46);
  DeclareDS(pk9real,wak_47);
  DeclareDS(pk9real,wak_48);
  DeclareDS(pk9real,wak_49);
  DeclareDS(pk9real,wak_50);
  DeclareDS(pk9real,pak_1);
  DeclareDS(pk9real,pak_2);
  DeclareDS(pk9real,pak_3);
  DeclareDS(pk9real,pak_4);
  DeclareDS(pk9real,pak_5);
  DeclareDS(pk9real,pak_6);
  DeclareDS(pk9real,pak_7);
  DeclareDS(pk9real,pak_8);
  DeclareDS(pk9real,pak_9);
  DeclareDS(pk9real,pak_10);
  DeclareDS(pk9real,pak_11);
  DeclareDS(pk9real,pak_12);
  DeclareDS(pk9real,pak_13);
  DeclareDS(pk9real,pak_14);
  DeclareDS(pk9real,pak_15);
  DeclareDS(pk9real,pak_16);
  DeclareDS(pk9real,pak_17);
  DeclareDS(pk9real,pak_18);
  DeclareDS(pk9real,pak_19);
  DeclareDS(pk9real,pak_20);
  DeclareDS(pk9real,pak_21);
  DeclareDS(pk9real,pak_22);
  DeclareDS(pk9real,pak_23);
  DeclareDS(pk9real,pak_24);
  DeclareDS(pk9real,pak_25);
  DeclareDS(pk9real,pak_26);
  DeclareDS(pk9real,pak_27);
  DeclareDS(pk9real,pak_28);
  DeclareDS(pk9real,pak_29);
  DeclareDS(pk9real,pak_30);
  DeclareDS(pk9real,pak_31);
  DeclareDS(pk9real,pak_32);
  DeclareDS(pk9real,pak_33);
  DeclareDS(pk9real,pak_34);
  DeclareDS(pk9real,pak_35);
  DeclareDS(pk9real,pak_36);
  DeclareDS(pk9real,pak_37);
  DeclareDS(pk9real,pak_38);
  DeclareDS(pk9real,pak_39);
  DeclareDS(pk9real,pak_40);
  DeclareDS(pk9real,pak_41);
  DeclareDS(pk9real,pak_42);
  DeclareDS(pk9real,pak_43);
  DeclareDS(pk9real,pak_44);
  DeclareDS(pk9real,pak_45);
  DeclareDS(pk9real,pak_46);
  DeclareDS(pk9real,pak_47);
  DeclareDS(pk9real,pak_48);
  DeclareDS(pk9real,pak_49);
  DeclareDS(pk9real,pak_50);
  DeclareDS(pk9real,apak_1);
  DeclareDS(pk9real,apak_2);
  DeclareDS(pk9real,apak_3);
  DeclareDS(pk9real,apak_4);
  DeclareDS(pk9real,apak_5);
  DeclareDS(pk9real,apak_6);
  DeclareDS(pk9real,apak_7);
  DeclareDS(pk9real,apak_8);
  DeclareDS(pk9real,apak_9);
  DeclareDS(pk9real,apak_10);
  DeclareDS(pk9real,apak_11);
  DeclareDS(pk9real,apak_12);
  DeclareDS(pk9real,apak_13);
  DeclareDS(pk9real,apak_14);
  DeclareDS(pk9real,apak_15);
  DeclareDS(pk9real,apak_16);
  DeclareDS(pk9real,apak_17);
  DeclareDS(pk9real,apak_18);
  DeclareDS(pk9real,apak_19);
  DeclareDS(pk9real,apak_20);
  DeclareDS(pk9real,apak_21);
  DeclareDS(pk9real,apak_22);
  DeclareDS(pk9real,apak_23);
  DeclareDS(pk9real,apak_24);
  DeclareDS(pk9real,apak_25);
  DeclareDS(pk9real,apak_26);
  DeclareDS(pk9real,apak_27);
  DeclareDS(pk9real,apak_28);
  DeclareDS(pk9real,apak_29);
  DeclareDS(pk9real,apak_30);
  DeclareDS(pk9real,apak_31);
  DeclareDS(pk9real,apak_32);
  DeclareDS(pk9real,apak_33);
  DeclareDS(pk9real,apak_34);
  DeclareDS(pk9real,apak_35);
  DeclareDS(pk9real,apak_36);
  DeclareDS(pk9real,apak_37);
  DeclareDS(pk9real,apak_38);
  DeclareDS(pk9real,apak_39);
  DeclareDS(pk9real,apak_40);
  DeclareDS(pk9real,apak_41);
  DeclareDS(pk9real,apak_42);
  DeclareDS(pk9real,apak_43);
  DeclareDS(pk9real,apak_44);
  DeclareDS(pk9real,apak_45);
  DeclareDS(pk9real,apak_46);
  DeclareDS(pk9real,apak_47);
  DeclareDS(pk9real,apak_48);
  DeclareDS(pk9real,apak_49);
  DeclareDS(pk9real,apak_50);
} TABLE_resat_averaging_kernel;

#endif /* defined(IS_a_TABLE_resat_averaging_kernel) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_resat_averaging_kernel)
extern const ODB_Tags *CCMA_Set_T_resat_averaging_kernel_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_resat_averaging_kernel_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_resat_averaging_kernel_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_resat_averaging_kernel_PREPTAG = NULL;
PRIVATE int CCMA_nT_resat_averaging_kernel_TAG = 0;
PRIVATE int CCMA_nT_resat_averaging_kernel_PREPTAG = 0;
PRIVATE int CCMA_nT_resat_averaging_kernel_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_resat_averaging_kernel_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_resat_averaging_kernel_TAG) {
    int ntag = 151;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:nak@resat_averaging_kernel"; T[0].name = s; }
    { static char s[] = "pk9real:wak_1@resat_averaging_kernel"; T[1].name = s; }
    { static char s[] = "pk9real:wak_2@resat_averaging_kernel"; T[2].name = s; }
    { static char s[] = "pk9real:wak_3@resat_averaging_kernel"; T[3].name = s; }
    { static char s[] = "pk9real:wak_4@resat_averaging_kernel"; T[4].name = s; }
    { static char s[] = "pk9real:wak_5@resat_averaging_kernel"; T[5].name = s; }
    { static char s[] = "pk9real:wak_6@resat_averaging_kernel"; T[6].name = s; }
    { static char s[] = "pk9real:wak_7@resat_averaging_kernel"; T[7].name = s; }
    { static char s[] = "pk9real:wak_8@resat_averaging_kernel"; T[8].name = s; }
    { static char s[] = "pk9real:wak_9@resat_averaging_kernel"; T[9].name = s; }
    { static char s[] = "pk9real:wak_10@resat_averaging_kernel"; T[10].name = s; }
    { static char s[] = "pk9real:wak_11@resat_averaging_kernel"; T[11].name = s; }
    { static char s[] = "pk9real:wak_12@resat_averaging_kernel"; T[12].name = s; }
    { static char s[] = "pk9real:wak_13@resat_averaging_kernel"; T[13].name = s; }
    { static char s[] = "pk9real:wak_14@resat_averaging_kernel"; T[14].name = s; }
    { static char s[] = "pk9real:wak_15@resat_averaging_kernel"; T[15].name = s; }
    { static char s[] = "pk9real:wak_16@resat_averaging_kernel"; T[16].name = s; }
    { static char s[] = "pk9real:wak_17@resat_averaging_kernel"; T[17].name = s; }
    { static char s[] = "pk9real:wak_18@resat_averaging_kernel"; T[18].name = s; }
    { static char s[] = "pk9real:wak_19@resat_averaging_kernel"; T[19].name = s; }
    { static char s[] = "pk9real:wak_20@resat_averaging_kernel"; T[20].name = s; }
    { static char s[] = "pk9real:wak_21@resat_averaging_kernel"; T[21].name = s; }
    { static char s[] = "pk9real:wak_22@resat_averaging_kernel"; T[22].name = s; }
    { static char s[] = "pk9real:wak_23@resat_averaging_kernel"; T[23].name = s; }
    { static char s[] = "pk9real:wak_24@resat_averaging_kernel"; T[24].name = s; }
    { static char s[] = "pk9real:wak_25@resat_averaging_kernel"; T[25].name = s; }
    { static char s[] = "pk9real:wak_26@resat_averaging_kernel"; T[26].name = s; }
    { static char s[] = "pk9real:wak_27@resat_averaging_kernel"; T[27].name = s; }
    { static char s[] = "pk9real:wak_28@resat_averaging_kernel"; T[28].name = s; }
    { static char s[] = "pk9real:wak_29@resat_averaging_kernel"; T[29].name = s; }
    { static char s[] = "pk9real:wak_30@resat_averaging_kernel"; T[30].name = s; }
    { static char s[] = "pk9real:wak_31@resat_averaging_kernel"; T[31].name = s; }
    { static char s[] = "pk9real:wak_32@resat_averaging_kernel"; T[32].name = s; }
    { static char s[] = "pk9real:wak_33@resat_averaging_kernel"; T[33].name = s; }
    { static char s[] = "pk9real:wak_34@resat_averaging_kernel"; T[34].name = s; }
    { static char s[] = "pk9real:wak_35@resat_averaging_kernel"; T[35].name = s; }
    { static char s[] = "pk9real:wak_36@resat_averaging_kernel"; T[36].name = s; }
    { static char s[] = "pk9real:wak_37@resat_averaging_kernel"; T[37].name = s; }
    { static char s[] = "pk9real:wak_38@resat_averaging_kernel"; T[38].name = s; }
    { static char s[] = "pk9real:wak_39@resat_averaging_kernel"; T[39].name = s; }
    { static char s[] = "pk9real:wak_40@resat_averaging_kernel"; T[40].name = s; }
    { static char s[] = "pk9real:wak_41@resat_averaging_kernel"; T[41].name = s; }
    { static char s[] = "pk9real:wak_42@resat_averaging_kernel"; T[42].name = s; }
    { static char s[] = "pk9real:wak_43@resat_averaging_kernel"; T[43].name = s; }
    { static char s[] = "pk9real:wak_44@resat_averaging_kernel"; T[44].name = s; }
    { static char s[] = "pk9real:wak_45@resat_averaging_kernel"; T[45].name = s; }
    { static char s[] = "pk9real:wak_46@resat_averaging_kernel"; T[46].name = s; }
    { static char s[] = "pk9real:wak_47@resat_averaging_kernel"; T[47].name = s; }
    { static char s[] = "pk9real:wak_48@resat_averaging_kernel"; T[48].name = s; }
    { static char s[] = "pk9real:wak_49@resat_averaging_kernel"; T[49].name = s; }
    { static char s[] = "pk9real:wak_50@resat_averaging_kernel"; T[50].name = s; }
    { static char s[] = "pk9real:pak_1@resat_averaging_kernel"; T[51].name = s; }
    { static char s[] = "pk9real:pak_2@resat_averaging_kernel"; T[52].name = s; }
    { static char s[] = "pk9real:pak_3@resat_averaging_kernel"; T[53].name = s; }
    { static char s[] = "pk9real:pak_4@resat_averaging_kernel"; T[54].name = s; }
    { static char s[] = "pk9real:pak_5@resat_averaging_kernel"; T[55].name = s; }
    { static char s[] = "pk9real:pak_6@resat_averaging_kernel"; T[56].name = s; }
    { static char s[] = "pk9real:pak_7@resat_averaging_kernel"; T[57].name = s; }
    { static char s[] = "pk9real:pak_8@resat_averaging_kernel"; T[58].name = s; }
    { static char s[] = "pk9real:pak_9@resat_averaging_kernel"; T[59].name = s; }
    { static char s[] = "pk9real:pak_10@resat_averaging_kernel"; T[60].name = s; }
    { static char s[] = "pk9real:pak_11@resat_averaging_kernel"; T[61].name = s; }
    { static char s[] = "pk9real:pak_12@resat_averaging_kernel"; T[62].name = s; }
    { static char s[] = "pk9real:pak_13@resat_averaging_kernel"; T[63].name = s; }
    { static char s[] = "pk9real:pak_14@resat_averaging_kernel"; T[64].name = s; }
    { static char s[] = "pk9real:pak_15@resat_averaging_kernel"; T[65].name = s; }
    { static char s[] = "pk9real:pak_16@resat_averaging_kernel"; T[66].name = s; }
    { static char s[] = "pk9real:pak_17@resat_averaging_kernel"; T[67].name = s; }
    { static char s[] = "pk9real:pak_18@resat_averaging_kernel"; T[68].name = s; }
    { static char s[] = "pk9real:pak_19@resat_averaging_kernel"; T[69].name = s; }
    { static char s[] = "pk9real:pak_20@resat_averaging_kernel"; T[70].name = s; }
    { static char s[] = "pk9real:pak_21@resat_averaging_kernel"; T[71].name = s; }
    { static char s[] = "pk9real:pak_22@resat_averaging_kernel"; T[72].name = s; }
    { static char s[] = "pk9real:pak_23@resat_averaging_kernel"; T[73].name = s; }
    { static char s[] = "pk9real:pak_24@resat_averaging_kernel"; T[74].name = s; }
    { static char s[] = "pk9real:pak_25@resat_averaging_kernel"; T[75].name = s; }
    { static char s[] = "pk9real:pak_26@resat_averaging_kernel"; T[76].name = s; }
    { static char s[] = "pk9real:pak_27@resat_averaging_kernel"; T[77].name = s; }
    { static char s[] = "pk9real:pak_28@resat_averaging_kernel"; T[78].name = s; }
    { static char s[] = "pk9real:pak_29@resat_averaging_kernel"; T[79].name = s; }
    { static char s[] = "pk9real:pak_30@resat_averaging_kernel"; T[80].name = s; }
    { static char s[] = "pk9real:pak_31@resat_averaging_kernel"; T[81].name = s; }
    { static char s[] = "pk9real:pak_32@resat_averaging_kernel"; T[82].name = s; }
    { static char s[] = "pk9real:pak_33@resat_averaging_kernel"; T[83].name = s; }
    { static char s[] = "pk9real:pak_34@resat_averaging_kernel"; T[84].name = s; }
    { static char s[] = "pk9real:pak_35@resat_averaging_kernel"; T[85].name = s; }
    { static char s[] = "pk9real:pak_36@resat_averaging_kernel"; T[86].name = s; }
    { static char s[] = "pk9real:pak_37@resat_averaging_kernel"; T[87].name = s; }
    { static char s[] = "pk9real:pak_38@resat_averaging_kernel"; T[88].name = s; }
    { static char s[] = "pk9real:pak_39@resat_averaging_kernel"; T[89].name = s; }
    { static char s[] = "pk9real:pak_40@resat_averaging_kernel"; T[90].name = s; }
    { static char s[] = "pk9real:pak_41@resat_averaging_kernel"; T[91].name = s; }
    { static char s[] = "pk9real:pak_42@resat_averaging_kernel"; T[92].name = s; }
    { static char s[] = "pk9real:pak_43@resat_averaging_kernel"; T[93].name = s; }
    { static char s[] = "pk9real:pak_44@resat_averaging_kernel"; T[94].name = s; }
    { static char s[] = "pk9real:pak_45@resat_averaging_kernel"; T[95].name = s; }
    { static char s[] = "pk9real:pak_46@resat_averaging_kernel"; T[96].name = s; }
    { static char s[] = "pk9real:pak_47@resat_averaging_kernel"; T[97].name = s; }
    { static char s[] = "pk9real:pak_48@resat_averaging_kernel"; T[98].name = s; }
    { static char s[] = "pk9real:pak_49@resat_averaging_kernel"; T[99].name = s; }
    { static char s[] = "pk9real:pak_50@resat_averaging_kernel"; T[100].name = s; }
    { static char s[] = "pk9real:apak_1@resat_averaging_kernel"; T[101].name = s; }
    { static char s[] = "pk9real:apak_2@resat_averaging_kernel"; T[102].name = s; }
    { static char s[] = "pk9real:apak_3@resat_averaging_kernel"; T[103].name = s; }
    { static char s[] = "pk9real:apak_4@resat_averaging_kernel"; T[104].name = s; }
    { static char s[] = "pk9real:apak_5@resat_averaging_kernel"; T[105].name = s; }
    { static char s[] = "pk9real:apak_6@resat_averaging_kernel"; T[106].name = s; }
    { static char s[] = "pk9real:apak_7@resat_averaging_kernel"; T[107].name = s; }
    { static char s[] = "pk9real:apak_8@resat_averaging_kernel"; T[108].name = s; }
    { static char s[] = "pk9real:apak_9@resat_averaging_kernel"; T[109].name = s; }
    { static char s[] = "pk9real:apak_10@resat_averaging_kernel"; T[110].name = s; }
    { static char s[] = "pk9real:apak_11@resat_averaging_kernel"; T[111].name = s; }
    { static char s[] = "pk9real:apak_12@resat_averaging_kernel"; T[112].name = s; }
    { static char s[] = "pk9real:apak_13@resat_averaging_kernel"; T[113].name = s; }
    { static char s[] = "pk9real:apak_14@resat_averaging_kernel"; T[114].name = s; }
    { static char s[] = "pk9real:apak_15@resat_averaging_kernel"; T[115].name = s; }
    { static char s[] = "pk9real:apak_16@resat_averaging_kernel"; T[116].name = s; }
    { static char s[] = "pk9real:apak_17@resat_averaging_kernel"; T[117].name = s; }
    { static char s[] = "pk9real:apak_18@resat_averaging_kernel"; T[118].name = s; }
    { static char s[] = "pk9real:apak_19@resat_averaging_kernel"; T[119].name = s; }
    { static char s[] = "pk9real:apak_20@resat_averaging_kernel"; T[120].name = s; }
    { static char s[] = "pk9real:apak_21@resat_averaging_kernel"; T[121].name = s; }
    { static char s[] = "pk9real:apak_22@resat_averaging_kernel"; T[122].name = s; }
    { static char s[] = "pk9real:apak_23@resat_averaging_kernel"; T[123].name = s; }
    { static char s[] = "pk9real:apak_24@resat_averaging_kernel"; T[124].name = s; }
    { static char s[] = "pk9real:apak_25@resat_averaging_kernel"; T[125].name = s; }
    { static char s[] = "pk9real:apak_26@resat_averaging_kernel"; T[126].name = s; }
    { static char s[] = "pk9real:apak_27@resat_averaging_kernel"; T[127].name = s; }
    { static char s[] = "pk9real:apak_28@resat_averaging_kernel"; T[128].name = s; }
    { static char s[] = "pk9real:apak_29@resat_averaging_kernel"; T[129].name = s; }
    { static char s[] = "pk9real:apak_30@resat_averaging_kernel"; T[130].name = s; }
    { static char s[] = "pk9real:apak_31@resat_averaging_kernel"; T[131].name = s; }
    { static char s[] = "pk9real:apak_32@resat_averaging_kernel"; T[132].name = s; }
    { static char s[] = "pk9real:apak_33@resat_averaging_kernel"; T[133].name = s; }
    { static char s[] = "pk9real:apak_34@resat_averaging_kernel"; T[134].name = s; }
    { static char s[] = "pk9real:apak_35@resat_averaging_kernel"; T[135].name = s; }
    { static char s[] = "pk9real:apak_36@resat_averaging_kernel"; T[136].name = s; }
    { static char s[] = "pk9real:apak_37@resat_averaging_kernel"; T[137].name = s; }
    { static char s[] = "pk9real:apak_38@resat_averaging_kernel"; T[138].name = s; }
    { static char s[] = "pk9real:apak_39@resat_averaging_kernel"; T[139].name = s; }
    { static char s[] = "pk9real:apak_40@resat_averaging_kernel"; T[140].name = s; }
    { static char s[] = "pk9real:apak_41@resat_averaging_kernel"; T[141].name = s; }
    { static char s[] = "pk9real:apak_42@resat_averaging_kernel"; T[142].name = s; }
    { static char s[] = "pk9real:apak_43@resat_averaging_kernel"; T[143].name = s; }
    { static char s[] = "pk9real:apak_44@resat_averaging_kernel"; T[144].name = s; }
    { static char s[] = "pk9real:apak_45@resat_averaging_kernel"; T[145].name = s; }
    { static char s[] = "pk9real:apak_46@resat_averaging_kernel"; T[146].name = s; }
    { static char s[] = "pk9real:apak_47@resat_averaging_kernel"; T[147].name = s; }
    { static char s[] = "pk9real:apak_48@resat_averaging_kernel"; T[148].name = s; }
    { static char s[] = "pk9real:apak_49@resat_averaging_kernel"; T[149].name = s; }
    { static char s[] = "pk9real:apak_50@resat_averaging_kernel"; T[150].name = s; }
    CCMA_T_resat_averaging_kernel_TAG = T;
    CCMA_nT_resat_averaging_kernel_TAG = ntag;
    CCMA_nT_resat_averaging_kernel_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_resat_averaging_kernel_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_resat_averaging_kernel_MEM;
  return CCMA_T_resat_averaging_kernel_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_resat_averaging_kernel_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_resat_averaging_kernel_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 4551;
    { static char s[] =
      ";nak@resat_averaging_kernel;wak_1@resat_averaging_kernel;"
      "wak_2@resat_averaging_kernel;wak_3@resat_averaging_kernel;"
      "wak_4@resat_averaging_kernel;wak_5@resat_averaging_kernel;"
      "wak_6@resat_averaging_kernel;wak_7@resat_averaging_kernel;"
      "wak_8@resat_averaging_kernel;wak_9@resat_averaging_kernel;"
      "wak_10@resat_averaging_kernel;wak_11@resat_averaging_kernel;"
      "wak_12@resat_averaging_kernel;wak_13@resat_averaging_kernel;"
      "wak_14@resat_averaging_kernel;wak_15@resat_averaging_kernel;"
      "wak_16@resat_averaging_kernel;wak_17@resat_averaging_kernel;"
      "wak_18@resat_averaging_kernel;wak_19@resat_averaging_kernel;"
      "wak_20@resat_averaging_kernel;wak_21@resat_averaging_kernel;"
      "wak_22@resat_averaging_kernel;wak_23@resat_averaging_kernel;"
      "wak_24@resat_averaging_kernel;wak_25@resat_averaging_kernel;"
      "wak_26@resat_averaging_kernel;wak_27@resat_averaging_kernel;"
      "wak_28@resat_averaging_kernel;wak_29@resat_averaging_kernel;"
      "wak_30@resat_averaging_kernel;wak_31@resat_averaging_kernel;"
      "wak_32@resat_averaging_kernel;wak_33@resat_averaging_kernel;"
      "wak_34@resat_averaging_kernel;wak_35@resat_averaging_kernel;"
      "wak_36@resat_averaging_kernel;wak_37@resat_averaging_kernel;"
      "wak_38@resat_averaging_kernel;wak_39@resat_averaging_kernel;"
      "wak_40@resat_averaging_kernel;wak_41@resat_averaging_kernel;"
      "wak_42@resat_averaging_kernel;wak_43@resat_averaging_kernel;"
      "wak_44@resat_averaging_kernel;wak_45@resat_averaging_kernel;"
      "wak_46@resat_averaging_kernel;wak_47@resat_averaging_kernel;"
      "wak_48@resat_averaging_kernel;wak_49@resat_averaging_kernel;"
      "wak_50@resat_averaging_kernel;pak_1@resat_averaging_kernel;"
      "pak_2@resat_averaging_kernel;pak_3@resat_averaging_kernel;"
      "pak_4@resat_averaging_kernel;pak_5@resat_averaging_kernel;"
      "pak_6@resat_averaging_kernel;pak_7@resat_averaging_kernel;"
      "pak_8@resat_averaging_kernel;pak_9@resat_averaging_kernel;"
      "pak_10@resat_averaging_kernel;pak_11@resat_averaging_kernel;"
      "pak_12@resat_averaging_kernel;pak_13@resat_averaging_kernel;"
      "pak_14@resat_averaging_kernel;pak_15@resat_averaging_kernel;"
      "pak_16@resat_averaging_kernel;pak_17@resat_averaging_kernel;"
      "pak_18@resat_averaging_kernel;pak_19@resat_averaging_kernel;"
      "pak_20@resat_averaging_kernel;pak_21@resat_averaging_kernel;"
      "pak_22@resat_averaging_kernel;pak_23@resat_averaging_kernel;"
      "pak_24@resat_averaging_kernel;pak_25@resat_averaging_kernel;"
      "pak_26@resat_averaging_kernel;pak_27@resat_averaging_kernel;"
      "pak_28@resat_averaging_kernel;pak_29@resat_averaging_kernel;"
      "pak_30@resat_averaging_kernel;pak_31@resat_averaging_kernel;"
      "pak_32@resat_averaging_kernel;pak_33@resat_averaging_kernel;"
      "pak_34@resat_averaging_kernel;pak_35@resat_averaging_kernel;"
      "pak_36@resat_averaging_kernel;pak_37@resat_averaging_kernel;"
      "pak_38@resat_averaging_kernel;pak_39@resat_averaging_kernel;"
      "pak_40@resat_averaging_kernel;pak_41@resat_averaging_kernel;"
      "pak_42@resat_averaging_kernel;pak_43@resat_averaging_kernel;"
      "pak_44@resat_averaging_kernel;pak_45@resat_averaging_kernel;"
      "pak_46@resat_averaging_kernel;pak_47@resat_averaging_kernel;"
      "pak_48@resat_averaging_kernel;pak_49@resat_averaging_kernel;"
      "pak_50@resat_averaging_kernel;apak_1@resat_averaging_kernel;"
      "apak_2@resat_averaging_kernel;apak_3@resat_averaging_kernel;"
      "apak_4@resat_averaging_kernel;apak_5@resat_averaging_kernel;"
      "apak_6@resat_averaging_kernel;apak_7@resat_averaging_kernel;"
      "apak_8@resat_averaging_kernel;apak_9@resat_averaging_kernel;"
      "apak_10@resat_averaging_kernel;apak_11@resat_averaging_kernel;"
      "apak_12@resat_averaging_kernel;apak_13@resat_averaging_kernel;"
      "apak_14@resat_averaging_kernel;apak_15@resat_averaging_kernel;"
      "apak_16@resat_averaging_kernel;apak_17@resat_averaging_kernel;"
      "apak_18@resat_averaging_kernel;apak_19@resat_averaging_kernel;"
      "apak_20@resat_averaging_kernel;apak_21@resat_averaging_kernel;"
      "apak_22@resat_averaging_kernel;apak_23@resat_averaging_kernel;"
      "apak_24@resat_averaging_kernel;apak_25@resat_averaging_kernel;"
      "apak_26@resat_averaging_kernel;apak_27@resat_averaging_kernel;"
      "apak_28@resat_averaging_kernel;apak_29@resat_averaging_kernel;"
      "apak_30@resat_averaging_kernel;apak_31@resat_averaging_kernel;"
      "apak_32@resat_averaging_kernel;apak_33@resat_averaging_kernel;"
      "apak_34@resat_averaging_kernel;apak_35@resat_averaging_kernel;"
      "apak_36@resat_averaging_kernel;apak_37@resat_averaging_kernel;"
      "apak_38@resat_averaging_kernel;apak_39@resat_averaging_kernel;"
      "apak_40@resat_averaging_kernel;apak_41@resat_averaging_kernel;"
      "apak_42@resat_averaging_kernel;apak_43@resat_averaging_kernel;"
      "apak_44@resat_averaging_kernel;apak_45@resat_averaging_kernel;"
      "apak_46@resat_averaging_kernel;apak_47@resat_averaging_kernel;"
      "apak_48@resat_averaging_kernel;apak_49@resat_averaging_kernel;"
      "apak_50@resat_averaging_kernel;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 1208;
    { static char s[] =
      ";pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_resat_averaging_kernel_PREPTAG = T;
    CCMA_nT_resat_averaging_kernel_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_resat_averaging_kernel_PREPTAG;
  return CCMA_T_resat_averaging_kernel_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_resat_averaging_kernel(void *T);
extern int CCMA_Unpack_T_resat_averaging_kernel(void *T);
extern int CCMA_Sel_T_resat_averaging_kernel(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, resat_averaging_kernel);
PrePutTable(CCMA, d, double, resat_averaging_kernel);
PreLoadTable(CCMA, resat_averaging_kernel);
PreStoreTable(CCMA, resat_averaging_kernel);
extern void CCMA_Dim_T_resat_averaging_kernel(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_resat_averaging_kernel(void *T);
extern int CCMA_Sql_T_resat_averaging_kernel(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_resat_averaging_kernel(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_gnssro) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "gnssro" : appearance order#366, hierarchy rank# 15, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,radcurv);
  DeclareDS(pk9real,undulation);
  DeclareDS(linkoffset_t,LINKOFFSET(gnssro_body));
  DeclareDS(linklen_t,LINKLEN(gnssro_body));
} TABLE_gnssro;

#endif /* defined(IS_a_TABLE_gnssro) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_gnssro)
extern const ODB_Tags *CCMA_Set_T_gnssro_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_gnssro_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_gnssro_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_gnssro_PREPTAG = NULL;
PRIVATE int CCMA_nT_gnssro_TAG = 0;
PRIVATE int CCMA_nT_gnssro_PREPTAG = 0;
PRIVATE int CCMA_nT_gnssro_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_gnssro_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_gnssro_TAG) {
    int ntag = 4;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:radcurv@gnssro"; T[0].name = s; }
    { static char s[] = "pk9real:undulation@gnssro"; T[1].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(gnssro_body)@gnssro"; T[2].name = s; }
    { static char s[] = "linklen_t:LINKLEN(gnssro_body)@gnssro"; T[3].name = s; }
    CCMA_T_gnssro_TAG = T;
    CCMA_nT_gnssro_TAG = ntag;
    CCMA_nT_gnssro_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_gnssro_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_gnssro_MEM;
  return CCMA_T_gnssro_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_gnssro_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_gnssro_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 93;
    { static char s[] =
      ";radcurv@gnssro;undulation@gnssro;LINKOFFSET(gnssro_body)@gnssro;"
      "LINKLEN(gnssro_body)@gnssro;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 40;
    { static char s[] =
      ";pk9real;pk9real;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_gnssro_PREPTAG = T;
    CCMA_nT_gnssro_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_gnssro_PREPTAG;
  return CCMA_T_gnssro_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_gnssro(void *T);
extern int CCMA_Unpack_T_gnssro(void *T);
extern int CCMA_Sel_T_gnssro(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, gnssro);
PrePutTable(CCMA, d, double, gnssro);
PreLoadTable(CCMA, gnssro);
PreStoreTable(CCMA, gnssro);
extern void CCMA_Dim_T_gnssro(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_gnssro(void *T);
extern int CCMA_Sql_T_gnssro(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_gnssro(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_gnssro_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "gnssro_body" : appearance order#367, hierarchy rank# 378, weight = 358.000367 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,obs_dndz);
  DeclareDS(pk9real,obs_refractivity);
  DeclareDS(pk9real,bg_dndz);
  DeclareDS(pk9real,bg_refractivity);
  DeclareDS(pk9real,bg_layerno);
  DeclareDS(pk9real,obs_tvalue);
  DeclareDS(pk9real,obs_zvalue);
  DeclareDS(pk9real,bg_tvalue);
} TABLE_gnssro_body;

#endif /* defined(IS_a_TABLE_gnssro_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_gnssro_body)
extern const ODB_Tags *CCMA_Set_T_gnssro_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_gnssro_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_gnssro_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_gnssro_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_gnssro_body_TAG = 0;
PRIVATE int CCMA_nT_gnssro_body_PREPTAG = 0;
PRIVATE int CCMA_nT_gnssro_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_gnssro_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_gnssro_body_TAG) {
    int ntag = 8;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:obs_dndz@gnssro_body"; T[0].name = s; }
    { static char s[] = "pk9real:obs_refractivity@gnssro_body"; T[1].name = s; }
    { static char s[] = "pk9real:bg_dndz@gnssro_body"; T[2].name = s; }
    { static char s[] = "pk9real:bg_refractivity@gnssro_body"; T[3].name = s; }
    { static char s[] = "pk9real:bg_layerno@gnssro_body"; T[4].name = s; }
    { static char s[] = "pk9real:obs_tvalue@gnssro_body"; T[5].name = s; }
    { static char s[] = "pk9real:obs_zvalue@gnssro_body"; T[6].name = s; }
    { static char s[] = "pk9real:bg_tvalue@gnssro_body"; T[7].name = s; }
    CCMA_T_gnssro_body_TAG = T;
    CCMA_nT_gnssro_body_TAG = ntag;
    CCMA_nT_gnssro_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_gnssro_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_gnssro_body_MEM;
  return CCMA_T_gnssro_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_gnssro_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_gnssro_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 190;
    { static char s[] =
      ";obs_dndz@gnssro_body;obs_refractivity@gnssro_body;"
      "bg_dndz@gnssro_body;bg_refractivity@gnssro_body;bg_layerno@gnssro_body;"
      "obs_tvalue@gnssro_body;obs_zvalue@gnssro_body;bg_tvalue@gnssro_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 65;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    CCMA_T_gnssro_body_PREPTAG = T;
    CCMA_nT_gnssro_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_gnssro_body_PREPTAG;
  return CCMA_T_gnssro_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_gnssro_body(void *T);
extern int CCMA_Unpack_T_gnssro_body(void *T);
extern int CCMA_Sel_T_gnssro_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, gnssro_body);
PrePutTable(CCMA, d, double, gnssro_body);
PreLoadTable(CCMA, gnssro_body);
PreStoreTable(CCMA, gnssro_body);
extern void CCMA_Dim_T_gnssro_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_gnssro_body(void *T);
extern int CCMA_Sql_T_gnssro_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_gnssro_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_satob) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "satob" : appearance order#368, hierarchy rank# 16, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,comp_method);
  DeclareDS(pk1int,instdata);
  DeclareDS(pk1int,dataproc);
  DeclareDS(pk1int,qi_fc);
  DeclareDS(pk1int,qi_nofc);
  DeclareDS(pk1int,rff);
  DeclareDS(pk9real,ee);
  DeclareDS(pk9real,segment_size_x);
  DeclareDS(pk9real,segment_size_y);
  DeclareDS(pk9real,chan_freq);
  DeclareDS(pk9real,tb);
  DeclareDS(pk9real,t);
  DeclareDS(pk9real,shear);
  DeclareDS(pk9real,t200);
  DeclareDS(pk9real,t500);
  DeclareDS(pk9real,top_mean_t);
  DeclareDS(pk9real,top_wv);
  DeclareDS(pk9real,dt_by_dp);
  DeclareDS(pk9real,p_best);
  DeclareDS(pk9real,u_best);
  DeclareDS(pk9real,v_best);
  DeclareDS(pk9real,dd_best);
  DeclareDS(pk9real,ff_best);
  DeclareDS(pk9real,p_old);
  DeclareDS(pk9real,u_old);
  DeclareDS(pk9real,v_old);
  DeclareDS(pk1int,height_assignment_method);
  DeclareDS(pk1int,tracer_correlation_method);
  DeclareDS(pk1int,land_sea);
  DeclareDS(pk9real,tracking_error_u);
  DeclareDS(pk9real,tracking_error_v);
  DeclareDS(pk9real,h_assignment_error_u);
  DeclareDS(pk9real,h_assignment_error_v);
  DeclareDS(pk9real,error_in_h_assignment);
} TABLE_satob;

#endif /* defined(IS_a_TABLE_satob) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_satob)
extern const ODB_Tags *CCMA_Set_T_satob_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_satob_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_satob_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_satob_PREPTAG = NULL;
PRIVATE int CCMA_nT_satob_TAG = 0;
PRIVATE int CCMA_nT_satob_PREPTAG = 0;
PRIVATE int CCMA_nT_satob_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_satob_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_satob_TAG) {
    int ntag = 34;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:comp_method@satob"; T[0].name = s; }
    { static char s[] = "pk1int:instdata@satob"; T[1].name = s; }
    { static char s[] = "pk1int:dataproc@satob"; T[2].name = s; }
    { static char s[] = "pk1int:qi_fc@satob"; T[3].name = s; }
    { static char s[] = "pk1int:qi_nofc@satob"; T[4].name = s; }
    { static char s[] = "pk1int:rff@satob"; T[5].name = s; }
    { static char s[] = "pk9real:ee@satob"; T[6].name = s; }
    { static char s[] = "pk9real:segment_size_x@satob"; T[7].name = s; }
    { static char s[] = "pk9real:segment_size_y@satob"; T[8].name = s; }
    { static char s[] = "pk9real:chan_freq@satob"; T[9].name = s; }
    { static char s[] = "pk9real:tb@satob"; T[10].name = s; }
    { static char s[] = "pk9real:t@satob"; T[11].name = s; }
    { static char s[] = "pk9real:shear@satob"; T[12].name = s; }
    { static char s[] = "pk9real:t200@satob"; T[13].name = s; }
    { static char s[] = "pk9real:t500@satob"; T[14].name = s; }
    { static char s[] = "pk9real:top_mean_t@satob"; T[15].name = s; }
    { static char s[] = "pk9real:top_wv@satob"; T[16].name = s; }
    { static char s[] = "pk9real:dt_by_dp@satob"; T[17].name = s; }
    { static char s[] = "pk9real:p_best@satob"; T[18].name = s; }
    { static char s[] = "pk9real:u_best@satob"; T[19].name = s; }
    { static char s[] = "pk9real:v_best@satob"; T[20].name = s; }
    { static char s[] = "pk9real:dd_best@satob"; T[21].name = s; }
    { static char s[] = "pk9real:ff_best@satob"; T[22].name = s; }
    { static char s[] = "pk9real:p_old@satob"; T[23].name = s; }
    { static char s[] = "pk9real:u_old@satob"; T[24].name = s; }
    { static char s[] = "pk9real:v_old@satob"; T[25].name = s; }
    { static char s[] = "pk1int:height_assignment_method@satob"; T[26].name = s; }
    { static char s[] = "pk1int:tracer_correlation_method@satob"; T[27].name = s; }
    { static char s[] = "pk1int:land_sea@satob"; T[28].name = s; }
    { static char s[] = "pk9real:tracking_error_u@satob"; T[29].name = s; }
    { static char s[] = "pk9real:tracking_error_v@satob"; T[30].name = s; }
    { static char s[] = "pk9real:h_assignment_error_u@satob"; T[31].name = s; }
    { static char s[] = "pk9real:h_assignment_error_v@satob"; T[32].name = s; }
    { static char s[] = "pk9real:error_in_h_assignment@satob"; T[33].name = s; }
    CCMA_T_satob_TAG = T;
    CCMA_nT_satob_TAG = ntag;
    CCMA_nT_satob_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_satob_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_satob_MEM;
  return CCMA_T_satob_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_satob_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_satob_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 557;
    { static char s[] =
      ";comp_method@satob;instdata@satob;dataproc@satob;qi_fc@satob;"
      "qi_nofc@satob;rff@satob;ee@satob;segment_size_x@satob;"
      "segment_size_y@satob;chan_freq@satob;tb@satob;t@satob;"
      "shear@satob;t200@satob;t500@satob;top_mean_t@satob;"
      "top_wv@satob;dt_by_dp@satob;p_best@satob;u_best@satob;"
      "v_best@satob;dd_best@satob;ff_best@satob;p_old@satob;"
      "u_old@satob;v_old@satob;height_assignment_method@satob;"
      "tracer_correlation_method@satob;land_sea@satob;tracking_error_u@satob;"
      "tracking_error_v@satob;h_assignment_error_u@satob;"
      "h_assignment_error_v@satob;error_in_h_assignment@satob;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 264;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;pk1int;pk1int;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk1int;pk1int;"
      "pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_satob_PREPTAG = T;
    CCMA_nT_satob_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_satob_PREPTAG;
  return CCMA_T_satob_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_satob(void *T);
extern int CCMA_Unpack_T_satob(void *T);
extern int CCMA_Sel_T_satob(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, satob);
PrePutTable(CCMA, d, double, satob);
PreLoadTable(CCMA, satob);
PreStoreTable(CCMA, satob);
extern void CCMA_Dim_T_satob(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_satob(void *T);
extern int CCMA_Sql_T_satob(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_satob(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_scatt) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "scatt" : appearance order#369, hierarchy rank# 17, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,cellno);
  DeclareDS(pk1int,nretr_amb);
  DeclareDS(pk1int,prodflag);
  DeclareDS(pk1int,wvc_qf);
  DeclareDS(linkoffset_t,LINKOFFSET(scatt_body));
  DeclareDS(linklen_t,LINKLEN(scatt_body));
} TABLE_scatt;

#endif /* defined(IS_a_TABLE_scatt) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_scatt)
extern const ODB_Tags *CCMA_Set_T_scatt_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_scatt_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_scatt_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_scatt_PREPTAG = NULL;
PRIVATE int CCMA_nT_scatt_TAG = 0;
PRIVATE int CCMA_nT_scatt_PREPTAG = 0;
PRIVATE int CCMA_nT_scatt_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_scatt_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_scatt_TAG) {
    int ntag = 6;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:cellno@scatt"; T[0].name = s; }
    { static char s[] = "pk1int:nretr_amb@scatt"; T[1].name = s; }
    { static char s[] = "pk1int:prodflag@scatt"; T[2].name = s; }
    { static char s[] = "pk1int:wvc_qf@scatt"; T[3].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(scatt_body)@scatt"; T[4].name = s; }
    { static char s[] = "linklen_t:LINKLEN(scatt_body)@scatt"; T[5].name = s; }
    CCMA_T_scatt_TAG = T;
    CCMA_nT_scatt_TAG = ntag;
    CCMA_nT_scatt_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_scatt_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_scatt_MEM;
  return CCMA_T_scatt_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_scatt_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_scatt_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 113;
    { static char s[] =
      ";cellno@scatt;nretr_amb@scatt;prodflag@scatt;wvc_qf@scatt;"
      "LINKOFFSET(scatt_body)@scatt;LINKLEN(scatt_body)@scatt;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 52;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk1int;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_scatt_PREPTAG = T;
    CCMA_nT_scatt_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_scatt_PREPTAG;
  return CCMA_T_scatt_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_scatt(void *T);
extern int CCMA_Unpack_T_scatt(void *T);
extern int CCMA_Sel_T_scatt(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, scatt);
PrePutTable(CCMA, d, double, scatt);
PreLoadTable(CCMA, scatt);
PreStoreTable(CCMA, scatt);
extern void CCMA_Dim_T_scatt(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_scatt(void *T);
extern int CCMA_Sql_T_scatt(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_scatt(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_scatt_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "scatt_body" : appearance order#370, hierarchy rank# 379, weight = 358.000370 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,azimuth);
  DeclareDS(pk9real,incidence);
  DeclareDS(pk9real,kp);
  DeclareDS(pk9real,invresid);
  DeclareDS(pk9real,dirskill);
  DeclareDS(pk1int,mpc);
  DeclareDS(pk1int,kp_qf);
  DeclareDS(pk1int,ambig_select);
  DeclareDS(pk1int,sigma0_qf);
  DeclareDS(pk9real,sigma0_sm);
  DeclareDS(pk9real,soilmoist_sd);
  DeclareDS(pk1int,soilmoist_cf);
  DeclareDS(pk1int,soilmoist_pf);
  DeclareDS(pk9real,land_fraction);
  DeclareDS(pk9real,wetland_fraction);
  DeclareDS(pk9real,topo_complex);
  DeclareDS(pk9real,likelihood);
} TABLE_scatt_body;

#endif /* defined(IS_a_TABLE_scatt_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_scatt_body)
extern const ODB_Tags *CCMA_Set_T_scatt_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_scatt_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_scatt_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_scatt_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_scatt_body_TAG = 0;
PRIVATE int CCMA_nT_scatt_body_PREPTAG = 0;
PRIVATE int CCMA_nT_scatt_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_scatt_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_scatt_body_TAG) {
    int ntag = 17;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:azimuth@scatt_body"; T[0].name = s; }
    { static char s[] = "pk9real:incidence@scatt_body"; T[1].name = s; }
    { static char s[] = "pk9real:kp@scatt_body"; T[2].name = s; }
    { static char s[] = "pk9real:invresid@scatt_body"; T[3].name = s; }
    { static char s[] = "pk9real:dirskill@scatt_body"; T[4].name = s; }
    { static char s[] = "pk1int:mpc@scatt_body"; T[5].name = s; }
    { static char s[] = "pk1int:kp_qf@scatt_body"; T[6].name = s; }
    { static char s[] = "pk1int:ambig_select@scatt_body"; T[7].name = s; }
    { static char s[] = "pk1int:sigma0_qf@scatt_body"; T[8].name = s; }
    { static char s[] = "pk9real:sigma0_sm@scatt_body"; T[9].name = s; }
    { static char s[] = "pk9real:soilmoist_sd@scatt_body"; T[10].name = s; }
    { static char s[] = "pk1int:soilmoist_cf@scatt_body"; T[11].name = s; }
    { static char s[] = "pk1int:soilmoist_pf@scatt_body"; T[12].name = s; }
    { static char s[] = "pk9real:land_fraction@scatt_body"; T[13].name = s; }
    { static char s[] = "pk9real:wetland_fraction@scatt_body"; T[14].name = s; }
    { static char s[] = "pk9real:topo_complex@scatt_body"; T[15].name = s; }
    { static char s[] = "pk9real:likelihood@scatt_body"; T[16].name = s; }
    CCMA_T_scatt_body_TAG = T;
    CCMA_nT_scatt_body_TAG = ntag;
    CCMA_nT_scatt_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_scatt_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_scatt_body_MEM;
  return CCMA_T_scatt_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_scatt_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_scatt_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 364;
    { static char s[] =
      ";azimuth@scatt_body;incidence@scatt_body;kp@scatt_body;"
      "invresid@scatt_body;dirskill@scatt_body;mpc@scatt_body;"
      "kp_qf@scatt_body;ambig_select@scatt_body;sigma0_qf@scatt_body;"
      "sigma0_sm@scatt_body;soilmoist_sd@scatt_body;soilmoist_cf@scatt_body;"
      "soilmoist_pf@scatt_body;land_fraction@scatt_body;wetland_fraction@scatt_body;"
      "topo_complex@scatt_body;likelihood@scatt_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 131;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk1int;pk1int;"
      "pk1int;pk1int;pk9real;pk9real;pk1int;pk1int;pk9real;"
      "pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_scatt_body_PREPTAG = T;
    CCMA_nT_scatt_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_scatt_body_PREPTAG;
  return CCMA_T_scatt_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_scatt_body(void *T);
extern int CCMA_Unpack_T_scatt_body(void *T);
extern int CCMA_Sel_T_scatt_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, scatt_body);
PrePutTable(CCMA, d, double, scatt_body);
PreLoadTable(CCMA, scatt_body);
PreStoreTable(CCMA, scatt_body);
extern void CCMA_Dim_T_scatt_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_scatt_body(void *T);
extern int CCMA_Sql_T_scatt_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_scatt_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_ssmi) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "ssmi" : appearance order#371, hierarchy rank# 18, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,iterno_conv_1dvar);
  DeclareDS(pk1int,simno_conv_1dvar);
  DeclareDS(pk1int,failure_1dvar);
  DeclareDS(pk9real,epsg_1dvar);
  DeclareDS(pk1int,minim_status_1dvar);
  DeclareDS(pk9real,surfpress_1);
  DeclareDS(pk9real,skintemp_1);
  DeclareDS(pk9real,u10m_1);
  DeclareDS(pk9real,u10m_2);
  DeclareDS(pk9real,v10m_1);
  DeclareDS(pk9real,v10m_2);
  DeclareDS(pk9real,prec_st_1);
  DeclareDS(pk9real,prec_st_2);
  DeclareDS(pk9real,prec_cv_1);
  DeclareDS(pk9real,prec_cv_2);
  DeclareDS(pk9real,cost);
  DeclareDS(pk9real,sfc_rain_3d_fg);
  DeclareDS(pk9real,sfc_snow_3d_fg);
  DeclareDS(pk9real,sfc_rain_3d_an);
  DeclareDS(pk9real,sfc_snow_3d_an);
  DeclareDS(pk9real,rwp_1);
  DeclareDS(pk9real,rwp_2);
  DeclareDS(pk9real,rwp_3);
  DeclareDS(pk9real,rwp_4);
  DeclareDS(pk9real,swp_1);
  DeclareDS(pk9real,swp_2);
  DeclareDS(pk9real,swp_3);
  DeclareDS(pk9real,swp_4);
  DeclareDS(pk9real,cwp_1);
  DeclareDS(pk9real,cwp_2);
  DeclareDS(pk9real,cwp_3);
  DeclareDS(pk9real,cwp_4);
  DeclareDS(pk9real,iwp_1);
  DeclareDS(pk9real,iwp_2);
  DeclareDS(pk9real,iwp_3);
  DeclareDS(pk9real,iwp_4);
  DeclareDS(linkoffset_t,LINKOFFSET(ssmi_body));
  DeclareDS(linklen_t,LINKLEN(ssmi_body));
} TABLE_ssmi;

#endif /* defined(IS_a_TABLE_ssmi) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_ssmi)
extern const ODB_Tags *CCMA_Set_T_ssmi_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_ssmi_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_ssmi_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_ssmi_PREPTAG = NULL;
PRIVATE int CCMA_nT_ssmi_TAG = 0;
PRIVATE int CCMA_nT_ssmi_PREPTAG = 0;
PRIVATE int CCMA_nT_ssmi_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_ssmi_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_ssmi_TAG) {
    int ntag = 38;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:iterno_conv_1dvar@ssmi"; T[0].name = s; }
    { static char s[] = "pk1int:simno_conv_1dvar@ssmi"; T[1].name = s; }
    { static char s[] = "pk1int:failure_1dvar@ssmi"; T[2].name = s; }
    { static char s[] = "pk9real:epsg_1dvar@ssmi"; T[3].name = s; }
    { static char s[] = "pk1int:minim_status_1dvar@ssmi"; T[4].name = s; }
    { static char s[] = "pk9real:surfpress_1@ssmi"; T[5].name = s; }
    { static char s[] = "pk9real:skintemp_1@ssmi"; T[6].name = s; }
    { static char s[] = "pk9real:u10m_1@ssmi"; T[7].name = s; }
    { static char s[] = "pk9real:u10m_2@ssmi"; T[8].name = s; }
    { static char s[] = "pk9real:v10m_1@ssmi"; T[9].name = s; }
    { static char s[] = "pk9real:v10m_2@ssmi"; T[10].name = s; }
    { static char s[] = "pk9real:prec_st_1@ssmi"; T[11].name = s; }
    { static char s[] = "pk9real:prec_st_2@ssmi"; T[12].name = s; }
    { static char s[] = "pk9real:prec_cv_1@ssmi"; T[13].name = s; }
    { static char s[] = "pk9real:prec_cv_2@ssmi"; T[14].name = s; }
    { static char s[] = "pk9real:cost@ssmi"; T[15].name = s; }
    { static char s[] = "pk9real:sfc_rain_3d_fg@ssmi"; T[16].name = s; }
    { static char s[] = "pk9real:sfc_snow_3d_fg@ssmi"; T[17].name = s; }
    { static char s[] = "pk9real:sfc_rain_3d_an@ssmi"; T[18].name = s; }
    { static char s[] = "pk9real:sfc_snow_3d_an@ssmi"; T[19].name = s; }
    { static char s[] = "pk9real:rwp_1@ssmi"; T[20].name = s; }
    { static char s[] = "pk9real:rwp_2@ssmi"; T[21].name = s; }
    { static char s[] = "pk9real:rwp_3@ssmi"; T[22].name = s; }
    { static char s[] = "pk9real:rwp_4@ssmi"; T[23].name = s; }
    { static char s[] = "pk9real:swp_1@ssmi"; T[24].name = s; }
    { static char s[] = "pk9real:swp_2@ssmi"; T[25].name = s; }
    { static char s[] = "pk9real:swp_3@ssmi"; T[26].name = s; }
    { static char s[] = "pk9real:swp_4@ssmi"; T[27].name = s; }
    { static char s[] = "pk9real:cwp_1@ssmi"; T[28].name = s; }
    { static char s[] = "pk9real:cwp_2@ssmi"; T[29].name = s; }
    { static char s[] = "pk9real:cwp_3@ssmi"; T[30].name = s; }
    { static char s[] = "pk9real:cwp_4@ssmi"; T[31].name = s; }
    { static char s[] = "pk9real:iwp_1@ssmi"; T[32].name = s; }
    { static char s[] = "pk9real:iwp_2@ssmi"; T[33].name = s; }
    { static char s[] = "pk9real:iwp_3@ssmi"; T[34].name = s; }
    { static char s[] = "pk9real:iwp_4@ssmi"; T[35].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(ssmi_body)@ssmi"; T[36].name = s; }
    { static char s[] = "linklen_t:LINKLEN(ssmi_body)@ssmi"; T[37].name = s; }
    CCMA_T_ssmi_TAG = T;
    CCMA_nT_ssmi_TAG = ntag;
    CCMA_nT_ssmi_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_ssmi_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_ssmi_MEM;
  return CCMA_T_ssmi_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_ssmi_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_ssmi_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 563;
    { static char s[] =
      ";iterno_conv_1dvar@ssmi;simno_conv_1dvar@ssmi;failure_1dvar@ssmi;"
      "epsg_1dvar@ssmi;minim_status_1dvar@ssmi;surfpress_1@ssmi;"
      "skintemp_1@ssmi;u10m_1@ssmi;u10m_2@ssmi;v10m_1@ssmi;"
      "v10m_2@ssmi;prec_st_1@ssmi;prec_st_2@ssmi;prec_cv_1@ssmi;"
      "prec_cv_2@ssmi;cost@ssmi;sfc_rain_3d_fg@ssmi;sfc_snow_3d_fg@ssmi;"
      "sfc_rain_3d_an@ssmi;sfc_snow_3d_an@ssmi;rwp_1@ssmi;"
      "rwp_2@ssmi;rwp_3@ssmi;rwp_4@ssmi;swp_1@ssmi;swp_2@ssmi;"
      "swp_3@ssmi;swp_4@ssmi;cwp_1@ssmi;cwp_2@ssmi;cwp_3@ssmi;"
      "cwp_4@ssmi;iwp_1@ssmi;iwp_2@ssmi;iwp_3@ssmi;iwp_4@ssmi;"
      "LINKOFFSET(ssmi_body)@ssmi;LINKLEN(ssmi_body)@ssmi;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 308;
    { static char s[] =
      ";pk1int;pk1int;pk1int;pk9real;pk1int;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_ssmi_PREPTAG = T;
    CCMA_nT_ssmi_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_ssmi_PREPTAG;
  return CCMA_T_ssmi_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_ssmi(void *T);
extern int CCMA_Unpack_T_ssmi(void *T);
extern int CCMA_Sel_T_ssmi(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, ssmi);
PrePutTable(CCMA, d, double, ssmi);
PreLoadTable(CCMA, ssmi);
PreStoreTable(CCMA, ssmi);
extern void CCMA_Dim_T_ssmi(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_ssmi(void *T);
extern int CCMA_Sql_T_ssmi(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_ssmi(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_ssmi_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "ssmi_body" : appearance order#372, hierarchy rank# 380, weight = 358.000372 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,tcwv_fg);
  DeclareDS(pk9real,tcwv_fg_err);
  DeclareDS(pk9real,radcost);
  DeclareDS(pk9real,rad_obs);
  DeclareDS(pk9real,rad_fg_depar);
  DeclareDS(pk9real,rad_an_depar);
  DeclareDS(pk9real,rad_obs_err);
  DeclareDS(pk9real,rad_bias);
  DeclareDS(pk9real,rad_fg_3d);
  DeclareDS(pk9real,rad_4dan);
  DeclareDS(pk9real,frequency);
  DeclareDS(pk9real,bandwidth);
  DeclareDS(pk9real,polarisation);
  DeclareDS(pk9real,press);
  DeclareDS(pk9real,temp_1);
  DeclareDS(pk9real,temp_2);
  DeclareDS(pk9real,q_1);
  DeclareDS(pk9real,q_2);
  DeclareDS(pk9real,rain_1);
  DeclareDS(pk9real,rain_2);
  DeclareDS(pk9real,snow_1);
  DeclareDS(pk9real,snow_2);
} TABLE_ssmi_body;

#endif /* defined(IS_a_TABLE_ssmi_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_ssmi_body)
extern const ODB_Tags *CCMA_Set_T_ssmi_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_ssmi_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_ssmi_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_ssmi_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_ssmi_body_TAG = 0;
PRIVATE int CCMA_nT_ssmi_body_PREPTAG = 0;
PRIVATE int CCMA_nT_ssmi_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_ssmi_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_ssmi_body_TAG) {
    int ntag = 22;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:tcwv_fg@ssmi_body"; T[0].name = s; }
    { static char s[] = "pk9real:tcwv_fg_err@ssmi_body"; T[1].name = s; }
    { static char s[] = "pk9real:radcost@ssmi_body"; T[2].name = s; }
    { static char s[] = "pk9real:rad_obs@ssmi_body"; T[3].name = s; }
    { static char s[] = "pk9real:rad_fg_depar@ssmi_body"; T[4].name = s; }
    { static char s[] = "pk9real:rad_an_depar@ssmi_body"; T[5].name = s; }
    { static char s[] = "pk9real:rad_obs_err@ssmi_body"; T[6].name = s; }
    { static char s[] = "pk9real:rad_bias@ssmi_body"; T[7].name = s; }
    { static char s[] = "pk9real:rad_fg_3d@ssmi_body"; T[8].name = s; }
    { static char s[] = "pk9real:rad_4dan@ssmi_body"; T[9].name = s; }
    { static char s[] = "pk9real:frequency@ssmi_body"; T[10].name = s; }
    { static char s[] = "pk9real:bandwidth@ssmi_body"; T[11].name = s; }
    { static char s[] = "pk9real:polarisation@ssmi_body"; T[12].name = s; }
    { static char s[] = "pk9real:press@ssmi_body"; T[13].name = s; }
    { static char s[] = "pk9real:temp_1@ssmi_body"; T[14].name = s; }
    { static char s[] = "pk9real:temp_2@ssmi_body"; T[15].name = s; }
    { static char s[] = "pk9real:q_1@ssmi_body"; T[16].name = s; }
    { static char s[] = "pk9real:q_2@ssmi_body"; T[17].name = s; }
    { static char s[] = "pk9real:rain_1@ssmi_body"; T[18].name = s; }
    { static char s[] = "pk9real:rain_2@ssmi_body"; T[19].name = s; }
    { static char s[] = "pk9real:snow_1@ssmi_body"; T[20].name = s; }
    { static char s[] = "pk9real:snow_2@ssmi_body"; T[21].name = s; }
    CCMA_T_ssmi_body_TAG = T;
    CCMA_nT_ssmi_body_TAG = ntag;
    CCMA_nT_ssmi_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_ssmi_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_ssmi_body_MEM;
  return CCMA_T_ssmi_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_ssmi_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_ssmi_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 412;
    { static char s[] =
      ";tcwv_fg@ssmi_body;tcwv_fg_err@ssmi_body;radcost@ssmi_body;"
      "rad_obs@ssmi_body;rad_fg_depar@ssmi_body;rad_an_depar@ssmi_body;"
      "rad_obs_err@ssmi_body;rad_bias@ssmi_body;rad_fg_3d@ssmi_body;"
      "rad_4dan@ssmi_body;frequency@ssmi_body;bandwidth@ssmi_body;"
      "polarisation@ssmi_body;press@ssmi_body;temp_1@ssmi_body;"
      "temp_2@ssmi_body;q_1@ssmi_body;q_2@ssmi_body;rain_1@ssmi_body;"
      "rain_2@ssmi_body;snow_1@ssmi_body;snow_2@ssmi_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 177;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    CCMA_T_ssmi_body_PREPTAG = T;
    CCMA_nT_ssmi_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_ssmi_body_PREPTAG;
  return CCMA_T_ssmi_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_ssmi_body(void *T);
extern int CCMA_Unpack_T_ssmi_body(void *T);
extern int CCMA_Sel_T_ssmi_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, ssmi_body);
PrePutTable(CCMA, d, double, ssmi_body);
PreLoadTable(CCMA, ssmi_body);
PreStoreTable(CCMA, ssmi_body);
extern void CCMA_Dim_T_ssmi_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_ssmi_body(void *T);
extern int CCMA_Sql_T_ssmi_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_ssmi_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_smos) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "smos" : appearance order#373, hierarchy rank# 19, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,snapshot_id);
  DeclareDS(pk1int,grid_point_id);
  DeclareDS(pk9real,electron_count);
  DeclareDS(pk9real,sun_bt);
  DeclareDS(pk9real,snapshot_acc);
  DeclareDS(pk9real,rad_acc_pure);
  DeclareDS(pk9real,rad_acc_cross);
  DeclareDS(pk9real,footprint_axis_1);
  DeclareDS(pk9real,footprint_axis_2);
  DeclareDS(pk1int,polarisation);
  DeclareDS(pk9real,water_fraction);
  DeclareDS(pk9real,incidence_angle);
  DeclareDS(pk9real,faradey_rot_angle);
  DeclareDS(pk9real,pixel_rot_angle);
  DeclareDS(pk1int,info);
  DeclareDS(pk1int,snapshot_quality);
  DeclareDS(pk1int,report_tbflag);
  DeclareDS(pk9real,tbvalue);
  DeclareDS(pk1int,nobs_averaged);
  DeclareDS(pk9real,stdev_averaged);
} TABLE_smos;

#endif /* defined(IS_a_TABLE_smos) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_smos)
extern const ODB_Tags *CCMA_Set_T_smos_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_smos_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_smos_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_smos_PREPTAG = NULL;
PRIVATE int CCMA_nT_smos_TAG = 0;
PRIVATE int CCMA_nT_smos_PREPTAG = 0;
PRIVATE int CCMA_nT_smos_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_smos_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_smos_TAG) {
    int ntag = 20;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:snapshot_id@smos"; T[0].name = s; }
    { static char s[] = "pk1int:grid_point_id@smos"; T[1].name = s; }
    { static char s[] = "pk9real:electron_count@smos"; T[2].name = s; }
    { static char s[] = "pk9real:sun_bt@smos"; T[3].name = s; }
    { static char s[] = "pk9real:snapshot_acc@smos"; T[4].name = s; }
    { static char s[] = "pk9real:rad_acc_pure@smos"; T[5].name = s; }
    { static char s[] = "pk9real:rad_acc_cross@smos"; T[6].name = s; }
    { static char s[] = "pk9real:footprint_axis_1@smos"; T[7].name = s; }
    { static char s[] = "pk9real:footprint_axis_2@smos"; T[8].name = s; }
    { static char s[] = "pk1int:polarisation@smos"; T[9].name = s; }
    { static char s[] = "pk9real:water_fraction@smos"; T[10].name = s; }
    { static char s[] = "pk9real:incidence_angle@smos"; T[11].name = s; }
    { static char s[] = "pk9real:faradey_rot_angle@smos"; T[12].name = s; }
    { static char s[] = "pk9real:pixel_rot_angle@smos"; T[13].name = s; }
    { static char s[] = "pk1int:info@smos"; T[14].name = s; }
    { static char s[] = "pk1int:snapshot_quality@smos"; T[15].name = s; }
    { static char s[] = "pk1int:report_tbflag@smos"; T[16].name = s; }
    { static char s[] = "pk9real:tbvalue@smos"; T[17].name = s; }
    { static char s[] = "pk1int:nobs_averaged@smos"; T[18].name = s; }
    { static char s[] = "pk9real:stdev_averaged@smos"; T[19].name = s; }
    CCMA_T_smos_TAG = T;
    CCMA_nT_smos_TAG = ntag;
    CCMA_nT_smos_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_smos_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_smos_MEM;
  return CCMA_T_smos_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_smos_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_smos_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 374;
    { static char s[] =
      ";snapshot_id@smos;grid_point_id@smos;electron_count@smos;"
      "sun_bt@smos;snapshot_acc@smos;rad_acc_pure@smos;rad_acc_cross@smos;"
      "footprint_axis_1@smos;footprint_axis_2@smos;polarisation@smos;"
      "water_fraction@smos;incidence_angle@smos;faradey_rot_angle@smos;"
      "pixel_rot_angle@smos;info@smos;snapshot_quality@smos;"
      "report_tbflag@smos;tbvalue@smos;nobs_averaged@smos;"
      "stdev_averaged@smos;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 154;
    { static char s[] =
      ";pk1int;pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk1int;pk9real;pk9real;pk9real;pk9real;"
      "pk1int;pk1int;pk1int;pk9real;pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_smos_PREPTAG = T;
    CCMA_nT_smos_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_smos_PREPTAG;
  return CCMA_T_smos_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_smos(void *T);
extern int CCMA_Unpack_T_smos(void *T);
extern int CCMA_Sel_T_smos(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, smos);
PrePutTable(CCMA, d, double, smos);
PreLoadTable(CCMA, smos);
PreStoreTable(CCMA, smos);
extern void CCMA_Dim_T_smos(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_smos(void *T);
extern int CCMA_Sql_T_smos(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_smos(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_radar_station) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "radar_station" : appearance order#374, hierarchy rank# 20, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,ident);
  DeclareDS(string,type);
  DeclareDS(pk9real,lat);
  DeclareDS(pk9real,lon);
  DeclareDS(pk9real,stalt);
  DeclareDS(pk9real,antenht);
  DeclareDS(pk9real,beamwidth);
  DeclareDS(pk9real,frequency);
} TABLE_radar_station;

#endif /* defined(IS_a_TABLE_radar_station) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_radar_station)
extern const ODB_Tags *CCMA_Set_T_radar_station_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_radar_station_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_radar_station_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_radar_station_PREPTAG = NULL;
PRIVATE int CCMA_nT_radar_station_TAG = 0;
PRIVATE int CCMA_nT_radar_station_PREPTAG = 0;
PRIVATE int CCMA_nT_radar_station_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_radar_station_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_radar_station_TAG) {
    int ntag = 8;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:ident@radar_station"; T[0].name = s; }
    { static char s[] = "string:type@radar_station"; T[1].name = s; }
    { static char s[] = "pk9real:lat@radar_station"; T[2].name = s; }
    { static char s[] = "pk9real:lon@radar_station"; T[3].name = s; }
    { static char s[] = "pk9real:stalt@radar_station"; T[4].name = s; }
    { static char s[] = "pk9real:antenht@radar_station"; T[5].name = s; }
    { static char s[] = "pk9real:beamwidth@radar_station"; T[6].name = s; }
    { static char s[] = "pk9real:frequency@radar_station"; T[7].name = s; }
    CCMA_T_radar_station_TAG = T;
    CCMA_nT_radar_station_TAG = ntag;
    CCMA_nT_radar_station_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_radar_station_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_radar_station_MEM;
  return CCMA_T_radar_station_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_radar_station_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_radar_station_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 166;
    { static char s[] =
      ";ident@radar_station;type@radar_station;lat@radar_station;"
      "lon@radar_station;stalt@radar_station;antenht@radar_station;"
      "beamwidth@radar_station;frequency@radar_station;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 63;
    { static char s[] =
      ";pk1int;string;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    CCMA_T_radar_station_PREPTAG = T;
    CCMA_nT_radar_station_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_radar_station_PREPTAG;
  return CCMA_T_radar_station_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_radar_station(void *T);
extern int CCMA_Unpack_T_radar_station(void *T);
extern int CCMA_Sel_T_radar_station(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, radar_station);
PrePutTable(CCMA, d, double, radar_station);
PreLoadTable(CCMA, radar_station);
PreStoreTable(CCMA, radar_station);
extern void CCMA_Dim_T_radar_station(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_radar_station(void *T);
extern int CCMA_Sql_T_radar_station(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_radar_station(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_radar) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "radar" : appearance order#375, hierarchy rank# 21, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,iternoconv_1dv);
  DeclareDS(pk1int,failure_1dv);
  DeclareDS(pk9real,qmod_1);
  DeclareDS(pk9real,qmod_2);
  DeclareDS(pk9real,qmod_3);
  DeclareDS(pk9real,qmod_4);
  DeclareDS(pk9real,qmod_5);
  DeclareDS(pk9real,qmod_6);
  DeclareDS(pk9real,qmod_7);
  DeclareDS(pk9real,qmod_8);
  DeclareDS(pk9real,qmod_9);
  DeclareDS(pk9real,qmod_10);
  DeclareDS(pk9real,qmod_11);
  DeclareDS(pk9real,qmod_12);
  DeclareDS(pk9real,qmod_13);
  DeclareDS(pk9real,qmod_14);
  DeclareDS(pk9real,qmod_15);
  DeclareDS(pk9real,zsimp_1);
  DeclareDS(pk9real,zsimp_2);
  DeclareDS(pk9real,zsimp_3);
  DeclareDS(pk9real,zsimp_4);
  DeclareDS(pk9real,zsimp_5);
  DeclareDS(pk9real,zsimp_6);
  DeclareDS(pk9real,zsimp_7);
  DeclareDS(pk9real,zsimp_8);
  DeclareDS(pk9real,zsimp_9);
  DeclareDS(pk9real,zsimp_10);
  DeclareDS(pk9real,zsimp_11);
  DeclareDS(pk9real,zsimp_12);
  DeclareDS(pk9real,zsimp_13);
  DeclareDS(pk9real,zsimp_14);
  DeclareDS(pk9real,zsimp_15);
  DeclareDS(linkoffset_t,LINKOFFSET(radar_body));
  DeclareDS(linklen_t,LINKLEN(radar_body));
} TABLE_radar;

#endif /* defined(IS_a_TABLE_radar) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_radar)
extern const ODB_Tags *CCMA_Set_T_radar_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_radar_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_radar_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_radar_PREPTAG = NULL;
PRIVATE int CCMA_nT_radar_TAG = 0;
PRIVATE int CCMA_nT_radar_PREPTAG = 0;
PRIVATE int CCMA_nT_radar_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_radar_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_radar_TAG) {
    int ntag = 34;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:iternoconv_1dv@radar"; T[0].name = s; }
    { static char s[] = "pk1int:failure_1dv@radar"; T[1].name = s; }
    { static char s[] = "pk9real:qmod_1@radar"; T[2].name = s; }
    { static char s[] = "pk9real:qmod_2@radar"; T[3].name = s; }
    { static char s[] = "pk9real:qmod_3@radar"; T[4].name = s; }
    { static char s[] = "pk9real:qmod_4@radar"; T[5].name = s; }
    { static char s[] = "pk9real:qmod_5@radar"; T[6].name = s; }
    { static char s[] = "pk9real:qmod_6@radar"; T[7].name = s; }
    { static char s[] = "pk9real:qmod_7@radar"; T[8].name = s; }
    { static char s[] = "pk9real:qmod_8@radar"; T[9].name = s; }
    { static char s[] = "pk9real:qmod_9@radar"; T[10].name = s; }
    { static char s[] = "pk9real:qmod_10@radar"; T[11].name = s; }
    { static char s[] = "pk9real:qmod_11@radar"; T[12].name = s; }
    { static char s[] = "pk9real:qmod_12@radar"; T[13].name = s; }
    { static char s[] = "pk9real:qmod_13@radar"; T[14].name = s; }
    { static char s[] = "pk9real:qmod_14@radar"; T[15].name = s; }
    { static char s[] = "pk9real:qmod_15@radar"; T[16].name = s; }
    { static char s[] = "pk9real:zsimp_1@radar"; T[17].name = s; }
    { static char s[] = "pk9real:zsimp_2@radar"; T[18].name = s; }
    { static char s[] = "pk9real:zsimp_3@radar"; T[19].name = s; }
    { static char s[] = "pk9real:zsimp_4@radar"; T[20].name = s; }
    { static char s[] = "pk9real:zsimp_5@radar"; T[21].name = s; }
    { static char s[] = "pk9real:zsimp_6@radar"; T[22].name = s; }
    { static char s[] = "pk9real:zsimp_7@radar"; T[23].name = s; }
    { static char s[] = "pk9real:zsimp_8@radar"; T[24].name = s; }
    { static char s[] = "pk9real:zsimp_9@radar"; T[25].name = s; }
    { static char s[] = "pk9real:zsimp_10@radar"; T[26].name = s; }
    { static char s[] = "pk9real:zsimp_11@radar"; T[27].name = s; }
    { static char s[] = "pk9real:zsimp_12@radar"; T[28].name = s; }
    { static char s[] = "pk9real:zsimp_13@radar"; T[29].name = s; }
    { static char s[] = "pk9real:zsimp_14@radar"; T[30].name = s; }
    { static char s[] = "pk9real:zsimp_15@radar"; T[31].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(radar_body)@radar"; T[32].name = s; }
    { static char s[] = "linklen_t:LINKLEN(radar_body)@radar"; T[33].name = s; }
    CCMA_T_radar_TAG = T;
    CCMA_nT_radar_TAG = ntag;
    CCMA_nT_radar_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_radar_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_radar_MEM;
  return CCMA_T_radar_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_radar_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_radar_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 512;
    { static char s[] =
      ";iternoconv_1dv@radar;failure_1dv@radar;qmod_1@radar;"
      "qmod_2@radar;qmod_3@radar;qmod_4@radar;qmod_5@radar;"
      "qmod_6@radar;qmod_7@radar;qmod_8@radar;qmod_9@radar;"
      "qmod_10@radar;qmod_11@radar;qmod_12@radar;qmod_13@radar;"
      "qmod_14@radar;qmod_15@radar;zsimp_1@radar;zsimp_2@radar;"
      "zsimp_3@radar;zsimp_4@radar;zsimp_5@radar;zsimp_6@radar;"
      "zsimp_7@radar;zsimp_8@radar;zsimp_9@radar;zsimp_10@radar;"
      "zsimp_11@radar;zsimp_12@radar;zsimp_13@radar;zsimp_14@radar;"
      "zsimp_15@radar;LINKOFFSET(radar_body)@radar;LINKLEN(radar_body)@radar;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 278;
    { static char s[] =
      ";pk1int;pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;linkoffset_t;linklen_t;";
      T[1].longname = s; }
    CCMA_T_radar_PREPTAG = T;
    CCMA_nT_radar_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_radar_PREPTAG;
  return CCMA_T_radar_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_radar(void *T);
extern int CCMA_Unpack_T_radar(void *T);
extern int CCMA_Sel_T_radar(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, radar);
PrePutTable(CCMA, d, double, radar);
PreLoadTable(CCMA, radar);
PreStoreTable(CCMA, radar);
extern void CCMA_Dim_T_radar(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_radar(void *T);
extern int CCMA_Sql_T_radar(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_radar(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_radar_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "radar_body" : appearance order#376, hierarchy rank# 381, weight = 358.000376 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,flgdyn);
  DeclareDS(hhmmss,time);
  DeclareDS(pk9real,distance);
  DeclareDS(pk9real,elevation);
  DeclareDS(pk9real,polarisation);
  DeclareDS(pk1int,anaprop);
  DeclareDS(pk9real,reflcost);
  DeclareDS(pk9real,azimuth);
  DeclareDS(pk9real,press);
  DeclareDS(pk9real,temp_1);
  DeclareDS(pk9real,temp_2);
  DeclareDS(pk9real,q_1);
  DeclareDS(pk9real,q_2);
  DeclareDS(pk9real,temp_1dv);
  DeclareDS(pk9real,q_1dv);
} TABLE_radar_body;

#endif /* defined(IS_a_TABLE_radar_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_radar_body)
extern const ODB_Tags *CCMA_Set_T_radar_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_radar_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_radar_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_radar_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_radar_body_TAG = 0;
PRIVATE int CCMA_nT_radar_body_PREPTAG = 0;
PRIVATE int CCMA_nT_radar_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_radar_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_radar_body_TAG) {
    int ntag = 15;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:flgdyn@radar_body"; T[0].name = s; }
    { static char s[] = "hhmmss:time@radar_body"; T[1].name = s; }
    { static char s[] = "pk9real:distance@radar_body"; T[2].name = s; }
    { static char s[] = "pk9real:elevation@radar_body"; T[3].name = s; }
    { static char s[] = "pk9real:polarisation@radar_body"; T[4].name = s; }
    { static char s[] = "pk1int:anaprop@radar_body"; T[5].name = s; }
    { static char s[] = "pk9real:reflcost@radar_body"; T[6].name = s; }
    { static char s[] = "pk9real:azimuth@radar_body"; T[7].name = s; }
    { static char s[] = "pk9real:press@radar_body"; T[8].name = s; }
    { static char s[] = "pk9real:temp_1@radar_body"; T[9].name = s; }
    { static char s[] = "pk9real:temp_2@radar_body"; T[10].name = s; }
    { static char s[] = "pk9real:q_1@radar_body"; T[11].name = s; }
    { static char s[] = "pk9real:q_2@radar_body"; T[12].name = s; }
    { static char s[] = "pk9real:temp_1dv@radar_body"; T[13].name = s; }
    { static char s[] = "pk9real:q_1dv@radar_body"; T[14].name = s; }
    CCMA_T_radar_body_TAG = T;
    CCMA_nT_radar_body_TAG = ntag;
    CCMA_nT_radar_body_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_radar_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_radar_body_MEM;
  return CCMA_T_radar_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_radar_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_radar_body_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 278;
    { static char s[] =
      ";flgdyn@radar_body;time@radar_body;distance@radar_body;"
      "elevation@radar_body;polarisation@radar_body;anaprop@radar_body;"
      "reflcost@radar_body;azimuth@radar_body;press@radar_body;"
      "temp_1@radar_body;temp_2@radar_body;q_1@radar_body;"
      "q_2@radar_body;temp_1dv@radar_body;q_1dv@radar_body;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 118;
    { static char s[] =
      ";pk1int;hhmmss;pk9real;pk9real;pk9real;pk1int;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;";
      T[1].longname = s; }
    CCMA_T_radar_body_PREPTAG = T;
    CCMA_nT_radar_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_radar_body_PREPTAG;
  return CCMA_T_radar_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_radar_body(void *T);
extern int CCMA_Unpack_T_radar_body(void *T);
extern int CCMA_Sel_T_radar_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, radar_body);
PrePutTable(CCMA, d, double, radar_body);
PreLoadTable(CCMA, radar_body);
PreStoreTable(CCMA, radar_body);
extern void CCMA_Dim_T_radar_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_radar_body(void *T);
extern int CCMA_Sql_T_radar_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_radar_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_limb) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "limb" : appearance order#377, hierarchy rank# 22, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,ntan);
  DeclareDS(pk9real,ztan_1);
  DeclareDS(pk9real,ztan_2);
  DeclareDS(pk9real,ztan_3);
  DeclareDS(pk9real,ztan_4);
  DeclareDS(pk9real,ztan_5);
  DeclareDS(pk9real,ztan_6);
  DeclareDS(pk9real,ztan_7);
  DeclareDS(pk9real,ztan_8);
  DeclareDS(pk9real,ztan_9);
  DeclareDS(pk9real,ztan_10);
  DeclareDS(pk9real,ztan_11);
  DeclareDS(pk9real,ztan_12);
  DeclareDS(pk9real,ztan_13);
  DeclareDS(pk9real,ztan_14);
  DeclareDS(pk9real,ztan_15);
  DeclareDS(pk9real,ztan_16);
  DeclareDS(pk9real,ztan_17);
  DeclareDS(pk9real,ptan_1);
  DeclareDS(pk9real,ptan_2);
  DeclareDS(pk9real,ptan_3);
  DeclareDS(pk9real,ptan_4);
  DeclareDS(pk9real,ptan_5);
  DeclareDS(pk9real,ptan_6);
  DeclareDS(pk9real,ptan_7);
  DeclareDS(pk9real,ptan_8);
  DeclareDS(pk9real,ptan_9);
  DeclareDS(pk9real,ptan_10);
  DeclareDS(pk9real,ptan_11);
  DeclareDS(pk9real,ptan_12);
  DeclareDS(pk9real,ptan_13);
  DeclareDS(pk9real,ptan_14);
  DeclareDS(pk9real,ptan_15);
  DeclareDS(pk9real,ptan_16);
  DeclareDS(pk9real,ptan_17);
  DeclareDS(pk9real,thtan_1);
  DeclareDS(pk9real,thtan_2);
  DeclareDS(pk9real,thtan_3);
  DeclareDS(pk9real,thtan_4);
  DeclareDS(pk9real,thtan_5);
  DeclareDS(pk9real,thtan_6);
  DeclareDS(pk9real,thtan_7);
  DeclareDS(pk9real,thtan_8);
  DeclareDS(pk9real,thtan_9);
  DeclareDS(pk9real,thtan_10);
  DeclareDS(pk9real,thtan_11);
  DeclareDS(pk9real,thtan_12);
  DeclareDS(pk9real,thtan_13);
  DeclareDS(pk9real,thtan_14);
  DeclareDS(pk9real,thtan_15);
  DeclareDS(pk9real,thtan_16);
  DeclareDS(pk9real,thtan_17);
  DeclareDS(pk9real,cloud_index_1);
  DeclareDS(pk9real,cloud_index_2);
  DeclareDS(pk9real,cloud_index_3);
  DeclareDS(pk9real,cloud_index_4);
  DeclareDS(pk9real,cloud_index_5);
  DeclareDS(pk9real,cloud_index_6);
  DeclareDS(pk9real,cloud_index_7);
  DeclareDS(pk9real,cloud_index_8);
  DeclareDS(pk9real,cloud_index_9);
  DeclareDS(pk9real,cloud_index_10);
  DeclareDS(pk9real,cloud_index_11);
  DeclareDS(pk9real,cloud_index_12);
  DeclareDS(pk9real,cloud_index_13);
  DeclareDS(pk9real,cloud_index_14);
  DeclareDS(pk9real,cloud_index_15);
  DeclareDS(pk9real,cloud_index_16);
  DeclareDS(pk9real,cloud_index_17);
  DeclareDS(pk9real,window_rad_1);
  DeclareDS(pk9real,window_rad_2);
  DeclareDS(pk9real,window_rad_3);
  DeclareDS(pk9real,window_rad_4);
  DeclareDS(pk9real,window_rad_5);
  DeclareDS(pk9real,window_rad_6);
  DeclareDS(pk9real,window_rad_7);
  DeclareDS(pk9real,window_rad_8);
  DeclareDS(pk9real,window_rad_9);
  DeclareDS(pk9real,window_rad_10);
  DeclareDS(pk9real,window_rad_11);
  DeclareDS(pk9real,window_rad_12);
  DeclareDS(pk9real,window_rad_13);
  DeclareDS(pk9real,window_rad_14);
  DeclareDS(pk9real,window_rad_15);
  DeclareDS(pk9real,window_rad_16);
  DeclareDS(pk9real,window_rad_17);
} TABLE_limb;

#endif /* defined(IS_a_TABLE_limb) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_limb)
extern const ODB_Tags *CCMA_Set_T_limb_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_limb_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_limb_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_limb_PREPTAG = NULL;
PRIVATE int CCMA_nT_limb_TAG = 0;
PRIVATE int CCMA_nT_limb_PREPTAG = 0;
PRIVATE int CCMA_nT_limb_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_limb_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_limb_TAG) {
    int ntag = 86;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:ntan@limb"; T[0].name = s; }
    { static char s[] = "pk9real:ztan_1@limb"; T[1].name = s; }
    { static char s[] = "pk9real:ztan_2@limb"; T[2].name = s; }
    { static char s[] = "pk9real:ztan_3@limb"; T[3].name = s; }
    { static char s[] = "pk9real:ztan_4@limb"; T[4].name = s; }
    { static char s[] = "pk9real:ztan_5@limb"; T[5].name = s; }
    { static char s[] = "pk9real:ztan_6@limb"; T[6].name = s; }
    { static char s[] = "pk9real:ztan_7@limb"; T[7].name = s; }
    { static char s[] = "pk9real:ztan_8@limb"; T[8].name = s; }
    { static char s[] = "pk9real:ztan_9@limb"; T[9].name = s; }
    { static char s[] = "pk9real:ztan_10@limb"; T[10].name = s; }
    { static char s[] = "pk9real:ztan_11@limb"; T[11].name = s; }
    { static char s[] = "pk9real:ztan_12@limb"; T[12].name = s; }
    { static char s[] = "pk9real:ztan_13@limb"; T[13].name = s; }
    { static char s[] = "pk9real:ztan_14@limb"; T[14].name = s; }
    { static char s[] = "pk9real:ztan_15@limb"; T[15].name = s; }
    { static char s[] = "pk9real:ztan_16@limb"; T[16].name = s; }
    { static char s[] = "pk9real:ztan_17@limb"; T[17].name = s; }
    { static char s[] = "pk9real:ptan_1@limb"; T[18].name = s; }
    { static char s[] = "pk9real:ptan_2@limb"; T[19].name = s; }
    { static char s[] = "pk9real:ptan_3@limb"; T[20].name = s; }
    { static char s[] = "pk9real:ptan_4@limb"; T[21].name = s; }
    { static char s[] = "pk9real:ptan_5@limb"; T[22].name = s; }
    { static char s[] = "pk9real:ptan_6@limb"; T[23].name = s; }
    { static char s[] = "pk9real:ptan_7@limb"; T[24].name = s; }
    { static char s[] = "pk9real:ptan_8@limb"; T[25].name = s; }
    { static char s[] = "pk9real:ptan_9@limb"; T[26].name = s; }
    { static char s[] = "pk9real:ptan_10@limb"; T[27].name = s; }
    { static char s[] = "pk9real:ptan_11@limb"; T[28].name = s; }
    { static char s[] = "pk9real:ptan_12@limb"; T[29].name = s; }
    { static char s[] = "pk9real:ptan_13@limb"; T[30].name = s; }
    { static char s[] = "pk9real:ptan_14@limb"; T[31].name = s; }
    { static char s[] = "pk9real:ptan_15@limb"; T[32].name = s; }
    { static char s[] = "pk9real:ptan_16@limb"; T[33].name = s; }
    { static char s[] = "pk9real:ptan_17@limb"; T[34].name = s; }
    { static char s[] = "pk9real:thtan_1@limb"; T[35].name = s; }
    { static char s[] = "pk9real:thtan_2@limb"; T[36].name = s; }
    { static char s[] = "pk9real:thtan_3@limb"; T[37].name = s; }
    { static char s[] = "pk9real:thtan_4@limb"; T[38].name = s; }
    { static char s[] = "pk9real:thtan_5@limb"; T[39].name = s; }
    { static char s[] = "pk9real:thtan_6@limb"; T[40].name = s; }
    { static char s[] = "pk9real:thtan_7@limb"; T[41].name = s; }
    { static char s[] = "pk9real:thtan_8@limb"; T[42].name = s; }
    { static char s[] = "pk9real:thtan_9@limb"; T[43].name = s; }
    { static char s[] = "pk9real:thtan_10@limb"; T[44].name = s; }
    { static char s[] = "pk9real:thtan_11@limb"; T[45].name = s; }
    { static char s[] = "pk9real:thtan_12@limb"; T[46].name = s; }
    { static char s[] = "pk9real:thtan_13@limb"; T[47].name = s; }
    { static char s[] = "pk9real:thtan_14@limb"; T[48].name = s; }
    { static char s[] = "pk9real:thtan_15@limb"; T[49].name = s; }
    { static char s[] = "pk9real:thtan_16@limb"; T[50].name = s; }
    { static char s[] = "pk9real:thtan_17@limb"; T[51].name = s; }
    { static char s[] = "pk9real:cloud_index_1@limb"; T[52].name = s; }
    { static char s[] = "pk9real:cloud_index_2@limb"; T[53].name = s; }
    { static char s[] = "pk9real:cloud_index_3@limb"; T[54].name = s; }
    { static char s[] = "pk9real:cloud_index_4@limb"; T[55].name = s; }
    { static char s[] = "pk9real:cloud_index_5@limb"; T[56].name = s; }
    { static char s[] = "pk9real:cloud_index_6@limb"; T[57].name = s; }
    { static char s[] = "pk9real:cloud_index_7@limb"; T[58].name = s; }
    { static char s[] = "pk9real:cloud_index_8@limb"; T[59].name = s; }
    { static char s[] = "pk9real:cloud_index_9@limb"; T[60].name = s; }
    { static char s[] = "pk9real:cloud_index_10@limb"; T[61].name = s; }
    { static char s[] = "pk9real:cloud_index_11@limb"; T[62].name = s; }
    { static char s[] = "pk9real:cloud_index_12@limb"; T[63].name = s; }
    { static char s[] = "pk9real:cloud_index_13@limb"; T[64].name = s; }
    { static char s[] = "pk9real:cloud_index_14@limb"; T[65].name = s; }
    { static char s[] = "pk9real:cloud_index_15@limb"; T[66].name = s; }
    { static char s[] = "pk9real:cloud_index_16@limb"; T[67].name = s; }
    { static char s[] = "pk9real:cloud_index_17@limb"; T[68].name = s; }
    { static char s[] = "pk9real:window_rad_1@limb"; T[69].name = s; }
    { static char s[] = "pk9real:window_rad_2@limb"; T[70].name = s; }
    { static char s[] = "pk9real:window_rad_3@limb"; T[71].name = s; }
    { static char s[] = "pk9real:window_rad_4@limb"; T[72].name = s; }
    { static char s[] = "pk9real:window_rad_5@limb"; T[73].name = s; }
    { static char s[] = "pk9real:window_rad_6@limb"; T[74].name = s; }
    { static char s[] = "pk9real:window_rad_7@limb"; T[75].name = s; }
    { static char s[] = "pk9real:window_rad_8@limb"; T[76].name = s; }
    { static char s[] = "pk9real:window_rad_9@limb"; T[77].name = s; }
    { static char s[] = "pk9real:window_rad_10@limb"; T[78].name = s; }
    { static char s[] = "pk9real:window_rad_11@limb"; T[79].name = s; }
    { static char s[] = "pk9real:window_rad_12@limb"; T[80].name = s; }
    { static char s[] = "pk9real:window_rad_13@limb"; T[81].name = s; }
    { static char s[] = "pk9real:window_rad_14@limb"; T[82].name = s; }
    { static char s[] = "pk9real:window_rad_15@limb"; T[83].name = s; }
    { static char s[] = "pk9real:window_rad_16@limb"; T[84].name = s; }
    { static char s[] = "pk9real:window_rad_17@limb"; T[85].name = s; }
    CCMA_T_limb_TAG = T;
    CCMA_nT_limb_TAG = ntag;
    CCMA_nT_limb_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_limb_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_limb_MEM;
  return CCMA_T_limb_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_limb_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_limb_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 1309;
    { static char s[] =
      ";ntan@limb;ztan_1@limb;ztan_2@limb;ztan_3@limb;ztan_4@limb;"
      "ztan_5@limb;ztan_6@limb;ztan_7@limb;ztan_8@limb;ztan_9@limb;"
      "ztan_10@limb;ztan_11@limb;ztan_12@limb;ztan_13@limb;"
      "ztan_14@limb;ztan_15@limb;ztan_16@limb;ztan_17@limb;"
      "ptan_1@limb;ptan_2@limb;ptan_3@limb;ptan_4@limb;ptan_5@limb;"
      "ptan_6@limb;ptan_7@limb;ptan_8@limb;ptan_9@limb;ptan_10@limb;"
      "ptan_11@limb;ptan_12@limb;ptan_13@limb;ptan_14@limb;"
      "ptan_15@limb;ptan_16@limb;ptan_17@limb;thtan_1@limb;"
      "thtan_2@limb;thtan_3@limb;thtan_4@limb;thtan_5@limb;"
      "thtan_6@limb;thtan_7@limb;thtan_8@limb;thtan_9@limb;"
      "thtan_10@limb;thtan_11@limb;thtan_12@limb;thtan_13@limb;"
      "thtan_14@limb;thtan_15@limb;thtan_16@limb;thtan_17@limb;"
      "cloud_index_1@limb;cloud_index_2@limb;cloud_index_3@limb;"
      "cloud_index_4@limb;cloud_index_5@limb;cloud_index_6@limb;"
      "cloud_index_7@limb;cloud_index_8@limb;cloud_index_9@limb;"
      "cloud_index_10@limb;cloud_index_11@limb;cloud_index_12@limb;"
      "cloud_index_13@limb;cloud_index_14@limb;cloud_index_15@limb;"
      "cloud_index_16@limb;cloud_index_17@limb;window_rad_1@limb;"
      "window_rad_2@limb;window_rad_3@limb;window_rad_4@limb;"
      "window_rad_5@limb;window_rad_6@limb;window_rad_7@limb;"
      "window_rad_8@limb;window_rad_9@limb;window_rad_10@limb;"
      "window_rad_11@limb;window_rad_12@limb;window_rad_13@limb;"
      "window_rad_14@limb;window_rad_15@limb;window_rad_16@limb;"
      "window_rad_17@limb;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 688;
    { static char s[] =
      ";pk1int;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_limb_PREPTAG = T;
    CCMA_nT_limb_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_limb_PREPTAG;
  return CCMA_T_limb_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_limb(void *T);
extern int CCMA_Unpack_T_limb(void *T);
extern int CCMA_Sel_T_limb(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, limb);
PrePutTable(CCMA, d, double, limb);
PreLoadTable(CCMA, limb);
PreStoreTable(CCMA, limb);
extern void CCMA_Dim_T_limb(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_limb(void *T);
extern int CCMA_Sql_T_limb(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_limb(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_body) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "body" : appearance order#378, hierarchy rank# 382, weight = 358.000378 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk1int,entryno);
  DeclareDS(pk9real,obsvalue);
  DeclareDS(pk1int,varno);
  DeclareDS(pk1int,vertco_type);
  DeclareDS(pk9real,vertco_reference_1);
  DeclareDS(pk9real,vertco_reference_2);
  DeclareDS(Bitfield,datum_anflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_status); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event1); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_rdbflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_blacklist); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(Bitfield,datum_event2); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk1int,varbc_ix);
  DeclareDS(pk9real,biascorr);
  DeclareDS(pk9real,biascorr_fg);
  DeclareDS(pk9real,tbcorr);
  DeclareDS(pk9real,bias_volatility);
  DeclareDS(pk9real,wdeff_bcorr);
  DeclareDS(pk9real,an_depar);
  DeclareDS(pk9real,fg_depar);
  DeclareDS(pk9real,actual_depar);
  DeclareDS(pk9real,actual_ndbiascorr);
  DeclareDS(pk9real,qc_a);
  DeclareDS(pk9real,qc_l);
  DeclareDS(pk9real,qc_pge);
  DeclareDS(pk9real,fc_sens_obs);
  DeclareDS(pk9real,an_sens_obs);
  DeclareDS(pk9real,jacobian_peak);
  DeclareDS(pk9real,jacobian_peakl);
  DeclareDS(pk9real,jacobian_hpeak);
  DeclareDS(pk9real,jacobian_hpeakl);
  DeclareDS(pk1int,mf_vertco_type);
  DeclareDS(pk9real,mf_log_p);
  DeclareDS(pk9real,mf_stddev);
  DeclareDS(pk1int,nlayer);
} TABLE_body;

#endif /* defined(IS_a_TABLE_body) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_body)
extern const ODB_Tags *CCMA_Set_T_body_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_body_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_body_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_body_PREPTAG = NULL;
PRIVATE int CCMA_nT_body_TAG = 0;
PRIVATE int CCMA_nT_body_PREPTAG = 0;
PRIVATE int CCMA_nT_body_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_body_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_body_TAG) {
    int ntag = 35;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk1int:entryno@body"; T[0].name = s; }
    { static char s[] = "pk9real:obsvalue@body"; T[1].name = s; }
    { static char s[] = "pk1int:varno@body"; T[2].name = s; }
    { static char s[] = "pk1int:vertco_type@body"; T[3].name = s; }
    { static char s[] = "pk9real:vertco_reference_1@body"; T[4].name = s; }
    { static char s[] = "pk9real:vertco_reference_2@body"; T[5].name = s; }
    { static char s[] = "Bitfield:datum_anflag@body"; T[6].name = s; }
    T[6].nmem = 14;
ALLOC(T[6].memb, 14);
      { static char s[] = "final 4"; T[6].memb[0] = s; }
      { static char s[] = "fg 4"; T[6].memb[1] = s; }
      { static char s[] = "depar 4"; T[6].memb[2] = s; }
      { static char s[] = "varqc 4"; T[6].memb[3] = s; }
      { static char s[] = "blacklist 4"; T[6].memb[4] = s; }
      { static char s[] = "ups 1"; T[6].memb[5] = s; }
      { static char s[] = "uvt 1"; T[6].memb[6] = s; }
      { static char s[] = "uhu 1"; T[6].memb[7] = s; }
      { static char s[] = "ut2 1"; T[6].memb[8] = s; }
      { static char s[] = "uh2 1"; T[6].memb[9] = s; }
      { static char s[] = "uv1 1"; T[6].memb[10] = s; }
      { static char s[] = "urr 1"; T[6].memb[11] = s; }
      { static char s[] = "usn 1"; T[6].memb[12] = s; }
      { static char s[] = "usst 1"; T[6].memb[13] = s; }
    { static char s[] = "Bitfield:datum_status@body"; T[7].name = s; }
    T[7].nmem = 5;
ALLOC(T[7].memb, 5);
      { static char s[] = "active 1"; T[7].memb[0] = s; }
      { static char s[] = "passive 1"; T[7].memb[1] = s; }
      { static char s[] = "rejected 1"; T[7].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[7].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[7].memb[4] = s; }
    { static char s[] = "Bitfield:datum_event1@body"; T[8].name = s; }
    T[8].nmem = 29;
ALLOC(T[8].memb, 29);
      { static char s[] = "vertco_missing 1"; T[8].memb[0] = s; }
      { static char s[] = "obsvalue_missing 1"; T[8].memb[1] = s; }
      { static char s[] = "fg_missing 1"; T[8].memb[2] = s; }
      { static char s[] = "rdb_rejected 1"; T[8].memb[3] = s; }
      { static char s[] = "assim_cld_flag 1"; T[8].memb[4] = s; }
      { static char s[] = "bad_practice 1"; T[8].memb[5] = s; }
      { static char s[] = "vertpos_outrange 1"; T[8].memb[6] = s; }
      { static char s[] = "fg2big 1"; T[8].memb[7] = s; }
      { static char s[] = "depar2big 1"; T[8].memb[8] = s; }
      { static char s[] = "obs_error2big 1"; T[8].memb[9] = s; }
      { static char s[] = "datum_redundant 1"; T[8].memb[10] = s; }
      { static char s[] = "level_redundant 1"; T[8].memb[11] = s; }
      { static char s[] = "not_analysis_varno 1"; T[8].memb[12] = s; }
      { static char s[] = "duplicate 1"; T[8].memb[13] = s; }
      { static char s[] = "levels2many 1"; T[8].memb[14] = s; }
      { static char s[] = "level_selection 1"; T[8].memb[15] = s; }
      { static char s[] = "vertco_consistency 1"; T[8].memb[16] = s; }
      { static char s[] = "vertco_type_changed 1"; T[8].memb[17] = s; }
      { static char s[] = "combined_flagging 1"; T[8].memb[18] = s; }
      { static char s[] = "report_rejected 1"; T[8].memb[19] = s; }
      { static char s[] = "varqc_performed 1"; T[8].memb[20] = s; }
      { static char s[] = "obserror_increased 1"; T[8].memb[21] = s; }
      { static char s[] = "contam_cld_flag 1"; T[8].memb[22] = s; }
      { static char s[] = "contam_rain_flag 1"; T[8].memb[23] = s; }
      { static char s[] = "contam_aerosol_flag 1"; T[8].memb[24] = s; }
      { static char s[] = "bad_emissivity 1"; T[8].memb[25] = s; }
      { static char s[] = "model_cld_flag 1"; T[8].memb[26] = s; }
      { static char s[] = "contam_trgas_flag 1"; T[8].memb[27] = s; }
      { static char s[] = "land_sensitivity 1"; T[8].memb[28] = s; }
    { static char s[] = "Bitfield:datum_rdbflag@body"; T[9].name = s; }
    T[9].nmem = 15;
ALLOC(T[9].memb, 15);
      { static char s[] = "press_humon 1"; T[9].memb[0] = s; }
      { static char s[] = "press_qcsub 1"; T[9].memb[1] = s; }
      { static char s[] = "press_override 1"; T[9].memb[2] = s; }
      { static char s[] = "press_flag 2"; T[9].memb[3] = s; }
      { static char s[] = "press_hqc_flag 1"; T[9].memb[4] = s; }
      { static char s[] = "press_judged_prev_an 2"; T[9].memb[5] = s; }
      { static char s[] = "press_used_prev_an 1"; T[9].memb[6] = s; }
      { static char s[] = "_press_unused_6 6"; T[9].memb[7] = s; }
      { static char s[] = "varno_humon 1"; T[9].memb[8] = s; }
      { static char s[] = "varno_qcsub 1"; T[9].memb[9] = s; }
      { static char s[] = "varno_override 1"; T[9].memb[10] = s; }
      { static char s[] = "varno_flag 2"; T[9].memb[11] = s; }
      { static char s[] = "varno_hqc_flag 1"; T[9].memb[12] = s; }
      { static char s[] = "varno_judged_prev_an 2"; T[9].memb[13] = s; }
      { static char s[] = "varno_used_prev_an 1"; T[9].memb[14] = s; }
    { static char s[] = "Bitfield:datum_blacklist@body"; T[10].name = s; }
    T[10].nmem = 15;
ALLOC(T[10].memb, 15);
      { static char s[] = "varno 1"; T[10].memb[0] = s; }
      { static char s[] = "vertco_type 1"; T[10].memb[1] = s; }
      { static char s[] = "press 1"; T[10].memb[2] = s; }
      { static char s[] = "press_rl 1"; T[10].memb[3] = s; }
      { static char s[] = "ppcode 1"; T[10].memb[4] = s; }
      { static char s[] = "obsvalue 1"; T[10].memb[5] = s; }
      { static char s[] = "fg_depar 1"; T[10].memb[6] = s; }
      { static char s[] = "obs_error 1"; T[10].memb[7] = s; }
      { static char s[] = "fg_error 1"; T[10].memb[8] = s; }
      { static char s[] = "winchan_dep 1"; T[10].memb[9] = s; }
      { static char s[] = "obs_t 1"; T[10].memb[10] = s; }
      { static char s[] = "elevation 1"; T[10].memb[11] = s; }
      { static char s[] = "winchan_dep2 1"; T[10].memb[12] = s; }
      { static char s[] = "tausfc 1"; T[10].memb[13] = s; }
      { static char s[] = "csr_pclear 1"; T[10].memb[14] = s; }
    { static char s[] = "Bitfield:datum_event2@body"; T[11].name = s; }
    { static char s[] = "pk1int:varbc_ix@body"; T[12].name = s; }
    { static char s[] = "pk9real:biascorr@body"; T[13].name = s; }
    { static char s[] = "pk9real:biascorr_fg@body"; T[14].name = s; }
    { static char s[] = "pk9real:tbcorr@body"; T[15].name = s; }
    { static char s[] = "pk9real:bias_volatility@body"; T[16].name = s; }
    { static char s[] = "pk9real:wdeff_bcorr@body"; T[17].name = s; }
    { static char s[] = "pk9real:an_depar@body"; T[18].name = s; }
    { static char s[] = "pk9real:fg_depar@body"; T[19].name = s; }
    { static char s[] = "pk9real:actual_depar@body"; T[20].name = s; }
    { static char s[] = "pk9real:actual_ndbiascorr@body"; T[21].name = s; }
    { static char s[] = "pk9real:qc_a@body"; T[22].name = s; }
    { static char s[] = "pk9real:qc_l@body"; T[23].name = s; }
    { static char s[] = "pk9real:qc_pge@body"; T[24].name = s; }
    { static char s[] = "pk9real:fc_sens_obs@body"; T[25].name = s; }
    { static char s[] = "pk9real:an_sens_obs@body"; T[26].name = s; }
    { static char s[] = "pk9real:jacobian_peak@body"; T[27].name = s; }
    { static char s[] = "pk9real:jacobian_peakl@body"; T[28].name = s; }
    { static char s[] = "pk9real:jacobian_hpeak@body"; T[29].name = s; }
    { static char s[] = "pk9real:jacobian_hpeakl@body"; T[30].name = s; }
    { static char s[] = "pk1int:mf_vertco_type@body"; T[31].name = s; }
    { static char s[] = "pk9real:mf_log_p@body"; T[32].name = s; }
    { static char s[] = "pk9real:mf_stddev@body"; T[33].name = s; }
    { static char s[] = "pk1int:nlayer@body"; T[34].name = s; }
    CCMA_T_body_TAG = T;
    CCMA_nT_body_TAG = ntag;
    CCMA_nT_body_MEM = 78;
  }
  if (ntag_out) *ntag_out = CCMA_nT_body_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_body_MEM;
  return CCMA_T_body_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_body_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_body_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 587;
    { static char s[] =
      ";entryno@body;obsvalue@body;varno@body;vertco_type@body;"
      "vertco_reference_1@body;vertco_reference_2@body;datum_anflag@body;"
      "datum_status@body;datum_event1@body;datum_rdbflag@body;"
      "datum_blacklist@body;datum_event2@body;varbc_ix@body;"
      "biascorr@body;biascorr_fg@body;tbcorr@body;bias_volatility@body;"
      "wdeff_bcorr@body;an_depar@body;fg_depar@body;actual_depar@body;"
      "actual_ndbiascorr@body;qc_a@body;qc_l@body;qc_pge@body;"
      "fc_sens_obs@body;an_sens_obs@body;jacobian_peak@body;"
      "jacobian_peakl@body;jacobian_hpeak@body;jacobian_hpeakl@body;"
      "mf_vertco_type@body;mf_log_p@body;mf_stddev@body;nlayer@body;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 281;
    { static char s[] =
      ";pk1int;pk9real;pk1int;pk1int;pk9real;pk9real;Bitfield;"
      "Bitfield;Bitfield;Bitfield;Bitfield;Bitfield;pk1int;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk1int;pk9real;pk9real;"
      "pk1int;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 2980;
    { static char s[] =
      ";entryno@body;obsvalue@body;varno@body;vertco_type@body;"
      "vertco_reference_1@body;vertco_reference_2@body;datum_anflag@body;"
      "datum_status@body;datum_event1@body;datum_rdbflag@body;"
      "datum_blacklist@body;datum_event2@body;varbc_ix@body;"
      "biascorr@body;biascorr_fg@body;tbcorr@body;bias_volatility@body;"
      "wdeff_bcorr@body;an_depar@body;fg_depar@body;actual_depar@body;"
      "actual_ndbiascorr@body;qc_a@body;qc_l@body;qc_pge@body;"
      "fc_sens_obs@body;an_sens_obs@body;jacobian_peak@body;"
      "jacobian_peakl@body;jacobian_hpeak@body;jacobian_hpeakl@body;"
      "mf_vertco_type@body;mf_log_p@body;mf_stddev@body;nlayer@body;"
      "datum_anflag.final@body;datum_anflag.fg@body;datum_anflag.depar@body;"
      "datum_anflag.varqc@body;datum_anflag.blacklist@body;"
      "datum_anflag.ups@body;datum_anflag.uvt@body;datum_anflag.uhu@body;"
      "datum_anflag.ut2@body;datum_anflag.uh2@body;datum_anflag.uv1@body;"
      "datum_anflag.urr@body;datum_anflag.usn@body;datum_anflag.usst@body;"
      "datum_status.active@body;datum_status.passive@body;"
      "datum_status.rejected@body;datum_status.blacklisted@body;"
      "datum_status.use_emiskf_only@body;datum_event1.vertco_missing@body;"
      "datum_event1.obsvalue_missing@body;datum_event1.fg_missing@body;"
      "datum_event1.rdb_rejected@body;datum_event1.assim_cld_flag@body;"
      "datum_event1.bad_practice@body;datum_event1.vertpos_outrange@body;"
      "datum_event1.fg2big@body;datum_event1.depar2big@body;"
      "datum_event1.obs_error2big@body;datum_event1.datum_redundant@body;"
      "datum_event1.level_redundant@body;datum_event1.not_analysis_varno@body;"
      "datum_event1.duplicate@body;datum_event1.levels2many@body;"
      "datum_event1.level_selection@body;datum_event1.vertco_consistency@body;"
      "datum_event1.vertco_type_changed@body;datum_event1.combined_flagging@body;"
      "datum_event1.report_rejected@body;datum_event1.varqc_performed@body;"
      "datum_event1.obserror_increased@body;datum_event1.contam_cld_flag@body;"
      "datum_event1.contam_rain_flag@body;datum_event1.contam_aerosol_flag@body;"
      "datum_event1.bad_emissivity@body;datum_event1.model_cld_flag@body;"
      "datum_event1.contam_trgas_flag@body;datum_event1.land_sensitivity@body;"
      "datum_rdbflag.press_humon@body;datum_rdbflag.press_qcsub@body;"
      "datum_rdbflag.press_override@body;datum_rdbflag.press_flag@body;"
      "datum_rdbflag.press_hqc_flag@body;datum_rdbflag.press_judged_prev_an@body;"
      "datum_rdbflag.press_used_prev_an@body;datum_rdbflag._press_unused_6@body;"
      "datum_rdbflag.varno_humon@body;datum_rdbflag.varno_qcsub@body;"
      "datum_rdbflag.varno_override@body;datum_rdbflag.varno_flag@body;"
      "datum_rdbflag.varno_hqc_flag@body;datum_rdbflag.varno_judged_prev_an@body;"
      "datum_rdbflag.varno_used_prev_an@body;datum_blacklist.varno@body;"
      "datum_blacklist.vertco_type@body;datum_blacklist.press@body;"
      "datum_blacklist.press_rl@body;datum_blacklist.ppcode@body;"
      "datum_blacklist.obsvalue@body;datum_blacklist.fg_depar@body;"
      "datum_blacklist.obs_error@body;datum_blacklist.fg_error@body;"
      "datum_blacklist.winchan_dep@body;datum_blacklist.obs_t@body;"
      "datum_blacklist.elevation@body;datum_blacklist.winchan_dep2@body;"
      "datum_blacklist.tausfc@body;datum_blacklist.csr_pclear@body;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 671;
    { static char s[] =
      ";pk1int;pk9real;pk1int;pk1int;pk9real;pk9real;Bitfield;"
      "Bitfield;Bitfield;Bitfield;Bitfield;Bitfield;pk1int;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk1int;pk9real;pk9real;"
      "pk1int;bit4;bit4;bit4;bit4;bit4;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit2;bit1;bit2;bit1;bit6;bit1;bit1;bit1;"
      "bit2;bit1;bit2;bit1;bit1;bit1;bit1;bit1;bit1;bit1;"
      "bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_body_PREPTAG = T;
    CCMA_nT_body_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_body_PREPTAG;
  return CCMA_T_body_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_body(void *T);
extern int CCMA_Unpack_T_body(void *T);
extern int CCMA_Sel_T_body(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, body);
PrePutTable(CCMA, d, double, body);
PreLoadTable(CCMA, body);
PreStoreTable(CCMA, body);
extern void CCMA_Dim_T_body(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_body(void *T);
extern int CCMA_Sql_T_body(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_body(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_errstat) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "errstat" : appearance order#379, hierarchy rank# 383, weight = 358.000379 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,final_obs_error);
  DeclareDS(pk9real,obs_error);
  DeclareDS(pk9real,repres_error);
  DeclareDS(pk9real,pers_error);
  DeclareDS(pk9real,fg_error);
  DeclareDS(pk9real,eda_spread);
  DeclareDS(pk9real,obs_ak_error);
  DeclareDS(pk9real,obs_corr_ev_1);
  DeclareDS(pk1int,obs_corr_mask);
  DeclareDS(pk9real,obs_corr_diag_1);
} TABLE_errstat;

#endif /* defined(IS_a_TABLE_errstat) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_errstat)
extern const ODB_Tags *CCMA_Set_T_errstat_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_errstat_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_errstat_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_errstat_PREPTAG = NULL;
PRIVATE int CCMA_nT_errstat_TAG = 0;
PRIVATE int CCMA_nT_errstat_PREPTAG = 0;
PRIVATE int CCMA_nT_errstat_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_errstat_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_errstat_TAG) {
    int ntag = 10;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:final_obs_error@errstat"; T[0].name = s; }
    { static char s[] = "pk9real:obs_error@errstat"; T[1].name = s; }
    { static char s[] = "pk9real:repres_error@errstat"; T[2].name = s; }
    { static char s[] = "pk9real:pers_error@errstat"; T[3].name = s; }
    { static char s[] = "pk9real:fg_error@errstat"; T[4].name = s; }
    { static char s[] = "pk9real:eda_spread@errstat"; T[5].name = s; }
    { static char s[] = "pk9real:obs_ak_error@errstat"; T[6].name = s; }
    { static char s[] = "pk9real:obs_corr_ev_1@errstat"; T[7].name = s; }
    { static char s[] = "pk1int:obs_corr_mask@errstat"; T[8].name = s; }
    { static char s[] = "pk9real:obs_corr_diag_1@errstat"; T[9].name = s; }
    CCMA_T_errstat_TAG = T;
    CCMA_nT_errstat_TAG = ntag;
    CCMA_nT_errstat_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_errstat_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_errstat_MEM;
  return CCMA_T_errstat_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_errstat_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_errstat_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 208;
    { static char s[] =
      ";final_obs_error@errstat;obs_error@errstat;repres_error@errstat;"
      "pers_error@errstat;fg_error@errstat;eda_spread@errstat;"
      "obs_ak_error@errstat;obs_corr_ev_1@errstat;obs_corr_mask@errstat;"
      "obs_corr_diag_1@errstat;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 80;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk1int;pk9real;";
      T[1].longname = s; }
    CCMA_T_errstat_PREPTAG = T;
    CCMA_nT_errstat_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_errstat_PREPTAG;
  return CCMA_T_errstat_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_errstat(void *T);
extern int CCMA_Unpack_T_errstat(void *T);
extern int CCMA_Sel_T_errstat(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, errstat);
PrePutTable(CCMA, d, double, errstat);
PreLoadTable(CCMA, errstat);
PreStoreTable(CCMA, errstat);
extern void CCMA_Dim_T_errstat(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_errstat(void *T);
extern int CCMA_Sql_T_errstat(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_errstat(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_update_1) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "update_1" : appearance order#380, hierarchy rank# 384, weight = 358.000380 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,hires);
  DeclareDS(pk9real,lores);
  DeclareDS(pk1int,datum_tbflag_hires);
  DeclareDS(Bitfield,datum_status_hires); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obs_diags_1);
  DeclareDS(pk9real,obs_diags_2);
  DeclareDS(pk9real,obs_diags_3);
} TABLE_update_1;

#endif /* defined(IS_a_TABLE_update_1) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_update_1)
extern const ODB_Tags *CCMA_Set_T_update_1_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_update_1_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_update_1_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_update_1_PREPTAG = NULL;
PRIVATE int CCMA_nT_update_1_TAG = 0;
PRIVATE int CCMA_nT_update_1_PREPTAG = 0;
PRIVATE int CCMA_nT_update_1_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_update_1_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_update_1_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:hires@update_1"; T[0].name = s; }
    { static char s[] = "pk9real:lores@update_1"; T[1].name = s; }
    { static char s[] = "pk1int:datum_tbflag_hires@update_1"; T[2].name = s; }
    { static char s[] = "Bitfield:datum_status_hires@update_1"; T[3].name = s; }
    T[3].nmem = 5;
ALLOC(T[3].memb, 5);
      { static char s[] = "active 1"; T[3].memb[0] = s; }
      { static char s[] = "passive 1"; T[3].memb[1] = s; }
      { static char s[] = "rejected 1"; T[3].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[3].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[3].memb[4] = s; }
    { static char s[] = "pk9real:obs_diags_1@update_1"; T[4].name = s; }
    { static char s[] = "pk9real:obs_diags_2@update_1"; T[5].name = s; }
    { static char s[] = "pk9real:obs_diags_3@update_1"; T[6].name = s; }
    CCMA_T_update_1_TAG = T;
    CCMA_nT_update_1_TAG = ntag;
    CCMA_nT_update_1_MEM = 5;
  }
  if (ntag_out) *ntag_out = CCMA_nT_update_1_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_update_1_MEM;
  return CCMA_T_update_1_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_update_1_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_update_1_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 150;
    { static char s[] =
      ";hires@update_1;lores@update_1;datum_tbflag_hires@update_1;"
      "datum_status_hires@update_1;obs_diags_1@update_1;obs_diags_2@update_1;"
      "obs_diags_3@update_1;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 57;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 342;
    { static char s[] =
      ";hires@update_1;lores@update_1;datum_tbflag_hires@update_1;"
      "datum_status_hires@update_1;obs_diags_1@update_1;obs_diags_2@update_1;"
      "obs_diags_3@update_1;datum_status_hires.active@update_1;"
      "datum_status_hires.passive@update_1;datum_status_hires.rejected@update_1;"
      "datum_status_hires.blacklisted@update_1;datum_status_hires.use_emiskf_only@update_1;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 82;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_update_1_PREPTAG = T;
    CCMA_nT_update_1_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_update_1_PREPTAG;
  return CCMA_T_update_1_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_update_1(void *T);
extern int CCMA_Unpack_T_update_1(void *T);
extern int CCMA_Sel_T_update_1(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, update_1);
PrePutTable(CCMA, d, double, update_1);
PreLoadTable(CCMA, update_1);
PreStoreTable(CCMA, update_1);
extern void CCMA_Dim_T_update_1(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_update_1(void *T);
extern int CCMA_Sql_T_update_1(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_update_1(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_update_2) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "update_2" : appearance order#381, hierarchy rank# 385, weight = 358.000381 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,hires);
  DeclareDS(pk9real,lores);
  DeclareDS(pk1int,datum_tbflag_hires);
  DeclareDS(Bitfield,datum_status_hires); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obs_diags_1);
  DeclareDS(pk9real,obs_diags_2);
  DeclareDS(pk9real,obs_diags_3);
} TABLE_update_2;

#endif /* defined(IS_a_TABLE_update_2) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_update_2)
extern const ODB_Tags *CCMA_Set_T_update_2_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_update_2_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_update_2_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_update_2_PREPTAG = NULL;
PRIVATE int CCMA_nT_update_2_TAG = 0;
PRIVATE int CCMA_nT_update_2_PREPTAG = 0;
PRIVATE int CCMA_nT_update_2_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_update_2_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_update_2_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:hires@update_2"; T[0].name = s; }
    { static char s[] = "pk9real:lores@update_2"; T[1].name = s; }
    { static char s[] = "pk1int:datum_tbflag_hires@update_2"; T[2].name = s; }
    { static char s[] = "Bitfield:datum_status_hires@update_2"; T[3].name = s; }
    T[3].nmem = 5;
ALLOC(T[3].memb, 5);
      { static char s[] = "active 1"; T[3].memb[0] = s; }
      { static char s[] = "passive 1"; T[3].memb[1] = s; }
      { static char s[] = "rejected 1"; T[3].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[3].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[3].memb[4] = s; }
    { static char s[] = "pk9real:obs_diags_1@update_2"; T[4].name = s; }
    { static char s[] = "pk9real:obs_diags_2@update_2"; T[5].name = s; }
    { static char s[] = "pk9real:obs_diags_3@update_2"; T[6].name = s; }
    CCMA_T_update_2_TAG = T;
    CCMA_nT_update_2_TAG = ntag;
    CCMA_nT_update_2_MEM = 5;
  }
  if (ntag_out) *ntag_out = CCMA_nT_update_2_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_update_2_MEM;
  return CCMA_T_update_2_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_update_2_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_update_2_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 150;
    { static char s[] =
      ";hires@update_2;lores@update_2;datum_tbflag_hires@update_2;"
      "datum_status_hires@update_2;obs_diags_1@update_2;obs_diags_2@update_2;"
      "obs_diags_3@update_2;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 57;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 342;
    { static char s[] =
      ";hires@update_2;lores@update_2;datum_tbflag_hires@update_2;"
      "datum_status_hires@update_2;obs_diags_1@update_2;obs_diags_2@update_2;"
      "obs_diags_3@update_2;datum_status_hires.active@update_2;"
      "datum_status_hires.passive@update_2;datum_status_hires.rejected@update_2;"
      "datum_status_hires.blacklisted@update_2;datum_status_hires.use_emiskf_only@update_2;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 82;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_update_2_PREPTAG = T;
    CCMA_nT_update_2_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_update_2_PREPTAG;
  return CCMA_T_update_2_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_update_2(void *T);
extern int CCMA_Unpack_T_update_2(void *T);
extern int CCMA_Sel_T_update_2(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, update_2);
PrePutTable(CCMA, d, double, update_2);
PreLoadTable(CCMA, update_2);
PreStoreTable(CCMA, update_2);
extern void CCMA_Dim_T_update_2(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_update_2(void *T);
extern int CCMA_Sql_T_update_2(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_update_2(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_update_3) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "update_3" : appearance order#382, hierarchy rank# 386, weight = 358.000382 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,hires);
  DeclareDS(pk9real,lores);
  DeclareDS(pk1int,datum_tbflag_hires);
  DeclareDS(Bitfield,datum_status_hires); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obs_diags_1);
  DeclareDS(pk9real,obs_diags_2);
  DeclareDS(pk9real,obs_diags_3);
} TABLE_update_3;

#endif /* defined(IS_a_TABLE_update_3) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_update_3)
extern const ODB_Tags *CCMA_Set_T_update_3_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_update_3_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_update_3_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_update_3_PREPTAG = NULL;
PRIVATE int CCMA_nT_update_3_TAG = 0;
PRIVATE int CCMA_nT_update_3_PREPTAG = 0;
PRIVATE int CCMA_nT_update_3_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_update_3_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_update_3_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:hires@update_3"; T[0].name = s; }
    { static char s[] = "pk9real:lores@update_3"; T[1].name = s; }
    { static char s[] = "pk1int:datum_tbflag_hires@update_3"; T[2].name = s; }
    { static char s[] = "Bitfield:datum_status_hires@update_3"; T[3].name = s; }
    T[3].nmem = 5;
ALLOC(T[3].memb, 5);
      { static char s[] = "active 1"; T[3].memb[0] = s; }
      { static char s[] = "passive 1"; T[3].memb[1] = s; }
      { static char s[] = "rejected 1"; T[3].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[3].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[3].memb[4] = s; }
    { static char s[] = "pk9real:obs_diags_1@update_3"; T[4].name = s; }
    { static char s[] = "pk9real:obs_diags_2@update_3"; T[5].name = s; }
    { static char s[] = "pk9real:obs_diags_3@update_3"; T[6].name = s; }
    CCMA_T_update_3_TAG = T;
    CCMA_nT_update_3_TAG = ntag;
    CCMA_nT_update_3_MEM = 5;
  }
  if (ntag_out) *ntag_out = CCMA_nT_update_3_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_update_3_MEM;
  return CCMA_T_update_3_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_update_3_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_update_3_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 150;
    { static char s[] =
      ";hires@update_3;lores@update_3;datum_tbflag_hires@update_3;"
      "datum_status_hires@update_3;obs_diags_1@update_3;obs_diags_2@update_3;"
      "obs_diags_3@update_3;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 57;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 342;
    { static char s[] =
      ";hires@update_3;lores@update_3;datum_tbflag_hires@update_3;"
      "datum_status_hires@update_3;obs_diags_1@update_3;obs_diags_2@update_3;"
      "obs_diags_3@update_3;datum_status_hires.active@update_3;"
      "datum_status_hires.passive@update_3;datum_status_hires.rejected@update_3;"
      "datum_status_hires.blacklisted@update_3;datum_status_hires.use_emiskf_only@update_3;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 82;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_update_3_PREPTAG = T;
    CCMA_nT_update_3_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_update_3_PREPTAG;
  return CCMA_T_update_3_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_update_3(void *T);
extern int CCMA_Unpack_T_update_3(void *T);
extern int CCMA_Sel_T_update_3(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, update_3);
PrePutTable(CCMA, d, double, update_3);
PreLoadTable(CCMA, update_3);
PreStoreTable(CCMA, update_3);
extern void CCMA_Dim_T_update_3(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_update_3(void *T);
extern int CCMA_Sql_T_update_3(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_update_3(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_update_4) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "update_4" : appearance order#383, hierarchy rank# 387, weight = 358.000383 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,hires);
  DeclareDS(pk9real,lores);
  DeclareDS(pk1int,datum_tbflag_hires);
  DeclareDS(Bitfield,datum_status_hires); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(pk9real,obs_diags_1);
  DeclareDS(pk9real,obs_diags_2);
  DeclareDS(pk9real,obs_diags_3);
} TABLE_update_4;

#endif /* defined(IS_a_TABLE_update_4) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_update_4)
extern const ODB_Tags *CCMA_Set_T_update_4_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_update_4_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_update_4_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_update_4_PREPTAG = NULL;
PRIVATE int CCMA_nT_update_4_TAG = 0;
PRIVATE int CCMA_nT_update_4_PREPTAG = 0;
PRIVATE int CCMA_nT_update_4_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_update_4_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_update_4_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:hires@update_4"; T[0].name = s; }
    { static char s[] = "pk9real:lores@update_4"; T[1].name = s; }
    { static char s[] = "pk1int:datum_tbflag_hires@update_4"; T[2].name = s; }
    { static char s[] = "Bitfield:datum_status_hires@update_4"; T[3].name = s; }
    T[3].nmem = 5;
ALLOC(T[3].memb, 5);
      { static char s[] = "active 1"; T[3].memb[0] = s; }
      { static char s[] = "passive 1"; T[3].memb[1] = s; }
      { static char s[] = "rejected 1"; T[3].memb[2] = s; }
      { static char s[] = "blacklisted 1"; T[3].memb[3] = s; }
      { static char s[] = "use_emiskf_only 1"; T[3].memb[4] = s; }
    { static char s[] = "pk9real:obs_diags_1@update_4"; T[4].name = s; }
    { static char s[] = "pk9real:obs_diags_2@update_4"; T[5].name = s; }
    { static char s[] = "pk9real:obs_diags_3@update_4"; T[6].name = s; }
    CCMA_T_update_4_TAG = T;
    CCMA_nT_update_4_TAG = ntag;
    CCMA_nT_update_4_MEM = 5;
  }
  if (ntag_out) *ntag_out = CCMA_nT_update_4_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_update_4_MEM;
  return CCMA_T_update_4_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_update_4_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_update_4_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 150;
    { static char s[] =
      ";hires@update_4;lores@update_4;datum_tbflag_hires@update_4;"
      "datum_status_hires@update_4;obs_diags_1@update_4;obs_diags_2@update_4;"
      "obs_diags_3@update_4;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 57;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 342;
    { static char s[] =
      ";hires@update_4;lores@update_4;datum_tbflag_hires@update_4;"
      "datum_status_hires@update_4;obs_diags_1@update_4;obs_diags_2@update_4;"
      "obs_diags_3@update_4;datum_status_hires.active@update_4;"
      "datum_status_hires.passive@update_4;datum_status_hires.rejected@update_4;"
      "datum_status_hires.blacklisted@update_4;datum_status_hires.use_emiskf_only@update_4;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 82;
    { static char s[] =
      ";pk9real;pk9real;pk1int;Bitfield;pk9real;pk9real;pk9real;"
      "bit1;bit1;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_update_4_PREPTAG = T;
    CCMA_nT_update_4_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_update_4_PREPTAG;
  return CCMA_T_update_4_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_update_4(void *T);
extern int CCMA_Unpack_T_update_4(void *T);
extern int CCMA_Sel_T_update_4(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, update_4);
PrePutTable(CCMA, d, double, update_4);
PreLoadTable(CCMA, update_4);
PreStoreTable(CCMA, update_4);
extern void CCMA_Dim_T_update_4(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_update_4(void *T);
extern int CCMA_Sql_T_update_4(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_update_4(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_aeolus_hdr) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "aeolus_hdr" : appearance order#384, hierarchy rank# 23, weight = 3.002004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(Bitfield,aeolus_hdrflag); /* Alias bit stream -typedef "Bitfield" */
  DeclareDS(linkoffset_t,LINKOFFSET(aeolus_auxmet));
  DeclareDS(linklen_t,LINKLEN(aeolus_auxmet));
  DeclareDS(linkoffset_t,LINKOFFSET(aeolus_l2c));
  DeclareDS(linklen_t,LINKLEN(aeolus_l2c));
  DeclareDS(linkoffset_t,LINKOFFSET(aeolus_l2b));
  DeclareDS(linklen_t,LINKLEN(aeolus_l2b));
} TABLE_aeolus_hdr;

#endif /* defined(IS_a_TABLE_aeolus_hdr) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_aeolus_hdr)
extern const ODB_Tags *CCMA_Set_T_aeolus_hdr_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_aeolus_hdr_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_aeolus_hdr_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_aeolus_hdr_PREPTAG = NULL;
PRIVATE int CCMA_nT_aeolus_hdr_TAG = 0;
PRIVATE int CCMA_nT_aeolus_hdr_PREPTAG = 0;
PRIVATE int CCMA_nT_aeolus_hdr_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_aeolus_hdr_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_aeolus_hdr_TAG) {
    int ntag = 7;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "Bitfield:aeolus_hdrflag@aeolus_hdr"; T[0].name = s; }
    T[0].nmem = 3;
ALLOC(T[0].memb, 3);
      { static char s[] = "nadir_location 1"; T[0].memb[0] = s; }
      { static char s[] = "orbit_predicted 1"; T[0].memb[1] = s; }
      { static char s[] = "omit_from_ee 1"; T[0].memb[2] = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(aeolus_auxmet)@aeolus_hdr"; T[1].name = s; }
    { static char s[] = "linklen_t:LINKLEN(aeolus_auxmet)@aeolus_hdr"; T[2].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(aeolus_l2c)@aeolus_hdr"; T[3].name = s; }
    { static char s[] = "linklen_t:LINKLEN(aeolus_l2c)@aeolus_hdr"; T[4].name = s; }
    { static char s[] = "linkoffset_t:LINKOFFSET(aeolus_l2b)@aeolus_hdr"; T[5].name = s; }
    { static char s[] = "linklen_t:LINKLEN(aeolus_l2b)@aeolus_hdr"; T[6].name = s; }
    CCMA_T_aeolus_hdr_TAG = T;
    CCMA_nT_aeolus_hdr_TAG = ntag;
    CCMA_nT_aeolus_hdr_MEM = 3;
  }
  if (ntag_out) *ntag_out = CCMA_nT_aeolus_hdr_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_aeolus_hdr_MEM;
  return CCMA_T_aeolus_hdr_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_aeolus_hdr_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_aeolus_hdr_PREPTAG) {
    int npreptag = 4;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = preptag_name;
    T[0].longname_len = 228;
    { static char s[] =
      ";aeolus_hdrflag@aeolus_hdr;LINKOFFSET(aeolus_auxmet)@aeolus_hdr;"
      "LINKLEN(aeolus_auxmet)@aeolus_hdr;LINKOFFSET(aeolus_l2c)@aeolus_hdr;"
      "LINKLEN(aeolus_l2c)@aeolus_hdr;LINKOFFSET(aeolus_l2b)@aeolus_hdr;"
      "LINKLEN(aeolus_l2b)@aeolus_hdr;";
      T[0].longname = s; }
    T[1].tagtype = preptag_type;
    T[1].longname_len = 79;
    { static char s[] =
      ";Bitfield;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;";
      T[1].longname = s; }
    T[2].tagtype = preptag_extname;
    T[2].longname_len = 350;
    { static char s[] =
      ";aeolus_hdrflag@aeolus_hdr;LINKOFFSET(aeolus_auxmet)@aeolus_hdr;"
      "LINKLEN(aeolus_auxmet)@aeolus_hdr;LINKOFFSET(aeolus_l2c)@aeolus_hdr;"
      "LINKLEN(aeolus_l2c)@aeolus_hdr;LINKOFFSET(aeolus_l2b)@aeolus_hdr;"
      "LINKLEN(aeolus_l2b)@aeolus_hdr;aeolus_hdrflag.nadir_location@aeolus_hdr;"
      "aeolus_hdrflag.orbit_predicted@aeolus_hdr;aeolus_hdrflag.omit_from_ee@aeolus_hdr;";
      T[2].longname = s; }
    T[3].tagtype = preptag_exttype;
    T[3].longname_len = 94;
    { static char s[] =
      ";Bitfield;linkoffset_t;linklen_t;linkoffset_t;linklen_t;"
      "linkoffset_t;linklen_t;bit1;bit1;bit1;";
      T[3].longname = s; }
    CCMA_T_aeolus_hdr_PREPTAG = T;
    CCMA_nT_aeolus_hdr_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_aeolus_hdr_PREPTAG;
  return CCMA_T_aeolus_hdr_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_aeolus_hdr(void *T);
extern int CCMA_Unpack_T_aeolus_hdr(void *T);
extern int CCMA_Sel_T_aeolus_hdr(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, aeolus_hdr);
PrePutTable(CCMA, d, double, aeolus_hdr);
PreLoadTable(CCMA, aeolus_hdr);
PreStoreTable(CCMA, aeolus_hdr);
extern void CCMA_Dim_T_aeolus_hdr(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_aeolus_hdr(void *T);
extern int CCMA_Sql_T_aeolus_hdr(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_aeolus_hdr(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_aeolus_auxmet) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "aeolus_auxmet" : appearance order#385, hierarchy rank# 27, weight = 3.003004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,lev);
  DeclareDS(pk9real,ptop);
  DeclareDS(pk9real,pnom);
  DeclareDS(pk9real,ztop);
  DeclareDS(pk9real,znom);
  DeclareDS(pk9real,u);
  DeclareDS(pk9real,v);
  DeclareDS(pk9real,t);
  DeclareDS(pk9real,rh);
  DeclareDS(pk9real,q);
  DeclareDS(pk9real,cc);
  DeclareDS(pk9real,clwc);
  DeclareDS(pk9real,ciwc);
  DeclareDS(pk9real,error_t);
  DeclareDS(pk9real,error_rh);
  DeclareDS(pk9real,error_p);
} TABLE_aeolus_auxmet;

#endif /* defined(IS_a_TABLE_aeolus_auxmet) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_aeolus_auxmet)
extern const ODB_Tags *CCMA_Set_T_aeolus_auxmet_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_aeolus_auxmet_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_aeolus_auxmet_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_aeolus_auxmet_PREPTAG = NULL;
PRIVATE int CCMA_nT_aeolus_auxmet_TAG = 0;
PRIVATE int CCMA_nT_aeolus_auxmet_PREPTAG = 0;
PRIVATE int CCMA_nT_aeolus_auxmet_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_aeolus_auxmet_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_aeolus_auxmet_TAG) {
    int ntag = 16;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:lev@aeolus_auxmet"; T[0].name = s; }
    { static char s[] = "pk9real:ptop@aeolus_auxmet"; T[1].name = s; }
    { static char s[] = "pk9real:pnom@aeolus_auxmet"; T[2].name = s; }
    { static char s[] = "pk9real:ztop@aeolus_auxmet"; T[3].name = s; }
    { static char s[] = "pk9real:znom@aeolus_auxmet"; T[4].name = s; }
    { static char s[] = "pk9real:u@aeolus_auxmet"; T[5].name = s; }
    { static char s[] = "pk9real:v@aeolus_auxmet"; T[6].name = s; }
    { static char s[] = "pk9real:t@aeolus_auxmet"; T[7].name = s; }
    { static char s[] = "pk9real:rh@aeolus_auxmet"; T[8].name = s; }
    { static char s[] = "pk9real:q@aeolus_auxmet"; T[9].name = s; }
    { static char s[] = "pk9real:cc@aeolus_auxmet"; T[10].name = s; }
    { static char s[] = "pk9real:clwc@aeolus_auxmet"; T[11].name = s; }
    { static char s[] = "pk9real:ciwc@aeolus_auxmet"; T[12].name = s; }
    { static char s[] = "pk9real:error_t@aeolus_auxmet"; T[13].name = s; }
    { static char s[] = "pk9real:error_rh@aeolus_auxmet"; T[14].name = s; }
    { static char s[] = "pk9real:error_p@aeolus_auxmet"; T[15].name = s; }
    CCMA_T_aeolus_auxmet_TAG = T;
    CCMA_nT_aeolus_auxmet_TAG = ntag;
    CCMA_nT_aeolus_auxmet_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_aeolus_auxmet_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_aeolus_auxmet_MEM;
  return CCMA_T_aeolus_auxmet_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_aeolus_auxmet_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_aeolus_auxmet_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 298;
    { static char s[] =
      ";lev@aeolus_auxmet;ptop@aeolus_auxmet;pnom@aeolus_auxmet;"
      "ztop@aeolus_auxmet;znom@aeolus_auxmet;u@aeolus_auxmet;"
      "v@aeolus_auxmet;t@aeolus_auxmet;rh@aeolus_auxmet;q@aeolus_auxmet;"
      "cc@aeolus_auxmet;clwc@aeolus_auxmet;ciwc@aeolus_auxmet;"
      "error_t@aeolus_auxmet;error_rh@aeolus_auxmet;error_p@aeolus_auxmet;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 129;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_aeolus_auxmet_PREPTAG = T;
    CCMA_nT_aeolus_auxmet_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_aeolus_auxmet_PREPTAG;
  return CCMA_T_aeolus_auxmet_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_aeolus_auxmet(void *T);
extern int CCMA_Unpack_T_aeolus_auxmet(void *T);
extern int CCMA_Sel_T_aeolus_auxmet(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, aeolus_auxmet);
PrePutTable(CCMA, d, double, aeolus_auxmet);
PreLoadTable(CCMA, aeolus_auxmet);
PreStoreTable(CCMA, aeolus_auxmet);
extern void CCMA_Dim_T_aeolus_auxmet(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_aeolus_auxmet(void *T);
extern int CCMA_Sql_T_aeolus_auxmet(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_aeolus_auxmet(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_aeolus_l2c) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "aeolus_l2c" : appearance order#386, hierarchy rank# 28, weight = 3.003004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,hlos_ob_err);
  DeclareDS(pk9real,hlos_fg);
  DeclareDS(pk9real,u_fg);
  DeclareDS(pk9real,u_fg_err);
  DeclareDS(pk9real,v_fg);
  DeclareDS(pk9real,v_fg_err);
  DeclareDS(pk9real,hlos_fg_err);
  DeclareDS(pk9real,hlos_an);
  DeclareDS(pk9real,hlos_an_err);
  DeclareDS(pk9real,u_an);
  DeclareDS(pk9real,v_an);
} TABLE_aeolus_l2c;

#endif /* defined(IS_a_TABLE_aeolus_l2c) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_aeolus_l2c)
extern const ODB_Tags *CCMA_Set_T_aeolus_l2c_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_aeolus_l2c_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_aeolus_l2c_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_aeolus_l2c_PREPTAG = NULL;
PRIVATE int CCMA_nT_aeolus_l2c_TAG = 0;
PRIVATE int CCMA_nT_aeolus_l2c_PREPTAG = 0;
PRIVATE int CCMA_nT_aeolus_l2c_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_aeolus_l2c_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_aeolus_l2c_TAG) {
    int ntag = 11;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:hlos_ob_err@aeolus_l2c"; T[0].name = s; }
    { static char s[] = "pk9real:hlos_fg@aeolus_l2c"; T[1].name = s; }
    { static char s[] = "pk9real:u_fg@aeolus_l2c"; T[2].name = s; }
    { static char s[] = "pk9real:u_fg_err@aeolus_l2c"; T[3].name = s; }
    { static char s[] = "pk9real:v_fg@aeolus_l2c"; T[4].name = s; }
    { static char s[] = "pk9real:v_fg_err@aeolus_l2c"; T[5].name = s; }
    { static char s[] = "pk9real:hlos_fg_err@aeolus_l2c"; T[6].name = s; }
    { static char s[] = "pk9real:hlos_an@aeolus_l2c"; T[7].name = s; }
    { static char s[] = "pk9real:hlos_an_err@aeolus_l2c"; T[8].name = s; }
    { static char s[] = "pk9real:u_an@aeolus_l2c"; T[9].name = s; }
    { static char s[] = "pk9real:v_an@aeolus_l2c"; T[10].name = s; }
    CCMA_T_aeolus_l2c_TAG = T;
    CCMA_nT_aeolus_l2c_TAG = ntag;
    CCMA_nT_aeolus_l2c_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_aeolus_l2c_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_aeolus_l2c_MEM;
  return CCMA_T_aeolus_l2c_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_aeolus_l2c_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_aeolus_l2c_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 212;
    { static char s[] =
      ";hlos_ob_err@aeolus_l2c;hlos_fg@aeolus_l2c;u_fg@aeolus_l2c;"
      "u_fg_err@aeolus_l2c;v_fg@aeolus_l2c;v_fg_err@aeolus_l2c;"
      "hlos_fg_err@aeolus_l2c;hlos_an@aeolus_l2c;hlos_an_err@aeolus_l2c;"
      "u_an@aeolus_l2c;v_an@aeolus_l2c;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 89;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk9real;pk9real;pk9real;";
      T[1].longname = s; }
    CCMA_T_aeolus_l2c_PREPTAG = T;
    CCMA_nT_aeolus_l2c_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_aeolus_l2c_PREPTAG;
  return CCMA_T_aeolus_l2c_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_aeolus_l2c(void *T);
extern int CCMA_Unpack_T_aeolus_l2c(void *T);
extern int CCMA_Sel_T_aeolus_l2c(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, aeolus_l2c);
PrePutTable(CCMA, d, double, aeolus_l2c);
PreLoadTable(CCMA, aeolus_l2c);
PreStoreTable(CCMA, aeolus_l2c);
extern void CCMA_Dim_T_aeolus_l2c(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_aeolus_l2c(void *T);
extern int CCMA_Sql_T_aeolus_l2c(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_aeolus_l2c(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

#if defined(IS_a_TABLE_aeolus_l2b) || defined(ODB_MAINCODE) || defined(IS_a_VIEW)

/* *************** TABLE "aeolus_l2b" : appearance order#387, hierarchy rank# 29, weight = 3.003004 *************** */

typedef struct {
  int Handle;
  int PoolNo;
  ODB_Funcs *Funcs;
  boolean Is_loaded;
  boolean Is_new;
  boolean Swapped_out;
  boolean Byteswap;
  int IO_method;
  int Created[2];
  int LastUpdated[2];
  int Ncols;
  int Nrows;
  int Nalloc;
  int Numreqs;
  DeclareDS(pk9real,t_ref);
  DeclareDS(pk9real,p_ref);
  DeclareDS(pk9real,beta);
  DeclareDS(pk9real,dhlos_dt);
  DeclareDS(pk9real,dhlos_dp);
  DeclareDS(pk9real,dhlos_dbeta);
  DeclareDS(pk9real,horiz_length);
  DeclareDS(pk9real,vert_length);
  DeclareDS(pk1int,conf_flag);
} TABLE_aeolus_l2b;

#endif /* defined(IS_a_TABLE_aeolus_l2b) || defined(ODB_MAINCODE)  || defined(IS_a_VIEW) */

#if !defined(ODB_MAINCODE) && defined(IS_a_TABLE_aeolus_l2b)
extern const ODB_Tags *CCMA_Set_T_aeolus_l2b_TAG(int *ntag_out, int *nmem_out);
extern const ODB_PrepTags *CCMA_Set_T_aeolus_l2b_PREPTAG(int *npreptag_out);
#elif defined(ODB_MAINCODE)
PRIVATE const ODB_Tags *CCMA_T_aeolus_l2b_TAG = NULL;
PRIVATE const ODB_PrepTags *CCMA_T_aeolus_l2b_PREPTAG = NULL;
PRIVATE int CCMA_nT_aeolus_l2b_TAG = 0;
PRIVATE int CCMA_nT_aeolus_l2b_PREPTAG = 0;
PRIVATE int CCMA_nT_aeolus_l2b_MEM = 0;
PUBLIC const ODB_Tags *
CCMA_Set_T_aeolus_l2b_TAG(int *ntag_out, int *nmem_out)
{
  if (!CCMA_T_aeolus_l2b_TAG) {
    int ntag = 9;
    ODB_Tags *T = NULL;
    CALLOC(T, ntag);
    { static char s[] = "pk9real:t_ref@aeolus_l2b"; T[0].name = s; }
    { static char s[] = "pk9real:p_ref@aeolus_l2b"; T[1].name = s; }
    { static char s[] = "pk9real:beta@aeolus_l2b"; T[2].name = s; }
    { static char s[] = "pk9real:dhlos_dt@aeolus_l2b"; T[3].name = s; }
    { static char s[] = "pk9real:dhlos_dp@aeolus_l2b"; T[4].name = s; }
    { static char s[] = "pk9real:dhlos_dbeta@aeolus_l2b"; T[5].name = s; }
    { static char s[] = "pk9real:horiz_length@aeolus_l2b"; T[6].name = s; }
    { static char s[] = "pk9real:vert_length@aeolus_l2b"; T[7].name = s; }
    { static char s[] = "pk1int:conf_flag@aeolus_l2b"; T[8].name = s; }
    CCMA_T_aeolus_l2b_TAG = T;
    CCMA_nT_aeolus_l2b_TAG = ntag;
    CCMA_nT_aeolus_l2b_MEM = 0;
  }
  if (ntag_out) *ntag_out = CCMA_nT_aeolus_l2b_TAG;
  if (nmem_out) *nmem_out = CCMA_nT_aeolus_l2b_MEM;
  return CCMA_T_aeolus_l2b_TAG;
}
PUBLIC const ODB_PrepTags *
CCMA_Set_T_aeolus_l2b_PREPTAG(int *npreptag_out)
{
  if (!CCMA_T_aeolus_l2b_PREPTAG) {
    int npreptag = 2;
    ODB_PrepTags *T = NULL;
    ALLOC(T, npreptag);
    T[0].tagtype = (preptag_name | preptag_extname);
    T[0].longname_len = 182;
    { static char s[] =
      ";t_ref@aeolus_l2b;p_ref@aeolus_l2b;beta@aeolus_l2b;"
      "dhlos_dt@aeolus_l2b;dhlos_dp@aeolus_l2b;dhlos_dbeta@aeolus_l2b;"
      "horiz_length@aeolus_l2b;vert_length@aeolus_l2b;conf_flag@aeolus_l2b;";
      T[0].longname = s; }
    T[1].tagtype = (preptag_type | preptag_exttype);
    T[1].longname_len = 72;
    { static char s[] =
      ";pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;pk9real;"
      "pk9real;pk1int;";
      T[1].longname = s; }
    CCMA_T_aeolus_l2b_PREPTAG = T;
    CCMA_nT_aeolus_l2b_PREPTAG = npreptag;
  }
  if (npreptag_out) *npreptag_out = CCMA_nT_aeolus_l2b_PREPTAG;
  return CCMA_T_aeolus_l2b_PREPTAG;
}
#endif

#if defined(ODB_MAINCODE)

extern int CCMA_Pack_T_aeolus_l2b(void *T);
extern int CCMA_Unpack_T_aeolus_l2b(void *T);
extern int CCMA_Sel_T_aeolus_l2b(void *T, ODB_PE_Info *PEinfo, int phase, void *feedback);
PreGetTable(CCMA, d, double, aeolus_l2b);
PrePutTable(CCMA, d, double, aeolus_l2b);
PreLoadTable(CCMA, aeolus_l2b);
PreStoreTable(CCMA, aeolus_l2b);
extern void CCMA_Dim_T_aeolus_l2b(void *T, int *Nrows, int *Ncols, int *Nrowoffset, int ProcID);
extern void CCMA_Swapout_T_aeolus_l2b(void *T);
extern int CCMA_Sql_T_aeolus_l2b(FILE *fp, int mode, const char *prefix, const char *postfix, char **sqlout);
extern void *CCMA_Init_T_aeolus_l2b(void *T, ODB_Pool *Pool, int Is_new, int IO_method, int it, int dummy);

#endif /* defined(ODB_MAINCODE) */

