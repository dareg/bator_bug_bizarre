


NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: advect_scalar2d.F90

(    1) 
(    2) subroutine advect_scalar2D (f, u, w, rho, rhow, flux)
(    3) 
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) 
(   14) !     positively definite monotonic advection with non-oscillatory option
(   15) 
(   16) use grid
(   17) use real_size
(   18) implicit none
(   19) 
(   20) 
(   21) real(RR) f(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)
(   22) real(RR) u(dimx1_u:dimx2_u, dimy1_u:dimy2_u, nzm)
(   23) real(RR) w(dimx1_w:dimx2_w, dimy1_w:dimy2_w, nz )
(   24) real(RR) rho(nzm)
(   25) real(RR) rhow(nz)
(   26) real(RR) flux(nz)
(   27) 
(   28) real(RR) mx (0:nxp1,1,nzm)
(   29) real(RR) mn (0:nxp1,1,nzm)
(   30) real(RR) uuu(-1:nxp3,1,nzm)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 3

(   31) real(RR) www(-1:nxp2,1,nz)
(   32) 
(   33) real(RR) eps, dd
(   34) integer i,j,k,ic,ib,kc,kb
(   35) logical nonos
(   36) real(RR) iadz(nzm),irho(nzm),irhow(nzm)
(   37) 
(   38) real(RR) x1, x2, a, b, a1, a2, y
(   39) real(RR) andiff,across,pp,pn
(   40) andiff(x1,x2,a,b)=(abs(a)-a*a*b)*0.5*(x2-x1)
(   41) across(x1,a1,a2)=0.03125*a1*a2*x1
(   42) pp(y)= max(0.,y)
(   43) pn(y)=-min(0.,y)
(   44) 
(   45) nonos = .true.
(   46) eps = 1.e-10
(   47) 
(   48) j=1
(   49) 
(   50) www(:,:,nz)=0.
(   51) 
(   52) if(dowallx) then
(   53) 
(   54)   if(mod(rank,nsubdomains_x).eq.0) then
(   55)     do k=1,nzm
(   56)        do i=dimx1_u,1
(   57)          u(i,j,k) = 0.
(   58)        end do
(   59)     end do
(   60)   end if
(   61)   if(mod(rank,nsubdomains_x).eq.nsubdomains_x-1) then
(   62)     do k=1,nzm
(   63)        do i=nx+1,dimx2_u
(   64)          u(i,j,k) = 0.
(   65)        end do
(   66)     end do
(   67)   end if
(   68) 
(   69) end if
(   70) 
(   71) !-----------------------------------------
(   72) 
(   73) if(nonos) then
(   74) 
(   75)  do k=1,nzm
(   76)   kc=min(nzm,k+1)
(   77)   kb=max(1,k-1)
(   78)   do i=0,nxp1
(   79)     ib=i-1
(   80)     ic=i+1
(   81)     mx(i,j,k)=max(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k))
(   82)     mn(i,j,k)=min(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k))
(   83)    end do
(   84)  end do
(   85) 
(   86) end if  ! nonos
(   87) 
(   88) do k=1,nzm






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 4

(   89)   kb=max(1,k-1)
(   90)   do i=-1,nxp3
(   91)     uuu(i,j,k)=max(0.,u(i,j,k))*f(i-1,j,k)+min(0.,u(i,j,k))*f(i,j,k)
(   92)   end do
(   93)   do i=-1,nxp2
(   94)     www(i,j,k)=max(0.,w(i,j,k))*f(i,j,kb)+min(0.,w(i,j,k))*f(i,j,k)
(   95)   end do
(   96) !  flux(k) = 0. ! comment it out as it is initialized in crm.F90
(   97)   do i=1,nx
(   98)     flux(k) = flux(k) + www(i,j,k)
(   99)   end do
(  100) end do
(  101) 
(  102) do k=1,nzm
(  103)   irho(k) = 1./rho(k)
(  104)   iadz(k) = 1./adz(k)
(  105)    do i=-1,nxp2
(  106)       f(i,j,k) = f(i,j,k) - (uuu(i+1,j,k)-uuu(i,j,k) & 
(  107)                         + (www(i,j,k+1)-www(i,j,k))*iadz(k))*irho(k)            
(  108)    end do
(  109) end do 
(  110) 
(  111) 
(  112) do k=1,nzm
(  113)   kc=min(nzm,k+1)
(  114)   kb=max(1,k-1)
(  115)   dd=2./(kc-kb)/adz(k)
(  116)   irhow(k)=1./(rhow(k)*adz(k))
(  117)   do i=0,nxp2
(  118)    ib=i-1
(  119)    uuu(i,j,k)=andiff(f(ib,j,k),f(i,j,k),u(i,j,k),irho(k)) &
(  120)       - across(dd*(f(ib,j,kc)+f(i,j,kc)-f(ib,j,kb)-f(i,j,kb)), &
(  121)               u(i,j,k), w(ib,j,k)+w(ib,j,kc)+w(i,j,k)+w(i,j,kc)) *irho(k)
(  122)   end do
(  123)           
(  124) 
(  125)   do i=0,nxp1
(  126)    ib=i-1
(  127)    ic=i+1
(  128)    www(i,j,k)=andiff(f(i,j,kb),f(i,j,k),w(i,j,k),irhow(k)) &
(  129)       -across(f(ic,j,kb)+f(ic,j,k)-f(ib,j,kb)-f(ib,j,k), &
(  130)         w(i,j,k), u(i,j,kb)+u(i,j,k)+u(ic,j,k)+u(ic,j,kb)) *irho(k)
(  131)   end do
(  132) end do
(  133) www(:,:,1) = 0.
(  134) !---------- non-osscilatory option ---------------
(  135) 
(  136) if(nonos) then
(  137) 
(  138)  do k=1,nzm
(  139)    kc=min(nzm,k+1)
(  140)    kb=max(1,k-1)
(  141)    do i=0,nxp1
(  142)     ib=i-1
(  143)     ic=i+1
(  144)     mx(i,j,k)=max(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k),mx(i,j,k))
(  145)     mn(i,j,k)=min(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k),mn(i,j,k))
(  146)    end do






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 5

(  147)  end do
(  148) 
(  149)  do k=1,nzm
(  150)    kc=min(nzm,k+1)
(  151)    do i=0,nxp1
(  152)     ic=i+1
(  153)      mx(i,j,k)=rho(k)*(mx(i,j,k)-f(i,j,k))/(pn(uuu(ic,j,k)) + pp(uuu(i,j,k))+&
(  154)                iadz(k)*(pn(www(i,j,kc)) + pp(www(i,j,k)))+eps)
(  155)      mn(i,j,k)=rho(k)*(f(i,j,k)-mn(i,j,k))/(pp(uuu(ic,j,k)) + pn(uuu(i,j,k))+&
(  156)                iadz(k)*(pp(www(i,j,kc)) + pn(www(i,j,k)))+eps)
(  157)    end do
(  158)  end do
(  159) 
(  160)  do k=1,nzm
(  161)   kb=max(1,k-1)
(  162)    do i=1,nxp1
(  163)     ib=i-1
(  164)     uuu(i,j,k)= pp(uuu(i,j,k))*min(1.,mx(i,j,k), mn(ib,j,k)) &
(  165)               - pn(uuu(i,j,k))*min(1.,mx(ib,j,k),mn(i,j,k))
(  166)    end do
(  167)    do i=1,nx
(  168)     www(i,j,k)= pp(www(i,j,k))*min(1.,mx(i,j,k), mn(i,j,kb)) &
(  169)               - pn(www(i,j,k))*min(1.,mx(i,j,kb),mn(i,j,k))
(  170)     flux(k) = flux(k) + www(i,j,k)
(  171)    end do
(  172)  end do
(  173) 
(  174) 
(  175) endif ! nonos
(  176) 
(  177) 
(  178)  do k=1,nzm
(  179)   kc=k+1
(  180)    do i=1,nx
(  181)  ! MK: added fix for very small negative values (relative to positive values)
(  182)  !     especially  when such large numbers as
(  183)  !     hydrometeor concentrations are advected. The reason for negative values is
(  184)  !     most likely truncation error.
(  185) 
(  186)     f(i,j,k)= max(0.,f(i,j,k) - (uuu(i+1,j,k)-uuu(i,j,k) &
(  187)                      +(www(i,j,k+1)-www(i,j,k))*iadz(k))*irho(k))
(  188)    end do
(  189)  end do 
(  190) 
(  191) end subroutine advect_scalar2D
(  192) 
(  193) 

















NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 6

(    1) # 1 "advect_scalar2d.F90"
(    1) # 2 "advect_scalar2d.F90"
(    2) subroutine advect_scalar2D (f, u, w, rho, rhow, flux)
(    3) # 4 "advect_scalar2d.F90"
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) # 14 "advect_scalar2d.F90"
(   14) !     positively definite monotonic advection with non-oscillatory option
(   15) # 16 "advect_scalar2d.F90"
(   16) use grid
(   17) use real_size
(   18) implicit none
(   19) # 21 "advect_scalar2d.F90"
(   21) real(RR) f(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)
(   22) real(RR) u(dimx1_u:dimx2_u, dimy1_u:dimy2_u, nzm)
(   23) real(RR) w(dimx1_w:dimx2_w, dimy1_w:dimy2_w, nz )
(   24) real(RR) rho(nzm)
(   25) real(RR) rhow(nz)
(   26) real(RR) flux(nz)
(   27) # 28 "advect_scalar2d.F90"
(   28) real(RR) mx (0:nxp1,1,nzm)
(   29) real(RR) mn (0:nxp1,1,nzm)
(   30) real(RR) uuu(-1:nxp3,1,nzm)
(   31) real(RR) www(-1:nxp2,1,nz)
(   32) # 33 "advect_scalar2d.F90"
(   33) real(RR) eps, dd
(   34) integer i,j,k,ic,ib,kc,kb
(   35) logical nonos
(   36) real(RR) iadz(nzm),irho(nzm),irhow(nzm)
(   37) # 38 "advect_scalar2d.F90"
(   38) real(RR) x1, x2, a, b, a1, a2, y
(   39) real(RR) andiff,across,pp,pn
(   40) andiff(x1,x2,a,b)=(abs(a)-a*a*b)*0.5*(x2-x1)
(   41) across(x1,a1,a2)=0.03125*a1*a2*x1
(   42) pp(y)= max(0.,y)
(   43) pn(y)=-min(0.,y)
(   44) # 45 "advect_scalar2d.F90"
(   45) nonos = .true.
(   46) eps = 1.e-10
(   47) # 48 "advect_scalar2d.F90"
(   48) j=1
(   49) # 50 "advect_scalar2d.F90"
(   50) www(:,:,nz)=0.
(   51) # 52 "advect_scalar2d.F90"
(   52) if(dowallx) then
(   53) # 54 "advect_scalar2d.F90"
(   54)   if(mod(rank,nsubdomains_x).eq.0) then
(   55)     do k=1,nzm
(   56)        do i=dimx1_u,1
(   57)          u(i,j,k) = 0.
(   58)        end do






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 7

(   59)     end do
(   60)   end if
(   61)   if(mod(rank,nsubdomains_x).eq.nsubdomains_x-1) then
(   62)     do k=1,nzm
(   63)        do i=nx+1,dimx2_u
(   64)          u(i,j,k) = 0.
(   65)        end do
(   66)     end do
(   67)   end if
(   68) # 69 "advect_scalar2d.F90"
(   69) end if
(   70) # 71 "advect_scalar2d.F90"
(   71) !-----------------------------------------
(   72) # 73 "advect_scalar2d.F90"
(   73) if(nonos) then
(   74) # 75 "advect_scalar2d.F90"
(   75)  do k=1,nzm
(   76)   kc=min(nzm,k+1)
(   77)   kb=max(1,k-1)
(   78)   do i=0,nxp1
(   79)     ib=i-1
(   80)     ic=i+1
(   81)     mx(i,j,k)=max(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k))
(   82)     mn(i,j,k)=min(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k))
(   83)    end do
(   84)  end do
(   85) # 86 "advect_scalar2d.F90"
(   86) end if  ! nonos
(   87) # 88 "advect_scalar2d.F90"
(   88) do k=1,nzm
(   89)   kb=max(1,k-1)
(   90)   do i=-1,nxp3
(   91)     uuu(i,j,k)=max(0.,u(i,j,k))*f(i-1,j,k)+min(0.,u(i,j,k))*f(i,j,k)
(   92)   end do
(   93)   do i=-1,nxp2
(   94)     www(i,j,k)=max(0.,w(i,j,k))*f(i,j,kb)+min(0.,w(i,j,k))*f(i,j,k)
(   95)   end do
(   96) !  flux(k) = 0. ! comment it out as it is initialized in crm.F90
(   97)   do i=1,nx
(   98)     flux(k) = flux(k) + www(i,j,k)
(   99)   end do
(  100) end do
(  101) # 102 "advect_scalar2d.F90"
(  102) do k=1,nzm
(  103)   irho(k) = 1./rho(k)
(  104)   iadz(k) = 1./adz(k)
(  105)    do i=-1,nxp2
(  106)       f(i,j,k) = f(i,j,k) - (uuu(i+1,j,k)-uuu(i,j,k) & 
(  107)                         + (www(i,j,k+1)-www(i,j,k))*iadz(k))*irho(k)            
(  108)    end do
(  109) end do 
(  110) # 112 "advect_scalar2d.F90"
(  112) do k=1,nzm
(  113)   kc=min(nzm,k+1)
(  114)   kb=max(1,k-1)
(  115)   dd=2./(kc-kb)/adz(k)
(  116)   irhow(k)=1./(rhow(k)*adz(k))
(  117)   do i=0,nxp2






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 8

(  118)    ib=i-1
(  119)    uuu(i,j,k)=andiff(f(ib,j,k),f(i,j,k),u(i,j,k),irho(k)) &
(  120)       - across(dd*(f(ib,j,kc)+f(i,j,kc)-f(ib,j,kb)-f(i,j,kb)), &
(  121)               u(i,j,k), w(ib,j,k)+w(ib,j,kc)+w(i,j,k)+w(i,j,kc)) *irho(k)
(  122)   end do
(  123)           
(  124) # 125 "advect_scalar2d.F90"
(  125)   do i=0,nxp1
(  126)    ib=i-1
(  127)    ic=i+1
(  128)    www(i,j,k)=andiff(f(i,j,kb),f(i,j,k),w(i,j,k),irhow(k)) &
(  129)       -across(f(ic,j,kb)+f(ic,j,k)-f(ib,j,kb)-f(ib,j,k), &
(  130)         w(i,j,k), u(i,j,kb)+u(i,j,k)+u(ic,j,k)+u(ic,j,kb)) *irho(k)
(  131)   end do
(  132) end do
(  133) www(:,:,1) = 0.
(  134) !---------- non-osscilatory option ---------------
(  135) # 136 "advect_scalar2d.F90"
(  136) if(nonos) then
(  137) # 138 "advect_scalar2d.F90"
(  138)  do k=1,nzm
(  139)    kc=min(nzm,k+1)
(  140)    kb=max(1,k-1)
(  141)    do i=0,nxp1
(  142)     ib=i-1
(  143)     ic=i+1
(  144)     mx(i,j,k)=max(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k),mx(i,j,k))
(  145)     mn(i,j,k)=min(f(ib,j,k),f(ic,j,k),f(i,j,kb),f(i,j,kc),f(i,j,k),mn(i,j,k))
(  146)    end do
(  147)  end do
(  148) # 149 "advect_scalar2d.F90"
(  149)  do k=1,nzm
(  150)    kc=min(nzm,k+1)
(  151)    do i=0,nxp1
(  152)     ic=i+1
(  153)      mx(i,j,k)=rho(k)*(mx(i,j,k)-f(i,j,k))/(pn(uuu(ic,j,k)) + pp(uuu(i,j,k))+&
(  154)                iadz(k)*(pn(www(i,j,kc)) + pp(www(i,j,k)))+eps)
(  155)      mn(i,j,k)=rho(k)*(f(i,j,k)-mn(i,j,k))/(pp(uuu(ic,j,k)) + pn(uuu(i,j,k))+&
(  156)                iadz(k)*(pp(www(i,j,kc)) + pn(www(i,j,k)))+eps)
(  157)    end do
(  158)  end do
(  159) # 160 "advect_scalar2d.F90"
(  160)  do k=1,nzm
(  161)   kb=max(1,k-1)
(  162)    do i=1,nxp1
(  163)     ib=i-1
(  164)     uuu(i,j,k)= pp(uuu(i,j,k))*min(1.,mx(i,j,k), mn(ib,j,k)) &
(  165)               - pn(uuu(i,j,k))*min(1.,mx(ib,j,k),mn(i,j,k))
(  166)    end do
(  167)    do i=1,nx
(  168)     www(i,j,k)= pp(www(i,j,k))*min(1.,mx(i,j,k), mn(i,j,kb)) &
(  169)               - pn(www(i,j,k))*min(1.,mx(i,j,kb),mn(i,j,k))
(  170)     flux(k) = flux(k) + www(i,j,k)
(  171)    end do
(  172)  end do
(  173) # 175 "advect_scalar2d.F90"
(  175) endif ! nonos
(  176) # 178 "advect_scalar2d.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:54:18      page 9

(  178)  do k=1,nzm
(  179)   kc=k+1
(  180)    do i=1,nx
(  181)  ! MK: added fix for very small negative values (relative to positive values)
(  182)  !     especially  when such large numbers as
(  183)  !     hydrometeor concentrations are advected. The reason for negative values is
(  184)  !     most likely truncation error.
(  185) # 186 "advect_scalar2d.F90"
(  186)     f(i,j,k)= max(0.,f(i,j,k) - (uuu(i+1,j,k)-uuu(i,j,k) &
(  187)                      +(www(i,j,k+1)-www(i,j,k))*iadz(k))*irho(k))
(  188)    end do
(  189)  end do 
(  190) # 191 "advect_scalar2d.F90"
(  191) end subroutine advect_scalar2D
