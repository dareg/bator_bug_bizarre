


NVFORTRAN (Version     23.1)          02/24/2023  13:57:55      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:57:55      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: diffuse_scalar.F90

(    1) subroutine diffuse_scalar (f,f0,fluxb,fluxt, &
(    2)                           fdiff,flux,f2lediff,f2lediss,fwlediff,doit)
(    3) 
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) 
(   14) use grid
(   15) use real_size
(   16) use vars, only: tkh, rho, rhow
(   17) implicit none
(   18) 
(   19) ! input:
(   20) real(RR) f(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)  ! scalar
(   21) real(RR) f0(nzm)
(   22) real(RR) fluxb(nx,ny)       ! bottom flux
(   23) real(RR) fluxt(nx,ny)       ! top flux
(   24) real(RR) flux(nz)
(   25) real(RR) f2lediff(nz),f2lediss(nz),fwlediff(nz)
(   26) real(RR) fdiff(nz)
(   27) logical doit
(   28) ! Local
(   29) real(RR) df(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)  ! scalar
(   30) integer i,j,k






NVFORTRAN (Version     23.1)          02/24/2023  13:57:55      page 3

(   31) 
(   32) ! call t_startf ('diffuse_scalars') ! commented by Phani
(   33) 
(   34) df(:,:,:) = f(:,:,:)
(   35) 
(   36) if(RUN3D) then
(   37)   call diffuse_scalar3D (f,f0,fluxb,fluxt,tkh,rho,rhow,flux)
(   38) else  
(   39)   call diffuse_scalar2D (f,f0,fluxb,fluxt,tkh,rho,rhow,flux)
(   40) endif
(   41) 
(   42) do k=1,nzm
(   43)    fdiff(k)=0.
(   44)    do j=1,ny
(   45)     do i=1,nx
(   46)      fdiff(k)=fdiff(k)+f(i,j,k)-df(i,j,k)
(   47)     end do
(   48)    end do
(   49) end do
(   50) 
(   51) ! call t_stopf ('diffuse_scalars') ! commented by Phani
(   52) 
(   53) end subroutine diffuse_scalar 









































NVFORTRAN (Version     23.1)          02/24/2023  13:57:55      page 4

(    1) # 1 "diffuse_scalar.F90"
(    1) subroutine diffuse_scalar (f,f0,fluxb,fluxt, &
(    2)                           fdiff,flux,f2lediff,f2lediss,fwlediff,doit)
(    3) # 4 "diffuse_scalar.F90"
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) # 14 "diffuse_scalar.F90"
(   14) use grid
(   15) use real_size
(   16) use vars, only: tkh, rho, rhow
(   17) implicit none
(   18) # 19 "diffuse_scalar.F90"
(   19) ! input:
(   20) real(RR) f(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)  ! scalar
(   21) real(RR) f0(nzm)
(   22) real(RR) fluxb(nx,ny)       ! bottom flux
(   23) real(RR) fluxt(nx,ny)       ! top flux
(   24) real(RR) flux(nz)
(   25) real(RR) f2lediff(nz),f2lediss(nz),fwlediff(nz)
(   26) real(RR) fdiff(nz)
(   27) logical doit
(   28) ! Local
(   29) real(RR) df(dimx1_s:dimx2_s, dimy1_s:dimy2_s, nzm)  ! scalar
(   30) integer i,j,k
(   31) # 32 "diffuse_scalar.F90"
(   32) ! call t_startf ('diffuse_scalars') ! commented by Phani
(   33) # 34 "diffuse_scalar.F90"
(   34) df(:,:,:) = f(:,:,:)
(   35) # 36 "diffuse_scalar.F90"
(   36) if(RUN3D) then
(   37)   call diffuse_scalar3D (f,f0,fluxb,fluxt,tkh,rho,rhow,flux)
(   38) else  
(   39)   call diffuse_scalar2D (f,f0,fluxb,fluxt,tkh,rho,rhow,flux)
(   40) endif
(   41) # 42 "diffuse_scalar.F90"
(   42) do k=1,nzm
(   43)    fdiff(k)=0.
(   44)    do j=1,ny
(   45)     do i=1,nx
(   46)      fdiff(k)=fdiff(k)+f(i,j,k)-df(i,j,k)
(   47)     end do
(   48)    end do
(   49) end do
(   50) # 51 "diffuse_scalar.F90"
(   51) ! call t_stopf ('diffuse_scalars') ! commented by Phani
(   52) # 53 "diffuse_scalar.F90"
(   53) end subroutine diffuse_scalar 
