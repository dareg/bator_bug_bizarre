


NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: diagnose.F90

(    1) subroutine diagnose
(    2) 
(    3) !************* LICENSE START *****************
(    4) !
(    5) ! Copyright 2015 Marat Khairoutdinov 
(    6) ! School of Marine & Atmospheric Sciences
(    7) ! Stony Brook University
(    8) ! This software is distributed under the terms of
(    9) ! the Apache License version 2.0.
(   10) !
(   11) !************** LICENSE END ******************
(   12) 
(   13) ! Diagnose some useful stuff
(   14) 
(   15) use vars
(   16) use real_size
(   17) use params
(   18) implicit none
(   19) 
(   20) integer i,j,k,kb,kc,k200,k500,k850
(   21) double precision coef, coef1, buffer(nzm,9), buffer1(nzm,9)
(   22) real(RR) omn, omp, tmp_lwp
(   23) 
(   24) coef = 1./float(nx*ny)
(   25) 
(   26) 
(   27) k200 = nzm
(   28) 
(   29) do k=1,nzm
(   30)   u0(k)=0.






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 3

(   31)   v0(k)=0.
(   32)   t01(k) = tabs0(k)
(   33)   q01(k) = q0(k)
(   34)   t0(k)=0.
(   35)   tabs0(k)=0.
(   36)   q0(k)=0.
(   37)   qn0(k)=0.
(   38)   qp0(k)=0.
(   39)   p0(k)=0.
(   40)   tke0(k)=0.
(   41)   kc=min(nzm,k+1)
(   42)   kb=max(1,k-1)
(   43)   if(pres(kc).le.200..and.pres(kb).gt.200.) k200=k
(   44)   coef1 = rho(k)*dz*adz(k)*dtfactor
(   45)   do j=1,ny
(   46)     do i=1,nx
(   47)      tabs(i,j,k) = t(i,j,k)-gamaz(k)+ fac_cond * (qcl(i,j,k)+qpl(i,j,k)) +&
(   48)                                   fac_sub *(qci(i,j,k) + qpi(i,j,k))
(   49)      u0(k)=u0(k)+u(i,j,k)
(   50)      v0(k)=v0(k)+v(i,j,k)
(   51)      p0(k)=p0(k)+p(i,j,k)
(   52)      t0(k)=t0(k)+t(i,j,k)
(   53)      tabs0(k)=tabs0(k)+tabs(i,j,k)
(   54)      q0(k)=q0(k)+qv(i,j,k)+qcl(i,j,k)+qci(i,j,k)
(   55)      qn0(k) = qn0(k) + qcl(i,j,k) + qci(i,j,k)
(   56)      qp0(k) = qp0(k) + qpl(i,j,k) + qpi(i,j,k)
(   57)      tke0(k)=tke0(k)+tke(i,j,k)
(   58) 
(   59)      pw_xy(i,j) = pw_xy(i,j)+qv(i,j,k)*coef1
(   60)      cw_xy(i,j) = cw_xy(i,j)+qcl(i,j,k)*coef1
(   61)      iw_xy(i,j) = iw_xy(i,j)+qci(i,j,k)*coef1
(   62) 
(   63)     end do
(   64)   end do
(   65)   u0(k)=u0(k)*coef
(   66)   v0(k)=v0(k)*coef
(   67)   t0(k)=t0(k)*coef
(   68)   tabs0(k)=tabs0(k)*coef
(   69)   q0(k)=q0(k)*coef
(   70)   qn0(k)=qn0(k)*coef
(   71)   qp0(k)=qp0(k)*coef
(   72)   p0(k)=p0(k)*coef
(   73)   tke0(k)=tke0(k)*coef
(   74) 
(   75) end do ! k
(   76) 
(   77) k500 = nzm
(   78) do k = 1,nzm
(   79)    if((pres(kc).le.500.).and.(pres(k).gt.500.)) then
(   80)       if ((500.-pres(kc)).lt.(pres(k)-500.))then
(   81)          k500=kc
(   82)       else
(   83)          k500=k
(   84)       end if
(   85)    end if
(   86) end do
(   87) 
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 4

(   89) do j=1,ny
(   90)  do i=1,nx
(   91)   usfc_xy(i,j) = usfc_xy(i,j) + u(i,j,1)*dtfactor  
(   92)   vsfc_xy(i,j) = vsfc_xy(i,j) + v(i,j,1)*dtfactor  
(   93)   u200_xy(i,j) = u200_xy(i,j) + u(i,j,k200)*dtfactor  
(   94)   v200_xy(i,j) = v200_xy(i,j) + v(i,j,k200)*dtfactor  
(   95)   w500_xy(i,j) = w500_xy(i,j) + w(i,j,k500)*dtfactor
(   96)  end do
(   97) end do
(   98) 
(   99) if(dompi) then
(  100) 
(  101)   coef1 = 1./float(nsubdomains)
(  102)   do k=1,nzm
(  103)     buffer(k,1) = u0(k)
(  104)     buffer(k,2) = v0(k)
(  105)     buffer(k,3) = t0(k)
(  106)     buffer(k,4) = q0(k)
(  107)     buffer(k,5) = p0(k)
(  108)     buffer(k,6) = tabs0(k)
(  109)     buffer(k,7) = tke0(k)
(  110)     buffer(k,8) = qn0(k)
(  111)     buffer(k,9) = qp0(k)
(  112)   end do
(  113)   call task_sum_real8(buffer,buffer1,nzm*9)
(  114)   do k=1,nzm
(  115)     u0(k)=buffer1(k,1)*coef1
(  116)     v0(k)=buffer1(k,2)*coef1
(  117)     t0(k)=buffer1(k,3)*coef1
(  118)     q0(k)=buffer1(k,4)*coef1
(  119)     p0(k)=buffer1(k,5)*coef1
(  120)     tabs0(k)=buffer1(k,6)*coef1
(  121)     tke0(k)=buffer1(k,7)*coef1
(  122)     qn0(k)=buffer1(k,8)*coef1
(  123)     qp0(k)=buffer1(k,9)*coef1
(  124)   end do
(  125) 
(  126) end if ! dompi
(  127) 
(  128) qv0 = q0 - qn0
(  129) 
(  130) !=====================================================
(  131) ! UW ADDITIONS
(  132) 
(  133) ! FIND VERTICAL INDICES OF 850MB, COMPUTE SWVP
(  134) k850 = 1
(  135) do k = 1,nzm
(  136)    if(pres(k).le.850.) then
(  137)       k850 = k
(  138)       EXIT
(  139)    end if
(  140) end do
(  141) 
(  142) do k=1,nzm
(  143)   coef1 = rho(k)*dz*adz(k)*dtfactor
(  144)   do j=1,ny
(  145)     do i=1,nx
(  146) 






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 5

(  147)      ! Saturated water vapor path with respect to water. Can be used
(  148)      ! with water vapor path (= pw) to compute column-average
(  149)      ! relative humidity.   
(  150)      swvp_xy(i,j) = swvp_xy(i,j)+qsatw_crm(tabs(i,j,k),pres(k))*coef1
(  151)     end do
(  152)   end do
(  153) end do ! k
(  154) 
(  155) ! ACCUMULATE AVERAGES OF TWO-DIMENSIONAL STATISTICS
(  156) do j=1,ny
(  157)  do i=1,nx
(  158)   psfc_xy(i,j) = psfc_xy(i,j) + (100.*pres(1) + p(i,j,1))*dtfactor  
(  159) 
(  160)   ! 850 mbar horizontal winds
(  161)   u850_xy(i,j) = u850_xy(i,j) + u(i,j,k850)*dtfactor  
(  162)   v850_xy(i,j) = v850_xy(i,j) + v(i,j,k850)*dtfactor  
(  163) 
(  164)  end do
(  165) end do
(  166) 
(  167) ! COMPUTE CLOUD/ECHO HEIGHTS AS WELL AS CLOUD TOP TEMPERATURE
(  168) ! WHERE CLOUD TOP IS DEFINED AS THE HIGHEST MODEL LEVEL WITH A
(  169) ! CONDENSATE PATH OF 0.01 kg/m2 ABOVE.  ECHO TOP IS THE HIGHEST LEVEL
(  170) ! WHERE THE PRECIPITATE MIXING RATIO > 0.001 G/KG.
(  171) 
(  172) ! initially, zero out heights and set cloudtoptemp to SST
(  173) cloudtopheight = 0.
(  174) cloudtoptemp = sstxy(1:nx,1:ny)
(  175) echotopheight = 0.
(  176) do j = 1,ny
(  177)    do i = 1,nx
(  178)       ! FIND CLOUD TOP HEIGHT
(  179)       tmp_lwp = 0.
(  180)       do k = nzm,1,-1
(  181)          tmp_lwp = tmp_lwp + (qcl(i,j,k)+qci(i,j,k))*rho(k)*dz*adz(k)
(  182)          if (tmp_lwp.gt.0.01) then
(  183)             cloudtopheight(i,j) = z(k)
(  184)             cloudtoptemp(i,j) = tabs(i,j,k)
(  185)             EXIT
(  186)          end if
(  187)       end do
(  188)       ! FIND ECHO TOP HEIGHT
(  189)       do k = nzm,1,-1
(  190)          if (qpl(i,j,k)+qpi(i,j,k).gt.1.e-6) then
(  191)             echotopheight(i,j) = z(k)
(  192)             EXIT
(  193)          end if
(  194)       end do
(  195)    end do
(  196) end do
(  197) 
(  198) ! END UW ADDITIONS
(  199) !=====================================================
(  200) 
(  201) ! recompute pressure levels, except at restart (saved levels are used).
(  202) !if(dtfactor.ge.0.) call pressz()   ! recompute pressure levels
(  203) 
(  204) end subroutine diagnose






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 6

(    1) # 1 "diagnose.F90"
(    1) subroutine diagnose
(    2) # 3 "diagnose.F90"
(    3) !************* LICENSE START *****************
(    4) !
(    5) ! Copyright 2015 Marat Khairoutdinov 
(    6) ! School of Marine & Atmospheric Sciences
(    7) ! Stony Brook University
(    8) ! This software is distributed under the terms of
(    9) ! the Apache License version 2.0.
(   10) !
(   11) !************** LICENSE END ******************
(   12) # 13 "diagnose.F90"
(   13) ! Diagnose some useful stuff
(   14) # 15 "diagnose.F90"
(   15) use vars
(   16) use real_size
(   17) use params
(   18) implicit none
(   19) # 20 "diagnose.F90"
(   20) integer i,j,k,kb,kc,k200,k500,k850
(   21) double precision coef, coef1, buffer(nzm,9), buffer1(nzm,9)
(   22) real(RR) omn, omp, tmp_lwp
(   23) # 24 "diagnose.F90"
(   24) coef = 1./float(nx*ny)
(   25) # 27 "diagnose.F90"
(   27) k200 = nzm
(   28) # 29 "diagnose.F90"
(   29) do k=1,nzm
(   30)   u0(k)=0.
(   31)   v0(k)=0.
(   32)   t01(k) = tabs0(k)
(   33)   q01(k) = q0(k)
(   34)   t0(k)=0.
(   35)   tabs0(k)=0.
(   36)   q0(k)=0.
(   37)   qn0(k)=0.
(   38)   qp0(k)=0.
(   39)   p0(k)=0.
(   40)   tke0(k)=0.
(   41)   kc=min(nzm,k+1)
(   42)   kb=max(1,k-1)
(   43)   if(pres(kc).le.200..and.pres(kb).gt.200.) k200=k
(   44)   coef1 = rho(k)*dz*adz(k)*dtfactor
(   45)   do j=1,ny
(   46)     do i=1,nx
(   47)      tabs(i,j,k) = t(i,j,k)-gamaz(k)+ fac_cond * (qcl(i,j,k)+qpl(i,j,k)) +&
(   48)                                   fac_sub *(qci(i,j,k) + qpi(i,j,k))
(   49)      u0(k)=u0(k)+u(i,j,k)
(   50)      v0(k)=v0(k)+v(i,j,k)
(   51)      p0(k)=p0(k)+p(i,j,k)
(   52)      t0(k)=t0(k)+t(i,j,k)
(   53)      tabs0(k)=tabs0(k)+tabs(i,j,k)
(   54)      q0(k)=q0(k)+qv(i,j,k)+qcl(i,j,k)+qci(i,j,k)
(   55)      qn0(k) = qn0(k) + qcl(i,j,k) + qci(i,j,k)
(   56)      qp0(k) = qp0(k) + qpl(i,j,k) + qpi(i,j,k)
(   57)      tke0(k)=tke0(k)+tke(i,j,k)
(   58) # 59 "diagnose.F90"






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 7

(   59)      pw_xy(i,j) = pw_xy(i,j)+qv(i,j,k)*coef1
(   60)      cw_xy(i,j) = cw_xy(i,j)+qcl(i,j,k)*coef1
(   61)      iw_xy(i,j) = iw_xy(i,j)+qci(i,j,k)*coef1
(   62) # 63 "diagnose.F90"
(   63)     end do
(   64)   end do
(   65)   u0(k)=u0(k)*coef
(   66)   v0(k)=v0(k)*coef
(   67)   t0(k)=t0(k)*coef
(   68)   tabs0(k)=tabs0(k)*coef
(   69)   q0(k)=q0(k)*coef
(   70)   qn0(k)=qn0(k)*coef
(   71)   qp0(k)=qp0(k)*coef
(   72)   p0(k)=p0(k)*coef
(   73)   tke0(k)=tke0(k)*coef
(   74) # 75 "diagnose.F90"
(   75) end do ! k
(   76) # 77 "diagnose.F90"
(   77) k500 = nzm
(   78) do k = 1,nzm
(   79)    if((pres(kc).le.500.).and.(pres(k).gt.500.)) then
(   80)       if ((500.-pres(kc)).lt.(pres(k)-500.))then
(   81)          k500=kc
(   82)       else
(   83)          k500=k
(   84)       end if
(   85)    end if
(   86) end do
(   87) # 89 "diagnose.F90"
(   89) do j=1,ny
(   90)  do i=1,nx
(   91)   usfc_xy(i,j) = usfc_xy(i,j) + u(i,j,1)*dtfactor  
(   92)   vsfc_xy(i,j) = vsfc_xy(i,j) + v(i,j,1)*dtfactor  
(   93)   u200_xy(i,j) = u200_xy(i,j) + u(i,j,k200)*dtfactor  
(   94)   v200_xy(i,j) = v200_xy(i,j) + v(i,j,k200)*dtfactor  
(   95)   w500_xy(i,j) = w500_xy(i,j) + w(i,j,k500)*dtfactor
(   96)  end do
(   97) end do
(   98) # 99 "diagnose.F90"
(   99) if(dompi) then
(  100) # 101 "diagnose.F90"
(  101)   coef1 = 1./float(nsubdomains)
(  102)   do k=1,nzm
(  103)     buffer(k,1) = u0(k)
(  104)     buffer(k,2) = v0(k)
(  105)     buffer(k,3) = t0(k)
(  106)     buffer(k,4) = q0(k)
(  107)     buffer(k,5) = p0(k)
(  108)     buffer(k,6) = tabs0(k)
(  109)     buffer(k,7) = tke0(k)
(  110)     buffer(k,8) = qn0(k)
(  111)     buffer(k,9) = qp0(k)
(  112)   end do
(  113)   call task_sum_real8(buffer,buffer1,nzm*9)
(  114)   do k=1,nzm
(  115)     u0(k)=buffer1(k,1)*coef1
(  116)     v0(k)=buffer1(k,2)*coef1
(  117)     t0(k)=buffer1(k,3)*coef1






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 8

(  118)     q0(k)=buffer1(k,4)*coef1
(  119)     p0(k)=buffer1(k,5)*coef1
(  120)     tabs0(k)=buffer1(k,6)*coef1
(  121)     tke0(k)=buffer1(k,7)*coef1
(  122)     qn0(k)=buffer1(k,8)*coef1
(  123)     qp0(k)=buffer1(k,9)*coef1
(  124)   end do
(  125) # 126 "diagnose.F90"
(  126) end if ! dompi
(  127) # 128 "diagnose.F90"
(  128) qv0 = q0 - qn0
(  129) # 130 "diagnose.F90"
(  130) !=====================================================
(  131) ! UW ADDITIONS
(  132) # 133 "diagnose.F90"
(  133) ! FIND VERTICAL INDICES OF 850MB, COMPUTE SWVP
(  134) k850 = 1
(  135) do k = 1,nzm
(  136)    if(pres(k).le.850.) then
(  137)       k850 = k
(  138)       EXIT
(  139)    end if
(  140) end do
(  141) # 142 "diagnose.F90"
(  142) do k=1,nzm
(  143)   coef1 = rho(k)*dz*adz(k)*dtfactor
(  144)   do j=1,ny
(  145)     do i=1,nx
(  146) # 147 "diagnose.F90"
(  147)      ! Saturated water vapor path with respect to water. Can be used
(  148)      ! with water vapor path (= pw) to compute column-average
(  149)      ! relative humidity.   
(  150)      swvp_xy(i,j) = swvp_xy(i,j)+qsatw_crm(tabs(i,j,k),pres(k))*coef1
(  151)     end do
(  152)   end do
(  153) end do ! k
(  154) # 155 "diagnose.F90"
(  155) ! ACCUMULATE AVERAGES OF TWO-DIMENSIONAL STATISTICS
(  156) do j=1,ny
(  157)  do i=1,nx
(  158)   psfc_xy(i,j) = psfc_xy(i,j) + (100.*pres(1) + p(i,j,1))*dtfactor  
(  159) # 160 "diagnose.F90"
(  160)   ! 850 mbar horizontal winds
(  161)   u850_xy(i,j) = u850_xy(i,j) + u(i,j,k850)*dtfactor  
(  162)   v850_xy(i,j) = v850_xy(i,j) + v(i,j,k850)*dtfactor  
(  163) # 164 "diagnose.F90"
(  164)  end do
(  165) end do
(  166) # 167 "diagnose.F90"
(  167) ! COMPUTE CLOUD/ECHO HEIGHTS AS WELL AS CLOUD TOP TEMPERATURE
(  168) ! WHERE CLOUD TOP IS DEFINED AS THE HIGHEST MODEL LEVEL WITH A
(  169) ! CONDENSATE PATH OF 0.01 kg/m2 ABOVE.  ECHO TOP IS THE HIGHEST LEVEL
(  170) ! WHERE THE PRECIPITATE MIXING RATIO > 0.001 G/KG.
(  171) # 172 "diagnose.F90"
(  172) ! initially, zero out heights and set cloudtoptemp to SST
(  173) cloudtopheight = 0.
(  174) cloudtoptemp = sstxy(1:nx,1:ny)
(  175) echotopheight = 0.






NVFORTRAN (Version     23.1)          02/24/2023  13:57:15      page 9

(  176) do j = 1,ny
(  177)    do i = 1,nx
(  178)       ! FIND CLOUD TOP HEIGHT
(  179)       tmp_lwp = 0.
(  180)       do k = nzm,1,-1
(  181)          tmp_lwp = tmp_lwp + (qcl(i,j,k)+qci(i,j,k))*rho(k)*dz*adz(k)
(  182)          if (tmp_lwp.gt.0.01) then
(  183)             cloudtopheight(i,j) = z(k)
(  184)             cloudtoptemp(i,j) = tabs(i,j,k)
(  185)             EXIT
(  186)          end if
(  187)       end do
(  188)       ! FIND ECHO TOP HEIGHT
(  189)       do k = nzm,1,-1
(  190)          if (qpl(i,j,k)+qpi(i,j,k).gt.1.e-6) then
(  191)             echotopheight(i,j) = z(k)
(  192)             EXIT
(  193)          end if
(  194)       end do
(  195)    end do
(  196) end do
(  197) # 198 "diagnose.F90"
(  198) ! END UW ADDITIONS
(  199) !=====================================================
(  200) # 201 "diagnose.F90"
(  201) ! recompute pressure levels, except at restart (saved levels are used).
(  202) !if(dtfactor.ge.0.) call pressz()   ! recompute pressure levels
(  203) # 204 "diagnose.F90"
(  204) end subroutine diagnose
