


NVFORTRAN (Version     23.1)          02/24/2023  13:57:51      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:57:51      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: kurant.F90

(    1) 
(    2) subroutine kurant
(    3) 
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) 
(   14) use vars
(   15) use real_size
(   16) 
(   17) implicit none
(   18) 
(   19) integer i, j, k, ncycle1(1),ncycle2(1)
(   20) real(RR) wm(nz)  ! maximum vertical wind velocity
(   21) real(RR) uhm(nz) ! maximum horizontal wind velocity
(   22) real(RR) tkhmax(nz)
(   23) real(RR) cfl
(   24) 
(   25) ncycle = 1
(   26) 
(   27) wm(nz)=0.
(   28) do k = 1,nzm
(   29)  tkhmax(k) = maxval(tkh(1:nx,1:ny,k))
(   30)  wm(k) = maxval(abs(w(1:nx,1:ny,k)))






NVFORTRAN (Version     23.1)          02/24/2023  13:57:51      page 3

(   31)  uhm(k) = sqrt(maxval(u(1:nx,1:ny,k)**2+YES3D*v(1:nx,1:ny,k)**2))
(   32) end do
(   33) w_max=max(w_max,maxval(w(1:nx,1:ny,1:nz)))
(   34) 
(   35) cfl = 0.
(   36) do k=1,nzm
(   37)   cfl = max(cfl,uhm(k)*dt*sqrt((1./dx)**2+YES3D*(1./dy)**2), &
(   38)                    max(wm(k),wm(k+1))*dt/(dz*adzw(k)) )
(   39)   cfl = max(cfl, &
(   40)      0.5*tkhmax(k)*grdf_z(k)*dt/(dz*adzw(k))**2, &
(   41)      0.5*tkhmax(k)*grdf_x(k)*dt/dx**2, &
(   42)      YES3D*0.5*tkhmax(k)*grdf_y(k)*dt/dy**2)
(   43) end do
(   44) 
(   45) ncycle = max(1,ceiling(cfl/0.7))
(   46) 
(   47) if(dompi) then
(   48)   ncycle1(1)=ncycle
(   49)   call task_max_integer(ncycle1,ncycle2,1)
(   50)   ncycle=ncycle2(1)
(   51) end if
(   52) if(ncycle.gt.ncycle_max) then
(   53)    if(masterproc) print *,'the number of cycles exceeded ', ncycle_max
(   54) !   call task_abort()
(   55) end if
(   56) 
(   57) end subroutine kurant





































NVFORTRAN (Version     23.1)          02/24/2023  13:57:51      page 4

(    1) # 1 "kurant.F90"
(    1) # 2 "kurant.F90"
(    2) subroutine kurant
(    3) # 4 "kurant.F90"
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) # 14 "kurant.F90"
(   14) use vars
(   15) use real_size
(   16) # 17 "kurant.F90"
(   17) implicit none
(   18) # 19 "kurant.F90"
(   19) integer i, j, k, ncycle1(1),ncycle2(1)
(   20) real(RR) wm(nz)  ! maximum vertical wind velocity
(   21) real(RR) uhm(nz) ! maximum horizontal wind velocity
(   22) real(RR) tkhmax(nz)
(   23) real(RR) cfl
(   24) # 25 "kurant.F90"
(   25) ncycle = 1
(   26) # 27 "kurant.F90"
(   27) wm(nz)=0.
(   28) do k = 1,nzm
(   29)  tkhmax(k) = maxval(tkh(1:nx,1:ny,k))
(   30)  wm(k) = maxval(abs(w(1:nx,1:ny,k)))
(   31)  uhm(k) = sqrt(maxval(u(1:nx,1:ny,k)**2+YES3D*v(1:nx,1:ny,k)**2))
(   32) end do
(   33) w_max=max(w_max,maxval(w(1:nx,1:ny,1:nz)))
(   34) # 35 "kurant.F90"
(   35) cfl = 0.
(   36) do k=1,nzm
(   37)   cfl = max(cfl,uhm(k)*dt*sqrt((1./dx)**2+YES3D*(1./dy)**2), &
(   38)                    max(wm(k),wm(k+1))*dt/(dz*adzw(k)) )
(   39)   cfl = max(cfl, &
(   40)      0.5*tkhmax(k)*grdf_z(k)*dt/(dz*adzw(k))**2, &
(   41)      0.5*tkhmax(k)*grdf_x(k)*dt/dx**2, &
(   42)      YES3D*0.5*tkhmax(k)*grdf_y(k)*dt/dy**2)
(   43) end do
(   44) # 45 "kurant.F90"
(   45) ncycle = max(1,ceiling(cfl/0.7))
(   46) # 47 "kurant.F90"
(   47) if(dompi) then
(   48)   ncycle1(1)=ncycle
(   49)   call task_max_integer(ncycle1,ncycle2,1)
(   50)   ncycle=ncycle2(1)
(   51) end if
(   52) if(ncycle.gt.ncycle_max) then
(   53)    if(masterproc) print *,'the number of cycles exceeded ', ncycle_max
(   54) !   call task_abort()
(   55) end if
(   56) # 57 "kurant.F90"
(   57) end subroutine kurant



