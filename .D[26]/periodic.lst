


NVFORTRAN (Version     23.1)          02/24/2023  13:58:38      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:38      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: periodic.F90

(    1) 
(    2) subroutine periodic(flag)
(    3) 
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) 
(   14) use vars
(   15) use microphysics
(   16) use crmtracers
(   17) implicit none
(   18) 
(   19) integer flag, i
(   20) 
(   21) if(flag.eq.0) then
(   22) 
(   23)   call bound_exchange(u,dimx1_u,dimx2_u,dimy1_u,dimy2_u,nzm,1,1,1,1,1)
(   24)   call bound_exchange(v,dimx1_v,dimx2_v,dimy1_v,dimy2_v,nzm,1,1,1,1,2)
(   25)    ! use w at the top level  - 0s anyway - to exchange the sst boundaries (for
(   26)    ! surface fluxes call
(   27)   w(1:nx,1:ny,nz) = sstxy(1:nx,1:ny)
(   28)   call bound_exchange(w,dimx1_w,dimx2_w,dimy1_w,dimy2_w,nz,1,1,1,1,3)
(   29)   sstxy(0:nx,1-YES3D:ny) = w(0:nx,1-YES3D:ny,nz)
(   30)   w(0:nx+1,1-YES3D:ny+YES3D,nz) = 0.






NVFORTRAN (Version     23.1)          02/24/2023  13:58:38      page 3

(   31) 
(   32) endif
(   33) 
(   34) if(flag.eq.1) then
(   35) 
(   36)   call bound_exchange(u,dimx1_u,dimx2_u,dimy1_u,dimy2_u,nzm,2,3,2,2,1)
(   37)   call bound_exchange(v,dimx1_v,dimx2_v,dimy1_v,dimy2_v,nzm,2,2,2,3,2)
(   38)   call bound_exchange(w,dimx1_w,dimx2_w,dimy1_w,dimy2_w,nz,2,2,2,2,3)
(   39) 
(   40) endif
(   41) 
(   42) if(flag.eq.2) then
(   43) 
(   44)  call bound_exchange(t,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,4)
(   45)  if(dosgs.and..not.dosmagor.or.doscalar) &
(   46)      call bound_exchange(tke,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,5)
(   47)  call bound_exchange(tk,0,nxp1,1-YES3D,nyp1,nzm,1,1,1,1,6)
(   48)  call bound_exchange(tkh,0,nxp1,1-YES3D,nyp1,nzm,1,1,1,1,7)
(   49)  do i = 1,nmicro_fields
(   50)     if(   i.eq.index_water_vapor             &
(   51)      .or. docloud.and.flag_precip(i).ne.1    &
(   52)      .or. doprecip.and.flag_precip(i).eq.1 ) &
(   53)      call bound_exchange(micro_field(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,7+i)
(   54)  end do
(   55)  if(dotracers) then
(   56)    do i=1,ntracers
(   57)      call bound_exchange(tracer(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,7+nmicro_fields+i)
(   58)    end do
(   59)  end if
(   60) 
(   61) endif
(   62)         
(   63) if(flag.eq.3) then
(   64)         
(   65)  call bound_exchange(t,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,4)
(   66)  if(dosgs.and..not.dosmagor.or.doscalar) &
(   67)      call bound_exchange(tke,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,5)
(   68)  do i = 1,nmicro_fields
(   69)     if(   i.eq.index_water_vapor             &
(   70)      .or. docloud.and.flag_precip(i).ne.1    &
(   71)      .or. doprecip.and.flag_precip(i).eq.1 ) &
(   72)      call bound_exchange(micro_field(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,7+i)
(   73)  end do
(   74)  if(dotracers) then
(   75)    do i=1,ntracers
(   76)      call bound_exchange(tracer(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,7+nmicro_fields+i)
(   77)    end do
(   78)  end if
(   79)         
(   80) endif
(   81)         
(   82)         
(   83) end subroutine periodic
(   84) 










NVFORTRAN (Version     23.1)          02/24/2023  13:58:38      page 4

(    1) # 1 "periodic.F90"
(    1) # 2 "periodic.F90"
(    2) subroutine periodic(flag)
(    3) # 4 "periodic.F90"
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) # 14 "periodic.F90"
(   14) use vars
(   15) use microphysics
(   16) use crmtracers
(   17) implicit none
(   18) # 19 "periodic.F90"
(   19) integer flag, i
(   20) # 21 "periodic.F90"
(   21) if(flag.eq.0) then
(   22) # 23 "periodic.F90"
(   23)   call bound_exchange(u,dimx1_u,dimx2_u,dimy1_u,dimy2_u,nzm,1,1,1,1,1)
(   24)   call bound_exchange(v,dimx1_v,dimx2_v,dimy1_v,dimy2_v,nzm,1,1,1,1,2)
(   25)    ! use w at the top level  - 0s anyway - to exchange the sst boundaries (for
(   26)    ! surface fluxes call
(   27)   w(1:nx,1:ny,nz) = sstxy(1:nx,1:ny)
(   28)   call bound_exchange(w,dimx1_w,dimx2_w,dimy1_w,dimy2_w,nz,1,1,1,1,3)
(   29)   sstxy(0:nx,1-YES3D:ny) = w(0:nx,1-YES3D:ny,nz)
(   30)   w(0:nx+1,1-YES3D:ny+YES3D,nz) = 0.
(   31) # 32 "periodic.F90"
(   32) endif
(   33) # 34 "periodic.F90"
(   34) if(flag.eq.1) then
(   35) # 36 "periodic.F90"
(   36)   call bound_exchange(u,dimx1_u,dimx2_u,dimy1_u,dimy2_u,nzm,2,3,2,2,1)
(   37)   call bound_exchange(v,dimx1_v,dimx2_v,dimy1_v,dimy2_v,nzm,2,2,2,3,2)
(   38)   call bound_exchange(w,dimx1_w,dimx2_w,dimy1_w,dimy2_w,nz,2,2,2,2,3)
(   39) # 40 "periodic.F90"
(   40) endif
(   41) # 42 "periodic.F90"
(   42) if(flag.eq.2) then
(   43) # 44 "periodic.F90"
(   44)  call bound_exchange(t,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,4)
(   45)  if(dosgs.and..not.dosmagor.or.doscalar) &
(   46)      call bound_exchange(tke,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,5)
(   47)  call bound_exchange(tk,0,nxp1,1-YES3D,nyp1,nzm,1,1,1,1,6)
(   48)  call bound_exchange(tkh,0,nxp1,1-YES3D,nyp1,nzm,1,1,1,1,7)
(   49)  do i = 1,nmicro_fields
(   50)     if(   i.eq.index_water_vapor             &
(   51)      .or. docloud.and.flag_precip(i).ne.1    &
(   52)      .or. doprecip.and.flag_precip(i).eq.1 ) &
(   53)      call bound_exchange(micro_field(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,7+i)
(   54)  end do
(   55)  if(dotracers) then
(   56)    do i=1,ntracers
(   57)      call bound_exchange(tracer(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,3,3,3,3,7+nmicro_fields+i)






NVFORTRAN (Version     23.1)          02/24/2023  13:58:38      page 5

(   58)    end do
(   59)  end if
(   60) # 61 "periodic.F90"
(   61) endif
(   62)         
(   63) if(flag.eq.3) then
(   64)         
(   65)  call bound_exchange(t,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,4)
(   66)  if(dosgs.and..not.dosmagor.or.doscalar) &
(   67)      call bound_exchange(tke,dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,5)
(   68)  do i = 1,nmicro_fields
(   69)     if(   i.eq.index_water_vapor             &
(   70)      .or. docloud.and.flag_precip(i).ne.1    &
(   71)      .or. doprecip.and.flag_precip(i).eq.1 ) &
(   72)      call bound_exchange(micro_field(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,7+i)
(   73)  end do
(   74)  if(dotracers) then
(   75)    do i=1,ntracers
(   76)      call bound_exchange(tracer(:,:,:,i),dimx1_s,dimx2_s,dimy1_s,dimy2_s,nzm,1,1,1,1,7+nmicro_fields+i)
(   77)    end do
(   78)  end if
(   79)         
(   80) endif
(   81)         
(   82)         
(   83) end subroutine periodic
