


NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: bound_exchange.F90

(    1) subroutine bound_exchange(f,dimx1,dimx2,dimy1,dimy2,dimz,i_1, i_2, j_1, j_2, id)
(    2) 
(    3) !************* LICENSE START *****************
(    4) !
(    5) ! Copyright 2015 Marat Khairoutdinov 
(    6) ! School of Marine & Atmospheric Sciences
(    7) ! Stony Brook University
(    8) ! This software is distributed under the terms of
(    9) ! the Apache License version 2.0.
(   10) !
(   11) !************** LICENSE END ******************
(   12) 
(   13) ! periodic boundary exchange
(   14) 
(   15) 
(   16) use grid
(   17) use real_size
(   18) implicit none
(   19) 
(   20) integer dimx1, dimx2, dimy1, dimy2, dimz
(   21) integer i_1, i_2, j_1, j_2
(   22) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz)
(   23) integer id   ! id of the sent field (dummy variable)
(   24) 
(   25) real(RR) buffer((nx+ny)*3*nz)  ! buffer for sending data
(   26) 
(   27) integer i, j, k, n
(   28) integer i1, i2, j1, j2
(   29) 
(   30) i1 = i_1 - 1






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 3

(   31) i2 = i_2 - 1
(   32) j1 = j_1 - 1
(   33) j2 = j_2 - 1
(   34) 
(   35) !----------------------------------------------------------------------
(   36) !  Send buffers to neighbors
(   37) !----------------------------------------------------------------------
(   38) 
(   39) 
(   40) if(RUN3D) then
(   41) 
(   42) ! "North" -> "South":	
(   43) 
(   44)      n=0
(   45)      do k=1,dimz
(   46)        do j=ny-j1,ny
(   47)          do i=1,nx
(   48)            n = n+1
(   49)            buffer(n) = f(i,j,k)
(   50)          end do
(   51)        end do
(   52)      end do
(   53)      n=0
(   54)      do k=1,dimz
(   55)        do j=-j1,0
(   56)          do i=1,nx
(   57)            n = n+1
(   58)            f(i,j,k) = buffer(n)
(   59)          end do
(   60)        end do
(   61)      end do
(   62) 
(   63) ! "North-East" -> "South-West":	
(   64) 
(   65)      n=0
(   66)      do k=1,dimz
(   67)        do j=ny-j1,ny
(   68)          do i=nx-i1,nx
(   69)            n = n+1
(   70)            buffer(n) = f(i,j,k)
(   71)          end do
(   72)        end do
(   73)      end do
(   74)      n=0
(   75)      do k=1,dimz
(   76)        do j=-j1,0
(   77)          do i=-i1,0
(   78)            n = n+1
(   79)            f(i,j,k) = buffer(n)
(   80)          end do
(   81)        end do
(   82)      end do
(   83) 
(   84) ! "South-East" -> "North-West":
(   85) 
(   86)      n=0
(   87)      do k=1,dimz
(   88)        do j=1,1+j2






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 4

(   89)          do i=nx-i1,nx
(   90)            n = n+1
(   91)            buffer(n) = f(i,j,k)
(   92)          end do
(   93)        end do
(   94)      end do
(   95)      n=0
(   96)      do k=1,dimz
(   97)        do j=nyp1,nyp1+j2
(   98)          do i=-i1,0
(   99)            n = n+1
(  100)            f(i,j,k) = buffer(n)
(  101)          end do
(  102)        end do
(  103)      end do
(  104) 
(  105) ! "South" -> "North":
(  106) 
(  107)      n=0
(  108)      do k=1,dimz
(  109)        do j=1,1+j2
(  110)          do i=1,nx
(  111)            n = n+1
(  112)            buffer(n) = f(i,j,k) 
(  113)          end do
(  114)        end do
(  115)      end do
(  116)      n=0
(  117)      do k=1,dimz
(  118)        do j=nyp1,nyp1+j2
(  119)          do i=1,nx
(  120)            n = n+1
(  121)            f(i,j,k) = buffer(n)
(  122)          end do
(  123)        end do
(  124)      end do
(  125) 
(  126) ! "South-West" -> "North-East":
(  127)   
(  128)      n=0
(  129)      do k=1,dimz
(  130)        do j=1,1+j2
(  131)          do i=1,1+i2
(  132)            n = n+1
(  133)            buffer(n) = f(i,j,k) 
(  134)          end do
(  135)        end do
(  136)      end do
(  137)      n=0
(  138)      do k=1,dimz
(  139)        do j=nyp1,nyp1+j2
(  140)          do i=nxp1,nxp1+i2
(  141)            n = n+1
(  142)            f(i,j,k) = buffer(n)
(  143)          end do
(  144)        end do
(  145)      end do
(  146) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 5

(  147) 
(  148) ! To "North-West" -> "South-East":
(  149)   
(  150)      n=0
(  151)      do k=1,dimz
(  152)        do j=ny-j1,ny
(  153)          do i=1,1+i2
(  154)            n = n+1
(  155)            buffer(n) = f(i,j,k)
(  156)          end do
(  157)        end do
(  158)      end do
(  159)      n=0
(  160)      do k=1,dimz
(  161)        do j=-j1,0
(  162)          do i=nxp1,nxp1+i2
(  163)            n = n+1
(  164)            f(i,j,k) = buffer(n)
(  165)          end do
(  166)        end do
(  167)      end do
(  168)      
(  169) 
(  170) endif
(  171) 
(  172) !  "East" -> "West":
(  173)   
(  174)      n=0
(  175)      do k=1,dimz
(  176)        do j=1,ny
(  177)          do i=nx-i1,nx
(  178)            n = n+1
(  179)            buffer(n) = f(i,j,k)
(  180)          end do
(  181)        end do
(  182)      end do
(  183)      n=0
(  184)      do k=1,dimz
(  185)        do j=1,ny
(  186)          do i=-i1,0
(  187)            n = n+1
(  188)            f(i,j,k) = buffer(n)
(  189)          end do
(  190)        end do
(  191)      end do
(  192) 
(  193) ! "West" -> "East":
(  194) 
(  195)      n=0
(  196)      do k=1,dimz
(  197)        do j=1,ny
(  198)          do i=1,1+i2
(  199)            n = n+1
(  200)            buffer(n) = f(i,j,k)
(  201)          end do
(  202)        end do
(  203)      end do
(  204)      n=0






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 6

(  205)      do k=1,dimz
(  206)        do j=1,ny
(  207)          do i=nxp1,nxp1+i2
(  208)            n = n+1
(  209)            f(i,j,k) = buffer(n)
(  210)          end do
(  211)        end do
(  212)      end do
(  213) 
(  214) 
(  215) end subroutine bound_exchange





















































NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 7

(    1) # 1 "bound_exchange.F90"
(    1) subroutine bound_exchange(f,dimx1,dimx2,dimy1,dimy2,dimz,i_1, i_2, j_1, j_2, id)
(    2) # 3 "bound_exchange.F90"
(    3) !************* LICENSE START *****************
(    4) !
(    5) ! Copyright 2015 Marat Khairoutdinov 
(    6) ! School of Marine & Atmospheric Sciences
(    7) ! Stony Brook University
(    8) ! This software is distributed under the terms of
(    9) ! the Apache License version 2.0.
(   10) !
(   11) !************** LICENSE END ******************
(   12) # 13 "bound_exchange.F90"
(   13) ! periodic boundary exchange
(   14) # 16 "bound_exchange.F90"
(   16) use grid
(   17) use real_size
(   18) implicit none
(   19) # 20 "bound_exchange.F90"
(   20) integer dimx1, dimx2, dimy1, dimy2, dimz
(   21) integer i_1, i_2, j_1, j_2
(   22) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz)
(   23) integer id   ! id of the sent field (dummy variable)
(   24) # 25 "bound_exchange.F90"
(   25) real(RR) buffer((nx+ny)*3*nz)  ! buffer for sending data
(   26) # 27 "bound_exchange.F90"
(   27) integer i, j, k, n
(   28) integer i1, i2, j1, j2
(   29) # 30 "bound_exchange.F90"
(   30) i1 = i_1 - 1
(   31) i2 = i_2 - 1
(   32) j1 = j_1 - 1
(   33) j2 = j_2 - 1
(   34) # 35 "bound_exchange.F90"
(   35) !----------------------------------------------------------------------
(   36) !  Send buffers to neighbors
(   37) !----------------------------------------------------------------------
(   38) # 40 "bound_exchange.F90"
(   40) if(RUN3D) then
(   41) # 42 "bound_exchange.F90"
(   42) ! "North" -> "South":	
(   43) # 44 "bound_exchange.F90"
(   44)      n=0
(   45)      do k=1,dimz
(   46)        do j=ny-j1,ny
(   47)          do i=1,nx
(   48)            n = n+1
(   49)            buffer(n) = f(i,j,k)
(   50)          end do
(   51)        end do
(   52)      end do
(   53)      n=0
(   54)      do k=1,dimz
(   55)        do j=-j1,0
(   56)          do i=1,nx
(   57)            n = n+1
(   58)            f(i,j,k) = buffer(n)
(   59)          end do






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 8

(   60)        end do
(   61)      end do
(   62) # 63 "bound_exchange.F90"
(   63) ! "North-East" -> "South-West":	
(   64) # 65 "bound_exchange.F90"
(   65)      n=0
(   66)      do k=1,dimz
(   67)        do j=ny-j1,ny
(   68)          do i=nx-i1,nx
(   69)            n = n+1
(   70)            buffer(n) = f(i,j,k)
(   71)          end do
(   72)        end do
(   73)      end do
(   74)      n=0
(   75)      do k=1,dimz
(   76)        do j=-j1,0
(   77)          do i=-i1,0
(   78)            n = n+1
(   79)            f(i,j,k) = buffer(n)
(   80)          end do
(   81)        end do
(   82)      end do
(   83) # 84 "bound_exchange.F90"
(   84) ! "South-East" -> "North-West":
(   85) # 86 "bound_exchange.F90"
(   86)      n=0
(   87)      do k=1,dimz
(   88)        do j=1,1+j2
(   89)          do i=nx-i1,nx
(   90)            n = n+1
(   91)            buffer(n) = f(i,j,k)
(   92)          end do
(   93)        end do
(   94)      end do
(   95)      n=0
(   96)      do k=1,dimz
(   97)        do j=nyp1,nyp1+j2
(   98)          do i=-i1,0
(   99)            n = n+1
(  100)            f(i,j,k) = buffer(n)
(  101)          end do
(  102)        end do
(  103)      end do
(  104) # 105 "bound_exchange.F90"
(  105) ! "South" -> "North":
(  106) # 107 "bound_exchange.F90"
(  107)      n=0
(  108)      do k=1,dimz
(  109)        do j=1,1+j2
(  110)          do i=1,nx
(  111)            n = n+1
(  112)            buffer(n) = f(i,j,k) 
(  113)          end do
(  114)        end do
(  115)      end do
(  116)      n=0
(  117)      do k=1,dimz






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 9

(  118)        do j=nyp1,nyp1+j2
(  119)          do i=1,nx
(  120)            n = n+1
(  121)            f(i,j,k) = buffer(n)
(  122)          end do
(  123)        end do
(  124)      end do
(  125) # 126 "bound_exchange.F90"
(  126) ! "South-West" -> "North-East":
(  127)   
(  128)      n=0
(  129)      do k=1,dimz
(  130)        do j=1,1+j2
(  131)          do i=1,1+i2
(  132)            n = n+1
(  133)            buffer(n) = f(i,j,k) 
(  134)          end do
(  135)        end do
(  136)      end do
(  137)      n=0
(  138)      do k=1,dimz
(  139)        do j=nyp1,nyp1+j2
(  140)          do i=nxp1,nxp1+i2
(  141)            n = n+1
(  142)            f(i,j,k) = buffer(n)
(  143)          end do
(  144)        end do
(  145)      end do
(  146) # 148 "bound_exchange.F90"
(  148) ! To "North-West" -> "South-East":
(  149)   
(  150)      n=0
(  151)      do k=1,dimz
(  152)        do j=ny-j1,ny
(  153)          do i=1,1+i2
(  154)            n = n+1
(  155)            buffer(n) = f(i,j,k)
(  156)          end do
(  157)        end do
(  158)      end do
(  159)      n=0
(  160)      do k=1,dimz
(  161)        do j=-j1,0
(  162)          do i=nxp1,nxp1+i2
(  163)            n = n+1
(  164)            f(i,j,k) = buffer(n)
(  165)          end do
(  166)        end do
(  167)      end do
(  168)      
(  169) # 170 "bound_exchange.F90"
(  170) endif
(  171) # 172 "bound_exchange.F90"
(  172) !  "East" -> "West":
(  173)   
(  174)      n=0
(  175)      do k=1,dimz
(  176)        do j=1,ny






NVFORTRAN (Version     23.1)          02/24/2023  13:54:51      page 10

(  177)          do i=nx-i1,nx
(  178)            n = n+1
(  179)            buffer(n) = f(i,j,k)
(  180)          end do
(  181)        end do
(  182)      end do
(  183)      n=0
(  184)      do k=1,dimz
(  185)        do j=1,ny
(  186)          do i=-i1,0
(  187)            n = n+1
(  188)            f(i,j,k) = buffer(n)
(  189)          end do
(  190)        end do
(  191)      end do
(  192) # 193 "bound_exchange.F90"
(  193) ! "West" -> "East":
(  194) # 195 "bound_exchange.F90"
(  195)      n=0
(  196)      do k=1,dimz
(  197)        do j=1,ny
(  198)          do i=1,1+i2
(  199)            n = n+1
(  200)            buffer(n) = f(i,j,k)
(  201)          end do
(  202)        end do
(  203)      end do
(  204)      n=0
(  205)      do k=1,dimz
(  206)        do j=1,ny
(  207)          do i=nxp1,nxp1+i2
(  208)            n = n+1
(  209)            f(i,j,k) = buffer(n)
(  210)          end do
(  211)        end do
(  212)      end do
(  213) # 215 "bound_exchange.F90"
(  215) end subroutine bound_exchange
