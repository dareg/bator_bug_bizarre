


NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: damping.F90

(    1) 
(    2) subroutine damping
(    3) 
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) 
(   14) !  "Spange"-layer damping at the domain top region
(   15) 
(   16) use vars
(   17) use real_size
(   18) use microphysics, only: micro_field, index_water_vapor
(   19) implicit none
(   20) 
(   21) real(RR) tau_min    ! minimum damping time-scale (at the top)
(   22) real(RR) tau_max    ! maxim damping time-scale (base of damping layer)
(   23) real(RR) damp_depth ! damping depth as a fraction of the domain height
(   24) !parameter(tau_min=60., tau_max=450., damp_depth=0.4)
(   25) real(RR) tau(nzm)   
(   26) integer i, j, k, n_damp
(   27) 
(   28) tau_min = 3.*dt
(   29) tau_max = 22.*dt
(   30) damp_depth = 0.4






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 3

(   31) 
(   32) if(tau_min.lt.2*dt) then
(   33)    print*,'Error: in damping() tau_min is too small!'
(   34)    call task_abort('damping:')
(   35) end if
(   36) 
(   37) do k=nzm,1,-1
(   38)  if(z(nzm)-z(k).lt.damp_depth*z(nzm)) then 
(   39)    n_damp=nzm-k+1
(   40)  endif
(   41) end do
(   42) 
(   43) do k=nzm,nzm-n_damp,-1
(   44)  tau(k) = tau_min *(tau_max/tau_min)**((z(nzm)-z(k))/(z(nzm)-z(nzm-n_damp)))
(   45)  tau(k)=1./tau(k)
(   46) end do
(   47) 
(   48) do k = nzm, nzm-n_damp, -1
(   49)    do j=1,ny
(   50)     do i=1,nx
(   51)       dudt(i,j,k,na)= dudt(i,j,k,na)-(u(i,j,k)-u0(k)) * tau(k)
(   52)       dvdt(i,j,k,na)= dvdt(i,j,k,na)-(v(i,j,k)-v0(k)) * tau(k)
(   53)       dwdt(i,j,k,na)= dwdt(i,j,k,na)-w(i,j,k) * tau(k)
(   54) !      t(i,j,k)= t(i,j,k)-dtn*(t(i,j,k)-t0(k)) * tau(k)
(   55) !      micro_field(i,j,k,index_water_vapor)= micro_field(i,j,k,index_water_vapor)- &
(   56) !                                    dtn*(qv(i,j,k)+qcl(i,j,k)+qci(i,j,k)-q0(k)) * tau(k)
(   57)     end do! i 
(   58)    end do! j
(   59) end do ! k
(   60) 
(   61) end subroutine damping

































NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 4

(    1) # 1 "damping.F90"
(    1) # 2 "damping.F90"
(    2) subroutine damping
(    3) # 4 "damping.F90"
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) # 14 "damping.F90"
(   14) !  "Spange"-layer damping at the domain top region
(   15) # 16 "damping.F90"
(   16) use vars
(   17) use real_size
(   18) use microphysics, only: micro_field, index_water_vapor
(   19) implicit none
(   20) # 21 "damping.F90"
(   21) real(RR) tau_min    ! minimum damping time-scale (at the top)
(   22) real(RR) tau_max    ! maxim damping time-scale (base of damping layer)
(   23) real(RR) damp_depth ! damping depth as a fraction of the domain height
(   24) !parameter(tau_min=60., tau_max=450., damp_depth=0.4)
(   25) real(RR) tau(nzm)   
(   26) integer i, j, k, n_damp
(   27) # 28 "damping.F90"
(   28) tau_min = 3.*dt
(   29) tau_max = 22.*dt
(   30) damp_depth = 0.4
(   31) # 32 "damping.F90"
(   32) if(tau_min.lt.2*dt) then
(   33)    print*,'Error: in damping() tau_min is too small!'
(   34)    call task_abort('damping:')
(   35) end if
(   36) # 37 "damping.F90"
(   37) do k=nzm,1,-1
(   38)  if(z(nzm)-z(k).lt.damp_depth*z(nzm)) then 
(   39)    n_damp=nzm-k+1
(   40)  endif
(   41) end do
(   42) # 43 "damping.F90"
(   43) do k=nzm,nzm-n_damp,-1
(   44)  tau(k) = tau_min *(tau_max/tau_min)**((z(nzm)-z(k))/(z(nzm)-z(nzm-n_damp)))
(   45)  tau(k)=1./tau(k)
(   46) end do
(   47) # 48 "damping.F90"
(   48) do k = nzm, nzm-n_damp, -1
(   49)    do j=1,ny
(   50)     do i=1,nx
(   51)       dudt(i,j,k,na)= dudt(i,j,k,na)-(u(i,j,k)-u0(k)) * tau(k)
(   52)       dvdt(i,j,k,na)= dvdt(i,j,k,na)-(v(i,j,k)-v0(k)) * tau(k)
(   53)       dwdt(i,j,k,na)= dwdt(i,j,k,na)-w(i,j,k) * tau(k)
(   54) !      t(i,j,k)= t(i,j,k)-dtn*(t(i,j,k)-t0(k)) * tau(k)
(   55) !      micro_field(i,j,k,index_water_vapor)= micro_field(i,j,k,index_water_vapor)- &
(   56) !                                    dtn*(qv(i,j,k)+qcl(i,j,k)+qci(i,j,k)-q0(k)) * tau(k)
(   57)     end do! i 






NVFORTRAN (Version     23.1)          02/24/2023  13:58:30      page 5

(   58)    end do! j
(   59) end do ! k
(   60) # 61 "damping.F90"
(   61) end subroutine damping
