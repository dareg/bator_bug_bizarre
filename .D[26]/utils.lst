


NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: utils.F90

(    1) integer function lenstr (string)
(    2) 
(    3) !************* LICENSE START *****************
(    4) !
(    5) ! Copyright 2015 Marat Khairoutdinov 
(    6) ! School of Marine & Atmospheric Sciences
(    7) ! Stony Brook University
(    8) ! This software is distributed under the terms of
(    9) ! the Apache License version 2.0.
(   10) !
(   11) !************** LICENSE END ******************
(   12)       
(   13) ! returns string's length ignoring the rightmost blank and null characters
(   14) 
(   15) implicit none
(   16) character *(*) string
(   17) integer k
(   18) lenstr = 0
(   19) do k = 1,len(string)
(   20)  if (string(k:k).ne.' '.and.string(k:k).ne.char(0)) then
(   21)      lenstr = lenstr+1
(   22)  end if
(   23) end do
(   24) 111  return
(   25) end
(   26) 
(   27) 
(   28) 
(   29) subroutine averageXY(f,dimx1,dimx2,dimy1,dimy2,dimz,fm)
(   30) 






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 3

(   31) use grid
(   32) use real_size
(   33) implicit none
(   34) integer dimx1, dimx2, dimy1, dimy2, dimz
(   35) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz),fm(nzm), factor
(   36) integer i,j,k
(   37) factor = 1./(nx*ny)
(   38) do k =1,nzm
(   39)  fm(k) = 0.
(   40)  do j =1,ny
(   41)   do i =1,nx
(   42)     fm(k) = fm(k) + f(i,j,k)
(   43)   end do
(   44)  end do
(   45)  fm(k) = fm(k) * factor 
(   46) end do 
(   47) end
(   48) 
(   49) 
(   50) subroutine averageXY_MPI(f,dimx1,dimx2,dimy1,dimy2,dimz,fm)
(   51) 
(   52) use grid
(   53) use real_size
(   54) implicit none
(   55) integer dimx1, dimx2, dimy1, dimy2, dimz
(   56) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz),fm(nzm),fm1(nzm),factor
(   57) integer i,j,k
(   58) factor = 1./(nx*ny)
(   59) do k =1,nzm
(   60)  fm(k) = 0.
(   61)  do j =1,ny
(   62)   do i =1,nx
(   63)     fm(k) = fm(k) + f(i,j,k)
(   64)   end do
(   65)  end do
(   66)  fm(k) = fm(k) * factor 
(   67) end do 
(   68) if(dompi) then
(   69)  do k =1,nzm
(   70)    fm1(k) = fm(k)
(   71)  end do
(   72)  call task_sum_real(fm1,fm,nzm)
(   73)  do k=1,nzm
(   74)   fm(k)=fm(k)/float(nsubdomains)
(   75)  end do
(   76) endif
(   77) end
(   78) 
(   79) 
(   80) 
(   81) 
(   82) subroutine fminmax_print(name,f,dimx1,dimx2,dimy1,dimy2,dimz)
(   83) 
(   84) use grid
(   85) use real_size
(   86) implicit none
(   87) integer dimx1, dimx2, dimy1, dimy2, dimz
(   88) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz),fmn(nz),fmx(nz)






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 4

(   89) character *(*) name
(   90) real(RR) fmin(1),fmax(1),fff(1)
(   91) integer i,j,k
(   92) 
(   93) do k=1,dimz
(   94)  if(dimx2.eq.1.and.dimy2.eq.1) then
(   95)    fmn(k) = f(1,1,k)
(   96)    fmx(k) = f(1,1,k)
(   97)  else
(   98)    fmn(k) = 1.e30
(   99)    fmx(k) =-1.e30
(  100)    do j=1,ny
(  101)     do i=1,nx
(  102)      fmn(k) = min(fmn(k),f(i,j,k))
(  103)      fmx(k) = max(fmx(k),f(i,j,k))
(  104)     end do
(  105)    enddo
(  106)  end if
(  107) enddo
(  108) fmin(1) = 1.e30
(  109) fmax(1) =-1.e30
(  110) do k=1,dimz
(  111)  fmin(1) = min(fmin(1),fmn(k))
(  112)  fmax(1) = max(fmax(1),fmx(k))
(  113) end do
(  114) 
(  115) if(dompi) then
(  116)   fff(1)=fmax(1)
(  117)   call task_max_real(fff(1),fmax(1),1)
(  118)   fff(1)=fmin(1)
(  119)   call task_min_real(fff(1),fmin(1),1)
(  120) end if
(  121) if(masterproc) print *,name,fmin,fmax
(  122) end
(  123) 
(  124) 
(  125) 
(  126) 
(  127) subroutine setvalue(f,n,f0)
(  128) use real_size
(  129) implicit none
(  130) integer n
(  131) real(RR) f(n), f0
(  132) integer k
(  133) do k=1,n
(  134)  f(k)=f0
(  135) end do
(  136) end
















NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 5

(    1) # 1 "utils.F90"
(    1) integer function lenstr (string)
(    2) # 3 "utils.F90"
(    3) !************* LICENSE START *****************
(    4) !
(    5) ! Copyright 2015 Marat Khairoutdinov 
(    6) ! School of Marine & Atmospheric Sciences
(    7) ! Stony Brook University
(    8) ! This software is distributed under the terms of
(    9) ! the Apache License version 2.0.
(   10) !
(   11) !************** LICENSE END ******************
(   12)       
(   13) ! returns string's length ignoring the rightmost blank and null characters
(   14) # 15 "utils.F90"
(   15) implicit none
(   16) character *(*) string
(   17) integer k
(   18) lenstr = 0
(   19) do k = 1,len(string)
(   20)  if (string(k:k).ne.' '.and.string(k:k).ne.char(0)) then
(   21)      lenstr = lenstr+1
(   22)  end if
(   23) end do
(   24) 111  return
(   25) end
(   26) # 29 "utils.F90"
(   29) subroutine averageXY(f,dimx1,dimx2,dimy1,dimy2,dimz,fm)
(   30) # 31 "utils.F90"
(   31) use grid
(   32) use real_size
(   33) implicit none
(   34) integer dimx1, dimx2, dimy1, dimy2, dimz
(   35) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz),fm(nzm), factor
(   36) integer i,j,k
(   37) factor = 1./(nx*ny)
(   38) do k =1,nzm
(   39)  fm(k) = 0.
(   40)  do j =1,ny
(   41)   do i =1,nx
(   42)     fm(k) = fm(k) + f(i,j,k)
(   43)   end do
(   44)  end do
(   45)  fm(k) = fm(k) * factor 
(   46) end do 
(   47) end
(   48) # 50 "utils.F90"
(   50) subroutine averageXY_MPI(f,dimx1,dimx2,dimy1,dimy2,dimz,fm)
(   51) # 52 "utils.F90"
(   52) use grid
(   53) use real_size
(   54) implicit none
(   55) integer dimx1, dimx2, dimy1, dimy2, dimz
(   56) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz),fm(nzm),fm1(nzm),factor
(   57) integer i,j,k
(   58) factor = 1./(nx*ny)
(   59) do k =1,nzm
(   60)  fm(k) = 0.






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 6

(   61)  do j =1,ny
(   62)   do i =1,nx
(   63)     fm(k) = fm(k) + f(i,j,k)
(   64)   end do
(   65)  end do
(   66)  fm(k) = fm(k) * factor 
(   67) end do 
(   68) if(dompi) then
(   69)  do k =1,nzm
(   70)    fm1(k) = fm(k)
(   71)  end do
(   72)  call task_sum_real(fm1,fm,nzm)
(   73)  do k=1,nzm
(   74)   fm(k)=fm(k)/float(nsubdomains)
(   75)  end do
(   76) endif
(   77) end
(   78) # 82 "utils.F90"
(   82) subroutine fminmax_print(name,f,dimx1,dimx2,dimy1,dimy2,dimz)
(   83) # 84 "utils.F90"
(   84) use grid
(   85) use real_size
(   86) implicit none
(   87) integer dimx1, dimx2, dimy1, dimy2, dimz
(   88) real(RR) f(dimx1:dimx2, dimy1:dimy2, dimz),fmn(nz),fmx(nz)
(   89) character *(*) name
(   90) real(RR) fmin(1),fmax(1),fff(1)
(   91) integer i,j,k
(   92) # 93 "utils.F90"
(   93) do k=1,dimz
(   94)  if(dimx2.eq.1.and.dimy2.eq.1) then
(   95)    fmn(k) = f(1,1,k)
(   96)    fmx(k) = f(1,1,k)
(   97)  else
(   98)    fmn(k) = 1.e30
(   99)    fmx(k) =-1.e30
(  100)    do j=1,ny
(  101)     do i=1,nx
(  102)      fmn(k) = min(fmn(k),f(i,j,k))
(  103)      fmx(k) = max(fmx(k),f(i,j,k))
(  104)     end do
(  105)    enddo
(  106)  end if
(  107) enddo
(  108) fmin(1) = 1.e30
(  109) fmax(1) =-1.e30
(  110) do k=1,dimz
(  111)  fmin(1) = min(fmin(1),fmn(k))
(  112)  fmax(1) = max(fmax(1),fmx(k))
(  113) end do
(  114) # 115 "utils.F90"
(  115) if(dompi) then
(  116)   fff(1)=fmax(1)
(  117)   call task_max_real(fff(1),fmax(1),1)
(  118)   fff(1)=fmin(1)
(  119)   call task_min_real(fff(1),fmin(1),1)
(  120) end if
(  121) if(masterproc) print *,name,fmin,fmax






NVFORTRAN (Version     23.1)          02/24/2023  13:54:12      page 7

(  122) end
(  123) # 127 "utils.F90"
(  127) subroutine setvalue(f,n,f0)
(  128) use real_size
(  129) implicit none
(  130) integer n
(  131) real(RR) f(n), f0
(  132) integer k
(  133) do k=1,n
(  134)  f(k)=f0
(  135) end do
(  136) end
