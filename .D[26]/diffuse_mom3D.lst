


NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 1

Switches: -noasm -nodclchk -debug -nodlines -line -list
          -idir .D[1]
          -idir .D[2]
          -idir .D[3]
          -idir .D[4]
          -idir .D[5]
          -idir .D[6]
          -idir .D[7]
          -idir .D[8]
          -idir .D[9]
          -idir .D[10]
          -idir .D[11]
          -idir .D[12]
          -idir .D[13]
          -idir .D[14]
          -idir .D[15]
          -idir .D[16]
          -idir .D[17]
          -idir .D[18]
          -idir .D[19]
          -idir .D[20]
          -idir .D[21]
          -idir .D[22]
          -idir .D[23]
          -idir .D[24]
          -idir .D[25]
          -idir .D[26]
          -idir .D[27]
          -idir .D[28]
          -idir .D[29]
          -idir .D[30]
          -idir .D[31]
          -idir .D[32]
          -idir .D[33]
          -idir .D[34]
          -idir .D[35]
          -idir .D[36]
          -idir .D[37]
          -idir .D[38]
          -idir .D[39]
          -idir .D[40]
          -idir .D[41]
          -idir .D[42]
          -idir .D[43]
          -idir .D[44]
          -idir .D[45]
          -idir .D[46]
          -idir .D[47]
          -idir .D[48]
          -idir .D[49]
          -idir .D[50]
          -idir .D[51]
          -idir .D[52]
          -idir .D[53]
          -idir .D[54]
          -idir .D[55]
          -idir .D[56]
          -idir .D[57]






NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 2

          -idir .D[58]
          -idir .D[59]
          -idir .D[60]
          -idir .D[61]
          -idir .D[62]
          -idir .D[63]
          -idir .D[64]
          -idir .D[65]
          -idir .D[66]
          -idir .D[67]
          -idir .D[68]
          -idir .D[69]
          -idir .D[70]
          -idir .D[71]
          -idir .D[72]
          -idir .D[73]
          -idir .D[74]
          -idir .D[75]
          -idir .D[76]
          -idir .D[77]
          -idir .D[78]
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/include
          -idir /opt/softs/nvidia/hpc_sdk/Linux_x86_64/23.1/comm_libs/openmpi/openmpi-3.1.5/lib
          -inform severe -opt 0 -nosave -object -noonetrip
          -depchk on -nostandard     
          -symbol -noupcase    

Filename: diffuse_mom3D.F90

(    1) 
(    2) subroutine diffuse_mom3D
(    3) 
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) 
(   14) !        momentum tendency due to SGS diffusion
(   15) 
(   16) use vars
(   17) use real_size
(   18) implicit none
(   19) 
(   20) real(RR) rdx2,rdy2,rdz2,rdz,rdx25,rdy25
(   21) real(RR) rdx21,rdy21,rdx251,rdy251,rdz25
(   22) real(RR) dxy,dxz,dyx,dyz,dzx,dzy
(   23) 
(   24) integer i,j,k,ic,ib,jb,jc,kc,kcu
(   25) real(RR) tkx, tky, tkz, rhoi, iadzw, iadz
(   26) real(RR) fu(0:nx,0:ny,nz),fv(0:nx,0:ny,nz),fw(0:nx,0:ny,nz)
(   27) 
(   28) rdx2=1./(dx*dx)
(   29) rdy2=1./(dy*dy)
(   30) 






NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 3

(   31) rdx25=0.25*rdx2
(   32) rdy25=0.25*rdy2
(   33) 
(   34) dxy=dx/dy
(   35) dxz=dx/dz
(   36) dyx=dy/dx
(   37) dyz=dy/dz
(   38) 
(   39) 
(   40) do k=1,nzm
(   41)  kc=k+1
(   42)  kcu=min(kc,nzm)
(   43)  dxz=dx/(dz*adzw(kc))
(   44)  dyz=dy/(dz*adzw(kc))
(   45)   rdx21=rdx2    * grdf_x(k)
(   46)   rdy21=rdy2    * grdf_y(k)
(   47)   rdx251=rdx25  * grdf_x(k)
(   48)   rdy251=rdy25  * grdf_y(k)
(   49)   do j=1,ny
(   50)    jb=j-1
(   51)    do i=0,nx
(   52)     ic=i+1
(   53)     tkx=rdx21*tk(i,j,k)
(   54)     fu(i,j,k)=-2.*tkx*(u(ic,j,k)-u(i,j,k))
(   55)     tkx=rdx251*(tk(i,j,k)+tk(i,jb,k)+tk(ic,j,k)+tk(ic,jb,k))
(   56)     fv(i,j,k)=-tkx*(v(ic,j,k)-v(i,j,k)+(u(ic,j,k)-u(ic,jb,k))*dxy)
(   57)     tkx=rdx251*(tk(i,j,k)+tk(ic,j,k)+tk(i,j,kcu)+tk(ic,j,kcu))
(   58)     fw(i,j,k)=-tkx*(w(ic,j,kc)-w(i,j,kc)+(u(ic,j,kcu)-u(ic,j,k))*dxz)
(   59)    end do 
(   60)    do i=1,nx
(   61)     ib=i-1
(   62)     dudt(i,j,k,na)=dudt(i,j,k,na)-(fu(i,j,k)-fu(ib,j,k))
(   63)     dvdt(i,j,k,na)=dvdt(i,j,k,na)-(fv(i,j,k)-fv(ib,j,k))
(   64)     dwdt(i,j,kc,na)=dwdt(i,j,kc,na)-(fw(i,j,k)-fw(ib,j,k))
(   65)    end do  
(   66)   end do 
(   67) 
(   68)   do j=0,ny
(   69)    jc=j+1
(   70)    do i=1,nx
(   71)     ib=i-1
(   72)     tky=rdy21*tk(i,j,k)
(   73)     fv(i,j,k)=-2.*tky*(v(i,jc,k)-v(i,j,k))
(   74)     tky=rdy251*(tk(i,j,k)+tk(ib,j,k)+tk(i,jc,k)+tk(ib,jc,k))
(   75)     fu(i,j,k)=-tky*(u(i,jc,k)-u(i,j,k)+(v(i,jc,k)-v(ib,jc,k))*dyx)
(   76)     tky=rdy251*(tk(i,j,k)+tk(i,jc,k)+tk(i,j,kcu)+tk(i,jc,kcu))
(   77)     fw(i,j,k)=-tky*(w(i,jc,kc)-w(i,j,kc)+(v(i,jc,kcu)-v(i,jc,k))*dyz)
(   78)    end do 
(   79)   end do 
(   80)   do j=1,ny
(   81)     jb=j-1
(   82)     do i=1,nx
(   83)      dudt(i,j,k,na)=dudt(i,j,k,na)-(fu(i,j,k)-fu(i,jb,k))
(   84)      dvdt(i,j,k,na)=dvdt(i,j,k,na)-(fv(i,j,k)-fv(i,jb,k))
(   85)      dwdt(i,j,kc,na)=dwdt(i,j,kc,na)-(fw(i,j,k)-fw(i,jb,k))
(   86)    end do 
(   87)   end do 
(   88) 






NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 4

(   89) end do 
(   90)  
(   91) !-------------------------
(   92) rdz=1./dz
(   93) dzx=dz/dx
(   94) dzy=dz/dy
(   95) 
(   96) do k=1,nzm-1
(   97)  kc=k+1
(   98) ! uwsb(kc)=0.
(   99) ! vwsb(kc)=0.
(  100)  iadz = 1./adz(k)
(  101)  iadzw= 1./adzw(kc)
(  102)  rdz2 = rdz*rdz * grdf_z(k)
(  103)  rdz25 = 0.25*rdz2
(  104)   do j=1,ny
(  105)    jb=j-1
(  106)    do i=1,nx
(  107)     ib=i-1
(  108)     tkz=rdz2*tk(i,j,k)
(  109)     fw(i,j,kc)=-2.*tkz*(w(i,j,kc)-w(i,j,k))*rho(k)*iadz
(  110)     tkz=rdz25*(tk(i,j,k)+tk(ib,j,k)+tk(i,j,kc)+tk(ib,j,kc))
(  111)     fu(i,j,kc)=-tkz*( (u(i,j,kc)-u(i,j,k))*iadzw + &
(  112)                        (w(i,j,kc)-w(ib,j,kc))*dzx)*rhow(kc)
(  113)     tkz=rdz25*(tk(i,j,k)+tk(i,jb,k)+tk(i,j,kc)+tk(i,jb,kc))
(  114)     fv(i,j,kc)=-tkz*( (v(i,j,kc)-v(i,j,k))*iadzw + &
(  115)                        (w(i,j,kc)-w(i,jb,kc))*dzy)*rhow(kc)
(  116)     uwsb(kc)=uwsb(kc)+fu(i,j,kc)
(  117)     vwsb(kc)=vwsb(kc)+fv(i,j,kc)
(  118)   end do 
(  119)  end do
(  120) end do
(  121) 
(  122) !uwsb(1) = 0.
(  123) !vwsb(1) = 0.
(  124) 
(  125) do j=1,ny
(  126)  do i=1,nx
(  127)    tkz=rdz2*grdf_z(nzm)*tk(i,j,nzm)
(  128)    fw(i,j,nz)=-2.*tkz*(w(i,j,nz)-w(i,j,nzm))/adz(nzm)*rho(nzm)
(  129)    fu(i,j,1)=fluxbu(i,j) * rdz * rhow(1)
(  130)    fv(i,j,1)=fluxbv(i,j) * rdz * rhow(1)
(  131)    fu(i,j,nz)=fluxtu(i,j) * rdz * rhow(nz)
(  132)    fv(i,j,nz)=fluxtv(i,j) * rdz * rhow(nz)
(  133)    uwsb(1) = uwsb(1) + fu(i,j,1)
(  134)    vwsb(1) = vwsb(1) + fv(i,j,1)
(  135)   end do
(  136)  end do
(  137)  
(  138)  do k=1,nzm
(  139)   kc=k+1
(  140)   rhoi = 1./(rho(k)*adz(k))
(  141)   do j=1,ny
(  142)    do i=1,nx
(  143)     dudt(i,j,k,na)=dudt(i,j,k,na)-(fu(i,j,kc)-fu(i,j,k))*rhoi
(  144)     dvdt(i,j,k,na)=dvdt(i,j,k,na)-(fv(i,j,kc)-fv(i,j,k))*rhoi
(  145)    end do
(  146)   end do






NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 5

(  147)  end do ! k
(  148) 
(  149)  do k=2,nzm
(  150)   rhoi = 1./(rhow(k)*adzw(k))
(  151)   do j=1,ny
(  152)    do i=1,nx
(  153)     dwdt(i,j,k,na)=dwdt(i,j,k,na)-(fw(i,j,k+1)-fw(i,j,k))*rhoi
(  154)    end do
(  155)   end do
(  156)  end do ! k
(  157) 
(  158) 
(  159) end subroutine diffuse_mom3D



















































NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 6

(    1) # 1 "diffuse_mom3D.F90"
(    1) # 2 "diffuse_mom3D.F90"
(    2) subroutine diffuse_mom3D
(    3) # 4 "diffuse_mom3D.F90"
(    4) !************* LICENSE START *****************
(    5) !
(    6) ! Copyright 2015 Marat Khairoutdinov 
(    7) ! School of Marine & Atmospheric Sciences
(    8) ! Stony Brook University
(    9) ! This software is distributed under the terms of
(   10) ! the Apache License version 2.0.
(   11) !
(   12) !************** LICENSE END ******************
(   13) # 14 "diffuse_mom3D.F90"
(   14) !        momentum tendency due to SGS diffusion
(   15) # 16 "diffuse_mom3D.F90"
(   16) use vars
(   17) use real_size
(   18) implicit none
(   19) # 20 "diffuse_mom3D.F90"
(   20) real(RR) rdx2,rdy2,rdz2,rdz,rdx25,rdy25
(   21) real(RR) rdx21,rdy21,rdx251,rdy251,rdz25
(   22) real(RR) dxy,dxz,dyx,dyz,dzx,dzy
(   23) # 24 "diffuse_mom3D.F90"
(   24) integer i,j,k,ic,ib,jb,jc,kc,kcu
(   25) real(RR) tkx, tky, tkz, rhoi, iadzw, iadz
(   26) real(RR) fu(0:nx,0:ny,nz),fv(0:nx,0:ny,nz),fw(0:nx,0:ny,nz)
(   27) # 28 "diffuse_mom3D.F90"
(   28) rdx2=1./(dx*dx)
(   29) rdy2=1./(dy*dy)
(   30) # 31 "diffuse_mom3D.F90"
(   31) rdx25=0.25*rdx2
(   32) rdy25=0.25*rdy2
(   33) # 34 "diffuse_mom3D.F90"
(   34) dxy=dx/dy
(   35) dxz=dx/dz
(   36) dyx=dy/dx
(   37) dyz=dy/dz
(   38) # 40 "diffuse_mom3D.F90"
(   40) do k=1,nzm
(   41)  kc=k+1
(   42)  kcu=min(kc,nzm)
(   43)  dxz=dx/(dz*adzw(kc))
(   44)  dyz=dy/(dz*adzw(kc))
(   45)   rdx21=rdx2    * grdf_x(k)
(   46)   rdy21=rdy2    * grdf_y(k)
(   47)   rdx251=rdx25  * grdf_x(k)
(   48)   rdy251=rdy25  * grdf_y(k)
(   49)   do j=1,ny
(   50)    jb=j-1
(   51)    do i=0,nx
(   52)     ic=i+1
(   53)     tkx=rdx21*tk(i,j,k)
(   54)     fu(i,j,k)=-2.*tkx*(u(ic,j,k)-u(i,j,k))
(   55)     tkx=rdx251*(tk(i,j,k)+tk(i,jb,k)+tk(ic,j,k)+tk(ic,jb,k))
(   56)     fv(i,j,k)=-tkx*(v(ic,j,k)-v(i,j,k)+(u(ic,j,k)-u(ic,jb,k))*dxy)
(   57)     tkx=rdx251*(tk(i,j,k)+tk(ic,j,k)+tk(i,j,kcu)+tk(ic,j,kcu))
(   58)     fw(i,j,k)=-tkx*(w(ic,j,kc)-w(i,j,kc)+(u(ic,j,kcu)-u(ic,j,k))*dxz)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 7

(   59)    end do 
(   60)    do i=1,nx
(   61)     ib=i-1
(   62)     dudt(i,j,k,na)=dudt(i,j,k,na)-(fu(i,j,k)-fu(ib,j,k))
(   63)     dvdt(i,j,k,na)=dvdt(i,j,k,na)-(fv(i,j,k)-fv(ib,j,k))
(   64)     dwdt(i,j,kc,na)=dwdt(i,j,kc,na)-(fw(i,j,k)-fw(ib,j,k))
(   65)    end do  
(   66)   end do 
(   67) # 68 "diffuse_mom3D.F90"
(   68)   do j=0,ny
(   69)    jc=j+1
(   70)    do i=1,nx
(   71)     ib=i-1
(   72)     tky=rdy21*tk(i,j,k)
(   73)     fv(i,j,k)=-2.*tky*(v(i,jc,k)-v(i,j,k))
(   74)     tky=rdy251*(tk(i,j,k)+tk(ib,j,k)+tk(i,jc,k)+tk(ib,jc,k))
(   75)     fu(i,j,k)=-tky*(u(i,jc,k)-u(i,j,k)+(v(i,jc,k)-v(ib,jc,k))*dyx)
(   76)     tky=rdy251*(tk(i,j,k)+tk(i,jc,k)+tk(i,j,kcu)+tk(i,jc,kcu))
(   77)     fw(i,j,k)=-tky*(w(i,jc,kc)-w(i,j,kc)+(v(i,jc,kcu)-v(i,jc,k))*dyz)
(   78)    end do 
(   79)   end do 
(   80)   do j=1,ny
(   81)     jb=j-1
(   82)     do i=1,nx
(   83)      dudt(i,j,k,na)=dudt(i,j,k,na)-(fu(i,j,k)-fu(i,jb,k))
(   84)      dvdt(i,j,k,na)=dvdt(i,j,k,na)-(fv(i,j,k)-fv(i,jb,k))
(   85)      dwdt(i,j,kc,na)=dwdt(i,j,kc,na)-(fw(i,j,k)-fw(i,jb,k))
(   86)    end do 
(   87)   end do 
(   88) # 89 "diffuse_mom3D.F90"
(   89) end do 
(   90)  
(   91) !-------------------------
(   92) rdz=1./dz
(   93) dzx=dz/dx
(   94) dzy=dz/dy
(   95) # 96 "diffuse_mom3D.F90"
(   96) do k=1,nzm-1
(   97)  kc=k+1
(   98) ! uwsb(kc)=0.
(   99) ! vwsb(kc)=0.
(  100)  iadz = 1./adz(k)
(  101)  iadzw= 1./adzw(kc)
(  102)  rdz2 = rdz*rdz * grdf_z(k)
(  103)  rdz25 = 0.25*rdz2
(  104)   do j=1,ny
(  105)    jb=j-1
(  106)    do i=1,nx
(  107)     ib=i-1
(  108)     tkz=rdz2*tk(i,j,k)
(  109)     fw(i,j,kc)=-2.*tkz*(w(i,j,kc)-w(i,j,k))*rho(k)*iadz
(  110)     tkz=rdz25*(tk(i,j,k)+tk(ib,j,k)+tk(i,j,kc)+tk(ib,j,kc))
(  111)     fu(i,j,kc)=-tkz*( (u(i,j,kc)-u(i,j,k))*iadzw + &
(  112)                        (w(i,j,kc)-w(ib,j,kc))*dzx)*rhow(kc)
(  113)     tkz=rdz25*(tk(i,j,k)+tk(i,jb,k)+tk(i,j,kc)+tk(i,jb,kc))
(  114)     fv(i,j,kc)=-tkz*( (v(i,j,kc)-v(i,j,k))*iadzw + &
(  115)                        (w(i,j,kc)-w(i,jb,kc))*dzy)*rhow(kc)
(  116)     uwsb(kc)=uwsb(kc)+fu(i,j,kc)






NVFORTRAN (Version     23.1)          02/24/2023  13:57:27      page 8

(  117)     vwsb(kc)=vwsb(kc)+fv(i,j,kc)
(  118)   end do 
(  119)  end do
(  120) end do
(  121) # 122 "diffuse_mom3D.F90"
(  122) !uwsb(1) = 0.
(  123) !vwsb(1) = 0.
(  124) # 125 "diffuse_mom3D.F90"
(  125) do j=1,ny
(  126)  do i=1,nx
(  127)    tkz=rdz2*grdf_z(nzm)*tk(i,j,nzm)
(  128)    fw(i,j,nz)=-2.*tkz*(w(i,j,nz)-w(i,j,nzm))/adz(nzm)*rho(nzm)
(  129)    fu(i,j,1)=fluxbu(i,j) * rdz * rhow(1)
(  130)    fv(i,j,1)=fluxbv(i,j) * rdz * rhow(1)
(  131)    fu(i,j,nz)=fluxtu(i,j) * rdz * rhow(nz)
(  132)    fv(i,j,nz)=fluxtv(i,j) * rdz * rhow(nz)
(  133)    uwsb(1) = uwsb(1) + fu(i,j,1)
(  134)    vwsb(1) = vwsb(1) + fv(i,j,1)
(  135)   end do
(  136)  end do
(  137)  
(  138)  do k=1,nzm
(  139)   kc=k+1
(  140)   rhoi = 1./(rho(k)*adz(k))
(  141)   do j=1,ny
(  142)    do i=1,nx
(  143)     dudt(i,j,k,na)=dudt(i,j,k,na)-(fu(i,j,kc)-fu(i,j,k))*rhoi
(  144)     dvdt(i,j,k,na)=dvdt(i,j,k,na)-(fv(i,j,kc)-fv(i,j,k))*rhoi
(  145)    end do
(  146)   end do
(  147)  end do ! k
(  148) # 149 "diffuse_mom3D.F90"
(  149)  do k=2,nzm
(  150)   rhoi = 1./(rhow(k)*adzw(k))
(  151)   do j=1,ny
(  152)    do i=1,nx
(  153)     dwdt(i,j,k,na)=dwdt(i,j,k,na)-(fw(i,j,k+1)-fw(i,j,k))*rhoi
(  154)    end do
(  155)   end do
(  156)  end do ! k
(  157) # 159 "diffuse_mom3D.F90"
(  159) end subroutine diffuse_mom3D
